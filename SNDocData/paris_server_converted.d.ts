/**
	 * @description Enables handling data for URLs in a UI action script.
	 * Use the Action API to configure UI actions with which users can interact. Use these scripts in the UI Action \[sys\_ui\_action\] table. For information, see [UI actions](https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/list-administration/task/t_EditingAUIAction.html).	
 * 	
 * Action methods are referred to by the variable name 'action' in any server-side JavaScript. To learn more, see [Creating interactions with UI actions](https://developer.servicenow.com/blog.do?p=/post/training-ui-action-101/).
	 * 
	 */
	declare class Action {
	/**
	 * @description Gets a GlideURI object to determine the user view.
	 * @example
	 * //The following example shows how to get the user view and set the redirect URL to the service catalog home page.
	 * var uri = action.getGlideURI();
	 * var path = 'catalog_home.do';
	 * 
	 * uri.set('sysparm_view', 'catalog_default');
	 * action.setRedirectURL(uri.toString(path));
	 * 
	 * @returns GlideURI GlideURI object representing the URI parameter of the user view.  *   [GlideURI](dev.do#!/reference/api/paris/server/no-namespace/c_GlideURIScopedAPI "Enables handling the URI parameter in scoped applications.") *   [GlideURI - Global](https://developer.servicenow.com/go_to_api.do?ID=GlideURIGlobalAPI;v=paris)
	 * 
	 */
	getGlideURI() : GlideURI
	/**
	 * @description Gets the URL of the return page in view after a UI action is complete.
	 * @example
	 * //
	 * action.getReturnURL();
	 * 
	 * @returns string URL of the return page in view after a UI action is complete.
	 * 
	 */
	getReturnURL() : string
	/**
	 * @description Gets the value of a URL parameter.
	 * @example
	 * //
	 * action.getURLParameter('sysparm_query');
	 * 
	 * @param parameterName Name of the URL parameter name to be queried for the URL parameter value.
	 * 
	 * @returns string URL parameter value.
	 * 
	 */
	getURLParameter(parameterName: string) : string
	/**
	 * @description Opens a page with a GlideRecord in the user view.
	 * @example
	 * //The following example shows how to include the caller name and incident description created from an interaction record. For more details, see [Set up custom UI actions in Workspace](https://docs.servicenow.com/bundle/paris-servicenow-platform/page/administer/workspace/task/configure-agent-workspace-ui-actions.html).
	 * if(current.update()){
	 * 	var inc = new GlideRecord("incident");
	 * 	inc.newRecord();
	 * 	inc.caller_id = current.opened_for;
	 * 	inc.short_description = current.short_description;
	 * 	action.openGlideRecord(inc);
	 * }
	 * 
	 * @param gr GlideRecord of the page to be opened in the user view.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	openGlideRecord(gr: GlideRecord) : void
	/**
	 * @description Indicates whether to enable or disable pop-up windows on the page in the current view.
	 * @example
	 * //The following example shows how to disable pop-up windows for a UI action.
	 * 
	 * action.setNoPop(true);
	 * 
	 * @param noPop Flag indicating whether to enable or disable pop-up windows on the page:  *   true: Disables pop-up windows. *   false: Default. Enables pop-up windows.
	 * 
	 * @returns None 
	 * 
	 */
	setNoPop(noPop: boolean) : None
	/**
	 * @description Sets the redirect URI for this transaction, which determines the next page the user sees.
	 * For use cases:
	 * 
	 * *   [Create a UI routing action](https://docs.servicenow.com/bundle/paris-application-development/page/script/useful-scripts/task/t_CreateAUIRoutingAction.html)
	 * *   [Create knowledge articles from HR cases](https://docs.servicenow.com/bundle/paris-servicenow-platform/page/product/knowledge-management/task/ui-action-hrcase-article.html)
	 * *   [Define task relationships with UI actions](https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/task-table/reference/r_UIActions.html)
	 * 
	 * @example
	 * //The following example shows how to redirect a user to a URL from a UI action using the [current](https://docs.servicenow.com/bundle/paris-application-development/page/script/server-scripting/concept/c_ScriptableServiceCatalogVariables.html) variable.
	 * var fixchg = new GlideRecord("change_request");
	 * fixchg.short_description= current.short_description;
	 * fixchg.comments= current.comments.getHTMLValue();
	 * // fixchg.parent = current.sys_id;
	 * fixchg.insert();
	 * FixChange();
	 *  
	 * gs.addInfoMessage("Change "+ fixchg.number+" created");
	 * action.setRedirectURL(current);
	 * action.setReturnURL(fixchg);
	 *  
	 * function FixChange(){
	 * var m2m = new GlideRecord('task_rel_task');
	 * m2m.initialize();
	 * m2m.child= current.sys_id;
	 * m2m.parent= fixchg.sys_id;
	 * m2m.type.setDisplayValue("Fixes::Fixed by");
	 * m2m.insert();}
	 * 
	 * @param URL URL to set as the redirect.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setRedirectURL(URL: Object) : void
	/**
	 * @description Sets the return URI for this transaction after a UI action is complete. You can use this method to determine what page the user has in view when they return from submit.
	 * @example
	 * //The following example enables the user to select the UI action to create a change record using information from the problem record and the change template. After the change, the user returns to [current](https://docs.servicenow.com/bundle/paris-application-development/page/script/server-scripting/concept/c_ScriptableServiceCatalogVariables.html) view. For more information, see [Scripted templates](https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/form-administration/reference/r_ScriptedTemplates.html). For more use cases, see [Define task relationships with UI actions](https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/task-table/reference/r_UIActions.html).
	 * var change = new GlideRecord("change_request");
	 * change.initialize();
	 * change.short_description = current.short_description;
	 * change.description = current.u_details;
	 * change.cmdb_ci = current.u_service;
	 * change.priority = current.priority;
	 * change.requested_by = current.caller_id;
	 * change.assignment_group.setDisplayValue('Change &amp; Release');
	 * change.u_status = 'New';
	 * change.parent = current.number;
	 * change.applyTemplate("standard_rfc");
	 * current.rfc = change.insert();
	 * current.comments = 'Change ' + change.number + ' created.';
	 * 
	 * var mySysID = current.update();
	 * 
	 * gs.addInfoMessage("Change " + change.number + " created");
	 * action.setRedirectURL(change);
	 * action.setReturnURL(current);
	 * 
	 * @param URL URI to set as the return location after a UI action is complete.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setReturnURL(URL: Object) : void
	/**
	 * @description Sets a URL parameter name and value.
	 * @example
	 * //
	 * action.setURLParameter('sysparm_query', 'priority=2^active=true');
	 * 
	 * @param parameterName Name of the URL parameter.
	 * @param parameterValue Value of the parameter.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setURLParameter(parameterName: string,parameterValue: string) : void
	}
/**
	 * @description APIs available for encrypting certificates in scoped applications.
	 * Use these methods to generate a hash for the certificate, sign data using a private key, and generate a message authentication code.
	 * 
	 */
	declare class CertificateEncryption {
	/**
	 * @description Instantiates a CertificateEncryption object in a scoped application.
	 */
	constructor() 
	/**
	 * @description Generates the Message Authentication Code (MAC), which is used to authenticate a message.
	 * @example
	 * //
	 * var mac = new CertificateEncryption;
	 * var key = "sample_key"; 
	 * key = gs.base64Encode(key);
	 * mac.generateMac(key, "HmacSHA256", "sample_data");
	 * 
	 * @param key Key to use to sign the message. Must be Base64 encoded.
	 * @param algorithm Algorithm to use to generate the MAC: HmacSHA256, HmacSHA1, HmacMD5, and so on.
	 * @param data Data to process.
	 * 
	 * @returns string MAC in base64 format.
	 * 
	 */
	generateMac(key: string,algorithm: string,data: string) : string
	/**
	 * @description Generates a hash (SHA-1, SHA-256, and so on) for the certificate from Trust Store Cert.
	 * @param certificateID sys\_id of the certificate record in the X.509 Certificate \[sys\_certificate\] table.
	 * @param algorithm SHA-1, SHA-256, and so on
	 * 
	 * @returns string Thumbprint in base64 format.
	 * 
	 */
	getThumbPrint(certificateID: string,algorithm: string) : string
	/**
	 * @description Generates a hash (SHA-1, SHA-256, and so on) for the certificate from the keystore entry.
	 * @param certificateID sys\_id of the certificate record in the X.509 Certificate \[sys\_certificate\] table.
	 * @param alias Alias name for the certificate.
	 * @param algorithm SHA-1, SHA-256, and so on.
	 * 
	 * @returns string Thumbprint in base64 format.
	 * 
	 */
	getThumbPrintFromKeystore(certificateID: string,alias: string,algorithm: string) : string
	/**
	 * @description Signs the data using the private key and the specified algorithm.
	 * @example
	 * //
	 * var ce = new CertificateEncryption;
	 * ce.sign("recordID", "alias", "password", "SHA1withRSA", "sign this data");
	 * 
	 * @param algorithm Algorithm to use. Must be one of the following values:  *   NONEwithRSA *   MD2withRSA *   MD5withRSA *   SHA1withRSA *   SHA224withRSA *   SHA256withRSA *   SHA384withRSA *   SHA512withRSA *   NONEwithDSA *   SHA1withDSA *   SHA224withDSA *   SHA256withDSA *   NONEwithECDSA *   SHA1withECDSA *   SHA224withECDSA *   SHA256withECDSA *   SHA384withECDSA *   SHA512withECDSA
	 * @param alias Private key name.
	 * @param aliaspassword Password for the private key.
	 * @param certificateID sys\_id of the certificate record in the X.509 Certificate \[sys\_certificate\] table.
	 * @param datatosign Data to sign.
	 * 
	 * @returns string Signed data in base64 format.
	 * 
	 */
	sign(algorithm: string,alias: string,aliaspassword: string,certificateID: string,datatosign: string) : string
	}
/**
	 * @description A FlowScriptAPI object allows you to access Flow Designer context details from script steps and inline scripts.
	 * You cannot instantiate objects of this type. Objects of this type are created automatically and are accessible only in script steps and inline scripts.
	 * 
	 */
	declare class FlowScriptAPIScoped {
	/**
	 * @description Returns the context ID of the running flow.
	 * @example
	 * //This example assumes you have created a flow containing a Log action. This inline script generates the content of the Log message.
	 * var contextId = FlowScriptAPI.getContextID();
	 * return contextId;
	 * 
	 * @returns string The sys\_id of the running flow.
	 * 
	 */
	getContextID() : string
	}
/**
	 * @description GlideAggregate enables you to easily create database aggregation queries.
	 * The scoped GlideAggregate class is an extension of GlideRecord and provides database aggregation (COUNT, SUM, MIN, MAX, AVG) queries. This functionality can be helpful when creating customized reports or in calculations for calculated fields. The GlideAggregate class works only on number fields.  	
 *   	
 * When you use GlideAggregate on currency or price fields, you are working with the reference currency value. Be sure to convert the aggregate values to the user's session currency for display. Because the conversion rate between the currency or price value (displayed value) and its reference [currency](https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/currency/concept/currency.html) value (aggregation value) might change, the result may not be what the user expects.  	
 *   	
 * 	
 * Note: When using an on-premise system, the database server time zone must be set to GMT/UTC for this class to work properly.
	 * 
	 */
	declare class GlideAggregate {
	/**
	 * @description Creates a GlideAggregate object on the specified table.
	 * @example
	 * //
	 * var count = new GlideAggregate('incident');
	 * 
	 * @param tableName Name of the table.
	 * 
	 */
	constructor(tableName: string) 
	/**
	 * @description Adds an aggregate.
	 * @example
	 * //
	 * var incidentGA = new GlideAggregate('incident');
	 * incidentGA.addQuery('category', 'software');
	 * incidentGA.setGroup(false);
	 * incidentGA.addAggregate('COUNT', 'sys_mod_count');
	 * incidentGA.addAggregate('SUM', 'sys_mod_count');
	 * incidentGA.addAggregate('AVG', 'sys_mod_count');
	 * incidentGA.addAggregate('MIN', 'sys_mod_count');
	 * incidentGA.addAggregate('MAX', 'sys_mod_count');
	 * incidentGA.query();
	 * if (incidentGA.next()) {
	 *   gs.info('COUNT: ' + incidentGA.getAggregate('COUNT', 'sys_mod_count'));
	 *   gs.info('SUM: ' + incidentGA.getAggregate('SUM', 'sys_mod_count'));
	 *   gs.info('AVG: ' + incidentGA.getAggregate('AVG', 'sys_mod_count'));
	 *   gs.info('MIN: ' + incidentGA.getAggregate('MIN', 'sys_mod_count'));
	 *   gs.info('MAX: ' + incidentGA.getAggregate('MAX', 'sys_mod_count'));
	 * }
	 * 
	 * @param agg Name of the aggregate to add. For example, COUNT, MIN, or MAX.
	 * @param name Optional. Name of the field to group the results of the aggregation by.  Default: Null
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	addAggregate(agg: string,name: string) : void
	/**
	 * @description Adds an encoded query to the other queries that may have been set for this aggregate.
	 * @example
	 * //
	 * //Number of incidents varies depending on the current state
	 * //of the incident table
	 * var count = new GlideAggregate('incident');
	 * count.addEncodedQuery('active=true');
	 * count.addAggregate('COUNT');
	 * count.query();
	 * var incidents = 0;
	 * if (count.next())
	 *    incidents = count.getAggregate('COUNT');
	 * gs.info(incidents);
	 * 
	 * @param query An encoded query to add to the aggregate.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	addEncodedQuery(query: string) : void
	/**
	 * @description Adds a query to the aggregate.
	 * @example
	 * //
	 * //Number of incidents varies depending on the current state
	 * //of the incident table
	 * var count = new GlideAggregate('incident');
	 * count.addQuery('active', '=','true');
	 * count.addAggregate('COUNT', 'category');
	 * count.query();  
	 * while (count.next()) {
	 *    var category = count.category;
	 *    var categoryCount = count.getAggregate('COUNT', 'category');
	 *    gs.info("There are currently " + categoryCount + " incidents with a category of " + category);
	 * }
	 * 
	 * @param name The query to add.
	 * @param operator The operator for the query.
	 * @param value The list of values to include in the query.
	 * 
	 * @returns GlideQueryCondition The query condition.
	 * 
	 */
	addQuery(name: string,operator: string,value: string) : GlideQueryCondition
	/**
	 * @description Adds a not null query to the aggregate.
	 * @example
	 * //
	 * var count = new GlideAggregate('incident');
	 *   count.addNotNullQuery('short_description');
	 *   count.query();   // Issue the query to the database to get all records
	 *   while (count.next()) {   
	 *      // add code here to process the aggregate
	 *   }
	 * 
	 * @param fieldname The name of the field.
	 * 
	 * @returns GlideQueryCondition The scoped query condition.
	 * 
	 */
	addNotNullQuery(fieldname: string) : GlideQueryCondition
	/**
	 * @description Adds a null query to the aggregate.
	 * @example
	 * //
	 * var count = new GlideAggregate('incident');
	 *   count.addNullQuery('short_description');
	 *   count.query();   // Issue the query to the database to get all records
	 *   while (count.next()) {   
	 *      // add code here to process the aggregate
	 *   }
	 * 
	 * @param fieldName The name of the field.
	 * 
	 * @returns GlideQueryCondition The scoped query condition.
	 * 
	 */
	addNullQuery(fieldName: string) : GlideQueryCondition
	/**
	 * @description Adds a trend for a specified field.
	 * @example
	 * //
	 * var ga = new GlideAggregate('incident');
	 * ga.addAggregate('COUNT'); // Count all incidents opened each quarter
	 * ga.addTrend('opened_at', 'quarter');
	 * ga.query();
	 * while(ga.next()) {
	 * gs.info([ga.getValue('timeref'), ga.getAggregate('COUNT')]);
	 * }
	 * 
	 * @param fieldName Name of the field for which trending should occur.
	 * @param timeInterval Time interval for the trend.  Valid values:  *   date *   dayofweek *   hour *   quarter *   value *   week *   year
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	addTrend(fieldName: string,timeInterval: string) : void
	/**
	 * @description Returns the value of an aggregate from the current record.
	 * @example
	 * //Shows an aggregation that returns the number of records in the Incident table.
	 * var count = new GlideAggregate('incident');
	 * count.addAggregate('COUNT');
	 * count.query();
	 * var incidents = 0;
	 * if (count.next()) {
	 *   incidents = count.getAggregate('COUNT');
	 * }
	 * //Number of incidents varies depending on the current state
	 * //of the incident table
	 * gs.info('Number of incidents: ' + incidents);
	 * 
	 * @example
	 * //Shows the aggregation of an FX Currency field.
	 * var ga = new GlideAggregate('laptop_tracker');
	 * ga.addAggregate('SUM', 'cost');
	 * ga.groupBy('name');
	 * ga.query();
	 * while (ga.next()) {
	 *   gs.info('Aggregate results ' + ga.getValue('name') + ' =&gt; ' + ga.getAggregate('SUM', 'cost'));
	 * }
	 * 
	 * @param agg The type of the aggregate. For example, SUM or COUNT.
	 * @param name Name of the field on which to perform the aggregation.
	 * 
	 * @returns string The value of the aggregation.  If the values being aggregated are FX Currency values, the returned value is in the format <currency\_code;currency\_value>, such as: USD;134.980000.  Note: If the specified field contains FX Currency values of mixed currency types, the method is not able to aggregate the values and returns a semicolon (;).
	 * 
	 */
	getAggregate(agg: string,name: string) : string
	/**
	 * @description Gets the query necessary to return the current aggregate.
	 * @example
	 * //
	 * var count = new GlideAggregate('incident');
	 * count.addAggregate('MIN', 'sys_mod_count');
	 * count.groupBy('category');
	 * count.query();  
	 * while (count.next()) {
	 *     gs.info(count.getAggregateEncodedQuery());
	 * }
	 * 
	 * @returns string The encoded query to get the aggregate.
	 * 
	 */
	getAggregateEncodedQuery() : string
	/**
	 * @description Retrieves the encoded query.
	 * @example
	 * //
	 * var count = new GlideAggregate('incident');
	 * count.addAggregate('MIN', 'sys_mod_count');
	 * count.addAggregate('MAX', 'sys_mod_count');
	 * count.addAggregate('AVG', 'sys_mod_count');
	 * count.groupBy('category');
	 * count.query();
	 * gs.info(count.getEncodedQuery());
	 * 
	 * @returns string The encoded query.
	 * 
	 */
	getEncodedQuery() : string
	/**
	 * @description Retrieves the number of rows in the GlideAggregate object.
	 * @example
	 * //
	 * var count = new GlideAggregate('incident');
	 *   count.addAggregate('MIN', 'sys_mod_count');
	 *   count.addAggregate('MAX', 'sys_mod_count');
	 *   count.addAggregate('AVG', 'sys_mod_count');
	 *   count.groupBy('category');
	 *   count.query();
	 *   gs.info(count.getRowCount());
	 *   while (count.next()) {  
	 *      var min = count.getAggregate('MIN', 'sys_mod_count');
	 *      var max = count.getAggregate('MAX', 'sys_mod_count');
	 *      var avg = count.getAggregate('AVG', 'sys_mod_count');
	 *      var category = count.category.getDisplayValue();
	 *      gs.info(category + " Update counts: MIN = " + min + " MAX = " + max + " AVG = " + avg);
	 *   }
	 * 
	 * @returns number The number of rows in the GlideAggregate object.
	 * 
	 */
	getRowCount() : number
	/**
	 * @description Retrieves the table name associated with this GlideAggregate object.
	 * @example
	 * //
	 * var count = new GlideAggregate('incident');
	 * count.addAggregate('MIN', 'sys_mod_count');
	 * count.addAggregate('MAX', 'sys_mod_count');
	 * count.addAggregate('AVG', 'sys_mod_count');
	 * count.groupBy('category');
	 * count.query();
	 * gs.info(count.getTableName());
	 * 
	 * @returns string The table name.
	 * 
	 */
	getTableName() : string
	/**
	 * @description Gets the value of a field.
	 * @example
	 * //
	 * var count = new GlideAggregate('incident');
	 *   count.addAggregate('MIN', 'sys_mod_count');
	 *   count.addAggregate('MAX', 'sys_mod_count');
	 *   count.addAggregate('AVG', 'sys_mod_count');
	 *   count.groupBy('category');
	 *   count.query();   
	 *   while (count.next()) {  
	 *      var min = count.getAggregate('MIN', 'sys_mod_count');
	 *      var max = count.getAggregate('MAX', 'sys_mod_count');
	 *      var avg = count.getAggregate('AVG', 'sys_mod_count');
	 *      var category = count.category.getDisplayValue();
	 *   }
	 * gs.info("Current category is: " + count.getValue('category'));
	 * 
	 * @param name The name of the field.
	 * 
	 * @returns string The value of the field.
	 * 
	 */
	getValue(name: string) : string
	/**
	 * @description Provides the name of a field to use in grouping the aggregates.
	 * May be called numerous times to set multiple group fields.
	 * 
	 * @example
	 * //
	 * var count = new GlideAggregate('incident');
	 * count.addAggregate('MIN', 'sys_mod_count');
	 * count.addAggregate('MAX', 'sys_mod_count');
	 * count.addAggregate('AVG', 'sys_mod_count');
	 * count.groupBy('category');
	 * count.query();   
	 * while (count.next()) {  
	 *      var min = count.getAggregate('MIN', 'sys_mod_count');
	 *      var max = count.getAggregate('MAX', 'sys_mod_count');
	 *      var avg = count.getAggregate('AVG', 'sys_mod_count');
	 *      var category = count.category.getDisplayValue();
	 *      gs.info(category + " Update counts: MIN = " + min + " MAX = " + max + " AVG = " + avg);
	 * }
	 * 
	 * @param name Name of the field.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	groupBy(name: string) : void
	/**
	 * @description Determines if there are any more records in the GlideAggregate object.
	 * @example
	 * //
	 * var agg = new GlideAggregate('incident');
	 * agg.addAggregate('AVG', 'sys_mod_count');
	 * agg.groupBy('category');
	 * agg.query();
	 * while (agg.hasNext()) {
	 *     agg.next();
	 *     var avg = agg.getAggregate('AVG', 'sys_mod_count');
	 *     var category = agg.category.getDisplayValue();
	 *     gs.info(category + ': AVG = ' + avg);
	 * }
	 * 
	 * @returns boolean True if there are more results in the query set.
	 * 
	 */
	hasNext() : boolean
	/**
	 * @description Moves to the next record in the GlideAggregate.
	 * @example
	 * //
	 * var count = new GlideAggregate('incident');
	 * count.addAggregate('COUNT');
	 * count.query();
	 * var incidents = 0;
	 * if (count.next()) {
	 *    incidents = count.getAggregate('COUNT');
	 *    gs.info(incidents);
	 * }
	 * 
	 * @returns boolean True if there are more records in the query set; otherwise, false.
	 * 
	 */
	next() : boolean
	/**
	 * @description Orders the aggregates using the value of the specified field. The field will also be added to the group-by list.
	 * @example
	 * //
	 * var agg = new GlideAggregate('incident');
	 * agg.addAggregate('count', 'category'); 
	 * agg.orderBy('category'); 
	 * agg.query(); 
	 * while (agg.next()) { 
	 *   var category = agg.category;
	 *   var count = agg.getAggregate('count', 'category');
	 *   var agg2 = new GlideAggregate('incident');   
	 *   agg2.addAggregate('count', 'category');
	 *   agg2.orderBy('category');
	 *   gs.info(category + ": Current number of incidents:" + count);
	 * }
	 * 
	 * @param name Name of the field to order the aggregates by.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	orderBy(name: string) : void
	/**
	 * @description Orders the aggregates based on the specified aggregate and field.
	 * @example
	 * //
	 * ga.addAggregate(‘COUNT’, ‘category’);
	 *  
	 * ga.orderByAggregate('count', 'category');
	 *  
	 * ga.query();
	 *  
	 * while(ga.next()) {
	 *   gs.info(‘Category ’ + ga.category + ‘ ‘ + ga.getAggregate(‘COUNT’, ‘category’));
	 *   }
	 * 
	 * @param agg Type of aggregation.
	 * @param fieldName Name of the field to aggregate.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	orderByAggregate(agg: string,fieldName: string) : void
	/**
	 * @description Sorts the aggregates in descending order based on the specified field. The field will also be added to the group-by list.
	 * @example
	 * //
	 * var agg = new GlideAggregate('incident');
	 * agg.addAggregate('count', 'category'); 
	 * agg.orderByDesc('category'); 
	 * agg.query(); 
	 * while (agg.next()) { 
	 *   var category = agg.category;
	 *   var count = agg.getAggregate('count', 'category');
	 *   var agg2 = new GlideAggregate('incident');   
	 *   agg2.addAggregate('count', 'category');
	 *   agg2.orderBy('category');
	 *   gs.info(category + ": Current number of incidents:" + count);
	 * }
	 * 
	 * @param name Name of the field.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	orderByDesc(name: string) : void
	/**
	 * @description Issues the query and gets the results.
	 * @example
	 * //
	 * var count = new GlideAggregate('incident');
	 * count.addAggregate('COUNT');
	 * count.query();
	 * var incidents = 0;
	 * if (count.next()) {
	 *    incidents = count.getAggregate('COUNT');
	 * }
	 * gs.info('Number of incidents: ' + incidents);
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	query() : void
	/**
	 * @description Sets whether the results are to be grouped.
	 * @example
	 * //
	 * var ga = new GlideAggregate('incident');
	 * ga.addAggregate('COUNT', 'category');
	 *  
	 * ga.setGroup(true);
	 * ga.groupBy("category");
	 *  
	 * ga.query();
	 *  
	 * while(ga.next()) {
	 *   gs.info('Category ' + ga.category + ' ' + ga.getAggregate('COUNT', 'category'));
	 *   }
	 * 
	 * @param b When true the results are grouped.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setGroup(b: boolean) : void
	}
/**
	 * @description The GlideApplicationProperty API provides the ability to get and set application property values for a specific domain.
	 * Application properties enable service providers to customize application functionality based on the domain. Instead of only having a single system property (System Property \[sys\_properties\] table) that defines the functionality for all domains and users, application properties can be implemented to define functionality for specific domains.  	
 *   	
 * To access this API you must activate the Domain Support - Domain Extensions Installer (com.glide.domain.msp\_extensions.installer) plugin.  	
 *   	
 * For additional information on domain-specific application properties, see [Domain-separated application properties](https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/company-and-domain-separation/concept/ds-application-properties.html).
	 * 
	 */
	declare class GlideApplicationPropertyScopedGlobal {
	/**
	 * @description Returns the value for the specified application property and domain sys\_id.
	 * The list of available application properties is located in the Application Properties \[sys\_application\_property\] and Application Property Values \[sys\_application\_property\_value\] tables.
	 * 
	 * Note: If the specified domain is a child domain, and there is not an application property for the child domain, the method returns the parent domain application property, if available.
	 * 
	 * @example
	 * //This example shows how to create a new application property and override its value for ACME and Cisco domains.
	 * var MY_APP_PROP_NAME = 'my-app-prop';
	 * var ACME_DOMAIN_ID = 'c90d4b084a362312013398f051272c0d';
	 * var CISCO_DOMAIN_ID = 'c90f91924a362312001bdefae0f35d68';
	 * 
	 * // create a new app_config entry:
	 * var now_GR = new GlideRecord('sys_application_property');
	 * now_GR.name = MY_APP_PROP_NAME; 
	 * now_GR.default_value = 'my-app-prop-default_value'; 
	 * now_GR.insert();
	 * 
	 * // Override the value for ACME domain, catch exception if user can't access the specified domain
	 * try {
	 *   GlideApplicationProperty.setValue(MY_APP_PROP_NAME, 'prop-value-ACME', ACME_DOMAIN_ID);
	 *   gs.info('Value for ACME domain: ' + GlideApplicationProperty.getValue(MY_APP_PROP_NAME, ACME_DOMAIN_ID));
	 * } catch (ex) {
	 *   gs.info('Exception: ' + ex);
	 * }
	 * 
	 * // Override the value for Cisco domain -- assuming that the current session domain is Cisco. Notice that we don't pass domain-id explicitly
	 * session.setDomainID(CISCO_DOMAIN_ID); // NOTE: this API is not available from non-global scope (use domain-picker to switch to Cisco)
	 * gs.info('Domain: ' + session.getCurrentDomainID());
	 * GlideApplicationProperty.setValue(MY_APP_PROP_NAME, 'prop-value-Cisco');
	 * gs.info('Value for current session (Cisco) domain: ' + GlideApplicationProperty.getValue(MY_APP_PROP_NAME));
	 * 
	 * 
	 * @param name Name of the application property to return.  Note: If the application is not global, you must prefix the name of the sys\_application\_property with the application's scope.
	 * @param domainSysId Optional. Sys\_id of the domain associated with the application property.  Default: Session domain
	 * 
	 * @returns string Value of the specified application property for the specified domain. If domainSysId is not passed in the call, then returns the session domain.  If the specified application property doesn’t exist, returns the same-name system property value.  If the user does not have access rights to the specified domain, throws an exception and no value is returned.
	 * 
	 */
	getValue(name: string,domainSysId: string) : string
	/**
	 * @description Stores the specified value in the specified application property for the specified domain, or the current session domain if not specified.
	 * The following are guidelines for using this method:
	 * 
	 * *   The application property is not created if its name contains one of the following strings:
	 *     *   glide.properties.blacklist
	 *     *   glide.properties.no\_db\_override
	 *     *   glide.properties.safe\_overrides
	 *     *   glide.properties.maint\_write\_roles
	 * *   The application property is not created if there is an existing system property with the same name, and the system property is marked as private.
	 * *   The application property is not created if there is an existing system property and the application property does not reference it.
	 * *   The name of the application property in the sys\_application\_property table is prefixed with the application's scope if it is not global.
	 * *   This method cannot be called from a different scope.
	 * 
	 * @example
	 * //This example shows how to create a new application property and override its value for ACME and Cisco domains.
	 * var MY_APP_PROP_NAME = 'my-app-prop';
	 * var ACME_DOMAIN_ID = 'c90d4b084a362312013398f051272c0d';
	 * var CISCO_DOMAIN_ID = 'c90f91924a362312001bdefae0f35d68';
	 * 
	 * // create a new app_config entry:
	 * var now_GR = new GlideRecord('sys_application_property');
	 * now_GR.name = MY_APP_PROP_NAME; 
	 * now_GR.default_value = 'my-app-prop-default_value'; 
	 * now_GR.insert();
	 * 
	 * // Override the value for ACME domain, catch exception if user can't access the specified domain
	 * try {
	 *   GlideApplicationProperty.setValue(MY_APP_PROP_NAME, 'prop-value-ACME', ACME_DOMAIN_ID);
	 *   gs.info('Value for ACME domain: ' + GlideApplicationProperty.getValue(MY_APP_PROP_NAME, ACME_DOMAIN_ID));
	 * } catch (ex) {
	 *   gs.info('Exception: ' + ex);
	 * }
	 * 
	 * // Override the value for Cisco domain -- assuming that the current session domain is Cisco. Notice that we don't pass domain-id explicitly
	 * session.setDomainID(CISCO_DOMAIN_ID); // NOTE: this API is not available from non-global scope (use domain-picker to switch to Cisco)
	 * gs.info('Domain: ' + session.getCurrentDomainID());
	 * GlideApplicationProperty.setValue(MY_APP_PROP_NAME, 'prop-value-Cisco');
	 * gs.info('Value for current session (Cisco) domain: ' + GlideApplicationProperty.getValue(MY_APP_PROP_NAME));
	 * 
	 * 
	 * @param name Name of the application property to save.  Note: If the application is not global, you must prefix the name of the sys\_application\_property with the application's scope.
	 * @param value Value to store in the specified application property.
	 * @param domainSysId Optional. Sys\_id of the domain associated with the application property.  Default: Current session domain
	 * 
	 * @returns boolean Flag that indicates whether the save operation was successful.  Valid values:  *   true: Value was successfully saved. *   false: An error occurred and the application property was not created/updated.  If the user does not have access rights to the specified domain, throws an exception and no value is returned.
	 * 
	 */
	setValue(name: string,value: string,domainSysId: string) : boolean
	}
/**
	 * @description The GlideCalendarDateTime class provides methods for performing operations on GlideCalendarDateTime objects, such as instantiating GlideCalendarDateTime objects or working with glide\_date\_time fields.
	 * Use the GlideCalendarDateTime methods to perform date-time operations, such as instantiating a GlideCalendarDateTime object, performing date-time calculations, formatting a date-time, or converting between date-time formats.
	 * 
	 */
	declare class GlideCalendarDateTime {
	/**
	 * @description Adds a GlideTime object to the current GlideCalendarDateTime object.
	 * @example
	 * //
	 * var gcdt = new GlideCalendarDateTime("2011-08-31 08:00:00");
	 * var gtime1 = new GlideTime();
	 * gtime1.setValue("00:00:20");
	 * gcdt.add(gtime1);
	 * gs.info(gcdt.getTime());
	 * 
	 * @param time Time to add.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	add(time: GlideTime) : void
	/**
	 * @description Adds a specified number of milliseconds to the GlideCalendarDateTime object.
	 * @example
	 * //
	 * var gcdt = new GlideCalendarDateTime("2011-08-31 08:00:00");
	 * gs.info(gcdt.getNumericValue());
	 * gcdt.add(10);
	 * gs.info(gcdt.getNumericValue());
	 * 
	 * @param milliseconds Number of milliseconds to add
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	add(milliseconds: number) : void
	/**
	 * @description Adds a specified number of days to the current GlideCalendarDateTime object. A negative parameter subtracts days.
	 * The method determines the local date and time equivalent to the value stored by the GlideCalendarDateTime object, then adds or subtracts days using the local date and time values.
	 * 
	 * @example
	 * //
	 * var gcdt = new GlideCalendarDateTime("2011-08-31 08:00:00");
	 * gcdt.addDaysLocalTime(-1);
	 * gs.info(gcdt.getLocalDate());
	 * 
	 * @param days Number of days to add. Use a negative value to subtract.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	addDaysLocalTime(days: number) : void
	/**
	 * @description Adds a specified number of days to the current GlideCalendarDateTime object. A negative parameter subtracts days.
	 * The method determines the UTC date and time equivalent to the value stored by the GlideCalendarDateTime object, then adds or subtracts days using the UTC date and time values.
	 * 
	 * @example
	 * //
	 * var gcdt = new GlideCalendarDateTime("2011-08-31 08:00:00");
	 * gcdt.addDaysUTC(-1);
	 * gs.info(gcdt.getDate());
	 * 
	 * @param days Number of days to add. Use a negative value to subtract.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	addDaysUTC(days: number) : void
	/**
	 * @description Adds a specified number of months to the current GlideCalendarDateTime object. A negative parameter subtracts months.
	 * The method determines the local date and time equivalent to the value stored by the GlideCalendarDateTime object, then adds or subtracts months using the local date and time values.
	 * 
	 * @example
	 * //
	 * var gcdt = new GlideCalendarDateTime("2011-08-31 08:00:00");
	 * gcdt.addMonthsLocalTime(2);
	 * gs.info(gcdt.getDate());
	 * 
	 * @param months Number of months to add. Use a negative value to subtract.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	addMonthsLocalTime(months: number) : void
	/**
	 * @description Adds a specified number of months to the current GlideCalendarDateTime object. A negative parameter subtracts months.
	 * The method determines the UTC date and time equivalent to the value stored by the GlideCalendarDateTime object, then adds or subtracts months using the UTC date and time values.
	 * 
	 * @example
	 * //
	 * var gcdt = new GlideCalendarDateTime("2011-08-31 08:00:00");
	 * gcdt.addMonthsUTC(2);
	 * gs.info(gcdt.getDate());
	 * 
	 * @param months Number of months to add. Use a negative number to subtract.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	addMonthsUTC(months: number) : void
	/**
	 * @description Adds a specified number of seconds to the GlideCalendarDateTime object.
	 * @example
	 * //
	 * var gcdt = new GlideCalendarDateTime("2011-12-07 08:00:00");
	 * gcdt.addSeconds(1000);
	 * gs.info(gcdt.getValue());
	 * 
	 * @param seconds Number of seconds to add
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	addSeconds(seconds: number) : void
	/**
	 * @description Adds a specified number of weeks to the current GlideCalendarDateTime object. A negative parameter subtracts weeks.
	 * The method determines the local date and time equivalent to the value stored by the GlideCalendarDateTime object, then adds or subtracts weeks using the local date and time values.
	 * 
	 * @example
	 * //
	 * var gcdt = new GlideCalendarDateTime("2011-08-31 08:00:00");
	 * gcdt.addWeeksLocalTime(-1);
	 * gs.info(gcdt.getDate());
	 * 
	 * @param weeks Number of weeks to add. Use a negative number to subtract.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	addWeeksLocalTime(weeks: number) : void
	/**
	 * @description Adds a specified number of weeks to the current GlideCalendarDateTime object. A negative parameter subtracts weeks.
	 * The method determines the UTC date and time equivalent to the value stored by the GlideCalendarDateTime object, then adds or subtracts weeks using the UTC date and time values.
	 * 
	 * @example
	 * //
	 * var gcdt = new GlideCalendarDateTime("2011-08-31 08:00:00");
	 * gcdt.addWeeksUTC(-1);
	 * gs.info(gcdt.getDate());
	 * 
	 * @param weeks Number of weeks to add. Use a negative number to subtract.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	addWeeksUTC(weeks: number) : void
	/**
	 * @description Adds a specified number of years to the current GlideCalendarDateTime object. A negative parameter subtracts years.
	 * The method determines the local date and time equivalent to the value stored by the GlideCalendarDateTime object, then adds or subtracts years using the local date and time values.
	 * 
	 * @example
	 * //
	 * var gcdt = new GlideCalendarDateTime("2010-08-31 08:00:00");
	 * gcdt.addYearsLocalTime(1);
	 * gs.info(gcdt.getDate());
	 * 
	 * @param years Number of years to add. To subtract use a negative value.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	addYearsLocalTime(years: number) : void
	/**
	 * @description Adds a specified number of years to the current GlideCalendarDateTime object. A negative parameter subtracts years.
	 * The date and time value stored by GlideCalendarDateTime object is interpreted as being in the UTC time zone.
	 * 
	 * @example
	 * //
	 * var gcdt = new GlideCalendarDateTime("2010-08-31 08:00:00");
	 * gcdt.addYearsUTC(1);
	 * gs.info(gcdt.getDate());
	 * 
	 * @param years Number of years to add. Use a negative value to subtract.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	addYearsUTC(years: number) : void
	/**
	 * @description Compares two date and time objects to determine whether one occurs before the other or if they are equivalent.
	 * @example
	 * //
	 * var initDate = new GlideCalendarDateTime("2011-08-01 12:00:00");
	 * var compDate1 = new GlideCalendarDateTime("2011-08-01 12:00:00");
	 * var compDate2 = new GlideCalendarDateTime("2011-07-31 12:00:00");
	 * var compDate3 = new GlideCalendarDateTime("2011-08-04 16:00:00");
	 *  
	 * gs.info(initDate.compareTo(compDate1)); // Equals (0)
	 * gs.info(initDate.compareTo(compDate2)); // initDate is after compDate2 (1)
	 * gs.info(initDate.compareTo(compDate3)); // initDate is before compDate3 (-1)
	 * 
	 * @param dateTime Date time in a GlideCalendarDateTime object
	 * 
	 * @returns number *   0 = Dates are equal *   1 = Object's date is after the date specified in the parameter *   \-1 = Object's date is before the date specified in the parameter
	 * 
	 */
	compareTo(dateTime: Object) : number
	/**
	 * @description Compares an object with an existing value for equality.
	 * @example
	 * //
	 * var gcdt = new GlideCalendarDateTime("2011-08-31 00:00:00");
	 * gs.info(gcdt.equals("2011-09-30 00:12:01"));
	 * 
	 * @param GCDT Object to compare. Can be a GlideCalendarDateTime object or a valid date time string.
	 * 
	 * @returns boolean True if they are equal, false otherwise.
	 * 
	 */
	equals(GCDT: Object) : boolean
	/**
	 * @description Returns the date stored by the GlideCalendarDateTime object, expressed in the standard format, yyyy-MM-dd, and the system time zone, UTC by default.
	 * @example
	 * //
	 * var gcdt = new GlideCalendarDateTime("2011-08-31 08:00:00");
	 * gs.info(gcdt.getDate());
	 * 
	 * @returns GlideDate Date in the system time zone.
	 * 
	 */
	getDate() : GlideDate
	/**
	 * @description Returns the day of the month stored by the GlideCalendarDateTime object, expressed in the current user's time zone.
	 * @example
	 * //
	 * var gcdt = new GlideCalendarDateTime("2011-12-02 12:00:00");
	 * gs.info(gcdt.getDayOfMonthLocalTime());
	 * 
	 * @returns number Day of the month in the user's time zone, from 1 to 31.
	 * 
	 */
	getDayOfMonthLocalTime() : number
	/**
	 * @description Gets the day of the month stored by the GlideCalendarDateTime object, expressed in the UTC time zone.
	 * @example
	 * //
	 * var gcdt = new GlideCalendarDateTime("2011-12-02 12:00:00");
	 * gs.info(gcdt.getDayOfMonthUTC());
	 * 
	 * @returns number Day of the month in the UTC time zone, from 1 to 31.
	 * 
	 */
	getDayOfMonthUTC() : number
	/**
	 * @description Returns the day of the week stored by the GlideCalendarDateTime object, expressed in the user's time zone.
	 * @example
	 * //
	 * var gcdt = new GlideCalendarDateTime("2011-12-01 12:00:00");
	 * gs.info(gcdt.getDayOfWeekLocalTime());
	 * 
	 * @returns number Day of the week value - Monday = 1, ... Sunday = 7
	 * 
	 */
	getDayOfWeekLocalTime() : number
	/**
	 * @description Returns the day of the week stored by the GlideCalendarDateTime object, expressed in the UTC time zone.
	 * @example
	 * //
	 * var gcdt = new GlideCalendarDateTime("2011-12-01 12:00:00");
	 * gs.info(gcdt.getDayOfWeekUTC());
	 * 
	 * @returns number Day of the week value - Monday = 1, ... Sunday = 7
	 * 
	 */
	getDayOfWeekUTC() : number
	/**
	 * @description Returns the number of days in the month stored by the GlideCalendarDateTime object, expressed in the current user's time zone.
	 * @example
	 * //
	 * var gcdt = new GlideCalendarDateTime(); //December
	 * gs.info(gcdt.getDaysInMonthLocalTime());
	 * 
	 * @returns number Number of days in the current month in the user's time zone.
	 * 
	 */
	getDaysInMonthLocalTime() : number
	/**
	 * @description Returns the number of days in the month stored by the GlideCalendarDateTime object, expressed in the UTC time zone.
	 * @example
	 * //
	 * var gcdt = new GlideCalendarDateTime(); //December
	 * gs.info(gcdt.getDaysInMonthUTC());
	 * 
	 * @returns number Number of days in the month stored by the GlideCalendarDateTime object, expressed in the UTC time zone.
	 * 
	 */
	getDaysInMonthUTC() : number
	/**
	 * @description Returns the date and time value in the current user's display format and time zone. Referring to the GlideCalendarDateTime object directly returns the date and time value in the GMT time zone.
	 * @example
	 * //
	 * var gcdt = new GlideCalendarDateTime("2011-08-31 08:00:00");
	 * gs.info(gcdt.getDisplayValue());
	 * 
	 * @returns string Date and time in the user's format and time zone. Keep in mind when designing business rules or script includes that this method may return values in different formats for different users.
	 * 
	 */
	getDisplayValue() : string
	/**
	 * @description Returns the display value in the internal format (yyyy-MM-dd HH:mm:ss).
	 * This method is useful for date/time fields, but not for date fields.
	 * 
	 * @example
	 * //
	 * // Wednesday
	 * var gcdt = new GlideCalendarDateTime("2011-08-31 08:00:00");
	 * gs.info(gcdt.getDisplayValueInternal());
	 * 
	 * @returns string Date and time values for the GlideCalendarDateTime object in the current user's time zone and the internal date and time format of yyyy-MM-dd HH:mm:ss.
	 * 
	 */
	getDisplayValueInternal() : string
	/**
	 * @description Returns the amount of time that daylight saving time is offset.
	 * @example
	 * //
	 * var gcdt = new GlideCalendarDateTime("2011-08-31 08:00:00");
	 * gs.info(gcdt.getDSTOffset());
	 * 
	 * @returns number Amount of time, in milliseconds, that daylight saving is offset. Returns 0 if there is no offset or if the time is not during daylight saving time.
	 * 
	 */
	getDSTOffset() : number
	/**
	 * @description Returns the current error message.
	 * @example
	 * //
	 * var gcdt = new GlideCalendarDateTime("2011-08-31 aa:00:00"); //bad
	 * gs.info(gcdt.isValid()); //false
	 * gs.info(gcdt.getErrorMsg()); //reason
	 * 
	 * @returns string Error message
	 * 
	 */
	getErrorMsg() : string
	/**
	 * @description Returns the calendar date/time value in the user or system time zone based on the value specified in the Time zone field of the corresponding Business Calendar record.
	 * Note: The Start and End fields in the Business Calendar Entry \[business\_calendar\_span\] table contain an attribute time\_zone\_field that is set to the value in the Time zone field (calendar.time\_zone).
	 * 
	 * For details on creating a business calendar and setting the time zone value, see [Create a business calendar](https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/time/task/create-business-calendar.html).
	 * 
	 * @example
	 * //
	 * var gcdt = new GlideCalendarDateTime("2018-08-31 08:00:00");
	 * gs.info(gcdt.getFloatingValue());
	 * 
	 * @returns string Date and time in the internal format and time zone based on the Time zone field of the corresponding Business Calendar record.  *   Floating: User time zone *   Any other value: System time zone
	 * 
	 */
	getFloatingValue() : string
	/**
	 * @description Returns the object's time in the local time zone and in the internal format.
	 * @example
	 * //
	 * var gcdt = new GlideCalendarDateTime("2011-08-31 08:00:00");
	 * gs.info(gcdt.getInternalFormatedLocalTime());
	 * 
	 * @returns string Object's time in the local time zone and the internal format.
	 * 
	 */
	getInternalFormattedLocalTime() : string
	/**
	 * @description Returns the date stored by the GlideCalendarDateTime object, expressed in the standard format, yyyy-MM-dd, and the current user's time zone.
	 * @example
	 * //
	 * var gcdt = new GlideCalendarDateTime("2011-08-31 08:00:00");
	 * gs.info(gcdt.getLocalDate());
	 * 
	 * @returns GlideDate Date in the user's time zone.
	 * 
	 */
	getLocalDate() : GlideDate
	/**
	 * @description Returns the time in the user's time zone.
	 * @example
	 * //
	 * var gcdt = new GlideCalendarDateTime("2011-08-31 08:00:00");
	 * gs.info(gcdt.getLocalTime());
	 * 
	 * @returns GlideTime Time in the user's time zone.
	 * 
	 */
	getLocalTime() : GlideTime
	/**
	 * @description Returns the month stored by the GlideCalendarDateTime object, expressed in the current user's time zone.
	 * @example
	 * //
	 * var gcdt = new GlideCalendarDateTime(); //December
	 * gs.info(gcdt.getMonthLocalTime());
	 * 
	 * @returns number Numerical value of the month, Jan=1, Dec=12.
	 * 
	 */
	getMonthLocalTime() : number
	/**
	 * @description Returns the month stored by the GlideCalendarDateTime object, expressed in the UTC time zone.
	 * @example
	 * //
	 * var gcdt = new GlideCalendarDateTime(); //December
	 * gs.info(gcdt.getMonthUTC());
	 * 
	 * @returns number Numerical value of the month, Jan=1, Dec=12.
	 * 
	 */
	getMonthUTC() : number
	/**
	 * @description Returns the number of milliseconds since January 1, 1970, 00:00:00 GMT.
	 * @example
	 * //
	 * var gcdt = new GlideCalendarDateTime("2011-08-31 08:00:00");
	 * gs.info(gcdt.getNumericValue());
	 * 
	 * @returns number Number of milliseconds since January 1, 1970, 00:00:00 GMT.
	 * 
	 */
	getNumericValue() : number
	/**
	 * @description Returns the Unix duration stamp.
	 * @example
	 * //
	 * var gcdt = new GlideCalendarDateTime("2011-08-31 08:00:00");
	 * gs.info(gcdt.getTime());
	 * 
	 * @returns GlideTime Unix duration stamp in system format based on GMT time.
	 * 
	 */
	getTime() : GlideTime
	/**
	 * @description Returns the time zone offset in milliseconds.
	 * @example
	 * //
	 * var gcdt = new GlideCalendarDateTime();
	 * gcdt.getLocalTime(); // PST local time
	 * gs.info(gcdt.getTZOffset());
	 * 
	 * @returns number Number of milliseconds of the time zone offset
	 * 
	 */
	getTZOffset() : number
	/**
	 * @description Returns the object's time in local time zone in the user's format.
	 * @example
	 * //
	 * var gcdt = new GlideCalendarDateTime("2011-08-31 08:00:00");
	 * gs.info(gcdt.getUserFormatedLocalTime());
	 * 
	 * @returns string Object's time in local time and the user's format.
	 * 
	 */
	getUserFormattedLocalTime() : string
	/**
	 * @description Returns the date and time value stored by the GlideCalendarDateTime object in the internal format, yyyy-MM-dd HH:mm:ss, and the system time zone; UTC by default.
	 * @example
	 * //
	 * var gcdt = new GlideCalendarDateTime("2011-08-31 08:00:00");
	 * gs.info(gcdt.getValue());
	 * 
	 * @returns string Date and time in the internal format and system time zone.
	 * 
	 */
	getValue() : string
	/**
	 * @description Returns the number of the week stored by the GlideCalendarDateTime object, expressed in the current user's time zone.
	 * All weeks begin on Sunday. The first week of the year is the week that contains at least one day of the new year. The week beginning Sunday 2015-12-27 is considered the first week of 2016 as that week contains January 1 and 2.
	 * 
	 * @example
	 * //
	 * var gcdt = new GlideCalendarDateTime("2011-12-01 12:00:00");
	 * gs.info(gcdt.getWeekOfYearUTC());
	 * 
	 * @returns number Number of the current week. The highest week number in a year is either 52 or 53.
	 * 
	 */
	getWeekOfYearLocalTime() : number
	/**
	 * @description Returns the number of the week stored by the GlideCalendarDateTime object, expressed in the UTC time zone.
	 * All weeks begin on Sunday. The first week of the year is the week that contains at least one day of the new year. The week beginning Sunday 2015-12-27 is considered the first week of 2016 as that week contains January 1 and 2.
	 * 
	 * @example
	 * //
	 * var gcdt = new GlideCalendarDateTime("2011-12-01 12:00:00");
	 * gs.info(gcdt.getWeekOfYearUTC());
	 * 
	 * @returns number Number of the current week in UTC time. The highest week number in a year is either 52 or 53.
	 * 
	 */
	getWeekOfYearUTC() : number
	/**
	 * @description Returns the year stored by the GlideCalendarDateTime object, expressed in the current user's time zone.
	 * @example
	 * //
	 * var gcdt = new GlideCalendarDateTime(); //2011
	 * gs.info(gcdt.getYearLocalTime());
	 * 
	 * @returns number Four-digit year value in the user's time zone.
	 * 
	 */
	getYearLocalTime() : number
	/**
	 * @description Returns the year stored by the GlideCalendarDateTime object, expressed in the UTC time zone.
	 * @example
	 * //
	 * var gcdt = new GlideCalendarDateTime(); //2011
	 * gs.info(gcdt.getYearUTC());
	 * 
	 * @returns number Four-digit year value in the UTC time zone.
	 * 
	 */
	getYearUTC() : number
	/**
	 * @description Instantiates a new GlideCalendarDateTime object with the current date and time in GMT format.
	 * @example
	 * //
	 * var gcdt = new GlideCalendarDateTime();
	 * 
	 */
	constructor() 
	/**
	 * @description Instantiates a new GlideCalendarDateTime object set to the time of a specified GlideCalendarDateTime object in GMT format.
	 * @example
	 * //
	 * var start = new GlideCalendarDateTime("2011-01-01 12:00:00");
	 * var end = new GlideCalendarDateTime(start);
	 * gs.info(end);
	 * 
	 * @param gcDT Object used to set the time of the new object.
	 * 
	 */
	constructor(gcDT: GlideCalendarDateTime) 
	/**
	 * @description Instantiates a new GlideCalendarDateTime object from a date and time value in the UTC time zone specified with the format yyyy-MM-dd HH:mm:ss.
	 * @example
	 * //
	 * var gcdt = new GlideCalendarDateTime("2011-01-01 12:00:00");
	 * 
	 * @param dateTime UTC date and time using the format yyyy-MM-dd HH:mm:ss.
	 * 
	 */
	constructor(dateTime: string) 
	/**
	 * @description Determines if an object's date is set.
	 * @example
	 * //
	 * var gcdt = new GlideCalendarDateTime("2011-08-31 08:00:00");
	 * gs.info(gcdt.hasDate());
	 * 
	 * @returns boolean True if the object's date is set, false otherwise.
	 * 
	 */
	hasDate() : boolean
	/**
	 * @description Determines if the object's time uses a daylight saving offset
	 * @example
	 * //
	 * var gcdt = new GlideCalendarDateTime("2011-08-31 00:00:00");
	 * gs.info(gcdt.isDST()); //true
	 * 
	 * @returns boolean True if the time is daylight saving time, false otherwise.
	 * 
	 */
	isDST() : boolean
	/**
	 * @description Determines if a value is a valid date and time.
	 * @example
	 * //
	 * var gcdt = new GlideCalendarDateTime("2011-08-31 aa:00:00"); //bad
	 * gs.info(gcdt.isValid()); //false
	 * 
	 * @returns boolean True if value is valid, false otherwise.
	 * 
	 */
	isValid() : boolean
	/**
	 * @description Sets the day of the month to a specified value in the current user's time zone.
	 * @example
	 * //
	 * var gcdt = new GlideCalendarDateTime();
	 * gcdt.setDayOfMonthLocalTime(9);
	 * gs.info(gcdt.getDayOfMonthLocalTime());
	 * 
	 * @param day Day of month to change to, from 1 to 31. If this value is greater than the maximum number of days in the month, the value is set to the last day of the month.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setDayOfMonthLocalTime(day: number) : void
	/**
	 * @description Sets the day of the month to a specified value in the UTC time zone.
	 * @example
	 * //
	 * var gcdt = new GlideCalendarDateTime();
	 * gcdt.setDayOfMonthUTC(9);
	 * gs.info(gcdt.getDayOfMonthUTC());
	 * 
	 * @param day Day of month to change to, from 1 to 31. If this value is greater than the maximum number of days in the month, the value is set to the last day of the month.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setDayOfMonthUTC(day: number) : void
	/**
	 * @description Sets a date and time value using the current user's display format and time zone.
	 * @example
	 * //
	 * var gcdt = new GlideCalendarDateTime("2011-02-02 12:00:00");
	 * gcdt.setDisplayValue("2011-01-01 12:00:00");
	 * gs.info(gcdt.getValue());
	 * 
	 * @param asDisplayed Date and time in the current user's display format and time zone.  The parameter must be formatted using the current user's preferred display format, such as MM-dd-yyyy HH:mm:ss.  To assign the current date and time to a variable in a workflow script, use <variable>.setDisplayValue(gs.nowDateTime);.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setDisplayValue(asDisplayed: string) : void
	/**
	 * @description Sets a date and time value using the current user's time zone and the specified date and time format.
	 * This method throws a runtime exception if the date and time format in the dateTime parameter does not match the format parameter. You can retrieve the error message by calling getErrorMsg() on the GlideCalendarDateTime object after the exception is caught.
	 * 
	 * @example
	 * //
	 * var gcdt = new GlideCalendarDateTime("2011-02-02 12:00:00");
	 * gcdt.setDisplayValue("20-5-2011 12:00:00", "dd-MM-yyyy HH:mm:ss");
	 * gs.info(gcdt.getValue());
	 * 
	 * @param dateTime Date and time in the current user's time zone.
	 * @param format Format to use to parse the dateTime parameter.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setDisplayValue(dateTime: string,format: string) : void
	/**
	 * @description Sets a date and time value using the internal format (yyyy-MM-dd HH:mm:ss) and the current user's time zone.
	 * @example
	 * //
	 * var gcdt = new GlideCalendarDateTime("2011-02-02 12:00:00");
	 * gcdt.setDisplayValueInternal("2011-01-01 12:00:00");
	 * gs.info(gcdt.getValue());
	 * 
	 * @param dateTime Date and time in internal format
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setDisplayValueInternal(dateTime: string) : void
	/**
	 * @description Sets the date and time of the current object using an existing GlideCalendarDateTime object.
	 * This method is equivalent to instantiating a new object with a GlideCalendarDateTime parameter.
	 * 
	 * @example
	 * //
	 * var dt1 = new GlideCalendarDateTime("2011-01-01 12:00:00");
	 * var dt2 = new GlideCalendarDateTime("2011-02-02 08:00:00");
	 * dt1.setGlideCalendarDateTime(dt2);
	 * gs.info(dt1.getValue());
	 * 
	 * @param gcDT GlideCalendarDateTime object
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setGlideCalendarDateTime(gcDT: GlideCalendarDateTime) : void
	/**
	 * @description Sets the month stored by the GlideCalendarDateTime object to a specified value using the current user's time zone.
	 * @example
	 * //
	 * var gcdt = new GlideCalendarDateTime();
	 * gcdt.setMonthLocalTime(1);
	 * gs.info(gcdt.getMonthLocalTime());
	 * 
	 * @param month Month to change to.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setMonthLocalTime(month: number) : void
	/**
	 * @description Sets the month stored by the GlideCalendarDateTime object to a specified value using the UTC time zone.
	 * @example
	 * //
	 * var gcdt = new GlideCalendarDateTime();
	 * gcdt.setMonthUTC(1);
	 * gs.info(gcdt.getMonthUTC());
	 * 
	 * @param month Month to change to.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setMonthUTC(month: number) : void
	/**
	 * @description Sets the time zone of the GlideCalendarDateTime object to be the specified time zone.
	 * @example
	 * //
	 * var tz = gs.getSession().getTimeZone();
	 * var gcdt = new GlideCalendarDateTime(); 
	 * gcdt.setTZ(tz);
	 * 
	 * @param timeZone Time zone object
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setTZ(timeZone: TimeZone) : void
	/**
	 * @description Sets the date and time of the GlideCalendarDateTime object.
	 * This method is equivalent to setInitialValue().
	 * 
	 * @example
	 * //
	 * var gcdt = new GlideCalendarDateTime("2011-01-01 12:00:00");
	 * gcdt.setValue("2011-02-02 08:00:00");
	 * gs.info(gcdt.getValue());
	 * 
	 * @param dateTime Date and time to use. This parameter may be one of several types.  *   A string in the UTC time zone and the internal format of yyyy-MM-dd HH:mm:ss: sets the value of the object to the specified date and time.          Using the method this way is equivalent to instantiating a new GlideCalendarDateTime object using the GlideCalendarDateTime(value) constructor.          If the date and time format used does not match the internal format, the method attempts to set the date and time using other available formats. Resolving the date and time this way can lead to inaccurate data due to ambiguity in the day and month values. When using a non-standard date and time format, use setValue(dt, format) instead.      *   A GlideCalendarDateTime object: sets the value of the object to the date and time stored by the GlideCalendarDateTime passed in the parameter.          Using the method this way is equivalent to instantiating a new GlideCalendarDateTime object using the GlideCalendarDateTime(g) constructor.      *   A Java Date object: sets the value of the object using the value stored by the Java Date object.          Using the method this way is equivalent to passing the value returned by the Java Date object getTime() to the GlideCalendarDateTime setNumericValue() method. This method does not accept JavaScript Date objects.      *   A JavaScript Number: sets the value of the object using the Number value as milliseconds past January 1, 1970 00:00:00 GMT.          Using the method this way is equivalent to the setNumericValue(milliseconds) method.      *   A Java Integer or Long: sets the value of the object using the Integer or Long value as milliseconds past January 1, 1970 00:00:00 GMT.          Using the method this way is equivalent to the setNumericValue(milliseconds) method.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setValue(dateTime: Object) : void
	/**
	 * @description Sets a date and time value using the UTC time zone and the specified date and time format.
	 * This method throws a runtime exception if the date and time format used in the dateTime parameter does not match the format parameter. You can retrieve the error message by calling getErrorMsg() on the GlideCalendarDateTime object after the exception is caught.
	 * 
	 * @example
	 * //
	 * var gcdt = new GlideCalendarDateTime("2011-01-01 12:00:00");
	 * gcdt.setValueUTC("15-02-2011 08:00:00", "dd-MM-yyyy HH:mm:ss");
	 * gs.info(gcdt.getValue());
	 * 
	 * @param dateTime Date and time to use
	 * @param format Format to use
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setValueUTC(dateTime: string,format: string) : void
	/**
	 * @description Sets the year stored by the GlideCalendarDateTime object to a specified value using the current user's time zone.
	 * @example
	 * //
	 * var gcdt = new GlideCalendarDateTime();
	 * gcdt.setYearLocalTime(2013);
	 * gs.info(gcdt.getYearLocalTime());
	 * 
	 * @param year Year to change to.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setYearLocalTime(year: number) : void
	/**
	 * @description Sets the year stored by the GlideCalendarDateTime object to a specified value using the UTC time zone.
	 * @example
	 * //
	 * var gcdt = new GlideCalendarDateTime();
	 * gcdt.setYearUTC(2013);
	 * gs.info(gcdt.getYearUTC());
	 * 
	 * @param year Year to change to.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setYearUTC(year: number) : void
	/**
	 * @description Returns the duration difference between two GlideCalendarDateTime values.
	 * @example
	 * //
	 * var gcdt1 = new GlideCalendarDateTime("2011-08-28 09:00:00");
	 * var gcdt2 = new GlideCalendarDateTime("2011-08-31 08:00:00");
	 * var dur = new GlideDuration();
	 *  
	 * var dur = GlideCalendarDateTime.subtract(gcdt1, gcdt2); //the difference between gcdt1 and gcdt2
	 * gs.info(dur.getDisplayValue());
	 * 
	 * @param start Start value
	 * @param end End value
	 * 
	 * @returns GlideDuration Time between the two values
	 * 
	 */
	subtract(start: GlideCalendarDateTime,end: GlideCalendarDateTime) : GlideDuration
	/**
	 * @description Subtracts a specified amount of time.
	 * @example
	 * //
	 * var gcdt = new GlideCalendarDateTime("2011-08-31 08:00:00");
	 * var gtime1 = new GlideTime();
	 * gtime1.setValue("00:00:20");
	 * gcdt.subtract(gtime1);
	 * gs.info(gcdt.getTime());
	 * 
	 * @param time Time to subtract
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	subtract(time: GlideTime) : void
	/**
	 * @description Subtracts a specified number of milliseconds from the GlideCalendarDateTime object.
	 * @example
	 * //
	 * var gcdt = new GlideCalendarDateTime("2011-12-07 08:00:00");
	 * gcdt.subtract(1000);
	 * gs.info(gcdt.getValue());
	 * 
	 * @param milliseconds Number of milliseconds to subtract
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	subtract(milliseconds: number) : void
	/**
	 * @description Returns the date and time value stored by the GlideCalendarDateTime object in the internal format, yyyy-MM-dd HH:mm:ss, and the system time zone; UTC by default.
	 * This method is equivalent to getValue().
	 * 
	 * @example
	 * //
	 * var gcdt = new GlideCalendarDateTime("2011-08-31 08:00:00");
	 * gs.info(gcdt.toString());
	 * 
	 * @returns string Date and time stored by the GlideCalendarDateTime object in the system time zone and format.
	 * 
	 */
	toString() : string
	}
/**
	 * @description The scoped GlideDate class provides methods for performing operations on GlideDate objects, such as instantiating GlideDate objects or working with GlideDate fields.
	 * 
	 */
	declare class GlideDate {
	/**
	 * @description Creates a GlideDate object with the current date time.
	 */
	constructor() 
	/**
	 * @description Gets the date in the specified date format.
	 * @example
	 * //
	 * var gd = new GlideDate(); 
	 * gd.setValue('2015-01-01');
	 * gs.info(gd.getByFormat("dd-MM-yyyy"));
	 * 
	 * @param format the desired date format
	 * 
	 * @returns string the date in the specified format
	 * 
	 */
	getByFormat(format: string) : string
	/**
	 * @description Gets the day of the month stored by the GlideDate object, expressed in the UTC time zone.
	 * @example
	 * //
	 * //Today's date is 2016-05-13 
	 * var gd =new GlideDate();
	 * gs.info(gd.getDayOfMonthNoTZ());
	 * 
	 * @returns number The day of the month in the UTC time zone, from 1 to 31.
	 * 
	 */
	getDayOfMonthNoTZ() : number
	/**
	 * @description Gets the date in the current user's display format and time zone.
	 * @example
	 * //
	 * var gd =new GlideDate(); 
	 * gd.setValue('2015-01-01');
	 * gs.info(gd.getDisplayValue());
	 * 
	 * @returns string The date in the user's format and time zone. Keep in mind when designing business rules or script includes that this method may return values in different formats for different users.
	 * 
	 */
	getDisplayValue() : string
	/**
	 * @description Gets the display value in the internal format (yyyy-MM-dd).
	 * @example
	 * //
	 * var gd =new GlideDate(); 
	 * gs.info(gd.getDisplayValueInternal());
	 * 
	 * @returns string The date values for the GlideDate object in the current user's time zone and the internal time format of yyyy-MM-dd.
	 * 
	 */
	getDisplayValueInternal() : string
	/**
	 * @description Gets the month stored by the GlideDate object, expressed in the UTC time zone.
	 * @example
	 * //
	 * //Today's date is 2016-05-13
	 * var gd =new GlideDate();
	 * gs.info(gd.getMonthNoTZ());
	 * 
	 * @returns number The numerical value of the month from 1 to 12.
	 * 
	 */
	getMonthNoTZ() : number
	/**
	 * @description Gets the date value stored in the database by the GlideDate object in the internal format, yyyy-MM-dd, and the system time zone, UTC by default.
	 * @example
	 * //
	 * var gd =new GlideDate();
	 * gd.setValue('2015-01-01');
	 * gs.info(gd.getValue());
	 * 
	 * @returns string The date value in the internal format and system time zone.
	 * 
	 */
	getValue() : string
	/**
	 * @description Gets the year stored by the GlideDate object, expressed in the UTC time zone.
	 * @example
	 * //
	 * //Today's date is 2016-05-13
	 * var gd =new GlideDate();
	 * gs.info(gd.getYearNoTZ());
	 * 
	 * @returns number The numerical value of the year.
	 * 
	 */
	getYearNoTZ() : number
	/**
	 * @description Sets a date value using the current user's display format and time zone.
	 * @example
	 * //
	 * var gd =new GlideDate();
	 * gd.setDisplayValue("2011-01-01");
	 * gs.info(gd.getValue());
	 * 
	 * @param asDisplayed The date in the current user's display format and time zone. The parameter must be formatted using the current user's preferred display format, such as yyyy-MM-dd.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setDisplayValue(asDisplayed: string) : void
	/**
	 * @description Sets the date of the GlideDate object.
	 * @example
	 * //
	 * var gd = new GlideDate(); 
	 * gd.setValue('2015-01-01');
	 * gs.info(gd.getValue());
	 * 
	 * @param o The date and time to use.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setValue(o: string) : void
	/**
	 * @description Gets the duration difference between two GlideDate values.
	 * @example
	 * //
	 * var sgd1 = new GlideDate(); 
	 * sgd1.setDisplayValue('2014-07-18'); 
	 * var sgd2 = new GlideDate(); 
	 * sgd2.setDisplayValue('2014-07-19'); 
	 *  
	 * duration= GlideDate.subtract(sgd1, sgd2); 
	 * gs.info(duration.getDisplayValue());
	 * 
	 * @param start The start value.
	 * @param end The end value.
	 * 
	 * @returns GlideDuration The duration between the two values.
	 * 
	 */
	subtract(start: GlideDate,end: GlideDate) : GlideDuration
	}
/**
	 * @description The scoped GlideDateTime class provides methods for performing operations on GlideDateTime objects, such as instantiating GlideDateTime objects or working with glide\_date\_time fields.
	 * Use the GlideDateTime methods to perform date-time operations, such as instantiating a GlideDateTime object, performing date-time calculations, formatting a date-time, or converting between date-time formats.
	 * 
	 */
	declare class GlideDateTime {
	/**
	 * @description Instantiates a new GlideDateTime object with the current date and time in Greenwich Mean Time (GMT).
	 * @example
	 * //
	 * var gdt = new GlideDateTime();
	 * 
	 */
	constructor() 
	/**
	 * @description Instantiates a new GlideDateTime object set to the time of the GlideDateTime object passed in the parameter.
	 * @example
	 * //
	 * var start = new GlideDateTime("2011-01-01 12:00:00");
	 * var end = new GlideDateTime(start);
	 * gs.info(end);
	 * 
	 * @param g The GlideDateTime object to use for setting the time of the new object.
	 * 
	 */
	constructor(g: GlideDateTime) 
	/**
	 * @description Instantiates a new GlideDateTime object from a date and time value in the UTC time zone specified with the format yyyy-MM-dd HH:mm:ss.
	 * @example
	 * //
	 * var gdt = new GlideDateTime("2011-01-01 12:00:00");
	 * 
	 * @param value A UTC date and time using the internal format yyyy-MM-dd HH:mm:ss.
	 * 
	 */
	constructor(value: string) 
	/**
	 * @description Adds a GlideTime object to the current GlideDateTime object.
	 * @example
	 * //
	 * var gdt = new GlideDateTime("2011-08-31 08:00:00");
	 * var gtime1 = new GlideTime();
	 * gtime1.setValue("00:00:20");
	 * gdt.add(gtime1);
	 * var gtime2 = gdt.getTime();
	 * gs.info(gtime2.getByFormat('hh:mm:ss'));
	 * 
	 * @param gd The GlideTime object to add.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	add(gd: GlideTime) : void
	/**
	 * @description Determines if the GlideDateTime object occurs after the specified GlideDateTime.
	 * @example
	 * //
	 * var gdt1 = new GlideDateTime("2016-05-09 10:11:12");
	 * var gdt2 = new GlideDateTime("2017-06-12 15:11:12");
	 * gs.info(gdt1.after(gdt2)); 
	 * 
	 * @param gdt The time to check against.
	 * 
	 * @returns boolean Returns true if the GlideDateTime object's time is after the time specified by the parameter.
	 * 
	 */
	after(gdt: GlideDateTime) : boolean
	/**
	 * @description Determines if the GlideDateTime object occurs before the specified GlideDateTime.
	 * @example
	 * //
	 * var gdt1 = new GlideDateTime("2016-05-09 10:11:12");
	 * var gdt2 = new GlideDateTime("2017-06-12 15:11:12");
	 * gs.info(gdt1.before(gdt2));  
	 * 
	 * @param gdt The time to check against.
	 * 
	 * @returns boolean Returns true if the GlideDateTime object's time is before the time specified by the parameter.
	 * 
	 */
	before(gdt: GlideDateTime) : boolean
	/**
	 * @description Determines if the GlideDateTime object occurs on or after the specified GlideDateTime.
	 * @example
	 * //
	 * var gdt1 = new GlideDateTime("2016-05-09 10:11:12");
	 * var gdt2 = new GlideDateTime("2017-06-12 15:11:12");
	 * gs.info(gdt1.onOrAfter(gdt2));   
	 * 
	 * @param gdt The time to check against.
	 * 
	 * @returns boolean Returns true if the GlideDateTime object's time is on or after the time specified by the parameter.
	 * 
	 */
	onOrAfter(gdt: GlideDateTime) : boolean
	/**
	 * @description Determines if the GlideDateTime object occurs on or before the specified GlideDateTime.
	 * @example
	 * //
	 * var gdt1 = new GlideDateTime("2016-05-09 10:11:12");
	 * var gdt2 = new GlideDateTime("2017-06-12 15:11:12");
	 * gs.info(gdt1.onOrBefore(gdt2));   
	 * 
	 * @param gdt The time to check against.
	 * 
	 * @returns boolean Returns true if the GlideDateTime object's time is on or before the time specified by the parameter.
	 * 
	 */
	onOrBefore(gdt: GlideDateTime) : boolean
	/**
	 * @description Determines if an object's date is set.
	 * @example
	 * //
	 * var gdt = new GlideDateTime("2011-08-31 08:00:00");
	 * gs.info(gdt.hasDate());
	 * 
	 * @returns boolean True if the object date is set; otherwise, returns false.
	 * 
	 */
	hasDate() : boolean
	/**
	 * @description Gets the date and time value stored by the GlideDateTime object in the internal format, yyyy-MM-dd HH:mm:ss, and the system time zone, UTC by default. This method is equivalent to getValue().
	 * @example
	 * //
	 * var gdt = new GlideDateTime("2011-08-31 08:00:00");
	 * gs.info(gdt.toString());
	 * 
	 * @returns string The date and time stored by the GlideDateTime object in the system time zone and format.
	 * 
	 */
	toString() : string
	/**
	 * @description Gets the date stored by the GlideDateTime object, expressed in the standard format, yyyy-MM-dd, and the current user's time zone.
	 * @example
	 * //
	 * var gdt = new GlideDateTime("2011-08-31 08:00:00");
	 * gs.info(gdt.getLocalDate());
	 * 
	 * @returns GlideDate The date in the user's time zone.
	 * 
	 */
	getLocalDate() : GlideDate
	/**
	 * @description Gets the date stored by the GlideDateTime object, expressed in the standard format, yyyy-MM-dd, and the system time zone, UTC by default.
	 * @example
	 * //
	 * var gdt = new GlideDateTime("2011-08-31 08:00:00");
	 * gs.info(gdt.getDate());
	 * 
	 * @returns GlideDate The date in the system time zone.
	 * 
	 */
	getDate() : GlideDate
	/**
	 * @description Returns a GlideTime object that represents the time portion of the GlideDateTime object in the user's time zone.
	 * @example
	 * //
	 * var gdt = new GlideDateTime("2014-08-31 08:00:00");
	 * gt = gdt.getLocalTime();
	 * gs.info("local time is " + gt.getByFormat('hh:mm:ss'));
	 * 
	 * @returns GlideTime The time in the user's time zone.
	 * 
	 */
	getLocalTime() : GlideTime
	/**
	 * @description Sets a date and time value using the UTC time zone and the specified date and time format. This method throws a runtime exception if the date and time format used in the dt parameter does not match the format parameter. You can retrieve the error message by calling getErrorMsg() on the GlideDateTime object after the exception is caught.
	 * @example
	 * //
	 * var gdt = new GlideDateTime("2011-01-01 12:00:00");
	 * gdt.setValueUTC("15-02-2011 08:00:00", "dd-MM-yyyy HH:mm:ss");
	 * gs.info(gdt.getValue());
	 * 
	 * @param dt The date and time to use.
	 * @param format The date and time format to use.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setValueUTC(dt: string,format: string) : void
	/**
	 * @description Determines if an object's time uses a daylight saving offset.
	 * @example
	 * //
	 * var gdt = new GlideDateTime("2014-08-31 00:00:00");
	 * gs.info(gdt.isDST()); //true
	 * 
	 * @returns boolean True if the time is daylight saving; otherwise, returns false.
	 * 
	 */
	isDST() : boolean
	/**
	 * @description Gets the amount of time that daylight saving time is offset.
	 * @example
	 * //
	 * var gdt = new GlideDateTime("2014-08-31 08:00:00"); 
	 * gs.info(gdt.getDSTOffset()); //uses current user session time zone (US/Pacific)
	 * 
	 * @returns number Amount of time, in milliseconds, that daylight saving is offset. Returns 0 if there is no offset or if the time is not during daylight saving time.
	 * 
	 */
	getDSTOffset() : number
	/**
	 * @description Gets the date and time value in the current user's display format and time zone.
	 * @example
	 * //
	 * var gdt = new GlideDateTime("2011-08-31 08:00:00");
	 * gs.info(gdt.getDisplayValue()); //uses current user session time zone (US/Pacific)
	 * 
	 * @returns string The date and time in the user's format and time zone. Keep in mind when designing business rules or script includes that this method may return values in different formats for different users.
	 * 
	 */
	getDisplayValue() : string
	/**
	 * @description Sets the date and time of the current object using an existing GlideDateTime object. This method is equivalent to instantiating a new object with a GlideDateTime parameter.
	 * @example
	 * //
	 * var dt1 = new GlideDateTime("2011-01-01 12:00:00");
	 * var dt2 = new GlideDateTime("2011-02-02 08:00:00");
	 * dt1.setGlideDateTime(dt2);
	 * gs.info(dt1.getValue());
	 * 
	 * @param g The object to use for setting the datetime value.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setGlideDateTime(g: GlideDateTime) : void
	/**
	 * @description Sets a date and time value using the current user's time zone and the specified date and time format.
	 * This method throws a runtime exception if the date and time format used in the value parameter does not match the format parameter. You can retrieve the error message by calling getErrorMsg() on the GlideDateTime object after the exception is caught.
	 * 
	 * @example
	 * //
	 * var gdt = new GlideDateTime("2011-02-02 12:00:00");
	 * gdt.setDisplayValue("20-5-2011 12:00:00", "dd-MM-yyyy HH:mm:ss"); //uses current user session time zone (US/Pacific)
	 * gs.info(gdt.getValue());
	 * 
	 * @param value Date and time in the current user's time zone.
	 * @param format Date and time format to use to parse the value parameter.  Use the following values to describe the value parameter:  *   dd: Day of the month *   MM: Month of the year *   yyyy: Year *   HH: Hour *   mm: Minutes *   ss: Seconds  For example: "dd-MM-yyyy HH:mm:ss" or "MM-dd-yyyy HH:mm".
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setDisplayValue(value: string,format: string) : void
	/**
	 * @description Sets a date and time value using the internal format (yyyy-MM-dd HH:mm:ss) and the current user's time zone.
	 * @example
	 * //
	 * var gdt = new GlideDateTime("2014-02-02 12:00:00");
	 * gdt.setDisplayValueInternal("2014-01-01 12:00:00"); //uses current user session time zone (US/Pacific)
	 * gs.info(gdt.getValue());
	 * 
	 * @param value The date and time in internal format.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setDisplayValueInternal(value: string) : void
	/**
	 * @description Sets a date and time value using the current user's display format and time zone.
	 * @example
	 * //
	 * var gdt = new GlideDateTime("2014-02-02 12:00:00");
	 * gdt.setDisplayValue("2014-01-01 12:00:00");//uses current user session time zone (US/Pacific) 
	 * gs.info(gdt.getValue());
	 * 
	 * @param asDisplayed The date and time in the current user's display format and time zone. The parameter must be formatted using the current user's preferred display format, such as MM-dd-yyyy HH:mm:ss. To assign the current date and time to a variable in a workflow script, use variable.setDisplayValue(gs.nowDateTime);.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setDisplayValue(asDisplayed: string) : void
	/**
	 * @description Sets the date and time of the GlideDateTime object.
	 * @example
	 * //
	 * var gdt = new GlideDateTime("2011-01-01 12:00:00");
	 * gdt.setValue("2011-02-02 08:00:00");  // value set =  2011-02-02 08:00:00
	 * gs.info(gdt.getValue());
	 * 
	 * @param o The date and time to use. This parameter may be one of several types:  *   A string in the UTC time zone and the internal format of yyyy-MM-dd HH:mm:ss. Sets the value of the object to the specified date and time. Using the method this way is equivalent to instantiating a new GlideDateTime object using the GlideDateTime(String value) constructor. If the date and time format used does not match the internal format, the method attempts to set the date and time using other available formats. Resolving the date and time this way can lead to inaccurate data due to ambiguity in the day and month values. When using a non-standard date and time format, use etValueUTC(String dt, String format) instead. *   A GlideDateTime object. Sets the value of the object to the date and time stored by the GlideDateTime passed in the parameter. Using the method this way is equivalent to instantiating a new GlideDateTime object using the GlideDateTime(GlideDateTime g) constructor. *   A JavaScript Number. Sets the value of the object using the Number value as milliseconds past January 1, 1970 00:00:00 GMT.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setValue(o: string) : void
	/**
	 * @description Sets the day of the month to a specified value in the UTC time zone.
	 * @example
	 * //
	 * var gdt = new GlideDateTime();
	 * gdt.setDayOfMonthUTC(9);
	 * gs.info(gdt.getDayOfMonthUTC());
	 * 
	 * @param day The day of month to change to, from 1 to 31. If this value is greater than the maximum number of days in the month, the value is set to the last day of the month.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setDayOfMonthUTC(day: number) : void
	/**
	 * @description Sets the day of the month to a specified value in the current user's time zone.
	 * @example
	 * //
	 * var gdt = new GlideDateTime();
	 * gdt.setDayOfMonthLocalTime(9);
	 * gs.info(gdt.getDayOfMonthLocalTime());
	 * 
	 * @param day The day of month to change to, from 1 to 31. If this value is greater than the maximum number of days in the month, the value is set to the last day of the month.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setDayOfMonthLocalTime(day: number) : void
	/**
	 * @description Gets the day of the month stored by the GlideDateTime object, expressed in the UTC time zone.
	 * @example
	 * //
	 * var gdt = new GlideDateTime("2011-12-02 12:00:00");
	 * gs.info(gdt.getDayOfMonthUTC());
	 * 
	 * @returns number The day of the month in the UTC time zone, from 1 to 31.
	 * 
	 */
	getDayOfMonthUTC() : number
	/**
	 * @description Gets the day of the month stored by the GlideDateTime object, expressed in the current user's time zone.
	 * @example
	 * //
	 * var gdt = new GlideDateTime("2011-12-02 12:00:00");
	 * gs.info(gdt.getDayOfMonthLocalTime());
	 * 
	 * @returns number The day of the month in the user's time zone, from 1 to 31.
	 * 
	 */
	getDayOfMonthLocalTime() : number
	/**
	 * @description Gets the number of the week stored by the GlideDateTime object, expressed in the UTC time zone. All weeks begin on Sunday. The first week of the year is the week that contains at least one day of the new year. The week beginning Sunday 2015-12-27 is considered the first week of 2016 as that week contains January 1 and 2.
	 * @example
	 * //
	 * var gdt = new GlideDateTime("2011-12-01 12:00:00");//49th week, 1st week in december 
	 * gs.info(gdt.getWeekOfYearUTC());
	 * 
	 * @returns number The number of the current week in UTC time. The highest week number in a year is either 52 or 53.
	 * 
	 */
	getWeekOfYearUTC() : number
	/**
	 * @description Gets the number of the week stored by the GlideDateTime object, expressed in the current user's time zone. All weeks begin on Sunday. The first week of the year is the week that contains at least one day of the new year. The week beginning Sunday 2015-12-27 is considered the first week of 2016 as that week contains January 1 and 2.
	 * @example
	 * //
	 * var gdt = new GlideDateTime("2011-12-01 12:00:00");//49th week, 1st week in december 
	 * gs.info(gdt.getWeekOfYearLocalTime());
	 * 
	 * @returns number The number of the current week in local time. The highest week number in a year is either 52 or 53.
	 * 
	 */
	getWeekOfYearLocalTime() : number
	/**
	 * @description Gets the day of the week stored by the GlideDateTime object, expressed in the UTC time zone.
	 * @example
	 * //
	 * var gdt = new GlideDateTime("2011-12-01 12:00:00");//Thursday
	 * gs.info(gdt.getDayOfWeekLocalTime());
	 * 
	 * @returns number The day of week value from 1 to 7. Monday equals 1, Sunday equals 7.
	 * 
	 */
	getDayOfWeekUTC() : number
	/**
	 * @description Gets the day of the week stored by the GlideDateTime object, expressed in the user's time zone.
	 * @example
	 * //
	 * var gdt = new GlideDateTime("2011-12-01 12:00:00");//Thursday
	 * gs.info(gdt.getDayOfWeekLocalTime());
	 * 
	 * @returns number The day of week value, in the user's time zone, from 1 to 7. Monday equals 1, Sunday equals 7.
	 * 
	 */
	getDayOfWeekLocalTime() : number
	/**
	 * @description Compares two date and time objects to determine whether they are equivalent or one occurs before or after the other.
	 * @example
	 * //
	 * var initDate = new GlideDateTime("2011-08-01 12:00:00");
	 * var compDate1 = new GlideDateTime("2011-08-01 12:00:00");
	 * var compDate2 = new GlideDateTime("2011-07-31 12:00:00");
	 * var compDate3 = new GlideDateTime("2011-08-04 16:00:00");
	 *  
	 * gs.info(initDate.compareTo(compDate1)); // Equals (0)
	 * gs.info(initDate.compareTo(compDate2)); // initDate is after compDate2 (1)
	 * gs.info(initDate.compareTo(compDate3)); // initDate is before compDate3 (-1)
	 * 
	 * @param o Date and time object in GlideDateTime format
	 * 
	 * @returns number *   0 = Dates are equal *   1 = The object's date is after the date specified in the parameter *   \-1 = The object's date is before the date specified in the parameter
	 * 
	 */
	compareTo(o: Object) : number
	/**
	 * @description Gets the date and time value stored by the GlideDateTime object in the internal format, yyyy-MM-dd HH:mm:ss, and the system time zone, UTC by default.
	 * @example
	 * //
	 * var gdt = new GlideDateTime("2014-08-31 08:00:00");
	 * gs.info(gdt.getValue());
	 * 
	 * @returns string The date and time value in the internal format and system time zone.
	 * 
	 */
	getValue() : string
	/**
	 * @description Gets the display value in the internal format (yyyy-MM-dd HH:mm:ss).
	 * @example
	 * //
	 * var gdt = new GlideDateTime("2011-08-31 08:00:00"); 
	 * gs.info(gdt.getDisplayValueInternal()); //uses current user session time zone (US/Pacific)
	 * 
	 * @returns string The date and time values for the GlideDateTime object in the current user's time zone and the internal date and time format of yyyy-MM-dd HH:mm:ss.
	 * 
	 */
	getDisplayValueInternal() : string
	/**
	 * @description Gets the number of days in the month stored by the GlideDateTime object, expressed in the current user's time zone.
	 * @example
	 * //
	 * var gdt = new GlideDateTime("2011-12-02 12:00:00"); //December
	 * gs.info(gdt.getDaysInMonthLocalTime());
	 * 
	 * @returns number The number of days in the current month in the user's time zone.
	 * 
	 */
	getDaysInMonthLocalTime() : number
	/**
	 * @description Gets the number of days in the month stored by the GlideDateTime object, expressed in the UTC time zone.
	 * @example
	 * //
	 * var gdt = new GlideDateTime("2011-11-02 12:00:00"); //November
	 * gs.info(gdt.getDaysInMonthUTC());
	 * 
	 * @returns number The number of days in the month stored by the GlideDateTime object, expressed in the UTC time zone.
	 * 
	 */
	getDaysInMonthUTC() : number
	/**
	 * @description Gets the year stored by the GlideDateTime object, expressed in the current user's time zone.
	 * @example
	 * //
	 * var gdt = new GlideDateTime("2011-11-02 12:00:00");
	 * gs.info(gdt.getYearLocalTime());
	 * 
	 * @returns number Four-digit year value in the user's time zone.
	 * 
	 */
	getYearLocalTime() : number
	/**
	 * @description Gets the month stored by the GlideDateTime object, expressed in the current user's time zone.
	 * @example
	 * //
	 * var gdt = new GlideDateTime("2011-11-02 12:00:00"); //November
	 * gs.info(gdt.getMonthLocalTime());
	 * 
	 * @returns number The numerical value of the month.
	 * 
	 */
	getMonthLocalTime() : number
	/**
	 * @description Gets the month stored by the GlideDateTime object, expressed in the UTC time zone.
	 * @example
	 * //
	 * var gdt = new GlideDateTime("2011-11-02 12:00:00"); //November
	 * gs.info(gdt.getMonthUTC());
	 * 
	 * @returns number The numerical value of the month.
	 * 
	 */
	getMonthUTC() : number
	/**
	 * @description Returns a GlideTime object that represents the time portion of the GlideDateTime object.
	 * @example
	 * //
	 * var gdt = new GlideDateTime("2014-08-31 08:00:00");
	 * gt = gdt.getTime();
	 * gs.info(gt.getByFormat('hh:mm:ss'));
	 * 
	 * @returns GlideTime The Unix duration stamp in system format based on GMT time.
	 * 
	 */
	getTime() : GlideTime
	/**
	 * @description Gets the year stored by the GlideDateTime object, expressed in the UTC time zone.
	 * @example
	 * //
	 * var gdt = new GlideDateTime("2011-11-02 12:00:00"); 
	 * gs.info(gdt.getYearUTC());
	 * 
	 * @returns number 4-digit year value in the UTC time zone.
	 * 
	 */
	getYearUTC() : number
	/**
	 * @description Adds a specified number of days to the current GlideDateTime object. A negative parameter subtracts days. The method determines the local date and time equivalent to the value stored by the GlideDateTime object, then adds or subtracts days using the local date and time values.
	 * @example
	 * //
	 * var gdt = new GlideDateTime("2011-08-31 08:00:00");
	 * gdt.addDaysLocalTime(-1);
	 * gs.info(gdt.getLocalDate());
	 * 
	 * @param days The number of days to add. Use a negative value to subtract.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	addDaysLocalTime(days: number) : void
	/**
	 * @description Adds a specified number of days to the current GlideDateTime object. A negative parameter subtracts days. The method determines the UTC date and time equivalent to the value stored by the GlideDateTime object, then adds or subtracts days using the UTC date and time values.
	 * @example
	 * //
	 * var gdt = new GlideDateTime("2011-08-31 08:00:00");
	 * gdt.addDaysUTC(-1);
	 * gs.info(gdt.getDate());
	 * 
	 * @param days The number of days to add. Use a negative number to subtract.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	addDaysUTC(days: number) : void
	/**
	 * @description Adds a specified number of weeks to the current GlideDateTime object. A negative parameter subtracts weeks. The method determines the local date and time equivalent to the value stored by the GlideDateTime object, then adds or subtracts weeks using the local date and time values.
	 * @example
	 * //
	 * var gdt = new GlideDateTime("2011-08-31 08:00:00");
	 * gdt.addWeeksLocalTime(-1);
	 * gs.info(gdt.getDate());
	 * 
	 * @param weeks The number of weeks to add. Use a negative value to subtract.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	addWeeksLocalTime(weeks: number) : void
	/**
	 * @description Adds a specified number of weeks to the current GlideDateTime object. A negative parameter subtracts weeks. The method determines the UTC date and time equivalent to the value stored by the GlideDateTime object, then adds or subtracts weeks using the UTC date and time values.
	 * @example
	 * //
	 * var gdt = new GlideDateTime("2011-08-31 08:00:00");
	 * gdt.addWeeksUTC(-1);
	 * gs.info(gdt.getDate());
	 * 
	 * @param weeks The number of weeks to add. Use a negative value to subtract.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	addWeeksUTC(weeks: number) : void
	/**
	 * @description Adds a specified number of months to the current GlideDateTime object. A negative parameter subtracts months. The method determines the local date and time equivalent to the value stored by the GlideDateTime object, then adds or subtracts months using the local date and time values.
	 * @example
	 * //
	 * var gdt = new GlideDateTime("2011-08-31 08:00:00");
	 * gdt.addMonthsLocalTime(2);
	 * gs.info(gdt.getDate());
	 * 
	 * @param months The number of months to add. use a negative value to subtract.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	addMonthsLocalTime(months: number) : void
	/**
	 * @description Adds a specified number of months to the current GlideDateTime object. A negative parameter subtracts months. The method determines the UTC date and time equivalent to the value stored by the GlideDateTime object, then adds or subtracts months using the UTC date and time values.
	 * @example
	 * //
	 * var gdt = new GlideDateTime("2011-08-31 08:00:00");
	 * gdt.addMonthsUTC(2);
	 * gs.info(gdt.getDate());
	 * 
	 * @param months The number of months to add. Use a negative value to subtract.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	addMonthsUTC(months: number) : void
	/**
	 * @description Adds a specified number of years to the current GlideDateTime object. A negative parameter subtracts years. The method determines the local date and time equivalent to the value stored by the GlideDateTime object, then adds or subtracts years using the local date and time values.
	 * @example
	 * //
	 * var gdt = new GlideDateTime("2010-08-31 08:00:00");
	 * gdt.addYearsLocalTime(1);
	 * gs.info(gdt.getDate());
	 * 
	 * @param years The number of years to add. Use a negative value to subtract.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	addYearsLocalTime(years: number) : void
	/**
	 * @description Adds a specified number of years to the current GlideDateTime object. A negative parameter subtracts years. The date and time value stored by GlideDateTime object is interpreted as being in the UTC time zone.
	 * @example
	 * //
	 * var gdt = new GlideDateTime("2010-08-31 08:00:00");
	 * gdt.addYearsUTC(1);
	 * gs.info(gdt.getDate());
	 * 
	 * @param years The number of years to add. Use a negative value to subtract.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	addYearsUTC(years: number) : void
	/**
	 * @description Subtracts a specified amount of time from the current GlideDateTime object.
	 * @example
	 * //
	 * var gdt = new GlideDateTime("2011-08-31 08:00:00");
	 * var gtime1 = new GlideTime();
	 * gtime1.setValue("00:00:20");
	 * gdt.subtract(gtime1);
	 * var gtime2 = gdt.getTime();
	 * gs.info(gtime2.getByFormat('hh:mm:ss'));
	 * 
	 * @param time The time value to subtract.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	subtract(time: GlideTime) : void
	/**
	 * @description Gets the duration difference between two GlideDateTime values.
	 * @example
	 * //
	 * var gdt1 = new GlideDateTime("2011-08-28 09:00:00");
	 * var gdt2 = new GlideDateTime("2011-08-31 08:00:00");
	 *  
	 * var dur = GlideDateTime.subtract(gdt1, gdt2); //the difference between gdt1 and gdt2
	 * gs.info(dur.getDisplayValue());
	 * 
	 * @param Start The start value.
	 * @param End The end value.
	 * 
	 * @returns GlideDuration The duration between the two values.
	 * 
	 */
	subtract(Start: GlideDateTime,End: GlideDateTime) : GlideDuration
	/**
	 * @description Determines if a value is a valid date and time.
	 * @example
	 * //
	 * var gdt = new GlideDateTime(); 
	 * gdt.setDisplayValue("2011-aa-01 00:00:00"); 
	 * gs.info(gdt.isValid());
	 * 
	 * @returns boolean True if value is valid; otherwise, returns false.
	 * 
	 */
	isValid() : boolean
	/**
	 * @description Gets the current error message.
	 * @example
	 * //
	 * var gdt = new GlideDateTime(); 
	 * gdt.setDisplayValue("2011-aa-01 00:00:00"); 
	 * gs.info(gdt.getErrorMsg());
	 * 
	 * @returns string The error message.
	 * 
	 */
	getErrorMsg() : string
	/**
	 * @description Adds the specified number of milliseconds to the current GlideDateTime object.
	 * @example
	 * //
	 * var gdt = new GlideDateTime("2011-08-31 08:00:00");
	 * gs.info(gdt.getNumericValue());
	 * gdt.add(10);
	 * gs.info(gdt.getNumericValue());
	 * 
	 * @param milliseconds The number of milliseconds to add.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	add(milliseconds: number) : void
	/**
	 * @description Adds the specified number of seconds to the current GlideDateTime object.
	 * @example
	 * //
	 * var gdt = new GlideDateTime("2011-12-07 08:00:00");
	 * gdt.addSeconds(1000);
	 * gs.info(gdt.getValue());
	 * 
	 * @param seconds The number of seconds to add.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	addSeconds(seconds: number) : void
	/**
	 * @description Subtracts the specified number of milliseconds from the GlideDateTime object.
	 * @example
	 * //
	 * var gdt = new GlideDateTime("2011-12-07 08:00:00");
	 * gdt.subtract(1000);
	 * gs.info(gdt.getValue());
	 * 
	 * @param milliseconds The number of milliseconds to subtract.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	subtract(milliseconds: number) : void
	/**
	 * @description Gets the time zone offset in milliseconds.
	 * @example
	 * //
	 * var gdt = new GlideDateTime();
	 * gdt.getLocalTime(); // PST local time
	 * gs.info(gdt.getTZOffset());
	 * 
	 * @returns number The number of milliseconds of time zone offset.
	 * 
	 */
	getTZOffset() : number
	/**
	 * @description Compares a datetime with an existing value for equality.
	 * @example
	 * //
	 * var gdt = new GlideDateTime("2011-08-31 00:00:00");
	 * gs.info(gdt.equals("2011-09-30 00:12:01"));
	 * 
	 * @param dateTime The datetime to compare.
	 * 
	 * @returns boolean Returns true if they are equal; otherwise, false.
	 * 
	 */
	equals(dateTime: GlideDateTime|String) : boolean
	/**
	 * @description Sets the month stored by the GlideDateTime object to the specified value using the current user's time zone.
	 * @example
	 * //
	 * var gdt = new GlideDateTime();
	 * gdt.setMonthLocalTime(1);
	 * gs.info(gdt.getMonthLocalTime());
	 * 
	 * @param month The month to change to.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setMonthLocalTime(month: number) : void
	/**
	 * @description Sets the month stored by the GlideDateTime object to the specified value using the UTC time zone.
	 * @example
	 * //
	 * var gdt = new GlideDateTime();
	 * gdt.setMonthUTC(1);
	 * gs.info(gdt.getMonthUTC());
	 * 
	 * @param month The month to change to.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setMonthUTC(month: number) : void
	/**
	 * @description Sets the year stored by the GlideDateTime object to the specified value using the current user's time zone.
	 * @example
	 * //
	 * var gdt = new GlideDateTime();
	 * gdt.setYearLocalTime(2013);
	 * gs.info(gdt.getYearLocalTime());
	 * 
	 * @param year The year to change to.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setYearLocalTime(year: number) : void
	/**
	 * @description Sets the year stored by the GlideDateTime object to the specified value using the UTC time zone.
	 * @example
	 * //
	 * var gdt = new GlideDateTime();
	 * gdt.setYearUTC(2013);
	 * gs.info(gdt.getYearUTC());
	 * 
	 * @param year The year to change to.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setYearUTC(year: number) : void
	/**
	 * @description Returns the object's time in the local time zone and in the internal format.
	 * @returns string The object's time in the local time zone and the internal format.
	 * 
	 */
	getInternalFormattedLocalTime() : string
	/**
	 * @description Returns the object's time in the local time zone and in the user's format.
	 * @returns string The object's time in the local time zone and in the user's format.
	 * 
	 */
	getUserFormattedLocalTime() : string
	/**
	 * @description Gets the number of milliseconds since January 1, 1970, 00:00:00 GMT.
	 * @example
	 * //
	 * var gdt = new GlideDateTime("2011-08-31 08:00:00");
	 * gs.info(gdt.getNumericValue());
	 * 
	 * @returns number The number of milliseconds since January 1, 1970, 00:00:00 GMT.
	 * 
	 */
	getNumericValue() : number
	}
/**
	 * @description Build functions to perform SQL operations in the database.
	 * The GlideDBFunctionBuilder methods provide a way to build Relational Database Management System (RDBMS) functions to perform SQL operations on record data. These methods can be used in both scoped and global server scripts.  	
 *   	
 * To use platform functions:	
 * 	
 * *   Construct a function using the GlideDBFunctionBuilder constructor and associated methods.	
 * *   After building a function, you can apply the function to the current record using the addFunction() method of the GlideRecord class.	
 * *   Add the function to a query using the addQuery() method of the GlideRecord class.	
 * *   Retrieve the results of the function using the existing GlideRecord API methods such as getValue() and getElement().
	 * 
	 */
	declare class GlideDBFunctionBuilderScopedGlobal {
	/**
	 * @description Instantiates a GlideDBFunctionBuilder object.
	 * @example
	 * //
	 * var builder = new GlideDBFunctionBuilder();
	 * 
	 * 
	 */
	constructor() 
	/**
	 * @description Concatenates the values of two or more fields.
	 * Use the field(String field) method to define fields on which the operation is performed.
	 * 
	 * @example
	 * //
	 * var functionBuilder = new GlideDBFunctionBuilder();
	 * var myConcatFunction = functionBuilder.concat();
	 * myConcatFunction = functionBuilder.field('short_description');
	 * myConcatFunction = functionBuilder.field('caller_id.name');
	 * myConcatFunction = functionBuilder.build();
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	concat() : void
	/**
	 * @description Determines the number of code units in a field.
	 * Use the field(String field) method to define fields on which the operation is performed.
	 * 
	 * @example
	 * //
	 * var functionBuilder = new GlideDBFunctionBuilder();
	 * var myLengthFunction = functionBuilder.length();
	 * myLengthFunction = functionBuilder.field('short_description');
	 * myLengthFunction = functionBuilder.build();
	 * 
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	length() : void
	/**
	 * @description Adds the values of two or more integer fields.
	 * Use the field(String field) method to define fields on which the operation is performed.
	 * 
	 * @example
	 * //
	 * var functionBuilder = new GlideDBFunctionBuilder();
	 * var myAddingFunction = functionBuilder.add();
	 * myAddingFunction = functionBuilder.field('order');
	 * myAddingFunction = functionBuilder.field('priority');
	 * myAddingFunction = functionBuilder.build();
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	add() : void
	/**
	 * @description Subtracts the value of one integer field from another.
	 * Use the field(String field) method to define fields on which the operation is performed.
	 * 
	 * @example
	 * //
	 * var functionBuilder = new GlideDBFunctionBuilder();
	 * var mySubtractFunction = functionBuilder.subtract();
	 * mySubtractFunction = functionBuilder.field('order');
	 * mySubtractFunction = functionBuilder.field('priority');
	 * mySubtractFunction = functionBuilder.build();
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	subtract() : void
	/**
	 * @description Multiplies the values of two integer fields.
	 * Use the field(String field) method to define fields on which the operation is performed.
	 * 
	 * @example
	 * //
	 * var functionBuilder = new GlideDBFunctionBuilder();
	 * var myMultiplyFunction = functionBuilder.multiply();
	 * myMultiplyFunction = functionBuilder.field('order');
	 * myMultiplyFunction = functionBuilder.field('priority');
	 * myMultiplyFunction = functionBuilder.build();
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	multiply() : void
	/**
	 * @description Divides the value of one integer field by another.
	 * Use the field(String field) method to define fields on which the operation is performed.
	 * 
	 * @example
	 * //
	 * var functionBuilder = new GlideDBFunctionBuilder();
	 * var myDivideFunction = functionBuilder.divide();
	 * myDivideFunction = functionBuilder.field('order');
	 * myDivideFunction = functionBuilder.field('priority');
	 * myDivideFunction = functionBuilder.build();
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	divide() : void
	/**
	 * @description Determines the duration using a given start date/time and end date/time.
	 * Use the field(String field) method to define start and end date/time fields.
	 * 
	 * @example
	 * //
	 * var functionBuilder = new GlideDBFunctionBuilder();
	 * var myDateDiffFunction = functionBuilder.datediff();
	 * myDateDiffFunction = functionBuilder.field('sys_updated_on');
	 * myDateDiffFunction = functionBuilder.field('opened_at');
	 * myDateDiffFunction = functionBuilder.build();
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	datediff() : void
	/**
	 * @description Returns an integer representing the day of the week for a given date.
	 * Use the field(String field) method to define the given date/time. Use the constant(String constant) method to define whether the week starts on a Sunday or Monday.
	 * 
	 * This method can be used with MySQL, Oracle, and Microsoft SQL Server databases only. If using an Oracle database, the NLS\_TERRITORY setting must be set to a territory with Sunday as the first day of the week.
	 * 
	 * @example
	 * //
	 * var functionBuilder = new GlideDBFunctionBuilder();
	 * var dayOfWeekFunction = functionBuilder.dayofweek();
	 * dayOfWeekFunction = functionBuilder.field('opened_at');
	 * dayOfWeekFunction = functionBuilder.constant('2');
	 * dayOfWeekFunction = functionBuilder.build();
	 * 
	 * var now_GR = new GlideRecord('incident');
	 * now_GR.addFunction(dayOfWeekFunction);
	 * now_GR.query();
	 * while(now_GR.next())
	 * gs.log(now_GR.getValue(dayOfWeekFunction));
	 * 
	 * 
	 * @returns Integer If the first day of the week is set to Sunday in the constant(String constant) method, return values are associated with the following days of the week:  *   1: Sunday *   2: Monday *   3: Tuesday *   4: Wednesday *   5: Thursday *   6: Friday *   7: Saturday  If the first day of the week is set to Monday:  *   1: Monday *   2: Tuesday *   3: Wednesday *   4: Thursday *   5: Friday *   6: Saturday *   7: Sunday  If a value other than 1 or 2 is provided in the constant(String constant) method, the dayofweek() method uses Sunday as the first day of the week.
	 * 
	 */
	dayofweek() : Integer
	/**
	 * @description Defines a constant value to use in the function. If used with the dayofweek() method, the string defines whether to use Sunday or Monday as the first day of the week.
	 * @param constant A constant value used in a function.  When used with the dayofweek() method, the value defines whether the week starts on a Sunday or Monday.  *   1: Week begins on Sunday. *   2: Week begins on Monday.  This definition enables the dayofweek() method to return the correct day of the week from a given date. If a value other than 1 or 2 is provided, the dayofweek() method uses Sunday as the first day of the week.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	constant(constant: string) : void
	/**
	 * @description Defines a field on which a SQL operation is performed.
	 * @example
	 * //
	 * var functionBuilder = new GlideDBFunctionBuilder();
	 * var myAddingFunction = functionBuilder.add();
	 * myAddingFunction = functionBuilder.field('order');
	 * myAddingFunction = functionBuilder.field('priority');
	 * myAddingFunction = functionBuilder.build();
	 * 
	 * @param field The field on which you are performing the SQL operation.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	field(field: string) : void
	/**
	 * @description Builds the database function defined by the GlideDBFunctionBuilder object.
	 * @example
	 * //
	 * var functionBuilder = new GlideDBFunctionBuilder();
	 * var myAddingFunction = functionBuilder.add();
	 * myAddingFunction = functionBuilder.field('order');
	 * myAddingFunction = functionBuilder.field('priority');
	 * myAddingFunction = functionBuilder.build();
	 * gs.info(myAddingFunction);
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	build() : void
	}
/**
	 * @description The scoped GlideDigest class provides methods for creating a message digest from strings or input streams using MD5, SHA1, or SHA256 hash algorithms.
	 * 
	 */
	declare class GlideDigest {
	/**
	 * @description Creates an instance of scoped GlideDigest.
	 */
	constructor() 
	/**
	 * @description Create a message digest from a string using the MD5 algorithm. The output string is in Base64.
	 * @example
	 * //
	 * var inputString = "Her molasses flowed slowly down the hill.";
	 * var digest = new GlideDigest();
	 * gs.info(digest.getMD5Base64(inputString));
	 * 
	 * @param source The source string.
	 * 
	 * @returns string The message digest.
	 * 
	 */
	getMD5Base64(source: string) : string
	/**
	 * @description Create a message digest from an input stream using the MD5 algorithm. The output string is in Base64.
	 * @example
	 * //
	 * var inputStream = new GlideSysAttachment().getContentStream(attachmentSysID);
	 * var digest = new GlideDigest();
	 * gs.info(digest.getMD5Base64FromInputStream(inputStream));
	 * 
	 * @param inputStream The source input stream.
	 * 
	 * @returns string The message digest.
	 * 
	 */
	getMD5Base64FromInputStream(inputStream: GlideScriptableInputStream) : string
	/**
	 * @description Create a message digest from a string using the MD5 algorithm. The output string is in hexadecimal.
	 * @example
	 * //
	 * var inputString = "Her molasses flowed slowly down the hill.";
	 * var digest = new GlideDigest();
	 * gs.info(digest.getMD5Hex(inputString));
	 * 
	 * @param source The source string.
	 * 
	 * @returns string The message digest.
	 * 
	 */
	getMD5Hex(source: string) : string
	/**
	 * @description Create a message digest from an input stream using the MD5 algorithm. The output string is in hexadecimal.
	 * @example
	 * //
	 * var inputStream = new GlideSysAttachment().getContentStream(attachmentSysID);
	 * var digest = new GlideDigest();
	 * gs.info(digest.getMD5HexFromInputStream(inputStream));
	 * 
	 * @param inputStream The source input stream.
	 * 
	 * @returns string The message digest.
	 * 
	 */
	getMD5HexFromInputStream(inputStream: GlideScriptableInputStream) : string
	/**
	 * @description Create a message digest from a string using the SHA1 algorithm. The output string is in Base64.
	 * @example
	 * //
	 * var inputString = "Her molasses flowed slowly down the hill.";
	 * var digest = new GlideDigest();
	 * gs.info(digest.getSHA1Base64(inputString));
	 * 
	 * @param source The source string.
	 * 
	 * @returns string The message digest.
	 * 
	 */
	getSHA1Base64(source: string) : string
	/**
	 * @description Create a message digest from an input stream using the SHA1 algorithm. The output string is in Base64.
	 * @example
	 * //
	 * var inputStream = new GlideSysAttachment().getContentStream(attachmentSysID);
	 * var digest = new GlideDigest();
	 * gs.info(digest.getSHA1Base64FromInputStream(inputStream));
	 * 
	 * @param inputStream The source input stream.
	 * 
	 * @returns string The message digest.
	 * 
	 */
	getSHA1Base64FromInputStream(inputStream: GlideScriptableInputStream) : string
	/**
	 * @description Create a message digest from a string using the SHA1 algorithm. The output string is in hexadecimal.
	 * @example
	 * //
	 * var inputString = "Her molasses flowed slowly down the hill.";
	 * var digest = new GlideDigest();
	 * gs.info(digest.getSHA1Hex(inputString));
	 * 
	 * @param source The source string.
	 * 
	 * @returns string The message digest.
	 * 
	 */
	getSHA1Hex(source: string) : string
	/**
	 * @description Create a message digest from an input stream using the SHA1 algorithm. The output string is in hexadecimal.
	 * @example
	 * //
	 * var inputStream = new GlideSysAttachment().getContentStream(attachmentSysID);
	 * var digest = new GlideDigest();
	 * gs.info(digest.getSHA1HexFromInputStream(inputStream));
	 * 
	 * @param inputStream The source input stream.
	 * 
	 * @returns string The message digest.
	 * 
	 */
	getSHA1HexFromInputStream(inputStream: GlideScriptableInputStream) : string
	/**
	 * @description Create a message digest from a string using the SHA256 algorithm. The output string is in Base64.
	 * @example
	 * //
	 * var inputString = "Her molasses flowed slowly down the hill.";
	 * var digest = new GlideDigest();
	 * gs.info(digest.getSHA256Base64(inputString));
	 * 
	 * @param source The source string.
	 * 
	 * @returns string The message digest.
	 * 
	 */
	getSHA256Base64(source: string) : string
	/**
	 * @description Create a message digest from an input stream using the SHA256 algorithm. The output string is in Base64.
	 * @example
	 * //
	 * var inputStream = new GlideSysAttachment().getContentStream(attachmentSysID);
	 * var digest = new GlideDigest();
	 * gs.info(digest.getSHA256Base64FromInputStream(inputStream));
	 * 
	 * @param inputStream The source input stream.
	 * 
	 * @returns string The message digest.
	 * 
	 */
	getSHA256Base64FromInputStream(inputStream: GlideScriptableInputStream) : string
	/**
	 * @description Create a message digest from a string using the SHA256 algorithm. The output string is in hexadecimal.
	 * @example
	 * //
	 * var inputString = "Her molasses flowed slowly down the hill.";
	 * var digest = new GlideDigest();
	 * gs.info(digest.getSHA256Hex(inputString));
	 * 
	 * @param source The source string.
	 * 
	 * @returns string The message digest.
	 * 
	 */
	getSHA256Hex(source: string) : string
	/**
	 * @description Create a message digest from an input stream using the SHA256 algorithm. The output string is in hexadecimal.
	 * @example
	 * //
	 * var inputStream = new GlideSysAttachment().getContentStream(attachmentSysID);
	 * var digest = new GlideDigest();
	 * gs.info(digest.getSHA256HexFromInputStream(inputStream));
	 * 
	 * @param inputStream The source input stream.
	 * 
	 * @returns string The message digest.
	 * 
	 */
	getSHA256HexFromInputStream(inputStream: GlideScriptableInputStream) : string
	}
/**
	 * @description The scoped GlideDuration class provides methods for working with spans of time or durations.
	 * GlideDuration objects store the duration as a date and time from January 1, 1970, 00:00:00. As a result, setValue() and getValue() use the scoped GlideDateTime object for parameters and return values.
	 * 
	 */
	declare class GlideDuration {
	/**
	 * @description Instantiates a GlideDuration object.
	 */
	constructor() 
	/**
	 * @description Instantiates a GlideDuration object by cloning the values of the passed in GlideDuration object.
	 * @example
	 * //
	 * var duration = new GlideDuration('3 12:00:00');
	 * var duration2 = new GlideDuration(duration);
	 * gs.info(duration2.getDisplayValue());
	 * 
	 * @param another GlideDuration object.
	 * 
	 */
	constructor(another: GlideDuration) 
	/**
	 * @description Instantiates a GlideDuration object with the specified duration in milliseconds.
	 * @example
	 * //
	 * var dur = new GlideDuration(60000);
	 * gs.info(dur.getDurationValue());
	 * 
	 * @param milliseconds Duration value.  Unit: Milliseconds
	 * 
	 */
	constructor(milliseconds: number) 
	/**
	 * @description Instantiates a GlideDuration object with the specified duration display value.
	 * @example
	 * //
	 * var duration = new GlideDuration('3 12:00:00');
	 * var duration2 = new GlideDuration('3:00:00');
	 * var answer = duration.add(duration2);
	 * gs.info(answer.getDisplayValue());
	 * 
	 * @param displayValue Duration value.  Format: d HH:mm:ss
	 * 
	 */
	constructor(displayValue: string) 
	/**
	 * @description Adds the duration of the specified GlideDuration object to the current GlideDuration object.
	 * @example
	 * //
	 * var duration = new GlideDuration('3 12:00:00');
	 * var duration2 = new GlideDuration('3:00:00');
	 * var answer = duration.add(duration2);
	 * gs.info(answer.getDisplayValue());
	 * 
	 * @param duration GlideDuration object that contains the duration value to add to the current GlideDuration object.
	 * 
	 * @returns GlideDuration New GlideDuration object whose duration is the sum of the durations of the two GlideDuration objects.
	 * 
	 */
	add(duration: GlideDuration) : GlideDuration
	/**
	 * @description Returns the duration value in the specified format.
	 * @example
	 * //
	 * var dur = new GlideDuration('3 22:00:00');
	 * gs.info(dur.getByFormat('HH:mm'));
	 * 
	 * @param format Duration format.
	 * 
	 * @returns string Current duration in the specified format.
	 * 
	 */
	getByFormat(format: string) : string
	/**
	 * @description Returns the number of days.
	 * @example
	 * //
	 * var dur = new GlideDuration('3 12:00:00');
	 * gs.info(dur.getDayPart());
	 * 
	 * @returns number Number of days in the duration.
	 * 
	 */
	getDayPart() : number
	/**
	 * @description Returns the rounded number of days. If the time part is more than 12 hours, the return value is rounded up. Otherwise, it is rounded down.
	 * @example
	 * //
	 * var dur = new GlideDuration('3 11:00:00');
	 * gs.info(dur.getRoundedDayPart());
	 * 
	 * @returns number Day value of the display value rounded.
	 * 
	 */
	getRoundedDayPart() : number
	/**
	 * @description Returns the display value of the duration in number of days, hours, and minutes.
	 * @example
	 * //
	 * var dur = new GlideDuration('3 12:00:00');
	 * gs.info(dur.getDisplayValue());
	 * 
	 * @returns string Number of days, hours, and minutes, such as 2 Days 10 Hours 36 Minutes.  Format: Display value: "n" Days "n" Hours "n" Minutes
	 * 
	 */
	getDisplayValue() : string
	/**
	 * @description Returns the duration value in "d HH:mm:ss" format.
	 * @example
	 * //
	 * var dur = new GlideDuration(60000);
	 * gs.info(dur.getDurationValue());
	 * 
	 * @returns string Duration value.  Format: d HH:mm:ss
	 * 
	 */
	getDurationValue() : string
	/**
	 * @description Sets the duration display value.
	 * @example
	 * //
	 * var dur = new GlideDuration(); 
	 * dur.setDisplayValue('3 08:00:00');
	 * gs.info(dur.getDisplayValue());
	 * 
	 * @param asDisplayed Display duration value to set.  Format: d HH:mm:ss
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setDisplayValue(asDisplayed: string) : void
	/**
	 * @description Returns the internal date/time value of the current GlideDuration object.
	 * GlideDuration objects store the duration as a date and time from January 1, 1970, 00:00:00.
	 * 
	 * @example
	 * //
	 * var dur = new GlideDuration('3 12:00:00');
	 * gs.info(dur.getValue());
	 * 
	 * @returns string Current duration within the GlideDuration object.  Format: YYYY-MM-DD HH:mm:ss
	 * 
	 */
	getValue() : string
	/**
	 * @description Sets the internal date/time value of the GlideDuration object.
	 * The method sets the duration value to the difference of the passed in date/time the base date/time value of January 1, 1970, 00:00:00. The passed in date/time object (string) is parsed into a GlideDateTime object.
	 * 
	 * @example
	 * //
	 * var dur = new GlideDuration();
	 * dur.setValue('1970-01-05 08:00:00'); // sets internal DateTime value. The String is parsed into a GlideDateTime object.
	 * gs.info(dur.getDisplayValue());
	 * 
	 * @param o Date and time to use as the endpoint for the calculated duration time.  Format: YYYY-MM-DD HH:mm:ss
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setValue(o: Object) : void
	/**
	 * @description Subtracts the duration of the specified GlideDuration object to the current GlideDuration object.
	 * @example
	 * //
	 * var duration = new GlideDuration('3 12:00:00');
	 * var duration2 = new GlideDuration('3:00:00');
	 * var answer = duration.subtract(duration2);
	 * gs.info(answer.getDisplayValue());
	 * 
	 * @param duration GlideDuration object that contains the duration value to subtract from the current GlideDuration object.
	 * 
	 * @returns GlideDuration New GlideDuration object whose duration contains the result of the subtraction of the duration of the two GlideDuration objects.
	 * 
	 */
	subtract(duration: GlideDuration) : GlideDuration
	}
/**
	 * @description The Scoped GlideElement API provides a number of convenient script methods for dealing with fields and their values. Scoped GlideElement methods are available for the fields of the current GlideRecord.
	 * 
	 */
	declare class GlideElement {
	/**
	 * @description Determines if the user's role permits the creation of new records in this field.
	 * @returns boolean True if the field can be created, false otherwise.
	 * 
	 */
	canCreate() : boolean
	/**
	 * @description Indicates whether the user's role permits them to read the associated GlideRecord.
	 * @returns boolean True if the field can be read, false otherwise.
	 * 
	 */
	canRead() : boolean
	/**
	 * @description Determines whether the user's role permits them to write to the associated GlideRecord.
	 * @returns boolean True if the user can write to the field, false otherwise.
	 * 
	 */
	canWrite() : boolean
	/**
	 * @description Determines if the current field has been modified. This functionality is available for all available data types, except Journal fields.
	 * Note: The changes() method is not supported within ACL scripts.
	 * 
	 * Note: If the GlideRecord on which you are performing this method has only been initialized and read, and has not been written, the underlying before-and-after values are the same. In this case, the method returns "false", as there has been no change to the data store.
	 * 
	 * @example
	 * //
	 * // This method is often used in business rules. The following example shows is from a business rule, 
	 * // if "assigned_to" field value is changed, create a event in the EventQueue. 
	 * if (!current.assigned_to.nil() &amp;&amp; current.assigned_to.changes()) {
	 *   gs.eventQueue('incident.assigned', current, current.assigned_to.getDisplayValue() , previous.assigned_to.getDisplayValue());
	 *   }
	 * 
	 * @returns boolean True if the fields have been changed, false if the field has not.
	 * 
	 */
	changes() : boolean
	/**
	 * @description Determines if the previous value of the current field matches the specified object.
	 * Note: If the GlideRecord on which you are performing this method has only been initialized and read, and has not been written, the underlying before-and-after values are the same. In this case, the method returns "false", as there has been no change to the data store.
	 * 
	 * @example
	 * //
	 * // The following example shows that in a business rule, if "active" field is changed from true, 
	 * // insert a event in the EventQueue.
	 * if (current.active.changesFrom(true)) {
	 *   gs.eventQueue("incident.inactive", current, current.incident_state, previous.incident_state);
	 * }
	 * 
	 * @param o An object value to check against the previous value of the current field.
	 * 
	 * @returns boolean True if the previous value matches, false if it does not.
	 * 
	 */
	changesFrom(o: Object) : boolean
	/**
	 * @description Determines if the new value of a field, after a change, matches the specified object.
	 * Note: The changesTo() method is not supported within ACL scripts.
	 * 
	 * Note: If the GlideRecord on which you are performing this method has only been initialized and read, and has not been written, the underlying before-and-after values are the same. In this case, the method returns "false", as there has been no change to the data store.
	 * 
	 * @example
	 * //
	 * // The following example shows that in a business rule, if "active" field is changed to false, 
	 * // insert a event in the EventQueue.
	 * if (current.active.changesTo(false)) {
	 *   gs.eventQueue("incident.inactive", current, current.incident_state, previous.incident_state);
	 * }
	 * 
	 * @param o An object value to check against the new value of the current field.
	 * 
	 * @returns boolean True if the previous value matches, false if it does not.
	 * 
	 */
	changesTo(o: Object) : boolean
	/**
	 * @description Returns the number of milliseconds since January 1, 1970, 00:00:00 GMT for a duration field. Does not require the creation of a GlideDateTime object because the duration field is already a GlideDateTime object.
	 * @example
	 * //
	 * var inc = new GlideRecord('incident');
	 * inc.get('17c90efb13418700cc36b1422244b05d');
	 * gs.info(inc.calendar_duration.dateNumericValue());
	 * 
	 * @returns number Number of milliseconds since January 1, 1970, 00:00:00 GMT.
	 * 
	 */
	dateNumericValue() : number
	/**
	 * @description Returns the value of the specified attribute from the dictionary.
	 * If the attribute is a boolean attribute, use getBooleanAttribute(String) to get the value as a boolean rather than as a string.
	 * 
	 * @example
	 * //
	 * doit();
	 * function doit() {
	 *   var now_GR = new GlideRecord('sys_user');
	 *   now_GR.query("user_name","admin");
	 *   if (now_GR.next()) {
	 *     gs.info("we got one");
	 *     gs.info(now_GR.location.getAttribute("tree_picker"));
	 *   }
	 *  
	 * }
	 * 
	 * @param attributeName Attribute name
	 * 
	 * @returns string Attribute value
	 * 
	 */
	getAttribute(attributeName: string) : string
	/**
	 * @description Returns the Boolean value of the specified attribute from the dictionary.
	 * To get the value as a string, use getAttribute(string).
	 * 
	 * @param attributeName Attribute name
	 * 
	 * @returns boolean Boolean value of the attribute. Returns false if the attribute does not exist.
	 * 
	 */
	getBooleanAttribute(attributeName: string) : boolean
	/**
	 * @description Returns the choice list for a specified field.
	 * The field for which to return the choice list is specified in the method call. For example: var choices = glideRecord.urgency.getChoices();. For information on choice list field types and their associated capabilities, see [Choice list field type](https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/field-administration/concept/c_ChoiceLists.html).
	 * 
	 * @example
	 * //
	 * var glideRecord = new GlideRecord('incident'); 
	 * glideRecord.query('priority','1'); 
	 * glideRecord.next(); 
	 *  
	 * // urgency has choice list: 1 - High, 2 - Medium, 3 - Low, with value: 1, 2, 3
	 * var choices = glideRecord.urgency.getChoices();
	 * 
	 * @param dependent Optional. Field within the associated record on which the choice list field depends.
	 * 
	 * @returns Array List of possible values for the choice list, which are the values in the Choice \[sys\_choice\] table. If the dependent parameter is passed, the return results reflect only those choices available for the specified dependent field.
	 * 
	 */
	getChoices(dependent: string) : Array
	/**
	 * @description Returns the choice label for the current choice.
	 * A choice has a value (number) and a label (string). This method returns the label.
	 * 
	 * @example
	 * //
	 * var glideRecord = new GlideRecord('incident'); 
	 * glideRecord.query('priority','1'); 
	 * glideRecord.next(); 
	 *  
	 * // urgency has choice list: 1 - High, 2 - Medium, 3 - Low, with value: 1, 2, 3
	 * var choiceLabel = glideRecord.urgency.getChoiceValue(); 
	 * gs.info(choiceLabel);
	 * 
	 * @returns string The selected choice's label.
	 * 
	 */
	getChoiceValue() : string
	/**
	 * @description Returns the clear text value for Password (2 way encrypted) fields in scoped applications.
	 * @example
	 * //
	 * var tablename = 'x_scoped_app_table'
	 * var CI = new GlideRecord(tablename);  
	 * CI.addQuery('number', '0001002'); 
	 * CI.query(); 
	 * CI.next(); 
	 * 
	 * var password = CI.password_field
	 * var decrypted = password.getDecryptedValue(); 
	 * gs.info(decrypted);
	 * 
	 * @returns string The clear text password.
	 * 
	 */
	getDecryptedValue() : string
	/**
	 * @description Gets the formatted display value of the field.
	 * @example
	 * //
	 * var glideRecord = new GlideRecord('incident');
	 * glideRecord.query('priority','1');
	 * glideRecord.next();
	 * gs.info(glideRecord.priority.getDisplayValue());
	 * 
	 * @param maxCharacters Optional: Maximum characters desired
	 * 
	 * @returns string The display value of the field
	 * 
	 */
	getDisplayValue(maxCharacters: number) : string
	/**
	 * @description Returns the field's element descriptor.
	 * @example
	 * //
	 * var grInc = new GlideRecord('incident');
	 * grInc.query('priority', '1');
	 *  
	 * var field = grInc.getElement('priority');
	 * var ed = field.getED();
	 * 
	 * @returns ScopedGlideElementDescriptor The field's element descriptor.
	 * 
	 */
	getED() : ScopedGlideElementDescriptor
	/**
	 * @description Returns the phone number in international format.
	 * @returns string The phone number in international format.
	 * 
	 */
	getGlobalDisplayValue() : string
	/**
	 * @description Returns the HTML value of a field.
	 * @example
	 * //
	 * var inccause = new GlideRecord("incident");
	 * inccause.short_description = current.short_description;
	 * inccause.comments = current.comments.getHTMLValue();
	 * inccause.insert();
	 * 
	 * @param maxChars Optional. Maximum number of characters to return.
	 * 
	 * @returns string HTML value for the field.
	 * 
	 */
	getHTMLValue(maxChars: number) : string
	/**
	 * @description Returns either the most recent journal entry or all journal entries.
	 * @example
	 * //
	 * //gets all journal entries as a string where each entry is delimited by '\n\n'
	 * var notes = current.work_notes.getJournalEntry(-1); 
	 * //stores each entry into an array of strings
	 * var na = notes.split("\n\n");  
	 *                       
	 * for (var i = 0; i &lt; na.length; i++)                 
	 *   gs.info(na[i]);
	 * 
	 * @param mostRecent If 1, returns the most recent entry. If -1, returns all journal entries.
	 * 
	 * @returns string For the most recent entry, returns a string that contains the field label, timestamp, and user display name of the journal entry.  For all journal entries, returns the same information for all journal entries ever entered as a single string with each entry delimited by "\\n\\n".
	 * 
	 */
	getJournalEntry(mostRecent: number) : string
	/**
	 * @description Returns the object label.
	 * @example
	 * //
	 * var now_GR = new GlideRecord("sc_req_item");
	 * now_GR.addQuery("request", current.sysapproval);
	 * now_GR.query();
	 * while(now_GR.next()) {
	 *     var nicePrice = now_GR.price.toString();
	 *     if (nicePrice != ) {
	 *         nicePrice = parseFloat(nicePrice);
	 *         nicePrice = nicePrice.toFixed(2);
	 *     }
	 *     template.print(now_GR.number + ":  " + now_GR.quantity + " X " + now_GR.cat_item.getDisplayValue() + " at $" + nicePrice + " each \n");
	 *     template.print("    Options:\n");
	 *     var variables = now_GR.variables.getElements();    
	 *     for (var key in variables) {
	 *       var now_V = variables[key];
	 *       if(now_V.getQuestion().getLabel() != ) {
	 *          template.space(4);
	 *          template.print('     ' +  now_V.getQuestion().getLabel() + " = " + now_V.getDisplayValue() + "\n");  
	 *       }
	 *     }
	 * }
	 * 
	 * @returns string Object label
	 * 
	 */
	getLabel() : string
	/**
	 * @description Returns the name of the field.
	 * @returns string Field name
	 * 
	 */
	getName() : string
	/**
	 * @description Gets the table name for a reference element.
	 * @example
	 * //
	 * var grINC = new GlideRecord('incident');
	 * grINC.query('number','INC0010041'); // record assignment group assigned to "CAB Approval"
	 * if (grINC.next()) { 
	 *   // Get the table name 
	 *   var tableName = grINC.assignment_group.getReferenceTable();
	 *   gs.info( tableName ); 
	 * }
	 * 
	 * @returns string The table name of the reference
	 * 
	 */
	getReferenceTable() : string
	/**
	 * @description Returns a GlideRecord object for a given reference element.
	 * Warning: If the reference element does not contain a value, it returns an empty GlideRecord object, not a NULL object.
	 * 
	 * @example
	 * //
	 * 
	 * var grINC = new GlideRecord('incident'); 
	 * grINC.addNotNullQuery('caller_id'); 
	 * grINC.query(); 
	 * if (grINC.next()) { 
	 * 
	 * // Get a GlideRecord object for the referenced sys_user record 
	 * var grUSER = grINC.caller_id.getRefRecord(); 
	 * if (grUSER.isValidRecord()) 
	 *   gs.info(grUSER.getValue('name')); 
	 * 
	 * } 
	 * 
	 * @returns GlideRecord A GlideRecord object
	 * 
	 */
	getRefRecord() : GlideRecord
	/**
	 * @description Returns the name of the table on which the field resides.
	 * @example
	 * //
	 * if (current.approver.getTableName() == "sysapproval_approver") {
	 *   if (current.approver == email.from_sys_id)  {
	 *      current.comments = "reply from: " + email.from + "\n\n" + email.body_text;
	 *  
	 *    // if it's been cancelled, it's cancelled.
	 *   var doit = true;
	 *   if (current.state=='cancelled')
	 *       doit = false;
	 *  
	 *   if (email.body.state != undefined)
	 *      current.state= email.body.state;
	 *  
	 *    if (doit)
	 *       current.update();
	 * } else {
	 *    gs.log("Approval for task ("+current.sysapproval.getDisplayValue()+") rejected because user sending 
	 *            email( "+email.from+") does not match the approver ("+current.approver.getDisplayValue()+")");
	 * }
	 *  
	 * }
	 * 
	 * @returns string Name of the table. The returned value may be different from the table Class that the record is in. See Tables and Classes in the product documentation.
	 * 
	 */
	getTableName() : string
	/**
	 * @description Determines if a field is null.
	 * @example
	 * //
	 * var glideRecord = new GlideRecord('incident'); 
	 * glideRecord.query('priority','1'); 
	 * glideRecord.next(); 
	 * gs.info(glideRecord.state.nil());
	 * 
	 * @returns boolean True if the field is null or an empty string, false if not.
	 * 
	 */
	nil() : boolean
	/**
	 * @description Sets the value of a date/time element to the specified number of milliseconds since January 1, 1970 00:00:00 GMT.
	 * When called, setDateNumericValue() automatically creates the necessary GlideDateTime/GlideDate/GlideDuration object, and then sets the element to the specified value.
	 * 
	 * Note: Before calling this method, the element must already exist by querying an existing record or by using the now\_GR.initialize() method to initialize a new record.
	 * 
	 * @example
	 * //
	 * var now_GR = new GlideRecord("incident");
	 * now_GR.initialize();
	 * now_GR.opened_at.setDateNumericValue(10000);
	 * 
	 * @param milliseconds Number of milliseconds since 1/1/1970
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setDateNumericValue(milliseconds: number) : void
	/**
	 * @description Sets the display value of the field.
	 * @example
	 * //
	 * var glideRecord = new GlideRecord('incident'); 
	 * glideRecord.query('priority','1'); 
	 * glideRecord.next();
	 *  
	 * //change the urgency to 3 
	 * glideRecord.urgency.setDisplayValue('3 - Low');
	 * gs.info(glideRecord.urgency);
	 * 
	 * @param value The value to set for the field.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setDisplayValue(value: Object) : void
	/**
	 * @description Adds an error message. Available in Fuji patch 3.
	 * @example
	 * //
	 * var glideRecord = new GlideRecord('incident');
	 * glideRecord.query('priority','1');
	 * glideRecord.next();
	 *  
	 * glideRecord.short_description.setError('Error text');
	 * 
	 * @param errorMessage The error message.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setError(errorMessage: string) : void
	/**
	 * @description Sets the field to the specified phone number.
	 * This method is only available on a phone number GlideElement.
	 * 
	 * @param phoneNumber The phone number to set. This can be in either the international or local format.
	 * @param strict When true, specifies that the number specified must match the correct format. When false, the system attempts to correct an improperly formatted phone number.
	 * 
	 * @returns boolean True if the value was set.
	 * 
	 */
	setPhoneNumber(phoneNumber: Object,strict: boolean) : boolean
	/**
	 * @description Sets the value of a field.
	 * Note: Before calling this method, the element must already exist by querying an existing record or by using the now\_GR.initialize() method to initialize a new record.
	 * 
	 * @example
	 * //Set the value passing a string.
	 * var glideRecord = new GlideRecord('incident');
	 * glideRecord.query('priority','1');
	 * glideRecord.next();
	 * glideRecord.short_description.setValue('Network failure');
	 * 
	 * @example
	 * //Set the value passing an object.
	 * var now_GR  = new GlideRecord(‘student’);
	 * now_GR.initialize();
	 * now_GR.setValue('first_name', 'Joe');
	 * now_GR.setValue('last_name', 'Smith');
	 * now_GR.insert();
	 * 
	 * @param value Object value to set the field to.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setValue(value: Object) : void
	/**
	 * @description Converts the value of a GlideRecord field to a string.
	 * @example
	 * //
	 * var glideRecord = new GlideRecord('incident');
	 * glideRecord.query('priority','1');
	 * glideRecord.next();
	 * gs.info(glideRecord.opened_at.toString());
	 * 
	 * @returns string Value as a string.
	 * 
	 */
	toString() : string
	}
/**
	 * @description The GlideElementCurrency2 API provides methods to perform operations on Foreign Exchange (FX) Currency fields (also known as Currency2) within the current GlideRecord.
	 * This API provides methods that enable you to perform the following:	
 * 	
 * *   Obtain the FX Currency field display string, as entered by the user.	
 * *   Obtain the display value of an FX Currency field.	
 * *   Obtain the reference currency value of an FX Currency field.	
 * *   Obtain the session currency value of an FX Currency field.	
 * *   Set the display value of an FX Currency field.	
 * 	
 *   	
 *   	
 * The GlideElementCurrency2 class has no constructor.
	 * 
	 */
	declare class GlideElementCurrency2 {
	/**
	 * @description Returns the currency value as entered by the user.
	 * @example
	 * //
	 * var tablename = 'my_currency2_table';
	 * var setcur2 = new GlideRecord(tablename);
	 * setcur2.initialize();
	 * setcur2.currency_2_field.setDisplayValue('JPY;999999.1234');
	 * setcur2.insert();
	 * gs.info('As entered display value: ' + setcur2.currency_2_field.getAsEnteredDisplayValue());
	 * 
	 * @returns string The display value as entered by the user.
	 * 
	 */
	getAsEnteredDisplayValue() : string
	/**
	 * @description Returns the formatted currency string.
	 * @example
	 * //
	 * var tablename = 'my_currency2_table';
	 * var setcur2 = new GlideRecord(tablename);
	 * setcur2.initialize();
	 * setcur2.currency_2_field.setDisplayValue('JPY;999999.1234');
	 * setcur2.insert();
	 * gs.info('Display Value: ' + setcur2.currency_2_field.getDisplayValue());
	 * 
	 * @returns string Formatted currency string defined by the currency\_display\_value and currency\_display\_digits dictionary attributes.
	 * 
	 */
	getDisplayValue() : string
	/**
	 * @description Returns the reference currency value.
	 * @example
	 * //Output will change based on locale.
	 * var tablename = 'my_currency2_table';
	 * var setcur2 = new GlideRecord(tablename);
	 * setcur2.initialize();
	 * setcur2.currency_2_field.setDisplayValue('JPY;999999.1234');
	 * setcur2.insert();
	 * gs.info('Reference display value: ' + setcur2.currency_2_field.getReferenceDisplayValue());
	 * 
	 * @returns string The reference currency value. If the reference currency value is not computed, the system converts the currency value to the reference currency.
	 * 
	 */
	getReferenceDisplayValue() : string
	/**
	 * @description Returns the currency value converted to the session currency.
	 * @example
	 * //Output will change based on locale.
	 * var tablename = 'my_currency2_table';
	 * var setcur2 = new GlideRecord(tablename);
	 * setcur2.initialize();
	 * setcur2.currency_2_field.setDisplayValue('JPY;999999.1234');
	 * setcur2.insert();
	 * gs.info('Session display value: ' + setcur2.currency_2_field.getSessionDisplayValue());
	 * 
	 * @returns string Currency value converted to the session currency.
	 * 
	 */
	getSessionDisplayValue() : string
	/**
	 * @description Sets the display value of a Currency2 field by parsing the displayValue string.
	 * @example
	 * //
	 * var tablename = 'my_currency2_table';
	 * var setcur2 = new GlideRecord(tablename);
	 * setcur2.initialize();
	 * setcur2.currency_2_field.setDisplayValue('JPY;999,999.1234');
	 * setcur2.insert();
	 * 
	 * @param displayValue The display value in the format "<currency type>;<currency amount>" where the amount is formatted in the user's locale.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setDisplayValue(displayValue: string) : void
	}
/**
	 * @description The GlideElementDescriptor API provides information about individual fields in a record.
	 * There is no constructor for this class. Use the GlideElement or GlideRecord getED() method to obtain a GlideElementDescriptor object.
	 * 
	 */
	declare class GlideElementDescriptor {
	/**
	 * @description Returns the encryption type used for attachments on the element's table.
	 * This method is for use with the Edge Encryption plugin.
	 * 
	 * @example
	 * //
	 * var grInc = new GlideRecord('incident');
	 * grInc.query('priority', '1');
	 * 
	 * var field = grInc.getElement('priority');
	 * var ed = field.getED();
	 * 
	 * var isEdge = ed.getAttachmentEncryptionType();
	 * gs.info(isEdge);
	 * 
	 * 
	 * @returns string The encryption type used on attachments. Returns null if attachments on the element's table are not being encrypted.
	 * 
	 */
	getAttachmentEncryptionType() : string
	/**
	 * @description Returns the element's encryption type.
	 * This method is for use with the Edge Encryption plugin.
	 * 
	 * @example
	 * //
	 * var grInc = new GlideRecord('incident');
	 * grInc.query('priority', '1');
	 * 
	 * var field = grInc.getElement('priority');
	 * var ed = field.getED();
	 * 
	 * sEdge = ed.getEncryptionType();
	 * gs.info(isEdge);
	 * 
	 * @returns string The element's encryption type. Returns null if the element is not encrypted.
	 * 
	 */
	getEncryptionType() : string
	/**
	 * @description Returns the element's internal data type.
	 * @example
	 * //
	 * var grInc = new GlideRecord('incident');
	 * grInc.query('priority', '1');
	 *  
	 * var field = grInc.getElement('priority');
	 * var ed = field.getED();
	 *  
	 * var isEdge = ed.getInternalType();
	 * gs.info(isEdge);
	 * 
	 * @returns string The element's internal data type.  Possible values:  *   boolean *   char *   collection *   conditions *   date *   decimal *   documentation\_field *   domain\_id *   due\_date *   email *   field\_name *   file\_attachment *   float *   glide\_date *   glide\_date\_time *   glide\_duration *   glide\_list *   GUID *   html *   image *   integer *   long *   longint *   multi\_two\_lines *   journal *   journal\_input *   numeric *   order\_index *   password *   ph\_number *   reference *   script *   script\_plain *   string *   sys\_class\_name *   table\_name *   template\_value *   timer *   translated\_field *   url *   user\_image *   user\_input *   user\_roles *   video *   workflow
	 * 
	 */
	getInternalType() : string
	/**
	 * @description Returns the element's label.
	 * @example
	 * //
	 * var grInc = new GlideRecord('incident');
	 * grInc.query('priority', '1');
	 *  
	 * var field = grInc.getElement('priority');
	 * var ed = field.getED();
	 *  
	 * var isEdge = ed.getLabel();
	 * gs.info(isEdge);
	 * 
	 * @returns string The element's label.
	 * 
	 */
	getLabel() : string
	/**
	 * @description Returns the element's length.
	 * @example
	 * //
	 * var grInc = new GlideRecord('incident');
	 * grInc.query('priority', '1');
	 *  
	 * var field = grInc.getElement('priority');
	 * var ed = field.getED();
	 *  
	 * var isEdge = ed.getLength();
	 * gs.info(isEdge);
	 * 
	 * @returns number The element's size.
	 * 
	 */
	getLength() : number
	/**
	 * @description Returns the element's name.
	 * @example
	 * //
	 * var grInc = new GlideRecord('incident');
	 * grInc.query('priority', '1');
	 *  
	 * var field = grInc.getElement('priority');
	 * var ed = field.getED();
	 *  
	 * var isEdge = ed.getName();
	 * gs.info(isEdge);
	 * 
	 * @returns string The element's name.
	 * 
	 */
	getName() : string
	/**
	 * @description Returns the element's plural label.
	 * @example
	 * //
	 * var now_GR = new GlideRecord('incident');
	 * now_GR.query();
	 * var ed = now_GR.getED();
	 * gs.info(ed.getPlural());
	 * 
	 * @returns string The element's plural label.
	 * 
	 */
	getPlural() : string
	/**
	 * @description Returns true if an encrypted attachment has been added to the table.
	 * This method is for use with the Edge Encryption plugin.
	 * 
	 * @example
	 * //
	 * var grInc = new GlideRecord('incident');
	 * grInc.query('priority', '1');
	 * 
	 * var field = grInc.getElement('priority');
	 * var ed = field.getED();
	 * 
	 * var isEdge = ed.hasAttachmentsEncrypted();
	 * gs.info(isEdge);
	 * 
	 * @returns boolean Returns true if an encrypted attachment has been added to the table.
	 * 
	 */
	hasAttachmentsEncrypted() : boolean
	/**
	 * @description Returns true if the element is an automatically generated or system field.
	 * Automatically generated and system fields cannot be encrypted. This method is for use with the Edge Encryption plugin.
	 * 
	 * @example
	 * //
	 * var grInc = new GlideRecord('incident');
	 * grInc.query('priority', '1');
	 * var field = grInc.getElement('priority');
	 * var ed = field.getED();
	 * 
	 * isEdge = ed.isAutoOrSysID();
	 * gs.info(isEdge);
	 * 
	 * 
	 * @returns boolean True if the element is automatically generated or a system field.
	 * 
	 */
	isAutoOrSysID() : boolean
	/**
	 * @description Returns true if the element is defined as a dropdown choice in its dictionary definition.
	 * Choice fields cannnot be encrypted.
	 * 
	 * @example
	 * //
	 * var grInc = new GlideRecord('incident');
	 * grInc.query('priority', '1');
	 * 
	 * var field = grInc.getElement('priority');
	 * var ed = field.getED();
	 * 
	 * var isChoiceTable = ed.isChoiceTable();
	 * gs.info(isChoiceTable);
	 * 
	 * @returns boolean Returns true if the element is defined as a dropdown choice. Returns true even if there are no entries defined in the choice table. The last choice type, suggestion, does not return true.
	 * 
	 */
	isChoiceTable() : boolean
	/**
	 * @description Returns true if an element is encrypted.
	 * This method is for use with the Edge Encryption plugin.
	 * 
	 * @example
	 * //
	 * var grInc = new GlideRecord('incident');
	 * grInc.query('priority', '1');
	 * 
	 * var field = grInc.getElement('priority');
	 * var ed = field.getED();
	 * 
	 * var isEdge = ed.isEdgeEncrypted();
	 * gs.info(isEdge)
	 * 
	 * @returns boolean Returns true if the element is encrypted, false otherwise.
	 * 
	 */
	isEdgeEncrypted() : boolean
	/**
	 * @description Determines whether the element is mandatory and must contain a value before the record can be saved.
	 * @example
	 * //This example shows how to check whether the name field is mandatory.
	 * var isRecordValid;
	 * var now_GR = new GlideRecord('my_table');
	 * var field = now_GR.getElement('name');
	 * var elementDescriptor = field.getED();
	 * now_GR.query();
	 * while (now_GR.next()) {
	 *   if (elementDescriptor.isMandatory() &amp;&amp; !now_GR.name) {
	 *        isRecordValid = false;
	 *   }
	 * }
	 * 
	 * @returns boolean Flag that indicates whether the associated element is mandatory and must contain a value before the record containing the element can be saved.  Valid values:  *   true: element must contain a value; mandatory field *   false: element does not have to contain a value
	 * 
	 */
	isMandatory() : boolean
	/**
	 * @description Returns true if the element is a virtual element.
	 * A virtual element is a calculated field as set by the dictionary definition of the field. Virtual fields cannot be encrypted.
	 * 
	 * @example
	 * //
	 * var grInc = new GlideRecord('incident');
	 * grInc.query('priority', '1');
	 * 
	 * var field = grInc.getElement('priority');
	 * var ed = field.getED();
	 * 
	 * var isVirtual = ed.isVirtual();
	 * gs.info(isVirtual);
	 * 
	 * @returns boolean Returns true if the element is a virtual element.
	 * 
	 */
	isVirtual() : boolean
	}
/**
	 * @description The scoped GlideEmailOutbound class implements the email object for scoped applications. You can use the GlideEmailOutbound methods with the email global object available in mail scripts. The email object behaves identically for global and scoped applications.
	 * 
	 */
	declare class GlideEmailOutbound {
	/**
	 * @description Instantiates a scoped GlideEmailOutbound object.
	 */
	constructor() 
	/**
	 * @description Returns the email's subject line.
	 * @returns string The email's subject line.
	 * 
	 */
	getSubject() : string
	/**
	 * @description Returns the email's watermark.
	 * @example
	 * //
	 * var watermark = email.getWatermark();
	 * 
	 * @returns string The email's watermark.
	 * 
	 */
	getWatermark() : string
	/**
	 * @description Sets the email's subject line.
	 * @example
	 * //
	 * email.setSubject('Important Issues to discuss');
	 * 
	 * @param subject Text for the subject line.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setSubject(subject: string) : void
	/**
	 * @description Sets the sender's address.
	 * @example
	 * //
	 * email.setFrom('joe.employee@something.com');
	 * 
	 * @param address The sender's email address.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setFrom(address: string) : void
	/**
	 * @description Sets the reply to address.
	 * @example
	 * //
	 * email.setReplyTo('joe.employee@something.com');
	 * 
	 * @param address The reply to email address.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setReplyTo(address: string) : void
	/**
	 * @description Adds the address to either the cc or bcc list.
	 * @example
	 * //
	 * email.addAddress('cc', 'joe.employee@something.com');
	 * 
	 * @param type Either cc or bcc, determines the list to which the address is added.
	 * @param address The recipient's email address.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	addAddress(type: string,address: string) : void
	/**
	 * @description Adds the recipient to either the cc or bcc list, but uses the display name instead of the address when showing the recipient.
	 * @example
	 * //
	 * email.addAddress('bcc', 'joe.employee@something.com', 'dudley rocks');
	 * 
	 * @param type Either cc or bcc, determines the list to which the address is added.
	 * @param address The recipient's email address.
	 * @param displayName The name to be shown instead of the email address.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	addAddress(type: string,address: string,displayName: string) : void
	/**
	 * @description Sets the body of the email.
	 * @example
	 * //
	 * email.setBody('Dear Sir, ...');
	 * 
	 * @param bodyText The body of the email.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setBody(bodyText: string) : void
	}
/**
	 * @description The Scoped GlideFilter API provides a method to determine if a record meets a specified set of requirements.
	 * There is no constructor for Scoped GlideFilter. It is accessed by using the global object "GlideFilter".
	 * 
	 */
	declare class GlideFilter {
	/**
	 * @description Compares a specified filter to the contents of a specified GlideRecord.
	 * If the specified filter contains one condition, the method returns true if the record meets the condition of the filter.
	 * 
	 * If the specified filter contains more than one condition, for example "active=true^number=abc^category=request", you can use the match parameter to define whether all conditions must be met to determine a match or just a single condition.
	 * 
	 * @example
	 * //
	 * var rec = new GlideRecord('incident');
	 * rec.query();
	 * var bool = true;
	 *  
	 * while(rec.next())
	 * {
	 *    bool = GlideFilter.checkRecord(rec, "active=true");
	 *    gs.info("number "+ rec. number + " is " + bool);
	 * }
	 * 
	 * @param gr GlideRecord to evaluate.
	 * @param filter Encoded query string (case-sensitive).
	 * @param match Optional. Flag that indicates whether all conditions must be met if the filter parameter contains multiple conditions.  Valid values:  *   true: all conditions must be met for the method to return true *   false: only one of the conditions must be met for the method to return true  Default: true
	 * 
	 * @returns boolean Results of the filter comparison.  *   true: filter conditions were met *   false: filer conditions were not met
	 * 
	 */
	checkRecord(gr: GlideRecord,filter: string,match: boolean) : boolean
	}
/**
	 * @description The scoped GlideFormScratchpad class implements the g\_scratchpad object for scoped applications.
	 * The scoped GlideFormScratchpad class has no constructor and no methods. The g\_scratchpad object behaves identically for global and scoped applications.  	
 *   	
 * The g\_scratchpad object provides a mechanism for passing information from the server to the client when the client requires information not available on a form. This can be accomplished by creating a business rule to put the information in the g\_scratchpad object and accessing the information in a client script.  	
 *   	
 * For an example on using this class, [Example: g\_scratchpad](https://developer.servicenow.com/dev.do#!/guides/paris/now-platform/tpb-guide/client_scripting_technical_best_practices%23%23example-g-scratchpad) on the Developer Site.
	 * 
	 */
	declare class GlideFormScratchpad {
	
	}
/**
	 * @description Writes log entries directly to the Import Log \[import\_log\] table.
	 * A GlideImportLog object consumable by the GlideImportSetTransformer API. This object is not required for the GlideImportSetTransformer API, it enables you to associate import logs with a specific Import Set transformation.
	 * 
	 */
	declare class GlideImportLogScopedGlobal {
	/**
	 * @description Instantiates a GlideImportLog object.
	 * @example
	 * //without optional source parameter.
	 * var importSetRun = new GlideImportSetRun();
	 * var importLog = new GlideImportLog(importSetRun);
	 * 
	 * 
	 * @example
	 * //using optional source parameter.
	 * var importSetRun = new GlideImportSetRun();
	 * var importLog = new GlideImportLog(importSetRun, 'Scripted ImportSetTransformer');
	 * 
	 * 
	 * @param importSetRun Optional. Import Set Run record on which all logs are to be associated with.
	 * @param source Optional. Source field value attached to the Import Log record that defines where in the Import Set process this message was logged from. For example, Loading could represent loading step, Cleanup could represent during the cleanup after the transform, and so on.
	 * 
	 */
	constructor(importSetRun: GlideImportSetRun,source: string) 
	/**
	 * @description Logs a message of type Error to the Import Log \[import\_log\] table.
	 * @example
	 * //
	 * var importLog = new GlideImportLog();
	 * importLog.error(‘Error executing transform’);
	 * 
	 * 
	 * @param message Log message. Maximum length 4000 characters.
	 * @param source Optional. Source field value attached to the Import Log record that defines where in the Import Set process this message was logged from. For example, Loading could represent loading step, Cleanup could represent during the cleanup after the transform, and so on.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	error(message: string,source: string) : void
	/**
	 * @description Returns a sys\_id of the Import Run record associated with this Import Log.
	 * @example
	 * //
	 * var importSet = new GlideRecord('sys_import_set');
	 * importSet.name = 'Scripted Import Set';
	 * importSet.short_description = 'Import set from scripted rest api';
	 * importSet.table_name = importSetTableName;
	 * var importSetID = importSet.insert();
	 * var importLog = new GlideImportLog();
	 * var transformer = new GlideImportSetTransformer();
	 * transformer.setLogger(importLog);
	 * transformer.transformAllMaps(importSet);
	 * var importRunSysId = importLog.getImportRunHistory();
	 * 
	 * 
	 * @returns string Sys\_id of an Import Set Run record from the Transform History \[sys\_import\_set\_run\] table.
	 * 
	 */
	getImportRunHistory() : string
	/**
	 * @description Logs a message of type Info to the Import Log \[import\_log\] table.
	 * @example
	 * //
	 * var importLog = new GlideImportLog();
	 * importLog.info(‘Successfully executed transform’);
	 * 
	 * 
	 * @param message Log message. Maximum length 4000 characters.
	 * @param source Optional. Source field value attached to the Import Log record that defines where in the Import Set process this message was logged from. For example, Loading could represent loading step, Cleanup could represent during the cleanup after the transform, and so on.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	info(message: string,source: string) : void
	/**
	 * @description Associates the GlideImportLog object with a specific Import Set Run record.
	 * @example
	 * //
	 * var importRunSysId = ‘4aa3a8d55ba10010953330ad5981c79f’;
	 * var importLog = new GlideImportLog();
	 * importLog.setImportRunHistory(importRunSysId);
	 * 
	 * 
	 * @param importRunHistory The sys\_id of a record from the Transform History \[sys\_import\_set\_run\] table.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setImportRunHistory(importRunHistory: string) : void
	/**
	 * @description Logs a message of type Warn to the Import Log \[import\_log\] table.
	 * @example
	 * //
	 * var importLog = new GlideImportLog();
	 * importLog.warn(‘Transform taking longer than expected.’);
	 * 
	 * 
	 * @param message Log message. Maximum length 4000 characters.
	 * @param source Optional. Source field value attached to the Import Log record that defines where in the Import Set process this message was logged from. For example, Loading could represent loading step, Cleanup could represent during the cleanup after the transform, and so on.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	warn(message: string,source: string) : void
	}
/**
	 * @description Creates an Import Set Run record which can be consumed by the GlideImportSetTransformer API.
	 * 
	 */
	declare class GlideImportSetRunScopedGlobal {
	/**
	 * @description Gets the sys\_id of the Import Set Run associated with the transformation.
	 * @example
	 * //
	 * var importSetRun = new GlideImportSetRun();
	 * var importSetRunSysId = importSetRun.getImportSetRunSysID();
	 * 
	 * 
	 * @returns string The sys\_id of the Transform Histories \[sys\_import\_set\_run\] record associated with the transform.
	 * 
	 */
	getImportSetRunSysID() : string
	/**
	 * @description Instantiates a GlideImportSetRun object.
	 * @example
	 * //
	 * var importSetRun = new GlideImportSetRun();
	 * 
	 * @param importSetID Optional. The sys\_id of the import set record listed in the Import Sets \[sys\_import\_set\] table. If not set, a new \[sys\_import\_set\] record is created and the GlideImportSetRun object represents this record.
	 * 
	 */
	constructor(importSetID: string) 
	}
/**
	 * @description Creates an Import Set Transformer object used to execute an Import Set Transform.
	 * To execute an Import Set transform:	
 * 	
 * 1.  Create an Import Set table using the GlideImportSetTable API.	
 * 2.  Create a Transform Map using the GlideImportSetTransformMap API.	
 * 3.  Create or use an existing Import Set using the GlideRecord API.	
 * 4.  Execute an Import Set Transform using the GlideImportSetTransformer API.	
 * 	
 * Once you have created the Import Set record it must be consumed by the GlideImportSetTransformer API in order to trigger the transform.  	
 *   	
 * var transformer = new GlideImportSetTransformer(); transformer.transformAllMaps(importSetGr);
	 * 
	 */
	declare class GlideImportSetTransformerScopedGlobal {
	/**
	 * @description Instantiates a GlideImportSetTransformer object.
	 * @example
	 * //
	 * var transformer = new GlideImportSetTransformer();
	 * 
	 */
	constructor() 
	/**
	 * @description Gets the Import Set Run object associated with a GlideImportSetTransformer object.
	 * @example
	 * //
	 * var importSet = new GlideRecord('sys_import_set');
	 * importSet.name = 'Scripted Import Set';
	 * importSet.short_description = 'Import set from scripted rest api';
	 * importSet.table_name = importSetTableName;
	 * var importSetID = importSet.insert();
	 * var transformer = new GlideImportSetTransformer();
	 * transformer.transformAllMaps(importSet);
	 * var importSetRun = transformer.getImportSetRun();
	 * 
	 * 
	 * @returns GlideImportSetRun GlideImportSetRun object created by running a transformation or the argument supplied to the setImportSetRun() method.
	 * 
	 */
	getImportSetRun() : GlideImportSetRun
	/**
	 * @description Returns a Boolean value specifying whether or not there was an error during a transformation.
	 * @example
	 * //
	 * var importSet = new GlideRecord('sys_import_set');
	 * importSet.name = 'Scripted Import Set';
	 * importSet.short_description = 'Import set from scripted rest api';
	 * importSet.table_name = importSetTableName;
	 * var importSetID = importSet.insert();
	 * var transformer = new GlideImportSetTransformer();
	 * transformer.transformAllMaps(importSet);
	 * if(transformer.isError()) {
	 * 	gs.error(‘Error executing the transform’);
	 * }
	 * 
	 * @returns boolean Flag that indicates whether there is an error.  *   true: Error. *   false: Success.
	 * 
	 */
	isError() : boolean
	/**
	 * @description Associates an Import Set record with a specific GlideImportSetTransformer object.
	 * @example
	 * //
	 * var importSet = new GlideRecord('sys_import_set');
	 * importSet.name = 'Scripted Import Set';
	 * importSet.short_description = 'Import set from scripted rest api';
	 * importSet.table_name = importSetTableName;
	 * var importSetID = importSet.insert();
	 * var transformer = new GlideImportSetTransformer();
	 * transformer.setImportSetID(importSetID);
	 * transformer.transformAllMaps(importSet);
	 * 
	 * 
	 * @param id The sys\_id of an Import Set record from the Import Sets \[sys\_import\_set\] table.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setImportSetID(id: string) : void
	/**
	 * @description Associates an Import Set Run object with a specific GlideImportSetTransformer object.
	 * @example
	 * //
	 * var importSet = new GlideRecord('sys_import_set');
	 * importSet.name = 'Scripted Import Set';
	 * importSet.short_description = 'Import set from scripted rest api';
	 * importSet.table_name = importSetTableName;
	 * var importSetID = importSet.insert();
	 * var importSetRun = new GlideImportSetRun(importSetID);
	 * var transformer = new GlideImportSetTransformer();
	 * transformer.setImportSetRun(importSetRun);
	 * transformer.transformAllMaps(importSet);
	 * 
	 * 
	 * @param importSetRun GlideImportSetRun object representing the ImportSetRun record to track the transformation history.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setImportSetRun(importSetRun: GlideImportSetRun) : void
	/**
	 * @description Associates a GlideImportLog object with a specific GlideImportSetTransformer object.
	 * If this method is not called prior to calling the transformAllMaps() method, a GlideImportLog object is created internally on the server side.
	 * 
	 * @example
	 * //
	 * var importSet = new GlideRecord('sys_import_set');
	 * importSet.name = 'Scripted Import Set';
	 * importSet.short_description = 'Import set from scripted rest api';
	 * importSet.table_name = importSetTableName;
	 * var importSetID = importSet.insert();
	 * var importLog = new GlideImportLog();
	 * var transformer = new GlideImportSetTransformer();
	 * transformer.setLogger(importLog);
	 * transformer.transformAllMaps(importSet);
	 * 
	 * 
	 * @param log GlideImportLog object to link to the Import Set history. Once set, any call from the GlideImportLog object is associated with the Import Set run history for that specific transform.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setLogger(log: GlideImportLog) : void
	/**
	 * @description Associates a Transform Map with a specific GlideImportSetTransformer object.
	 * @example
	 * //
	 * var importSet = new GlideRecord('sys_import_set');
	 * importSet.name = 'Scripted Import Set';
	 * importSet.short_description = 'Import set from scripted rest api';
	 * importSet.table_name = importSetTableName;
	 * var importSetID = importSet.insert();
	 * var transformMapId =  ‘&lt;sys id of transform map&gt;';
	 * var transformer = new GlideImportSetTransformer();
	 * transformer.setMapID(transformMapId);
	 * transformer.transformAllMaps(importSet);
	 * 
	 * 
	 * @param mapID A sys\_id from the Table Transform Maps \[sys\_transform\_map\] table.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setMapID(mapID: string) : void
	}
/**
	 * @description GlideLocale provides information about display information for the local instance.
	 * There is no constructor for a GlideLocale object. Use the get() method to get a GlideLocale object.
	 * 
	 */
	declare class GlideLocale {
	/**
	 * @description Returns the GlideLocale object.
	 * @example
	 * //
	 * var locale = GlideLocale.get();
	 * 
	 * @returns GlideLocale The GlideLocale object.
	 * 
	 */
	get() : GlideLocale
	/**
	 * @description Returns the decimal separator.
	 * @example
	 * //
	 * var locale = GlideLocale.get();
	 * var decimalSeparator = locale.getDecimalSeparator();
	 * gs.info( "The decimal separator is " + decimalSeparator);
	 * 
	 * @returns string The decimal separator.
	 * 
	 */
	getDecimalSeparator() : string
	/**
	 * @description Returns the grouping separator.
	 * @example
	 * //
	 * var locale = GlideLocale.get();var groupingSeparator = locale.getGroupingSeparator();
	 * gs.info( "The grouping separator is " + groupingSeparator);
	 * 
	 * @returns string The grouping separator.
	 * 
	 */
	getGroupingSeparator() : string
	}
/**
	 * @description The scoped GlidePluginManager API provides a method for determining if a plugin has been activated.
	 * 
	 */
	declare class GlidePluginManager {
	/**
	 * @description Determines if the specified plugin has been activated.
	 * @example
	 * //
	 * var now_GR = new GlideRecord('sys_plugins');
	 * var queryString = "active=0^ORactive=1";
	 * now_GR.addEncodedQuery(queryString);
	 * now_GR.query();
	 * var pMgr = new GlidePluginManager();
	 *  
	 * while (now_GR.next()) {
	 *    var name = now_GR.getValue('name');
	 *    var pID = now_GR.getValue('source');
	 *    var isActive = pMgr.isActive(pID);
	 *    if (isActive) 
	 *        gs.info('The plugin ' + name + ' is active');
	 * }
	 * 
	 * @param pluginID Unique plugin identifier.
	 * 
	 * @returns boolean Flag that indicates if the plugin is active.  Valid values:  *   true: Plugin is active. *   false: Plugin is inactive.
	 * 
	 */
	isActive(pluginID: string) : boolean
	}
/**
	 * @description The GlideQuery API is an alternative to GlideRecord to perform CRUD operations on record data from server-side scripts.
	 * The GlideQuery API lets you:  	
 *   	
 * 	
 * *   Use standard JavaScript objects and types for queries and results.	
 * *   Quickly diagnose query errors with additional checks and clear error messages.	
 * *   Simplify your code by avoiding boiler-plate query patterns.	
 * *   Avoid common performance issues without needing deeper knowledge of GlideRecord.	
 * 	
 *   	
 *   	
 * Use the GlideQuery API in scoped or global server-side scripts. This API requires the GlideQuery \[com.sn\_glidequery\] plugin.  	
 *   	
 * 	
 * Implementation	
 * --------------	
 * 	
 * This API works together with the [Stream](../../Stream/concept/StreamGlobalAPI.html "The Stream API interacts with a stream of items such as records. For example, you can use the forEach() method to update the state of each record in a stream returned by the GlideQuery API.") and [Optional](../../Optional/concept/OptionalGlobalAPI.html "The Optional API interacts with a single record returned by the GlideQuery, Stream, or GlideRecord APIs, even when it does not exist. Write scripts that are less likely to result in an error by handling null or undefined query results.") APIs in a builder pattern where the method calls chain together, each method building on the returned result of the previous method. Use methods to define the attributes of the query. The methods do not execute until you call a terminal method, a method that returns a query result, allowing you to define the requirements of the query before executing it.	
 * 	
 * If the query returns a single record, the system wraps the result in an Optional object. If the query returns a stream of records, the system wraps the result in a Stream object. These objects let you manage the result using a set of methods in each API.	
 * 	
 * For example, here's a script that performs a query on the Task table and groups the records by priority and returns groups with total reassignments greater than four.	
 * 	
 *     var query = new global.GlideQuery('task')	
 *         .where('active', true) //Returns new GlideQuery object with a "where" clause.	
 *         .groupBy('priority') //Returns new GlideQuery object with a "group by" clause.	
 *         .aggregate('sum', 'reassignment_count') //Returns new GlideQuery object with a "sum(reassignment_count)" clause.	
 *         .having('sum', 'reassignment_count', '>', 4) //Returns new GlideQuery object with a "having reassignment_count > 4" clause.	
 *         .select() //Returns a stream of records wrapped in a Stream object.  	
 *         .toArray(10); //Terminal method in the Stream class that executes the query and returns the result. 	
 * 	
 *   	
 *   	
 * 	
 * Error handling	
 * --------------	
 * 	
 * The GlideQuery API throws an error when your query has a problem, and includes a clear explanation to help guide you. GlideQuery checks for:	
 * 	
 * *   Invalid fields	
 * *   Invalid value types for a field	
 * *   Invalid values for choice fields	
 * *   Invalid query operators	
 * 	
 * For example, this code sample would throw an error because the queried field does not exist in the table.	
 * 	
 *     new global.GlideQuery('task')	
 *         .where('id', '4717dfe5a9fe198100450448b2404c16') // should be 'sys_id'	
 *         .select('description', 'severity')	
 *         .toArray(100);	
 *       // Error: Unable to find field 'id' in table 'task'. Known fields: active, activity_due, ...	
 * 	
 * This code sample would throw an error because the data type of one of the arguments is incorrect.	
 * 	
 *     new global.GlideQuery('task')	
 *         .where('priority', 'one') // priority is an integer (should be 1)	
 *         .select('description', 'severity')	
 *         .toArray(100);	
 *       // Error: Unable to match value ['one'] with field 'priority' in table 'task'. Expecting type 'integer'	
 * 	
 *   	
 *   	
 * 	
 * Reuse	
 * -----	
 * 	
 * Because GlideQuery objects are immutable, you can reuse them later in other parts of your code. For example, this script creates a query and then uses the GlideQuery object later to generate a report.	
 * 	
 *     var highPriorityTasks = new global.GlideQuery('task')	
 *         .where('active', true)	
 *         .where('priority', 1);	
 *     	
 *     generateReport(highPriorityTasks);	
 *     notifyOwners(highPriorityTasks);	
 *     var avgReassignmentCount = highPriorityTasks	
 *         .avg('reassignment_count')	
 *         .orElse(0)	
 *     	
 * 	
 *   	
 *   	
 * 	
 * Limitations	
 * -----------	
 * 	
 * The GlideQuery API does not support:	
 * 	
 * *   Reading or writing to tables that do not allow access from other scopes.	
 * *   Reading encoded queries.	
 * *   GlideDate or GlideDateTime objects, which are read as JavaScript strings.	
 * *   FX Currency fields.	
 * *   Queries with ambiguous conditional logic. For example, the following query is unclear because the system does not know whether to execute (active = true AND name != null) OR last\_name = Luddy or active = true AND (name != null OR last\_name = Luddy).	
 *     	
 *         var user = new global.GlideQuery('sys_user')	
 *           .where('active', true)	
 *           .whereNotNull('name')	
 *           .orWhere('last_name', 'Luddy')	
 *           .selectOne()	
 *           .get()	
 *     	
 *     See the [where()](../reference/GQ-where_S_S.html "Adds a Where clause to the query that returns values based on a given condition.") method to understand how to nest a child query instead.	
 *     	
 * 	
 * Note: Because the GlideQuery API converts GlideRecord objects into standard JavaScript objects, it may take longer to execute queries. To reduce performance issues, avoid creating loops that iterate over large numbers or records.
	 * 
	 */
	declare class GlideQuery {
	/**
	 * @description Aggregates a field using a specified aggregation function.
	 * Use this method to build queries that aggregate against multiple fields or use multiple aggregate functions, or if you must use the groupBy() method. If you only want to aggregate against one field with one function, and you don't need to use groupBy(), then use one of these methods instead:
	 * 
	 * *   avg()
	 * *   min()
	 * *   max()
	 * *   count()
	 * 
	 * @example
	 * //This example performs a query on the Task table that groups the records by priority, adds the numbers in the reassignment count field for each group, and returns groups with total reassignments greater than four.
	 * var query = new global.GlideQuery('task')
	 *     .where('active', true) //Returns the GlideQuery object to add more attributes to the query.
	 *     .groupBy('priority') //Returns the GlideQuery object to add more attributes to the query.
	 *     .aggregate('sum', 'reassignment_count') //Returns the GlideQuery object to add more attributes to the query.
	 *     .having('sum', 'reassignment_count', '&gt;', 4) //Returns the GlideQuery object to add more attributes to the query.
	 *     .select() //Returns a stream of records wrapped in a Stream object.  
	 *     .toArray(10); //Terminal method in the Stream class that executes the query and returns the result.
	 * 
	 * gs.info(JSON.stringify(query));
	 * 
	 * @param aggregateType The type of aggregation function to perform. Options include:  *   min: Returns the smallest value of all matching records. *   max: Returns the largest value of all matching records. *   sum: Returns the sum of all matching records. *   avg: Returns the average of all matching records. *   count: Returns the number of number of matching records.
	 * @param field Field on which to perform the operation.
	 * 
	 * @returns GlideQuery The query object being built.
	 * 
	 */
	aggregate(aggregateType: string,field: string) : GlideQuery
	/**
	 * @description Returns the aggregate average of a given numeric field.
	 * You can only use this method on fields of the following types:
	 * 
	 * *   Integer
	 * *   Long
	 * *   Floating Point Number
	 * *   Double
	 * *   Currency
	 * 
	 * @example
	 * //This example shows how to return the average number of faults in the cmdb\_ci table.
	 * var faults = new global.GlideQuery('cmdb_ci')
	 *     .avg('fault_count')
	 *     .orElse(0);
	 * 
	 * gs.info(JSON.stringify(faults));
	 * 
	 * @param field Field on which to perform the operation.
	 * 
	 * @returns Optional Object that contains the aggregate average of the given field.
	 * 
	 */
	avg(field: string) : Optional
	/**
	 * @description Returns the number of records that match the query.
	 * @example
	 * //This example returns the number of active records in the User table.
	 * var userCount = new global.GlideQuery('sys_user')
	 *     .where('active', true)
	 *     .count();
	 * 
	 * @returns number Number of records that match the query.
	 * 
	 */
	count() : number
	/**
	 * @description Deletes all records in the table specified by the preceding Where clauses.
	 * @example
	 * //This example deletes all active records in the User table where the last name is Jeter.
	 * var query = new global.GlideQuery('sys_user')
	 *     .where('active', true)
	 *     .where('last_name', 'Jeter')
	 *     .deleteMultiple();
	 * 
	 * @returns None 
	 * 
	 */
	deleteMultiple() : None
	/**
	 * @description Disables updating system fields, or fields with a name that starts with the sys prefix, such as sys\_created\_on, sys\_updated\_on, and sys\_mod\_count. Only applies to the specified query.
	 * @example
	 * //This example adds a record to the task table, but does not set system fields. Without calling this method, the below example would update sys\_updated\_on, sys\_mod\_count, and so on.
	 * var query = new global.GlideQuery('task')
	 *     .disableAutoSysFields()
	 *     .insert({ description: 'example', priority: 1 });
	 * 
	 * @returns GlideQuery The query object being built.
	 * 
	 */
	disableAutoSysFields() : GlideQuery
	/**
	 * @description Disables any business rules, flows, workflows, or audit records that would run or be created as the result of the query.
	 * @example
	 * //This example updates multiple records in the Task table without triggering any automatic business processes.
	 * var query = new global.GlideQuery('task')
	 *     .disableWorkflow()
	 *     .where('active', true)
	 *     .updateMultiple({ priority: 1 });
	 * 
	 * @returns GlideQuery The query object being built.
	 * 
	 */
	disableWorkflow() : GlideQuery
	/**
	 * @description Forces a database update even when no record changes are made. For example, you can use this method to force a business rule to execute.
	 * @example
	 * //This example force updates Task records with a certain sys\_id.
	 * var forceUpdate = new global.GlideQuery('task')
	 *     .forceUpdate()
	 *     .where('sys_id', taskId)
	 *     .update()
	 * 
	 * @returns GlideQuery The query object being built.
	 * 
	 */
	forceUpdate() : GlideQuery
	/**
	 * @description Returns a single record from the query.
	 * @example
	 * //that returns a record based on sys\_id.
	 * var user = new global.GlideQuery('sys_user')
	 *     .get('5137153cc611227c000bbd1bd8cd2005', ['first_name', 'last_name']) //Returns an Optional object.
	 *     .orElse({ first_name: 'Default', last_name: 'User' }); //Method in the Optional class to return a default value.
	 * 
	 * gs.info(JSON.stringify(user))
	 * 
	 * @param key Sys\_id of the record to return.
	 * @param selectedFields Optional. Additional fields to return in the result.  Default: The system always returns the sys\_id.
	 * 
	 * @returns Optional Object used to interact with a single record.
	 * 
	 */
	get(key: string,selectedFields: Array) : Optional
	/**
	 * @description Returns an Optional object containing a single record based on a set of name-value pairs to query by. Assumes the '=' operator for each name-value pair.
	 * @example
	 * //that returns a record by querying for a user's name.
	 * var user = new global.GlideQuery('sys_user')
	 *     .getBy({
	 *         first_name: 'Fred',
	 *         last_name: 'Luddy'
	 *     }, ['first_name', 'last_name', 'city', 'active']) // select first_name, last_name, city, active
	 *     .orElse({
	 *         first_name: 'Nobody',
	 *         last_name: 'Found',
	 *         city: 'Nowhere',
	 *         active: false
	 *     });
	 * 
	 * @param keyValues Object where the keys are the name of the fields, and the values are the values to query for.
	 * @param selectedFields Optional. Additional fields to return in the result.  Default: The system always returns the sys\_id.
	 * 
	 * @returns Optional Object used to interact with a single record.
	 * 
	 */
	getBy(keyValues: Object,selectedFields: Array) : Optional
	/**
	 * @description Instantiates a GlideQuery object used to build and execute record queries.
	 * @example
	 * //This example instantiates a query of the User table.
	 * var query = new global.GlideQuery('sys_user');
	 * 
	 * @param table Table to query.
	 * 
	 */
	constructor(table: string) 
	/**
	 * @description Groups the query results by a designated field or fields.
	 * You must use this method with the aggregate() method.
	 * 
	 * @example
	 * //This example performs a query on the Task table that groups the records by priority, adds the numbers in the reassignment count field for each group, and returns groups with total reassignments greater than four.
	 * var query = new global.GlideQuery('task')
	 *     .where('active', true) //Returns the GlideQuery object to add more attributes to the query.
	 *     .groupBy('priority') //Returns the GlideQuery object to add more attributes to the query.
	 *     .aggregate('sum', 'reassignment_count') //Returns the GlideQuery object to add more attributes to the query.
	 *     .having('sum', 'reassignment_count', '&gt;', 4) //Returns the GlideQuery object to add more attributes to the query.
	 *     .select() //Returns a stream of records wrapped in a Stream object.  
	 *     .toArray(10); //Terminal method in the Stream class that executes the query and returns the result.
	 * 
	 * gs.info(JSON.stringify(query));
	 * 
	 * @param fields The field or fields to group the results by.
	 * 
	 * @returns GlideQuery The query object being built.
	 * 
	 */
	groupBy(fields: string) : GlideQuery
	/**
	 * @description Filters aggregate groups so that you can display only groups of results that match a specified condition.
	 * Must use this method with the aggregate() or groupBy() methods.
	 * 
	 * @example
	 * //This example performs a query on the Task table that groups the records by priority, adds the numbers in the reassignment count field for each group, and returns groups with total reassignments greater than four.
	 * var query = new global.GlideQuery('task')
	 *     .where('active', true) //Returns the GlideQuery object to add more attributes to the query.
	 *     .groupBy('priority') //Returns the GlideQuery object to add more attributes to the query.
	 *     .aggregate('sum', 'reassignment_count') //Returns the GlideQuery object to add more attributes to the query.
	 *     .having('sum', 'reassignment_count', '&gt;', 4) //Returns the GlideQuery object to add more attributes to the query.
	 *     .select() //Returns a stream of records wrapped in a Stream object.  
	 *     .toArray(10); //Terminal method in the Stream class that executes the query and returns the result.
	 * 
	 * gs.info(JSON.stringify(query));
	 * 
	 * @param aggregateType The type of aggregation function to perform. Options include:  *   min: Returns the smallest value of all matching records. *   max: Returns the largest value of all matching records. *   sum: Returns the sum of all matching records. *   avg: Returns the average of all matching records. *   count: Returns the number of number of matching records.
	 * @param field Field on which to perform the operation.
	 * @param operator Numeric operator to use in the operation.  Options include:  *   \>: Greater than. *   <: Less than. *   \>=: Greater than or equal to. *   <=: Less than or equal to. *   \=: Equal to. *   !=: Not equal to.
	 * @param value Number value to use in the operation.
	 * 
	 * @returns GlideQuery The query object being built.
	 * 
	 */
	having(aggregateType: string,field: string,operator: string,value: number) : GlideQuery
	/**
	 * @description Inserts a record and returns an Optional object containing the record.
	 * @example
	 * //This example shows how to insert a record based on a user's first and last name.
	 * var fred = new global.GlideQuery('sys_user')
	 *     .insert({ first_name: 'Fred', last_name: 'Luddy' })
	 *     .get();
	 * 
	 * gs.info(JSON.stringify(fred));
	 * 
	 * @param keyValues Object containing name-value pairs to insert into the record. Unspecified fields will be null.
	 * @param selectedFields Optional. Additional fields to return in the result.  Default: The system always returns the sys\_id.
	 * 
	 * @returns Optional Object used to interact with a single record.
	 * 
	 */
	insert(keyValues: Object,selectedFields: Array) : Optional
	/**
	 * @description Updates an existing record, or inserts a new record if one does not already exist.
	 * @example
	 * //This example shows how to insert a new record that does not already exist in the system.
	 * // insert a new record
	 * var user = new GlideQuery('sys_user')
	 *     .insertOrUpdate({
	 *         first_name: 'George',
	 *         last_name: 'Griffey'
	 *     })
	 *     .orElse(null);
	 * 
	 * @example
	 * //This example shows how to update an existing record.
	 * // update existing record
	 * var user = new global.GlideQuery('sys_user')
	 *     .insertOrUpdate({
	 *         sys_id: '2d0efd6c73662300bb513198caf6a72e',
	 *         first_name: 'George',
	 *         last_name: 'Griffey' })
	 *     .orElse(null);
	 * 
	 * @param changes Object containing name-value pairs to update or insert into the record.
	 * @param selectedFields Optional. Additional fields to return in the result.  Default: The system always returns the sys\_id.
	 * 
	 * @returns Optional Object used to interact with a single record.
	 * 
	 */
	insertOrUpdate(changes: Object,selectedFields: Array) : Optional
	/**
	 * @description Limits the number of records returned in a query.
	 * @example
	 * //This example shows how to limit the results returned to five records.
	 * var incidents = new global.GlideQuery('incident')
	 *     .limit(5)
	 *     .select('priority', 'description')
	 *     .toArray(100);
	 * 
	 * gs.info(JSON.stringify(incidents));
	 * 
	 * @param limit Number of records to return.
	 * 
	 * @returns GlideQuery The query object being built.
	 * 
	 */
	limit(limit: number) : GlideQuery
	/**
	 * @description Returns the aggregate maximum of a given field.
	 * @example
	 * //This example shows how to return the maximum value, or highest alphanumeric value, of a given field.
	 * var name = new global.GlideQuery('sys_user')
	 *     .max('last_name')
	 *     .orElse('');
	 * 
	 * gs.info(JSON.stringify(name));
	 * 
	 * @param field Field on which to perform the operation.
	 * 
	 * @returns Optional Object used to interact with a single record.
	 * 
	 */
	max(field: string) : Optional
	/**
	 * @description Returns the aggregate minimum of a given field.
	 * @example
	 * //This example shows how to return the minimum value, or lowest alphanumeric value, of a given field.
	 * var name = new global.GlideQuery('sys_user')
	 *     .min('last_name')
	 *     .orElse('');
	 * 
	 * gs.info(JSON.stringify(name));
	 * 
	 * @param field Field on which to perform the operation.
	 * 
	 * @returns Optional Object used to interact with a single record.
	 * 
	 */
	min(field: string) : Optional
	/**
	 * @description Orders the returned result in ascending order by a given field.
	 * @example
	 * //This example shows how to order results in ascending order by record number.
	 * var query = new global.GlideQuery('incident')
	 *     .orderBy('number')
	 *     .limit(5)
	 *     .select('priority', 'description') //Returns a stream of records wrapped in a Stream object.  
	 *     .toArray(100); //Terminal method in the Stream class that executes the query and returns the result.
	 * 
	 * gs.info(JSON.stringify(query));
	 * 
	 * @param fields Comma-delimited fields to order the result by in ascending order.
	 * 
	 * @returns GlideQuery The query object being built.
	 * 
	 */
	orderBy(fields: string) : GlideQuery
	/**
	 * @description Orders the returned result in descending order by a given field.
	 * @example
	 * //This example shows how to order the result in descending order by number.
	 * var query = new global.GlideQuery('incident')
	 *     .orderByDesc('number')
	 *     .select('number', 'description')
	 *     .limit(5)
	 *     .toArray(100);
	 * 
	 * gs.info(JSON.stringify(query));
	 * 
	 * @example
	 * //This example shows how to order an aggregate result by the sum of child incidents.
	 * var aggQuery = new GlideQuery('incident')
	 *     .aggregate('sum', 'child_incidents')
	 *     .groupBy('category')
	 *     .orderByDesc('sum', 'child_incidents')
	 *     .select()
	 *     .toArray(100);
	 * 
	 * gs.info(JSON.stringify(aggQuery));
	 * 
	 * @param fieldOrAggregate If the query does not use the aggregate() method, pass the field to order the results by.  If the query uses the aggregate() method, pass the type of aggregation function to perform.  Options include:  *   min: Returns the smallest value of all matching records. *   max: Returns the largest value of all matching records. *   sum: Returns the sum of all matching records. *   avg: Returns the average of all matching records. *   count: Returns the number of number of matching records.
	 * @param field Optional. Field to order the result by in descending order. Required for queries using the aggregate() method.
	 * 
	 * @returns GlideQuery The query object being built.
	 * 
	 */
	orderByDesc(fieldOrAggregate: string,field: string) : GlideQuery
	/**
	 * @description Adds an OR clause to a query that returns values based on a given condition.
	 * Note: Precede this method with the where(), whereNull(), or whereNotNull() methods.
	 * 
	 * @example
	 * //This example shows how to add a simple OR clause to a query.
	 * var query = new global.GlideQuery('sys_user')
	 *    .where('failed_attempts', '&gt;', 0)
	 *    .orWhere('last_login', '&lt;', '2019-04-15')
	 *    .select()
	 *    .toArray(100)
	 * 
	 * gs.info(JSON.stringify(query));
	 * 
	 * @example
	 * //This example shows how to add a orWhere clause that contains a separate query.
	 * // active = true OR (title = 'Vice President' AND state = 'CA')
	 * var query = new GlideQuery('sys_user')
	 *    .where('active', true)
	 *    .orWhere(new GlideQuery()
	 *        .where('title', 'Vice President')
	 *        .where('state', 'CA'))
	 *    .select('name')
	 *    .limit(5)
	 *    .toArray(100)
	 * 
	 * gs.info(JSON.stringify(query));
	 * 
	 * @param fieldOrQuery Field or another GlideQuery object used in the where clause. If passing a field, you can dot-walk to a desired value. For example, 'company.name'.
	 * @param operator Optional. Operator used in the OR clause. If you do not pass an argument, the system uses the = operator. You do not need to include a placeholder value.
	 * @param value Value used in the OR clause.
	 * 
	 * @returns GlideQuery The query object being built.
	 * 
	 */
	orWhere(fieldOrQuery: String|GlideQuery,operator: string,value: Any) : GlideQuery
	/**
	 * @description Adds an OR clause that returns records that do not contain a null value in a given field.
	 * Note: Precede this method with the where(), whereNull(), or whereNotNull() methods.
	 * 
	 * @example
	 * //This example shows how to query the User table and return results where the first and last names are not null.
	 * var query = new global.GlideQuery('sys_user')
	 *    .whereNotNull('first_name')
	 *    .orWhereNotNull('last_name')
	 *    .select()
	 *    .limit(5)
	 *    .toArray(100)
	 * 
	 * gs.info(JSON.stringify(query));
	 * 
	 * @param field Field used in the query.
	 * 
	 * @returns GlideQuery The query object being built.
	 * 
	 */
	orWhereNotNull(field: string) : GlideQuery
	/**
	 * @description Adds an OR clause to a query that returns records that contain a null value in a given field.
	 * Note: Precede this method with the where(), whereNull(), or whereNotNull() methods.
	 * 
	 * @example
	 * //This example shows how to query the User table and return records where the first or last names are null.
	 * var query = new global.GlideQuery('sys_user')
	 *    .whereNull('last_name')
	 *    .orWhereNull('first_name')
	 *    .select()
	 *    .toArray(100)
	 * 
	 * gs.info(JSON.stringify(query));
	 * 
	 * @param field Field used in the query.
	 * 
	 * @returns GlideQuery The query object being built.
	 * 
	 */
	orWhereNull(field: string) : GlideQuery
	/**
	 * @description Returns the results of the query as a Stream object containing specified fields.
	 * Note: Use a terminal method in the Stream class to get the result of the query. For more information, see [Stream](dev.do#!/reference/api/paris/server/no-namespace/StreamGlobalAPI "The Stream API interacts with a stream of items such as records. For example, you can use the forEach() method to update the state of each record in a stream returned by the GlideQuery API.").
	 * 
	 * You can append a flag to a field name to return the field's metadata instead of the field's value. For example, using the field name company$DISPLAY returns the display value of a company field. Possible flags include:
	 * 
	 * *   DISPLAY: Returns the display value of a field.
	 * *   CURRENCY\_CODE: Returns the currency code of a currency field. For example, USD.
	 * *   CURRENCY\_DISPLAY: Returns the currency display value of a currency field. For example, ¥123.45.
	 * *   CURRENCY\_STRING: Returns the currency string of a currency field. For example, JPY;123.45.
	 * 
	 * @example
	 * //This example shows how to select fields to display from the query and use $DISPLAY to return the display value of a field.
	 * var stream = new global.GlideQuery('sys_user')
	 *    .select('first_name', 'last_name', 'company$DISPLAY')
	 *    .toArray(5);
	 * 
	 * gs.info(JSON.stringify(stream));
	 * 
	 * @param fields Optional. Fields to display in the result. You can provide any number of fields as arguments, dot-walk to a desired value, or use a flag. For example:  select('first\_name', 'location.city', 'company$DISPLAY');  Default: The system always returns the sys\_id.
	 * 
	 * @returns Stream Object used to interact with a stream of items such as records.
	 * 
	 */
	select(fields: string) : Stream
	/**
	 * @description Returns the result of the query as an Optional object containing specified fields.
	 * Use this method when returning a single record, or to test if a record exists. If returning multiple records, use the select() method to return a Stream object.
	 * 
	 * You can append a flag to a field name to return the field's metadata instead of the field's value. For example, using the field name company$DISPLAY returns the display value of a company field. Possible flags include:
	 * 
	 * *   DISPLAY: Returns the display value of a field.
	 * *   CURRENCY\_CODE: Returns the currency code of a currency field. For example, USD.
	 * *   CURRENCY\_DISPLAY: Returns the currency display value of a currency field. For example, ¥123.45.
	 * *   CURRENCY\_STRING: Returns the currency string of a currency field. For example, JPY;123.45.
	 * 
	 * @example
	 * //This example shows how to return a single record as an Optional object and display specified fields.
	 * var user = new global.GlideQuery('sys_user')
	 *     .where('zip', '12345')
	 *     .whereNotNull('last_name')
	 *     .selectOne('first_name', 'last_name', 'company$DISPLAY')
	 *     .get();
	 * 
	 * gs.info(JSON.stringify(user));
	 * 
	 * @param fields Optional. Fields to display in the result. You can provide any number of fields as arguments, dot-walk to a desired value, or use a flag. For example:  select('first\_name', 'location.city', 'company$DISPLAY');  Default: The system always returns the sys\_id.
	 * 
	 * @returns Optional Object used to interact with a single record.
	 * 
	 */
	selectOne(fields: string) : Optional
	/**
	 * @description Returns the aggregate sum of a given numeric field.
	 * You can only use this method on fields of the following types:
	 * 
	 * *   Integer
	 * *   Long
	 * *   Floating Point Number
	 * *   Double
	 * *   Currency
	 * 
	 * @example
	 * //This example shows how to return the sum of all faults in the cmdb\_ci table.
	 * var totalFaults = new global.GlideQuery('cmdb_ci')
	 *     .sum('fault_count')
	 *     .orElse(0);
	 * 
	 * gs.info(JSON.stringify(totalFaults));
	 * 
	 * @param field Field on which to perform the operation.
	 * 
	 * @returns Optional Object used to interact with a single record.
	 * 
	 */
	sum(field: string) : Optional
	/**
	 * @description Returns a GlideRecord object that represents the current query. Returns a GlideAggregrate object if the query uses the GlideQuery.aggregate() method.
	 * After transforming the query, use the query() method in the [GlideRecord](dev.do#!/reference/api/paris/server/c_GlideRecordAPI "GlideRecord is used for database operations.") or [GlideAggregate](dev.do#!/reference/api/paris/server/c_GlideAggregateAPI "GlideAggregate enables you to easily create database aggregation queries.") classes to query the database.
	 * 
	 * @example
	 * //This example shows how to transform a GlideQuery object into a GlideRecord.
	 * var userGr = new global.GlideQuery('sys_user')
	 *     .where('active', true)
	 *     .whereNotNull('first_name')
	 *     .limit(10)
	 *     .toGlideRecord();
	 * userGr.query();
	 * 
	 * @returns or GlideRecord object that contains the query. If you used the GlideQuery.aggregate() method, then the method returns a GlideAggregrate object instead.
	 * 
	 */
	toGlideRecord() : or
	/**
	 * @description Updates an existing record that matches the defined conditions.
	 * Before using this method, call the where() method to specify the conditions that a record must meet to be updated.
	 * 
	 * @example
	 * //This example shows how to update a record with new values.
	 * var updateRecord = new global.GlideQuery('sys_user')
	 *     .where('sys_id', '0a826bf03710200044e0bfc8bcbe5d7a')
	 *     .update({ city: 'Los Angeles' });
	 * 
	 * @param changes Object containing name-value pairs to update in the record. Names must match fields in the table.
	 * @param selectedFields Optional. Additional fields to return in the result.  Default: The system always returns the sys\_id.
	 * 
	 * @returns Optional Object used to interact with a single record.
	 * 
	 */
	update(changes: Object,selectedFields: Array) : Optional
	/**
	 * @description Updates all existing records that match the defined conditions. Returns the number of records updated.
	 * Before using this method, call the where() method to specify the conditions that the records must meet to be updated.
	 * 
	 * @example
	 * //This example shows how to update any records that fit a defined criteria.
	 * var update = new global.GlideQuery('sys_user')
	 *     .where('active', false)
	 *     .where('last_name', 'Griffey')
	 *     .updateMultiple({ active: true });
	 * 
	 * gs.info(JSON.stringify(update));
	 * 
	 * @param changes Object containing name-value pairs to update in the record. Names must match fields in the table.
	 * 
	 * @returns Object Object containing the number of records that were updated. Keys include:  *   rowCount: Number of rows updated in the table.
	 * 
	 */
	updateMultiple(changes: Object) : Object
	/**
	 * @description Adds a Where clause to the query that returns values based on a given condition.
	 * Note: Do not precede this method with the orWhere(), orWhereNull(), or orWhereNotNull() methods.
	 * 
	 * @example
	 * //This example shows how to return records from the User table where active is true and the user last logged on after a specified date.
	 * var query = new global.GlideQuery('sys_user')
	 *    .where('active', true)
	 *    .where('last_login', '&gt;', '2016-04-15')
	 *    .limit(5)
	 *    .select()
	 *    .toArray(100)
	 * 
	 * gs.info(JSON.stringify(query));
	 * 
	 * @example
	 * //This example shows how to return records from the Incident table where active is true and where either the priority or the severity is 1.
	 * // active = true AND (priority = 1 OR severity = 1)
	 * var query = new GlideQuery('incident')
	 *     .where('active', true)
	 *     .where(new GlideQuery()
	 *         .where('priority', 1)
	 *         .orWhere('severity', 1))
	 *    .limit(5)
	 *    .select()
	 *    .toArray(100)
	 * 
	 * gs.info(JSON.stringify(query));
	 * 
	 * @param fieldOrQuery Field or another GlideQuery object used in the where clause. If passing a field, you can dot-walk to a desired value. For example, 'company.name'.
	 * @param operator Optional. Operator used in the where clause. If you do not pass an argument, the system uses the = operator.
	 * @param value Value used in the where clause.
	 * 
	 * @returns GlideQuery The query object being built.
	 * 
	 */
	where(fieldOrQuery: String|GlideQuery,operator: string,value: Any) : GlideQuery
	/**
	 * @description Returns records that do not contain a null value in a given field.
	 * Note: Do not precede this method with the orWhere(), orWhereNull(), or orWhereNotNull() methods.
	 * 
	 * @example
	 * //This example shows how to query the User table and return results where the first\_name field is not null.
	 * var query = new global.GlideQuery('sys_user')
	 *    .whereNotNull('first_name')
	 *    .select()
	 *    .limit(5)
	 *    .toArray(100)
	 * 
	 * gs.info(JSON.stringify(query));
	 * 
	 * @param field Field used in the query.
	 * 
	 * @returns GlideQuery The query object being built.
	 * 
	 */
	whereNotNull(field: string) : GlideQuery
	/**
	 * @description Returns records that contain a null value in a given field.
	 * Note: Do not precede this method with the orWhere(), orWhereNull(), or orWhereNotNull() methods.
	 * 
	 * @example
	 * //This example shows how to query the User table and return records where the first or last names are null.
	 * var query = new global.GlideQuery('sys_user')
	 *    .whereNull('last_name')
	 *    .orWhereNull('first_name')
	 *    .select()
	 *    .toArray(100)
	 * 
	 * gs.info(JSON.stringify(query));
	 * 
	 * @param field Field used in the query.
	 * 
	 * @returns GlideQuery The query object being built.
	 * 
	 */
	whereNull(field: string) : GlideQuery
	/**
	 * @description Executes the query using the GlideRecordSecure API to securely query the database while honoring ACLs.
	 * @example
	 * //This example shows how to execute a secure query using ACLs.
	 * var users = new global.GlideQuery('sys_user')
	 *     .withAcls()
	 *     .limit(20)
	 *     .orderByDesc('first_name')
	 *     .select('first_name')
	 *     .toArray(100);
	 * 
	 * @returns GlideQuery The query object being built.
	 * 
	 */
	withAcls() : GlideQuery
	}
/**
	 * @description The scoped GlideQueryCondition API provides additional AND or OR conditions that can be added to the current condition, allowing you to build complex queries.
	 * Build complex queries such as:	
 * 	
 *     category='hardware' OR category='software' AND priority='2' AND priority='1'	
 * 	
 *   	
 *   	
 * In the case of addCondition(), an implied AND is added.  	
 *   	
 * This class has no constructor. A GlideQueryCondition object is returned by the following methods:	
 * 	
 * *   addActiveQuery()	
 * *   addInactiveQuery()	
 * *   addJoinQuery()	
 * *   addNotNullQuery()	
 * *   addNullQuery()	
 * *   addQuery()	
 * 	
 *   	
 *   	
 * If there is a complicated set of AND and OR queries, a single encoded query containing all conditions simplifies the query creation. To simplify the query creation, create a query in a list view, right-click the query, and select Copy query. It creates a single encoded query string to return your result set. Use that string as a parameter in an addEncodedQuery() call.  	
 *   	
 * Always test queries on a sub-production instance prior to deploying them on a production instance. An incorrectly constructed encoded query, such as including an invalid field name, produces an invalid query. When the invalid query is run, the invalid part of the query condition is dropped, and the results are based on the valid part of the query, which may return all records from the table. Using an insert(), update(), deleteRecord(), or deleteMultiple() method on bad query results can result in data loss.  	
 *   	
 * You can set the glide.invalid\_query.returns\_no\_rows system property to true to have queries with invalid encoded queries return no records.
	 * 
	 */
	declare class GlideQueryCondition {
	/**
	 * @description Adds an AND condition to the current condition.
	 * Returns
	 * 
	 * Type
	 * 
	 * Description
	 * 
	 * GlideQueryCondition
	 * 
	 * A reference to a GlideQueryConditon that was added to the GlideRecord.
	 * 
	 * @example
	 * //
	 * var now_GR = new GlideRecord('incident');
	 * var qc = now_GR.addQuery('category', 'Hardware');
	 * qc.addCondition('category', 'Network');
	 * now_GR.addQuery('number','INC0000003');
	 * now_GR.next();
	 * now_GR.number;
	 * gs.info(now_GR.getEncodedQuery());
	 * 
	 * @param name The name of a field.
	 * @param oper (Optional) The operator for the query. If you do not specify an operator, the condition uses an equals operator.
	 * @param value The value to query on.
	 * 
	 * @returns GlideQueryCondition A reference to a GlideQueryConditon that was added to the GlideRecord.
	 * 
	 */
	addCondition(name: string,oper: string,value: Object) : GlideQueryCondition
	/**
	 * @description Appends a two-or-three parameter OR condition to an existing GlideQueryCondition.
	 * addOrCondition() works in conjunction with any of the [addQuery()](https://developer.servicenow.com/go_to_api.do?ID=r_ScopedGlideRecordAddQuery_String_String_Object&v=paris) methods to OR the specified query parameters to the query previously constructed using addQuery().
	 * 
	 * addOrCondition() is typically called with three parameters; table field, operator, and comparison value. It can be called with only two parameters, table field and comparison value, such as qc.addOrCondition('category', 'software');. The operator in this case is assumed to be "equal to".
	 * 
	 * Parameters
	 * 
	 * Name
	 * 
	 * Type
	 * 
	 * Description
	 * 
	 * name
	 * 
	 * String
	 * 
	 * Field name
	 * 
	 * oper
	 * 
	 * String
	 * 
	 * (Optional) Query operator. The available values are dependent on the data type of the value parameter.
	 * 
	 * Numbers:
	 * 
	 * *   \=
	 * *   !=
	 * *   \>
	 * *   \>=
	 * *   <
	 * *   <=
	 * 
	 * Strings (must be in upper case):
	 * 
	 * *   \=
	 * *   !=
	 * *   IN
	 * *   STARTSWITH
	 * *   ENDSWITH
	 * *   CONTAINS
	 * *   DOESNOTCONTAIN
	 * 
	 * value
	 * 
	 * Object
	 * 
	 * Value on which to query (not case-sensitive).
	 * 
	 * Note: All passed in arrays must contain a minimum of two elements. Single element arrays are not supported.
	 * 
	 * Returns
	 * 
	 * Type
	 * 
	 * Description
	 * 
	 * GlideQueryCondition
	 * 
	 * A reference to a GlideQueryConditon that was added to the GlideRecord.
	 * 
	 * @example
	 * //
	 * var now_GR = new GlideRecord('incident');
	 * var qc = now_GR.addQuery('category', 'Hardware');
	 * qc.addOrCondition('category', 'Network');
	 * now_GR.addQuery('number','INC0000003');
	 * now_GR.next();
	 * now_GR.number;
	 * gs.info(now_GR.getEncodedQuery());
	 * 
	 * 
	 * @example
	 * //To group AND/OR statements to make complex queries, such as "All incidents with a (state less than 3 OR greater than 5) AND (priority is 1 OR priority is 5)
	 * var myObj = new GlideRecord('incident');
	 * var q1 = myObj.addQuery('state', '&lt;', 3);
	 * q1.addOrCondition('state', '&gt;', 5);
	 * var q2 = myObj.addQuery('priority', 1);
	 * q2.addOrCondition('priority', 5);
	 * myObj.query();
	 * 
	 * @param name Field name
	 * @param oper (Optional) Query operator. The available values are dependent on the data type of the value parameter.  Numbers:  *   \= *   != *   \> *   \>= *   < *   <=  Strings (must be in upper case):  *   \= *   != *   IN *   STARTSWITH *   ENDSWITH *   CONTAINS *   DOESNOTCONTAIN
	 * @param value Value on which to query (not case-sensitive).  Note: All passed in arrays must contain a minimum of two elements. Single element arrays are not supported.
	 * 
	 * @returns GlideQueryCondition A reference to a GlideQueryConditon that was added to the GlideRecord.
	 * 
	 */
	addOrCondition(name: string,oper: string,value: Object) : GlideQueryCondition
	}
/**
	 * @description Scoped GlideRecord is used for database operations.
	 * A GlideRecord contains both records and fields. For information about GlideRecordSecure, which is a class inherited from GlideRecord that performs the same functions as GlideRecord, and also enforces ACLs, see the [GlideServer APIs](https://docs.servicenow.com/bundle/paris-application-development/page/script/glide-server-apis/topic/p_GlideServerAPIs.html) .  	
 *   	
 * Always test queries on a sub-production instance prior to deploying them on a production instance. An incorrectly constructed encoded query, such as including an invalid field name, produces an invalid query. When the invalid query is run, the invalid part of the query condition is dropped, and the results are based on the valid part of the query, which may return all records from the table. Using an insert(), update(), deleteRecord(), or deleteMultiple() method on bad query results can result in data loss.  	
 *   	
 * You can set the glide.invalid\_query.returns\_no\_rows system property to true to have queries with invalid encoded queries return no records.
	 * 
	 */
	declare class GlideRecord {
	/**
	 * @description Creates an instance of the GlideRecord class for the specified table.
	 * @example
	 * //
	 * var now_GR = new GlideRecord('incident');
	 * 
	 * @param tableName The table to be used.
	 * 
	 */
	constructor(tableName: string) 
	/**
	 * @description Adds a filter to return active records.
	 * @example
	 * //
	 * var inc = new GlideRecord('incident');
	 * inc.addActiveQuery();
	 * inc.query();
	 * 
	 * @returns QueryCondition Filter to return active records.
	 * 
	 */
	addActiveQuery() : QueryCondition
	/**
	 * @description Provides atomic add and subtract operations on a specified number field at the database level for the current GlideRecord object.
	 * Typically, a GlideRecord object is written as one record in a database. Individual field values are stored as defined. For code that adds a value to a GlideRecord field, it simply saves the field to the database with the new value, rather than atomically incrementing it.
	 * 
	 * For example, when the following code is executed, the value of the u\_count field in the database is 2.
	 * 
	 * gs.info(now\_GR.u\_count); // ”1” 
	 * now\_GR.u\_count += 1; 
	 * now\_GR.update(); 
	 * now\_GR.get(now\_GR.sys\_id); 
	 * gs.info(now\_GR.u\_count); // ”2”   
	 * 
	 * If another user concurrently runs identical code, instead of the two operations each adding 1 to u\_count, the net effect is that u\_count only contains 2, with one operation's update actually being lost.
	 * 
	 * Conversely, the addValue() method performs the addition/subtraction in the database when the record is updated as an atomic operation. Two operations running concurrently each properly update the field.
	 * 
	 * gs.info(now\_GR.u\_count); // ”1” 
	 * now\_GR.addValue(”u\_count”, 1); 
	 * now\_GR.update(); 
	 * now\_GR.get(now\_GR.sys\_id); // The record must be reloaded from the database to observe the result
	 * gs.info(now\_GR.u\_count); // ”3”, if executed concurrently with another user 
	 * 
	 * Note: The new value is not read back from the database unless explicitly done so.
	 * 
	 * Like setValue(), addValue() changes only take effect in the database after a subsequent call to update() or insert(). If insert() is called, the specified field is initialized with the value parameter passed into addValue().
	 * 
	 * Note: If setValue() is called for the specified field prior to calling addValue(), the addValue() method is not processed and an error message is logged.
	 * 
	 * @example
	 * //Shows a value being added.
	 * gs.info(now_GR.u_count); // ”1” 
	 * now_GR.addValue(”u_count”, 1); 
	 * now_GR.update(); 
	 * now_GR.get(now_GR.sys_id); // The record must be reloaded from the database to observe the result
	 * gs.info(now_GR.u_count);
	 * 
	 * @example
	 * //Shows a value being subtracted.
	 * gs.info(now_GR.u_count); // ”4” 
	 * now_GR.addValue(”u_count”, -1); 
	 * now_GR.update(); 
	 * now_GR.get(now_GR.sys_id); // The record must be reloaded from the database to observe the result
	 * gs.info(now_GR.u_count);
	 * 
	 * @param field The name of the field in this GlideRecord to modify.  If the associated field is not a numeric type, the operation is ignored.
	 * @param value The amount to add to the value when the record is saved. To perform a subtraction operation, simply pass a negative value.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	addValue(field: string,value: number) : void
	/**
	 * @description Adds an encoded query to other queries that may have been set.
	 * Always test queries on a sub-production instance prior to deploying them on a production instance. An incorrectly constructed encoded query, such as including an invalid field name, produces an invalid query. When the invalid query is run, the invalid part of the query condition is dropped, and the results are based on the valid part of the query, which may return all records from the table. Using an insert(), update(), deleteRecord(), or deleteMultiple() method on bad query results can result in data loss.
	 * 
	 * You can set the glide.invalid\_query.returns\_no\_rows system property to true to have queries with invalid encoded queries return no records.
	 * 
	 * To learn more about building searches using APIs, see [Implement Zing search using APIs](https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/search-administration/task/implement-zing-search-api.html).
	 * 
	 * @example
	 * //
	 * var queryString = "priority=1^ORpriority=2";
	 * var now_GR = new GlideRecord('incident');
	 * now_GR.addEncodedQuery(queryString);
	 * now_GR.query();
	 * while (now_GR.next()) {
	 *   gs.addInfoMessage(now_GR.getValue('number'));
	 * }
	 * 
	 * @param query An [encoded query string](https://docs.servicenow.com/bundle/paris-platform-user-interface/page/use/using-lists/concept/c_EncodedQueryStrings.html).
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	addEncodedQuery(query: string) : void
	/**
	 * @description Adds a filter to return records based on a relationship in a table related to the current GlideRecord.
	 * You can use this method to find all the users that are in the database group via the Group Member \[sys\_user\_grmember\] table, or to find all problems that have an assigned incident via the incident.problem\_id relationship.
	 * 
	 * This is not a true database join; rather, addJoinQuery() adds a subquery. So, while the result set is limited based on the join, the only fields that you have access to are those on the base table (those which are in the table with which the GlideRecord was initialized.)
	 * 
	 * Always test queries on a sub-production instance prior to deploying them on a production instance. An incorrectly constructed encoded query, such as including an invalid field name, produces an invalid query. When the invalid query is run, the invalid part of the query condition is dropped, and the results are based on the valid part of the query, which may return all records from the table. Using an insert(), update(), deleteRecord(), or deleteMultiple() method on bad query results can result in data loss.
	 * 
	 * You can set the glide.invalid\_query.returns\_no\_rows system property to true to have queries with invalid encoded queries return no records.
	 * 
	 * @example
	 * //Find problems that have an incident attached. This example returns problems that have associated incidents. However, it won't pull values from the incidents that are returned as a part of the query.
	 * var prob = new GlideRecord('problem');
	 * prob.addJoinQuery('incident');
	 * prob.query();
	 * 
	 * @example
	 * //Find inactive problems with associated incidents.
	 * // Look for Problem records that have associated Incident records
	 * var now_GR = new GlideRecord('problem');
	 * var grSQ = now_GR.addJoinQuery('incident');
	 *  
	 * // Where the Problem records are "active=false"
	 * now_GR.addQuery('active', 'false');
	 *  
	 * // And the Incident records are "active=true"
	 * grSQ.addCondition('active', 'true');
	 *  
	 * // Query
	 * now_GR.query();
	 *  
	 * // Iterate and output results
	 * while (now_GR.next()) {
	 *     gs.info(now_GR.getValue('number'));
	 * }
	 * 
	 * @example
	 * //Find problems that have incidents associated where the incident caller\_id field value matches that of the problem opened\_by field.
	 * var now_GR = new GlideRecord('problem'); 
	 * now_GR.addJoinQuery('incident', 'opened_by', 'caller_id'); 
	 * now_GR.query();
	 * 
	 * @param joinTable Name of table to use in the join, such as 'incident'.
	 * @param primaryField Optional. Name of the field in the GlideRecord to use to join the field specified in the joinTableField parameter.  Default: sys\_id
	 * @param joinTableField Optional. Name of the field in the table specified in joinTable to use to join the tables.  Default: First field in the table specified in joinTable that is a reference field to the current GlideRecord table.
	 * 
	 * @returns GlideQueryCondition Filter that lists records where the relationships match.
	 * 
	 */
	addJoinQuery(joinTable: string,primaryField: string,joinTableField: string) : GlideQueryCondition
	/**
	 * @description A filter that specifies records where the value of the field passed in the parameter is not null.
	 * Always test queries on a sub-production instance prior to deploying them on a production instance. An incorrectly constructed encoded query, such as including an invalid field name, produces an invalid query. When the invalid query is run, the invalid part of the query condition is dropped, and the results are based on the valid part of the query, which may return all records from the table. Using an insert(), update(), deleteRecord(), or deleteMultiple() method on bad query results can result in data loss.
	 * 
	 * You can set the glide.invalid\_query.returns\_no\_rows system property to true to have queries with invalid encoded queries return no records.
	 * 
	 * @example
	 * //
	 * var target = new GlideRecord('incident'); 
	 * target.addNotNullQuery('short_description');
	 * target.query();   // Issue the query to the database to get all records where short_description is not null
	 * while (target.next()) {   
	 *      // add code here to process the incident record
	 * }
	 * 
	 * @param fieldName The name of the field to be checked.
	 * 
	 * @returns GlideQueryCondition A filter that specifies records where the value of the field passed in the parameter is not null.
	 * 
	 */
	addNotNullQuery(fieldName: string) : GlideQueryCondition
	/**
	 * @description Adds a filter to return records where the value of the specified field is null.
	 * Always test queries on a sub-production instance prior to deploying them on a production instance. An incorrectly constructed encoded query, such as including an invalid field name, produces an invalid query. When the invalid query is run, the invalid part of the query condition is dropped, and the results are based on the valid part of the query, which may return all records from the table. Using an insert(), update(), deleteRecord(), or deleteMultiple() method on bad query results can result in data loss.
	 * 
	 * You can set the glide.invalid\_query.returns\_no\_rows system property to true to have queries with invalid encoded queries return no records.
	 * 
	 * @example
	 * //
	 * var target = new GlideRecord('incident'); 
	 * target.addNullQuery('short_description');
	 * target.query();   // Issue the query to the database to get all records where short_description is null
	 * while (target.next()) {   
	 *    // add code here to process the incident record
	 * }
	 * 
	 * @param fieldName The name of the field to be checked.
	 * 
	 * @returns GlideQueryCondition The query condition added to the GlideRecord.
	 * 
	 */
	addNullQuery(fieldName: string) : GlideQueryCondition
	/**
	 * @description Adds a filter to return records using an encoded query string.
	 * Always test queries on a sub-production instance prior to deploying them on a production instance. An incorrectly constructed encoded query, such as including an invalid field name, produces an invalid query. When the invalid query is run, the invalid part of the query condition is dropped, and the results are based on the valid part of the query, which may return all records from the table. Using an insert(), update(), deleteRecord(), or deleteMultiple() method on bad query results can result in data loss.
	 * 
	 * You can set the glide.invalid\_query.returns\_no\_rows system property to true to have queries with invalid encoded queries return no records.
	 * 
	 * @example
	 * //
	 * var rec = new GlideRecord('incident');
	 * rec.addQuery('active=true');
	 * rec.query();
	 * while (rec.next()) {
	 *   rec.setValue('active', false);
	 *   gs.info('Active incident ' + rec.getValue('number') + ' closed');
	 *   rec.update();
	 * }
	 * 
	 * @param query An [encoded query string](https://docs.servicenow.com/bundle/quebec-platform-administration/page/use/using-lists/concept/c_EncodedQueryStrings.html) .
	 * 
	 * @returns GlideQueryCondition The query condition added to the GlideRecord.
	 * 
	 */
	addQuery(query: string) : GlideQueryCondition
	/**
	 * @description Build a search query and return the rows that match the request.
	 * If you are familiar with SQL, this method is similar to the "where" clause. One or more addQuery() calls can be made in a single query; in this case the queries are AND'ed. If any of the query statements need to be OR'ed, use the GlideQueryCondition method [addOrCondition()](https://developer.servicenow.com/go_to_api.do?ID=r_ScopedGlideQueryConditionOrAddCondition_String_name_String_oper_Object_value&v=quebec).
	 * 
	 * When addQuery() is called with only two parameters, table field and comparison value, such as myObj.addQuery('category','Hardware');, the operator in this case is assumed to be "equal to".
	 * 
	 * Always test queries on a sub-production instance prior to deploying them on a production instance. An incorrectly constructed encoded query, such as including an invalid field name, produces an invalid query. When the invalid query is run, the invalid part of the query condition is dropped, and the results are based on the valid part of the query, which may return all records from the table. Using an insert(), update(), deleteRecord(), or deleteMultiple() method on bad query results can result in data loss.
	 * 
	 * You can set the glide.invalid\_query.returns\_no\_rows system property to true to have queries with invalid encoded queries return no records.
	 * 
	 * To learn more about building searches using APIs, see [Implement Zing search using APIs](https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/search-administration/task/implement-zing-search-api.html).
	 * 
	 * @example
	 * //Adds a query for active records in the Incident table.
	 * var rec = new GlideRecord('incident');
	 * rec.addQuery('active', true);
	 * rec.query();
	 * while (rec.next()) {
	 *   rec.setValue('active', false);
	 *   gs.info('Active incident ' + rec.getValue('number') + ' closed');
	 *   rec.update();
	 * }
	 * 
	 * @example
	 * //Adds a query for records in the kb\_knowledge table and portal text index group.
	 * var now_GR = new GlideRecord("kb_knowledge);
	 * now_GR.addQuery("123TEXTQUERY321", "email server");
	 * now_GR.addQuery("123TEXTINDEXGROUP321", "portal");
	 * now_GR.query();
	 * 
	 * @param name Table field name. If you are not querying a table field, use these reserved variables:  *   123TEXTQUERY321: Adds a search term to the query. Use this option to return matching values from any field in the table. Use the term you want to query as the value. *   123TEXTINDEXGROUP321: Adds a text index group to the query. Use the name of the text index group from the Text Index Groups \[ts\_index\_group\] table you want to query as the value. For more information about text index groups, see [Configure multiple tables for indexing and searching](https://docs.servicenow.com/bundle/quebec-platform-administration/page/administer/search-administration/task/index-multiple-tables.html).
	 * @param value Value on which to query (not case-sensitive).
	 * 
	 * @returns GlideQueryCondition The query condition added to the GlideRecord.
	 * 
	 */
	addQuery(name: string,value: Object) : GlideQueryCondition
	/**
	 * @description Provides the ability to build a request, which when executed, returns the rows from the specified table, that match the request.
	 * If you are familiar with SQL, this method is similar to the "where" clause. One or more addQuery() calls can be made in a single query; in this case the queries are AND'ed. If any of the query statements need to be OR'ed, use the GlideQueryCondition method [addOrCondition()](dev.do#!/reference/api/paris/server/no-namespace/c_GlideQueryConditionScopedAPI#r_ScopedGlideQueryConditionOrAddCondition_String_name_String_oper_Object_value "Appends a two-or-three parameter OR condition to an existing GlideQueryCondition.").
	 * 
	 * Always test queries on a sub-production instance prior to deploying them on a production instance. An incorrectly constructed encoded query, such as including an invalid field name, produces an invalid query. When the invalid query is run, the invalid part of the query condition is dropped, and the results are based on the valid part of the query, which may return all records from the table. Using an insert(), update(), deleteRecord(), or deleteMultiple() method on bad query results can result in data loss.
	 * 
	 * You can set the glide.invalid\_query.returns\_no\_rows system property to true to have queries with invalid encoded queries return no records.
	 * 
	 * @example
	 * //
	 * var rec = new GlideRecord('incident');
	 * rec.addQuery('active',true);
	 * rec.addQuery('sys_created_on', "&gt;", "2010-01-19 04:05:00");
	 * rec.query();
	 * while (rec.next()) {
	 *   rec.setValue('active', false);
	 *   gs.info('Active incident ' + rec.getValue('number') + ' closed');
	 *   rec.update();
	 * }
	 * 
	 * @example
	 * //Using the IN operator.
	 * var now_GR = new GlideRecord('incident');
	 * now_GR.addQuery('number','IN','INC00001,INC00002');
	 * now_GR.query();
	 * while(now_GR.next()) {
	 *   //do something....
	 * }
	 * 
	 * @param name Table field name.
	 * @param operator Query operator. The available values are dependent on the data type of the value parameter.  Numbers:  *   \= *   != *   \> *   \>= *   < *   <=  Strings (must be in upper case):  *   \= *   != *   IN *   NOT IN *   STARTSWITH *   ENDSWITH *   CONTAINS *   DOES NOT CONTAIN *   INSTANCEOF
	 * @param value Value on which to query (not case-sensitive).
	 * 
	 * @returns GlideQueryCondition The query condition that was added to the GlideRecord.
	 * 
	 */
	addQuery(name: string,operator: string,value: Object) : GlideQueryCondition
	/**
	 * @description Applies a pre-defined GlideDBFunctionBuilder object to a record.
	 * Use the GlideDBFunctionBuilder scoped class to define a function. After the function is defined, use the addFunction(Object function) method to apply the function to a record.
	 * 
	 * @example
	 * //
	 * var functionBuilder = new GlideDBFunctionBuilder();
	 * var myAddingFunction = functionBuilder.add();
	 * myAddingFunction = functionBuilder.field('order');
	 * myAddingFunction = functionBuilder.field('priority');
	 * myAddingFunction = functionBuilder.build();
	 * 
	 * // Query incidents in which order + priority is less than 5 and display that added value
	 * var now_GR = new GlideRecord('incident');
	 * now_GR.addFunction(myAddingFunction);
	 * now_GR.addQuery(myAddingFunction, '&lt;', 5);
	 * now_GR.query();
	 * while(now_GR.next())
	 *   gs.info(now_GR.getValue(myAddingFunction));
	 * 
	 * @param function GlideDBFunctionBuilder object that defines a SQL operation.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	addFunction(jsFunction: Object) : void
	/**
	 * @description Sets the values of the specified encoded query terms and applies them to the current GlideRecord.
	 * @example
	 * //
	 * function createAcl(table, role) {
	 *   gs.info("Checking security on table " + table);
	 *   var now_GR = new GlideRecord("sys_security_acl");
	 *   now_GR.addQuery("name", table);
	 *   now_GR.addQuery("operation", "read");
	 *   now_GR.query();
	 *   var encQuery = now_GR.getEncodedQuery();
	 *   if (now_GR.next()) {
	 *   // existing acl found so use it
	 *     createAclRole(now_GR.getValue('sys_id'), role);
	 *     return;
	 *   } else {
	 *     now_GR.initialize();
	 *     now_GR.applyEncodedQuery(encQuery);
	 *     var acl = now_GR.insert();
	 *     gs.info("Added read access control on " + table);
	 *     createAclRole(acl, role);
	 *   }
	 * }
	 * 
	 * @param queryString Encoded query to apply to the current GlideRecord.
	 * 
	 * @returns None 
	 * 
	 */
	applyEncodedQuery(queryString: string) : None
	/**
	 * @description Determines if the Access Control Rules, which include the user's roles, permit inserting new records in this table.
	 * @example
	 * //
	 * var now_GR = new GlideRecord('incident');
	 * gs.info(now_GR.canCreate());
	 * 
	 * @returns boolean Flag that indicates whether the user's roles permit creating of records in this table.  Valid values:  *   true: Creating permitted *   false: Creating is not permitted
	 * 
	 */
	canCreate() : boolean
	/**
	 * @description Determines if the Access Control Rules, which include the user's roles, permit deleting records in this table.
	 * @example
	 * //
	 * var att = new GlideRecord('sys_attachment');
	 * gs.info(att.canDelete());
	 * 
	 * @returns boolean Flag that indicates whether the user's roles permit deleting of records in this table.  Valid values:  *   true: Deleting permitted *   false: Deleting is not permitted
	 * 
	 */
	canDelete() : boolean
	/**
	 * @description Determines if the Access Control Rules, which include the user's roles, permit reading records in this table.
	 * @example
	 * //
	 * var now_GR = new GlideRecord('incident');
	 * gs.info(now_GR.canRead());
	 * 
	 * @returns boolean Flag that indicates whether the user's roles permit reading of records in this table.  Valid values:  *   true: Reading permitted *   false: Reading is not permitted
	 * 
	 */
	canRead() : boolean
	/**
	 * @description Determines if the Access Control Rules, which include the user's roles, permit editing records in this table.
	 * @example
	 * //
	 * var now_GR = new GlideRecord('incident');
	 * gs.info(now_GR.canWrite());
	 * 
	 * @returns boolean Flag that indicates whether the user's roles permit writing of records in this table.  Valid values:  *   true: Writing permitted *   false: Writing is not permitted
	 * 
	 */
	canWrite() : boolean
	/**
	 * @description Sets a range of rows to be returned by subsequent queries.
	 * @example
	 * //
	 * var now_GR = new GlideRecord('incident');
	 * now_GR.orderBy('number');
	 * now_GR.chooseWindow(2, 4);
	 * now_GR.query();
	 * if (now_GR.next()) {
	 *   gs.info(now_GR.number + ' is within window');
	 * //when forceCount = true now_GR.getRowCount() will be 3
	 * //when forceCount = false now_GR.getRowCount() will not be limited by window
	 * }
	 * 
	 * @param firstRow First row to include. Because the index starts at 0, a value of 0 returns the first row.
	 * @param lastRow Last row to include in the range. Because the index starts at 0, use the value _n_ - 1, in which _n_ equals the actual row number.
	 * @param forceCount Optional. Flag that indicates whether to force the [getRowCount()](dev.do#!/reference/api/paris/server/no-namespace/c_GlideRecordScopedAPI#r_ScopedGlideRecordGetRowCount "Retrieves the number of rows in the query result.") method to calculate based on the window.  Possible values:  *   true: getRowCount() returns the record count for the provided window. *   false: getRowCount() returns all possible records.  Default: false
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	chooseWindow(firstRow: number,lastRow: number,forceCount: boolean) : void
	/**
	 * @description Deletes multiple records that satisfy the query condition.
	 * This method does not delete attachments.
	 * 
	 * Do not use deleteMultiple() on tables with currency fields. Always delete each record individually. Also, do not use this method with the chooseWindow() or setLimit() methods when working with large tables.
	 * 
	 * @example
	 * //
	 * var now_GR = new GlideRecord('incident');
	 * now_GR.addQuery('active','false'); //to delete all inactive incidents
	 * now_GR.query();
	 * now_GR.deleteMultiple();
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	deleteMultiple() : void
	/**
	 * @description Deletes the current record.
	 * @example
	 * //
	 * var now_GR = new GlideRecord('incident');
	 * //to delete one record
	 * if (now_GR.get('99ebb4156fa831005be8883e6b3ee4b9'))
	 *     now_GR.deleteRecord();
	 * 
	 * @returns boolean Flag that indicates whether the record was successfully deleted.  Valid values:  *   true: Record was deleted. *   false: No record was found to delete.
	 * 
	 */
	deleteRecord() : boolean
	/**
	 * @description Returns the specified record in an instantiated GlideRecord object.
	 * This method accepts either one or two parameters. If only a single parameter is passed in, the method first assumes it is the sys\_id of the desired record. If not found, it then tries match the value against the display value. If two parameters are passed in, the first is the name of the column within the instantiated GlideRecord to search. The second is the value to search for.
	 * 
	 * If multiple records are found, use next() to access the additional records.
	 * 
	 * @example
	 * //This example shows how to obtain an incident record by passing in the sys\_id.
	 * var grIncident = new GlideRecord('incident');
	 * var returnValue = grIncident.get('99ebb4156fa831005be8883e6b3ee4b9');
	 * gs.info(returnValue); // logs true or false
	 * gs.info(grIncident.short_description); // logs Incident Short description
	 * 
	 * @example
	 * //This example shows how to obtain an incident record by passing the field to search (caller\_id.name) and the value to match within that field.
	 * var grIncident = new GlideRecord('incident');
	 * var returnValue = grIncident.get('caller_id.name','Sylivia Wayland');
	 * gs.info(returnValue); // logs true or false
	 * gs.info(grIncident.getValue('number')); // logs Incident Number
	 * 
	 * @param name Optional. Name of the instantiated GlideRecord column to search for the specified value parameter. If only a single parameter is passed in, the method assumes that this parameter is the sys\_id or display value.
	 * @param value Value to match.
	 * 
	 * @returns boolean Indicates whether the requested record was located:  *   true: record was found *   false: record was not found
	 * 
	 */
	get(name: Object,value: Object) : boolean
	/**
	 * @description Returns the dictionary attributes for the specified field.
	 * @example
	 * //
	 * doit();
	 * function doit() {
	 *   var now_GR = new GlideRecord('sys_user');
	 *   now_GR.query("user_name","admin");
	 *   if (now_GR.next()) {
	 *     gs.info("we got one");
	 *     gs.info(now_GR.location.getAttribute("tree_picker"));
	 *   }
	 * }
	 * 
	 * @param fieldName Field name for which to return the dictionary attributes
	 * 
	 * @returns string Dictionary attributes
	 * 
	 */
	getAttribute(fieldName: string) : string
	/**
	 * @description Returns the table's label.
	 * @returns string Table's label
	 * 
	 */
	getClassDisplayValue() : string
	/**
	 * @description Retrieves the display value for the current record.
	 * @example
	 * //
	 * var now_GR = new GlideRecord('incident');
	 * now_GR.get('sys_id','ef43c6d40a0a0b5700c77f9bf387afe3');
	 * gs.info(now_GR.getDisplayValue());
	 * 
	 * @returns string The display value for the current record.
	 * 
	 */
	getDisplayValue() : string
	/**
	 * @description Retrieves the GlideElement object for the specified field.
	 * @example
	 * //
	 * var elementName = 'short_description'; 
	 * var now_GR = new GlideRecord('incident'); 
	 * now_GR.initialize(); 
	 * now_GR.setValue(elementName, "My DB is not working");
	 * now_GR.insert();
	 * gs.info(now_GR.getElement('short_description'));
	 * 
	 * @param columnName Name of the column to get the element from.
	 * 
	 * @returns GlideElement The GlideElement for the specified column of the current record.
	 * 
	 */
	getElement(columnName: string) : GlideElement
	/**
	 * @description Returns an array of GlideElement objects. Each object describes a field in the current GlideRecord.
	 * @example
	 * //This example retrieves a record from the question table and shows the names of the elements (fields) in the record.
	 * var now_GR = new GlideRecord("question");
	 * now_GR.setLimit(1);
	 * now_GR.query();
	 * if (now_GR.next()) {
	 *   var list = now_GR.getElements();
	 *   for (var i = 0; i &lt; list.length; ++i) {
	 *   gs.info(list[i].getName());
	 *   }
	 * }
	 * 
	 * @returns Array Array of GlideElement objects. Each object describes a field in the current GlideRecord.
	 * 
	 */
	getElements() : Array
	/**
	 * @description Returns the element's descriptor.
	 * @example
	 * //
	 * var grInc = new GlideRecord('incident');
	 * grInc.get('sys_id','ef43c6d40a0a0b5700c77f9bf387afe3');
	 * 
	 * var field = grInc.getElement('priority');
	 * var ed = field.getED();
	 * 
	 * var isEdge = ed.getLabel();
	 * gs.info("Label is - " + isEdge);
	 * 
	 * @returns GlideElementDescriptor Element's descriptor
	 * 
	 */
	getED() : GlideElementDescriptor
	/**
	 * @description Retrieves the query condition of the current result set as an encoded query string.
	 * For details, see [Encoded query strings](https://docs.servicenow.com/bundle/paris-platform-user-interface/page/use/using-lists/concept/c_EncodedQueryStrings.html).
	 * 
	 * @example
	 * //
	 * var now_GR = new GlideRecord('incident'); 
	 * now_GR.addQuery('active', true);
	 * now_GR.addQuery('priority', 1); 
	 * now_GR.query(); 
	 * var encodedQuery = now_GR.getEncodedQuery(); 
	 * gs.info(encodedQuery);
	 * 
	 * @returns string 
	 * 
	 */
	getEncodedQuery() : string
	/**
	 * @description Returns the field's label.
	 * @example
	 * //
	 * template.print("Summary of Requested items:\n");  
	 * var now_GR = new GlideRecord("sc_req_item");
	 * now_GR.addQuery("request", current.sysapproval);
	 * now_GR.query();
	 * while(now_GR.next()) {
	 * var nicePrice = now_GR.price.toString();
	 *   if (nicePrice != '') {
	 *     nicePrice = parseFloat(nicePrice);
	 *     nicePrice = nicePrice.toFixed(2);
	 *   }
	 *   template.print(now_GR.number + ":  " + now_GR.quantity + " X " + now_GR.cat_item.getDisplayValue() 
	 *     + " at $" + nicePrice + " each \n");
	 *   template.print("    Options:\n");
	 *   for (key in now_GR.variables) {
	 *   var now_V = now_GR.variables[key];
	 *     if(now_V.getGlideObject().getQuestion().getLabel() != '') {
	 *       template.space(4);
	 *       template.print('     ' +  now_V.getGlideObject().getQuestion().getLabel() + " = " 
	 *         + now_V.getDisplayValue() + "\n");  
	 *     }
	 *   }
	 * }
	 * 
	 * @returns string Field's label
	 * 
	 */
	getLabel() : string
	/**
	 * @description Retrieves the last error message. If there is no last error message, null is returned.
	 * @example
	 * //
	 * // Setup a data policy where short_description field in incident is mandatory
	 * var now_GR = new GlideRecord('incident');
	 * now_GR.insert(); // insert without data in mandatory field
	 * var errormessage = now_GR.getLastErrorMessage(); 
	 * gs.info(errormessage);
	 * 
	 * @returns string The last error message as a string.
	 * 
	 */
	getLastErrorMessage() : string
	/**
	 * @description Retrieves the link to the current record.
	 * @example
	 * //This example queries all Incident records with a priority of "1" and writes the servlet URI and the current record's link to the system log.
	 * var now_GR = new GlideRecord('incident');
	 * now_GR.addActiveQuery();
	 * now_GR.addQuery("priority", 1);
	 * now_GR.query();
	 * now_GR.next();
	 * gs.info(gs.getProperty('glide.servlet.uri') + now_GR.getLink(false));
	 * 
	 * @param noStack Flag indicating whether to append the sysparm\_stack parameter to the returned link. This parameter specifies the page to visit after closing the current link.  Valid values:  *   true: Do not attach the sysparm\_stack parameter. *   false: Attach the sysparm\_stack parameter.  If true, the sysparm\_stack parameter is not appended to the link.
	 * 
	 * @returns string Link to the current record.
	 * 
	 */
	getLink(noStack: boolean) : string
	/**
	 * @description Retrieves the class name for the current record.
	 * @example
	 * //
	 * var now_GR = new GlideRecord('incident'); 
	 * var recordClassName = now_GR.getRecordClassName(); 
	 * gs.info(recordClassName);
	 * 
	 * @returns string The class name.
	 * 
	 */
	getRecordClassName() : string
	/**
	 * @description Retrieves the number of rows in the query result.
	 * @example
	 * //
	 * var now_GR = new GlideRecord('incident');
	 * now_GR.query();
	 * gs.info("Records in incident table: " + now_GR.getRowCount());
	 * 
	 * @returns number Number of rows.
	 * 
	 */
	getRowCount() : number
	/**
	 * @description Retrieves the name of the table associated with the GlideRecord.
	 * @example
	 * //
	 * var now_GR = new GlideRecord('incident');
	 * gs.info(now_GR.getTableName());
	 * 
	 * @returns string The table name
	 * 
	 */
	getTableName() : string
	/**
	 * @description Gets the primary key of the record, which is usually the sys\_id unless otherwise specified.
	 * @example
	 * //
	 * var now_GR = new GlideRecord('kb_knowledge');
	 * now_GR.query();
	 * now_GR.next();
	 * var uniqueid = now_GR.getUniqueValue();
	 * gs.info(uniqueid);
	 * 
	 * @returns string The unique primary key as a String, or null if the key is null.
	 * 
	 */
	getUniqueValue() : string
	/**
	 * @description Retrieves the string value of an underlying element in a field.
	 * @example
	 * //
	 * var now_GR = new GlideRecord('incident'); 
	 * now_GR.orderBy('number');
	 * now_GR.query('active','true'); 
	 * now_GR.next() ; 
	 * gs.info(now_GR.getValue('number'));
	 * 
	 * @param name The name of the field to get the value from.
	 * 
	 * @returns string The string value of the underlying element. Returns null if the field is empty or the field does not exist. Boolean values return as "0" and "1" string values instead of false and true.
	 * 
	 */
	getValue(name: string) : string
	/**
	 * @description Determines if there are any more records in the GlideRecord object.
	 * @example
	 * //
	 * var rec = new GlideRecord('incident'); 
	 * rec.query(); 
	 * if (rec.hasNext()) { 
	 *   gs.info("Table is not empty"); 
	 * }
	 * 
	 * @returns boolean True if there are more records in the query result set.
	 * 
	 */
	hasNext() : boolean
	/**
	 * @description Creates an empty record suitable for population before an insert.
	 * @example
	 * //
	 * var grIncident = new GlideRecord('incident');
	 * grIncident.initialize();
	 * grIncident.setValue('short_description', 'New Incident');
	 * grIncident.setValue('description', 'Incident description');
	 * grIncident.insert();
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	initialize() : void
	/**
	 * @description Inserts a new record using the field values that have been set for the current record.
	 * @example
	 * //
	 * var now_GR = new GlideRecord('incident');
	 * now_GR.initialize();
	 * now_GR.setValue('name', 'New Incident');
	 * now_GR.setValue('description', 'Incident description');
	 * now_GR.insert();
	 * 
	 * @returns string Unique ID of the inserted record, or null if the record is not inserted.
	 * 
	 */
	insert() : string
	/**
	 * @description Checks to see if the current database action is to be aborted.
	 * isActionAborted() is initialized (set to false) for new threads and by the next() method.
	 * 
	 * @example
	 * //
	 * var now_GR = new GlideRecord('incident');
	 *  
	 * gs.info(now_GR.isActionAborted());
	 * 
	 * @returns boolean True if the current database action is to be aborted
	 * 
	 */
	isActionAborted() : boolean
	/**
	 * @description Verifies whether the specified encoded query is valid.
	 * @example
	 * //
	 * var now_GR = new GlideRecord('incident_sla');
	 * var isValidQuery = now_GR.isEncodedQueryValid('inc_impact=1^taskslatable_active=true');
	 * if (isValidQuery) {
	 *        now_GR.addEncodedQuery('inc_impact=1^taskslatable_active=true');
	 *        now_GR.query();
	 *        .
	 *        .
	 *        .
	 * }
	 * 
	 * @param query Encoded query to validate.
	 * 
	 * @returns boolean Indicates whether the specified encoded query is valid.  *   true: passed-in encoded query is valid *   false: passed-in encoded query is not valid
	 * 
	 */
	isEncodedQueryValid(query: string) : boolean
	/**
	 * @description Checks if the current record is a new record that has not yet been inserted into the database.
	 * @example
	 * //
	 * var now_GR = new GlideRecord("x_app_table"); 
	 * now_GR.newRecord(); // create a new record and populate it with default values
	 * gs.info(now_GR.isNewRecord());
	 * 
	 * @returns boolean True if the record is new and has not been inserted into the database.
	 * 
	 */
	isNewRecord() : boolean
	/**
	 * @description Determines if the current table is valid or if the record was successfully retrieved.
	 * @example
	 * //
	 * var comment_GR = new GlideRecord('cf_comment');
	 * var commentId = '99ebb4156fa831005be8883e6b3ee4b9';
	 * comment_GR.get(commentId);
	 * gs.info(comment_GR.isValid());
	 * 
	 * @returns boolean Flag that indicates if the table is valid or if the record was successfully retrieved.  Possible values:  *   true: Table is valid or the record was successfully retrieved. *   false: Table is invalid or the record was not successfully retrieved.
	 * 
	 */
	isValid() : boolean
	/**
	 * @description Determines if the specified field is defined in the current table.
	 * @example
	 * //
	 * var now_GR = new GlideRecord('incident'); 
	 * now_GR.initialize(); 
	 * gs.info(now_GR.isValidField("short_description"));
	 * 
	 * @param columnName The name of the field.
	 * 
	 * @returns boolean True if the field is defined for the current table.
	 * 
	 */
	isValidField(columnName: string) : boolean
	/**
	 * @description Determines if a record was actually returned by the query/get record operation.
	 * @example
	 * //
	 * var rec = new GlideRecord('incident');
	 * rec.query();
	 * while (rec.next()) { 
	 *   gs.info(rec.number + ' exists');
	 * }
	 * gs.info(rec.isValidRecord());
	 * 
	 * @returns boolean Flag that indicates whether a record was actually returned by the query/get operation.  Valid values:  *   true: Record returned by query/get operation. *   false: End of record set, no record returned.
	 * 
	 */
	isValidRecord() : boolean
	/**
	 * @description Creates a new GlideRecord record, sets the default values for the fields, and assigns a unique ID to the record.
	 * @example
	 * //
	 * var now_GR = new GlideRecord("x_app_table"); 
	 * now_GR.newRecord(); 
	 * gs.info(now_GR.isNewRecord());
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	newRecord() : void
	/**
	 * @description Moves to the next record in the GlideRecord object.
	 * Note: This method fails if there is a field in the table called "next". If that is the case, use the method [\_next()](https://developer.servicenow.com/go_to_api.do?ID=SGR-_next&v=quebec).
	 * 
	 * @example
	 * //
	 * var rec = new GlideRecord('incident');
	 * rec.query();
	 * while (rec.next()) {
	 *  gs.info(rec.getValue('number') + ' exists');
	 * }
	 * 
	 * @returns boolean Flag that indicates if there is a "next" record in the GlideRecord.  Valid values:  *   true: Move to the next record was successful. *   false: No more records in the result set.
	 * 
	 */
	next() : boolean
	/**
	 * @description Retrieves the current operation being performed, such as insert, update, or delete.
	 * @example
	 * //
	 * //Commonly used in a business rule, returns insert if the current operation is insert
	 * gs.info("current operation " + current.operation());
	 * 
	 * @returns string The current operation.
	 * 
	 */
	operation() : string
	/**
	 * @description Specifies an orderBy column.
	 * Call this method more than once to order by multiple columns. Results are arranged in ascending order. To arrange records in descending order, see [Scoped GlideRecord - orderByDesc(String name)](dev.do#!/reference/api/paris/server/no-namespace/c_GlideRecordScopedAPI#r_ScopedGlideRecordOrderByDesc_String "Specifies a descending orderBy column.").
	 * 
	 * @example
	 * //
	 * var queryString = "priority=2";
	 * var now_GR = new GlideRecord('incident');
	 * now_GR.orderBy('short_description'); // Ascending Order
	 * now_GR.addEncodedQuery(queryString);
	 * now_GR.query();
	 * while (now_GR.next()) {
	 *   gs.info(now_GR.getValue('short_description'));
	 * }
	 * 
	 * @param name Column name to use to order the records in this GlideRecord object.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	orderBy(name: string) : void
	/**
	 * @description Specifies a descending orderBy column.
	 * Call this method more than once to order by multiple columns. Results are arranged in descending order. To arrange records in ascending order, see [Scoped GlideRecord - orderBy(String name)](dev.do#!/reference/api/paris/server/no-namespace/c_GlideRecordScopedAPI#r_ScopedGlideRecordOrderBy_String "Specifies an orderBy column.").
	 * 
	 * @example
	 * //
	 * var queryString = "priority=2";
	 * var now_GR = new GlideRecord('incident');
	 * now_GR.orderByDesc('short_description'); //Descending Order
	 * now_GR.addEncodedQuery(queryString);
	 * now_GR.query();
	 * while (now_GR.next()) {
	 *   gs.info(now_GR.getValue('short_description'));
	 * }
	 * 
	 * @param name Column name to use to order the records in a GlideRecord object.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	orderByDesc(name: string) : void
	/**
	 * @description Runs the query against the table based on the filters specified by various query methods such as addQuery, addEncodedQuery, and so on.
	 * This method queries the GlideRecord table as well as any references of the table. Usually this is performed without arguments. If name/value pair is specified, "name=value" condition is added to the query.
	 * 
	 * Note: This method fails if there is a field in the table called "query". If that is the case, use the method [\_query()](https://developer.servicenow.com/go_to_api.do?ID=SGR-_query_O_O&v=quebec).
	 * 
	 * @example
	 * //
	 * var rec = new GlideRecord('incident');
	 * rec.query();
	 * while (rec.next()) {
	 *   gs.info(rec.getValue('number') + ' exists');
	 * }
	 * 
	 * @param field Column name to query on.
	 * @param value Value to query for.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	query(field: Object,value: Object) : void
	/**
	 * @description Sets a flag to indicate if the next database action (insert, update, delete) is to be aborted. This is often used in business rules.
	 * Use in an onBefore business rule to prevent the database action from being done. The business rule continues to run after setAbortAction() is called. Calling setAbortAction() does not stop subsequent business rules from executing. Calling this method only prevents the database action from occurring.
	 * 
	 * @example
	 * //
	 * // Often used in business rule to check whether the current operation should be aborted.
	 * if (current.size &gt; 16) {
	 *   current.setAbortAction(true);
	 * }
	 * 
	 * @param b True to abort the next action. False if the action is to be allowed.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setAbortAction(b: boolean) : void
	/**
	 * @description Sets the limit for number of records are fetched by the GlideRecord query.
	 * @example
	 * //
	 * var now_GR = new GlideRecord('incident');
	 * now_GR.orderByDesc('sys_created_on');
	 * now_GR.setLimit(10);
	 * now_GR.query(); // this retrieves latest 10 incident records created
	 * 
	 * @param maxNumRecords The maximum number of records to fetch.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setLimit(maxNumRecords: number) : void
	/**
	 * @description Sets the sys\_id value for the current record.
	 * @example
	 * //
	 * var now_GR = new GlideRecord('incident');
	 * now_GR.setValue('short_description', 'The third floor printer is broken');
	 * now_GR.setNewGuidValue('eb4636ca6f6d31005be8883e6b3ee333');
	 * now_GR.insert();
	 * gs.info(now_GR.getValue('sys_id'));
	 * 
	 * @param guid GUID to assign to the current record.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setNewGuidValue(guid: string) : void
	/**
	 * @description Sets the value of the field with the specified name to the specified value.
	 * Normally the script does a now\_GR.category = value. However, if the element name is itself a variable then now\_GR.setValue(elementName, value) can be used. When setting a value, ensure the data type of the field matches the data type of the value you enter.
	 * 
	 * @example
	 * //
	 * var elementName = 'short_description'; 
	 * var now_GR = new GlideRecord('incident'); 
	 * now_GR.initialize(); 
	 * now_GR.setValue(elementName, "My DB is not working");
	 * now_GR.insert();
	 * 
	 * @param name Name of the field.
	 * @param value The value to assign to the field.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setValue(name: string,value: Object) : void
	/**
	 * @description Enables or disables the running of business rules, script engines, and audit.
	 * @example
	 * //
	 * //Enable business rules, scripts engines for x_app_table
	 * var now_GR = new GlideRecord("x_app_table"); 
	 * now_GR.setWorkflow(true);
	 * 
	 * @param enable If true (default), enables business rules. If false, disables business rules.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setWorkflow(enable: boolean) : void
	/**
	 * @description Updates the GlideRecord with any changes that have been made. If the record does not already exist, it is inserted.
	 * @example
	 * //
	 * var now_GR = new GlideRecord('incident');
	 * now_GR.get('99ebb4156fa831005be8883e6b3ee4b9');
	 * now_GR.setValue('short_description', 'Update the short description');
	 * now_GR.update();
	 * gs.info(now_GR.getElement('short_description'));
	 * 
	 * @param reason Optional. Reason for the update. The reason appears in the audit record.
	 * 
	 * @returns string Sys\_id of the new or updated record. Returns null if the update fails.
	 * 
	 */
	update(reason: string) : string
	/**
	 * @description Updates each GlideRecord in a stated query with a specified set of changes.
	 * When changing field values, use setValue() instead of directly setting the field (field = something). When using updateMultiple(), directly setting the field (now\_GR.state = 4) results in all records in the table being updated instead of just the records returned by the query.
	 * 
	 * Do not use this method with the chooseWindow() or setLimit() methods when working with large tables.
	 * 
	 * This method sets new values and does not clear existing values.
	 * 
	 * @example
	 * //
	 * // update the state of all active incidents to 4 - "Awaiting User Info"
	 * var now_GR = new GlideRecord('incident');
	 * now_GR.addQuery('active', true);
	 * now_GR.setValue('state',  4);
	 * now_GR.updateMultiple();
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	updateMultiple() : void
	/**
	 * @description Moves to the next record in the GlideRecord. Provides the same functionality as next(), use this method if the GlideRecord has a column named next.
	 * @example
	 * //
	 * var rec = new GlideRecord('sys_template');
	 * rec.query();
	 * while (rec._next()) {
	 *   gs.info(rec.getValue('number') + ' exists');
	 * }
	 * 
	 * @returns boolean Flag that indicates whether there are more records in the query set.  Possible values:  *   true: More records in the query set. *   false: No more records in the query set.
	 * 
	 */
	_next() : boolean
	/**
	 * @description Runs the query against the table based on the filters specified by the various query methods such as addQuery() and addEncodedQuery(). Use this method on tables where there is a column named query.
	 * This method queries the GlideRecord table as well as any references of the table. Typically this method is called without arguments. If a name/value pair is specified, the "name=value" condition is added to the query.
	 * 
	 * @example
	 * //
	 * var rec = new GlideRecord('sys_app_module');
	 * rec._query();
	 * while (rec.next()) {
	 *   gs.info(rec.getValue('number') + ' exists');
	 * }
	 * 
	 * @param name Column name on which to query.
	 * @param value Value for which to query.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	_query(name: Object,value: Object) : void
	}
/**
	 * @description The scoped GlideSchedule API provides methods for performing operations on GlideSchedule objects, such as adding new schedule segments to a schedule, determining if a datetime is within the schedule, or setting the schedule timezone.
	 * 
	 */
	declare class GlideSchedule {
	/**
	 * @description Instantiates an empty GlideSchedule object.
	 */
	constructor() 
	/**
	 * @description Instantiates a GlideSchedule object and loads the schedule information. If a timezone is not specified or is nil, the current session timezone is used.
	 * @example
	 * //
	 * var schedule = new GlideSchedule('090eecae0a0a0b260077e1dfa71da828', 'US/Pacific');
	 * 
	 * @param sysID The system ID for the schedule.
	 * @param timeZone The time zone. (Optional)
	 * 
	 */
	constructor(sysID: string,timeZone: string) 
	/**
	 * @description Determines if the current schedule is valid. A schedule is valid if it has at least one schedule span.
	 * @example
	 * //
	 * var glide = new GlideRecord('cmn_schedule');
	 * glide.addQuery('type', 'blackout');
	 * glide.query();
	 * if (glide.next()) {
	 *    var sched = new GlideSchedule(glide.sys_id);
	 *    var date = new GlideDateTime();
	 *    date.setDisplayValue("2007-09-18 12:00:00");
	 *    if (sched.isValid()) 
	 *       gs.info("Is valid");
	 *  
	 *    else
	 *       gs.info("Is not valid");
	 * }
	 * 
	 * @returns boolean True if the schedule is valid.
	 * 
	 */
	isValid() : boolean
	/**
	 * @description Retrieves the schedule name.
	 * @example
	 * //
	 * sys_id ='04e664654a36232701a2247dcd8fc4cf'; // sys_id for "Application" schedule record
	 * var sched = new GlideSchedule(sys_id);
	 * gs.info(sched.getName());
	 * 
	 * @returns string The name of the current schedule.
	 * 
	 */
	getName() : string
	/**
	 * @description Loads a schedule with the schedule information.
	 * @example
	 * //
	 * var x = new GlideSchedule();
	 * x.load('08fcd0830a0a0b2600079f56b1adb9ae');
	 * 
	 * @param sysID The system ID of the schedule.
	 * @param timeZone (Optional) The timezone. If a timezone is not specified, or is nil, the current session timezone is used for the schedule.
	 * @param excludeSpanID Any span to exclude.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	load(sysID: string,timeZone: string,excludeSpanID: string) : void
	/**
	 * @description Determines how much time (in milliseconds) until start time of the next schedule item.
	 * This function is intended to be called when the GlideSchedule object (cmn\_schedule table) is not currently in the schedule window. The whenNext() call returns duration (in ms) until the GlideSchedule object is within the schedule. This function does not return a meaningful value if called when the GlideSchedule object is within the schedule.
	 * 
	 * @example
	 * //
	 * var startDate = new GlideDateTime('2014-10-25 08:00:00');
	 * var glideSchedule = new GlideSchedule('08fcd0830a0a0b2600079f56b1adb9ae', 'UTC');
	 * gs.info(glideSchedule.whenNext(startDate));
	 * 
	 * @example
	 * //
	 * testScript(); 
	 * function testScript() { 
	 * var now = new GlideDateTime(); //current date and time
	 * var sched = new GlideSchedule("&lt;sys_id&gt;"); // Use a cmn_schedule sys_id 
	 * if (sched.isInSchedule(now)){ 
	 * gs.info('We are in an active schedule window so whenNext() is not helpful'); 
	 * } else{  
	 * gs.info('Not currently in schedule so call whenNext()'); 
	 * var msUntilNext = sched.whenNext(new GlideDateTime(), 'US/Pacific'); 
	 * gs.info('Next schedule starts in '+msUntilNext+' milliseconds'); 
	 * } 
	 * }
	 * \\ Output [schedule inactive)]:
	 * \\ *** Script: Not currently in schedule so call whenNext() 
	 * \\ *** Script: Next schedule starts in -1 milliseconds
	 * 
	 * @param time Time to be evaluated
	 * @param timeZone Timezone
	 * 
	 * @returns number Number of milliseconds until the start time of the next schedule item. Returns -1 if never.
	 * 
	 */
	whenNext(time: GlideDateTime,timeZone: string) : number
	/**
	 * @description Sets the timezone for the current schedule.
	 * @example
	 * //This example sets the timezone for the schedule to US/Pacific.
	 * var schedule = new GlideSchedule();
	 * schedule.setTimeZone('US/Pacific');
	 * 
	 * @param timeZone The timezone.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setTimeZone(timeZone: string) : void
	/**
	 * @description Adds a new schedule segment to the current schedule.
	 * @example
	 * //
	 * var startDate = new GlideDateTime('2014-01-02');
	 * var days = 2;
	 * var dur = new GlideDuration(60 * 60 * 24 * 1000 * days);
	 * var schedule = new GlideSchedule();
	 * var end = schedule.add(startDate, dur);
	 * gs.info(end);
	 * 
	 * @param startDate The starting date of the new schedule segment.
	 * @param offSet The time offset of the new schedule segment.
	 * 
	 * @returns GlideDateTime The schedule updated with the new schedule segment.
	 * 
	 */
	add(startDate: GlideDateTime,offSet: GlideDuration) : GlideDateTime
	/**
	 * @description Determines the elapsed time in the schedule between two date time values using the timezone of the schedule or, if that is not specified, the timezone of the session.
	 * @example
	 * //
	 * var startDate = new GlideDateTime('2014-10-16 02:00:00');
	 * var endDate = new GlideDateTime('2014-10-18 04:00:00');
	 * var schedule = new GlideSchedule();
	 *  
	 * schedule.load('090eecae0a0a0b260077e1dfa71da828'); // loads "8-5 weekdays excluding holidays" schedule
	 * var duration = schedule.duration(startDate, endDate);
	 * gs.info(duration.getDurationValue()); // gets the elapsed time in schedule
	 * 
	 * @param startDate The starting datetime.
	 * @param endDate The ending datetime.
	 * 
	 * @returns GlideDuration The difference between the starting and ending datetime.
	 * 
	 */
	duration(startDate: GlideDateTime,endDate: GlideDateTime) : GlideDuration
	/**
	 * @description Determines if the given datetime is within the current schedule.
	 * @example
	 * //
	 * var glide = new GlideRecord('cmn_schedule');
	 * glide.addQuery('type', 'blackout');
	 * glide.query();
	 * if (glide.next()) {
	 *    var sched = new GlideSchedule(glide.sys_id);
	 *    var date = new GlideDateTime();
	 *    date.setDisplayValue("2007-09-18 12:00:00");
	 *    if (sched.isInSchedule(d)) 
	 *       gs.info("Is in the schedule");
	 *    else
	 *       gs.info("Is NOT in the schedule");
	 * }
	 * 
	 * @param time The datetime value to check.
	 * 
	 * @returns boolean True if the specified datetime is within the schedule; otherwise, false.
	 * 
	 */
	isInSchedule(time: GlideDateTime) : boolean
	}
/**
	 * @description The GlideScopedEvaluator API allows you to evaluate scripts in a GlideRecord field from both scoped and global server scripts.
	 * The GlideScopedEvaluator API evaluates records with script fields defined. The scope of the script is defined by the scope of the record.
	 * 
	 */
	declare class GlideScopedEvaluator {
	/**
	 * @description Instantiates a GlideScopedEvaluator object.
	 */
	constructor() 
	/**
	 * @description Evaluates a script from a GlideRecord field.
	 * @example
	 * //
	 * // For this example, we created a table: "x_app_table" with two columns: "short_description", "test_script"
	 * // "test_script" will store the script to be evaluated by GlideScopedEvaluator.
	 * gr = new GlideRecord('x_app_table'); 
	 * now_GR.short_description = 'Testing GlideScopedEvaluator';  
	 * now_GR.test_script = "gs.getUser().getName() + ' says ' + greeting; "; 
	 * now_GR.insert(); 
	 *  
	 * // setup variables to be used by the script
	 * var vars = {'greeting' : 'hello'};
	 *  
	 * //Evaluate the script from the field
	 * var evaluator = new GlideScopedEvaluator(); 
	 * gr = new GlideRecord('x_app_table'); 
	 * now_GR.addQuery('short_description','Testing GlideScopedEvaluator'); 
	 * now_GR.query(); 
	 * if (now_GR.next()) { 
	 *     gs.info(evaluator.evaluateScript(gr, 'test_script', vars));
	 * }
	 * 
	 * @param grObj The GlideRecord containing a script expression.
	 * @param scriptField (Optional) The name of the field containing the script expression.
	 * @param variables (Optional) A map of variables with name-value pairs. These variables are available to the script during execution of this method.
	 * 
	 * @returns Object The result of the script execution.
	 * 
	 */
	evaluateScript(grObj: GlideRecord,scriptField: string,variables: Object) : Object
	/**
	 * @description Puts a variable into the GlideScopedEvaluator object. These variables are available to the script that this GlideScopedEvaluator object runs.
	 * @example
	 * //
	 * /setting up a record that contains the script to be executed.
	 * gr = new GlideRecord('x_app_table'); 
	 * now_GR.short_description = 'Calculate Addition';  
	 * now_GR.calculate = "result = x + y"; 
	 * now_GR.insert(); 
	 *  
	 * var evaluator = new GlideScopedEvaluator();
	 * evaluator.putVariable('x', 100);
	 * evaluator.putVariable('y', 200);
	 * evaluator.putVariable('result', null);
	 *  
	 * // Now retrieve the result 
	 * gr = new GlideRecord('x_app_table'); 
	 * now_GR.addQuery('short_description','Calculate Addition'); 
	 * now_GR.query(); 
	 * if (now_GR.next()) { 
	 *     evaluator.evaluateScript(gr, 'calculate', null);
	 *     gs.info(evaluator.getVariable('result'));
	 * }
	 * 
	 * @param name The name of the variable.
	 * @param value The value of the variable.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	putVariable(name: string,value: Object) : void
	/**
	 * @description Returns a variable from a GlideScopedEvaluator object.
	 * @example
	 * //
	 * //setting up a record that contains the script to be executed.
	 * gr = new GlideRecord('x_app_table'); 
	 * now_GR.short_description = 'Calculate Addition';  
	 * now_GR.calculate = "result = x + y"; 
	 * now_GR.insert(); 
	 *  
	 * var evaluator = new GlideScopedEvaluator();
	 * evaluator.putVariable('x', 100);
	 * evaluator.putVariable('y', 200);
	 * evaluator.putVariable('result', null);
	 *  
	 * // Now retrieve the result 
	 * gr = new GlideRecord('x_app_table'); 
	 * now_GR.addQuery('short_description','Calculate Addition'); 
	 * now_GR.query(); 
	 * if (now_GR.next()) { 
	 *     evaluator.evaluateScript(gr, 'calculate', null);
	 *     gs.info(evaluator.getVariable('result'));
	 * }
	 * 
	 * @param name The name of the variable.
	 * 
	 * @returns Object The value of the specified variable.
	 * 
	 */
	getVariable(name: string) : Object
	}
/**
	 * @description A GlideScriptableInputStream object cannot be instantiated directly, but is used as an opaque object which is used to connect an input stream from GlideSysAttachment.getContentStream() with other streaming APIs, such as GlideTextReader, GlideDigest, and XMLDocument2.
	 * See the scoped GlideSysAttachment API for methods that return a GlideScriptableInputStream object. The scoped GlideTextReader constructor requires a GlideScriptableInputStream object as an input parameter.
	 * 
	 */
	declare class GlideScriptableInputStream {
	
	}
/**
	 * @description ServiceNow processors are equivalent to Java servlets.
	 * Processors provide a customizable URL endpoint that can execute arbitrary server-side JavaScript code and produce output such as TEXT, JSON, or HTML. The ScopedGlideScriptedProcessor APIs are used in processor scripts to access the the processor (servlet) capabilities. There are no constructors for the ScopedGlideScriptedProcessor APIs. The methods are called using the global variable g\_processor.  	
 *   	
 * A useful global variable, g\_target, is available in processor scripts. It contains the table name extracted from the URL.  	
 *   	
 * The URL to a processor has the format: https://<instance name.servicenow.com>/<path endpoint>.do?<parameter endpoint>=<value> where the path endpoint and parameter endpoint are defined on the processor form.
	 * 
	 */
	declare class GlideScriptedProcessor {
	/**
	 * @description Redirects to the specified URL.
	 * @example
	 * //
	 * //Do whatever processing you need and redirect to the homepage
	 * g_processor.redirect("/navpage.do")
	 * 
	 * @param url Destination URL
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	redirect(url: string) : void
	/**
	 * @description Writes the specified string to the current URL.
	 * @example
	 * //
	 * var name = g_request.getParameter("name");
	 * g_processor.writeOutput("Hello " + name);
	 * 
	 * @param s The string to write.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	writeOutput(s: string) : void
	/**
	 * @description Writes the specified string to the current URL in the specified character-encoding.
	 * @example
	 * //
	 * var name = g_request.getParameter("name");
	 * g_processor.writeOutput("text/plain", "Hello " + name);
	 * 
	 * @param contentType Sets the content type of the response sent to the client, if the response has not been committed, and may include a character-encoding specification.
	 * @param s The string to write.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	writeOutput(contentType: string,s: string) : void
	/**
	 * @description Encodes an object as a JSON string and writes it to the current URL.
	 * @example
	 * //
	 * var map = {"key1":"value1","key2":"value2"};
	 * g_processor.writeJSON(map);
	 * 
	 * @param o The object to encode to a JSON string.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	writeJSON(o: Object) : void
	}
/**
	 * @description The scoped GlideSecureRandomUtil API provides methods for generating integers, long values, and strings.
	 * There is no constructor for this class. Methods are accessed through the static object GlideSecureRandomUtil. The GlideSecureRandomUtil class is available in both global and scoped applications.
	 * 
	 */
	declare class GlideSecureRandomUtil {
	/**
	 * @description Generates a pseudo-random integer.
	 * @example
	 * //
	 * gs.info(GlideSecureRandomUtil.getSecureRandomInt());
	 * 
	 * 
	 * @returns number The pseudo-randomly generated integer.
	 * 
	 */
	getSecureRandomInt() : number
	/**
	 * @description Generates a pseudo-random integer between 0 (inclusive) and the bound (exclusive) value that you pass into the method.
	 * @example
	 * //
	 * gs.info(GlideSecureRandomUtil.getSecureRandomIntBound(100));
	 * 
	 * @param bound The bound value.
	 * 
	 * @returns number The pseudo-randomly generated integer.
	 * 
	 */
	getSecureRandomIntBound(bound: number) : number
	/**
	 * @description Generates pseudo-random long value.
	 * @example
	 * //
	 * gs.info(GlideSecureRandomUtil.getSecureRandomLong());
	 * 
	 * 
	 * @returns number The pseudo-randomly generated 64-bit integer.
	 * 
	 */
	getSecureRandomLong() : number
	/**
	 * @description Generates a random alpha-numeric String with the specified length.
	 * @example
	 * //
	 * gs.info(GlideSecureRandomUtil.getSecureRandomString(12));
	 * 
	 * @param length The length of the string in number of characters.
	 * 
	 * @returns string The randomly generated string.
	 * 
	 */
	getSecureRandomString(length: number) : string
	}
/**
	 * @description Provides methods to work with URLs.
	 * Access these methods using the static object GlideSecurityUtils. This class is available in scoped and global scripts.
	 * 
	 */
	declare class GlideSecurityUtilsScopedGlobal {
	/**
	 * @description Removes suspicious encoding to prevent reflected or DOM based cross site scripting.
	 * @example
	 * //
	 * myurl='javascript%3Aalert(1)';
	 * var clean=GlideSecurityUtils.cleanURL(myurl);
	 * gs.info(clean);
	 * 
	 * @param url The URL to be checked.
	 * 
	 * @returns string The URL stripped of problem elements.
	 * 
	 */
	cleanURL(url: string) : string
	/**
	 * @description Removes the domain address from the URL, which leaves the page name and parameters.
	 * @example
	 * //
	 * myurl='http://evildomain.com/test.do';
	 * relativeURL=GlideSecurityUtils.enforceRelativeURL(myurl);
	 * gs.info(relativeURL);
	 * 
	 * @param url The URL to be turned into a relative URL.
	 * 
	 * @returns string A relative URL.
	 * 
	 */
	enforceRelativeURL(url: string) : string
	/**
	 * @description Add escape characters to a script.
	 * Adding escape characters to a script helps prevent cross-site scripting.
	 * 
	 * @example
	 * //
	 * theScript="&lt;script&gt; alert(1)&lt;/script&gt;";
	 * var escapedScript=GlideSecurityUtils.escapeScript(theScript);
	 * gs.info(escapedScript);
	 * 
	 * @param script The script to have escape characters added.
	 * 
	 * @returns string The script with escape characters added.
	 * 
	 */
	escapeScript(script: string) : string
	/**
	 * @description Check the specified URL against the system defined white list.
	 * @example
	 * //
	 * myURL="http://evil.com/badscript.do";
	 * isWhitelisted=GlideSecurityUtils.isURLWhiteListed(myURL);
	 * gs.info(isWhitelisted);
	 * 
	 * @param url The URL to be checked against the URL white list.
	 * 
	 * @returns boolean Returns true if the specified URL is in the white list.
	 * 
	 */
	isURLWhiteListed(url: string) : boolean
	}
/**
	 * @description The GlideServletRequest API is used in processor scripts.
	 * ServiceNow processors are equivalent to Java servlets. Processors provide a customizable URL endpoint that can execute arbitrary server-side JavaScript code and produce output such as TEXT, JSON, or HTML. The GlideServletRequest API is used in processor scripts to access the [HttpServletRequest](http://docs.oracle.com/javaee/1.4/api/javax/servlet/http/HttpServletRequest.html) object. The GlideServletRequest object provides a subset of the HttpServletRequest APIs. The methods are called using the global variable g\_request.  	
 *   	
 * A useful global variable, g\_target, is available in processor scripts. It contains the table name extracted from the URL.  	
 *   	
 * The URL to a processor has the format: https://<instance name.servicenow.com>/<path endpoint>.do?<parameter endpoint>=<value> where the path endpoint and parameter endpoint are defined on the processor form.
	 * 
	 */
	declare class GlideServletRequest {
	/**
	 * @description Returns the MIME type of the body of the request.
	 * @example
	 * //
	 * var contentType = g_request.getContentType();
	 * 
	 * @returns string The content type, returns null if the content type is not known.
	 * 
	 */
	getContentType() : string
	/**
	 * @description Returns the header value.
	 * @example
	 * //
	 * var headerValue = g_request.getHeader("host");
	 * 
	 * @param name The name of the header to be retrieved.
	 * 
	 * @returns string The header.
	 * 
	 */
	getHeader(name: string) : string
	/**
	 * @description Returns the header values.
	 * @example
	 * //
	 * var headerValue = g_request.getHeaders("host");
	 * 
	 * @param name Names of the headers to be retrieved.
	 * 
	 * @returns string The header values.
	 * 
	 */
	getHeaders(name: string) : string
	/**
	 * @description Returns a comma-separated list of header names.
	 * @example
	 * //
	 * var headerList = g_request.getHeaderNames();
	 * 
	 * @returns string A comma-separated list of header names.
	 * 
	 */
	getHeaderNames() : string
	/**
	 * @description Returns the value of the parameter contained in the request URL.
	 * @example
	 * //
	 * var name = g_request.getParameter("x_snc_custom_x_snc_name");
	 * 
	 * @param name The name of the parameter to be retrieved. This can be the parameter endpoint from the processor form.
	 * 
	 * @returns Strings The parameter value. Returns null if the parameter is not found.
	 * 
	 */
	getParameter(name: string) : Strings
	/**
	 * @description Returns an enumeration list of URL parameters that were used in the request URI.
	 * @example
	 * //
	 * var paramList = g_request.getParameterNames();
	 * 
	 * @returns Enumeration Java enumerator object list of URL parameters used in the HTTP request URI.
	 * 
	 */
	getParameterNames() : Enumeration
	/**
	 * @description Returns the query string from the request.
	 * @example
	 * //The code snippet is:
	 * var daString = g_request.getQueryString();
	 * g_processor.writeOutput("The query string is: " + daString);
	 * 
	 * @returns string The query string.
	 * 
	 */
	getQueryString() : string
	}
/**
	 * @description The ScopedGlideServletResponse API is used in processor scripts.
	 * ServiceNow processors are equivalent to Java servlets. Processors provide a customizable URL endpoint that can execute arbitrary server-side JavaScript code and produce output such as TEXT, JSON, or HTML. The ScopedGlideServletResponse API is used in processor scripts to access the [HttpServletResponse](http://docs.oracle.com/javaee/1.4/api/javax/servlet/http/HttpServletResponse.html) object. The ScopedGlideServletResponse object provides a subset of the HttpServletResponse APIs. The methods are called using the global variable g\_response.  	
 *   	
 * A useful global variable, g\_target, is available in processor scripts. It contains the table name extracted from the URL.  	
 *   	
 * The URL to a processor has the format: https://<instance name.servicenow.com>/<path endpoint>.do?<parameter endpoint>=<value> where the path endpoint and parameter endpoint are defined on the processor form.
	 * 
	 */
	declare class GlideServletResponse {
	/**
	 * @description Sends a temporary redirect to the client.
	 * @param location The URL to receive the response.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	sendRedirect(location: string) : void
	/**
	 * @description Sets the MIME type of the response
	 * @example
	 * //
	 * g_response.setContentType('text/html;charset=UTF-8');
	 * 
	 * @param type The MIME type.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setContentType(type: string) : void
	/**
	 * @description Sets the status code for the response.
	 * @example
	 * //
	 * // set the status to okay
	 * g_response.setStatus(200);
	 * 
	 * @param status The status to be set.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setStatus(status: number) : void
	/**
	 * @description Sets a response header to the specified value.
	 * @example
	 * //
	 * g_response.setHeader("host", "instance.service-now.com");
	 * 
	 * @param key Specifies the header.
	 * @param value The value to be assigned to the header. If the header exists, it is overwritten.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setHeader(key: string,value: string) : void
	}
/**
	 * @description The scoped GlideSession API provides a way to find information about the current session.
	 * There are no constructors for creating an instance of a scoped GlideSession object. Instead, use the getSession() method of the scoped GlideSystem API.
	 * 
	 */
	declare class GlideSession {
	/**
	 * @description Retrieves a session client value previously set with putClientData().
	 * Use this method to retrieve data values that were set using the putClientData() method.
	 * 
	 * @example
	 * //
	 * var session = gs.getSession();
	 * session.putClientData('test1', 'Harry');
	 * var clientData = session.getClientData('test1');
	 * gs.info(clientData);
	 * 
	 * @param paramName Name of the client data to retrieve.
	 * 
	 * @returns string The client data as a string.
	 * 
	 */
	getClientData(paramName: string) : string
	/**
	 * @description Sets a session client value that can be retrieved with getClientData(). This method is used in a server side script that runs when a form is created.
	 * @example
	 * //
	 * var session = gs.getSession();
	 * session.putClientData('test1', 'Harry');
	 * var clientData = session.getClientData('test1');
	 * gs.info(clientData);
	 * 
	 * @param paramName Name of the client data to set.
	 * @param paramValue Value of the client data.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	putClientData(paramName: string,paramValue: string) : void
	/**
	 * @description Returns the client IP address.
	 * @example
	 * //
	 * var session = gs.getSession();
	 * var addr = session.getClientIP();
	 * gs.info(addr);
	 * 
	 * @returns string The IP address.
	 * 
	 */
	getClientIP() : string
	/**
	 * @description Returns the application currently selected in the application picker.
	 * This method requires admin privileges.
	 * 
	 * @example
	 * //
	 * var session = gs.getSession();
	 * var appID = session.getCurrentApplicationId();
	 * gs.info(appID);
	 * 
	 * @returns string The currently selected application.
	 * 
	 */
	getCurrentApplicationId() : string
	/**
	 * @description Returns the session's language code.
	 * @example
	 * //
	 * var session = gs.getSession();
	 * var language = session.getLanguage();
	 * gs.info(language);
	 * 
	 * @returns string The session's language code.
	 * 
	 */
	getLanguage() : string
	/**
	 * @description Returns the session token.
	 * @example
	 * //
	 * var session = gs.getSession();
	 * var token = session.getSessionToken();
	 * gs.info(token);
	 * 
	 * @returns string The session token.
	 * 
	 */
	getSessionToken() : string
	/**
	 * @description Returns the name of the session's time zone.
	 * @example
	 * //
	 * var session = gs.getSession();
	 * var zoneName = session.getTimeZoneName();
	 * gs.info(zoneName);
	 * 
	 * @returns string The name of the session's time zone.
	 * 
	 */
	getTimeZoneName() : string
	/**
	 * @description Returns the URL on the stack. Returns null if the stack is empty.
	 * @example
	 * //
	 * var session = gs.getSession();
	 * var URL = session.getUrlOnStack();
	 * gs.info(URL);
	 * 
	 * @returns string The URL. Returns null if the stack is empty.
	 * 
	 */
	getUrlOnStack() : string
	/**
	 * @description Returns true if the user is impersonating another user.
	 * @example
	 * //
	 * var isImpersonator = gs.getSession().isImpersonating();
	 * gs.info(isImpersonator);
	 * 
	 * @returns boolean Returns true if the user is impersonating another user; otherwise, returns false.
	 * 
	 */
	isImpersonating() : boolean
	/**
	 * @description Returns true if the session is interactive.
	 * An interactive session is one that involves an end-user interacting with a user interface that then retrieves information from a server. An example of this type of session is when a user logs in using the log-in screen or uses a form to query a data store. A non-interactive session is one that only involves programmatic interaction with a server such as a SOAP request to retrieve data.
	 * 
	 * @example
	 * //
	 * var interActive = gs.getSession().isInteractive();
	 * gs.info(interActive);
	 * 
	 * @returns boolean True if the session is interactive.
	 * 
	 */
	isInteractive() : boolean
	/**
	 * @description Returns true if the user is logged in.
	 * @example
	 * //
	 * var session = gs.getSession();
	 * var loggedIn = session.isLoggedIn();
	 * gs.info(loggedIn);
	 * 
	 * @returns boolean True if the user is logged in.
	 * 
	 */
	isLoggedIn() : boolean
	}
/**
	 * @description Interact with data and perform record operations in Service Portal widgets.
	 * You access GlideSPScriptable methods by using the global $sp object.
	 * 
	 */
	declare class GlideSPScriptable {
	/**
	 * @description Returns true if the user can read the specified GlideRecord.
	 * If the record type is kb\_knowledge, sc\_cat\_item, or sc\_category, the method checks if the user can view the item.
	 * 
	 * @example
	 * //Server script
	 * //Server script
	 * data.items = [];
	 * data.userName = gs.getUserDisplayName();
	 * var now_GR = new GlideRecord("sc_cat_item");
	 * now_GR.query();
	 * while(now_GR.next() &amp;&amp; data.items.length &lt; 10) {
	 *     if ($sp.canReadRecord(now_GR)) {
	 *         data.items.push(now_GR.getDisplayValue("name"));
	 *     }
	 * }
	 * 
	 * //HTML template
	 * &lt;div class="panel panel-default"&gt;
	 *     &lt;div class="panel-heading"&gt;Hi, {{c.data.userName}}!&lt;/div&gt;
	 *     &lt;div class="panel-body"&gt;
	 *         Here are some things you can order:
	 *         &lt;ul&gt;&lt;li ng-repeat="item in c.data.items"&gt;{{item}}&lt;/li&gt;&lt;/ul&gt;
	 *     &lt;/div&gt;
	 * &lt;/div&gt;
	 * 
	 * @param gr The GlideRecord to check.
	 * 
	 * @returns boolean True if the record is valid and readable.
	 * 
	 */
	canReadRecord(gr: GlideRecord) : boolean
	/**
	 * @description Returns true if the user can read the specified GlideRecord.
	 * If the record type is kb\_knowledge, sc\_cat\_item, or sc\_category, the method checks if the user can view the item.
	 * 
	 * @param table Name of the table to query.
	 * @param sysId Sys\_id of the record to query.
	 * 
	 * @returns boolean True if the record is valid and readable.
	 * 
	 */
	canReadRecord(table: string,sysId: string) : boolean
	/**
	 * @description Returns true if the currently logged in user has permission to view the specified page.
	 * The system determines permission using roles and user criteria. For more information, see [Configure page security by role](https://docs.servicenow.com/bundle/paris-servicenow-platform/page/build/service-portal/task/configure-page-security.html) and [User criteria for Service Portal](https://docs.servicenow.com/bundle/paris-servicenow-platform/page/build/service-portal/concept/user-criteria.html).
	 * 
	 * @example
	 * //This example adds a condition to the Knowledge menu item in the SP Header Menu to only show the menu item to users who have permission to view the kb\_view2 page.
	 * GlideSPScriptable.canSeePage("kb_view2")
	 * 
	 * @param pageID Page ID from the Pages \[sp\_page\] table.
	 * 
	 * @returns boolean Flag that indicates whether the currently logged in user has permissions to view the specified page. Values include:  *   true: User can view the page. *   false: Either the user cannot view the page, the given pageID is not valid, or the user is not logged in.
	 * 
	 */
	canSeePage(pageID: string) : boolean
	/**
	 * @description Returns a model and view model for a sc\_cat\_item or sc\_cat\_item\_guide.
	 * This method is deprecated. Use the getCatalogItem(String sysId, Boolean isOrdering) method instead. This method calls the getCatalogItem(String sysId, Boolean isOrdering) method with the isOrdering parameter set to false, which means that write roles security checking is done.
	 * 
	 * This method is a quick way to get the data necessary to render and order a catalog item using <sp-model />. If you just need to get a catalog item to show its picture or name, use GlideRecord to query the sc\_cat\_item table.
	 * 
	 * @example
	 * //
	 * // Server script
	 * (function() {
	 *     var sys_id = $sp.getParameter("sys_id")
	 *     data.catItem = $sp.getCatalogItem(sys_id);
	 * })();
	 * 
	 * // Client script
	 * function($http, spUtil) {
	 *     var c = this;
	 *     var submitting = false;
	 *     c.getIt = function() {
	 *         if (submitting) return;
	 *         $http.post(spUtil.getURL('sc_cat_item'), c.data.catItem).success(function(response) {
	 *             if (response.answer) {
	 *                 c.req = response.answer;
	 *                 c.req.page = c.req.table == 'sc_request' ? 'sc_request' : 'ticket';
	 *             }
	 *         });
	 *     }
	 * }
	 * 
	 * //SCSS
	 * .img-bg {
	 *     padding: 5px;
	 *     background-color: $brand-primary;
	 * }
	 * 
	 * .img-responsive {
	 *     margin: 0 auto;
	 * }
	 * 
	 * .cat-icon {
	 *     display: block;
	 *     margin: -40px auto 0;
	 * }
	 * 
	 * // HTML template
	 * &lt;div class="col-sm-4"&gt;
	 *   &lt;div class="panel panel-default"&gt;
	 *     &lt;div class="img-bg"&gt;
	 *       &lt;img ng-src="{{::data.catItem.picture}}" class="img-responsive" /&gt;
	 *     &lt;/div&gt;
	 *     &lt;span class="cat-icon fa fa-stack fa-lg fa-3x hidden-xs"&gt;
	 *       &lt;i class="fa fa-circle fa-stack-2x text-success"&gt;&lt;/i&gt;
	 *       &lt;i class="fa fa-desktop fa-stack-1x fa-inverse"&gt;&lt;/i&gt;
	 *     &lt;/span&gt;
	 *     &lt;div class="panel-body"&gt;
	 *       &lt;p class="lead text-center"&gt;{{::data.catItem.name}}&lt;/p&gt;
	 *       &lt;ul class="list-unstyled"&gt;
	 *         &lt;li class="text-center" ng-if="::data.catItem.price"&gt;${Price}: {{::data.catItem.price}}&lt;/li&gt;
	 *       &lt;/ul&gt;
	 *       &lt;sp-model form-model="::data.catItem" mandatory="mandatory"&gt;&lt;/sp-model&gt;
	 *       &lt;p ng-if="c.req" class="text-center text-success"&gt;
	 *         ${Request created!} &lt;a href="?id={{c.req.page}}&amp;table={{c.req.table}}&amp;sys_id={{c.req.sys_id}}"&gt;{{c.req.number}}&lt;/a&gt;
	 *       &lt;/p&gt;
	 *       &lt;button ng-if="!c.req" class="btn btn-default btn-block" ng-click="c.getIt()"&gt;${Get it}&lt;/button&gt;
	 *     &lt;/div&gt;
	 *   &lt;/div&gt;
	 * &lt;/div&gt;
	 * 
	 * @param sysId The sys\_id of the catalog item (sc\_cat\_item) or order guide (sc\_cat\_item\_guide).
	 * 
	 * @returns Object An object containing the catalog item variable model, view, sections, pricing, and client scripts.
	 * 
	 */
	getCatalogItem(sysId: string) : Object
	/**
	 * @description Returns a model and view model for a sc\_cat\_item or sc\_cat\_item\_guide.
	 * @param sysId The sys\_id of the catalog item (sc\_cat\_item) or order guide (sc\_cat\_item\_guide).
	 * @param isOrdering When true, uses create roles security check. When false, uses write roles security check.  When users are ordering an item or have it in their cart, check using the create roles.  If users are not ordering, for example, somebody is looking at a requested item to see the variables associated with that item, then check using the write roles.
	 * 
	 * @returns Object An object containing the catalog item variable model, view, sections, pricing, and client scripts.
	 * 
	 */
	getCatalogItem(sysId: string,isOrdering: boolean) : Object
	/**
	 * @description Returns the display value of the specified field (if it exists and has a value) from either the widget's sp\_instance or the sp\_portal record.
	 * @example
	 * //
	 * //Server script
	 * (function() {
	 *     data.title = $sp.getDisplayValue("title");
	 *     data.catalog = $sp.getDisplayValue("sc_catalog");
	 * })();
	 * 
	 * //HTML template
	 * &lt;div&gt;
	 *     &lt;h1&gt;sp_instance.title: {{::data.title}}&lt;/h1&gt;
	 *     &lt;h1&gt;sp_portal.sc_catalog: {{::data.catalog}}&lt;/h1&gt;
	 * &lt;/div&gt;
	 * 
	 * @param fieldName Name of the field
	 * 
	 * @returns string The display value from either the sp\_instance or sp\_portal record.
	 * 
	 */
	getDisplayValue(fieldName: string) : string
	/**
	 * @description Returns information about the specified field in the specified GlideRecord.
	 * @param gr The GlideRecord to check
	 * @param fieldName The field to find information for
	 * 
	 * @returns Object An object containing the field's label, value, displayValue, and type. Returns null if the GlideRecord of field name are not valid, or if the field is not readable.
	 * 
	 */
	getField(gr: GlideRecord,fieldName: string) : Object
	/**
	 * @description Checks the specified list of field names, and returns an array of valid field names.
	 * @param gr The GlideRecord to check
	 * @param field Names A comma separated list of field names.
	 * 
	 * @returns Array An array of valid fields.
	 * 
	 */
	getFields(gr: GlideRecord,fieldNames: string) : Array
	/**
	 * @description Returns KB articles in the specified category and its subcategories.
	 * To avoid performance issues, do not use this method to return articles in large categories or articles with inline images. Instead, use getKBArticleSummaries().
	 * 
	 * @example
	 * //
	 * //Server script 
	 * (function() {
	 *     data.kbs = $sp.getKBCategoryArticles("0ac1bf8bff0221009b20ffffffffffec", 5);
	 * })();
	 * 
	 * //HTML template
	 * &lt;div&gt;
	 * articles: {{::data.kbs}}
	 * &lt;/div&gt;
	 * 
	 * 
	 * @param sys_id Sys\_id of the KB article category.
	 * @param limit Maximum number of KB articles returned.
	 * 
	 * @returns Array The articles within the category and its subcategories with:  *   A workflow\_state of published. *   A valid\_to date greater than or equal to the current date.
	 * 
	 */
	getKBCategoryArticles(sys_id: string,limit: number) : Array
	/**
	 * @description Returns Knowledge Base article summaries in the specified category and its subcategories.
	 * @example
	 * //
	 * //Server script 
	 * (function() {
	 *     data.summary = $sp.getKBCategoryArticleSummaries("0ac1bf8bff0221009b20ffffffffffec", 5, 200);
	 * })();
	 * 
	 * //HTML template
	 * &lt;div&gt;
	 * articles: {{::data.summary}}
	 * &lt;/div&gt;
	 * 
	 * 
	 * @param sys_id Sys\_id of the KB article category.
	 * @param limit Maximum number of KB articles returned.
	 * @param maxChars Maximum number of characters to return from the article text. For full article text, set the value to \-1.
	 * 
	 * @returns Array The articles within the category and its subcategories with:  *   A workflow\_state of published. *   A valid\_to date greater than or equal to the current date.
	 * 
	 */
	getKBCategoryArticleSummaries(sys_id: string,limit: number,maxChars: number) : Array
	/**
	 * @description Returns the number of articles in the defined Knowledge Base.
	 * @example
	 * //
	 * //Server script 
	 * (function() {
	 *     data.count = $sp.getKBCount("a7e8a78bff0221009b20ffffffffff17");
	 * })();
	 * 
	 * //HTML template
	 * &lt;div&gt;
	 * articles: {{::data.count}}
	 * &lt;/div&gt;
	 * 
	 * 
	 * @param sys_id Sys\_id of a Knowledge Base record.
	 * 
	 * @returns number Number of knowledge articles in the defined Knowledge Base with:  *   A workflow\_state of published. *   A valid\_to date greater than or equal to the current date.
	 * 
	 */
	getKBCount(sys_id: string) : number
	/**
	 * @description Checks the specified list of field names and returns an object of valid field names.
	 * @param gr The GlideRecord to check
	 * @param field Names A comma separated list of field names.
	 * 
	 * @returns Object An object containing valid field names.
	 * 
	 */
	getFieldsObject(gr: GlideRecord,fieldNames: string) : Object
	/**
	 * @description Return the form.
	 * @param tableName The name of the table
	 * @param sysId The form's sys\_id
	 * 
	 * @returns Object The form
	 * 
	 */
	getForm(tableName: string,sysId: string) : Object
	/**
	 * @description Returns a list of the specified table's columns in the specified view.
	 * @param tableName Name of the table
	 * @param view The view by which to filter the columns
	 * 
	 * @returns Object An object containing the column names.
	 * 
	 */
	getListColumns(tableName: string,view: string) : Object
	/**
	 * @description Returns an array of menu items for the specified instance.
	 * @param sysId sysId of the instance
	 * 
	 * @returns Array Menu items for the specified instance
	 * 
	 */
	getMenuItems(sysId: string) : Array
	/**
	 * @description Returns the (?id=) portion of the URL based on the sp\_menu type.
	 * @param page The page
	 * 
	 * @returns string The href portion of the URL.
	 * 
	 */
	getMenuHREF(page: GlideRecord) : string
	/**
	 * @description Returns the value of the specified parameter.
	 * @param name The name of the key from the query string or post body.
	 * 
	 * @returns Object Returns the specified parameter as an object. Returns null if there is no request, JSON request, or widget.
	 * 
	 */
	getParameter(name: string) : Object
	/**
	 * @description Returns the portal record from the Service Portals \[sp\_portal\] table.
	 * @example
	 * //
	 * //Server script
	 * (function() {
	 *     var portalGr = $sp.getPortalRecord();
	 *     data.logo = portalGr.getDisplayValue("logo");
	 *     data.homepage = portalGr.getDisplayValue("homepage.id");
	 * })();
	 * 
	 * //HTML template
	 * &lt;div&gt;
	 *     &lt;img ng-src="{{::c.data.logo}}" /&gt;
	 *     &lt;a href="?id={{::c.data.homepage}}"&gt;Click here to go home&lt;/a&gt;
	 * &lt;/div&gt;
	 * 
	 * @returns GlideRecord The portal record for the current portal from the Service Portals \[sp\_portal\] table.
	 * 
	 */
	getPortalRecord() : GlideRecord
	/**
	 * @description If parameters are provided, returns the GlideRecord identified by the provided table and Sys ID. If no parameters are provided, returns the record identified by the current URL.
	 * @example
	 * //
	 * //Server script 
	 * (function(){ 
	 * var now_GR = $sp.getRecord(); 
	 * data.tableLabel = now_GR.getLabel(); 
	 * })(); 
	 * 
	 * //HTML template 
	 * &lt;div class="panel-heading"&gt; 
	 * &lt;h4 class="panel-title"&gt;${{{data.tableLabel}} details}&lt;/h4&gt; 
	 * &lt;/div&gt;
	 * 
	 * @param table Optional. The table of the record to return. If no parameters are included, returns the table and Sys ID identified by the current URL.
	 * @param sys_id Optional. The Sys ID of the record to return. If no parameters are included, returns the record identified by the current URL.
	 * 
	 * @returns GlideRecord If parameters are provided, returns the record identified by the provided table and Sys ID.  If no parameters are provided, returns the record identified by the current URL.  Returns null if the widget is embedded by another widget, or if the record for the provided parameters is not found.
	 * 
	 */
	getRecord(table: string,sys_id: string) : GlideRecord
	/**
	 * @description Copies display values for the specified fields into the data parameter.
	 * @param data The display values for the specified fields are copied to this object.
	 * @param from The GlideRecord to process.
	 * @param names A comma-separated list of field names.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	getRecordDisplayValues(data: Object,from: GlideRecord,names: string) : void
	/**
	 * @description For the specified fields, copies the element's name, display value, and value into the data parameter.
	 * @param data The element's name, display value, and value for the specified fields are copied to this object.
	 * @param from The GlideRecord to process.
	 * @param names A comma-separated list of field names.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	getRecordElements(data: Object,from: GlideRecord,names: string) : void
	/**
	 * @description Copies values for the specified field names from the GlideRecord into the data parameter.
	 * @param data The value for the specified fields are copied to this object.
	 * @param from The GlideRecord to process.
	 * @param names A comma-separated list of field names.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	getRecordValues(data: Object,from: GlideRecord,names: string) : void
	/**
	 * @description Returns Service Catalog variables associated with a record in String format.
	 * @example
	 * //
	 * //Server script 
	 * (function() {
	 * var itemsGR = new GlideRecord("sc_req_item");
	 * itemsGR.get('585d1bc44f4f13008a959a211310c77d');
	 * 	
	 * data.scVars = $sp.getRecordVariables(itemsGR);
	 * 
	 * })();
	 * 
	 * //HTML template
	 * &lt;div&gt;
	 * Requested item variables: {{::data.scVars}}
	 * &lt;/div&gt;
	 * 
	 * @param gr The record to retrieve Service Catalog variables for. Must be a record with Service Catalog variables defined, such as a requested item \[sc\_req\_item\] record or an incident submitted through a record producer.
	 * @param includeNilResponses Optional. If true, the API includes variables with no user-defined value.
	 * 
	 * @returns string Service Catalog variables associated with the record.
	 * 
	 */
	getRecordVariables(gr: GlideRecord,includeNilResponses: boolean) : string
	/**
	 * @description Returns an array of Service Catalog variables associated with a record.
	 * @example
	 * //
	 * //Server script 
	 * (function() {
	 * var itemsGR = new GlideRecord("sc_req_item");
	 * itemsGR.get('585d1bc44f4f13008a959a211310c77d');
	 * 	
	 * data.scVars = $sp.getRecordVariablesArray(itemsGR);
	 * 
	 * })();
	 * 
	 * //HTML template
	 * &lt;div&gt;
	 * Requested item variables: {{::data.scVars}}
	 * &lt;/div&gt;
	 * 
	 * @param gr The record to retrieve Service Catalog variables for. Must be a record with Service Catalog variables defined, such as a requested item \[sc\_req\_item\] record or an incident submitted through a record producer.
	 * @param includeNilResponses Optional. If true, the API includes variables with no user-defined value.
	 * 
	 * @returns Object Array of Service Catalog variables associated with the record.
	 * 
	 */
	getRecordVariablesArray(gr: GlideRecord,includeNilResponses: boolean) : Object
	/**
	 * @description Gets the activity stream for the specified record. This method works on tables that extend the task table.
	 * @param table The table name
	 * @param sysID The sys\_id of the record
	 * 
	 * @returns Object If a table extending the task table is specified, contains the display\_value, sys\_id, short\_description,number, entries, user\_sys\_id, user\_full\_name, user\_login, label, table, and journal\_fields properties; otherwise contains the table and sys\_id properties.  Note: The user\_login property contains the User ID of the current user. The user\_sys\_id and iser\_full\_name properties reference the creator of the queried record.
	 * 
	 */
	getStream(table: string,sysID: string) : Object
	/**
	 * @description Returns the user's initials.
	 * @returns string The user's initials
	 * 
	 */
	getUserInitials() : string
	/**
	 * @description Returns the named value of the JSON request, instance, or portal.
	 * @example
	 * //
	 * //Server script
	 * (function() {
	 *     data.title = $sp.getValue("title");
	 *     data.catalog = $sp.getValue("sc_catalog");
	 * })();
	 * 
	 * //HTML templage
	 * &lt;div&gt;
	 *     &lt;h1&gt;sp_instance.title: {{::data.title}}&lt;/h1&gt;
	 *     &lt;h1&gt;sp_portal.sc_catalog: {{::data.catalog}}&lt;/h1&gt;
	 * &lt;/div&gt;
	 * 
	 * @param name Name of the JSON request, instance, or portal.
	 * 
	 * @returns Object Value of the specified parameter. Null if the specified entity does not exist or has no such parameter.
	 * 
	 */
	getValue(name: string) : Object
	/**
	 * @description Copies values from the request or instance to the data parameter.
	 * @param data Receives the parameter values.
	 * @param names Comma-separated string of field names.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	getValues(data: Object,names: string) : void
	/**
	 * @description Returns an array of Service Catalog variables associated with the record in the URL.
	 * For example, if the URL includes the parameters id=form&table=sc\_req\_item&sys\_id=832e9620db4f330083766b984b9619cf, the API returns the variables associated with the given record in the Requested item \[sc\_req\_item\] table. Must be a record with Service Catalog variables defined, such as a requested item \[sc\_req\_item\] record or an incident submitted through a record producer.
	 * 
	 * @example
	 * //
	 * //Server script 
	 * (function() {	
	 * data.scVars = $sp.getVariablesArray();
	 * })();
	 * 
	 * //HTML template
	 * &lt;div
	 * Current record variables: {{::data.scVars}}
	 * &lt;/div&gt;
	 * 
	 * @param includeNilResponses Optional. If true, the API includes variables with no user-defined value.
	 * 
	 * @returns Object Array of variables associated with the table.
	 * 
	 */
	getVariablesArray(includeNilResponses: boolean) : Object
	/**
	 * @description Gets a widget by id or sys\_id, executes that widget's server script using the provided options, then returns the widget model.
	 * @example
	 * //
	 * //Server script
	 * data.myWidget = $sp.getWidget('widget_id', {p1: param1, p2: param2});
	 * 
	 * //HTML
	 * &lt;sp-widget widget="c.data.myWidget"&gt;&lt;/sp-widget&gt;
	 * 
	 * @param sysID The widget sys\_id or widget\_id
	 * @param options An object to pass to the widget's server script. Refer to this object as options in your server script.  Note: Any options passed into this function will only be available in the embedded widget's server script on the first execution of that script. Any subsequent calls into the server script from the embedded widget will not contain the object properties passed in.
	 * 
	 * @returns Object A widget model to be used with sp-widget.
	 * 
	 */
	getWidget(sysID: string,options: Object) : Object
	/**
	 * @description Transforms a URL requesting a list or form in the platform UI into the URL of the corresponding id=list or id=form Service Portal page.
	 * Use this method to perform tasks such as redirecting a user after login to the correct Service Portal page when they request a platform UI form or list URL. Note that the id=list and id=form page targets are not customizable.
	 * 
	 * Note: Table, sys\_id, and sysparm\_query values are preserved from the original URL; sysparm\_view is not.
	 * 
	 * @example
	 * //List example
	 * GlideSPScriptable().mapUrlToSPUrl("http://demo.service-now.com/task_list.do?sysparm_userpref_module=1523b8d4c611227b00be8216ec331b9a&amp;sysparm_query=assigned_to=javascript:getMyAssignments()&amp;sysparm_clear_stack=true"))
	 * 
	 * @example
	 * //Form example
	 * GlideSPScriptable().mapUrlToSPUrl("incident.do?sys_id=12bc12bc12bc12bc12bc12bc12bc12bc")
	 * 
	 * @param url Platform UI URL
	 * 
	 * @returns string Transformed Service Portal URL.  If the passed-in URL does not request a list or a form in the platform UI, a null value is returned.
	 * 
	 */
	mapUrlToSPUrl(url: string) : string
	}
/**
	 * @description Generates search analytics from custom ServiceNow search widgets.
	 * By default, the Search Events \[sys\_search\_event\] and Search Source Events \[sys\_search\_source\_event\] tables collect search data from base system search widgets. However, custom search widgets do not benefit from this feature. Use this API in the server script of custom search widgets (in scoped or global environments) to send search data to the suggestions and analytics tables. Generate relevant search suggestions for your users and monitor search analytics to understand what your users are searching for and whether they're finding what they need.  	
 *   	
 * This API collects the following search data:	
 * 	
 * *   Searched terms	
 * *   Rank of clicked items	
 * *   Filters used to refine search results	
 * *   Table names and record identifiers from the first page of search results	
 * *   Search results clicked, including browser and location	
 * 	
 *   	
 *   	
 * Search analytics and suggestions is a Now Platform feature. For more information, see [Search analytics and suggestions](https://docs.servicenow.com/bundle/newyork-platform-administration/page/administer/search-administration/concept/search-suggestions.html).
	 * 
	 */
	declare class GlideSPSearchAnalyticsScopedGlobal {
	/**
	 * @description Sends search data to the Search Events \[sys\_search\_event\] and Search Source Events \[sys\_search\_source\_event\] tables for search results, or to the Search Result Clicked \[sys\_search\_result\_clicked\] table when a user clicks a search result.
	 * @example
	 * //This example passes direct search data to the search analytics tables.
	 * var searchObject = new GlideSPSearchAnalytics();
	 * var payload = {  
	 *   'query':'how do i get a new computer',
	 *   'portal_id':'81b75d3147032100ba13a5554ee4902b',
	 *   'page_id':'87466b63c3223100c8b837659bba8feb',
	 *   'results_per_source':[  
	 *     {  
	 *       'source_id':'bf2c4c15b3a31300e64be12b86a8dcb7',
	 *       'number_of_results':2,
	 *     },{  
	 *       'source_id':'c96eb1686721220023c82e08f585efff',
	 *       'number_of_results':1
	 *     }
	 *   ],
	 *   'refinement':false,
	 *   'search_results': [
	 *     {
	 *       'record_id': 'KB Article 1',
	 *       'table_name': 'knowledge'
	 *     },{
	 *       'record_id': 'KB Article 2',
	 *       'table_name': 'knowledge'
	 *     },{
	 *       'record_id': 'Employee Help',
	 *       'table_name': 'userportal'
	 *     }
	 *   ]
	 * };
	 * var directSearchData = searchObject.publish(JSON.stringify(payload));
	 * 
	 * @example
	 * //This example dynamically collects direct search data from a custom search widget and passes it to the search analytics tables.
	 * //client script
	 * var payload = {
	 *   query: this.data.query,
	 *   portal_id: this.data.portalID,
	 *   page_id: this.data.pageID,
	 *   results_per_source: getSearchSources(),
	 *   refinement_occurred: false,
	 * };
	 * var payloadObject = {
	 *   action: "TestAction",
	 *   payload: payload,
	 * };
	 * c.server.get(payloadObject);
	 * 
	 * 
	 * @example
	 * //This example collects direct search-results-clicked data from a custom search widget and passes it to the search analytics \[sys\_search\_result\_clicked\] table.
	 * //client script
	 * function setUserLocationCoords(cb) {
	 *   var onSuccess = function (pos) {
	 *     return cb({
	 *       latitude: pos.coords.latitude,
	 *       longitude: pos.coords.longitude,
	 *     });
	 *   };
	 * 
	 *   var onError = function () {
	 *     return cb({
	 *       latitude: null,
	 *       longitude: null,
	 *     });
	 *   };
	 * 
	 *   return window.navigator.geolocation.getCurrentPosition(onSuccess, onError, {
	 *     enableHighAccuracy: true,
	 *   });
	 * }
	 * 
	 * function trackSearchResultClicked(resultClicked, rank) {
	 *   if (!rank || rank &lt; 1) return;
	 *   var c = $scope;
	 *   var query = _.get(c.data, "q");
	 *   var results = _.get(c.data, "results", []);
	 * 
	 *   var result = results.find(function (e) {
	 *     return e.primary.trim() === resultClicked.trim();
	 *   });
	 * 
	 *   var description = result.name != null ? result.name : result.primary;
	 *   var sourceTable = result.table != null ? result.table : null;
	 * 
	 *   var payloadObject = {
	 *     action: "TestAction",
	 *     payload: {
	 *       query: query,
	 *       portal_id: c.portal.sys_id,
	 *       page_id: $scope.page &amp;&amp; $scope.page.id,
	 *       results_per_source: getSearchSources(c),
	 *       refinement_occurred: false,
	 *       click_rank: rank,
	 *       browser_info: $window.navigator.userAgent,
	 *       location: {},
	 *       result_clicked_sys_id: result.sys_id,
	 *       label_description: description,
	 *       source_table: sourceTable,
	 *     },
	 *   };
	 * 
	 *   setUserLocationCoords(function (coords) {
	 *     payloadObject.payload.location.latitude = coords.latitude;
	 *     payloadObject.payload.location.longitude = coords.longitude;
	 * 
	 *     $window.spSearchAnalytics = {
	 *       query: query,
	 *       refinement_occurred: false,
	 *     };
	 *     c.server.get(payloadObject);
	 *   });
	 * }
	 * 
	 * // Event delegation for Updating click rank
	 * $(".panel").on("click", ".result-item a", function (e) {
	 *   var index = $(e.currentTarget).parent().parent().data("index");
	 *   var resultClicked = e.currentTarget.innerText;
	 *   trackSearchResultClicked(resultClicked, index + 1);
	 * });
	 * 
	 * @param payload JSON payload in String format containing the search data to send to the Search Events \[sys\_search\_event\] and Search Source Events \[sys\_search\_source\_event\] tables for search results, or the Search Result Clicked \[sys\_search\_result\_clicked\] table when a user clicks a search result. Structure the payload as key-value pairs according to the type of search data you would like to collect.  *   Collect data when the user searches for a term:     *   query: String. The query being searched.     *   portal\_id: String. Sys\_id of the portal record from the Service Portals \[sp\_portal\] table.     *   page\_id: String. Sys\_id of the page record from the Pages \[sp\_page\] table.     *   results\_per\_source: Array. Number of results returned from each search source.         *   source\_id: String. Sys\_id of the search source record from the Search Sources \[sp\_search\_source\] table.         *   number\_of\_results: Number. Number of results returned from the query for the specific search source.     *   search\_results: Array. Results returned in the first page of search results.         *   record\_id: String. Sys\_id of the search result record.         *   table\_name: String. Name of the table in which the search result record was found.     *   refinement\_occurred: Boolean. True if the user filtered the search results; otherwise false. *   Collect data when a user refines their search results:     *   query: String. The query being searched.     *   portal\_id: String. Sys\_id of the portal record from the Service Portals \[sp\_portal\] table.     *   page\_id: String. Sys\_id of the page record from the Pages \[sp\_page\] table.     *   refinement\_occurred: Boolean. True if the user filtered the search results; otherwise false. *   Collect the rank of the search result that the user selected.     *   query: String. The query being searched.     *   portal\_id: String. Sys\_id of the portal record from the Service Portals \[sp\_portal\] table.     *   click\_rank: Number. Rank of the item the user selected. For example, if the user clicked the third item in a list of search results, the value is 3. *   Collect information on the search result that the user clicks. Data logs to the Search Result Clicked \[sys\_search\_result\_clicked\] table.     *   query: String. The query being searched.     *   portal\_id: String. Sys\_id of the portal record from the Service Portals \[sp\_portal\] table.     *   page\_id: String. Sys\_id of the page record from the Pages \[sp\_page\] table.     *   results\_per\_source: Array. Number of results returned from each search source.         *   source\_id: String. Sys\_id of the search source record from the Search Sources \[sp\_search\_source\] table.         *   number\_of\_results: Number. Number of results returned from the query for the specific search source.     *   refinement\_occurred: Boolean. True if the user filtered the search results; otherwise false.     *   click\_rank: Number. Rank of the item the user selected. For example, if the user clicked the third item in a list of search results, the value is 3.     *   browser\_info: String. Logs browser name, version, and platform.     *   location: Float. Logs latitude and longitude coordinates of the user location.     *   result\_clicked\_sys\_id: String. Sys\_id of the result the user selected.     *   label\_description: String. Description of the result that the user selected.     *   source\_table: String. Name of the source table containing the selected result. *   Collect data when a user searches for a term and collect the rank of the search result that the user clicked:     *   query: String. The query being searched.     *   portal\_id: String. Sys\_id of the portal record from the Service Portals \[sp\_portal\] table.     *   page\_id: String. Sys\_id of the page record from the Pages \[sp\_page\] table.     *   results\_per\_source: Array. Number of results returned from each search source.         *   source\_id: String. Sys\_id of the search source record from the Search Sources \[sp\_search\_source\] table.         *   number\_of\_results: Number. Number of results returned from the query for the specific search source.     *   search\_results: Array. Summary of records returned in the first page of search results.         *   record\_id: String. Sys\_id of the search result record.         *   table\_name: String. Name of the table in which the search result record was found.     *   click\_rank: Number. Rank of the item the user selected. For example, if the user clicked the third item in a list of search results, the value is 3.
	 * 
	 * @returns None 
	 * 
	 */
	publish(payload: string) : None
	}
/**
	 * @description Provides string handling methods.
	 * Access these methods using the static object GlideStringUtil. This class is available in scoped and global scripts.
	 * 
	 */
	declare class GlideStringUtilScopedGlobal {
	/**
	 * @description Replaces periods with underscore characters.
	 * @example
	 * //
	 * var filename="../../../../../../etc/passwd";
	 * cleanFilename=GlideStringUtil.dotToUnderBar(filename);
	 * gs.info(cleanFilename);
	 * 
	 * @param sourceString The string to be processed.
	 * 
	 * @returns string The string with periods replaced with underscores.
	 * 
	 */
	dotToUnderBar(sourceString: string) : string
	/**
	 * @description Remove quotes from a string.
	 * @example
	 * //
	 * mystring="let's escape some quotes";
	 * escapeQuote=GlideStringUtil.escapeAllQuotes(mystring);
	 * gs.info(escapeQuote);
	 * 
	 * @param sourceString The string to be processed.
	 * 
	 * @returns string The string with quotes removed.
	 * 
	 */
	escapeAllQuotes(sourceString: string) : string
	/**
	 * @description Use for home pages to replace problem characters with escape characters.
	 * @example
	 * //
	 * mystring="&lt;test&gt; string \n to escape";
	 * escapedString=GlideStringUtil.escapeForHomePage(mystring);
	 * gs.info(escapedString);
	 * 
	 * @param sourceString The string to be processed.
	 * 
	 * @returns string A string with problem characters replaced with escape characters.
	 * 
	 */
	escapeForHomePage(sourceString: string) : string
	/**
	 * @description Use to replace illegal characters with their escape codes.
	 * Using this method removes illegal characters that might cause the UI to render improperly, or trigger a client side attack such as JavaScript or HTML injection.
	 * 
	 * @example
	 * //
	 * mydata='"&lt;&gt;&amp;';
	 * mydata=GlideStringUtil.escapeHTML(mydata);
	 * gs.info(mydata);
	 * 
	 * @param htmlString The string to be processed.
	 * 
	 * @returns string The string with illegal characters replaced with their escape codes.
	 * 
	 */
	escapeHTML(htmlString: string) : string
	/**
	 * @description Replaces non-printable characters with their printable notation.
	 * @example
	 * //
	 * mystring="test \x09 non \x00 printable \x07 chars";
	 * escapedString=GlideStringUtil.escapeNonPrintable(mystring);
	 * gs.info(escapedString);
	 * 
	 * @param sourceString The string to be processed.
	 * 
	 * @returns string The string with non-printable characters replaced with printable notation.
	 * 
	 */
	escapeNonPrintable(sourceString: string) : string
	/**
	 * @description Replaces query term separators "^" with their escape sequence "^^".
	 * @example
	 * //
	 * myquery="test^Test";
	 * escapedQuery=GlideStringUtil.escapeQueryTermSeparator(myquery);
	 * gs.info(escapedQuery);
	 * 
	 * @param sourceString The string to be processed.
	 * 
	 * @returns string A string with query term separators replaced with the escape characters.
	 * 
	 */
	escapeQueryTermSeparator(sourceString: string) : string
	/**
	 * @description Replace quotes with escape characters by adding a backslash before each quote.
	 * @example
	 * //
	 * mystring="let's try escapeTicks";
	 * escaped=GlideStringUtil.escapeTicks(mystring);
	 * gs.info(escaped); 
	 * 
	 * @param sourceString The string to be processed.
	 * 
	 * @returns string The string with backslashes added before quotes.
	 * 
	 */
	escapeTicks(sourceString: string) : string
	/**
	 * @description Use to replace illegal HTML characters into HTML notation.
	 * Using this method removes illegal characters that might cause the UI to render improperly, or trigger a client side attack such as JavaScript or HTML injection.
	 * 
	 * @example
	 * //
	 * mydata='&amp;';
	 * htmlvalue=GlideStringUtil.getHTMLValue(mydata);
	 * gs.info(htmlvalue);
	 * 
	 * @param sourceString The string to be processed.
	 * 
	 * @returns string The string with illegal characters replaced with HTML notation.
	 * 
	 */
	getHTMLValue(sourceString: string) : string
	/**
	 * @description Extract numeric characters from a string.
	 * @example
	 * //
	 * mystring='123 test 456 String 789 cleaning';
	 * onlyNumeric=GlideStringUtil.getNumeric(mystring);
	 * gs.info(onlyNumeric); 
	 * 
	 * @param sourceString The string to be processed.
	 * 
	 * @returns string A string containing only numeric characters.
	 * 
	 */
	getNumeric(sourceString: string) : string
	/**
	 * @description Returns true if the specified string is a valid base64 string.
	 * @example
	 * //
	 * //(adding a "*" to corrupt the base64 format)
	 * base64="GethdTYehdtshetB*";
	 * isValid=GlideStringUtil.isBase64(base64);
	 * gs.info(isValid);
	 * 
	 * @param sourceString The string to be processed.
	 * 
	 * @returns boolean True if the specified string is in valid base64 format.
	 * 
	 */
	isBase64(sourceString: string) : boolean
	/**
	 * @description Returns true if the specified string is in valid sys ID format.
	 * The sys ID format is a sequence of 32 hexadecimal characters where all the characters are in the range \[0-9, a-f, A-F\].
	 * 
	 * @example
	 * //
	 * sysID="62826bf03710200044e0bfc8bcbe5df1";
	 * isElig=GlideStringUtil.isEligibleSysID(sysID);
	 * gs.info(isElig);
	 * 
	 * @param sourceString The string to be processed.
	 * 
	 * @returns boolean True when the specified string is in the valid sys ID format.
	 * 
	 */
	isEligibleSysID(sourceString: string) : boolean
	/**
	 * @description Replaces the new line character, "/n", with a break code "  
".
	 * @example
	 * //
	 * mystring="new line break \n, this is after the break";
	 * replaceNewLine=GlideStringUtil.newLinesToBreaks(mystring);
	 * gs.info(replaceNewLine); 
	 * 
	 * @param sourceString The string to be processed.
	 * 
	 * @returns string The string with new line characters replaced with HTML break code.
	 * 
	 */
	newLinesToBreaks(sourceString: string) : string
	/**
	 * @description Replaces carriage returns, line feeds, and tabs with spaces, and then removes leading, trailing, and duplicate spaces.
	 * @example
	 * //
	 * mystring="test with \n (new line) and \t (tabulation)";
	 * normalizedString=GlideStringUtil.normalizeWhitespace(mystring);
	 * gs.info(normalizedString);
	 * 
	 * @param sourceString The string to be processed.
	 * 
	 * @returns string The string with carriage returns, line feeds, and tabs replaced with spaces, and then leading, trailing, and duplicate spaces removed.
	 * 
	 */
	normalizeWhitespace(sourceString: string) : string
	/**
	 * @description Replaces escape characters with their respective character.
	 * This method replaces these escape characters: &lt; &gt: &nbsp; &amp; &quote;.
	 * 
	 * Note: In scoped applications call this method as unescapeHTML(String). In global applications call this method as unEscapeHTML(String).
	 * 
	 * @example
	 * //This code example shows the method being called in a global application.
	 * mydata='&amp;quot;&amp;lt;&amp;gt;&amp;amp;';
	 * unescaped=GlideStringUtil.unEscapeHTML(mydata);
	 * gs.info(unescaped);
	 * 
	 * @example
	 * //This code example shows the method being called in a scoped application.
	 * mydata='&amp;quot;&amp;lt;&amp;gt;&amp;amp;';
	 * unescaped=GlideStringUtil.unescapeHTML(mydata);
	 * gs.info(unescaped);
	 * 
	 * @param htmlString String to process.
	 * 
	 * @returns string String with the escape characters replaced.
	 * 
	 */
	unEscapeHTML(htmlString: string) : string
	}
/**
	 * @description The GlideSysAttachment API provides a way to handle attachments.
	 * Content is returned as a string, not as a byte array when getContent() is called.  	
 *   	
 * Content is returned as a GlideScriptableInputStream object when getContentStream() is called. The GlideScriptableInputStream contains the actual bytes not converted into a String.
	 * 
	 */
	declare class GlideSysAttachment {
	/**
	 * @description Copies attachments from the source record to the target record.
	 * @example
	 * //
	 * var attachment = new GlideSysAttachment();
	 * var incidentSysID = 'ab1b30031b04ec101363ff37dc4bcbfc';
	 * var incGR = new GlideRecord('incident');
	 * incGR.get(incidentSysID);
	 * 
	 * var copiedAttachments = attachment.copy('incident', incidentSysID, 'problem', incGR.getValue('problem_id'));
	 * gs.info('Copied attachments: ' + copiedAttachments);
	 * 
	 * @param sourceTable Name of the table with the attachments to be copied.
	 * @param sourceID Source table's sys\_id.
	 * @param targetTable Name of the table on which to add the attachments.
	 * @param targetID Target table's sys\_id.
	 * 
	 * @returns string Array of sys\_ids of the attachments that were copied.
	 * 
	 */
	copy(sourceTable: string,sourceID: string,targetTable: string,targetID: string) : string
	/**
	 * @description Deletes the specified attachment.
	 * @example
	 * //
	 * var attachment = new GlideSysAttachment();
	 * var attachmentSysID = 'a87769531b0820501363ff37dc4bcba2';
	 * attachment.deleteAttachment(attachmentSysID);
	 * 
	 * @param attachmentID Attachment's sys\_id.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	deleteAttachment(attachmentID: string) : void
	/**
	 * @description Returns a GlideRecord containing the matching attachment metadata such as name, type, or size.
	 * @example
	 * //The following script lists attachment file names for a record with two attachments.
	 * var attachment = new GlideSysAttachment();
	 * 
	 * var agr = attachment.getAttachments('&lt;table_name&gt;', '&lt;record_sys_id&gt;');
	 * 
	 * while(agr.next())
	 * gs.info(agr.getValue('file_name'));
	 * 
	 * @param tableName Name of the table to which the attachment belongs; for example, incident.
	 * @param sys_id The sys\_id of record to which the attachment belongs.
	 * 
	 * @returns GlideRecord GlideRecord object containing the matching attachment metadata such as name, type, or size.
	 * 
	 */
	getAttachments(tableName: string,sys_id: string) : GlideRecord
	/**
	 * @description Returns the attachment content as a string.
	 * @example
	 * //
	 * var attachment = new GlideSysAttachment();
	 * var incidentSysID = 'ab1b30031b04ec101363ff37dc4bcbfc';
	 * 
	 * var agr = attachment.getAttachments('incident', incidentSysID);
	 * 
	 * if (agr.next()) {
	 *   var attachmentContent = attachment.getContent(agr);
	 *   gs.info('Attachment content: ' + attachmentContent);
	 * }
	 * 
	 * @param sysAttachment Attachment record.
	 * 
	 * @returns string Attachment contents as a string. Returns up to 5MB of data.
	 * 
	 */
	getContent(sysAttachment: GlideRecord) : string
	/**
	 * @description Returns the attachment content as a string with base64 encoding.
	 * @example
	 * //
	 * var attachment = new GlideSysAttachment();
	 * var incidentSysID = 'ab1b30031b04ec101363ff37dc4bcbfc';
	 * 
	 * var agr = attachment.getAttachments('incident', incidentSysID);
	 * 
	 * if (agr.next()) {
	 *   var attachmentContent = attachment.getContentBase64(agr);
	 *   gs.info('Attachment content base64 encoded: ' + attachmentContent);
	 * }
	 * 
	 * @param sysAttachment Attachment record.
	 * 
	 * @returns string Attachment contents as a string with base64 encoding. Returns up to 5MB of data.
	 * 
	 */
	getContentBase64(sysAttachment: GlideRecord) : string
	/**
	 * @description Returns a GlideScriptableInputStream object given the sys\_id of an attachment.
	 * You can use the [GlideTextReader](dev.do#!/reference/api/paris/server/no-namespace/c_GlideTextReaderScopedAPI "Provides the ability to read single lines from an input stream. Because an input stream is used, it is not subject to the 5MB attachment size limit.") API to read the content stream.
	 * 
	 * @example
	 * //
	 * var attachment = new GlideSysAttachment();
	 * var attachmentSysID = '6e4621df1bc420501363ff37dc4bcbb0';
	 * var attachmentContentStream = attachment.getContentStream(attachmentSysID);
	 * gs.info('Attachment content stream: ' + attachmentContentStream);
	 * 
	 * @param sysID Attachment sys\_id.
	 * 
	 * @returns GlideScriptableInputStream Stream that contains the attachment content.
	 * 
	 */
	getContentStream(sysID: string) : GlideScriptableInputStream
	/**
	 * @description Creates an instance of the GlideSysAttachment class.
	 */
	constructor() 
	/**
	 * @description Attaches a specified attachment to the specified record.
	 * @example
	 * //
	 * var attachment = new GlideSysAttachment();
	 * 
	 * //setup inputs
	 * var rec = new GlideRecord('incident');
	 * rec.get('78271e1347c12200e0ef563dbb9a7109');
	 * var fileName = 'example.txt';
	 * var contentType = 'text/csv';
	 * var content = 'The text that is stored inside my file';
	 * 
	 * var agr = attachment.write(rec, fileName, contentType, content);
	 * 
	 * gs.info('The attachment sys_id is: ' + agr);
	 * 
	 * @param content Attachment content.
	 * @param contentType Attachment content type.
	 * @param fileName Attachment file name.
	 * @param record Record to which to attach the attachment.
	 * 
	 * @returns string Attachment sys\_id. Returns null if the attachment was not added.
	 * 
	 */
	write(content: string,contentType: string,fileName: string,record: GlideRecord) : string
	/**
	 * @description Inserts an attachment for the specified record using base64 encoded content.
	 * @example
	 * //
	 * var attachment = new GlideSysAttachment();
	 * 
	 * var rec = new GlideRecord('incident');
	 * var incidentSysID = 'ab1b30031b04ec101363ff37dc4bcbfc';
	 * rec.get(incidentSysID);
	 * var fileName = 'example.txt';
	 * var contentType = 'text/csv';
	 * var base64Encodedcontent = 'SSBhbSB0ZXh0Lg==';
	 * 
	 * var agr = attachment.writeBase64(rec, fileName, contentType, base64Encodedcontent);
	 * 
	 * gs.info('The attachment sys_id is: ' + agr);
	 * 
	 * @param now_GR Record to which the attachment is to be attached.
	 * @param fileName Attachment's file name.
	 * @param contentType Attachment's content type.
	 * @param content Attachment content in base64 format.
	 * 
	 * @returns string Sys\_id of the attachment created.
	 * 
	 */
	writeBase64(now_GR: GlideRecord,fileName: string,contentType: string,content: string) : string
	/**
	 * @description Inserts an attachment using the input stream.
	 * @example
	 * //Attaches a content stream from the sys\_attachment table to a test\_table record.
	 * function copyAttachmentToGlideRecord(conceptSysId) {
	 *   var targetGlideRecord = new GlideRecord("test_table");
	 *   if (!targetGlideRecord.get(conceptSysId)) {
	 *      throw ("Cannot find record created by test with sys_id: " + conceptSysId);
	 *   }
	 * 
	 *   var sourceAttachmentGlideRecord = new GlideRecord('sys_attachment');    
	 *   var fileName = sourceAttachmentGlideRecord.getValue('file_name');
	 *   var contentType = sourceAttachmentGlideRecord.getValue('content_type');
	 *   var sourceAttachmentSysId = sourceAttachmentGlideRecord.getValue('sys_id');
	 * 
	 *   var gsa = new GlideSysAttachment();
	 *   gsa.writeContentStream(
	 *     targetGlideRecord,
	 *     filename,
	 *     contentType,
	 *     gsa.getContentStream(sourceAttachmentSysId));
	 *   gs.info("Attachment created");
	 * }
	 * 
	 * @param now_GR The record to which the attachment is to be attached.
	 * @param fileName The attachment's file name.
	 * @param contentType The attachment's content type.
	 * @param content The attachment content.
	 * 
	 * @returns string The sysID of the attachment created.
	 * 
	 */
	writeContentStream(now_GR: GlideRecord,fileName: string,contentType: string,content: GlideScriptableInputStream) : string
	}
/**
	 * @description The scoped GlideSysListControl class allows you to determine if the New or Edit buttons are displayed.
	 * 
	 */
	declare class GlideSysListControl {
	/**
	 * @description Returns the sys\_id for the control.
	 * @example
	 * //
	 * var sysListCtrl = new GlideSysListControl("incident");
	 * var controlID = sysListCtrl.getControlID();
	 * gs.info(controlID);
	 * 
	 * @returns string sys\_id of the control
	 * 
	 */
	getControlID() : string
	/**
	 * @description Instantiates a GlideSysListControl object.
	 * @param tableName Name of the table
	 * 
	 */
	constructor(tableName: string) 
	/**
	 * @description Returns true if the edit button is not displayed.
	 * @example
	 * //
	 * var sysListCtrl = new GlideSysListControl("incident");
	 * var isOmitted = sysListCtrl.isOmitEditButton();
	 * gs.info(isOmitted);
	 * 
	 * @returns boolean True when the edit button is not displayed.
	 * 
	 */
	isOmitEditButton() : boolean
	/**
	 * @description Returns true when the New button is not displayed.
	 * @example
	 * //
	 * var sysListCtrl = new GlideSysListControl("incident");
	 * var isOmitted = sysListCtrl.isOmitNewButton();
	 * gs.info(isOmitted);
	 * 
	 * @returns boolean True when the new button is not displayed.
	 * 
	 */
	isOmitNewButton() : boolean
	}
/**
	 * @description The scoped GlideSystem (referred to by the variable name 'gs' in any server-side JavaScript) API provides a number of convenient methods to get information about the system, the current logged in user, etc.
	 * Many of the GlideSystem methods facilitate the easy inclusion of dates in query ranges, and are most often used in filters and reporting.
	 * 
	 */
	declare class GlideSystem {
	/**
	 * @description Returns the date and time for the beginning of last month in GMT.
	 * @returns string GMT beginning of last month, in the format yyyy-mm-dd hh:mm:ss
	 * 
	 */
	beginningOfLastMonth() : string
	/**
	 * @description Returns the date and time for the beginning of last week in GMT.
	 * @returns string GMT beginning of last week, in the format yyyy-mm-dd hh:mm:ss
	 * 
	 */
	beginningOfLastWeek() : string
	/**
	 * @description Returns the date and time for the beginning of next month in GMT.
	 * @returns string GMT beginning of next month, in the format yyyy-mm-dd hh:mm:ss
	 * 
	 */
	beginningOfNextMonth() : string
	/**
	 * @description Returns the date and time for the beginning of next week in GMT.
	 * @returns string The GMT beginning of next week, in the format yyyy-mm-dd hh:mm:ss.
	 * 
	 */
	beginningOfNextWeek() : string
	/**
	 * @description Returns the date and time for the beginning of next year in GMT.
	 * @returns string GMT beginning of next year, in the format yyyy-mm-dd hh:mm:ss
	 * 
	 */
	beginningOfNextYear() : string
	/**
	 * @description Returns the date and time for the beginning of this month in GMT.
	 * @returns string GMT beginning of this month, in the format yyyy-mm-dd hh:mm:ss
	 * 
	 */
	beginningOfThisMonth() : string
	/**
	 * @description Returns the date and time for the beginning of this quarter in GMT.
	 * @returns string GMT beginning of this quarter, in the format yyyy-mm-dd hh:mm:ss
	 * 
	 */
	beginningOfThisQuarter() : string
	/**
	 * @description Returns the date and time for the beginning of this week in GMT.
	 * @returns string GMT beginning of this week, in the format yyyy-mm-dd hh:mm:ss
	 * 
	 */
	beginningOfThisWeek() : string
	/**
	 * @description Returns the date and time for the beginning of this year in GMT.
	 * @returns string GMT beginning of this year, in the format yyyy-mm-dd hh:mm:ss
	 * 
	 */
	beginningOfThisYear() : string
	/**
	 * @description Returns the date and time for a specified number of days ago.
	 * @example
	 * //
	 * function contractNoticeDue() {
	 *     var now_GR = new GlideRecord("contract");
	 *     now_GR.addQuery("u_contract_status", "Active");
	 *     now_GR.query();
	 *     while (now_GR.next()) {
	 *         if ((now_GR.u_termination_date &lt;= gs.daysAgo(-90)) &amp;&amp; (now_GR.u_contract_duration == "Long")) {
	 *             now_GR.u_contract_status = "In review";
	 *         } 
	 *         else if ((now_GR.u_termination_date &lt;= gs.daysAgo(-50)) &amp;&amp; (now_GR.u_contract_duration == "Medium")) {
	 *             now_GR.u_contract_status = "In review";
	 *         } 
	 *         else if ((now_GR.u_termination_date &lt;= gs.daysAgo(-10)) &amp;&amp; (now_GR.u_contract_duration == "Short")) {
	 *             now_GR.u_contract_status = "In review";
	 *         }
	 *     }
	 *     now_GR.update();
	 * }
	 * 
	 * @param days Integer number of days
	 * 
	 * @returns string GMT in the format yyyy-mm-dd hh:mm:ss
	 * 
	 */
	daysAgo(days: number) : string
	/**
	 * @description Returns the date and time for the end of the day a specified number of days ago.
	 * @param days Integer number of days
	 * 
	 * @returns string GMT end of the day in the format yyyy-mm-dd hh:mm:ss
	 * 
	 */
	daysAgoEnd(days: number) : string
	/**
	 * @description Returns the date and time for the beginning of the day a specified number of days ago.
	 * @example
	 * //
	 * var now_GR = new GlideRecord('sysapproval_approver');
	 * now_GR.addQuery('state', 'requested');
	 * now_GR.addQuery('sys_updated_on', '&lt;', gs.daysAgoStart(5));
	 * now_GR.query();
	 * 
	 * @param days Integer number of days
	 * 
	 * @returns string GMT start of the day in the format yyyy-mm-dd hh:mm:ss
	 * 
	 */
	daysAgoStart(days: string) : string
	/**
	 * @description Returns the date and time for the end of last month in GMT.
	 * @returns string GMT end of last month, in the format yyyy-mm-dd hh:mm:ss
	 * 
	 */
	endOfLastMonth() : string
	/**
	 * @description Returns the date and time for the end of last week in GMT.
	 * @returns string GMT end of last week, in the format yyyy-mm-dd hh:mm:ss
	 * 
	 */
	endOfLastWeek() : string
	/**
	 * @description Returns the date and time for the end of last year in GMT.
	 * @returns string GMT in format yyyy-mm-dd hh:mm:ss
	 * 
	 */
	endOfLastYear() : string
	/**
	 * @description Returns the date and time for the end of next month in GMT.
	 * @returns string GMT in the format yyyy-mm-dd hh:mm:ss
	 * 
	 */
	endOfNextMonth() : string
	/**
	 * @description Returns the date and time for the end of next week in GMT.
	 * @returns string GMT in the format yyyy-mm-dd hh:mm:ss
	 * 
	 */
	endOfNextWeek() : string
	/**
	 * @description Returns the date and time for the end of next year in GMT.
	 * @returns string GMT in the format yyyy-mm-dd hh:mm:ss
	 * 
	 */
	endOfNextYear() : string
	/**
	 * @description Returns the date and time for the end of this month in GMT.
	 * @returns string GMT in the format yyyy-mm-dd hh:mm:ss
	 * 
	 */
	endOfThisMonth() : string
	/**
	 * @description Returns the date and time for the end of this quarter in GMT.
	 * @returns string GMT in the format yyyy-mm-dd hh:mm:ss
	 * 
	 */
	endOfThisQuarter() : string
	/**
	 * @description Returns the date and time for the end of this week in GMT.
	 * @returns string GMT in the format yyyy-mm-dd hh:mm:ss
	 * 
	 */
	endOfThisWeek() : string
	/**
	 * @description Returns the date and time for the end of this year in GMT.
	 * @returns string GMT in the format yyyy-mm-dd hh:mm:ss
	 * 
	 */
	endOfThisYear() : string
	/**
	 * @description Queues an event for the event manager.
	 * @example
	 * //
	 * if (current.operation() != 'insert' &amp;&amp; current.comments.changes()) {
	 *     gs.eventQueue('incident.commented', current, gs.getUserID(), gs.getUserName());
	 * }
	 * 
	 * @param name Name of the event being queued.
	 * @param instance GlideRecord object, such as "current".
	 * @param parm1 Optional. Saved with the instance if specified.
	 * @param parm2 Optional. Saved with the instance if specified.
	 * @param queue Optional. Name of the queue.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	eventQueue(name: string,instance: Object,parm1: string,parm2: string,queue: string) : void
	/**
	 * @description Queues an event in the event manager.
	 * The passed in event schedule information is stored in the Events \[sysevent\] table. For additional information on events, see [Events](https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/platform-events/concept/events.html).
	 * 
	 * @example
	 * //This example shows how to call the method using a GlideRecord, two parameters that are passed to the event script, and a specified time to schedule the event.
	 * var requestXml = requestBody.dataString;
	 * var processTime = new GlideDateTime();
	 * processTime.addDaysLocalTime(7);
	 * gs.eventQueueScheduled(‘sn_app.user.deactivate’, gr, requestXML, gs.getUserID(), processTime);
	 * 
	 * @example
	 * //This example shows how to call the method using a sys\_id and the default values for the optional parameters.
	 * gs.eventQueueScheduled(‘event.test’, ‘0e29421383101000dada83ec37d9292d’, ‘’, ‘’, ‘’);
	 * 
	 * @param name Name of the event to queue.
	 * @param instance GlideRecord object or the sys\_id of the record to which this event applies.
	 * @param parm1 Optional. String to pass into the event script. This parameter is free-form and depends on the implementation of the event script.  Default: If the instance parameter is a GlideRecord object, then the default is the display value for that GlideRecord (now\_GR.getDisplayValue) otherwise it is null.
	 * @param parm2 Optional. String to pass into the event script. This parameter is free-form and depends on the implementation of the event script.  Default: null
	 * @param expiration Optional. GlideDateTime object or a date/time type element that specifies the date and time to process the event.  Default: Current date/time
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	eventQueueScheduled(name: string,instance: Object|String,parm1: string,parm2: string,expiration: Object) : void
	/**
	 * @description Generates a date and time for the specified date in GMT.
	 * @param date Format: yyyy-mm-dd
	 * @param range Start, end, or a time in the 24 hour format hh:mm:ss.
	 * 
	 * @returns string A date and time in the format yyyy-mm-dd hh:mm:ss. If range is start, the returned value is yyyy-mm-dd 00:00:00; If range is end the return value is yyyy-mm-dd 23:59:59.
	 * 
	 */
	dateGenerate(date: string,range: string) : string
	/**
	 * @description Generates a GUID that can be used when a unique identifier is required.
	 * @example
	 * //
	 * personalId = gs.generateGUID();
	 * gs.info(personalId);
	 * 
	 * @returns string A 32-character hexadecimal GUID.
	 * 
	 */
	generateGUID() : string
	/**
	 * @description Gets a string representing the cache version for a CSS file.
	 * @example
	 * //
	 * var verStr = gs.getCssCacheVersionString();
	 * gs.info(verStr);
	 * 
	 * @returns string The CSS cache version.
	 * 
	 */
	getCssCacheVersionString() : string
	/**
	 * @description Gets the ID of the current application as set using the Application Picker.
	 * @example
	 * //
	 * var currentId = gs.getCurrentApplicationId();
	 * gs.info(currentId);
	 * 
	 * @returns string The current application's sys\_id, or global in none is set.
	 * 
	 */
	getCurrentApplicationId() : string
	/**
	 * @description Gets the name of the current scope.
	 * @example
	 * //
	 * var currentScope = gs.getCurrentScopeName();
	 * gs.info(currentScope);
	 * 
	 * @returns string The current scope name.
	 * 
	 */
	getCurrentScopeName() : string
	/**
	 * @description Gets the caller scope name; returns null if there is no caller.
	 * @example
	 * //This example shows two script includes that are set to Accessible from all application scopes. One script include is created within app\_scope\_a.
	 * var Scopea = Class.create(); 
	 *  
	 * Scopea.prototype = { 
	 *     initialize: function() { 
	 *     }, 
	 *  
	 *     callerScope: function() { 
	 *         var scopeb = new app_scope_b.Scopeb(); 
	 *         return scopeb.callerscope(); 
	 *     }, 
	 *  
	 *     type: 'Scopea' 
	 * }
	 * 
	 * @example
	 * //This example shows another script include created within app\_scope\_b.
	 * var Scopeb = Class.create(); 
	 *  
	 * Scopeb.prototype = { 
	 *     initialize: function() { 
	 *         this._constructorCallerScope = gs.getCallerScopeName(); 
	 *     }, 
	 *  
	 *     callerscope: function() { 
	 *         return gs.getCallerScopeName(); 
	 *     }, 
	 *  
	 *     getConstructorCallerScope: function() { 
	 *         return this._constructorCallerScope; 
	 *     }, 
	 *  
	 *     type: 'Scopeb' 
	 * }
	 * 
	 * @example
	 * //This script can be used within scope app\_scope\_a to get the scope name of the caller—in this case app\_scope\_b.
	 * gs.info(new Scopea().getCallerScopeName());
	 * 
	 * @returns string The caller's scope name, or null if there is no caller.
	 * 
	 */
	getCallerScopeName() : string
	/**
	 * @description Returns the list of error messages for the session that were added by addErrorMessage().
	 * @returns string List of error messages
	 * 
	 */
	getErrorMessages() : string
	/**
	 * @description Retrieves the specified message from the Message \[sys\_ui\_message\] table. If the message has HTML special characters, replaces them with the corresponding HTML name codes. For example, & becomes &amp;.
	 * If the specified message identifier (Key) exists in the Message \[sys\_ui\_message\] table for the current language, the method returns the translated message with all special characters returned as escape sequences. If the specified message identifier does not exist for the current language, then the method returns the English version of the message with all special characters returned as escape sequences. If the message identifier does not exist in the table, then it returns the message ID.
	 * 
	 * For additional information about the Message table, see [Message table](https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/localization/reference/r_MessageTable.html).
	 * 
	 * Note: If the UI message has a tick ('), there may be issues with the message in the script; to escape the ticks ('), use getMessageS(String, Object).
	 * 
	 * @example
	 * //This example shows the ampersand character being replaced with the equivalent ampersand HTML name code.
	 * var my_message = gs.getEscapedMessage("Is the summary &amp; details accurate?");
	 * alert(my_message);
	 * 
	 * @example
	 * //This example shows how to replace a single variable within a message and how the < and > symbols in the message are transposed to the corresponding HTML name codes of < and >.
	 * // current.action.name is "update record"
	 * var my_message = gs.getEscapedMessage("Abort adding action '{0}', same &lt;subflow&gt; can't be added twice in this subflow.", current.action.name);
	 * alert(my_message);
	 * 
	 * @param id Message identifier. You can locate this value in the Key field of the Message \[sys\_ui\_message\] table. Note the Key field may look exactly like the actual message string.
	 * @param args Optional. List of strings or other values defined by java.text.MessageFormat that replace the variables within the specified message.  For example: gs.getMessage("Abort adding action '{0}', same subflow can't be added twice in this subflow.", current.action.name);  In this example '{0}' is replaced with the content of current.action.name.  Note: The passed in values are not translated. They are inserted verbatim in the message.
	 * 
	 * @returns string UI message with HTML special characters replaced with HTML name codes.
	 * 
	 */
	getEscapedMessage(id: string,args: Array) : string
	/**
	 * @description Retrieves translated messages from the Message \[sys\_ui\_message\] table to display in a UI.
	 * If the specified message identifier (key) exists in the Message \[sys\_ui\_message\] table for the current language, then the method returns the translated message. If the specified message identifier does not exist for the current language, then the method returns the English version of the message. If the message identifier does not exist in the table, then it returns the message ID.
	 * 
	 * For additional information about the Message table, see [Message table](https://docs.servicenow.com/bundle/quebec-platform-administration/page/administer/localization/reference/r_MessageTable.html)
	 * 
	 * Note: If the UI message has a tick ('), there may be issues with the message in the script; to escape the ticks ('), use getMessageS(String, Object).
	 * 
	 * @example
	 * //This example shows the message returned for the current user when Spanish is the current language.
	 * var my_message = gs.getMessage("rows will not be updated");
	 * alert(my_message);
	 * 
	 * @example
	 * //This example shows how to replace a single variable within a message.
	 * // current.action.name is "update record"
	 * var my_message = gs.getMessage("Abort adding action '{0}', same subflow can't be added twice in this subflow.", current.action.name);
	 * alert(my_message);
	 * 
	 * @example
	 * //This example shows how to replace multiple variables within a message.
	 * // current.sub_flow.name is 'schedule users'
	 * // current.action.name is "update record"
	 * var my_message = gs.getEscapedMessage("Abort adding action '{0}', same subflow can't be added twice in {1} subflow.", [current.action.name, current.sub_flow.name]);
	 * alert(my_message);
	 * 
	 * @param id Message identifier. You can locate this value in the Key field of the Message \[sys\_ui\_message\] table. Note the Key field may look exactly like the actual message.
	 * @param args Optional. List of strings or other values defined by java.text.MessageFormat that replace the variables within the specified message.  For example: gs.getMessage("Abort adding action '{0}', same subflow can't be added twice in this subflow.", current.action.name);  In this example '{0}' is replaced with the content of current.action.name.  Note: The passed in values are not translated. They are inserted verbatim in the message.
	 * 
	 * @returns string UI message.
	 * 
	 */
	getMessage(id: string,args: Array) : string
	/**
	 * @description Gets the value of a Glide property. If the property is not found, returns an alternate value.
	 * @example
	 * //
	 * var attachment_link = gs.getProperty('glide.servlet.uri');
	 * gs.info(attachment_link);
	 * 
	 * @param key The key for the property whose value should be returned.
	 * @param alt (Optional) Alternate object to return if the property is not found.
	 * 
	 * @returns string The value of the Glide property, or the alternate object defined above.
	 * 
	 */
	getProperty(key: string,alt: Object) : string
	/**
	 * @description Returns the date and time for a specified number of hours ago.
	 * @example
	 * //
	 * if (current.operation() == 'insert') {
	 *  // If no due date was specified, calculate a default
	 *  if (current.due_date == '') {
	 *  
	 *   if (current.urgency == '1') {
	 *    // Set due date to 4 hours ahead of current time
	 *    current.due_date = gs.hoursAgo(-4);
	 *   }
	 *  
	 *   if (current.urgency == '2') {
	 *    // Set due date to 2 days ahead of current time
	 *    current.due_date = gs.daysAgo(-2);
	 *   }
	 *  
	 *   if (current.urgency == '3') {
	 *    // Set due date to 7 days ahead of current time
	 *    current.due_date = gs.daysAgo(-7);
	 *   }
	 *  }
	 * }
	 * 
	 * @param hours Integer number of hours
	 * 
	 * @returns string GMT in the format yyyy-mm-dd hh:mm:ss
	 * 
	 */
	hoursAgo(hours: number) : string
	/**
	 * @description Returns the date and time for the end of the hour a specified number of hours ago.
	 * @param hours Integer number of hours
	 * 
	 * @returns string GMT in the format yyyy-mm-dd hh:mm:ss
	 * 
	 */
	hoursAgoEnd(hours: number) : string
	/**
	 * @description Returns the date and time for the start of the hour a specified number of hours ago.
	 * @param hours Integer number of hours
	 * 
	 * @returns string GMT in the format yyyy-mm-dd hh:mm:ss
	 * 
	 */
	hoursAgoStart(hours: number) : string
	/**
	 * @description Provides a safe way to call from the sandbox, allowing only the inclusion of trusted scripts.
	 * @example
	 * //This example gets the PrototypeServer in the current script context.
	 * gs.include("PrototypeServer");
	 * 
	 * @param name The name of the script to include.
	 * 
	 * @returns boolean True if the include worked.
	 * 
	 */
	include(name: string) : boolean
	/**
	 * @description Returns the date and time for the end of the minute a specified number of minutes ago.
	 * @param minutes Integer number of minutes
	 * 
	 * @returns string GMT in the format yyyy-mm-dd hh:mm:ss
	 * 
	 */
	minutesAgoEnd(minutes: number) : string
	/**
	 * @description Returns the date and time for the start of the minute a specified number of minutes ago.
	 * @param minutes Integer number of minutes
	 * 
	 * @returns string GMT in the format yyyy-mm-dd hh:mm:ss
	 * 
	 */
	minutesAgoStart(minutes: number) : string
	/**
	 * @description Returns the date and time for a specified number of months ago.
	 * @param months Integer number of months
	 * 
	 * @returns string GMT on today's date of the specified month, in the format yyyy-mm-dd hh:mm:ss
	 * 
	 */
	monthsAgo(months: number) : string
	/**
	 * @description Returns the date and time for the start of the month a specified number of months ago.
	 * @param months Integer number of months
	 * 
	 * @returns string GMT start of the month the specified number of months ago, in the format yyyy-mm-dd hh:mm:ss
	 * 
	 */
	monthsAgoStart(months: number) : string
	/**
	 * @description Queries an object and returns true if the object is null, undefined, or contains an empty string.
	 * @example
	 * //
	 * var now_GR = new GlideRecord();
	 * gs.info(gs.nil(now_GR));
	 * 
	 * @param o The object to be checked.
	 * 
	 * @returns boolean True if the object is null, undefined, or contains an empty string; otherwise, returns false.
	 * 
	 */
	nil(o: Object) : boolean
	/**
	 * @description Returns the date and time for the last day of the quarter for a specified number of quarters ago.
	 * @param quarters Integer number of quarters
	 * 
	 * @returns string GMT end of the quarter that was the specified number of quarters ago, in the format yyyy-mm-dd hh:mm:ss
	 * 
	 */
	quartersAgoEnd(quarters: number) : string
	/**
	 * @description Returns the date and time for the first day of the quarter for a specified number of quarters ago.
	 * @param quarters Integer number of quarters
	 * 
	 * @returns string GMT end of the month that was the specified number of quarters ago, in the format yyyy-mm-dd hh:mm:ss
	 * 
	 */
	quartersAgoStart(quarters: number) : string
	/**
	 * @description Determines if a database table exists.
	 * @example
	 * //
	 * gs.info(gs.tableExists('incident'));
	 * 
	 * @param name Name of the table to check for existence.
	 * 
	 * @returns boolean True if the table exists. False if the table was not found.
	 * 
	 */
	tableExists(name: string) : boolean
	/**
	 * @description Writes a warning message to the system log.
	 * @example
	 * //
	 * gs.warn("This is a warning");
	 * var myFirstName = "Abel";
	 * var myLastName = "Tuter";
	 * gs.warn("This is a warning from {0}.{1}", myFirstName, myLastName);
	 * 
	 * @param message The log message with place holders for any variable arguments.
	 * @param param1 (Optional) First variable argument.
	 * @param param2 (Optional) Second variable argument.
	 * @param param3 (Optional) Third variable argument.
	 * @param param4 (Optional) Fourth variable argument.
	 * @param param5 (Optional) Fifth variable argument.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	warn(message: string,param1: Object,param2: Object,param3: Object,param4: Object,param5: Object) : void
	/**
	 * @description Returns yesterday's time (24 hours ago).
	 * @returns string GMT for 24 hours ago, in the format yyyy-mm-dd hh:mm:ss
	 * 
	 */
	yesterday() : string
	/**
	 * @description Writes an info message to the system log.
	 * @example
	 * //
	 * gs.info("This is an info message");
	 * var myFirstName = "Abel";
	 * var myLastName = "Tuter";
	 * gs.info("This is an info message from {0}.{1}", myFirstName, myLastName);
	 * 
	 * @param message The log message with place holders for any variable arguments.
	 * @param param1 (Optional) First variable argument.
	 * @param param2 (Optional) Second variable argument.
	 * @param param3 (Optional) Third variable argument.
	 * @param param4 (Optional) Fourth variable argument.
	 * @param param5 (Optional) Fifth variable argument.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	info(message: string,param1: Object,param2: Object,param3: Object,param4: Object,param5: Object) : void
	/**
	 * @description Writes a debug message to the system log.
	 * @example
	 * //
	 * gs.debug("This is a debug message");
	 * var myFirstName = "Abel";
	 * var myLastName = "Tuter";
	 * gs.debug("This is a debug message from {0}.{1}", myFirstName, myLastName);
	 * 
	 * @param message The log message with place holders for any variable arguments.
	 * @param param1 (Optional) First variable argument.
	 * @param param2 (Optional) Second variable argument.
	 * @param param3 (Optional) Third variable argument.
	 * @param param4 (Optional) Fourth variable argument.
	 * @param param5 (Optional) Fifth variable argument.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	debug(message: string,param1: Object,param2: Object,param3: Object,param4: Object,param5: Object) : void
	/**
	 * @description Writes an error message to the system log.
	 * This method accepts up to five variable arguments (varargs) in the message using the Java MessageFormat placeholder replacement pattern.
	 * 
	 * Note: Variables must contain valid values for this method to provide correct output.
	 * 
	 * @example
	 * //
	 * gs.error("This is an error message");
	 * var myFirstName = "Abel";
	 * var myLastName = "Tuter";
	 * gs.error("This is an error message from {0}.{1}", myFirstName, myLastName);
	 * 
	 * @param message The log message with place holders for any variable arguments.
	 * @param param1 (Optional) First variable argument.
	 * @param param2 (Optional) Second variable argument.
	 * @param param3 (Optional) Third variable argument.
	 * @param param4 (Optional) Fourth variable argument.
	 * @param param5 (Optional) Fifth variable argument.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	error(message: string,param1: Object,param2: Object,param3: Object,param4: Object,param5: Object) : void
	/**
	 * @description Adds an error message for the current session.
	 * @example
	 * //
	 * gs.include("PrototypeServer");
	 *   var ValidatePasswordStronger = Class.create();
	 *   ValidatePasswordStronger.prototype = {
	 *        process : function() {
	 *           var user_password = request.getParameter("user_password");
	 *           var min_len = 8;
	 *           var rules = "Password must be at least " + min_len + 
	 *              " characters long and contain a digit, an uppercase letter, and a lowercase letter.";
	 *           if (user_password.length() &lt; min_len) {
	 *              gs.addErrorMessage("TOO SHORT: " + rules);
	 *              return false;
	 *           }
	 *           var digit_pattern = new RegExp("[0-9]", "g");
	 *           if (!digit_pattern.test(user_password)) {
	 *              gs.addErrorMessage("DIGIT MISSING: " + rules);
	 *              return false;
	 *           }
	 *           var upper_pattern = new RegExp("[A-Z]", "g");
	 *           if (!upper_pattern.test(user_password)) {
	 *              gs.addErrorMessage("UPPERCASE MISSING: " + rules);
	 *              return false;
	 *           }
	 *           var lower_pattern = new RegExp("[a-z]", "g");
	 *           if (!lower_pattern.test(user_password)) {
	 *              gs.addErrorMessage("LOWERCASE MISSING: " + rules);
	 *              return false;
	 *           }
	 *           return true; // password is OK
	 *        }
	 *   }
	 * 
	 * @param message Message to add.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	addErrorMessage(message: string) : void
	/**
	 * @description Adds an info message for the current session. This method is not supported for asynchronous business rules.
	 * @example
	 * //
	 * if ((!current.u_date1.nil()) &amp;&amp; (!current.u_date2.nil())) {
	 *   var start = current.u_date1.getGlideObject().getNumericValue();
	 *   var end = current.u_date2.getGlideObject().getNumericValue();
	 *   if (start &gt; end) {
	 *     gs.addInfoMessage('start must be before end');
	 *     current.u_date1.setError('start must be before end');
	 *     current.setAbortAction(true);
	 *   }
	 * }
	 * 
	 * @param message Info message to add.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	addInfoMessage(message: string) : void
	/**
	 * @description Creates a base64 string from the specified string.
	 * @example
	 * //
	 * var mac = new CertificateEncryption;
	 * var key = "sample_key"; 
	 * key = gs.base64Encode(key);
	 * mac.generateMac(key, "HmacSHA256", "sample_data");
	 * 
	 * @param source String to encode.
	 * 
	 * @returns string Encoded base64 string.
	 * 
	 */
	base64Encode(source: string) : string
	/**
	 * @description Returns an ASCII string from the specified base64 string.
	 * @param source A base64 encoded string.
	 * 
	 * @returns string The decoded string.
	 * 
	 */
	base64Decode(source: string) : string
	/**
	 * @description Gets a reference to the current Glide session.
	 * @example
	 * //
	 * if (!gs.hasRole("admin") &amp;&amp; !gs.hasRole("user_admin") &amp;&amp; gs.getSession().isInteractive()) {
	 *   current.addQuery("active", "true");
	 * }
	 * 
	 * @returns string A reference for the current session.
	 * 
	 */
	getSession() : string
	/**
	 * @description Retrieves the GlideSession session ID.
	 * @example
	 * //
	 * var myUserObject = gs.getSessionID();
	 * gs.info(myUserObject);
	 * 
	 * @returns string The session ID.
	 * 
	 */
	getSessionID() : string
	/**
	 * @description This method is no longer available. Instead, use gs.getSession().getSessionToken().
	 * @returns string The session token.
	 * 
	 */
	getSessionToken() : string
	/**
	 * @description Returns the name of the time zone associated with the current user.
	 * This method has been deprecated. Instead, use the [getTimeZoneName()](https://developer.servicenow.com/go_to_api.do?ID=r_ScopedGlideSessionGetTimeZoneName&v=paris) method in the GlideSession API.
	 * 
	 * @example
	 * //
	 * gs.info(gs.getTimeZoneName());
	 * 
	 * @returns string The time zone name.
	 * 
	 */
	getTimeZoneName() : string
	/**
	 * @description Gets the current URI for the session.
	 * @example
	 * //
	 * gs.info(gs.getUrlOnStack());
	 * 
	 * @returns string The URI.
	 * 
	 */
	getUrlOnStack() : string
	/**
	 * @description Gets the display name of the current user.
	 * @example
	 * //
	 * gs.info(gs.getUserDisplayName());
	 * 
	 * @returns string The name field of the current user. Returns Abel Tuter, as opposed to abel.tuter.
	 * 
	 */
	getUserDisplayName() : string
	/**
	 * @description Gets the sys\_id of the current user.
	 * @example
	 * //
	 * gs.info(gs.getUserID());
	 * 
	 * @returns string The sys\_id of the current user.
	 * 
	 */
	getUserID() : string
	/**
	 * @description Gets the user name, or user id, of the current user.
	 * @example
	 * //
	 * gs.info(gs.getUserName());
	 * 
	 * @returns string The user name of the current user.
	 * 
	 */
	getUserName() : string
	/**
	 * @description Determines if the current user has the specified role.
	 * @example
	 * //
	 * if (!gs.hasRole("admin") &amp;&amp; !gs.hasRole("groups_admin")  &amp;&amp; gs.getSession().isInteractive()) {
	 *   var qc = current.addQuery("u_hidden", "!=", "true"); //cannot see hidden groups... 
	 *   qc.addOrCondition("sys_id", "javascript:getMyGroups()"); //...unless in the hidden group
	 *   gs.info("User has admin and groups admin roles");
	 * }
	 * else {
	 *   gs.info("User does not have both admin and groups admin roles");
	 * }
	 * 
	 * @param role The role to check.
	 * 
	 * @returns boolean True if the user had the role. Returns true for users with the administrator role.
	 * 
	 */
	hasRole(role: Object) : boolean
	/**
	 * @description Determines if debugging is active for a specific scope.
	 * @example
	 * //
	 * gs.debug("This is a log message");
	 * var myFirstName = "Abel";
	 * var myLastName = "Tuter";
	 * gs.debug("This is a log message from {0}.{1}", myFirstName, myLastName);
	 * gs.info(gs.isDebugging());
	 * 
	 * @returns boolean True if either session debugging is active or the log level is set to debug for the specified scope.
	 * 
	 */
	isDebugging() : boolean
	/**
	 * @description Checks if the current session is interactive. An example of an interactive session is when a user logs in normally. An example of a non-interactive session is using a SOAP request to retrieve data.
	 * @example
	 * //
	 * if (!gs.hasRole("admin") &amp;&amp; gs.getSession().isInteractive()) {
	 *     var qc1 = current.addQuery('u_group',"");
	 *     var gra = new GlideRecord('sys_user_grmember');
	 *     gra.addQuery('user', gs.getUserID());
	 *     gra.query();
	 *     while (gra.next()) {
	 *         qc1.addOrCondition('u_group', gra.group);
	 *     }
	 * }
	 * 
	 * @returns boolean True if the session is interactive.
	 * 
	 */
	isInteractive() : boolean
	/**
	 * @description Determines if the current user is currently logged in.
	 * @example
	 * //
	 * gs.info(gs.isLoggedIn());
	 * 
	 * @returns boolean True if the current user is logged in.
	 * 
	 */
	isLoggedIn() : boolean
	/**
	 * @description You can determine if a request comes from a mobile device.
	 * This method can be used in UI action conditions and business rules.
	 * 
	 * @example
	 * //
	 * if (gs.isMobile())
	 *   gs.info("submitted from mobile UI");
	 *  else 
	 *    gs.info("NOT submitted from mobile UI");
	 * 
	 * @returns boolean True if the request comes from a mobile device; otherwise, false.
	 * 
	 */
	isMobile() : boolean
	/**
	 * @description Sets the redirect URI for this transaction, which then determines the next page the user will see.
	 * @example
	 * //
	 * gs.setRedirect("com.glideapp.servicecatalog_cat_item_view.do?sysparm_id=d41ce5bac611227a0167f4bf8109bf70&amp;sysparm_user=" 
	 * + current.sys_id + "&amp;sysparm_email=" + current.email)
	 * 
	 * @param o URI object or URI string to set as the redirect
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setRedirect(o: Object) : void
	/**
	 * @description Returns a reference to the scoped GlideUser object for the current user.
	 * See [GlideUser](dev.do#!/reference/api/paris/server/c_GlideUserAPI "The GlideUser API provides access to information about the current user and current user roles. Using the GlideUser API avoids the need to use the slower GlideRecord queries to get user information.") for a list of available methods.
	 * 
	 * @example
	 * //
	 * var myUserObject = gs.getUser();
	 * 
	 * @returns GlideUser Reference to a scoped user object.
	 * 
	 */
	getUser() : GlideUser
	/**
	 * @description Executes a job for a scoped application.
	 * You can only use this method on a job in the same application as the script calling this method.
	 * 
	 * @example
	 * //
	 * scheduleImportJob: function () {
	 *   var jobId = '61847fe04c603300fa9bb64c2b491dac';
	 *   var now_GR = new GlideRecord('sysauto_script');
	 *   if (!now_GR.get(jobId)) {
	 *     throw new Error('Unable to find import job');
	 *   }
	 *   gs.executeNow(now_GR);
	 * }
	 * 
	 * @param job Job to run.
	 * 
	 * @returns string Returns the sys\_id of the scheduled job. Returns null if the job is global.
	 * 
	 */
	executeNow(job: GlideRecord) : string
	/**
	 * @description Sets the specified key to the specified value if the property is within the script's scope.
	 * Note: Care should be taken when setting system properties (sys\_properties) using this method as it causes a system-wide cache flush. Each flush can cause system degradation while the caches rebuild. If a value must be updated often, it should not be stored as a system property. In general, you should only place values in the sys\_properties table that do not frequently change.
	 * 
	 * @example
	 * //
	 * gs.setProperty("glide.foo","bar","foo");
	 * gs.info(gs.getProperty("glide.foo"));
	 * 
	 * @param key The key for the property to be set.
	 * @param value The value of the property to be set.
	 * @param description A description of the property.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setProperty(key: string,value: string,description: string) : void
	/**
	 * @description Encodes non-ASCII characters, unsafe ASCII characters, and spaces so the returned string can be used on the Internet. Uses UTF-8 encoding. Uses percent (%) encoding.
	 * @param url The string to be encoded.
	 * 
	 * @returns string A string with non-ASCII characters, unsafe ASCII characters, and spaces encoded.
	 * 
	 */
	urlEncode(url: string) : string
	/**
	 * @description Replaces UTF-8 encoded characters with ASCII characters.
	 * @param url A string with UTF-8 percent (%) encoded characters.
	 * 
	 * @returns string A string with encoded characters replaced with ASCII characters.
	 * 
	 */
	urlDecode(url: string) : string
	/**
	 * @description Takes an XML string and returns a JSON object.
	 * @example
	 * //
	 * var jsonObject = gs.xmlToJSON(xmlString);
	 * 
	 * @param xmlString The XML string to be converted.
	 * 
	 * @returns Object A JSON object representing the XML string. Null if unable to process the XML string.
	 * 
	 */
	xmlToJSON(xmlString: string) : Object
	/**
	 * @description Returns a date and time for a certain number of years ago.
	 * @param years An integer number of years
	 * 
	 * @returns string GMT beginning of the year that is the specified number of years ago, in the format yyyy-mm-dd hh:mm:ss.
	 * 
	 */
	yearsAgo(years: number) : string
	}
/**
	 * @description The Scoped GlideTableHierarchy API provides methods for handling information about table relationships.
	 * 
	 */
	declare class GlideTableHierarchy {
	/**
	 * @description Instantiates a GlideTableHierarchy object.
	 * @example
	 * //
	 * var table = new GlideTableHierarchy("incident"); 
	 * gs.info(table.getTables());
	 * 
	 * @param tableName The name of the table.
	 * 
	 */
	constructor(tableName: string) 
	/**
	 * @description Returns the table's name.
	 * @example
	 * //
	 * var table = new GlideTableHierarchy("incident"); 
	 * gs.info(table.getName());
	 * 
	 * @returns string The table's name.
	 * 
	 */
	getName() : string
	/**
	 * @description Returns an array of strings of the table names in the hierarchy.
	 * @example
	 * //
	 * var table = new GlideTableHierarchy("incident"); 
	 * gs.info(table.getTables());
	 * 
	 * @returns Array An array of strings containing the names of tables in the hierarchy.
	 * 
	 */
	getTables() : Array
	/**
	 * @description Returns an array of strings containing all tables that extend the current table.
	 * @example
	 * //
	 * var table = new GlideTableHierarchy("task"); 
	 * gs.info(table.getTableExtensions());
	 * 
	 * @returns Array An array of strings containing the tables that extend the current table.
	 * 
	 */
	getTableExtensions() : Array
	/**
	 * @description Returns an array of strings containing all tables that extend the current table and includes the current table.
	 * @example
	 * //
	 * var table = new GlideTableHierarchy("task"); 
	 * gs.info(table.getAllExtensions());
	 * 
	 * @returns Array An array of strings containing the tables in the hierarchy that includes the current table.
	 * 
	 */
	getAllExtensions() : Array
	/**
	 * @description Returns an array of strings containing all classes in the hierarchy of the current table.
	 * @example
	 * //
	 * var table = new GlideTableHierarchy("incident"); 
	 * gs.info(table.getHierarchy());
	 * 
	 * @returns Array An array of strings of the classes in the hierarchy.
	 * 
	 */
	getHierarchy() : Array
	/**
	 * @description Returns the top level class in the hierarchy.
	 * @example
	 * //
	 * var table = new GlideTableHierarchy("cmdb_ci_server"); 
	 * gs.info(table.getRoot());
	 * 
	 * @returns string The root class.
	 * 
	 */
	getRoot() : string
	/**
	 * @description Returns the parent class.
	 * @example
	 * //
	 * var table = new GlideTableHierarchy("cmdb_ci_server"); 
	 * gs.info(table.getBase());
	 * 
	 * @returns string The parent class.
	 * 
	 */
	getBase() : string
	/**
	 * @description Returns true if this is a base class.
	 * @example
	 * //
	 * var table = new GlideTableHierarchy("incident"); 
	 * gs.info(table.isBaseClass());
	 * 
	 * @returns boolean True if the current table has no parent and has extensions.
	 * 
	 */
	isBaseClass() : boolean
	/**
	 * @description Returns true if this table is not in a hierarchy.
	 * @example
	 * //
	 * var table = new GlideTableHierarchy("sys_user"); 
	 * gs.info(table.isSoloClass());
	 * 
	 * @returns boolean True if the current table has no parent and no extensions.
	 * 
	 */
	isSoloClass() : boolean
	/**
	 * @description Returns true of this class has been extended.
	 * @example
	 * //
	 * var table = new GlideTableHierarchy("incident"); 
	 * gs.info(table.hasExtensions());
	 * 
	 * @returns boolean True if the current table has extensions.
	 * 
	 */
	hasExtensions() : boolean
	}
/**
	 * @description Provides the ability to read single lines from an input stream. Because an input stream is used, it is not subject to the 5MB attachment size limit.
	 * 
	 */
	declare class GlideTextReader {
	/**
	 * @description Creates a scoped GlideTextReader object for the specified input stream.
	 * @param inputStream The input stream to be read.
	 * 
	 */
	constructor(inputStream: GlideScriptableInputStream) 
	/**
	 * @description Returns a single line from the input stream and returns a string. Since this is working off of a stream, it is not subject to the 5MB size limit.
	 * @example
	 * //
	 * var is = new GlideSysAttachment().getContentStream(attachmentSysId);
	 * var reader = new GlideTextReader(is);
	 * var ln = ' ';
	 * while((ln = reader.readLine()) != null) {
	 *   gs.info(ln);
	 * }
	 * 
	 * @returns string A single line of input up to the carriage return. Does not include the carriage return. Returns null if there is no content.
	 * 
	 */
	readLine() : string
	/**
	 * @description Returns the character encoding of the input stream.
	 * @returns string The character encoding of the input stream.
	 * 
	 */
	getEncoding() : string
	}
/**
	 * @description The scoped GlideTime class provides methods for performing operations on GlideTime objects, such as instantiating GlideTime objects or working with GlideTime fields.
	 * 
	 */
	declare class GlideTime {
	/**
	 * @description Instantiates a GlideTime object with its time starting at midnight UTC plus the passed in value.
	 * The value is adjusted for the timezone in which the instance resides. For example, if the user's instance is in a time zone that is -8 hours from the UTC, and 1000 is passed in, the time in the GlideTime object is 16:00:10 (00:00:00 - 8 hours +10 seconds.)
	 * 
	 * @example
	 * //This example shows adding 10 seconds to midnight (UTC), which is then adjusted for the time zone in which the instance resides. In this case, -8 hours from UTC.
	 * var gt = new GlideTime(10000); 
	 * gs.info(gt.getDisplayValue());
	 * 
	 * @param milliseconds Time to add to midnight UTC.  Unit: Milliseconds
	 * 
	 */
	constructor(milliseconds: number) 
	/**
	 * @description Instantiates a GlideTime object with the current time.
	 * @example
	 * //
	 * var gt = new GlideTime(); 
	 * gs.info(gt.getDisplayValue());
	 * 
	 */
	constructor() 
	/**
	 * @description Returns the time in the specified format.
	 * For information on the time formats that you can pass into this method, see [Global date and time field format](https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/time/reference/r_FormatDateAndTimeFields.html). You can pass these values in any order and add separators such as a dash, space, backslash, or colon. In addition, you can also pass the character "a" to return am/pm.
	 * 
	 * @example
	 * //
	 * var gt = new GlideTime(); 
	 * gt.setValue('12:00:00');
	 * gs.info(gt.getByFormat("HH:mm"));
	 * 
	 * @param format String to use to format the time.  For example, if the current time is 10:30:20 then:  *   hh:mm:ss = 10:30:20 *   HH = 10 *   HH –- ss = 10 –- 20 *   hh a = 10 AM *   s:m:H ss:mm:hh = 20:30:10 20:30:10 *   HH:mm:ss.SSSZ = 10:30:20.000+0000 *   HH/mm/ss = 10/30/20
	 * 
	 * @returns string Time in the specified format.
	 * 
	 */
	getByFormat(format: string) : string
	/**
	 * @description Gets the time in the current user's display format and time zone.
	 * When designing business rules or script includes remember that this method may return values in different formats for different users.
	 * 
	 * @example
	 * //
	 * var gt = new GlideTime();
	 * gt.setDisplayValue("12:00:00"); // User Time Zone
	 * gs.info(gt.getDisplayValue()); // User Time Zone
	 * 
	 * @returns string The time in the user's format and time zone.
	 * 
	 */
	getDisplayValue() : string
	/**
	 * @description Gets the display value in the current user's time zone and the internal format (HH:mm:ss).
	 * @example
	 * //
	 * var gt = new GlideTime();
	 * gt.setValue("01:00:00"); //Internal Time Zone , UTC
	 * gs.info(gt.getDisplayValueInternal()); //User Time Zone
	 * 
	 * @returns string The time value for the GlideTime object in the current user's time zone and the internal time format of HH:mm:ss.
	 * 
	 */
	getDisplayValueInternal() : string
	/**
	 * @description Sets a time value using the current user's display format and time zone.
	 * @example
	 * //
	 * var gt = new GlideTime();
	 * gt.setDisplayValue('01:00:00');   // User Time Zone
	 * gs.info(gt.getDisplayValueInternal()); // User Time Zone
	 * 
	 * @param asDisplayed The time in the current user's display format and time zone. The parameter must be formatted using the current user's preferred display format, such as HH:mm:ss.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setDisplayValue(asDisplayed: string) : void
	/**
	 * @description Gets the time value stored in the database by the GlideTime object in the internal format, HH:mm:ss, and the system time zone.
	 * @example
	 * //
	 * var gt = new GlideTime();
	 * gs.info(gt.getValue()); // Internal Time Zone, UTC
	 * 
	 * @returns string The time value in the internal fomat and system time zone.
	 * 
	 */
	getValue() : string
	/**
	 * @description Sets the time of the GlideTime object in the internal time zone.
	 * @example
	 * //
	 * var gt = new GlideTime();
	 * gt.setValue('01:00:00');  //Internal Time Zone, UTC
	 * gs.info("time is "+ gt.getByFormat('hh:mm:ss'));
	 * 
	 * @param o The time in hh:mm:ss format.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setValue(o: string) : void
	/**
	 * @description Gets the duration difference between two GlideTime object values.
	 * @example
	 * //
	 * var gd1 = new GlideTime(); 
	 * gd1.setDisplayValue("09:00:00"); 
	 * var gd2 = new GlideTime(); 
	 * gd2.setDisplayValue("09:10:00"); 
	 *  
	 * var dur = GlideDate.subtract(gd1, gd2); //the difference between gdt1 and gdt2 
	 * gs.info(dur.getDisplayValue());
	 * 
	 * @param startTime The start value.
	 * @param endTime The end value.
	 * 
	 * @returns GlideDuration The duration between the two values.
	 * 
	 */
	subtract(startTime: GlideTime,endTime: GlideTime) : GlideDuration
	/**
	 * @description Returns the hours part of the time using the UTC time zone. The number of hours is based on a 24 hour clock.
	 * @returns number The hours using the UTC time zone. The number of hours is based on a 24 hour clock.
	 * 
	 */
	getHourOfDayUTC() : number
	/**
	 * @description Returns the hours part of the time using the UTC time zone. The number of hours is based on a 12 hour clock. Noon and midnight are represented by 0, not 12.
	 * @returns number The hours using the UTC time zone. The number of hours is based on a 12 hour clock. Noon and midnight are represented by 0, not 12.
	 * 
	 */
	getHourUTC() : number
	/**
	 * @description Returns the number of minutes in the hour based on the UTC time zone.
	 * @returns number The number of minutes in the hour using the UTC time zone.
	 * 
	 */
	getMinutesUTC() : number
	/**
	 * @description Returns the hours part of the time using the local time zone. The number of hours is based on a 24 hour clock.
	 * @returns number The hours using the local time zone. The number of hours is based on a 24 hour clock.
	 * 
	 */
	getHourOfDayLocalTime() : number
	/**
	 * @description Returns the hours part of the time using the local time zone.
	 * @returns number The hours using the local time zone.
	 * 
	 */
	getHourLocalTime() : number
	/**
	 * @description Returns the number of minutes using the local time zone.
	 * @returns number The number of minutes using the local time zone.
	 * 
	 */
	getMinutesLocalTime() : number
	/**
	 * @description Returns the number of seconds in the current minute.
	 * @returns number The number of seconds in the minute.
	 * 
	 */
	getSeconds() : number
	}
/**
	 * @description Creates a GlideTransformLog object to log messages to localhost logs.
	 * 
	 */
	declare class GlideTransformLogScopedGlobal {
	/**
	 * @description Logs a message of type Error to localhost logs.
	 * @example
	 * //
	 * var importLog = new GlideTransformLog();
	 * importLog.error(‘Error executing transform’);
	 * 
	 * 
	 * @param message Transform log message.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	error(message: string) : void
	/**
	 * @description Instantiates an GlideTransformLog object.
	 * @example
	 * //
	 * var importLog = new GlideTransformLog();
	 * 
	 */
	constructor() 
	/**
	 * @description Logs a message of type Info to localhost logs.
	 * @example
	 * //
	 * var importLog = new GlideTransformLog();
	 * importLog.info(‘Successfully executed the transform.’);
	 * 
	 * 
	 * @param message Transform log message.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	info(message: string) : void
	/**
	 * @description Logs a message of type Warn to localhost logs.
	 * @example
	 * //
	 * var importLog = new GlideTransformLog();
	 * importLog.warn(‘Transform taking longer than expected’);
	 * 
	 * 
	 * @param message Transform log message.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	warn(message: string) : void
	}
/**
	 * @description The scoped GlideUICompatibility class provides the ability for scoped applications to define their own minimum browser versions. This is done by creating system properties for the scoped application.
	 * You create the properties using the sys\_properties list and assign a version number. When you do this from the scoped application, the prefix is automatically added to the property name. The scoped application UI compatibility properties are:  	
 *   	
 * 	
 * *   <scope-name>.ui.ie\_minimum	
 * *   <scope-name>.ui.chrome\_minimum	
 * *   <scope-name>.ui.firefox\_minimum	
 * *   <scope-name>.ui.safari\_major\_version\_minimum	
 * 	
 *   	
 *   	
 * You can then use the scoped GlideUICompatibility class to determine if the current browser is supported.
	 * 
	 */
	declare class GlideUICompatibility {
	/**
	 * @description Returns the terms "block" or "allow" based upon the browser version.
	 * @example
	 * //
	 * UICompatibility = new GlideUICompatibility(gs.getCurrentScopeName());
	 * var blockOrAllow = UICompatibility.getCompatibility();
	 * gs.info(blockOrAllow);
	 * 
	 * @returns string Either block or allow
	 * 
	 */
	getCompatibility() : string
	/**
	 * @description Creates a GlideUICompatibility object.
	 * @param scopeName The application's scope name
	 * 
	 */
	constructor(scopeName: string) 
	/**
	 * @description Determines if the browser is not supported.
	 * @example
	 * //
	 * UICompatibility = new GlideUICompatibility(gs.getCurrentScopeName());
	 * var blocked = UICompatibility.isBlocked();
	 * gs.info(blocked);
	 * 
	 * @returns boolean True if the browser is not supported.
	 * 
	 */
	isBlocked() : boolean
	}
/**
	 * @description Enables handling the URI parameter in scoped applications.
	 * For more information on using URIs:	
 * 	
 * *   [Navigate by URL](https://docs.servicenow.com/bundle/paris-platform-user-interface/page/use/navigation/task/navigate-using-url.html)	
 * *   [Navigation stack](https://docs.servicenow.com/bundle/paris-platform-user-interface/page/administer/navigation-and-ui/concept/c_NavigationStack.html)	
 * 	
 *   	
 *   	
 * See also: [GlideURI -Global](https://developer.servicenow.com/go_to_api.do?ID=GlideURIGlobalAPI;v=paris)
	 * 
	 */
	declare class GlideURI {
	/**
	 * @description Instantiates a GlideURI object.
	 */
	constructor() 
	/**
	 * @description Returns the value of the specified parameter.
	 * @example
	 * //
	 * var gURI = new GlideURI();
	 * gURI.set('sysparm_query', 'priority=2^active=true' );
	 * var fileString = gURI.get('sysparm_query');
	 * gs.info(fileString);
	 * 
	 * @param name The parameter name.
	 * 
	 * @returns string The value for the specified parameter.
	 * 
	 */
	get(name: string) : string
	/**
	 * @description Sets the specified parameter to the specified value.
	 * @example
	 * //
	 * var gURI = new GlideURI();
	 * gURI.set('sysparm_query', 'priority=2^active=true' );
	 * var fileString = gURI.get('sysparm_query');
	 * gs.info(fileString);
	 * 
	 * @param name The parameter name.
	 * @param value The value.
	 * 
	 * @returns None 
	 * 
	 */
	set(name: string,value: string) : None
	/**
	 * @description Reconstructs the URI string and performs the proper URL encoding by converting non-valid characters to their URL code. For example, converting & to '%26'.
	 * Parameters set with the set() method are encoded with the URI as well.
	 * 
	 * @example
	 * //
	 * var gURI = new GlideURI();
	 * fileString = gURI.toString('https://&lt;your instance&gt;.service-now.com/navpage.do');
	 * 
	 * @param path The base portion of the system URL to which the URI is appended.
	 * 
	 * @returns string The URL.
	 * 
	 */
	toString(path: string) : string
	/**
	 * @description Returns the file name portion of the URI.
	 * @example
	 * //
	 * var gURI = new GlideURI();
	 *  
	 * var fileString = gURI.getFileFromPath();
	 * gs.info(fileString);
	 * 
	 * @returns string The file name portion of the URI.
	 * 
	 */
	getFileFromPath() : string
	}
/**
	 * @description The scoped GlideUser API provides access to information about the current user and current user roles. Using the scoped GlideUser API avoids the need to use the slower GlideRecord queries to get user information.
	 * 
	 */
	declare class GlideUser {
	/**
	 * @description Returns the current user's company sys\_id.
	 * @example
	 * //
	 * var currentUser = gs.getUser(); 
	 * gs.info(currentUser.getCompanyID());
	 * 
	 * @returns string Company sys\_id
	 * 
	 */
	getCompanyID() : string
	/**
	 * @description Returns the current user's display name.
	 * @example
	 * //
	 * var currentUser = gs.getUser(); 
	 * gs.info(currentUser.getDisplayName());
	 * 
	 * @returns string User's display name
	 * 
	 */
	getDisplayName() : string
	/**
	 * @description Returns the identifier of the user's current session domain.
	 * The identifier that is returned depends on the domain type and the instantiation of that domain.
	 * 
	 * *   If the user is configured in the global domain, and does not use the domain picker to switch domains, the method returns null.
	 * *   If the user uses the domain picker to switch to the global domain, the method returns the string "global".
	 * *   For all other domains, the method returns the sys\_id of that domain.
	 * 
	 * @example
	 * //
	 * var domain = new GlideRecord('domain');
	 * domain.get(gs.getUser().getDomainID());
	 * gs.info(domain.name);
	 * 
	 * @returns string Domain identifier
	 * 
	 */
	getDomainID() : string
	/**
	 * @description Returns the user's email address.
	 * @example
	 * //
	 * var currentUser = gs.getUser(); 
	 * gs.info(currentUser.getEmail());
	 * 
	 * @returns string User's email address
	 * 
	 */
	getEmail() : string
	/**
	 * @description Returns the user's first name.
	 * @example
	 * //
	 * var currentUser = gs.getUser(); 
	 * gs.info(currentUser.getFirstName());
	 * 
	 * @returns string User's first name
	 * 
	 */
	getFirstName() : string
	/**
	 * @description Gets the sys\_id of the current user.
	 * @example
	 * //
	 * var currentUser = gs.getUser(); 
	 * gs.info(currentUser.getID());
	 * 
	 * @returns string User's sys\_id
	 * 
	 */
	getID() : string
	/**
	 * @description Returns the user's last name.
	 * @example
	 * //
	 * var currentUser = gs.getUser(); 
	 * gs.info(currentUser.getLastName());
	 * 
	 * @returns string User's last name
	 * 
	 */
	getLastName() : string
	/**
	 * @description Returns the user ID, or login name, of the current user.
	 * @example
	 * //
	 * var currentUser = gs.getUser(); 
	 * gs.info(currentUser.getName());
	 * 
	 * @returns string User ID
	 * 
	 */
	getName() : string
	/**
	 * @description Gets the specified user preference value for the current user.
	 * @example
	 * //
	 * var currentUser = gs.getUser(); 
	 * currentUser.savePreference(­'myPref','red'); 
	 * gs.info(currentUser.getPreference(­'myPref'));
	 * 
	 * @param name The name of the preference.
	 * 
	 * @returns string The preference value.
	 * 
	 */
	getPreference(name: string) : string
	/**
	 * @description Returns a list of roles that includes explicitly granted roles, inherited roles, and roles acquired by group membership.
	 * @example
	 * //
	 * var currentUser = gs.getUser(); 
	 * gs.info(currentUser.getRoles());
	 * 
	 * @returns Array List of all roles available to the user
	 * 
	 */
	getRoles() : Array
	/**
	 * @description Returns the list of roles explicitly granted to the user.
	 * Unlike the getRoles() method, this method does not return roles the user inherits or roles acquired from group membership.
	 * 
	 * @example
	 * //
	 * var currentUser = gs.getUser(); 
	 * gs.info(currentUser.getUserRoles());
	 * 
	 * @returns Array List of roles explicitly assigned to the user
	 * 
	 */
	getUserRoles() : Array
	/**
	 * @description Determines if the current user has the specified role.
	 * @example
	 * //
	 * var currentUser = gs.getUser(); 
	 * gs.info(currentUser.hasRole('admin'));
	 * 
	 * @param role Role to check
	 * 
	 * @returns boolean True if the user has the role.
	 * 
	 */
	hasRole(role: string) : boolean
	/**
	 * @description Determines if the current user is a member of the specified group.
	 * @example
	 * //
	 * var currentUser = gs.getUser(); 
	 * gs.info(currentUser.isMemberOf(­'Capacity Mgmt'));
	 * 
	 * @param group Group to check
	 * 
	 * @returns boolean True if the user is a member of the group.
	 * 
	 */
	isMemberOf(group: string) : boolean
	/**
	 * @description Saves a user preference value to the database.
	 * @example
	 * //
	 * var currentUser = gs.getUser(); 
	 * currentUser.savePreference('myPref','red'); 
	 * gs.info(currentUser.getPreference('myPref'));
	 * 
	 * @param name The preference to save.
	 * @param value The preference value.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	savePreference(name: string,value: string) : void
	}
/**
	 * @description Provides methods to remove invalid characters from an XML string, and to validate an XML string.
	 * Access these methods using the static object GlideXMLUtil. This class is available in scoped and global scripts.
	 * 
	 */
	declare class GlideXMLUtilScopedGlobal {
	/**
	 * @description Removes invalid characters from an XML string.
	 * @example
	 * //
	 * var test = "test\btab";
	 * var removedTest = GlideXMLUtil.removeInvalidChars(test);
	 * 
	 * gs.info(removedTest);
	 * 
	 * @param xmlString The string to be processed.
	 * 
	 * @returns string A string with invalid characters removed.
	 * 
	 */
	removeInvalidChars(xmlString: string) : string
	/**
	 * @description Determines if the specified string is valid XML.
	 * @example
	 * //
	 * var s = "&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;unload unload_date=\"2017-11-27 21:56:14\"&gt;&lt;incident action=\"INSERT_OR_UPDATE\"&gt;&lt;active&gt;true&lt;/active&gt;&lt;/incident&gt;&lt;/unload&gt;";
	 * var xml = GlideXMLUtil.validateXML(s,false, false);
	 * gs.info(xml);
	 * 
	 * 
	 * @param xmlString The string to be validated.
	 * @param nsAware When true, the validation is aware of name spaces. When false, the validation ignores name spaces.
	 * @param forgiveUnclosed When true, the validation does not check for tags enclosing the string.
	 * 
	 * @returns string Returns null if the string is valid. Returns an error string describing the error if the specified string is not valid.
	 * 
	 */
	validateXML(xmlString: string,nsAware: boolean,forgiveUnclosed: boolean) : string
	}
/**
	 * @description Provides scoped methods to create JSON objects from a string, and to turn JSON objects into strings.
	 * For scoped applications, the JSON API uses static methods that call the JavaScript ES5 native JSON object.
	 * 
	 */
	declare class JSON {
	/**
	 * @description Creates an object or primitive type from a JSON formatted string.
	 * @example
	 * //
	 * var str = '{"name":"George","lastname":"Washington"}';
	 * var obj = JSON.parse(str);
	 * gs.info('The first name is' + obj.name);
	 * 
	 * @param str A JSON formatted string.
	 * 
	 * @returns Object An object created from the specified string.
	 * 
	 */
	parse(str: string) : Object
	/**
	 * @description Creates a string from a JSON object.
	 * @example
	 * //
	 * var obj = {"name":"George","lastname":"Washington"};
	 * var str =  JSON.stringify(obj);
	 * gs.info('The object' + str);
	 * 
	 * 
	 * @param jsonObject The JSON object to be turned into a string.
	 * 
	 * @returns string A JSON formatted string.
	 * 
	 */
	stringify(jsonObject: Object) : string
	}
/**
	 * @description The NotifyConferenceUtil API provides methods to manage Notify conference calls and SMS messages for various telephony service providers, such as Zoom and WebEx.
	 * Using the NotifyConferenceUtil API you can:  	
 *   	
 * 	
 * *   Create new conference calls	
 * *   Add participants by phone number or user ID	
 * *   Remove participants from a conference call	
 * *   Mute participants in a conference call	
 * *   Unmute participants in a conference call	
 * *   Obtain the capabilities of a specified service provider	
 * *   End a conference call	
 * 	
 *   	
 *   	
 * You can use this API in both scoped and global scripts. To use this API you must activate the Conference Notify plugin (com.snc.notify) which requires a separate subscription. For details on activating this plugin, see [Activate Notify](https://docs.servicenow.com/bundle/paris-servicenow-platform/page/product/notify2/task/t_ActivateNotify.html).
	 * 
	 */
	declare class NotifyConferenceUtilScopedGlobal {
	/**
	 * @description Adds a participant to a specified conference call using their phone number to identify the participant.
	 * @example
	 * //
	 * function () {
	 * 	var confGR = new GlideRecord('notify_conference_call');
	 * 	confGR.get('76d3364d0b5133008e64aabcb4673a6d');
	 * 
	 * 	var confUtils = new NotifyConferenceUtils();
	 * 	var actionResult = confUtils.addToConferenceByPhoneNumber("+917799555331", confGR)
	 * 	if (actionResult.status)
	 * 		gs.info('Participant has been added to conference');
	 * 	else {
	 * 		gs.info('join operation failed');
	 * 		actionResult.warnMessages.forEach(function (msg) {
	 * 			gs.info(msg);
	 * 		});
	 * 		actionResult.errorMessages.forEach(function (msg) {
	 * 			gs.info(msg);
	 * 		})
	 * 	}
	 * })();
	 * 
	 * @param toNumber Phone number of the participant to add to the conference call.
	 * @param confGR GlideRecord of the conference call to which to add the specified participant. These records are located in the Notify Conference Call \[notify\_conference\_call\] table.
	 * 
	 * @returns Object Results of the conference action.  <action>.status: Status of the conference action.  *   Data type: Boolean *   Valid values:     *   true: Conference action succeeded     *   false: Conference action failed  <action>.successMessages: If status is true, success message(s), else empty.  *   Data type: Array of Strings  <action>.warnMessages: If status is false, any warning messages thrown during processing.  *   Data type: Array of Strings  <action>.errorMessages: If status is false, any error messages thrown during processing.  *   Data type: Array of Strings
	 * 
	 */
	addToConferenceByPhoneNumber(toNumber: string,confGR: GlideRecord) : Object
	/**
	 * @description Adds a participant to the conference call referenced by the passed in GlideRecord using their unique user identifier.
	 * @example
	 * //
	 * (function () {
	 * 	var confGR = new GlideRecord('notify_conference_call');
	 * 	confGR.get('76d3364d0b5133008e64aabcb4673a6d');
	 * 
	 * 	var confUtils = new NotifyConferenceUtils();
	 * 	var actionResult = confUtils.addToConferenceByUserId(gs.getUserID(), confGR)
	 * 	if (actionResult.status)
	 * 		gs.info('Participant has been added to conference');
	 * 	else {
	 * 		gs.info('join operation failed');
	 * 		actionResult.warnMessages.forEach(function (msg) {
	 * 			gs.info(msg);
	 * 		});
	 * 		actionResult.errorMessages.forEach(function (msg) {
	 * 			gs.info(msg);
	 * 		})
	 * 	}
	 * })();
	 * 
	 * 
	 * @param userId Sys ID of the participant to add to the specified conference call. This information is located in the User \[sys\_user\] table.
	 * @param confGR GlideRecord of the conference call to add the specified participant. These records are located in the Notify Conference Call \[notify\_conference\_call\] table.
	 * 
	 * @returns Object Results of the conference action.  <action>.status: Status of the conference action.  *   Data type: Boolean *   Valid values:     *   true: Conference action succeeded     *   false: Conference action failed  <action>.successMessages: If status is true, success message(s), else empty.  *   Data type: Array of Strings  <action>.warnMessages: If status is false, any warning messages thrown during processing.  *   Data type: Array of Strings  <action>.errorMessages: If status is false, any error messages thrown during processing.  *   Data type: Array of Strings
	 * 
	 */
	addToConferenceByUserId(userId: string,confGR: GlideRecord) : Object
	/**
	 * @description Performs the specified conference call action, such as starting/ending a conference call or joining, removing, muting, or unmuting participants from a conference call.
	 * You can start a new conference call and add participants within a single call to this method or call the method multiple times to start the call and then manage participants separately. In addition, through the passed in data object, you can configure the method to:
	 * 
	 * *   Save pointers in the conference call record to the specific record (source record), such as an incident or problem, that is the topic of discussion for the conference call.
	 * *   Allow/disallow multiple conference calls for a source record.
	 * *   Automatically log the participants that were in the conference call in the "Work Notes" field of the source record.
	 * *   Have a message read aloud when a participant answers an outgoing call from the conference.
	 * 
	 * @example
	 * //
	 * (function (confId) {
	 * 	var confUtils = new NotifyConferenceUtils();
	 * 	var data = confUtils.getConferenceInputDataTemplate();
	 * 	data.table = 'incident';
	 * 	data.sysId = '1234';
	 * 	data.addToWorkNotes = false;
	 * 	data.confId = confId;
	 * 	data.message = 'p1 incident has been created';
	 * 	data.fromNumber = 'twilio/Telephony driver number';
	 * 	data.items.push({ id: 'user3SysId', phoneNumber: '+917799555332' });
	 * 	data.items.push({ id: 'user4SysId', email: 'yln99518@gmail.com' });
	 * 
	 * 	var result = confUtils.doConferenceAction('start', data);
	 * 	if (result.status) {
	 * 		gs.info('Start conference action succeeded');
	 * 	} else
	 * 		gs.info('Start conference action failed');
	 * 
	 * 	result.errorMessages.forEach(function (msg) {
	 * 		gs.info(msg);
	 * 	});
	 * 	result.warnMessages.forEach(function (msg) {
	 * 		gs.info(msg);
	 * 	});
	 * 	result.successMessages.forEach(function (msg) {
	 * 		gs.info(msg);
	 * 	});
	 * })('activeConfSysId');
	 * 
	 * 
	 * @param action Defines the conference call action to perform.  The following are the available conference call actions:  *   start: Starts the conference call identified in data.confId *   end: Terminates the conference call identified in data.confId *   join: Adds the participant specified in the data.items array to the conference call identified in data.confId *   multiJoin: Adds the participants specified in the data.items array to the conference call identified in data.confId *   selfJoin: Adds the currently logged in user to the conference call (no entry in data.items required.) *   kick: Removes the participant specified in the data.items array from the conference call identified in data.confId *   multiKick: Removes the participants specified in the data.items array from the conference call identified in data.confId *   mute: Mutes the participant specified in the data.items array on the conference call identified in data.confId *   multiMute: Mutes the participants specified in the data.items array on the conference call identified in data.confId *   unmute: Unmutes the participant specified in the data.items array from the conference call identified in data.confId *   multiUnmute: Unmutes the participants specified in the data.items array from the conference call identified in data.confId
	 * @param data Object that describes the conference call.
	 * @param addToWorkNotes Flag that indicates whether to add information about the participants that were included in the conference call in the work notes field of the associated record.  For this functionality to work, you must also specify values in the data.table and data.sysId parameters. These parameters identify the record in which to add the work notes.  Default: false  Actions for which this parameter is valid:  *   start *   join *   multiJoin *   selfJoin
	 * @param allowMulticonference Flag that indicates whether to allow multiple conference calls for a specific record at one time.  For this functionality to work, you must also specify values in the data.table and data.sysId parameters. These parameters identify the record that is allowed to have multiple conference calls.  Default: false  Actions for which this parameter is valid:  *   start
	 * @param confId Sys ID of the conference call.  The conference Sys ID is located in the Notify Conference Call \[notify\_conference\_call\] table.  Actions for which this parameter is required:  *   end *   join *   multiJoin *   selfJoin  Note: Participant actions such as mute, unmute, and kick do not require this parameter to be set as the method obtains this information from the Notify Conference Call Participant \[notify\_participant\] table.
	 * @param fromNumber Service provider number to call into for the conference call.  Locate this value in the Number or Phone number column of the Notify Phone Number \[notify\_number\] table.  Actions for which this parameter is required:  *   start
	 * @param isNewConference Flag that indicates whether this is a new or an existing conference call.  Valid values:  *   true: New conference call *   false: Existing conference call  Default: false  Actions for which this parameter is valid:  *   start
	 * @param items Information for each participant to include in the conference call.  Valid array values:  *   id: Sys ID of user; located in the User \[sys\_User\] table.          Valid actions: join, multiJoin, start      *   notifyParticipantId: Sys ID of the Notify participant; located in the Notify Participant \[notify\_participant\] table.          Valid actions: join, kick, multiJoin, mute, start, unmute      *   phoneNumber: Phone number of the participant. If this value is passed in conjunction with either the id or notifyParticipantId, this value supersedes the phone numbers in the user/participant record and is used to place the call.          Valid actions: join, multiJoin, start      *   email: Email address of the participant.          Valid actions: join, multiJoin, start
	 * @param message Message that is read aloud when a user answers the call, such as, "P1 incident has been created please login to instance."  Actions for which this parameter is valid:  *   start *   join *   multiJoin
	 * @param serviceProvider Required. Name of conference service provider, such as Zoom or Webex.  Actions for which this parameter is required:  *   all
	 * @param sysId Sys ID of the source record to associate with the conference call.  For example, if a conference call is held to discuss a specific incident or problem, put the Sys ID of the incident or problem record in this value. This Sys ID is stored in the Source column of the NotifyConference Call \[notify\_conference\_call\] table and can later be tracked.  This parameter is used in conjunction with the data.Table, data.addToWorkNotes, and allowMulticonference parameters.  Actions for which this parameter is valid:  *   start
	 * @param table Table that contains the source record to associate with the conference call. A source record can be any record, such as an "incident" or "problem", that is the topic of discussion in the conference call.  This table name is stored in the Table column of the NotifyConference Call \[notify\_conference\_call\] table and can be tracked.  This parameter is used in conjunction with the data.sysId, data.addToWorkNotes, and allowMulticonference parameters.  Actions for which this parameter is valid:  *   start
	 * 
	 * @returns Object Results of the conference action.  <action>.status: Status of the conference action.  *   Data type: Boolean *   Valid values:     *   true: Conference action succeeded     *   false: Conference action failed  <action>.successMessages: If status is true, success message(s), else empty.  *   Data type: Array of Strings  <action>.warnMessages: If status is false, any warning messages thrown during processing.  *   Data type: Array of Strings  <action>.errorMessages: If status is false, any error messages thrown during processing.  *   Data type: Array of Strings
	 * 
	 */
	doConferenceAction(action: string,data: Object,addToWorkNotes: boolean,allowMulticonference: boolean,confId: string,fromNumber: string,isNewConference: boolean,items: Array,message: string,serviceProvider: string,sysId: string,table: string) : Object
	/**
	 * @description Returns a JSON data template to use with the doConferenceAction() method. Using this template automatically structures the data object so that you don't have to manually create it.
	 * Call this method prior to calling the doConferenceAction() method. For the desired conference call action, set the desired parameters within the template, and then pass the template in the doConferenceAction() call. For additional information on the valid parameters for each action, see [doConferenceAction()](https://docs.servicenow.com/bundle/paris-application-development/page/app-store/dev_portal/API_reference/NotifyConferenceUtils/concept/NotifyConferenceUtils.html#NUtil-doConferenceAction_S_O).
	 * 
	 * Note: This is a helper method. You can also manually construct this object and pass that object into the doConferenceAction() method and have the same outcome.
	 * 
	 * @example
	 * //
	 * (function (confId) {
	 * 	var confUtils = new NotifyConferenceUtils();
	 * 	var data = confUtils.getConferenceInputDataTemplate();
	 * 	data.confId = confId;
	 * 	var result = confUtils.doConferenceAction('end', data);
	 * 	if (result.status) {
	 * 		gs.info('Conference call has been ended');
	 * 	} else
	 * 		gs.info('End conference call action failed');
	 * 
	 * 	result.errorMessages.forEach(function (msg) {
	 * 		gs.info(msg);
	 * 	});
	 * 	result.warnMessages.forEach(function (msg) {
	 * 		gs.info(msg);
	 * 	});
	 * 	result.successMessages.forEach(function (msg) {
	 * 		gs.info(msg);
	 * 	});
	 * })('activeConfSysId');
	 * 
	 * @returns data.table Table that contains the source record to associate with the conference call. A source record can be any record, such as an "incident" or "problem", that is the topic of discussion in the conference call.  This table name is stored in the Table column of the NotifyConference Call \[notify\_conference\_call\] table and can be tracked.  This parameter is used in conjunction with the data.sysId, data.addToWorkNotes, and allowMulticonference parameters.  Actions for which this parameter is valid:  *   start
	 * 
	 */
	getConferenceInputDataTemplate() : data.table
	/**
	 * @description Returns the capabilities of all telephony service provider drivers in the instance.
	 * Possible capabilities include:
	 * 
	 * *   archive: archives the conference after it ends
	 * *   beepOnLeave: plays a "beep" tone when a participant leaves the conference call
	 * *   beepOnJoin: plays a "beep" tone when a participant joins the conference call
	 * *   end: ends the identified conference call
	 * *   filesharing: allows file sharing between participants
	 * *   join: adds a participant to a conference call
	 * *   kick: removes a participant from a conference call
	 * *   multiJoin: adds multiple participants to a conference call
	 * *   multiKick: removes multiple participants from a conference call
	 * *   muteOnJoin: mutes a participant when they initially join a conference call
	 * *   multiUnmute: unmutes multiple participants for a conference call
	 * *   record: records conference calls
	 * *   recording: provides an on-screen indicator when the conference call is being recorded
	 * *   screenSharing: allows participant screens to be shared with the group
	 * *   selfJoin: adds the current logged in user to a conference call
	 * *   speaking: provides an on-screen message as to who is currently speaking
	 * *   start: starts the identified conference call
	 * *   unmute: unmutes a participant in a conference call
	 * 
	 * @example
	 * //List driver capabilities for all telephony service provider drivers in the instance.
	 * (function () {
	 * 	var confUtils = new NotifyConferenceUtils();
	 * 	var providerToCapability = confUtils.getServiceProvidersCapabilites();
	 * 	for (var provider in providerToCapability) {
	 * 		gs.info('{0} supported capabilities \n\n', provider);
	 * 		var capabilities = providerToCapability[provider]
	 * 		for (var cap in capabilities)
	 * 			if(confUtils.isActionSupported(capabilities[cap].isSupported))
	 * 				gs.info('"{0}" action supported', cap);
	 * 			else
	 * 				gs.info("'{0}' action is not supported by this conference driver", cap);
	 * 	}
	 * })();
	 * 
	 * 
	 * @returns Object Key-value pairs of the status of each driver capability.  Valid values:  *   isSupported = 0: capability is not supported *   isSupported = 1: capability is supported
	 * 
	 */
	getServiceProvidersCapabilities() : Object
	/**
	 * @description Determines whether a Notify conference action is supported by a telephony service provider.
	 * To use this method, you must first call the getServiceProviderCapabilities() method. This method returns an object that contains information about the availability of each possible Notify conference action for each service provider configured in your instance.
	 * 
	 * For example:
	 * 
	 * {
	 *     "Telephony": {
	 *         "start": {
	 *             "isSupported": 1,
	 *             "meta": {}
	 *         },
	 *         "end": {
	 *             "isSupported": 1,
	 *             "meta": {}
	 *         },
	 *         "selfJoin": {
	 *             "isSupported": 1,
	 *             "meta": {}
	 *         },
	 *         "join": {
	 *             "isSupported": 1,
	 *             "meta": {}
	 *         },
	 *         "multiJoin": {
	 *             "isSupported": 1,
	 *             "meta": {}
	 *         },
	 *         "mute": {
	 *             "isSupported": 1,
	 *             "meta": {}
	 *         },
	 *         "multiMute": {
	 *             "isSupported": 1,
	 *             "meta": {}
	 *         },
	 *         "unmute": {
	 *             "isSupported": 1,
	 *             "meta": {}
	 *         },
	 *         "multiUnmute": {
	 *             "isSupported": 1,
	 *             "meta": {}
	 *         },
	 *         "kick": {
	 *             "isSupported": 1,
	 *             "meta": {}
	 *         },
	 *         "multiKick": {
	 *             "isSupported": 1,
	 *             "meta": {}
	 *         },
	 *         "record": {
	 *             "isSupported": 0,
	 *             "meta": {}
	 *         },
	 *         "speaking": {
	 *             "isSupported": 0,
	 *             "meta": {}
	 *         },
	 *         "recording": {
	 *             "isSupported": 0,
	 *             "meta": {}
	 *         },
	 *         "screenSharing": {
	 *             "isSupported": 0,
	 *             "meta": {}
	 *         },
	 *         "fileSharing": {
	 *             "isSupported": 0,
	 *             "meta": {}
	 *         },
	 *         "archive": {
	 *             "isSupported": 0,
	 *             "meta": {}
	 *         },
	 *         "muteOnJoin": {
	 *             "isSupported": 0,
	 *             "meta": {}
	 *         },
	 *         "beepOnJoin": {
	 *             "isSupported": 0,
	 *             "meta": {}
	 *         },
	 *         "beepOnLeave": {
	 *             "isSupported": 0,
	 *             "meta": {}
	 *         }
	 *     }
	 * }
	 * 
	 * @example
	 * //
	 * (function () {
	 *   var confUtils = new NotifyConferenceUtils();
	 *   var providerToCapability = confUtils.getServiceProvidersCapabilites();
	 *     for (var provider in providerToCapability) {
	 *       gs.info('{0} supported capabilities \n\n', provider);
	 *       var capabilities = providerToCapability[provider]
	 *       for (var cap in capabilities)
	 *         if (confUtils.isActionSupported(capabilities[cap].isSupported))
	 *           gs.info('"{0}" action supported', cap);
	 *         else
	 *           gs.info("'{0}' action is not supported by this conference driver", cap);
	 *     }
	 * })();
	 * 
	 * @param action Value of the isSupported parameter returned by the getServiceProvidersCapabilities() method for a specific action and service provider.  Note: Although the isSupported value may appear to be a Boolean, it is actually a Number. Do not try and evaluate the capabilities as Boolean values. Use this method as the associated values may be expanded in future versions.
	 * 
	 * @returns boolean Flag that indicates whether the telephony service provider supports the specified action.  Valid values:  *   true: action is supported by the service provider *   false: action is not supported by the service provider
	 * 
	 */
	isActionSupported(action: number) : boolean
	/**
	 * @description Removes the participant associated with the passed in GlideRecord from the current conference call.
	 * @example
	 * //
	 * (function () {
	 *     var confUtils = new NotifyConferenceUtils();
	 *     var participantGR = new GlideRecord('notify_participant');  // Participant record contains conf call ID
	 *     participantGR.get('validParticipantSysId');
	 *     var actionResult = confUtils.kickByParticipantGR(participantGR);
	 *     if (actionResult.status)
	 *         gs.info('Participant has been kicked out of conference');
	 *     else {
	 *         gs.info('kick operation failed');
	 *         actionResult.warnMessages.forEach(function (msg) {
	 *             gs.info(msg);
	 *         });
	 *         actionResult.errorMessages.forEach(function (msg) {
	 *             gs.info(msg);
	 *         })
	 *     }
	 * })()
	 * 
	 * 
	 * @param notifyParticipantGR GlideRecord object of the participant to remove from the conference call. These records are located in the Notify Participant \[notify\_participant\] table.
	 * 
	 * @returns Object Results of the conference action.  <action>.status: Status of the conference action.  *   Data type: Boolean *   Valid values:     *   true: Conference action succeeded     *   false: Conference action failed  <action>.successMessages: If status is true, success message(s), else empty.  *   Data type: Array of Strings  <action>.warnMessages: If status is false, any warning messages thrown during processing.  *   Data type: Array of Strings  <action>.errorMessages: If status is false, any error messages thrown during processing.  *   Data type: Array of Strings
	 * 
	 */
	kickByParticipantGR(notifyParticipantGR: GlideRecord) : Object
	/**
	 * @description Mutes the participant associated with the passed in GlideRecord on the current conference call.
	 * @example
	 * //
	 * (function () {
	 *     var confUtils = new NotifyConferenceUtils();
	 *     var participantGR = new GlideRecord('notify_participant');
	 *     participantGR.get('validSysId');
	 *     var actionResult = confUtils.muteByParticipantGR(participantGR);
	 *     if (actionResult.status)
	 *         gs.info('Participant has been muted');
	 *     else {
	 *         gs.info('mute operation failed');
	 *         actionResult.warnMessages.forEach(function (msg) {
	 *             gs.info(msg);
	 *         });
	 *         actionResult.errorMessages.forEach(function (msg) {
	 *             gs.info(msg);
	 *         })
	 *     }
	 * })()
	 * 
	 * @param notifyParticipantGR GlideRecord object of the participant to mute. These records are located in the Notify Participant \[notify\_participant\] table.
	 * 
	 * @returns Object Results of the conference action.  <action>.status: Status of the conference action.  *   Data type: Boolean *   Valid values:     *   true: Conference action succeeded     *   false: Conference action failed  <action>.successMessages: If status is true, success message(s), else empty.  *   Data type: Array of Strings  <action>.warnMessages: If status is false, any warning messages thrown during processing.  *   Data type: Array of Strings  <action>.errorMessages: If status is false, any error messages thrown during processing.  *   Data type: Array of Strings
	 * 
	 */
	muteByParticipantGR(notifyParticipantGR: Object) : Object
	/**
	 * @description Instantiates a NotifyConferenceUtils object (constructor).
	 * @example
	 * //
	 * function () {
	 * 	var confGR = new GlideRecord('notify_conference_call');
	 * 	confGR.get('76d3364d0b5133008e64aabcb4673a6d');
	 * 
	 * 	var confUtils = new NotifyConferenceUtils();
	 * 	var actionResult = confUtils.addToConferenceByPhoneNumber("+917799555331", confGR)
	 * 	if (actionResult.status)
	 * 		gs.info('Participant has been added to conference');
	 * 	else {
	 * 		gs.info('join operation failed');
	 * 		actionResult.warnMessages.forEach(function (msg) {
	 * 			gs.info(msg);
	 * 		});
	 * 		actionResult.errorMessages.forEach(function (msg) {
	 * 			gs.info(msg);
	 * 		})
	 * 	}
	 * })();
	 * 
	 */
	constructor() 
	/**
	 * @description Unmutes the participant associated with the passed in GlideRecord on the current conference call.
	 * @example
	 * //
	 * (function () {
	 *     var confUtils = new NotifyConferenceUtils();
	 *     var participantGR = new GlideRecord('notify_participant');
	 *     participantGR.get('validSysId');
	 *     var actionResult = confUtils.unmuteByParticipantGR(participantGR);
	 *     if (actionResult.status)
	 *         gs.info('Participant has been Unmuted');
	 *     else {
	 *         gs.info('Unmute operation failed');
	 *         actionResult.warnMessages.forEach(function (msg) {
	 *             gs.info(msg);
	 *         });
	 *         actionResult.errorMessages.forEach(function (msg) {
	 *             gs.info(msg);
	 *         })
	 *     }
	 * })();
	 * 
	 * 
	 * @param notifyParticipantGR GlideRecord object of the participant to unmute. These records are located in the Notify Participant \[notify\_participant\] table.
	 * 
	 * @returns Object Results of the conference action.  <action>.status: Status of the conference action.  *   Data type: Boolean *   Valid values:     *   true: Conference action succeeded     *   false: Conference action failed  <action>.successMessages: If status is true, success message(s), else empty.  *   Data type: Array of Strings  <action>.warnMessages: If status is false, any warning messages thrown during processing.  *   Data type: Array of Strings  <action>.errorMessages: If status is false, any error messages thrown during processing.  *   Data type: Array of Strings
	 * 
	 */
	unmuteByParticipantGR(notifyParticipantGR: GlideRecord) : Object
	}
/**
	 * @description The Optional API interacts with a single record returned by the GlideQuery, Stream, or GlideRecord APIs, even when it does not exist. Write scripts that are less likely to result in an error by handling null or undefined query results.
	 * You can get an Optional object in these ways:  	
 *   	
 * 	
 * *   Return an Optional object from these methods in the GlideQuery class. For more information, see [GlideQuery](../../GlideQuery/concept/GlideQueryGlobalAPI.html "The GlideQuery API is an alternative to GlideRecord to perform CRUD operations on record data from server-side scripts.").	
 *     *   [getBy()](../../GlideQuery/reference/GQ-getBy_O_O.html "Returns an Optional object containing a single record based on a set of name-value pairs to query by. Assumes the '=' operator for each name-value pair.")	
 *     *   [get()](../../GlideQuery/reference/GQ-get_S_O.html "Returns a single record from the query.")	
 *     *   [insert()](../../GlideQuery/reference/GQ-insert_O_O.html "Inserts a record and returns an Optional object containing the record.")	
 *     *   [insertOrUpdate()](../../GlideQuery/reference/GQ-insertOrUpdate_O_O.html "Updates an existing record, or inserts a new record if one does not already exist.")	
 *     *   [update()](../../GlideQuery/reference/GQ-update_O_O.html "Updates an existing record that matches the defined conditions.")	
 *     *   [selectOne()](../../GlideQuery/reference/GQ-selectOne_S.html "Returns the result of the query as an Optional object containing specified fields.")	
 *     *   [avg()](../../GlideQuery/reference/GQ-avg_S.html "Returns the aggregate average of a given numeric field.")	
 *     *   [max()](../../GlideQuery/reference/GQ-max_S.html "Returns the aggregate maximum of a given field.")	
 *     *   [min()](../../GlideQuery/reference/GQ-min_S.html "Returns the aggregate minimum of a given field.")	
 *     *   [sum()](../../GlideQuery/reference/GQ-sum_S.html "Returns the aggregate sum of a given numeric field.")	
 * *   Return an Optional object from the [find()](../../Stream/reference/Stream-find_F.html "Returns the first record or item in the Stream object that matches the predicate function. If no predicate function is provided, then the method returns the first record or item in the Stream.") method in the Stream class. For more information on Stream, see the [Stream](../../Stream/concept/StreamGlobalAPI.html "The Stream API interacts with a stream of items such as records. For example, you can use the forEach() method to update the state of each record in a stream returned by the GlideQuery API.") API.	
 * *   Use the [lazy()](../reference/Optional-lazy_F.html "Returns a new Optional object. Instead of containing the record, the object contains a function to get the record that is only called if and when requested in the code.") method to generate the value of the Optional if ever needed.	
 * 	
 *   	
 *   	
 * These methods are static and do not require an instance of the class:  	
 *   	
 * 	
 * *   [lazy()](../reference/Optional-lazy_F.html "Returns a new Optional object. Instead of containing the record, the object contains a function to get the record that is only called if and when requested in the code.")	
 * *   [of()](../reference/Optional-of_A.html "Wraps a given value in an Optional object. For example, you can wrap the result of a GlideRecord query in an Optional object to use the associated methods.")	
 * *   [empty()](../reference/Optional-empty_S.html "Returns an empty Optional object. Use this method in an Else clause to handle a query that might not return a result.")	
 * 	
 *   	
 *   	
 * You can use these static methods with any API that returns a single value such as [GlideRecord](dev.do#!/reference/api/paris/server/no-namespace/c_GlideRecordScopedAPI "Scoped GlideRecord is used for database operations.").  	
 *   	
 * Use the Optional API in scoped or global server-side scripts. This API requires the GlideQuery \[com.sn\_glidequery\] plugin.  	
 *   	
 * 	
 * Implementation	
 * --------------	
 * 	
 * This API can work with the [GlideQuery](../../GlideQuery/concept/GlideQueryGlobalAPI.html "The GlideQuery API is an alternative to GlideRecord to perform CRUD operations on record data from server-side scripts.") and [Stream](../../Stream/concept/StreamGlobalAPI.html "The Stream API interacts with a stream of items such as records. For example, you can use the forEach() method to update the state of each record in a stream returned by the GlideQuery API.") APIs in a builder pattern where the method calls chain together, each method building on the returned result of the previous method. Use methods to define the attributes of the query. The methods do not execute until you call a terminal method, a method that returns a query result, allowing you to define the requirements of the query before executing it.	
 * 	
 * If the query returns a single record, the system wraps the result in an Optional object. If the query returns a stream of records, the system wraps the result in a Stream object. These objects let you manage the result using a set of methods in each API.	
 * 	
 * For example, here's a script that performs a query on the Task table and groups the records by priority and returns groups with total reassignments greater than four.	
 * 	
 *     var query = new global.GlideQuery('task')	
 *         .where('active', true) //Returns new GlideQuery object with a "where" clause.	
 *         .groupBy('priority') //Returns new GlideQuery object with a "group by" clause.	
 *         .aggregate('sum', 'reassignment_count') //Returns new GlideQuery object with a "sum(reassignment_count)" clause.	
 *         .having('sum', 'reassignment_count', '>', 4) //Returns new GlideQuery object with a "having reassignment_count > 4" clause.	
 *         .select() //Returns a stream of records wrapped in a Stream object.  	
 *         .toArray(10); //Terminal method in the Stream class that executes the query and returns the result. 	
 * 	
 *   	
 *   	
 * 	
 * Terminal methods	
 * ----------------	
 * 	
 * For performance reasons, a query only fetches data when you call a terminal method. These are the terminal methods from the Optional class:	
 * 	
 * *   [get()](../reference/Optional-get.html "Returns the record inside the Optional object, or returns an error if the query does not return a record.")	
 * *   [orElse()](../reference/Optional-orElse.html "Adds a default value within the Optional object if the query does not return any results.")	
 * *   [ifPresent()](../reference/Optional-ifPresent_F.html "Applies a function to the record within an Optional object. If the Optional object does not contain a record, the function does not execute.")	
 * *   [isEmpty()](../reference/Optional-isEmpty.html "Returns true if the Optional object is empty.")	
 * *   [isPresent()](../reference/Optional-isPresent.html "Checks whether an Optional object contains a value.")
	 * 
	 */
	declare class Optional {
	/**
	 * @description Returns an empty Optional object. Use this method in an Else clause to handle a query that might not return a result.
	 * Note: This method is static. You do not need an instance of the class to use this method.
	 * 
	 * @example
	 * //This example shows you how to generate an empty Optional object when a query does not return a result.
	 * var now_GR = new GlideRecord('task');
	 * now_GR.addQuery('approval', 'not requested'); 
	 * now_GR.query();
	 * var optional;
	 * if (now_GR.next()) {
	 *     optional = Optional.of(now_GR.getUniqueValue());
	 * } else {
	 *     optional = Optional.empty("no results");
	 * }
	 * 
	 * gs.info(optional.get());
	 * 
	 * @param reason Optional. Reason displayed in the log when Optional.get() is called on the empty Optional object.
	 * 
	 * @returns Optional Object used to interact with a single record.
	 * 
	 */
	empty(reason: string) : Optional
	/**
	 * @description Applies a predicate function, a function that takes a single value and returns true or false, to the record inside the Optional object. If the function returns true, the method returns the Optional record unchanged. If the function returns false, it returns an empty Optional object.
	 * @example
	 * //This example shows you how to apply a filter function to an Optional result.
	 * var filteredQuery = new global.GlideQuery('sys_user')
	 *     .getBy({ sys_id: 'f682abf03710200044e0bfc8bcbe5d38' }, ['phone'])
	 *     .filter(function (user) {
	 *         return phoneRegex.test(user.phone);
	 *     });
	 * 
	 * @param predicate Predicate function to apply to the value inside the Optional object. Must return a Boolean value.
	 * 
	 * @returns Optional Object used to interact with a single record.
	 * 
	 */
	filter(predicate: Function) : Optional
	/**
	 * @description Applies a function that returns an Optional object to the result of a query. Use this method to perform a second query using the result of the first.
	 * @example
	 * //This example shows how to execute a query of the User table based on the result of a previous query.
	 * new global.GlideQuery('alm_asset')
	 *     .whereNotNull('owned_by')
	 *     .selectOne('owned_by')
	 *     .flatMap(function (asset) {
	 *         return new global.GlideQuery('sys_user')
	 *             .getBy({ sys_id: asset.owned_by }, ['first_name', 'last_name', 'company.name'])
	 *     })
	 *     .ifPresent(GQ.jsonDebug);
	 * 
	 * @param fn Function to apply to the results of the query that returned the Optional object.
	 * 
	 * @returns Optional Object used to interact with a single record.
	 * 
	 */
	flatMap(fn: Function) : Optional
	/**
	 * @description Returns the record inside the Optional object, or returns an error if the query does not return a record.
	 * @example
	 * //This example shows how to get the value of a single record.
	 * var value = new global.GlideQuery('sys_user')
	 *     .selectOne('first_name') //Returns the result of the query inside an Optional object
	 *     .get(); //Calls Optional.get() on the Optional object
	 * 
	 * gs.info(JSON.stringify(value));
	 * 
	 * @returns Any The record inside the Optional object. If the value is null or undefined, the system returns an error.
	 * 
	 */
	get() : Any
	/**
	 * @description Applies a function to the record within an Optional object. If the Optional object does not contain a record, the function does not execute.
	 * @example
	 * //This example shows how to print a value if it exists.
	 * var user = new global.GlideQuery('sys_user')
	 *     .where('sys_id', 'f682abf03710200044e0bfc8bcbe5d38')
	 *     .selectOne('zip')
	 *     .ifPresent(function (user) {
	 *       gs.info('Zip Code: ' + user.zip);
	 *     });
	 * 
	 * @param fn The function to apply to the record within the Optional object.
	 * 
	 * @returns None 
	 * 
	 */
	ifPresent(fn: Function) : None
	/**
	 * @description Returns true if the Optional object is empty.
	 * @example
	 * //This example shows how to check whether the result of a query is empty.
	 * var checkEmpty = new global.GlideQuery('sys_user')
	 *     .where('last_name', 'Barker')
	 *     .selectOne()
	 *     .isEmpty();
	 * 
	 * gs.info(checkEmpty);
	 * 
	 * @returns boolean Flag that indicates whether the result of a query contains a value.  Valid values:  *   true: The query returns null or undefined. *   false: The query returns a value.
	 * 
	 */
	isEmpty() : boolean
	/**
	 * @description Checks whether an Optional object contains a value.
	 * @example
	 * //This example shows how to check whether a query returns a result.
	 * var checkPresent = new global.GlideQuery('sys_user')    
	 *    .where('last_name', 'Luddy')
	 *    .selectOne('first_name')
	 *    .isPresent();
	 * 
	 * gs.info(checkPresent);
	 * 
	 * @returns boolean Flag that indicates whether the result of a query contains a value.  Valid values:  *   true: The query returns a value. *   false: The query returns null or undefined.
	 * 
	 */
	isPresent() : boolean
	/**
	 * @description Returns a new Optional object. Instead of containing the record, the object contains a function to get the record that is only called if and when requested in the code.
	 * Use this method to delay getting the value until it's needed. You might do this if requesting the value from a slow source and don't want to slow down your code unnecessarily. Otherwise, you can return an Optional object using the [GlideQuery](dev.do#!/reference/api/paris/server/no-namespace/GlideQueryAPI "The GlideQuery API is an alternative to GlideRecord to perform CRUD operations on record data from server-side scripts.") and [Stream](dev.do#!/reference/api/paris/server/no-namespace/StreamGlobalAPI "The Stream API interacts with a stream of items such as records. For example, you can use the forEach() method to update the state of each record in a stream returned by the GlideQuery API.") APIs.
	 * 
	 * Note: This method is static. You do not need an instance of the class to use this method.
	 * 
	 * @example
	 * //This example shows how to get an Optional object based on a GlideRecord query.
	 * var userOptional = global.Optional.lazy(function () {
	 *     var userGr = new GlideRecord('sys_user');
	 *     userGr.setLimit(1);
	 *     userGr.query();
	 *     return userGr.next() ? userGr.getUniqueValue() : null;
	 * });
	 * 
	 * gs.info(userOptional);
	 * 
	 * @param lazyGetFn Function that returns a single record as a result of a query. For example:  var userGr = new GlideRecord('sys\_user');
	 * 
	 * @returns Optional Object containing the result of the query in the format Optional<result>.
	 * 
	 */
	lazy(lazyGetFn: Function) : Optional
	/**
	 * @description Applies a function to the result of a query.
	 * @example
	 * //This example shows how to apply a function that transforms a value to upper case to the result of a query.
	 * var value = new global.GlideQuery('sys_user')
	 *     .whereNotNull('first_name')
	 *     .selectOne('first_name')
	 *     .map(function (user) {
	 * 	       return user.first_name.toUpperCase();
	 *     });
	 * 
	 * gs.info(value);
	 * 
	 * @param fn Function to apply to the result of the query.
	 * 
	 * @returns Optional Object containing the results of the query updated by the function in the format Optional<result>.
	 * 
	 */
	map(fn: Function) : Optional
	/**
	 * @description Wraps a given value in an Optional object. For example, you can wrap the result of a GlideRecord query in an Optional object to use the associated methods.
	 * Note: This method is static. You do not need an instance of the class to use this method.
	 * 
	 * @example
	 * //This example shows you how to generate an Optional object based on a GlideRecord query.
	 * var now_GR = new GlideRecord('task');
	 * now_GR.addQuery('approval', 'not requested'); 
	 * now_GR.query();
	 * var optional;
	 * if (now_GR.next()) {
	 *     optional = Optional.of(now_GR.getUniqueValue());
	 * } else {
	 *     optional = Optional.empty("no results");
	 * }
	 * 
	 * gs.info(optional.get());
	 * 
	 * @param value Value inside the Optional object.
	 * 
	 * @returns Optional Object containing the passed-in value in the format Optional<value>.
	 * 
	 */
	of(value: Any) : Optional
	/**
	 * @description Adds a default value within the Optional object if the query does not return any results.
	 * @example
	 * //This example shows how to return a value, even when the query is incorrect.
	 * var user = new global.GlideQuery('sys_user')
	 *     .get('1234', ['first_name', 'last_name'])
	 *     .orElse({ first_name: 'Default', last_name: 'User' });
	 * 
	 * gs.info(JSON.stringify(user))
	 * 
	 * @param defaultValue Value within the Optional object if the query does not return any results.
	 * 
	 * @returns Any Value within the Optional object if the query does not return any results.
	 * 
	 */
	orElse(defaultValue: Any) : Any
	}
/**
	 * @description The PAScorecard API enables you to fetch data about indicators and their associated records, such as breakdowns.
	 * 
	 */
	declare class PAScorecard {
	/**
	 * @description Add a query parameter to filter the returned scores.
	 * Call this method multiple times on the same PAScorecard object to pass multiple parameters, such as the indicator sys\_id and a breakdown sys\_id. After specifying all parameters, call query() to run the query.
	 * 
	 * If you query a PAScorecard object with no parameters, the API returns a list of all indicators that are displayed on the Analytics Hub, with their scores.
	 * 
	 * @example
	 * //In this example, the uuid parameter specifies the Number of open incidents indicator, and the breakdown parameter specifies the Priority breakdown. Both parameters have the sys\_id of the respective records as their values. The query() function returns the results as an object.
	 * var sc = new SNC.PAScorecard(); //in a scoped app, do not use the SNC namespace
	 * sc.addParam('uuid', 'fb007202d7130100b96d45a3ce6103b4');       // Number of open incidents
	 * sc.addParam('breakdown', '0df47e02d7130100b96d45a3ce610399');  // by Priority
	 * var result = sc.query();  // Query results, which are returned as an object
	 * for (var i = 0; i &lt; result.length; i++)
	 * gs.info(result[i].name + ': ' + result[i].value + ' ' + result[i].unit.display_value);
	 * 
	 * 
	 * @param uuid Enter a colon-separated list of sys\_id values to specify which indicators, breakdowns, aggregates, and domains to query. The parameter follows this format:  <indicator sys\_id>:<breakdown sys\_id>:<element sys\_id>:<lvl-2 breakdown sys\_id>:<lvl-2 element sys\_id>:<aggregate sys\_id>:<domain\_sys\_id>  The parameter must begin with the sys\_id of an indicator record. Optionally, you can append the sys\_id values of a breakdown and breakdown element to group the response based on the breakdown, and the sys\_id of an aggregate to apply that aggregate. You can use a breakdown with an aggregate, or use only one.  For information about obtaining the sys\_id values of records, see [Unique record identifier (sys\_id)](https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/table-administration/concept/c_UniqueRecordIdentifier.html).  Note: If an indicator is configured to use a Default time series, all Analytics Hub values for that indicator use that time series aggregation.
	 * @param breakdown Enter the sys\_id of a breakdown to return chart information organized as defined by the breakdown. For example, enter the sys\_id of a priority breakdown to return separate task chart information for each priority value, such as Number of open incidents / Priority / 2 - High.
	 * @param breakdown_relation Specify the sys\_id of a breakdown relation to break down the returned data using that relation. You can view available breakdown relations by setting the include\_available\_breakdowns parameter to true.
	 * @param elements_filter Specify the sys\_id of an elements filter to apply that filter to the returned data.
	 * @param display Set to true to return only indicators that are displayed on the Analytics Hub. Set this parameter to all to return all indicators. This parameter is true by default.
	 * @param favorites Set to true to return only indicators that are favorites of the querying user.
	 * @param key Set to true to return results only for key indicators.
	 * @param target Set to true to return results only for indicators that have a target set on the Analytics Hub.
	 * @param contains Enter a comma-separated list of names or descriptions to return results only from indicators with a matching value.
	 * @param tags Enter an indicator group sys\_id to return the indicators in that group. Do not use uuid with this parameter.
	 * @param per_page Enter the maximum number of indicators each query can return on a page. By default this value is 10, and the maximum is 100.
	 * @param page Specify the page number. For example, when querying 20 Analytics Hubs with the default per\_page value (10), specify a page value of 2 to retrieve Analytics Hubs 11-20.
	 * @param sortby Specify the value to use when sorting results. Valid values for this parameter are value, change, changeperc, gap, gapperc, duedate, name, order, default, group, indicator\_group, frequency, target, date, trend, bullet, and direction. By default, queries sort records by value.
	 * @param sortdir Specify the sort direction, ascending or descending. By default, queries sort records in descending order. Set this parameter to asc to sort in ascending order.
	 * @param display_value Data retrieval operation for reference and choice fields.  Based on this value, the display value and/or the actual value in the database are retrieved.  *   true returns display values for all of the fields. *   false returns actual values from the database. If a value is not specified, this parameter defaults to false. *   all returns both actual and display values.
	 * @param exclude_reference_link Set to true to hide additional information provided for reference fields, such as the URI to the reference resource.
	 * @param include_scores Set to true to return indicator scores for the entire time range selected on the Analytics Hub. If a value is not specified, this parameter defaults to false and returns only the most recent score value.  To constrain the date range of the scores that are returned, combine this parameter with the from and to parameters.
	 * @param from Specify the earliest date to return scores from. Only scores from this date or later are returned. The date format must match the ISO-8601 standard.  This parameter requires that include\_scores is set to true.
	 * @param to Specify the latest date to return scores from. Only scores from this date or earlier are returned. The date format must match the ISO-8601 standard.  This parameter requires that include\_scores is set to true.
	 * @param step Specify a numeric value to skip scores, based on the indicator frequency. For example, specify a value of 3 to return only scores from every third day for a daily indicator, or from every third week for a weekly indicator.
	 * @param limit Specify the maximum number of scores to return.
	 * @param include_available_breakdowns Set to true to return all available breakdowns for an indicator. If a value is not specified, this parameter defaults to false and returns no breakdowns.
	 * @param include_available_aggregates Set to true to return all possible aggregates for an indicator, including aggregates that have already been applied. If a value is not specified, this parameter defaults to false and returns no aggregates.
	 * @param include_realtime Set this parameter to true to return the realtime\_enabled element which indicates if real-time scores are enabled for the indicator, and the realtime\_value element which contains the real-time score value. This parameter is not supported for formula indicators.
	 * @param include_target_color_scheme Set this parameter to true to return the target\_color\_scheme element that contains the minimum and maximum values, and the color of each section of the target color scheme for the Analytics Hub.
	 * @param include_forecast_scores Set this parameter to true to return the forecast\_scores element that contains an array of date-value pairs that define the forecast data for the Analytics Hub.  This paramater requires that the include\_scores parameter is also set to true.
	 * @param include_trendline_scores Set this parameter to true to return the trendline\_scores element that contains an array of date-value pairs that define the Analytics Hub trendline.  This paramater requires that the include\_scores parameter is also set to true.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	addParam(uuid: string,breakdown: string,breakdown_relation: string,elements_filter: string,display: string,favorites: string,key: string,target: string,contains: string,tags: string,per_page: string,page: string,sortby: string,sortdir: string,display_value: string,exclude_reference_link: string,include_scores: string,from: string,to: string,step: string,limit: string,include_available_breakdowns: string,include_available_aggregates: string,include_realtime: string,include_target_color_scheme: string,include_forecast_scores: string,include_trendline_scores: string) : void
	/**
	 * @description Perform a query based on the specified parameters and return the results as an object.
	 * Before calling this method, configure parameters for the PAScorecard object by calling addParam(String parameter, String value).
	 * 
	 * @returns Object The PAScorecard object.
	 * 
	 */
	query() : Object
	/**
	 * @description Get the last query result as an object.
	 * This method does not perform a query. To perform a query before returning the result, use query().
	 * 
	 * This function cannot run in a scope other than global.
	 * 
	 * @returns Object The results from the last query, returned as a JS object.
	 * 
	 */
	result() : Object
	}
/**
	 * @description The PASnapshot API enables you to query information about Performance Analytics snapshots. Snapshots are the lists of records (sys\_ids) that are collected at the time that the scores for those records are collected. A snapshot is made only for indicators with Collect records selected.
	 * You can query information about a snapshot at a certain date using the indicator sys\_id and date, and perform comparisons between snapshots for an indicator at different dates.
	 * 
	 */
	declare class PASnapshot {
	/**
	 * @description Get the sys\_id values for all records contained in the snapshot for a specified indicator at the specified date.
	 * @example
	 * //
	 * var snapshot1 = PASnapshot.getIDs('fb007202d7130100b96d45a3ce6103b4', 20160530);
	 * gs.info(snapshot1);
	 * 
	 * @param sys_id The indicator sys\_id.
	 * @param date The date when the snapshot was taken, in the format yyyymmdd.
	 * 
	 * @returns string A comma-separated list of sys\_id values.
	 * 
	 */
	getIDs(sys_id: string,date: number) : string
	/**
	 * @description Compare records in snapshots for a specified indicator at multiple dates, such as to identify records included in one snapshot but not the other.
	 * @example
	 * //
	 * var snapshot2 = PASnapshot.getCompareIDs('fb007202d7130100b96d45a3ce6103b4', 20160430, 20160531, 'shared');
	 * gs.info(snapshot2);
	 * 
	 * @param sys_id The indicator sys\_id.
	 * @param date1 The date of the first snapshot, in the format yyyymmdd.
	 * @param date2 The date of the second snapshot, in the format yyyymmdd.
	 * @param type Specifies what data to retrieve. Valid values are:  *   all1: all records in the first snapshot *   all2: all records in the second snapshot *   shared: records that are in both snapshots *   movedin: records that are in the first snapshot, but not the second *   movedout: records that are in the second snapshot, but not the first
	 * 
	 * @returns string A comma-separated list of sys\_id values.
	 * 
	 */
	getCompareIDs(sys_id: string,date1: number,date2: number,type: string) : string
	/**
	 * @description Get the query used to generate the snapshot for a specified indicator at the specified date.
	 * @example
	 * //
	 * var snapshot3 = PASnapshot.getQuery('fb007202d7130100b96d45a3ce6103b4', 20160530);
	 * gs.info(snapshot3);
	 * 
	 * @param sys_id The indicator sys\_id.
	 * @param date The date when the snapshot was taken, in the format yyyymmdd.
	 * 
	 * @returns string The table, view, and encoded query as a JSON string.
	 * 
	 */
	getQuery(sys_id: string,date: number) : string
	/**
	 * @description Get the query used to compare records in snapshots for a specified indicator at multiple dates.
	 * @example
	 * //
	 * var snapshot4 = PASnapshot.getCompareQuery('fb007202d7130100b96d45a3ce6103b4', 20160530, 20160531, 'all1');
	 * gs.info(snapshot4);
	 * 
	 * 
	 * @param sys_id The indicator sys\_id.
	 * @param date1 The date of the first snapshot, in the format yyyymmdd.
	 * @param date2 The date of the second snapshot, in the format yyyymmdd.
	 * @param type Specifies what data to retrieve. Valid values are:  *   all1: all records in the first snapshot *   all2: all records in the second snapshot *   shared: records that are in both snapshots *   movedin: records that are in the second snapshot, but not the first *   movedout: records that are in the first snapshot, but not the second
	 * 
	 * @returns string The table, view, and encoded query as a JSON string.
	 * 
	 */
	getCompareQuery(sys_id: string,date1: number,date2: number,type: string) : string
	}
/**
	 * @description The RenderProperties API provides methods about the current page and is available in Jelly scripts and in UI-action conditions and scripts.
	 * Access RenderProperties methods using the static variable RP.
	 * 
	 */
	declare class RenderProperties {
	/**
	 * @description Returns the encoded query from the URL sent to the page.
	 * @returns string Returns the encoded query from the URL sent to the form.
	 * 
	 */
	getEncodedQuery() : string
	/**
	 * @description Returns the list control object for the page.
	 * @returns ScopedSysListControl The list control object for the page.
	 * 
	 */
	getListControl() : ScopedSysListControl
	/**
	 * @description Returns the value of the specified URL parameter.
	 * @param parameterName Name of the parameter passed on the URL.
	 * 
	 * @returns string The parameter's value.
	 * 
	 */
	getParameterValue(parameterName: string) : string
	/**
	 * @description Returns the URL where the request originated.
	 * @returns string The URL of the page where the request originated.
	 * 
	 */
	getReferringURL() : string
	/**
	 * @description Returns the name of the view in use.
	 * @returns string The name of the view being used.
	 * 
	 */
	getViewName() : string
	/**
	 * @description Returns the window's properties.
	 * @returns Object The window's properties
	 * 
	 */
	getWindowProperties() : Object
	/**
	 * @description Returns true if the page is part of Studio.
	 * @returns boolean Returns true if the page is part of Studio.
	 * 
	 */
	isInDevStudio() : boolean
	/**
	 * @description Returns true if this is an interactive session. An interactive session is when a user has logged in as opposed to a REST request.
	 * @returns boolean True if this is an interactive session.
	 * 
	 */
	isInteractive() : boolean
	/**
	 * @description Returns true when the sysparm\_collection\_related\_file URL parameter is set.
	 * @returns boolean Returns true when the sysparm\_collection\_related\_file URL parameter is set.
	 * 
	 */
	isManyToMany() : boolean
	/**
	 * @description Returns true when the sys\_is\_related\_list URL-parameter is true. Returns false if the parameter is not present.
	 * @returns boolean True if the URL parameter sys\_is\_related\_list is true.
	 * 
	 */
	isRelatedList() : boolean
	}
/**
	 * @description Define facet items, filters, or mapped queries for a facets object.
	 * The SPScriptedFacet API can only be used in a facet generation script in a Service Portal search source. The facet generation script is only visible when Is scripted source is selected.  	
 *   	
 * There is no constructor for this class. Instead, use the createFacet() or createMultiChoiceFacet() methods of the SPScriptedFacetService class to generate a facets object.
	 * 
	 */
	declare class SPScriptedFacet {
	/**
	 * @description Adds facet items or mapped queries to a facets object.
	 * Before adding facet items to a facets object, create the facets object using the createFacet() or createMultiChoiceFacet() methods of the SPScriptedFacetService class.
	 * 
	 * @example
	 * //
	 * function createMultiChoiceFacetFromKB(label, variable, values, orderBy){
	 *   if(!values || values.length == 0)
	 *     return;
	 * 
	 *   var kbFacet = facetService.createMultiChoiceFacet(label, variable);
	 *   var kbMap = {};
	 *   for(var i in values) {
	 *     var key = values[i].label;
	 *     var value = values[i].id;
	 *     var parent = new KBParentData().getParentCategory(value, key);
	 *     key = parent.join(' &gt; ');
	 *     kbMap[key] = value;
	 *   }
	 * 
	 *   var labels = Object.keys(kbMap).sort();
	 *   for (i = 0; i &lt; labels.length; i++) {
	 *     var currentLabel = labels[i];
	 *     kbFacet.addFacetItem(currentLabel, kbMap[currentLabel]);
	 *     //adds facet search options for each kbMap entry
	 *   }
	 * }
	 * 
	 * @param label The display label for the facet item or mapped query.
	 * @param valueObj The facet item or mapped query for the facet. Can only contain types String, Number, Boolean, and Double.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	addFacetItem(label: string,valueObj: Object) : void
	}
/**
	 * @description Generate a multi choice or single choice facets object for an advanced search source.
	 * The SPScriptedFacetService API can only be used in a facet generation script in a Service Portal search source. The facet generation script is only visible when Is scripted source is selected.  	
 *   	
 * There is no constructor for this class. Instead, use the createFacet() or createMultiChoiceFacet() methods to generate a facets object.
	 * 
	 */
	declare class SPScriptedFacetService {
	/**
	 * @description Creates a single choice facets object.
	 * After creating the facets object, add facet items or mapped queries to the facet using the addFacetItem() method of the SPScriptedFacet class.
	 * 
	 * @example
	 * //Can only be used in a facet generation script in a Service Portal advanced search source.
	 * var stateFacet = facetService.createFacet("State", "state");
	 * 
	 * @param label Label for the facet.
	 * @param id ID for the facet.
	 * 
	 * @returns Object Single choice facets object. Returns an error when:  *   A duplicate label or ID is found. *   A label or ID is not defined.
	 * 
	 */
	createFacet(label: string,id: string) : Object
	/**
	 * @description Creates a multi choice facets object.
	 * After creating the facets object, add facet items or mapped queries to the facet using the addFacetItem() method of the SPScriptedFacet class.
	 * 
	 * @example
	 * //
	 * function createMultiChoiceFacetFromKB(label, variable, values, orderBy){
	 *   if(!values || values.length == 0)
	 *     return;
	 * 
	 *   var kbFacet = facetService.createMultiChoiceFacet(label, variable);
	 *   var kbMap = {};
	 *   for(var i in values) {
	 *     var key = values[i].label;
	 *     var value = values[i].id;
	 *     var parent = new KBParentData().getParentCategory(value, key);
	 *     key = parent.join(' &gt; ');
	 *     kbMap[key] = value;
	 *   }
	 * 
	 *   var labels = Object.keys(kbMap).sort();
	 *   for (i = 0; i &lt; labels.length; i++) {
	 *     var currentLabel = labels[i];
	 *     kbFacet.addFacetItem(currentLabel, kbMap[currentLabel]);
	 *     //adds facet search options for each kbMap entry
	 *   }
	 * }
	 * 
	 * @param label Label for the facet.
	 * @param id ID for the facet.
	 * 
	 * @returns Object Multi choice facets object.  Returns an error when:  *   A duplicate label or ID is found. *   A label or ID is not defined.
	 * 
	 */
	createMultiChoiceFacet(label: string,id: string) : Object
	}
/**
	 * @description The Stream API interacts with a stream of items such as records. For example, you can use the forEach() method to update the state of each record in a stream returned by the GlideQuery API.
	 * You can get a Stream object in these ways:  	
 *   	
 * 	
 * *   Instantiate a Stream object using the constructor.	
 * *   Return a Stream object from the GlideQuery.select() method. For more information, see [GlideQuery](../../GlideQuery/concept/GlideQueryGlobalAPI.html "The GlideQuery API is an alternative to GlideRecord to perform CRUD operations on record data from server-side scripts.").	
 * 	
 *   	
 *   	
 * This method is static and does not require an instance of the class: [fromArray()](dev.do#!/reference/api/paris/server/no-namespace/StreamGlobalAPI#Stream-fromArray_O "Returns a Stream object that contains the values from the provided array.").  	
 *   	
 * Use the Stream API in scoped or global server-side scripts. This API requires the GlideQuery \[com.sn\_glidequery\] plugin.  	
 *   	
 * 	
 * Implementation	
 * --------------	
 * 	
 * This API can work with the [GlideQuery](../../GlideQuery/concept/GlideQueryGlobalAPI.html "The GlideQuery API is an alternative to GlideRecord to perform CRUD operations on record data from server-side scripts.") and [Optional](../../Optional/concept/OptionalGlobalAPI.html "The Optional API interacts with a single record returned by the GlideQuery, Stream, or GlideRecord APIs, even when it does not exist. Write scripts that are less likely to result in an error by handling null or undefined query results.") APIs in a builder pattern where the method calls chain together, each method building on the returned result of the previous method. Use methods to define the attributes of the query. The methods do not execute until you call a terminal method, a method that returns a query result, allowing you to define the requirements of the query before executing it.	
 * 	
 * If the query returns a single record, the system wraps the result in an Optional object. If the query returns a stream of records, the system wraps the result in a Stream object. These objects let you manage the result using a set of methods in each API.	
 * 	
 * For example, here's a script that performs a query on the Task table and groups the records by priority and returns groups with total reassignments greater than four.	
 * 	
 *     var query = new global.GlideQuery('task')	
 *         .where('active', true) //Returns new GlideQuery object with a "where" clause.	
 *         .groupBy('priority') //Returns new GlideQuery object with a "group by" clause.	
 *         .aggregate('sum', 'reassignment_count') //Returns new GlideQuery object with a "sum(reassignment_count)" clause.	
 *         .having('sum', 'reassignment_count', '>', 4) //Returns new GlideQuery object with a "having reassignment_count > 4" clause.	
 *         .select() //Returns a stream of records wrapped in a Stream object.  	
 *         .toArray(10); //Terminal method in the Stream class that executes the query and returns the result. 	
 * 	
 *   	
 *   	
 * 	
 * Terminal methods	
 * ----------------	
 * 	
 * For performance reasons, a query only fetches data when you call a terminal method. These are the terminal methods from the Stream class:	
 * 	
 * *   [every()](../reference/Stream-every_F.dita.html "Applies a predicate function to every item in the Stream object. If the predicate returns true for every item in the stream, the method returns true. If the predicate returns false for any item in the stream, the method returns false.")	
 * *   [find()](../reference/Stream-find_F.html "Returns the first record or item in the Stream object that matches the predicate function. If no predicate function is provided, then the method returns the first record or item in the Stream.")	
 * *   [forEach()](../reference/Stream-forEach_F.html "Applies the specified function to each record or item in the stream.")	
 * *   [reduce()](../reference/Stream-reduce_F_A.html "Executes a reducer function on each item in the stream, resulting in single output value.")	
 * *   [some()](../reference/Stream-some_F.html "Applies a predicate function, a function that takes a single value and returns true or false, to each item in the stream. If the predicate returns true for any item in the stream, the method returns true.")	
 * *   [toArray()](../reference/Stream-toArray_N.html "Returns an array containing the given number of items from the stream.")
	 * 
	 */
	declare class Stream {
	/**
	 * @description Instantiates a Stream object.
	 * Instead of using this constructor, you can return a Stream object based on a query using the [GlideQuery](dev.do#!/reference/api/paris/server/no-namespace/GlideQueryAPI "The GlideQuery API is an alternative to GlideRecord to perform CRUD operations on record data from server-side scripts.") API.
	 * 
	 * @example
	 * //This example shows you how to create a Stream object based on a random number generator. Make sure to include the limit() method to avoid creating an infinite loop.
	 * new Stream(Math.random)
	 *    .map(Math.round)
	 *    .map(function (num) { 
	 *       return num === 1 ? 'heads' : 'tails'; 
	 *    })
	 *    .limit(10)
	 *    .forEach(gs.info)
	 * 
	 * 
	 * @param nextFn A function that retrieves the next item in the stream.
	 * 
	 */
	constructor(nextFn: Function) 
	/**
	 * @description Returns results in batches of arrays, each containing the number of records passed to the method.
	 * @example
	 * //This example shows how to query a table and chunk the result into batches of arrays.
	 * var chunkResult = new GlideQuery('cmdb_ci_hardware')
	 *     .select('asset', 'purchase_date')
	 *     .limit(10)
	 *     .chunk(5) // returns arrays of 5 sys_ids at a time
	 *     .toArray(100);
	 * 
	 * gs.info(JSON.stringify(chunkResult));
	 * 
	 * @example
	 * //This example shows how to create a child query using batches of IDs. When you call the flatMap() method after using the chunk() method, the system iterates over the batch of records instead of each individual record.
	 * var chunkResult = new global.GlideQuery('cmdb_ci_hardware')
	 *     .select('sys_id')
	 *     .map(function (device) { return device.sys_id; })
	 *     .chunk(5) // returns arrays of 5 sys_ids at a time
	 *     .flatMap(function (deviceIds) {
	 *         return new GlideQuery('cmdb_sam_sw_install')
	 *             .where('installed_on', 'IN', deviceIds)
	 *             .select('software_model', 'installed_on');
	 *     })
	 * 
	 * gs.info(JSON.stringify(chunkResult));
	 * 
	 * @param count Number of records in each array returned from the stream.
	 * 
	 * @returns Stream Object used to interact with a stream of items such as records.
	 * 
	 */
	chunk(count: number) : Stream
	/**
	 * @description Applies a predicate function to every item in the Stream object. If the predicate returns true for every item in the stream, the method returns true. If the predicate returns false for any item in the stream, the method returns false.
	 * @example
	 * //This example shows how to apply a predicate function to every item in a stream.
	 * var hasOnlyShortDescriptions = new global.GlideQuery('task')
	 *    .whereNotNull('description')
	 *    .select('description')
	 *    .every(function (t) { 
	 *        return t.description.length &lt; 10; 
	 *        });
	 * 
	 * gs.info(hasOnlyShortDescriptions);
	 * 
	 * @param predicate Predicate function to apply to every record or item inside the Stream object. The function must take each item in the stream as input and return a boolean.
	 * 
	 * @returns boolean Flag that indicates whether the predicate function returns true for every item in the stream.  Valid values:  *   true: The predicate function returns true for every item in the stream. *   false: The predicate function does not return true for every item in the stream.
	 * 
	 */
	every(predicate: Function) : boolean
	/**
	 * @description Applies a predicate function to each item in the Stream object. If the predicate returns true, the method returns the stream. If the predicate returns false, it returns an empty Stream object.
	 * For better performance, use the where(), whereNotNull(), and whereNull() methods in the GlideQuery class instead of this method where possible. See [GlideQuery](dev.do#!/reference/api/paris/server/no-namespace/GlideQueryAPI "The GlideQuery API is an alternative to GlideRecord to perform CRUD operations on record data from server-side scripts.").
	 * 
	 * @example
	 * //This example shows how to check all records in the Task table against a defined filter. If the records match the filter, the system returns the stream of records. Otherwise, it returns an empty Stream object.
	 * var shoutingTasks = new global.GlideQuery('task')
	 *    .whereNotNull('description')
	 *    .select('description')
	 *    .filter(function (task) { 
	 *        return task.description.toUpperCase() === task.description; 
	 *    })
	 * 
	 * @param predicate Predicate function to apply to every record or item inside the Stream object. The function must take each item in the stream as input and return a boolean.
	 * 
	 * @returns Stream Object used to interact with a stream of items such as records.
	 * 
	 */
	filter(predicate: Function) : Stream
	/**
	 * @description Returns the first record or item in the Stream object that matches the predicate function. If no predicate function is provided, then the method returns the first record or item in the Stream.
	 * @example
	 * //This example shows how to return the first record from the stream.
	 * var UserOptional = new global.GlideQuery('sys_user')
	 *    .where('active', true)
	 *    .where('company.name', 'ServiceNow')
	 *    .select()
	 *    .find()
	 *    .map(function (user) { 
	 *       return JSON.stringify(user); 
	 *    })
	 * 
	 * gs.info(UserOptional);
	 * 
	 * @param predicate Optional. Predicate function to apply to the items inside the Stream object. The function must take each item in the stream as input and return a boolean.
	 * 
	 * @returns Optional Object containing the returned record.
	 * 
	 */
	find(predicate: Function) : Optional
	/**
	 * @description Applies a function to every item in a stream. Returns another stream that you can iterate over.
	 * Use this method instead of map() if the function returns a second stream of records.
	 * 
	 * @example
	 * //This example shows you how to query the User table and then create a child query from the result. This example executes an N+1 query, which can cause performance issues. Avoid this use case in a production environment.
	 * var records = new global.GlideQuery('sys_user')
	 *    .where('last_login', '&gt;', '2015-12-31')
	 *    .select('first_name', 'last_name')
	 *    .flatMap(function (u) {
	 *       return new global.GlideQuery('task')
	 *            .where('closed_by', u.sys_id)
	 *            .select('closed_at', 'description')
	 *            .map(function (t) {
	 *                 return {
	 *                     first_name: u.first_name,
	 *                     last_name: u.last_name,
	 *                     description: t.description,
	 *                     closed_at: t.closed_at
	 *                  };
	 *            });
	 *       })
	 *    .limit(5)
	 *    .toArray(100);
	 * 
	 * gs.info(JSON.stringify(records));
	 * 
	 * @param fn Function to apply to the result of the query that returns a Stream object.
	 * 
	 * @returns Stream Object containing the stream of records updated after applying the function.
	 * 
	 */
	flatMap(fn: Function) : Stream
	/**
	 * @description Applies the specified function to each record or item in the stream.
	 * @example
	 * //This example shows you how to print the result of each item in the stream.
	 * var firstNames = new global.GlideQuery('sys_user')
	 *    .select('first_name')
	 *    .forEach(function (u) { 
	 *       gs.debug(u.first_name); 
	 *    });
	 * 
	 * @param fn Function to apply to each item in the stream.
	 * 
	 * @returns None 
	 * 
	 */
	forEach(fn: Function) : None
	/**
	 * @description Returns a Stream object that contains the values from the provided array.
	 * Note: This method is static. You do not need an instance of the class to use this method.
	 * 
	 * @example
	 * //This example shows how to create a Stream object containing an array of values.
	 * var nameStream = Stream.fromArray(['Bob', 'Sue', 'Sam'])
	 *    .map(function (name) { 
	 *       return name.toUpperCase(); 
	 *    })
	 *    .toArray(3);
	 * 
	 * gs.info(JSON.stringify(nameStream));
	 * 
	 * @param arr Array of values to create the stream from.
	 * 
	 * @returns Stream Object used to interact with a stream of items such as records.
	 * 
	 */
	fromArray(arr: Array) : Stream
	/**
	 * @description Limits the number of results returned by the stream.
	 * For better performance, use the limit() method in the GlideQuery class where possible. See [GlideQuery](dev.do#!/reference/api/paris/server/no-namespace/GlideQueryAPI "The GlideQuery API is an alternative to GlideRecord to perform CRUD operations on record data from server-side scripts."). You may need to use this method to limit results with the Stream.flatMap() method.
	 * 
	 * @example
	 * //This example shows you how to limit the results returned from the Stream.flatMap() method.
	 * var records = new global.GlideQuery('sys_user')
	 *    .where('last_login', '&gt;', '2015-12-31')
	 *    .select('first_name', 'last_name')
	 *    .flatMap(function (u) {
	 *       return new GlideQuery('task')
	 *            .where('closed_by', u.sys_id)
	 *            .select('closed_at', 'description')
	 *            .map(function (t) {
	 *                 return {
	 *                     first_name: u.first_name,
	 *                     last_name: u.last_name,
	 *                     description: t.description,
	 *                     closed_at: t.closed_at
	 *                  };
	 *            });
	 *       })
	 *    .limit(5)
	 *    .toArray(100);
	 * 
	 * gs.info(JSON.stringify(records));
	 * 
	 * @param count Number of records to return.
	 * 
	 * @returns Stream Object used to interact with a stream of items such as records.
	 * 
	 */
	limit(count: number) : Stream
	/**
	 * @description Applies a function to each item in a stream and returns the updated Stream object.
	 * @example
	 * //This example shows you how to apply a function to every item in the stream.
	 * var users = new global.GlideQuery('sys_user')
	 *    .whereNotNull('first_name')
	 *    .select('first_name')
	 *    .map(function (u) { 
	 *       return u.first_name.toUpperCase(); 
	 *    })
	 *    .toArray(100);
	 * 
	 * gs.info(JSON.stringify(users));
	 * 
	 * @param fn Function to apply to the result of the query that takes the each item in the stream as input.
	 * 
	 * @returns Stream Object containing the stream of records updated after applying the function.
	 * 
	 */
	map(fn: Function) : Stream
	/**
	 * @description Executes a reducer function on each item in the stream, resulting in single output value.
	 * This method is similar to the native JavaScript reduce() method. For more information, see [w3schools documentation](https://www.w3schools.com/jsref/jsref_reduce.asp).
	 * 
	 * @example
	 * //This example shows you how to return the record with the longest name from the User table.
	 * var longestName = new global.GlideQuery('sys_user')
	 *    .whereNotNull('first_name')
	 *    .select('first_name')
	 *    .reduce(function (acc, cur) {
	 *        return cur.first_name.length &gt; acc.length
	 *            ? cur.first_name
	 *            : acc;
	 *        }, '');
	 * 
	 * gs.info(JSON.stringify(longestName));
	 * 
	 * @param reducerFn Function to apply to each item in the stream that reduces the stream to a single value. This function must take two arguments:  *   acc: Accumulator that accumulates all values returned by the function. *   cur: Current item being accumulated in the array.
	 * @param initialValue Value passed to the function as the initial value.
	 * 
	 * @returns Any Accumulated total of all items returned by the reducer function.
	 * 
	 */
	reduce(reducerFn: Function,initialValue: Any) : Any
	/**
	 * @description Applies a predicate function, a function that takes a single value and returns true or false, to each item in the stream. If the predicate returns true for any item in the stream, the method returns true.
	 * @example
	 * //This example shows how to check whether any descriptions in the Task table are over 1,000 characters long.
	 * var hasLongDescriptions = new global.GlideQuery('task')
	 *    .whereNotNull('description')
	 *    .select('description')
	 *    .some(function (t) { 
	 *       return t.description.length &gt; 1000; 
	 *    });
	 * 
	 * 
	 * gs.info(hasLongDescriptions);
	 * 
	 * @param predicate Predicate function to apply to the items inside the Stream object. Must return a Boolean value.
	 * 
	 * @returns boolean Flag that indicates whether the predicate function returned true for an item in the stream.  Valid values:  *   true: The predicate function returned true for an item in the stream. *   false: The predicate function did not return true for an item in the stream.
	 * 
	 */
	some(predicate: Function) : boolean
	/**
	 * @description Returns an array containing the given number of items from the stream.
	 * @example
	 * //This example shows you how to transform a stream of records into a JavaScript array.
	 * var users = new global.GlideQuery('sys_user')
	 *     .limit(10)
	 *     .select('first_name', 'last_name')
	 *     .toArray(50);
	 * 
	 * gs.info(JSON.stringify(users));
	 * 
	 * @param count The maximum number of items from the stream to return in the array.
	 * 
	 * @returns Array Array containing the given number of items from the stream.
	 * 
	 */
	toArray(count: number) : Array
	}
/**
	 * @description Scoped TemplatePrinter handles printing from a mail script to the email message.
	 * There is no constructor for the scoped TemplatePrinter API. The methods are called in mail scripts using the template global variable.
	 * 
	 */
	declare class TemplatePrinter {
	/**
	 * @description Prints the string to the email body.
	 * @example
	 * //
	 * template.print("Incident number - " + current.number + "\n");
	 * 
	 * @param string The string to print
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	print(string: string) : void
	/**
	 * @description Adds non-breaking spaces to the email body.
	 * @example
	 * //
	 * template.space(4);
	 * 
	 * @param spaces The number of non-breaking spaces to output to the email body.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	space(spaces: number) : void
	}
/**
	 * @description Scriptable object that represents a query running against a remote table.
	 * This API requires the Remote Tables plugin (com.glide.script.vtable) to be activated. For more information on Remote Tables, see [Retrieving external data using remote tables and scripts](https://docs.servicenow.com/bundle/paris-servicenow-platform/page/administer/remote-tables/concept/remote-tables.html).  	
 *   	
 * Remote table rows are created using the [v\_table](dev.do#!/reference/api/paris/server/no-namespace/v_tableAPI "Scriptable object that enables you to add rows to a remote table.") API.
	 * 
	 */
	declare class v_queryScopedGlobal {
	/**
	 * @description Gets an encoded query string for the specified field.
	 * @example
	 * //The following example shows results for a field with an encoded query of number=INC0001^active=true.
	 * var result = v_query.getCondition("number");
	 * gs.info(result);
	 * 
	 * @param field Name of the field.
	 * 
	 * @returns string Returns an [encoded query string](https://docs.servicenow.com/bundle/paris-platform-user-interface/page/use/using-lists/concept/c_EncodedQueryStrings.html) for the given field.
	 * 
	 */
	getCondition(field: string) : string
	/**
	 * @description Returns the query against a remote table as an encoded query string
	 * For details, see [Encoded query strings](https://docs.servicenow.com/bundle/paris-platform-user-interface/page/use/using-lists/concept/c_EncodedQueryStrings.html).
	 * 
	 * @example
	 * //The following example is a snippet from [Retrieving specific records from a third-party source](https://docs.servicenow.com/bundle/paris-servicenow-platform/page/administer/remote-tables/reference/remote-table-script-def-example2.html).
	 * gs.info(v_query.getEncodedQuery());
	 * 
	 * @returns string The encoded query as a string.
	 * 
	 */
	getEncodedQuery() : string
	/**
	 * @description Gets the value of a field in an equality query condition.
	 * @example
	 * //The following example is a snippet from [Retrieving specific records from a third-party source](https://docs.servicenow.com/bundle/paris-servicenow-platform/page/administer/remote-tables/reference/remote-table-script-def-example2.html).
	 * v_query.getParameter("caller_id")
	 * 
	 * @param field Name of the field to be queried.
	 * 
	 * @returns string Value of the field in the query condition. For example, if name=John is the encoded query, then getParameter("name") returns "John".
	 * 
	 */
	getParameter(field: string) : string
	/**
	 * @description Returns the sys\_id value in a get query.
	 * @example
	 * //The following example is a snippet from [Retrieving specific records from a third-party source](https://docs.servicenow.com/bundle/paris-servicenow-platform/page/administer/remote-tables/reference/remote-table-script-def-example2.html).
	 * v_query.getSysId();
	 * 
	 * @returns string Sys\_id value in the get query, for example, if sys\_id=123, this method returns 123.
	 * 
	 */
	getSysId() : string
	/**
	 * @description Gets a text search query parameter.
	 * See also:
	 * 
	 * *   [Encoded query strings](https://docs.servicenow.com/bundle/paris-platform-user-interface/page/use/using-lists/concept/c_EncodedQueryStrings.html)
	 * *   [Querying tables in script](https://docs.servicenow.com/bundle/paris-application-development/page/script/server-scripting/concept/c_UsingGlideRecordToQueryTables.html)
	 * 
	 * @example
	 * //In the following example, the method returns true if the query contains a text query parameter, such as GOTO123TEXTQUERY321=email.
	 * // for query value GOTO123TEXTQUERY321=email
	 * v_query.getTextSearch();
	 * 
	 * @returns string Text search query parameter, for example email.
	 * 
	 */
	getTextSearch() : string
	/**
	 * @description Determines if the query is a get query, that is, a query that retrieves a record by sys\_id.
	 * @example
	 * //The following example is a snippet from [Retrieving specific records from a third-party source](https://docs.servicenow.com/bundle/paris-servicenow-platform/page/administer/remote-tables/reference/remote-table-script-def-example2.html). If the encoded query is sys\_id=12345123, the v\_query.isGet() method returns true. If the encoded query is anything else, such as Number=INC1234, the v\_query.isGet() method returns false.
	 * if (v_query.isGet()) {
	 * 		bySysId(v_table, v_query, v_query.getSysId());
	 * 	}
	 * 	else if (v_query.getParameter("caller_id")) {
	 * 		byCallerId(v_table, v_query, v_query.getParameter("caller_id"));
	 * 	}
	 * 	else {
	 * 		fetchAllIncidents(v_table, v_query);
	 * 	}
	 * 
	 * @returns boolean Flag indicates that query for a specific record has sys\_id= as the query format.  Valid values:  *   true: Query contains equality query condition on the sys\_id field. *   false: Query does not include equality query condition on the sys\_id field.
	 * 
	 */
	isGet() : boolean
	/**
	 * @description Indicates if the query contains a text query parameter.
	 * See also:
	 * 
	 * *   [Encoded query strings](https://docs.servicenow.com/bundle/paris-platform-user-interface/page/use/using-lists/concept/c_EncodedQueryStrings.html)
	 * *   [Querying tables in script](https://docs.servicenow.com/bundle/paris-application-development/page/script/server-scripting/concept/c_UsingGlideRecordToQueryTables.html)
	 * 
	 * @example
	 * //In the following example, the method returns true if the query contains a text query parameter, such as GOTO123TEXTQUERY321=email.
	 * v_query.isTextSearch();
	 * 
	 * @returns boolean Flag that indicates whether the query contains a text query parameter.  Valid values:  *   true: Query contains a text query parameter. *   false: Query does not contain a text query parameter.
	 * 
	 */
	isTextSearch() : boolean
	/**
	 * @description Sets the last error message in the GlideRecord.
	 * See also [Scoped GlideRecord - getLastErrorMessage()](dev.do#!/reference/api/paris/server/no-namespace/c_GlideRecordScopedAPI "Scoped GlideRecord is used for database operations.").
	 * 
	 * @example
	 * //The following example is a snippet from [Retrieving specific records from a third-party source](https://docs.servicenow.com/bundle/paris-servicenow-platform/page/administer/remote-tables/reference/remote-table-script-def-example2.html).
	 * function fetchAllIncidents(v_table, v_query) {
	 * 	// Uses RestMessage with name 'Remote Instance Incidents' and function 'All Incidents'
	 * 	// Create a RestMessage first which calls an external REST service
	 * 	try {
	 * 		var restMessage = new sn_ws.RESTMessageV2('Remote Instance Incidents', 'All Incidents');
	 * 		var response = restMessage.execute();
	 * 		var responseBody = response.getBody();
	 * 
	 * 		// if REST call ends up in an error, set the last error message which shows up
	 * 		// at the bottom of the list view
	 * 		if (response.haveError()) {
	 * 		v_query.setLastErrorMessage(response.getErrorMessage());
	 * 		// can use gs.error() or gs.addErrorMessage() while debugging
	 * 		// gs.debug() messages visible in session debugger
	 * 		// gs.debug(response.getErrorMessage());
	 * 		return;
	 * 		}
	 * 	} catch (ex) {
	 * 		v_query.setLastErrorMessage(ex.message);
	 * 		// gs.debug(ex.message);
	 * 		return;
	 * 	}
	 * 
	 * @param message Error message.
	 * 
	 * @returns None 
	 * 
	 */
	setLastErrorMessage(message: string) : None
	}
/**
	 * @description Scriptable object that enables you to add rows to a remote table.
	 * This API requires the Remote Tables plugin (com.glide.script.vtable) to be activated. For more information on Remote Tables, see [Retrieving external data using remote tables and scripts](https://docs.servicenow.com/bundle/paris-servicenow-platform/page/administer/remote-tables/concept/remote-tables.html).  	
 *   	
 * Use the [v\_query](dev.do#!/reference/api/paris/server/no-namespace/v_queryAPI "Scriptable object that represents a query running against a remote table.") scriptable object to query remote tables.
	 * 
	 */
	declare class v_tableScopedGlobal {
	/**
	 * @description Adds rows to the remote table.
	 * See also [Create a script definition for a remote table](https://docs.servicenow.com/bundle/paris-servicenow-platform/page/administer/remote-tables/task/create-remote-table-script.html).
	 * 
	 * @example
	 * //The following example is a snippet from [Retrieving specific records from a third-party source](https://docs.servicenow.com/bundle/paris-servicenow-platform/page/administer/remote-tables/reference/remote-table-script-def-example2.html).
	 * 
	 * function loadData(v_table, v_query, restMessage) {
	 * 	try {
	 * 		var response = restMessage.execute();
	 * 		var responseBody = response.getBody();
	 * 		
	 * 		// if REST call ends up in an error, set the last error message which shows up
	 * 		// at the bottom of the list view
	 * 		if (response.haveError()) {
	 * 		v_query.setLastErrorMessage(response.getErrorMessage());
	 * 		// can use gs.error() or gs.addErrorMessage() while debugging
	 * 		// gs.debug() messages visible in session debugger
	 * 		// gs.debug(response.getErrorMessage());
	 * 		return;
	 * 		}
	 * 	} catch (ex) {
	 * 		v_query.setLastErrorMessage(ex.message);
	 * 		// gs.debug(ex.message);
	 * 		return;
	 * 	}
	 * 	​
	 * 	var transformerDefinition = getTransformerDefinition();
	 * 	var transformer = new sn_tfrm.Transformer(transformerDefinition, responseBody);
	 * 	// transformer parses the responseBody and extracts rows
	 * 	while (transformer.transform()) {
	 * 		// row is field-value map e.g. { active:"true", number: "INC0000001"}
	 * 		var row = transformer.getRow();
	 * 		// you may do any additional transformations to the row like GlideDuration, GlideDataTime etc. For example,
	 * 		// row.duration = new GlideDuration(row.duration);
	 * 	​
	 * 		// finally add the row to the remote table
	 * 		v_table.addRow(row);
	 * 	}
	 * }
	 * 
	 * @param row JavaScript object containing field name and value map in which the key is the field name, for example, {number: "INC0001", sys\_id: "a34"}.  { <field name>: String }
	 * @param row.<field value> Represents the value of the selected field. Although no fields are mandatory, ServiceNow recommends sys\_id.  Example listing only sys\_id field and value:  { sys\_id: "<uniqueID>" }
	 * 
	 * @returns boolean Flag that indicates whether the row was added to the remote table.  Valid values:  *   true: Success. *   false: Row was not added.
	 * 
	 */
	addRow(row: Object,row: string) : boolean
	}
/**
	 * @description The scoped Workflow API provides methods that can be used in an activity definition script.
	 * There are no constructors for creating an instance of a scoped workflow object. Instead, use the global workflow object available in activity scripts. This workflow object is available in any script location inside a workflow.
	 * 
	 */
	declare class Workflow {
	/**
	 * @description Returns the workflow's scratchpad object.
	 * @example
	 * //
	 * var scratchpad = workflow.scratchpad();
	 * 
	 * @returns Object The scratchpad object.
	 * 
	 */
	scratchpad() : Object
	/**
	 * @description Returns the workflow name.
	 * @example
	 * //
	 * var name = workflow.name();
	 * 
	 * @returns string The workflow name
	 * 
	 */
	name() : string
	/**
	 * @description Adds an informational message to the log.
	 * @example
	 * //
	 * var loggedMessage = workflow.info("All is well");
	 * 
	 * @param message The message to add to the log.
	 * @param args Arguments to add to the message.
	 * 
	 * @returns string The message that is logged.
	 * 
	 */
	info(message: string,args: Object) : string
	/**
	 * @description Adds a debug message to the log.
	 * @example
	 * //
	 * var loggedMessage = workflow.debug("All is well");
	 * 
	 * @param message The message to add to the log.
	 * @param args Arguments to add to the message.
	 * 
	 * @returns string The message added to the log.
	 * 
	 */
	debug(message: string,args: Object) : string
	/**
	 * @description Adds an error message to the log.
	 * @example
	 * //
	 * var loggedMessage = workflow.error("An error has occurred. ");
	 * 
	 * @param message The message to add to the log.
	 * @param args Arguments to add to the message.
	 * 
	 * @returns string The logged message
	 * 
	 */
	error(message: string,args: Object) : string
	/**
	 * @description Adds a warning message to the log.
	 * @example
	 * //
	 * var loggedMessage = workflow.warn("Check your permissions.");
	 * 
	 * @param message The message to add to the log.
	 * @param args Arguments to add to the message.
	 * 
	 * @returns string The logged message
	 * 
	 */
	warn(message: string,args: Object) : string
	/**
	 * @description Object that contains the workflow variables.
	 * This is not a method, but rather a way to reference the variables in a workflow object, such as the user. Workflow variables are defined in the properties of the workflow or by scripted activities.
	 * 
	 * @example
	 * //
	 * var user = workflow.inputs.u_user;
	 * 
	 * @param inputs Workflow variables as name value pairs. The variables of a workflow object are custom to an integrator's implementation.
	 * 
	 */
	inputs(inputs: Object) 
	/**
	 * @description Sets the specified variable to the specified value.
	 * @example
	 * //
	 * workflow.setVariable("task", "terrible");
	 * 
	 * @param name The variable name
	 * @param value The value to be assigned to the variable.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setVariable(name: string,value: Object) : void
	/**
	 * @description Returns the specified variable's value.
	 * @example
	 * //
	 * var value = workflow.getVariable("task");
	 * 
	 * @param name The variable name
	 * 
	 * @returns Object The variable's value
	 * 
	 */
	getVariable(name: string) : Object
	/**
	 * @description Removes the specified variable from the workflow.
	 * @example
	 * //
	 * var value = workflow.removeVariable("task");
	 * 
	 * @param name The variable name
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	removeVariable(name: string) : void
	/**
	 * @description Sets the workflow's result.
	 * @example
	 * //
	 * workflow.setResult("Success");
	 * 
	 * @param result The workflow's result
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setResult(result: string) : void
	/**
	 * @description Element of the workflow object that contains the workflow results.
	 * This is not a method, but rather the element in the workflow object that contains the results of a workflow.
	 * 
	 * @example
	 * //
	 * var wfResult = workflow.result;
	 * 
	 * @param result Workflow results.
	 * 
	 */
	result(result: string) 
	}
/**
	 * @description XMLDocument2 is a JavaScript Object wrapper for parsing and extracting XML data from an XML string.
	 * Use this JavaScript class to create an object from an XML string, usually a return value from a web-service invocation, or the XML payload of ECC Queue. Using the XMLDocument2 object in a JavaScript business rule lets you query values from the XML elements and attributes directly.  	
 *   	
 * An XML string has a tree structure, and the parts of the structure are called nodes. An XMLDocument2 object deals with two node types, element, and document element. An element node is a node with a name and possibly attributes and child nodes. A document-element node is the root node of the XML tree. It is the only node without a parent node.
	 * 
	 */
	declare class XMLDocument2 {
	/**
	 * @description Creates and adds an element node to the current node. The element name is the string passed in as a parameter. The new element has no text child nodes.
	 * @example
	 * //
	 * var xmlString = "&lt;test&gt;" +
	 *                 "  &lt;one&gt;" +
	 *                 "    &lt;two att=\"xxx\"&gt;abcd1234&lt;/two&gt;" +
	 *                 "    &lt;three boo=\"yah\" att=\"yyy\"&gt;1234abcd&lt;/three&gt;" +
	 *                 "    &lt;two&gt;another&lt;/two&gt;" +
	 *                 "  &lt;/one&gt;" +
	 *                 "  &lt;number&gt;1234&lt;/number&gt;" +
	 *                 "&lt;/test&gt;";
	 * var xmlDoc = new XMLDocument2();
	 * xmlDoc.parseXML(xmlString); 
	 * xmlDoc.createElement("new2"); 
	 *  
	 * gs.info(xmlDoc);
	 * 
	 * @param name The new element's name.
	 * 
	 * @returns XMLNode Current XML node.
	 * 
	 */
	createElement(name: string) : XMLNode
	/**
	 * @description Creates and adds an element node with a text child node to the current node.
	 * @example
	 * //
	 * var xmlString = "&lt;test&gt;" +
	 *     "  &lt;one&gt;" +
	 *     "    &lt;two att=\"xxx\"&gt;abcd1234&lt;/two&gt;" +
	 *     "    &lt;three boo=\"yah\" att=\"yyy\"&gt;1234abcd&lt;/three&gt;" +
	 *     "    &lt;two&gt;another&lt;/two&gt;" +
	 *     "  &lt;/one&gt;" +
	 *     "  &lt;number&gt;1234&lt;/number&gt;" +
	 *     "&lt;/test&gt;";
	 * var xmlDoc = new XMLDocument2();
	 * xmlDoc.parseXML(xmlString); 
	 * xmlDoc.createElementWithTextValue("new", "test");
	 * gs.info(xmlDoc);
	 * 
	 * @param name Name of the element to add.
	 * @param value Element's text value.
	 * 
	 * @returns XMLNode Current XML node.
	 * 
	 */
	createElementWithTextValue(name: string,value: string) : XMLNode
	/**
	 * @description Gets the document element node of the XMLdocument2 object. The document element node is the root node.
	 * @example
	 * //
	 * var xmlString = "&lt;test&gt;" +
	 *                 "  &lt;one&gt;" +
	 *                 "    &lt;two att=\"xxx\"&gt;abcd1234&lt;/two&gt;" +
	 *                 "    &lt;three boo=\"yah\" att=\"yyy\"&gt;1234abcd&lt;/three&gt;" +
	 *                 "    &lt;two&gt;another&lt;/two&gt;" +
	 *                 "  &lt;/one&gt;" +
	 *                 "  &lt;number&gt;1234&lt;/number&gt;" +
	 *                 "&lt;/test&gt;";
	 * var xmlDoc = new XMLDocument2();
	 * xmlDoc.parseXML(xmlString);
	 * //returns the root node of the document tree.
	 * var rootNode = xmlDoc.getDocumentElement();
	 * gs.info(rootNode.getTextContent());
	 * 
	 * @returns XMLNode The document element.
	 * 
	 */
	getDocumentElement() : XMLNode
	/**
	 * @description Gets the first node in the specified XPATH.
	 * @example
	 * //
	 * var xmlString = "&lt;test&gt;" +
	 *                 "  &lt;one&gt;" +
	 *                 "    &lt;two att=\"xxx\"&gt;abcd1234&lt;/two&gt;" +
	 *                 "    &lt;three boo=\"yah\" att=\"yyy\"&gt;1234abcd&lt;/three&gt;" +
	 *                 "    &lt;two&gt;another&lt;/two&gt;" +
	 *                 "  &lt;/one&gt;" +
	 *                 "  &lt;number&gt;1234&lt;/number&gt;" +
	 *                 "&lt;/test&gt;";
	 * var xmlDoc = new XMLDocument2();
	 * xmlDoc.parseXML(xmlString);
	 * var foo = xmlDoc.getFirstNode('/test/one/two');
	 * gs.info(foo.getTextContent());
	 * 
	 * @param xPath The XPATH.
	 * 
	 * @returns XMLNode The first node.
	 * 
	 */
	getFirstNode(xPath: string) : XMLNode
	/**
	 * @description Gets the node after the specified node.
	 * @example
	 * //
	 * var xmlString = "&lt;test&gt;" +
	 *                 "  &lt;one&gt;" +
	 *                 "    &lt;two att=\"xxx\"&gt;abcd1234&lt;/two&gt;" +
	 *                 "    &lt;three boo=\"yah\" att=\"yyy\"&gt;1234abcd&lt;/three&gt;" +
	 *                 "    &lt;two&gt;another&lt;/two&gt;" +
	 *                 "  &lt;/one&gt;" +
	 *                 "  &lt;number&gt;1234&lt;/number&gt;" +
	 *                 "&lt;/test&gt;";
	 * var xmlDoc = new XMLDocument2();
	 * xmlDoc.parseXML(xmlString);
	 * var foo = xmlDoc. getFirstNode('/test/one/two');
	 * var foo2 = xmlDoc.getNextNode(foo);
	 * gs.info(foo.getTextContent());
	 * gs.info(foo2.getTextContent());
	 * 
	 * @param current The current node.
	 * 
	 * @returns XMLNode The next node.
	 * 
	 */
	getNextNode(current: Object) : XMLNode
	/**
	 * @description Gets the node specified in the XPath.
	 * @example
	 * //
	 * var xmlString = "&lt;test&gt;" +
	 *                 "  &lt;one&gt;" +
	 *                 "    &lt;two att=\"xxx\"&gt;abcd1234&lt;/two&gt;" +
	 *                 "    &lt;three boo=\"yah\" att=\"yyy\"&gt;1234abcd&lt;/three&gt;" +
	 *                 "    &lt;two&gt;another&lt;/two&gt;" +
	 *                 "  &lt;/one&gt;" +
	 *                 "  &lt;number&gt;1234&lt;/number&gt;" +
	 *                 "&lt;/test&gt;";
	 * var xmlDoc = new XMLDocument2();
	 * xmlDoc.parseXML(xmlString);
	 * var node = xmlDoc.getNode("/test/one/two");
	 * gs.info(node);
	 * 
	 * @param xPath XPath of the node to obtain.
	 * 
	 * @returns XMLNode Current XML node.
	 * 
	 */
	getNode(xPath: string) : XMLNode
	/**
	 * @description Gets all the text child nodes from the node referenced in the specified XPath.
	 * @example
	 * //
	 * var xmlString = "&lt;test&gt;" +
	 *                 "  &lt;one&gt;" +
	 *                 "    &lt;two att=\"xxx\"&gt;abcd1234&lt;/two&gt;" +
	 *                 "    &lt;three boo=\"yah\" att=\"yyy\"&gt;1234abcd&lt;/three&gt;" +
	 *                 "    &lt;two&gt;another&lt;/two&gt;" +
	 *                 "  &lt;/one&gt;" +
	 *                 "  &lt;number&gt;1234&lt;/number&gt;" +
	 *                 "&lt;/test&gt;";
	 * var xmlDoc = new XMLDocument2();
	 * xmlDoc.parseXML(xmlString); 
	 * gs.info(xmlDoc.getNodeText("//two"));
	 * 
	 * @param xPath XPath of the text to obtain.
	 * 
	 * @returns string Text children in the XPath.
	 * 
	 */
	getNodeText(xPath: string) : string
	/**
	 * @description Parses the XML string and loads it into the XMLDocument2 object.
	 * @example
	 * //This example parses the xmlString and loads it into the xmlDocument2 object.
	 * var xmlString = "&lt;test&gt;" +
	 *                 "  &lt;one&gt;" +
	 *                 "    &lt;two att=\"xxx\"&gt;abcd1234&lt;/two&gt;" +
	 *                 "    &lt;three boo=\"yah\" att=\"yyy\"&gt;1234abcd&lt;/three&gt;" +
	 *                 "    &lt;two&gt;another&lt;/two&gt;" +
	 *                 "  &lt;/one&gt;" +
	 *                 "  &lt;number&gt;1234&lt;/number&gt;" +
	 *                 "&lt;/test&gt;";
	 * var xmlDoc = new XMLDocument2();
	 * xmlDoc.parseXML(xmlString); 
	 * var rootNode = xmlDoc.getDocumentElement();
	 * 
	 * @param xmlDoc The document to parse.
	 * 
	 * @returns boolean Flag that indicates whether the content was parsed.
	 * 
	 */
	parseXML(xmlDoc: string) : boolean
	/**
	 * @description Makes the node passed in as a parameter the current node.
	 * @example
	 * //
	 * var xmlString = "&lt;test&gt;" +
	 *                 "  &lt;one&gt;" +
	 *                 "    &lt;two att=\"xxx\"&gt;abcd1234&lt;/two&gt;" +
	 *                 "    &lt;three boo=\"yah\" att=\"yyy\"&gt;1234abcd&lt;/three&gt;" +
	 *                 "    &lt;two&gt;another&lt;/two&gt;" +
	 *                 "  &lt;/one&gt;" +
	 *                 "  &lt;number&gt;1234&lt;/number&gt;" +
	 *                 "&lt;/test&gt;";
	 * var xmlDoc = new XMLDocument2();
	 * xmlDoc.parseXML(xmlString);
	 * //returns the root node of the document tree.
	 * var rootNode = xmlDoc.getDocumentElement(); //returns org.w3c.dom.Element
	 * // sets the root node as the current element
	 * xmlDoc.setCurrentElement(rootNode);
	 * 
	 * @param element The element node to set as the current node.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setCurrentElement(element: XMLNode) : void
	/**
	 * @description When set to true, the XMLDocument2 object processes the document with XML namespaces.
	 * If you don't set this, an XML document with namespaces won't be enumerated correctly, and an XPath search would fail.
	 * 
	 * @param aware When true, the XMLDocument2 object processes the document with XML namespaces.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setNamespaceAware(aware: boolean) : void
	/**
	 * @description Returns a string containing the XML.
	 * @example
	 * //
	 * var xmlString = "&lt;test&gt;" +
	 *                 "  &lt;one&gt;" +
	 *                 "    &lt;two att=\"xxx\"&gt;abcd1234&lt;/two&gt;" +
	 *                 "    &lt;three boo=\"yah\" att=\"yyy\"&gt;1234abcd&lt;/three&gt;" +
	 *                 "    &lt;two&gt;another&lt;/two&gt;" +
	 *                 "  &lt;/one&gt;" +
	 *                 "  &lt;number&gt;1234&lt;/number&gt;" +
	 *                 "&lt;/test&gt;";
	 * var xmlDoc = new XMLDocument2();
	 * xmlDoc.parseXML(xmlString);
	 * gs.info(xmlDoc.toString());
	 * 
	 * @returns string A string containing the XML.
	 * 
	 */
	toString() : string
	/**
	 * @description Creates an XMLDocument2 object.
	 */
	constructor() 
	/**
	 * @description Creates an XMLDocument2 object from an attachment stream.
	 * @param inputStream The input stream the XMLDocument2 object encapsulates.
	 * 
	 */
	constructor(inputStream: GlideScriptableInputStream) 
	}
/**
	 * @description The scoped XMLNode API allows you to query values from XML nodes. XMLNodes are extracted from XMLDocument2 objects, which contain XML strings.
	 * There are no constructors for creating a stand alone instance of an XMLNode object. Instead, use the createElement() method of [XMLDocument2](dev.do#!/reference/api/paris/server/no-namespace/c_XMLDocument2ScopedAPI "XMLDocument2 is a JavaScript Object wrapper for parsing and extracting XML data from an XML string."), which adds a node to an existing document.
	 * 
	 */
	declare class XMLNode {
	/**
	 * @description Gets the text content of the current node. The text content of a node consists of all the node's child text nodes
	 * @example
	 * //
	 * var xmlString = "&lt;test&gt;" +
	 *                 "  &lt;one&gt;" +
	 *                 "    &lt;two att=\"xxx\"&gt;abcd1234&lt;/two&gt;" +
	 *                 "    &lt;three boo=\"yah\" att=\"yyy\"&gt;1234abcd&lt;/three&gt;" +
	 *                 "    &lt;two&gt;another&lt;/two&gt;" +
	 *                 "  &lt;/one&gt;" +
	 *                 "  &lt;number&gt;1234&lt;/number&gt;" +
	 *                 "&lt;/test&gt;";
	 * var xmldoc = new XMLDocument2();
	 * xmldoc.parseXML(xmlString);
	 * var node = xmldoc.getNode('//one/two');
	 * gs.info(node.getTextContent());
	 * 
	 * @returns string The text content of the current node.
	 * 
	 */
	getTextContent() : string
	/**
	 * @description Gets the node's last child node.
	 * @example
	 * //
	 * var xmlString = "&lt;test&gt;" +
	 *                 "&lt;one&gt;" +
	 *                 "&lt;two att=\"xxx\"&gt;abcd1234&lt;/two&gt;" +
	 *                 "&lt;three boo=\"yah\" att=\"yyy\"&gt;1234abcd&lt;/three&gt;" +
	 *                 "&lt;two&gt;another&lt;/two&gt;" +
	 *                 "&lt;/one&gt;" +
	 *                 "&lt;number&gt;1234&lt;/number&gt;" +
	 *                 "&lt;/test&gt;";
	 * var xmlDoc = new XMLDocument2();
	 * xmlDoc.parseXML(xmlString);
	 * var node = xmlDoc.getNode('//one');
	 *  
	 * gs.info(node.getLastChild());
	 * 
	 * @returns XMLNode The node's last child.
	 * 
	 */
	getLastChild() : XMLNode
	/**
	 * @description Gets the node's first child node.
	 * @example
	 * //
	 * var xmlString = "&lt;test&gt;" +
	 *                 "&lt;one&gt;" +
	 *                 "&lt;two att=\"xxx\"&gt;abcd1234&lt;/two&gt;" +
	 *                 "&lt;three boo=\"yah\" att=\"yyy\"&gt;1234abcd&lt;/three&gt;" +
	 *                 "&lt;two&gt;another&lt;/two&gt;" +
	 *                 "&lt;/one&gt;" +
	 *                 "&lt;number&gt;1234&lt;/number&gt;" +
	 *                 "&lt;/test&gt;";
	 * var xmlDoc = new XMLDocument2();
	 * xmlDoc.parseXML(xmlString);
	 * var node = xmlDoc.getNode('//one');
	 * gs.info(node.getFirstChild());
	 * 
	 * @returns XMLNode The node's first child node.
	 * 
	 */
	getFirstChild() : XMLNode
	/**
	 * @description Gets the node's value. A node's value is determined by the node type. Element and document-element nodes return null.
	 * @example
	 * //
	 * var xmlString = "&lt;test&gt;" +
	 *                 "  &lt;one&gt;" +
	 *                 "    &lt;two att=\"xxx\"&gt;abcd1234&lt;/two&gt;" +
	 *                 "    &lt;three boo=\"yah\" att=\"yyy\"&gt;1234abcd&lt;/three&gt;" +
	 *                 "    &lt;two&gt;another&lt;/two&gt;" +
	 *                 "  &lt;/one&gt;" +
	 *                 "  &lt;number&gt;1234&lt;/number&gt;" +
	 *                 "&lt;/test&gt;";
	 * var xmlDoc = new XMLDocument2();
	 * xmlDoc.parseXML(xmlString);
	 * var node = xmlDoc.getNode('//two');
	 * gs.info(node.getNodeValue());
	 * 
	 * @returns string The node's value.
	 * 
	 */
	getNodeValue() : string
	/**
	 * @description Gets the node's name. A node's name is determined by the node type. A document-element node's name is #document. A text node's name is #text. An element node's name is the element's name.
	 * @example
	 * //
	 * var xmlString = "&lt;test&gt;" +
	 *                 "  &lt;one&gt;" +
	 *                 "    &lt;two att=\"xxx\"&gt;abcd1234&lt;/two&gt;" +
	 *                 "    &lt;three boo=\"yah\" att=\"yyy\"&gt;1234abcd&lt;/three&gt;" +
	 *                 "    &lt;two&gt;another&lt;/two&gt;" +
	 *                 "  &lt;/one&gt;" +
	 *                 "  &lt;number&gt;1234&lt;/number&gt;" +
	 *                 "&lt;/test&gt;";
	 * var xmlDoc = new XMLDocument2();
	 * xmlDoc.parseXML(xmlString);
	 * var node = xmlDoc.getNode('//two');
	 * gs.info(node.getNodeName());
	 * 
	 * @returns string The node's name.
	 * 
	 */
	getNodeName() : string
	/**
	 * @description Determines if the node has the specified attribute.
	 * @example
	 * //
	 * var xmlString = "&lt;test&gt;" +
	 *                 "  &lt;one&gt;" +
	 *                 "    &lt;two att=\"xxx\"&gt;abcd1234&lt;/two&gt;" +
	 *                 "    &lt;three boo=\"yah\" att=\"yyy\"&gt;1234abcd&lt;/three&gt;" +
	 *                 "    &lt;two&gt;another&lt;/two&gt;" +
	 *                 "  &lt;/one&gt;" +
	 *                 "  &lt;number&gt;1234&lt;/number&gt;" +
	 *                 "&lt;/test&gt;";
	 * var xmlDoc = new XMLDocument2();
	 * xmlDoc.parseXML(xmlString);
	 * var node = xmlDoc.getNode('//two');
	 * gs.info(node.hasAttribute('att'));
	 * 
	 * @param attribute The name of the attribute to check.
	 * 
	 * @returns boolean True if the node has the attribute.
	 * 
	 */
	hasAttribute(attribute: string) : boolean
	/**
	 * @description Gets the value of the attribute.
	 * @example
	 * //
	 * var xmlString = "&lt;test&gt;" +
	 *                 "  &lt;one&gt;" +
	 *                 "    &lt;two att=\"xxx\"&gt;abcd1234&lt;/two&gt;" +
	 *                 "    &lt;three boo=\"yah\" att=\"yyy\"&gt;1234abcd&lt;/three&gt;" +
	 *                 "    &lt;two&gt;another&lt;/two&gt;" +
	 *                 "  &lt;/one&gt;" +
	 *                 "  &lt;number&gt;1234&lt;/number&gt;" +
	 *                 "&lt;/test&gt;";
	 * var xmlDoc = new XMLDocument2();
	 * xmlDoc.parseXML(xmlString);
	 * var node = xmlDoc.getNode('//two');
	 * gs.info(node.getAttribute('att'));
	 * 
	 * @param attribute Name of the attribute.
	 * 
	 * @returns string The attribute's value.
	 * 
	 */
	getAttribute(attribute: string) : string
	/**
	 * @description Returns an object containing the node's attributes as properties with values.
	 * @returns Object Contains name-value pairs where the name is the attribute and the value is the attribute's value.
	 * 
	 */
	getAttributes() : Object
	/**
	 * @description Returns the string value of the current node.
	 * @example
	 * //
	 * var xmlString = "&lt;test&gt;" +
	 *                 "  &lt;one&gt;" +
	 *                 "    &lt;two att=\"xxx\"&gt;abcd1234&lt;/two&gt;" +
	 *                 "    &lt;three boo=\"yah\" att=\"yyy\"&gt;1234abcd&lt;/three&gt;" +
	 *                 "    &lt;two&gt;another&lt;/two&gt;" +
	 *                 "  &lt;/one&gt;" +
	 *                 "  &lt;number&gt;1234&lt;/number&gt;" +
	 *                 "&lt;/test&gt;";
	 * var xmlDoc = new XMLDocument2();
	 * xmlDoc.parseXML(xmlString);
	 * var node = xmlDoc.getNode('//one');
	 * gs.info(node.toString());
	 * 
	 * @returns string The string value of the current node.
	 * 
	 */
	toString() : string
	/**
	 * @description Gets a XMLNodeIterator object that can be used to walk through the list of child nodes.
	 * @example
	 * //
	 * var xmlString = "&lt;test&gt;" +
	 *                 "  &lt;one&gt;" +
	 *                 "    &lt;two att=\"xxx\"&gt;abcd1234&lt;/two&gt;" +
	 *                 "    &lt;three boo=\"yah\" att=\"yyy\"&gt;1234abcd&lt;/three&gt;" +
	 *                 "    &lt;two&gt;another&lt;/two&gt;" +
	 *                 "  &lt;/one&gt;" +
	 *                 "  &lt;number&gt;1234&lt;/number&gt;" +
	 *                 "&lt;/test&gt;";
	 * var xmlDoc = new XMLDocument2();
	 * xmlDoc.parseXML(xmlString);
	 * var node = xmlDoc.getNode('//one');
	 * var iter= node.getChildNodeIterator();
	 * gs.info(iter.hasNext());
	 * 
	 * @returns XMLNodeIterator The node iterator object.
	 * 
	 */
	getChildNodeIterator() : XMLNodeIterator
	}
/**
	 * @description The scoped XMLNodeIterator class allows you to iterate through a node of a XML document.
	 * There are no constructors for creating a stand alone instance of a XMLNodeIterator object. To create a XMLNodeIterator object use the getChildNodeIterator() method of the XMLNode object.
	 * 
	 */
	declare class XMLNodeIterator {
	/**
	 * @description Gets the next element in the iteration. The returned element may be a #text node for the spaces/tabs if XML is "pretty formatted".
	 * @example
	 * //
	 * var xmlString = "&lt;test&gt;" +
	 *                 "  &lt;one&gt;" +
	 *                 "    &lt;two att=\"xxx\"&gt;abcd1234&lt;/two&gt;" +
	 *                 "    &lt;three boo=\"yah\" att=\"yyy\"&gt;1234abcd&lt;/three&gt;" +
	 *                 "    &lt;two&gt;another&lt;/two&gt;" +
	 *                 "  &lt;/one&gt;" +
	 *                 "  &lt;number&gt;1234&lt;/number&gt;" +
	 *                 "&lt;/test&gt;";
	 * var xmlDoc = new XMLDocument2();
	 * xmlDoc.parseXML(xmlString);
	 * var node = xmlDoc.getNode('//one');
	 * var iter= node.getChildNodeIterator();
	 * while(iter.hasNext()) {
	 *    var n = iter.next();
	 *    gs.info('Node name: ' +  n.getNodeName());
	 *    gs.info('Node value: ' +  n.getNodeValue());
	 * }
	 * 
	 * @returns XMLNode The next element in the iteration.
	 * 
	 */
	next() : XMLNode
	/**
	 * @description Returns true if the iteration has more elements.
	 * @example
	 * //
	 * var xmlString = "&lt;test&gt;" +
	 *                 "  &lt;one&gt;" +
	 *                 "    &lt;two att=\"xxx\"&gt;abcd1234&lt;/two&gt;" +
	 *                 "    &lt;three boo=\"yah\" att=\"yyy\"&gt;1234abcd&lt;/three&gt;" +
	 *                 "    &lt;two&gt;another&lt;/two&gt;" +
	 *                 "  &lt;/one&gt;" +
	 *                 "  &lt;number&gt;1234&lt;/number&gt;" +
	 *                 "&lt;/test&gt;";
	 * var xmlDoc = new XMLDocument2();
	 * xmlDoc.parseXML(xmlString);
	 * var node = xmlDoc.getNode('//one');
	 * var iter= node.getChildNodeIterator();
	 * gs.info(iter.hasNext());
	 * 
	 * @returns boolean True if the iteration has more elements.
	 * 
	 */
	hasNext() : boolean
	}

/**
	 * @description The AuthCredential() API provides methods that enable you to build credentials for a REST request.
	 * Generate outbound signing requests using these APIs in the following order:	
 * 	
 * 1.  HttpRequestData: Build the API request.	
 * 2.  AuthCredential: Create a credential object or update an existing one. Use the credential to sign the request through the RequestAuthAPI class.	
 * 3.  RequestAuthAPI: Sign the request and return an HttpRequestAuthedData object.	
 * 4.  HttpRequestAuthedData: Get information about the signed request.	
 * 5.  GlideHTTPRequest: Send the signed request.	
 * 	
 *   	
 *   	
 * Before using these APIs, you must [configure an authentication algorithm](https://docs.servicenow.com/bundle/paris-servicenow-platform/page/product/credentials/task/configure-authentication-algorithm.html) to sign the request and associate it with the credential used to authenticate the request.  	
 *   	
 * You can create an empty AuthCredential object, instantiate an existing AuthCredential object, or use the StandardCredentialsProvider class to instantiate an AuthCredential object using a Credential record from the Credentials \[discovery\_credentials\] table. If you create an empty AuthCredential object, use the setAttribute() method to add properties to the object.  	
 *   	
 * See the following example to instantiate an AuthCredential using StandardCredentialsProvider:	
 * 	
 *     // Return an AuthCredential object using a Credential sys_id	
 *     var credential = new sn_cc.StandardCredentialsProvider().getAuthCredentialByID("5b61c16f73533300f662cff8faf6a74b");	
 * 	
 *   	
 *   	
 * Use the AuthCredential API in scoped scripts with the sn\_auth namespace identifier.
	 * 
	 */
	declare class AuthCredential {
	/**
	 * @description Instantiates a new AuthCredential object, or modifies an existing one.
	 * You can create an empty AuthCredential object, instantiate an existing AuthCredential object, or use the StandardCredentialsProvider class to instantiate an AuthCredential object using a Credential record from the Credentials \[discovery\_credentials\] table. If you create an empty AuthCredential object, use the setAttribute() method to add properties to the object.
	 * 
	 * @param authCredential Optional. Include this parameter to update an existing AuthCredential object.
	 * 
	 */
	constructor(authCredential: Object) 
	/**
	 * @description Returns the value of an AuthCredential attribute.
	 * @example
	 * //
	 * // Define the HttpRequestData object
	 * var endpoint= "https://third-party-endpoint";
	 * var httpRequestData = new sn_auth.HttpRequestData();
	 * httpRequestData.setEndpoint(endpoint);
	 * httpRequestData.setService(‘s3’);
	 * httpRequestData.setRegion(‘us-east-1’);
	 * httpRequestData.setHttpMethod(“PUT”);
	 * var content = “Action=SendMessage&amp;MessageBody=This is a test message”;
	 * httpRequestData.setContent(content);
	 * httpRequestData.addHeader(‘x-amz-acl’ , ‘public-read’ );
	 *  
	 * // Get AuthCredential object and set an attribute
	 * var credential = new sn_auth.AuthCredential();
	 * credential.setAttribute("user_name", "admin");
	 *  
	 * // Sign the request and return an AuthCredential attribute value
	 * var signingAPI = new sn_auth.RequestAuthAPI(httpRequestData, credential);
	 * var signingCredential = signingAPI.getAuthCredential();
	 * name = signingCredential.getAttribute("name");
	 * 
	 * @param key Key of the attribute to return the value for. If you created an empty AuthCredential object, you must use the setAttribute() method to add properties to the object. If you used a credential record to instantiate the AuthCredential object, pass a field name from the Credential \[discovery\_credentials\] table to access the value.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	getAttribute(key: string) : void
	/**
	 * @description Sets an attribute for an AuthCredential object.
	 * @example
	 * //
	 * // Define the HttpRequestData object
	 * var endpoint= "https://third-party-endpoint";
	 * var httpRequestData = new sn_auth.HttpRequestData();
	 * httpRequestData.setEndpoint(endpoint);
	 * httpRequestData.setService(‘s3’);
	 * httpRequestData.setRegion(‘us-east-1’);
	 * httpRequestData.setHttpMethod(“PUT”);
	 * var content = “Action=SendMessage&amp;MessageBody=This is a test message”;
	 * httpRequestData.setContent(content);
	 * httpRequestData.addHeader(‘x-amz-acl’ , ‘public-read’ );
	 *  
	 * // Get AuthCredential object and set an attribute
	 * var credential = new sn_auth.AuthCredential();
	 * credential.setAttribute("user_name", "admin");
	 * 
	 * @param key Name of the attribute to set. If you created an empty AuthCredential object, you must use the this method to add properties to the object. If you used a credential record to instantiate the AuthCredential object, pass a field name from the Credential \[discovery\_credentials\] table to set the value.
	 * @param value Value of the attribute.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setAttribute(key: string,value: string) : void
	}
/**
	 * @description Use these methods for requesting and revoking OAuth refresh and access tokens.
	 * This API can be used in global and scoped scripts. In scoped scripts us the sn\_auth namespace identifier.
	 * 
	 */
	declare class GlideOAuthClientScopedGlobal {
	/**
	 * @description Retrieves the token for the client. You can use the token to check the expiration date and perform a token renewal.
	 * @example
	 * //This example code retrieves a token from the instance database:
	 * token = oAuthClient.getToken(testAppProvider, someone@someemail.com);
	 * 
	 * @param OAuthEntityName The OAuth entity.
	 * @param requestor The request.
	 * 
	 * @returns ScopedGlideOAuthToken The token for the client.
	 * 
	 */
	getToken(OAuthEntityName: string,requestor: string) : ScopedGlideOAuthToken
	/**
	 * @description Retrieves the token for the client, with the client name and the request set into a GlideOAuthClientResponse object.
	 * @param clientName The client name.
	 * @param request The request.
	 * 
	 * @returns GlideOAuthClientResponse The token for the client.
	 * 
	 */
	requestTokenByRequest(clientName: string,request: GlideOAuthClientRequest) : GlideOAuthClientResponse
	/**
	 * @description Retrieves the token for the client, with the request parameters encoded in JSON format.
	 * @example
	 * //This example shows a resource owner password grant type request, with request parameters encoded in JSON format.
	 * 
	 * var oAuthClient = new GlideOAuthClient();
	 * var params ={grant_type:"password", username:"itil", password:'itil'};
	 * var json =new JSON();
	 * var text = json.encode(params);
	 * var tokenResponse = oAuthClient.requestToken('TestClient', text);
	 * var token = tokenResponse.getToken();
	 * 
	 * gs.log("AccessToken:"+ token.getAccessToken());
	 * gs.log("AccessTokenExpiresIn:"+ token.getExpiresIn());
	 * gs.log(" RefreshToken:"+ token.getRefreshToken());
	 * 
	 * 
	 * @param clientName The client name.
	 * @param jsonString The JSON string for the client.
	 * 
	 * @returns GlideOAuthClientResponse The token for the client.
	 * 
	 */
	requestToken(clientName: string,jsonString: string) : GlideOAuthClientResponse
	/**
	 * @description Revokes the access or refresh token for the client, with the request and optional header parameters set into a GlideOAuthClientRequest object.
	 * @param clientName The client name.
	 * @param accessToken The access token.
	 * @param refreshToken The refresh token.
	 * @param request The request.
	 * 
	 * @returns GlideOAuthClientResponse The token for the client.
	 * 
	 */
	revokeToken(clientName: string,accessToken: string,refreshToken: string,request: GlideOAuthClientRequest) : GlideOAuthClientResponse
	}
/**
	 * @description Use these methods for handling OAuth client requests.
	 * This API can be used in global and scoped scripts. In scoped scripts us the sn\_auth namespace identifier.
	 * 
	 */
	declare class GlideOAuthClientRequestScopedGlobal {
	/**
	 * @description Retrieves the grant type.
	 * @returns string The grant type.
	 * 
	 */
	getGrantType() : string
	/**
	 * @description Retrieves the HTTP headers for the string you provide.
	 * @param name The name of the parameter.
	 * 
	 * @returns StringMap The string map with the HTTP headers.
	 * 
	 */
	getHeader(name: string) : StringMap
	/**
	 * @description Retrieves the HTTP headers.
	 * @returns StringMap The string map with the HTTP headers.
	 * 
	 */
	getHeaders() : StringMap
	/**
	 * @description Retrieves the parameters for the parameter name you provide.
	 * @param name The parameter name for which you want the parameters.
	 * 
	 * @returns string The parameters.
	 * 
	 */
	getParameter(name: string) : string
	/**
	 * @description Retrieves the password.
	 * @returns string The password.
	 * 
	 */
	getPassword() : string
	/**
	 * @description Retrieves the refresh token.
	 * @returns string The refresh token.
	 * 
	 */
	getRefreshToken() : string
	/**
	 * @description Retrieves the scope.
	 * @returns string The scope.
	 * 
	 */
	getScope() : string
	/**
	 * @description Retrieves the user name.
	 * @returns string The user name.
	 * 
	 */
	getUserName() : string
	/**
	 * @description Sets the grant type for the string you provide.
	 * Note: You only need to set the grant type if it is not already defined in the OAuth provider profile.
	 * 
	 * @param name The grant type.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setGrantType(name: string) : void
	/**
	 * @description Retrieves the HTTP headers for the string you provide.
	 * @param name The name of the parameter.
	 * @param value The value of the parameter.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setHead(name: string,value: string) : void
	/**
	 * @description Sets the parameters for the name:value pair of strings you provide.
	 * @param name The parameter name for which you want the parameters.
	 * @param value The value of the parameter.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setParameter(name: string,value: string) : void
	/**
	 * @description Sets the password with the string you provide.
	 * @param password The user name.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setPassword(password: string) : void
	/**
	 * @description Sets the refresh token with the string you provide.
	 * @example
	 * //This example shows a resource owner password grant type request.
	 * 
	 *      var tokenRequest =new GlideOAuthClientRequest();
	 *      tokenRequest.setGrantType("password");
	 *      tokenRequest.setUserName("itil");
	 *      tokenRequest.setPassword("itil");
	 *      tokenRequest.setScope(null);
	 *  
	 *      var oAuthClient =new GlideOAuthClient();var tokenResponse = oAuthClient.requestToken("TestClient", tokenRequest);
	 *      gs.log("Error:"+ tokenResponse.getErrorMessage());
	 *  
	 *      var token = tokenResponse.getToken();if(token){
	 *        gs.log("AccessToken:"+ token.getAccessToken());
	 *        gs.log("AccessTokenExpiresIn:"+ token.getExpiresIn());
	 *        gs.log("RefreshToken:"+ token.getRefreshToken());
	 * 
	 * 
	 * @param refreshToken The refresh token.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setRefreshToken(refreshToken: string) : void
	/**
	 * @description Sets the scope for the string you provide.
	 * Note: You only need to set the scope if it is not already defined in the OAuth provider.
	 * 
	 * @param scope The scope.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setScope(scope: string) : void
	/**
	 * @description Sets the user name with the string you provide.
	 * @param userName The user name.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setUserName(userName: string) : void
	}
/**
	 * @description Use these methods for handling OAuth client responses.
	 * This API can be used in global and scoped scripts. In scoped scripts us the sn\_auth namespace identifier.
	 * 
	 */
	declare class GlideOAuthClientResponseScopedGlobal {
	/**
	 * @description Retrieves all of the response information, including instance information.
	 * @returns string The response information.
	 * 
	 */
	getBody() : string
	/**
	 * @description Retrieves the HTTP response content header from an external OAuth provider.
	 * @returns string The HTTP response header.
	 * 
	 */
	getContentType() : string
	/**
	 * @description Retrieves the error message if authentication is not successful.
	 * @returns string The error message.
	 * 
	 */
	getErrorMessage() : string
	/**
	 * @description Retrieves the HTTP response code from the external OAuth provider.
	 * @returns string The HTTP response code.
	 * 
	 */
	getResponseCode() : string
	/**
	 * @description Retrieves the error message if authentication is not successful.
	 * @returns MapString The response content.
	 * 
	 */
	getResponseParameters() : MapString
	/**
	 * @description Retrieves the refresh token.
	 * @returns GlideOAuthToken The refresh token.
	 * 
	 */
	getToken() : GlideOAuthToken
	}
/**
	 * @description Use the GlideOAuthToken methods for retrieving OAuth access token and information about the access token.
	 * This API can be used in global and scoped scripts. In scoped scripts use the sn\_auth namespace identifier.
	 * 
	 */
	declare class GlideOAuthTokenScopedGlobal {
	/**
	 * @description Retrieves the sys\_id of the token ID.
	 * @returns string The sys\_id of the access token.
	 * 
	 */
	getAccessTokenSysID() : string
	/**
	 * @description Retrieves the access token.
	 * @returns string The access token.
	 * 
	 */
	getAccessToken() : string
	/**
	 * @description Retrieves the lifespan of the access token in seconds.
	 * @returns number The lifespan.
	 * 
	 */
	getExpiresIn() : number
	/**
	 * @description Retrieves the lifespan of the access token in seconds.
	 * @returns number The refresh token.
	 * 
	 */
	getRefreshToken() : number
	/**
	 * @description Retrieves the sys\_id of the refresh token.
	 * @returns number The sys\_id of the refresh token.
	 * 
	 */
	getRefreshTokenSysID() : number
	/**
	 * @description Retrieves the scope, which is the amount of access granted by the access token.
	 * @returns string The scope.
	 * 
	 */
	getScope() : string
	}
/**
	 * @description The HttpRequestAuthedData() API provides methods to access and set values in a signed REST request.
	 * Generate outbound signing requests using these APIs in the following order:	
 * 	
 * 1.  HttpRequestData: Build the API request.	
 * 2.  AuthCredential: Create a credential object or update an existing one. Use the credential to sign the request through the RequestAuthAPI class.	
 * 3.  RequestAuthAPI: Sign the request and return an HttpRequestAuthedData object.	
 * 4.  HttpRequestAuthedData: Get information about the signed request.	
 * 5.  GlideHTTPRequest: Send the signed request.	
 * 	
 *   	
 *   	
 * Before using these APIs, you must [configure an authentication algorithm](https://docs.servicenow.com/bundle/paris-servicenow-platform/page/product/credentials/task/configure-authentication-algorithm.html) to sign the request and associate it with the credential used to authenticate the request.  	
 *   	
 * Use this API in scoped scripts with the sn\_auth namespace identifier. You can instantiate this class using the constructor, or you can return an HttpRequestAuthedData object from the generateAuth() method in the RequestAuthAPI class.
	 * 
	 */
	declare class HttpRequestAuthedData {
	/**
	 * @description Adds a header to the HttpRequestAuthedData object.
	 * @example
	 * //
	 * // Define HttpRequestData
	 * var endpoint= "https://third-party-endpoint“;
	 * var httpRequestData = new sn_auth.HttpRequestData();
	 * httpRequestData.setEndpoint(endpoint);
	 * httpRequestData.setService(‘s3’);
	 * httpRequestData.setRegion(‘us-east-1’);
	 * httpRequestData.setHttpMethod(“PUT”);
	 * var content = “Action=SendMessage&amp;MessageBody=This is a test message”;
	 * httpRequestData.setContent(content);
	 *  
	 * //Get AuthCredential
	 * var credential = new sn_cc.StandardCredentialsProvider().getAuthCredentialByID("5b61c16f73533300f662cff8faf6a74b");
	 *  
	 * // Create RequestAuthAPI and sign the request
	 * var signingAPI = new sn_auth.RequestAuthAPI(httpRequestData, credential);
	 * var output = signingAPI.generateAuth();
	 *  
	 * // Update the signed response
	 * output.addHeader(‘access-rights’, ‘public-read’);
	 * 
	 * @param key Name of the HTTP header.
	 * @param value Value of the HTTP Header.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	addHeader(key: string,value: string) : void
	/**
	 * @description Adds a query parameter to the HttpRequestAuthedData object.
	 * @example
	 * //
	 * // Define HttpRequestData
	 * var endpoint= "https://third-party-endpoint“;
	 * var httpRequestData = new sn_auth.HttpRequestData();
	 * httpRequestData.setEndpoint(endpoint);
	 * httpRequestData.setService(‘s3’);
	 * httpRequestData.setRegion(‘us-east-1’);
	 * httpRequestData.setHttpMethod(“PUT”);
	 * var content = “Action=SendMessage&amp;MessageBody=This is a test message”;
	 * httpRequestData.setContent(content);
	 *  
	 * //Get AuthCredential
	 * var credential = new sn_cc.StandardCredentialsProvider().getAuthCredentialByID("5b61c16f73533300f662cff8faf6a74b");
	 *  
	 * // Create RequestAuthAPI and sign the request
	 * var signingAPI = new sn_auth.RequestAuthAPI(httpRequestData, credential);
	 * var output = signingAPI.generateAuth();
	 *  
	 * // Update the signed response
	 * output.addQueryParameter(‘api_version’, ‘v2’);
	 * 
	 * @param key Name of the query parameter.
	 * @param value Value of the query parameter.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	addQueryParam(key: string,value: string) : void
	/**
	 * @description Returns whether the signature is applied to the request in the header or as a query parameter.
	 * By default, the system applies the signature to the header. You can apply the signature as a query parameter using the setDirective() API.
	 * 
	 * @example
	 * //
	 * // Define HttpRequestData
	 * var endpoint= "https://third-party-endpoint“;
	 * var httpRequestData = new sn_auth.HttpRequestData();
	 * httpRequestData.setEndpoint(endpoint);
	 * httpRequestData.setService(‘s3’);
	 * httpRequestData.setRegion(‘us-east-1’);
	 * httpRequestData.setHttpMethod(“PUT”);
	 * var content = “Action=SendMessage&amp;MessageBody=This is a test message”;
	 * httpRequestData.setContent(content);
	 *  
	 * //Get AuthCredential
	 * var credential = new sn_cc.StandardCredentialsProvider().getAuthCredentialByID("5b61c16f73533300f662cff8faf6a74b");
	 *  
	 * // Create RequestAuthAPI and sign the request
	 * var signingAPI = new sn_auth.RequestAuthAPI(httpRequestData, credential);
	 * var output = signingAPI.generateAuth();
	 * output.setDirective("header");
	 * 
	 * gs.info("Signature applied to: " + output.getDirective());
	 * 
	 * @returns string Whether the signature is applied to the header or as a query parameter.  Values include:  *   HEADER: The signature is applied to the request header. *   QUERY: The signature is applied as a query parameter.
	 * 
	 */
	getDirective() : string
	/**
	 * @description Returns an object containing the headers that were included when the request was signed.
	 * @example
	 * //
	 * // Define the HttpRequestData object
	 * var endpoint= "https://third-party-endpoint";
	 * var httpRequestData = new sn_auth.HttpRequestData();
	 * httpRequestData.setEndpoint(endpoint);
	 * httpRequestData.setService(‘s3’);
	 * httpRequestData.setRegion(‘us-east-1’);
	 * httpRequestData.setHttpMethod(“PUT”);
	 * var content = “Action=SendMessage&amp;MessageBody=This is a test message”;
	 * httpRequestData.setContent(content);
	 * httpRequestData.addHeader(‘x-amz-acl’ , ‘public-read’ );
	 *  
	 * // Get an AuthCredential object
	 * var credential = new sn_cc.StandardCredentialsProvider().getAuthCredentialByID("5b61c16f73533300f662cff8faf6a74b");
	 *  
	 * // Create the RequestAuthAPI object and sign the request
	 * var signingAPI = new sn_auth.RequestAuthAPI(httpRequestData, credential);
	 * var output = signingAPI.generateAuth();
	 *  
	 * // get the signed response detail
	 * var authH = headerM["Authorization"];
	 * var xamzdateH = headerM["X-Amz-Date"];
	 * var content256 = headerM["x-amz-content-sha256"];
	 *  
	 * gs.debug(‘authH:’ + authH );
	 * gs.debug(‘xamzdateH:’ + xamzdateH );
	 * gs.debug(‘content256:’ + content256 );
	 * 
	 * 
	 * @returns Object Key-value pairs that define all of the headers included when the request was signed. Each key-value pair includes these parts:  *   key: String. Name of the header. *   value: String. Value of the header.
	 * 
	 */
	getHeaderMap() : Object
	/**
	 * @description Returns an object containing the query parameters included when the request was signed.
	 * @example
	 * //
	 * // Define the HttpRequestData object
	 * var endpoint= "https://third-party-endpoint";
	 * var httpRequestData = new sn_auth.HttpRequestData();
	 * httpRequestData.setEndpoint(endpoint);
	 * httpRequestData.setService(‘s3’);
	 * httpRequestData.setRegion(‘us-east-1’);
	 * httpRequestData.setHttpMethod(“PUT”);
	 * var content = “Action=SendMessage&amp;MessageBody=This is a test message”;
	 * httpRequestData.setContent(content);
	 * httpRequestData.addQueryParam(‘api_version’, ‘v2’ );
	 * httpRequestData.addQueryParam(‘limit’, ‘1000’ );
	 * httpRequestData.addQueryParam(‘offset’, ‘1’ );
	 *  
	 * // Get an AuthCredential object
	 * var credential = new sn_cc.StandardCredentialsProvider().getAuthCredentialByID("5b61c16f73533300f662cff8faf6a74b");
	 *  
	 * // Create the RequestAuthAPI object and sign the request
	 * var signingAPI = new sn_auth.RequestAuthAPI(httpRequestData, credential);
	 * var output = signingAPI.generateAuth();
	 *  
	 * // Get the signed response
	 * queryMap = output.getQueryMap();
	 * 
	 * gs.info("API Version is: " + queryMap["api_version"]);
	 * 
	 * @returns Object Key-value pairs that define the query parameters included when the request was signed. Each key-value pair includes these parts:  *   key: String. Name of the query parameter. *   value: String. Value of the query parameter.
	 * 
	 */
	getQueryMap() : Object
	/**
	 * @description Returns the status of the request signing.
	 * @example
	 * //
	 * // Define the HttpRequestData object
	 * var endpoint= "https://third-party-endpoint";
	 * var httpRequestData = new sn_auth.HttpRequestData();
	 * httpRequestData.setEndpoint(endpoint);
	 * httpRequestData.setService(‘s3’);
	 * httpRequestData.setRegion(‘us-east-1’);
	 * httpRequestData.setHttpMethod(“PUT”);
	 * var content = “Action=SendMessage&amp;MessageBody=This is a test message”;
	 * httpRequestData.setContent(content);
	 *  
	 * // Get an AuthCredential object
	 * var credential = new sn_cc.StandardCredentialsProvider().getAuthCredentialByID("5b61c16f73533300f662cff8faf6a74b");
	 *  
	 * // Create the RequestAuthAPI object and sign the request
	 * var signingAPI = new sn_auth.RequestAuthAPI(httpRequestData, credential);
	 * var output = signingAPI.generateAuth();
	 *  
	 * // Get the signed status
	 * gs.info("Status is: " + output.getStatus());
	 * 
	 * @returns string The status of the request signing.  Possible values:  *   SUCCESS: The system successfully signed the request. *   FAIL: The system failed to sign the request. *   SKIPPED: The system skipped signing because the information was incomplete.
	 * 
	 */
	getStatus() : string
	/**
	 * @description Returns a detailed message about the request signing. If the request signing fails, this method returns the error message.
	 * @example
	 * //
	 * // Define the HttpRequestData object
	 * var endpoint= "https://third-party-endpoint";
	 * var httpRequestData = new sn_auth.HttpRequestData();
	 * httpRequestData.setEndpoint(endpoint);
	 * httpRequestData.setService(‘s3’);
	 * httpRequestData.setRegion(‘us-east-1’);
	 * httpRequestData.setHttpMethod(“PUT”);
	 * var content = “Action=SendMessage&amp;MessageBody=This is a test message”;
	 * httpRequestData.setContent(content);
	 * httpRequestData.addQueryParam(‘api_version’, ‘v2’ );
	 * httpRequestData.addQueryParam(‘limit’, ‘1000’ );
	 * httpRequestData.addQueryParam(‘offset’, ‘1’ );
	 *  
	 * // Get AuthCredential object and set an attribute
	 * var credential = new sn_auth.AuthCredential();
	 * credential.setAttribute("user_name", "admin");
	 * credential.setAttribute("password", "admin");
	 *  
	 * // Create the RequestAuthAPI object and sign the request
	 * var signingAPI = new sn_auth.RequestAuthAPI(httpRequestData, credential);
	 * var output = signingAPI.generateAuth();
	 *  
	 * // Get the signed status
	 * gs.info("Status message is: " + output.getStatusMessage());
	 * 
	 * @returns string Message about the request signing. If the request signing fails, returns one of these error messages:  *   credential is not valid: Check the AuthCredential object you used to sign the request. Make sure an authentication algorithm is associated with the credential. For more information, see [Configure an authentication algorithm](https://docs.servicenow.com/bundle/paris-servicenow-platform/page/product/credentials/task/configure-authentication-algorithm.html). *   Request data is empty. Request auth is skipped: Check the HttpRequestData object because required information may be missing. *   Can't find script includes scope: Verify that the authentication algorithm record and associated script includes used to sign the request are in the correct scope.
	 * 
	 */
	getStatusMessage() : string
	/**
	 * @description Instantiates an HttpRequestAuthedData object.
	 * You can instantiate this class using the constructor, or you can return an HttpRequestAuthedData object from the generateAuth() method in the RequestAuthAPI class.
	 * 
	 */
	constructor() 
	/**
	 * @description Defines whether to apply the signature to the signed request in the header or as a query parameter.
	 * @example
	 * //
	 * // Define HttpRequestData
	 * var endpoint= "https://third-party-endpoint“;
	 * var httpRequestData = new sn_auth.HttpRequestData();
	 * httpRequestData.setEndpoint(endpoint);
	 * httpRequestData.setService(‘s3’);
	 * httpRequestData.setRegion(‘us-east-1’);
	 * httpRequestData.setHttpMethod(“PUT”);
	 * var content = “Action=SendMessage&amp;MessageBody=This is a test message”;
	 * httpRequestData.setContent(content);
	 *  
	 * //Get AuthCredential
	 * var credential = new sn_cc.StandardCredentialsProvider().getAuthCredentialByID("5b61c16f73533300f662cff8faf6a74b");
	 *  
	 * // Create RequestAuthAPI and sign the request
	 * var signingAPI = new sn_auth.RequestAuthAPI(httpRequestData, credential);
	 * var output = signingAPI.generateAuth();
	 * output.setDirective("header");
	 * 
	 * 
	 * @param directive Whether to apply the signature to the header or as a query parameter of the signed request.  Values include:  *   query: Applies signature as a query parameter. *   header: Applies signature to the request header.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setDirective(directive: string) : void
	/**
	 * @description Sets the status of the request signing.
	 * @example
	 * //
	 * // Define the HttpRequestData object
	 * var endpoint= "https://third-party-endpoint";
	 * var httpRequestData = new sn_auth.HttpRequestData();
	 * httpRequestData.setEndpoint(endpoint);
	 * httpRequestData.setService(‘s3’);
	 * httpRequestData.setRegion(‘us-east-1’);
	 * httpRequestData.setHttpMethod(“PUT”);
	 * var content = “Action=SendMessage&amp;MessageBody=This is a test message”;
	 * httpRequestData.setContent(content);
	 *  
	 * // Get an AuthCredential object
	 * var credential = new sn_cc.StandardCredentialsProvider().getAuthCredentialByID("5b61c16f73533300f662cff8faf6a74b");
	 *  
	 * // Create the RequestAuthAPI object and sign the request
	 * var signingAPI = new sn_auth.RequestAuthAPI(httpRequestData, credential);
	 * var output = signingAPI.generateAuth();
	 * output.setStatus("fail");
	 *  
	 * // Get the signed status
	 * gs.info("Status is: " + output.getStatus());
	 * 
	 * @param status The status of the request signing.  Possible values:  *   success: The system successfully signed the request. *   fail: The system failed to sign the request. *   skipped: The system skipped signing because the information was incomplete.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setStatus(status: string) : void
	/**
	 * @description Sets a status message for the request signing.
	 * @example
	 * //
	 * // Define the HttpRequestData object
	 * var endpoint= "https://third-party-endpoint";
	 * var httpRequestData = new sn_auth.HttpRequestData();
	 * httpRequestData.setEndpoint(endpoint);
	 * httpRequestData.setService(‘s3’);
	 * httpRequestData.setRegion(‘us-east-1’);
	 * httpRequestData.setHttpMethod(“PUT”);
	 * var content = “Action=SendMessage&amp;MessageBody=This is a test message”;
	 * httpRequestData.setContent(content);
	 *  
	 * // Get an AuthCredential object
	 * var credential = new sn_cc.StandardCredentialsProvider().getAuthCredentialByID("5b61c16f73533300f662cff8faf6a74b");
	 *  
	 * // Create the RequestAuthAPI object and sign the request
	 * var signingAPI = new sn_auth.RequestAuthAPI(httpRequestData, credential);
	 * var output = signingAPI.generateAuth();
	 * output.setStatusMessage("The request was successfully signed.");
	 *  
	 * // Get the signed status message
	 * gs.info("Status message is: " + output.getStatusMessage());
	 * 
	 * @param statusMessage Message to set for the request signing status.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setStatusMessage(statusMessage: string) : void
	}
/**
	 * @description The HttpRequestData API provides methods to build and manipulate a REST request before applying a signature and sending it to an endpoint.
	 * Generate outbound signing requests using these APIs in the following order:	
 * 	
 * 1.  HttpRequestData: Build the API request.	
 * 2.  AuthCredential: Create a credential object or update an existing one. Use the credential to sign the request through the RequestAuthAPI class.	
 * 3.  RequestAuthAPI: Sign the request and return an HttpRequestAuthedData object.	
 * 4.  HttpRequestAuthedData: Get information about the signed request.	
 * 5.  GlideHTTPRequest: Send the signed request.	
 * 	
 *   	
 *   	
 * Before using these APIs, you must [configure an authentication algorithm](https://docs.servicenow.com/bundle/paris-servicenow-platform/page/product/credentials/task/configure-authentication-algorithm.html) to sign the request and associate it with the credential used to authenticate the request.  	
 *   	
 * Use this API in scoped scripts with the sn\_auth namespace identifier. You can instantiate this class using the constructor, or you can return an HttpRequestData object from the getHttpRequestData() method in the RequestAuthAPI class.
	 * 
	 */
	declare class HttpRequestData {
	/**
	 * @description Adds a header to the HttpRequestData object.
	 * @example
	 * //This example creates a REST request payload.
	 * var endpoint= "https://s3.amazonaws.com";
	 * var httpRequestData = new sn_auth.HttpRequestData();
	 * httpRequestData.setEndpoint(endpoint);
	 * httpRequestData.setService('s3');
	 * httpRequestData.setRegion('us-east-1');
	 * httpRequestData.setHttpMethod("PUT");
	 * var content = "Action=SendMessage&amp;MessageBody=This is a test message";
	 * httpRequestData.setContent(content);
	 * httpRequestData.addHeader('x-amz-acl', 'public-read' );
	 * 
	 * @param key Name of the HTTP header.
	 * @param value Value of the HTTP Header.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	addHeader(key: string,value: string) : void
	/**
	 * @description Adds a query parameter to the HttpRequestData object.
	 * @example
	 * //
	 * var endpoint= "https://third-party-endpoint";
	 * var httpRequestData = new sn_auth.HttpRequestData();
	 * httpRequestData.setEndpoint(endpoint);
	 * httpRequestData.setService('s3');
	 * httpRequestData.setRegion('us-east-1');
	 * httpRequestData.setHttpMethod('put');
	 * var content = "Action=SendMessage&amp;MessageBody=This is a test message";
	 * httpRequestData.setContent(content);
	 * httpRequestData.addQueryParam('api_version', 'v2 );
	 * ​
	 * 
	 * @param key Name of the query parameter.
	 * @param value Value of the query parameter.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	addQueryParam(key: string,value: string) : void
	/**
	 * @description Removes a header from the HttpRequestData object.
	 * @example
	 * //
	 * var endpoint= "https://s3.amazonaws.com";
	 * var httpRequestData = new sn_auth.HttpRequestData();
	 * httpRequestData.setEndpoint(endpoint);
	 * httpRequestData.setService('s3');
	 * httpRequestData.setRegion('us-east-1');
	 * httpRequestData.setHttpMethod('put');
	 * var content = "Action=SendMessage&amp;MessageBody=This is a test message";
	 * httpRequestData.setContent(content);
	 * httpRequestData.deleteHeader('x-amz-acl');
	 * 
	 * @param key Name of the HTTP header to remove.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	deleteHeader(key: string) : void
	/**
	 * @description Returns the sys\_id of the Connection & Credential alias associated with the IntegrationHub REST step.
	 * You can pass the sys\_id to the ConnectionInfoProvider API to retrieve information about the connection.
	 * 
	 * Note: You can only use this method in an IntegrationHub REST step. For more information, see [REST step](https://docs.servicenow.com/bundle/paris-servicenow-platform/page/administer/flow-designer/reference/rest-request-action-designer-2.html).
	 * 
	 * @example
	 * //
	 * var httpRequestData = new sn_auth.HttpRequestData();
	 * var id = httpRequestData.getConnectionAliasID();
	 *  
	 * var credential = new sn_cc.ConnectionInfoProvider().
	 * var connectionInfo = credential.getConnectionInfo(id);
	 * 
	 * @returns string Sys\_id of the alias record from the Connection & Credential Aliases \[sys\_alias\] table associated with the request.
	 * 
	 */
	getConnectionAliasID() : string
	/**
	 * @description Returns the value of a connection attribute associated with the Connection & Credential alias associated with IntegrationHub REST step.
	 * Note: You can only use this method in an IntegrationHub REST step. For more information, see [REST step](https://docs.servicenow.com/bundle/paris-servicenow-platform/page/administer/flow-designer/reference/rest-request-action-designer-2.html).
	 * 
	 * For more information about connection attributes, see [Create connection attributes for IntegrationHub](https://docs.servicenow.com/bundle/paris-servicenow-platform/page/product/credentials/task/create-connection-attributes.html).
	 * 
	 * @example
	 * //This example returns the value of a connection attribute set on the Connection & Credential alias associated with the REST step.
	 * var httpRequestData = new sn_auth.HttpRequestData();​
	 * gs.info("API Version is: " + httpRequestData.getConnectionExtendedAttribute('api_version'));
	 * 
	 * @param name Name of the connection attribute.
	 * 
	 * @returns string Value of the connection attribute.
	 * 
	 */
	getConnectionExtendedAttribute(name: string) : string
	/**
	 * @description Returns the content of the request in the HttpRequestData object.
	 * @example
	 * //
	 * var endpoint= "https://s3.amazonaws.com“;
	 * var httpRequestData = new sn_auth.HttpRequestData();
	 * httpRequestData.setEndpoint(endpoint);
	 * httpRequestData.setService('s3');
	 * httpRequestData.setRegion('us-east-1');
	 * httpRequestData.setHttpMethod('put');
	 * var content = “Action=SendMessage&amp;MessageBody=This is a test message”;
	 * httpRequestData.setContent(content);
	 * httpRequestData.addHeader(‘x-amz-acl’ , ‘public-read’ );
	 * var ct = httpRequestData.getContent();
	 * 
	 * @returns string Content of the request.
	 * 
	 */
	getContent() : string
	/**
	 * @description Returns the date when the request was signed.
	 * @example
	 * //
	 * var endpoint= "https://s3.amazonaws.com";​
	 * var httpRequestData = new sn_auth.HttpRequestData();​
	 * httpRequestData.setEndpoint(endpoint);​
	 * httpRequestData.addQueryParam("list-type", "2");​
	 * httpRequestData.setService('s3');​
	 * httpRequestData.setHttpMethod('get');​
	 * 
	 * gs.info( "Date: " + httpRequestData.getDate());
	 * 
	 * @returns number The difference between January 1, 1970 UTC and when the request was signed.  Unit: Milliseconds
	 * 
	 */
	getDate() : number
	/**
	 * @description Returns whether the signature is applied to the request in the header or as a query parameter.
	 * By default, the system applies the signature to the header. You can apply the signature as a query parameter using the setDirective() API.
	 * 
	 * @example
	 * //
	 * var endpoint= "https://s3.amazonaws.com“;​
	 * var httpRequestData = new sn_auth.HttpRequestData();​
	 * httpRequestData.setEndpoint(endpoint);​
	 * httpRequestData.addQueryParam("list-type", "2");​
	 * httpRequestData.setService('s3');​
	 * httpRequestData.setHttpMethod('get');​
	 * 
	 * gs.info( "Signature applied to: " + httpRequestData.getDirective() );
	 * 
	 * @returns string Whether the signature is applied to the header or as a query parameter.  Values include:  *   HEADER: The signature is applied to the request header. *   QUERY: The signature is applied as a query parameter.
	 * 
	 */
	getDirective() : string
	/**
	 * @description Returns the endpoint set for the request.
	 * @example
	 * //
	 * var endpoint= "https://s3.amazonaws.com";​
	 * var httpRequestData = new sn_auth.HttpRequestData();​
	 * httpRequestData.setEndpoint(endpoint);​
	 * httpRequestData.addQueryParam("list-type", "2");​
	 * httpRequestData.setService('s3');​
	 * httpRequestData.setHttpMethod('get');​
	 * httpRequestData.setDirective("query");​
	 * ​
	 * gs.info( "Endpoint is: " + httpRequestData.getEndpoint() );
	 * 
	 * @returns string Endpoint set for the request.
	 * 
	 */
	getEndpoint() : string
	/**
	 * @description Returns the time in seconds before the signature expires starting when the request was signed using the generateAuth() method in the RequestAuthAPI class.
	 * The expiration is commonly set by the third-party service you are sending the request to, which overrides any value set by the setExpiry() method. For example, if the expiration is set to 900 seconds by the third-party service and you use the setExpiry() method to set the expiration to 300 seconds, the getExpiry() method returns 900 seconds.
	 * 
	 * @example
	 * //
	 * var endpoint= "https://s3.amazonaws.com";​
	 * var httpRequestData = new sn_auth.HttpRequestData();​
	 * httpRequestData.setEndpoint(endpoint);​
	 * httpRequestData.addQueryParam("list-type", "2");​
	 * httpRequestData.setService('s3');​
	 * httpRequestData.setHttpMethod('get');​
	 * httpRequestData.setDirective("query");​
	 * httpRequestData.setExpiry(300);
	 * 
	 * gs.info("Signature expires in: " + httpRequestData.getExpiry());
	 * 
	 * @returns number Time before the signature expires.  Unit: Seconds
	 * 
	 */
	getExpiry() : number
	/**
	 * @description Returns the value associated with the given HTTP header.
	 * @example
	 * //
	 * var endpoint= "https://third-party-endpoint";
	 * var httpRequestData = new sn_auth.HttpRequestData();
	 * httpRequestData.setEndpoint(endpoint);
	 * httpRequestData.setService('s3');
	 * httpRequestData.setRegion('us-east-1');
	 * httpRequestData.setHttpMethod('put');
	 * var content = "Action=SendMessage&amp;MessageBody=This is a test message";
	 * httpRequestData.setContent(content);
	 * httpRequestData.addHeader(‘x-amz-acl’, ‘public-read’ );
	 * ​
	 * 
	 * gs.info( "Header value is: " + httpRequestData.getHeader(‘x-amz-acl’) );
	 * 
	 * @param key Name of HTTP header.
	 * 
	 * @returns string Value of the given HTTP header.
	 * 
	 */
	getHeader(key: string) : string
	/**
	 * @description Returns an object containing the headers included in the request.
	 * @example
	 * //
	 * var endpoint= "https://third-party-endpoint";
	 * var httpRequestData = new sn_auth.HttpRequestData();
	 * httpRequestData.setEndpoint(endpoint);
	 * httpRequestData.setService('s3');
	 * httpRequestData.setRegion('us-east-1');
	 * httpRequestData.setHttpMethod('put');
	 * var content = "Action=SendMessage&amp;MessageBody=This is a test message";
	 * httpRequestData.setContent(content);
	 * httpRequestData.addHeader(‘x-amz-acl’, ‘public-read’ );
	 * httpRequestData.addHeader(‘content-type’, ‘application/json’ );
	 * 
	 * var map = httpRequestData.getHeaderMap();
	 * 
	 * for(var x in map) {
	 *     var y = map[x]
	 * 
	 *     gs.info(x, y);
	 * }
	 * 
	 * @returns Object Key-value pairs that define all of the headers associated with the request.  Each key-value pair includes these parts:  *   Key: String. Name of the header. *   Value: String. Value of the header.
	 * 
	 */
	getHeaderMap() : Object
	/**
	 * @description Returns the host used in the request.
	 * @example
	 * //
	 * var endpoint= "https://third-party-endpoint“;
	 * var httpRequestData = new sn_auth.HttpRequestData();
	 * httpRequestData.setEndpoint(endpoint);
	 * httpRequestData.setHost('myHost')
	 * httpRequestData.setService('s3');
	 * httpRequestData.setRegion('us-east-1');
	 * httpRequestData.setHttpMethod('put');
	 * var content = “Action=SendMessage&amp;MessageBody=This is a test message”;
	 * httpRequestData.setContent(content);
	 * httpRequestData.addHeader(‘x-amz-acl’ , ‘public-read’ );
	 * 
	 * gs.info("Host is: " + httpRequestData.getHost());
	 * 
	 * @returns string Host used in the request.
	 * 
	 */
	getHost() : string
	/**
	 * @description Returns the HTTP method used in the request.
	 * @example
	 * //
	 * var endpoint= "https://third-party-endpoint";
	 * var httpRequestData = new sn_auth.HttpRequestData();
	 * httpRequestData.setEndpoint(endpoint);
	 * httpRequestData.setService('s3');
	 * httpRequestData.setRegion('us-east-1');
	 * httpRequestData.setHttpMethod('put');
	 * var content = "Action=SendMessage&amp;MessageBody=This is a test message";
	 * httpRequestData.setContent(content);
	 * httpRequestData.addHeader(‘x-amz-acl’, ‘public-read’ );
	 * ​
	 * 
	 * gs.info("HTTP method is: " + httpRequestData.getHttpMethod());
	 * 
	 * @returns string HTTP method used in the request.
	 * 
	 */
	getHttpMethod() : string
	/**
	 * @description Returns the value of the specified query parameter.
	 * @example
	 * //
	 * var endpoint= "https://third-party-endpoint";
	 * var httpRequestData = new sn_auth.HttpRequestData();
	 * httpRequestData.setEndpoint(endpoint);
	 * httpRequestData.setService('s3');
	 * httpRequestData.setRegion('us-east-1');
	 * httpRequestData.setHttpMethod('put');
	 * var content = "Action=SendMessage&amp;MessageBody=This is a test message";
	 * httpRequestData.setContent(content);
	 * httpRequestData.addQueryParam(‘api_version’, ‘v2’ );
	 * 
	 * gs.info("API version is: " + httpRequestData.getQueryParam('api_version'));
	 * 
	 * @param key Name of the query parameter to get the value of.
	 * 
	 * @returns string Value of the query parameter.
	 * 
	 */
	getQueryParam(key: string) : string
	/**
	 * @description Returns an object containing the query parameters included in the request.
	 * @example
	 * //
	 * var endpoint= "https://third-party-endpoint";
	 * var httpRequestData = new sn_auth.HttpRequestData();
	 * httpRequestData.setEndpoint(endpoint);
	 * httpRequestData.setService('s3');
	 * httpRequestData.setRegion('us-east-1');
	 * httpRequestData.setHttpMethod('put');
	 * var content = "Action=SendMessage&amp;MessageBody=This is a test message";
	 * httpRequestData.setContent(content);
	 * httpRequestData.addQueryParam(‘api_version’, ‘v2’ );
	 * httpRequestData.addQueryParam(‘limit’, ‘1000’ );
	 * httpRequestData.addQueryParam(‘offset’, ‘1’ );
	 * 
	 * 
	 * var map = httpRequestData.getQueryParamMap();
	 * gs.info("api_version is: " + map['api_version']);
	 * 
	 * @returns Object Key-value pairs that define the query parameters associated with the request.  Each key-value pair includes these parts:  *   Key: String. Name of the query parameter. *   Value: String. Value of the query parameter.
	 * 
	 */
	getQueryParamMap() : Object
	/**
	 * @description Returns the region for the request that will be used in signing.
	 * @example
	 * //
	 * var endpoint= "https://third-party-endpoint";
	 * var httpRequestData = new sn_auth.HttpRequestData();
	 * httpRequestData.setEndpoint(endpoint);
	 * httpRequestData.setService('s3');
	 * httpRequestData.setRegion('us-east-1');
	 * httpRequestData.setHttpMethod('put');
	 * var content = "Action=SendMessage&amp;MessageBody=This is a test message";
	 * httpRequestData.setContent(content);
	 * 
	 * gs.info("Region is: " + httpRequestData.getRegion());
	 * 
	 * @returns string Name of the region.
	 * 
	 */
	getRegion() : string
	/**
	 * @description Returns the service defined in the request.
	 * @example
	 * //
	 * var endpoint= "https://s3.amazonaws.com“;
	 * var httpRequestData = new sn_auth.HttpRequestData();
	 * httpRequestData.setEndpoint(endpoint);
	 * httpRequestData.setService(‘s3’);
	 * 
	 * gs.info("Service is: " + httpRequestData.getService());
	 * 
	 * @returns string Service defined in the request.
	 * 
	 */
	getService() : string
	/**
	 * @description Instantiates an HttpRequestData object.
	 * @example
	 * //
	 * var httpRequestData = new sn_auth.HttpRequestData();
	 * 
	 */
	constructor() 
	/**
	 * @description Defines the content to send in the request.
	 * Note: This method is not supported in script includes or MID server scripts.
	 * 
	 * @example
	 * //
	 * var endpoint= "https://s3.amazonaws.com“;
	 * var httpRequestData = new sn_auth.HttpRequestData();
	 * httpRequestData.setEndpoint(endpoint);
	 * httpRequestData.setService('s3');
	 * httpRequestData.setRegion('us-east-1');
	 * httpRequestData.setHttpMethod('put');
	 * var content = “This is a test message”;
	 * httpRequestData.setContent(content);
	 * 
	 * @param content Content to send in the request.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setContent(content: string) : void
	/**
	 * @description Defines the date of the request used for signing.
	 * Use this method only when testing whether the signature is created correctly based on a time stamp. In production, the signing request uses the time that you generated the signature; manually setting this value may cause the signing request to fail.
	 * 
	 * @example
	 * //
	 * var endpoint= "https://s3.amazonaws.com";​
	 * var httpRequestData = new sn_auth.HttpRequestData();​
	 * httpRequestData.setEndpoint(endpoint);​
	 * httpRequestData.addQueryParam("list-type", "2");​
	 * httpRequestData.setService('s3');​
	 * httpRequestData.setHttpMethod('get');
	 * httpRequestData.setDate(1349333576093);
	 * 
	 * @param date The difference between January 1, 1970 UTC and the date used to sign the request.  Unit: Milliseconds
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setDate(date: number) : void
	/**
	 * @description Defines whether to apply the signature to the request in a header or as a query parameter.
	 * @example
	 * //
	 * var endpoint= "https://s3.amazonaws.com“;​
	 * var httpRequestData = new sn_auth.HttpRequestData();​
	 * httpRequestData.setEndpoint(endpoint);​
	 * httpRequestData.addQueryParam("list-type", "2");​
	 * httpRequestData.setService('s3');​
	 * httpRequestData.setHttpMethod('get');​
	 * httpRequestData.setDirective("query");​
	 * 
	 * @param directive Whether to apply the signature to the header or as a query parameter.  Values include:  *   query: Applies signature as a query parameter. *   header: Applies signature to the request header.  Default: header
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setDirective(directive: string) : void
	/**
	 * @description Defines the endpoint to send the request to.
	 * @example
	 * //
	 * var endpoint="https://third-party-endpoint/path-parameters/version";
	 * 
	 * var httpRequestData = new sn_auth.HttpRequestData();
	 * httpRequestData.setEndpoint(endpoint);
	 * 
	 * 
	 * @param endpoint Endpoint to send the request to. The endpoint can include query parameters, path, and version.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setEndpoint(endpoint: string) : void
	/**
	 * @description Sets the amount of time before the signature expires starting when the request is signed using the generateAuth() method in the RequestAuthAPI class.
	 * The expiration is commonly set by the third-party service you are sending the request to, which overrides any value set by the setExpiry() method. For example, if the expiration is set to 900 seconds by the third-party service and you use the setExpiry() method to set the expiration to 300 seconds, the getExpiry() method returns 900 seconds.
	 * 
	 * @example
	 * //
	 * var endpoint= "https://s3.amazonaws.com“;​
	 * var httpRequestData = new sn_auth.HttpRequestData();​
	 * httpRequestData.setEndpoint(endpoint);​
	 * httpRequestData.addQueryParam("list-type", "2");​
	 * httpRequestData.setService('s3');​
	 * httpRequestData.setHttpMethod('get');​
	 * httpRequestData.setExpiry(300);​
	 * 
	 * @param expiry Amount of time before the signature expires.  Unit: Seconds
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setExpiry(expiry: number) : void
	/**
	 * @description Defines the host used in the request.
	 * @example
	 * //
	 * var endpoint= "https:third-party-endpoint“;
	 * var httpRequestData = new sn_auth.HttpRequestData();
	 * httpRequestData.setEndpoint(endpoint);
	 * httpRequestData.setHost('myHost')
	 * httpRequestData.setService('s3');
	 * httpRequestData.setRegion('us-east-1');
	 * httpRequestData.setHttpMethod('put');
	 * var content = “Action=SendMessage&amp;MessageBody=This is a test message”;
	 * httpRequestData.setContent(content);
	 * httpRequestData.addHeader(‘x-amz-acl’, ‘public-read’ );
	 * 
	 * @param host Name of the HTTP request host.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setHost(host: string) : void
	/**
	 * @description Sets the HTTP method to use in the request.
	 * @example
	 * //
	 * var endpoint= "https://third-party-endpoint";
	 * var httpRequestData = new sn_auth.HttpRequestData();
	 * httpRequestData.setEndpoint(endpoint);
	 * httpRequestData.setService('s3');
	 * httpRequestData.setRegion('us-east-1');
	 * httpRequestData.setHttpMethod('put');
	 * 
	 * @param httpMethod HTTP method to use in the request.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setHttpMethod(httpMethod: string) : void
	/**
	 * @description Defines the region to use for the request in signing.
	 * @example
	 * //
	 * var endpoint= "https:third-party-endpoint";
	 * var httpRequestData = new sn_auth.HttpRequestData();
	 * httpRequestData.setEndpoint(endpoint);
	 * httpRequestData.setService('s3');
	 * httpRequestData.setRegion('us-east-1');
	 * httpRequestData.setHttpMethod('put');
	 * var content = "Action=SendMessage&amp;MessageBody=This is a test message";
	 * httpRequestData.setContent(content);
	 * 
	 * @param region The region to use to sign the request. Available values are determined by the third-party API's requirements.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setRegion(region: string) : void
	/**
	 * @description Defines the service for the request.
	 * @example
	 * //
	 * var endpoint= "https://s3.amazonaws.com“;
	 * var httpRequestData = new sn_auth.HttpRequestData();
	 * httpRequestData.setEndpoint(endpoint);
	 * httpRequestData.setService(‘s3’);
	 * 
	 * 
	 * @param service The service for the request.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setService(service: string) : void
	}
/**
	 * @description The RequestAuthAPI() API provides methods to apply a signature to a REST request.
	 * Generate outbound signing requests using these APIs in the following order:	
 * 	
 * 1.  HttpRequestData: Build the API request.	
 * 2.  AuthCredential: Create a credential object or update an existing one. Use the credential to sign the request through the RequestAuthAPI class.	
 * 3.  RequestAuthAPI: Sign the request and return an HttpRequestAuthedData object.	
 * 4.  HttpRequestAuthedData: Get information about the signed request.	
 * 5.  GlideHTTPRequest: Send the signed request.	
 * 	
 *   	
 *   	
 * Before using these APIs, you must [configure an authentication algorithm](https://docs.servicenow.com/bundle/paris-servicenow-platform/page/product/credentials/task/configure-authentication-algorithm.html) to sign the request and associate it with the credential used to authenticate the request.  	
 *   	
 * Use this API in scoped scripts with the sn\_auth namespace identifier.
	 * 
	 */
	declare class RequestAuthAPI {
	/**
	 * @description Signs the HttpRequestData object and returns an HttpRequestAuthedData object to use to send in the REST request.
	 * @example
	 * //This example creates a request and gets a credential record to pass to the RequestAuthAPI API. The generateAuth() method then signs the request.
	 * // Define the HttpRequestData object
	 * var endpoint= "https://third-party-endpoint";
	 * var httpRequestData = new sn_auth.HttpRequestData();
	 * httpRequestData.setEndpoint(endpoint);
	 * httpRequestData.setService(‘s3’);
	 * httpRequestData.setRegion(‘us-east-1’);
	 * httpRequestData.setHttpMethod(“PUT”);
	 * var content = “Action=SendMessage&amp;MessageBody=This is a test message”;
	 * httpRequestData.setContent(content);
	 * httpRequestData.addHeader(‘x-amz-acl’ , ‘public-read’ );
	 *  
	 * // Get a credential record
	 * gs.info( “date:” + httpRequestData.getDate() );
	 * var credential = new sn_cc.StandardCredentialsProvider().getAuthCredentialByID("5b61c16f73533300f662cff8faf6a74b");
	 *  
	 * // Create the RequestAuthAPI object and sign the request
	 * var signingAPI = new sn_auth.RequestAuthAPI(httpRequestData, credential);
	 * var output = signingAPI.generateAuth();
	 *  
	 * 
	 * @returns HttpRequestAuthedData Object. Data to use to obtain information about the signed result. Use the methods in the HttpRequestAuthedData class to interact with the signed result. See [HttpRequestAuthedData API](https://developer.servicenow.com/go_to_api.do?ID=HttpRequestAuthedDataAPI&v=paris).
	 * 
	 */
	generateAuth() : HttpRequestAuthedData
	/**
	 * @description Returns the credential record used to sign the request.
	 * @example
	 * //
	 * // Define the HttpRequestData object
	 * var endpoint= "https://third-party-endpoint“;
	 * var httpRequestData = new sn_auth.HttpRequestData();
	 * httpRequestData.setEndpoint(endpoint);
	 * httpRequestData.setService(‘s3’);
	 * httpRequestData.setRegion(‘us-east-1’);
	 * httpRequestData.setHttpMethod(“PUT”);
	 * var content = “Action=SendMessage&amp;MessageBody=This is a test message”;
	 * httpRequestData.setContent(content);
	 * httpRequestData.addHeader(‘x-amz-acl’ , ‘public-read’ );
	 *  
	 * // Get a credential record
	 * var credential = new sn_cc.StandardCredentialsProvider().getAuthCredentialByID("5b61c16f73533300f662cff8faf6a74b");
	 *  
	 * // Return the AuthCredential object
	 * var signingAPI = new sn_auth.RequestAuthAPI(httpRequestData, credential);
	 * var signingCredential = signingAPI.getAuthCredential();
	 * 
	 * @returns AuthCredential Object. Data to use to obtain information about the credential record used to sign the request. Use the methods in the AuthCredential class to interact with the credential. See [AuthCredential API](https://developer.servicenow.com/go_to_api.do?ID=AuthCredentialAPI&v=paris).
	 * 
	 */
	getAuthCredential() : AuthCredential
	/**
	 * @description Returns the HttpRequestData object that was used to instantiate the RequestAuthAPI class.
	 * @example
	 * //
	 * // Define the HttpRequestData object
	 * var endpoint= "https://third-party-endpoint";
	 * var httpRequestData = new sn_auth.HttpRequestData();
	 * httpRequestData.setEndpoint(endpoint);
	 * httpRequestData.setService(‘s3’);
	 * httpRequestData.setRegion(‘us-east-1’);
	 * httpRequestData.setHttpMethod(“PUT”);
	 * var content = “Action=SendMessage&amp;MessageBody=This is a test message”;
	 * httpRequestData.setContent(content);
	 * httpRequestData.addHeader(‘x-amz-acl’ , ‘public-read’ );
	 *  
	 *  // Get a credential record
	 * var credential = new sn_cc.StandardCredentialsProvider().getAuthCredentialByID("88772d0d40990010f8772fdd9ebc8075");
	 *  
	 * // Return the HttpRequestData object
	 * var signingAPI = new sn_auth.RequestAuthAPI(httpRequestData, credential);
	 * var unsignedRequest = signingAPI.getHttpRequestData();
	 *  
	 * gs.info("Endpoint is: " + unsignedRequest.getEndpoint());
	 * 
	 * @returns HttpRequestData Object. Contains the unsigned REST request. Use the methods in the HttpRequestData class to interact with the request. See [HttpRequestData API](https://developer.servicenow.com/go_to_api.do?ID=HttpRequestDataAPI&v=paris).
	 * 
	 */
	getHttpRequestData() : HttpRequestData
	/**
	 * @description Instantiates a RequestAuthAPI object using a REST request and a credential.
	 * @example
	 * //
	 * // Define the HttpRequestData object
	 * var endpoint= "https://third-party-endpoint";
	 * var httpRequestData = new sn_auth.HttpRequestData();
	 * httpRequestData.setEndpoint(endpoint);
	 * httpRequestData.setService(‘s3’);
	 * httpRequestData.setRegion(‘us-east-1’);
	 * httpRequestData.setHttpMethod(“PUT”);
	 * var content = “Action=SendMessage&amp;MessageBody=This is a test message”;
	 * httpRequestData.setContent(content);
	 * httpRequestData.addHeader(‘x-amz-acl’ , ‘public-read’ );
	 *  
	 *  // Get a credential record
	 * var credential = new sn_cc.StandardCredentialsProvider().getAuthCredentialByID("88772d0d40990010f8772fdd9ebc8075");
	 *  
	 * // Instantiate a RequestAuthAPI object
	 * var signingAPI = new sn_auth.RequestAuthAPI(httpRequestData, credential);
	 * 
	 * @param data HttpRequestData object that contains the unsigned REST request. Use the HttpRequestData class to build this object. See [HttpRequestData API](https://developer.servicenow.com/go_to_api.do?ID=HttpRequestDataAPI&v=paris).
	 * @param credential Object that represents a record from the Credentials \[discovery\_credentials\] table. Retrieve this object using the AuthCredential class. See [AuthCredential API](https://developer.servicenow.com/go_to_api.do?ID=AuthCredentialAPI&v=paris).
	 * 
	 */
	constructor(data: Object,credential: Object) 
	/**
	 * @description Generates a temporary, limited privilege token that you can use to provide trusted users with temporary security credentials to control third-party resources.
	 * To use this method, the third-party service must include an API or SDK that processes and manages limited access tokens.
	 * 
	 * @example
	 * //
	 * // Creates a temporary token 
	 * function(authAPI) {​
	 *     var requestData = authAPI.getHttpRequestData();​
	 *     var credential= authAPI.getAuthCredential();​
	 *     credential.setAttribute('Action', 'aws_sessionToken');​  
	 *     authAPI.resetAuthCredential();	
	 * 
	 *     //Returns status information
	 *     var status = credential.getAttribute(‘credential_reset_status’); ​
	 * }
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	resetAuthCredential() : void
	}
declare namespace sn_auth {
	}
/**
	 * @description Use the ConnectionInfo API to get connection attribute information through the connection and credential alias.
	 * You can use this API in scoped applications, or within the global scope. In scoped scripts, use the sn\_cc namespace identifier.  	
 *   	
 * For more information on connections and credentials, see [Credentials and connection information](https://docs.servicenow.com/bundle/paris-servicenow-platform/page/product/credentials/reference/r-credentials.html).  	
 *   	
 * This function retrieves connection attribute information identified by the given connection and credential alias.  	
 *   	
 * 	
 *     var provider = new sn_cc.ConnectionInfoProvider();	
 *     	
 *     // get a jdbc connection in the current domain with the alias ID	
 *     //     "6219afbf9f03320021dd7501942e70fc"	
 *     var connectionInfo = provider.getConnectionInfo("6219afbf9f03320021dd7501942e70fc");	
 *     if (connectionInfo != null) {	
 *       // get data map	
 *       var datamap = connectionInfo.getDataMap();	
 *       gs.info(datamap["name"]);	
 *       gs.info(datamap["connection_url"]);	
 *     	
 *       // get the same values using getAttribute	
 *       gs.info(connectionInfo.getAttribute("name"));	
 *       gs.info(connectionInfo.getAttribute("connection_url"));	
 *     	
 *       // get credential attributes	
 *       gs.info(connectionInfo.getCredentialAttribute("user_name"));	
 *       gs.info(connectionInfo.getCredentialAttribute("password")); 	
 *     	
 *       // get extended attributes	
 *       var extendedAttributes = connectionInfo.getExtendedAttributes();  	
 *       gs.info(extendedAttributes["name1"]);	
 *      }	
 *     	
 *      // get a jdbc connection in the ACME domain with the alias ID	
 *      //      "cd5923ff9f03320021dd7501942e70bb"	
 *      connectionInfo = provider.getConnectionInfoByDomain("cd5923ff9f03320021dd7501942e70bb",	
 *             "c90d4b084a362312013398f051272c0d");	
 *      if (connectionInfo != null) {	
 *        // get data map	
 *        var datamap = connectionInfo.getDataMap();	
 *        gs.info(datamap["name"]);	
 *      }
	 * 
	 */
	declare class ConnectionInfoScopedGlobal {
	/**
	 * @description Returns the value of a ConnectionInfo attribute with the specified property name.
	 * @example
	 * //
	 *   // get the same values using getAttribute
	 *   gs.info(connectionInfo.getAttribute("name"));
	 *   gs.info(connectionInfo.getAttribute("connection_url"));
	 * 
	 * 
	 * @param name Name of a ConnectionInfo object property.
	 * 
	 * @returns string Value of a specified ConnectionInfo property.
	 * 
	 */
	getAttribute(name: string) : string
	/**
	 * @description Returns the value of credential attributes for a specified connection.
	 * @example
	 * //
	 *  // get credential attributes
	 *   gs.info(connectionInfo.getCredentialAttribute("user_name"));
	 *   gs.info(connectionInfo.getCredentialAttribute("password")); 
	 * 
	 * 
	 * @returns Object Key-value pair map of credential attributes.
	 * 
	 */
	getCredentialAttribute() : Object
	/**
	 * @description Returns the connection attributes as a collection of key-value pairs.
	 * @example
	 * //
	 *  // get data map
	 *   var datamap = connectionInfo.getDataMap();
	 *   gs.info(datamap["name"]);
	 *   gs.info(datamap["connection_url"]);
	 * 
	 * 
	 * @returns Object Key-value pair map of connection attributes.
	 * 
	 */
	getDataMap() : Object
	/**
	 * @description Returns the extended attributes as a collection of key-value pairs.
	 * @example
	 * //
	 * // get extended attributes
	 *   var extendedAttributes = connectionInfo.getExtendedAttributes();  
	 *   gs.info(extendedAttributes["name1"]);
	 *  }
	 * 
	 * 
	 * @returns Object Key-value pair map of extended attributes.
	 * 
	 */
	getExtendedAttributes() : Object
	}
/**
	 * @description Use the ConnectionInfoProvider API to select connection information through the connection alias.
	 * You can use this API in scoped applications, or within the global scope. In scoped scripts, use the sn\_cc namespace identifier.  	
 *   	
 * This function retrieves connection information identified by the given connection alias.  	
 *   	
 * 	
 *     var provider = new sn_cc.ConnectionInfoProvider();	
 *     	
 *     // get a jdbc connection in the current domain with the alias ID	
 *     //     "6219afbf9f03320021dd7501942e70fc"	
 *     var connectionInfo = provider.getConnectionInfo("6219afbf9f03320021dd7501942e70fc");	
 *     if (connectionInfo != null) {	
 *       // get data map	
 *       var datamap = connectionInfo.getDataMap();	
 *       gs.info(datamap["name"]);	
 *       gs.info(datamap["connection_url"]);	
 *     	
 *       // get the same values using getAttribute	
 *       gs.info(connectionInfo.getAttribute("name"));	
 *       gs.info(connectionInfo.getAttribute("connection_url"));	
 *     	
 *       // get credential attributes	
 *       gs.info(connectionInfo.getCredentialAttribute("user_name"));	
 *       gs.info(connectionInfo.getCredentialAttribute("password")); 	
 *     	
 *       // get extended attributes	
 *       var extendedAttributes = connectionInfo.getExtendedAttributes();  	
 *       gs.info(extendedAttributes["name1"]);	
 *      }	
 *     	
 *      // get a jdbc connection in the ACME domain with the alias ID	
 *      //      "cd5923ff9f03320021dd7501942e70bb"	
 *      connectionInfo = provider.getConnectionInfoByDomain("cd5923ff9f03320021dd7501942e70bb",	
 *             "c90d4b084a362312013398f051272c0d");	
 *      if (connectionInfo != null) {	
 *        // get data map	
 *        var datamap = connectionInfo.getDataMap();	
 *        gs.info(datamap["name"]);	
 *      }
	 * 
	 */
	declare class ConnectionInfoProviderScopedGlobal {
	/**
	 * @description Use ConnectionInfoProvider() to select connection information through the connection alias.
	 */
	constructor() 
	/**
	 * @description This function retrieves a ConnectionInfo object identified by the given aliasID in the current domain.
	 * @example
	 * //
	 * var provider = new sn_cc.ConnectionInfoProvider();
	 * 
	 * // get a jdbc connection in the current domain with the alias ID
	 * //     "6219afbf9f03320021dd7501942e70fc"
	 * var connectionInfo = provider.getConnectionInfo("6219afbf9f03320021dd7501942e70fc");
	 * 
	 * @param aliasID The sys\_id of a connection alias.
	 * 
	 * @returns ConnectionInfo Information about the connection.
	 * 
	 */
	getConnectionInfo(aliasID: string) : ConnectionInfo
	/**
	 * @description This function retrieves a ConnectionInfo object identified by the given aliasID for a specific domain.
	 * @example
	 * //
	 * var provider = new sn_cc.ConnectionInfoProvider();
	 * 
	 * // get a jdbc connection in the ACME domain with the alias ID
	 *  //      "cd5923ff9f03320021dd7501942e70bb"
	 *  connectionInfo = provider.getConnectionInfoByDomain("cd5923ff9f03320021dd7501942e70bb",
	 *         "c90d4b084a362312013398f051272c0d");
	 * 
	 * @param aliasID The sys\_id of a connection alias.
	 * @param domainID The sys\_id of a domain or global.
	 * 
	 * @returns ConnectionInfo Connection information.
	 * 
	 */
	getConnectionInfoByDomain(aliasID: string,domainID: string) : ConnectionInfo
	}
/**
	 * @description Use the StandardCredentialsProvider API to retrieve credential information.
	 * You can use this API in scoped applications, or within the global scope. In scoped scripts, use the sn\_cc namespace identifier.  	
 *   	
 * This API provides methods to retrieve credential information by sys\_id and by specified credential attributes.  	
 *   	
 * 	
 *     //Get a single credential	
 *     	
 *     var provider = new sn_cc.StandardCredentialsProvider();	
 *     var credential = provider.getCredentialByID("f43c6d40a0a0b5700c77f9bf387afe3");	
 *     var userName = credential.getAttribute("user_name");	
 *     var password = credential.getAttribute("password");	
 *     //using getAttribute for new keys in extended tables, for example 	
 *     //cloud management credential has the "user_public_key" attribute	
 *     var userPublicKey = credential.getAttribute("user_public_key");	
 *     	
 *     //Get a list of SSH credentials	
 *     	
 *     var provider = new sn_cc.StandardCredentialsProvider();	
 *     var credentials = provider.getCredentials(["ssh"]);	
 *     for (var i = 0; i < credentials.length; i++) {	
 *       var credential = credentials[i];	
 *       gs.info(credential.getAttribute("name"));	
 *     }
	 * 
	 */
	declare class StandardCredentialsProviderScopedGlobal {
	/**
	 * @description Instantiates a credentials provider object.
	 * @example
	 * //
	 * var provider = new sn_cc.StandardCredentialsProvider();
	 * var credentials = provider.getCredentialByID("ef43c6d40a0a0b5700c77f9bf387afe3");
	 * 
	 */
	constructor() 
	/**
	 * @description Returns an array of all credentials that match the specified types and tags.
	 * @example
	 * //This code example shows how to get the provider credentials for "ssh" credential types.
	 * var provider = new sn_cc.StandardCredentialsProvider();
	 * var credentials = provider.getCredentials(["ssh"]);
	 * 
	 * @example
	 * //This code example shows how to get the provider credentials for "ssh" and "windows" credential types that have tags of "admin".
	 * var provider = new sn_cc.StandardCredentialsProvider();
	 * ArrayList&lt;String&gt; types = new ArrayList&lt;&gt;();
	 * types.add("ssh");
	 * types.add("windows");
	 * JSONArray jsonArray = provider.getCredentials(types, "admin");
	 * 
	 * @param tags Optional. Comma-separated list of tag names. For example, "ssh, jdbc".  Examples of valid calls:  *   var credentials = provider.getCredentials(null, null); *   var credentials = provider.getCredentials(\["ssh"\], ""); *   var credentials = provider.getCredentials(new ArrayList<String>(), "ssh,admin");
	 * @param types Optional. Credential type names. For example, \["ssh", "windows"\]  Note: If types is null or empty, any match returns a credential. If types is specified, the credentials whose type matches one of the types is returned.
	 * 
	 * @returns StandardCredential Credential record object.
	 * 
	 */
	getCredentials(tags: string,types: Array) : StandardCredential
	/**
	 * @description Returns the credential record object identified by the specified sys\_id.
	 * @example
	 * //
	 * var provider = new sn_cc.StandardCredentialsProvider();
	 * var credentials = provider.getCredentialByID("ef43c6d40a0a0b5700c77f9bf387afe3");
	 * gs.info("User name: " + credentials.getAttribute("user_name"));
	 * 
	 * @param sys_id Sys\_id of the credential record. Located in the Credentials \[discovery\_credentials\] table.
	 * 
	 * @returns StandardCredential Credential record object.
	 * 
	 */
	getCredentialByID(sys_id: string) : StandardCredential
	}
declare namespace sn_cc {
	}
/**
	 * @description Provides methods to add data to the MetricBase database, to execute transforms on the MetricBase database, and to receive the results of the transforms.
	 * The Client class can be used in scoped and global server scripts. When using the Client class, use the sn\_clotho namespace identifier.  	
 *   	
 * This class is part of the MetricBase application.
	 * 
	 */
	declare class ClientScopedGlobal {
	/**
	 * @description Create an instance of the client class to access the MetricBase database.
	 * @example
	 * //
	 * var client = new sn_clotho.Client();
	 * 
	 */
	constructor() 
	/**
	 * @description Remove the data in the MetricBase database associated with the specified metric in the specified GlideRecord. Use this method for removing test data.
	 * Note: This method deletes data from the MetricBase database. There is no recovery mechanism.
	 * 
	 * @example
	 * //
	 * var client = new sn_clotho.Client();
	 * //query drones of a specific model
	 * var drones = new GlideRecord("mb_demo_drone");
	 * drones.addQuery("model", "Kingfisher Phantom");
	 * drones.query();
	 * 
	 * client.deleteSeries(drones, 'mb_demo_mt_speed');
	 * 
	 * @param gr The records whose time series data for the specified metric is to be deleted.
	 * @param metric The name of the metric.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	deleteSeries(gr: GlideRecord,metric: string) : void
	/**
	 * @description Saves metric data to the MetricBase database.
	 * @example
	 * //
	 * var time = new GlideDateTime();
	 * ​
	 * // two different GlideRecord instances and metrics
	 * var dataBuilder = new sn_clotho.DataBuilder(gr, 'cpu_percentage');
	 * dataBuilder.add(time, 0.6);
	 * ​
	 * var dataBuilder2 = new sn_clotho.DataBuilder(gr2, 'disk_free_percentage');
	 * dataBuilder2.add(time, 0.2);
	 * ​
	 * new sn_clotho.Client().put([dataBuilder,dataBuilder2]);
	 * 
	 * @param metricData One of the following:  *   [DataBuilder](https://docs.servicenow.com/bundle/paris-application-development/page/app-store/dev_portal/API_reference/DataBuilderScoped/concept/DataBuilderScopedAPI.html) object containing metric data. *   Array of DataBuilder objects containing metric data.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	put(metricData: Object) : void
	}
/**
	 * @description A Data object contains the results of transform performed by a sn\_clotho.Client.transform() method.
	 * Do not use a constructor to create an instance of this class, instead use the object returned by the sn\_clotho.Client.transform() method.  	
 *   	
 * The Data class can be used in scoped and global server scripts. When using the Data class, use the sn\_clotho namespace identifier.  	
 *   	
 * This class is part of the MetricBase application.
	 * 
	 */
	declare class DataScopedGlobal {
	/**
	 * @description Returns the end time for data in the Data object.
	 * @returns GlideDateTime The end of the time period.
	 * 
	 */
	getEnd() : GlideDateTime
	/**
	 * @description Returns the label assigned by the sn\_clotho.ClothoTransform.label() method.
	 * @returns string The label assigned to the data.
	 * 
	 */
	getLabel() : string
	/**
	 * @description Returns the name of the metric of the data series. Returns null when the data object is associated with multiple data series.
	 * @returns string Name of the metric field. Returns null when the data object is associated with multiple data series.
	 * 
	 */
	getMetricName() : string
	/**
	 * @description Returns the time period in milliseconds.
	 * @returns number The elapsed time in seconds.
	 * 
	 */
	getPeriod() : number
	/**
	 * @description Returns the start time for data in the Data object.
	 * @returns GlideDateTime The time for the first data point.
	 * 
	 */
	getStart() : GlideDateTime
	/**
	 * @description Returns the subject of the data series. Returns null when the data object is associated with multiple data series.
	 * @returns string The subject field value of the subject GlideRecord. This is generally the sys\_id of the subject GlideRecord.
	 * 
	 */
	getSubject() : string
	/**
	 * @description Returns the name of the table assigned in the DataSelector class constructor. Returns null when the data object is associated with multiple data series.
	 * @returns string Table name. Returns null when the data object is associated with multiple data series.
	 * 
	 */
	getTableName() : string
	/**
	 * @description Returns an array of values.
	 * @returns Array An array of numbers.
	 * 
	 */
	getValues() : Array
	/**
	 * @description Returns the number of values in the Data object.
	 * @returns number The number of values in the object.
	 * 
	 */
	size() : number
	}
/**
	 * @description Use the DataBuilder class to create a series of data points for a metric. Use the sn\_clotho.Client.put() method to save the values.
	 * The DataBuilder class can be used in scoped and global server scripts. When using the DataBuilder class, use the sn\_clotho namespace identifier.  	
 *   	
 * This class is part of the MetricBase application.
	 * 
	 */
	declare class DataBuilderScopedGlobal {
	/**
	 * @description Creates an instance of the DataBuilder class.
	 * @example
	 * //
	 * // Where cpu_percentage is the name of the metric
	 * var dataBuilder = new sn_clotho.DataBuilder(gr, 'cpu_percentage');
	 * 
	 * @param glideRecord GlideRecord from which to obtain the domain.
	 * @param subject The sys\_id of the GlideRecord associated with this series.
	 * @param metric The field name of the metric.
	 * 
	 */
	constructor(glideRecord: Object,subject: string,metric: string) 
	/**
	 * @description Add a series of data points to the DataBuilder object. Each data point is a time stamp and a value.
	 * Uses the start parameter and the retention policy collection period to calculate the time stamp for each value in the array. The first value has the start parameter as the time stamp. This method does not save the data in the MetricBase database. Use the sn\_clotho.Client.put() method to save the values.
	 * 
	 * @example
	 * //
	 * 
	 * var points = [7,0.5,273];
	 * var dataBuilder = new sn_clotho.DataBuilder(gr, 'cpu_percentage');
	 * // this creates a GlideDateTime object set to the current date and time
	 * var time = new GlideDateTime();
	 * dataBuilder.add(time, points);
	 * 
	 * @param start The time stamp for the first data point. Subsequent time stamps are calculated using the retention policy collection period.
	 * @param value An array of numbers.
	 * 
	 * @returns DataBuilder The same DataBuilder object.
	 * 
	 */
	add(start: GlideDateTime,value: Array) : DataBuilder
	/**
	 * @description Add a data point to the DataBuilder object. Each data point is a time stamp and a value. This method does not save the data point in the metric. Use the sn\_clotho.Client.put() method to save the values.
	 * @example
	 * //
	 * var dataBuilder = new sn_clotho.DataBuilder(gr, 'cpu_percentage');
	 * // this creates a GlideDateTime object set to the current date and time
	 * var time = new GlideDateTime();
	 * dataBuilder.add(time, 0.6);
	 * 
	 * @param start The time stamp for the data point.
	 * @param value The value of the data point.
	 * 
	 * @returns DataBuilder The DataBuilder object.
	 * 
	 */
	add(start: GlideDateTime,value: number) : DataBuilder
	}
/**
	 * @description Manipulate time-series data to prepare the data for evaluation and analysis.
	 * The Transformer class can be used in scoped and global server scripts. When using the Transformer class, use the sn\_clotho namespace identifier.  	
 *   	
 * The general use case is to determine the period to be evaluated, select the records from the table with the metric field, define the type of transform to run, and then execute the transform.	
 * 	
 *     // create the start and end time	
 *            var start = new GlideDateTime();	
 *     	start.addSeconds(-1 * 60 * 60); 	
 *     	var end = new GlideDateTime();	
 *     		
 *     	//mb_demo_drone is a table with metric fields. 	
 *     	var drones = new GlideRecord("mb_demo_drone");	
 *     	drones.addQuery("model", "Kingfisher Phantom");	
 *     	drones.query();	
 *     	
 *     	//build a transform that returns a simple average	
 *     	var builder = new sn_clotho.Transformer(drones);	
 *     	builder.metric("mb_demo_mt_rem_battery").avg().label("Original");	
 *     	
 *     	//execute transform and return result for visualization	
 *     	var result = builder.execute(start,end);	
 * 	
 *   	
 *   	
 * This class is part of the MetricBase application.
	 * 
	 */
	declare class TransformerScopedGlobal {
	/**
	 * @description Run the transform.
	 * Use the metric() and groupBy() methods before calling execute(). The execute() method can only be called once for each Transformer object.
	 * 
	 * Actions performed as part of the transform do not change the data in the MetricBase database.
	 * 
	 * @example
	 * //
	 * var minutesAgoStart = 60;
	 * 	var end = new GlideDateTime();
	 * 	var start = new GlideDateTime(end);
	 * 	start.addSeconds(-1 * 60 * minutesAgoStart);
	 * 	
	 * 	// query subject records
	 * 	var grDrone = new GlideRecord('mb_demo_drone');
	 * 	grDrone.query();
	 * 	
	 * 	// building transform; get the average transforms of a metric, grouping by model
	 * 	var transformer = new sn_clotho.Transformer(grDrone);
	 * 	transformer.groupBy("fleet").metric("mb_demo_mt_altitude").avg().label('avg - %g:fleet:');
	 * 
	 * 	// execute and return result for visualization
	 * 	var tfrmResult = transformer.execute(start, end);
	 * 
	 * @param start The beginning of the period to be evaluated.
	 * @param end The end of the period to be evaluated.
	 * 
	 * @returns TransformResult The transformed data.
	 * 
	 */
	execute(start: GlideDateTime,end: GlideDateTime) : TransformResult
	/**
	 * @description Specify a field to be used to group the data.
	 * If you are going to use the groupBy() method, it must be called before the execute() method.
	 * 
	 * @example
	 * //
	 * var transformer = new sn_clotho.Transformer(grDrone);
	 * 	var trnsfrm = transformer.groupBy("fleet");
	 * 
	 * @param field A field in the table to be used to group the transform results.
	 * 
	 * @returns TransformPart A TransformPart object that can be used to specify the transform characteristics.
	 * 
	 */
	groupBy(field: string) : TransformPart
	/**
	 * @description Specify the metric field to be used in the transform.
	 * You can specify multiple metrics to be used in the transform. The metric() method cannot be called after the execute() method is called.
	 * 
	 * @example
	 * //
	 * var transformer = new sn_clotho.Transformer(grDrone);
	 * var trnsfrm = transformer.metric("mb_demo_mt_altitude");
	 * 
	 * @param metricName Name of the metric field.
	 * 
	 * @returns TransformPart A TransformPart object that can be used to specify the transform characteristics.
	 * 
	 */
	metric(metricName: string) : TransformPart
	/**
	 * @description Create a Transformer object.
	 * @example
	 * //
	 * //where drones is a GlideRecord created from a table with a metric field
	 * 	var builder = new sn_clotho.Transformer(drones);
	 * 
	 * 
	 * @param sourceRecords Contains the records for which metrics are to be evaluated. Can be one record or many.
	 * 
	 */
	constructor(sourceRecords: GlideRecord) 
	}
/**
	 * @description Use the TransformPart class to specify details of the transform to be done.
	 * The TransformPart class can be used in scoped and global server scripts. When using the TransformPart class, use the sn\_clotho namespace identifier.  	
 *   	
 * There is no constructor for this class. TransformPart objects are returned by many Transformer and TransformPart methods.  	
 *   	
 * The methods of this class define the transforms to be done. The actual transformation is done when the execute() method is called on the Transformer object.  	
 *   	
 * The order the TransformPart methods are called is important.	
 * 	
 * *   You must call the metric() method before calling a transform method.	
 * *   You cannot use the metric() or groupBy() methods after calling a transform method.	
 * *   Intermediate transforms are not returned in a result unless the collect() method is called for the intermediate result you want.	
 *     	
 *         // where tp is a TransformPart object	
 *         // example 1	
 *         tp.avg().add(2);	
 *         var tr = tp.execute(); 	
 *         // tr contains avg+2, but not avg	
 *          	
 *         // example 2	
 *         tp.avg().add(2);	
 *         tp.avg();	
 *         var tr = tp.execute(); 	
 *         // tr contains both avg and avg + 2	
 *         	
 *         // example 3	
 *         tp.avg().collect().add(2);	
 *         var tr = tp.execute(); 	
 *         // tr contains both avg and avg + 2	
 *     	
 * 	
 *   	
 *   	
 * This class is part of the MetricBase application.
	 * 
	 */
	declare class TransformPartScopedGlobal {
	/**
	 * @description Add the specified number to the value in each time stamp.
	 * @param constant The number to add to the value in each time stamp.
	 * 
	 * @returns TransformPart A TransformPart object that can be used to specify transform characteristics.
	 * 
	 */
	add(constant: number) : TransformPart
	/**
	 * @description Aggregate the selected metric series into one series containing the average value for each time stamp.
	 * @returns TransformPart A TransformPart object that can be used to specify transform characteristics.
	 * 
	 */
	avg() : TransformPart
	/**
	 * @description Create a result set that for each time stamp returns specified number of bottom values. This method results in 'count' number of series. Each value retains the label of its source series.
	 * @param count The number of series to return. The series are labeled 0 to count - 1.
	 * 
	 * @returns TransformPart A TransformPart object that can be used to specify transform characteristics.
	 * 
	 */
	bottom(count: number) : TransformPart
	/**
	 * @description Replace the value in any time stamp that is greater than the specified value with the specified value.
	 * @param ceiling The maximum allowed value for any time stamp.
	 * 
	 * @returns TransformPart A TransformPart object that can be used to specify transform characteristics.
	 * 
	 */
	ceil(ceiling: number) : TransformPart
	/**
	 * @description Mark this transform for collection.
	 * Transforms that are part of a chain, but not the last transform, are by default not collected. A collected transform is returned as part of the transform result.
	 * 
	 * @returns TransformPart A TransformPart object that can be used to specify transform characteristics.
	 * 
	 */
	collect() : TransformPart
	/**
	 * @description Aggregate the selected metric series into one series containing the number of values for each time stamp.
	 * @returns TransformPart A TransformPart object that can be used to specify transform characteristics.
	 * 
	 */
	count() : TransformPart
	/**
	 * @description Divide the value in each time stamp by the specified number.
	 * @param constant The number by which to divide the value of each time stamp.
	 * 
	 * @returns TransformPart A TransformPart object that can be used to specify transform characteristics.
	 * 
	 */
	div(constant: number) : TransformPart
	/**
	 * @description Create a series using the specified aggregator for the specified time.
	 * @param aggregator Can be:  *   AVG *   CHISQUARE *   LAST *   MAX *   MEDIAN *   MIN *   STDDEV  For definitions of these options, see [MetricBase transforms](https://docs.servicenow.com/bundle/paris-performance-analytics-and-reporting/page/use/reporting/reference/metricbase-transforms.html).
	 * @param duration Time period for doing the transform.
	 * 
	 * @returns TransformPart TransformPart object that can be used to specify transform characteristics.
	 * 
	 */
	filter(aggregator: Object,duration: Object) : TransformPart
	/**
	 * @description Replace the value in any time stamp that is less than the specified value with the specified value.
	 * @param floor The minimum value for any time stamp.
	 * 
	 * @returns TransformPart A TransformPart object that can be used to specify transform characteristics.
	 * 
	 */
	floor(floor: number) : TransformPart
	/**
	 * @description Create series made up of the value that the specified percentage of values is below. Returns a series for each fraction in the specified array.
	 * The value in a time stamp in a returned series is the value at which the specified fraction of the samples for that time stamp is below. For example, if the fraction is 0.5, then the value in the time stamp is the value where half the values in the input series are below (median).
	 * 
	 * @example
	 * //
	 * // returns a single series containing the median for each time stamp, which
	 * // means that half a time stamp's values are below the returned value 
	 * fractiles([.5]) 
	 * // returns four series, one series for each of the 25%, 50%, 75%, and 100% quartiles 
	 * fractiles([.25, .5, .75, 1])
	 * // returns the median, 95% percentile, the max value
	 * fractiles([.50, .95, 1]) 
	 * 
	 * @param fractions The fractions to use on the input series.
	 * 
	 * @returns TransformPart A TransformPart object that can be used to specify transform characteristics. Contains one series for each fraction specified.
	 * 
	 */
	fractiles(fractions: number[]) : TransformPart
	/**
	 * @description Return the part of the result relevant to this transform.
	 * The collect() method must be called before the execute() method, and the execute() method must be called before calling the getResult() method.
	 * 
	 * @example
	 * //
	 * var t = new sn_clotho.Transformer(drones);
	 * t.metric("mb_demo_mt_altitude");
	 * var avgTform = t.avg();
	 * t.execute();
	 * var avgTformResult = avgTform.getResult();
	 * 
	 * @returns TransformResult Contains the transform results associated with this part of the transform.
	 * 
	 */
	getResult() : TransformResult
	/**
	 * @description Specify a field to be used to group the data.
	 * The groupBy() method cannot be called after a transform has been run.
	 * 
	 * @param field A field in the table to be used to group the transform results.
	 * 
	 * @returns TransformPart A TransformPart object that can be used to specify transform characteristics.
	 * 
	 */
	groupBy(field: string) : TransformPart
	/**
	 * @description Create a data value for a NaN data item by interpolating from adjacent data values.
	 * @param count Specifies the number of data samples in each direction to check for a non NaN value. If if a non NaN value is not found, NaN is used.
	 * 
	 * @returns TransformPart A TransformPart object that can be used to specify transform characteristics.
	 * 
	 */
	interpolate(count: Object) : TransformPart
	/**
	 * @description Perform an Interquartile range transform.
	 * Creates a result set of four series.
	 * 
	 * *   IQR, the median of all entries
	 * *   IQR range, below Q1-1.5IQR, or above Q3+1.5IQR
	 * *   Q1, the median of the smallest half of entries
	 * *   Q3, the median of the largest half of entries
	 * 
	 * @returns TransformPart A TransformPart object that can be used to specify transform characteristics.
	 * 
	 */
	iqr() : TransformPart
	/**
	 * @description Add a label for the resulting series.
	 * @param label The label for the transform results.
	 * 
	 * @returns TransformPart A TransformPart object that can be used to specify transform characteristics.
	 * 
	 */
	label(label: string) : TransformPart
	/**
	 * @description Returns at most the specified number of values, starting at the most recent non-NaN value.
	 * @param count A number of time stamps.
	 * 
	 * @returns TransformPart A TransformPart object that can be used to specify transform characteristics.
	 * 
	 */
	limit(count: Object) : TransformPart
	/**
	 * @description Run a logarithm on the value in each time stamp where the result is the log of the specified base for the time stamp value.
	 * @param base The base for the logarithm calculation.
	 * 
	 * @returns TransformPart A TransformPart object that can be used to specify transform characteristics.
	 * 
	 */
	log(base: number) : TransformPart
	/**
	 * @description Returns a series with the maximum value for each time stamp.
	 * @returns TransformPart A TransformPart object that can be used to specify transform characteristics.
	 * 
	 */
	max() : TransformPart
	/**
	 * @description Create a series containing the median of values for each time stamp across a set of series.
	 * If there are n series in the TranformPart object, then if n is odd, the (n / 2 + 1) value for a time stamp is the median. If n is even, the average of the (n / 2) and (n / 2 + 1) values for a time stamp is the median.
	 * 
	 * @returns TransformPart A TransformPart object that can be used to specify transform characteristics.
	 * 
	 */
	median() : TransformPart
	/**
	 * @description Specify the metric field to be used in the transform.
	 * You can specify multiple metrics to be used in the transform. The metric() method cannot be called after the transform has been run.
	 * 
	 * @param metric Name of the metric field.
	 * 
	 * @returns TransformPart A TransformPart object that can be used to specify transform characteristics.
	 * 
	 */
	metric(metric: string) : TransformPart
	/**
	 * @description Returns a series with the minimum value for each time stamp.
	 * @returns TransformPart A TransformPart object that can be used to specify transform characteristics.
	 * 
	 */
	min() : TransformPart
	/**
	 * @description Multiply the value in each time stamp by the specified number.
	 * @param constant The number by which to multiply the value of each time stamp.
	 * 
	 * @returns TransformPart A TransformPart object that can be used to specify transform characteristics.
	 * 
	 */
	mul(constant: number) : TransformPart
	/**
	 * @description Partition the series into intervals of the same duration.
	 * @param aggregator The aggregator to use. Can be min, max, avg, or last.
	 * @param duration The interval length.
	 * @param base The zero offset for partitioning. For example, if you partition by day (24h), then set the base to Monday at midnight in your time zone. If you partition by 30 days, then set the base to 1st day of the most recent month.
	 * 
	 * @returns TransformPart A TransformPart object that can be used to specify transform characteristics.
	 * 
	 */
	partition(aggregator: string,duration: GlideDateTime|string,base: GlideDateTime|string) : TransformPart
	/**
	 * @description Specify the number of data points to include in the result.
	 * Aligns a series with a fixed number of data points in the given range. If the original series has more data points than specified, multiple values are averaged. If the original series has fewer data points than specified, data points are added by interpolating data points between existing data points.
	 * 
	 * You can use the resample() method to reduce the number of samples in the result to more closely match the number of samples you are going to display.
	 * 
	 * @param count The number of samples to include in the result.
	 * 
	 * @returns TransformPart A TransformPart object that can be used to specify transform characteristics.
	 * 
	 */
	resample(count: number) : TransformPart
	/**
	 * @description Specify the minimum and maximum number of samples to include in the result.
	 * This method is useful when you are showing series with different time periods (granularities).
	 * 
	 * This method determines the average number of points per series and if that fits between the specified minimum and maximum, each series is resampled to that average number of points. If the calculated average is greater than the maximum specified or smaller than the minimum specified, the specified maximum or minimum is used.
	 * 
	 * @param min The minimum number of samples to include in the result. If not enough samples are available, interpolation is used to create samples.
	 * @param max The maximum number of samples to include in the result.
	 * 
	 * @returns TransformPart A TransformPart object that can be used to specify transform characteristics.
	 * 
	 */
	resample(min: number,max: number) : TransformPart
	/**
	 * @description Specify an aggregator to use to create a result set of the specified size. The aggregator can be LAST, AVG, MIN, or MAX.
	 * You can use the resample() method to reduce the number of samples in the result to more closely match the number of samples you are going to display.
	 * 
	 * @param aggregator Can be LAST, AVG, MIN, or MAX.
	 * @param numValues The number of samples to include in the result set.  When the number of values requested is greater than the number of values in the data for the requested time period, interpolate() is used to add values between existing points to reach the requested number of values.
	 * 
	 * @returns TransformPart A TransformPart object that can be used to specify transform characteristics.
	 * 
	 */
	resample(aggregator: string,numValues: number) : TransformPart
	/**
	 * @description Specify an aggregator to use to create a result set over the specified duration. The aggregator can be LAST, AVG, MIN, or MAX.
	 * Resamples the underlying data to the requested period.
	 * 
	 * *   When the time series is stored at a 1 minute interval and resample(AVG, new GlideDuration("1:00")) is called, the result will have one data point at every hour reflecting the average of the previous 60 values.
	 * *   When the period requested is smaller than the period of the data, interpolation is used to calculate the intervening data points.
	 * 
	 * You can use the resample() method to reduce the number of samples in the result to more closely match the number of samples you are going to display.
	 * 
	 * @param aggregator Can be LAST, AVG, MIN, or MAX.
	 * @param duration The time period for the result set.
	 * 
	 * @returns TransformPart A TransformPart object that can be used to specify transform characteristics.
	 * 
	 */
	resample(aggregator: string,duration: GlideDuration) : TransformPart
	/**
	 * @description Round the value in each time stamp to the specified precision.
	 * Performs this calculation on each value.
	 * 
	 * (v / precision) \* precision
	 * 
	 * @param precision The value to be used in the rounding calculation.
	 * 
	 * @returns TransformPart A TransformPart object that can be used to specify transform characteristics.
	 * 
	 */
	round(precision: number) : TransformPart
	/**
	 * @description Create a series containing the standard deviation of values for each time stamp across a set of series.
	 * @returns TransformPart A TransformPart object that can be used to specify transform characteristics.
	 * 
	 */
	stddev() : TransformPart
	/**
	 * @description Subtract the specified number from the value in each time stamp.
	 * @param constant The number to subtract from the value in each time stamp.
	 * 
	 * @returns TransformPart A TransformPart object that can be used to specify transform characteristics.
	 * 
	 */
	sub(constant: Object) : TransformPart
	/**
	 * @description Aggregate the selected metric series into one series containing the sum of all values for each time stamp.
	 * @returns TransformPart A TransformPart object that can be used to specify transform characteristics.
	 * 
	 */
	sum() : TransformPart
	/**
	 * @description Create a result set that for each time stamp returns the specified number of top values. This method results in 'count' number of series. Each value retains the label of its source series.
	 * @param count The number of series to return. The series are labeled 0 to count - 1.
	 * 
	 * @returns TransformPart A TransformPart object that can be used to specify transform characteristics.
	 * 
	 */
	top(count: number) : TransformPart
	}
/**
	 * @description Provides the result of a transformation run on time-series data.
	 * The TransformResult class can be used in scoped and global server scripts. When using the Transformer class, use the sn\_clotho namespace identifier.  	
 *   	
 * There is no constructor for this class. TransformResult objects are returned by many TransformPart methods.  	
 *   	
 * This class is part of the MetricBase application.
	 * 
	 */
	declare class TransformResultScopedGlobal {
	/**
	 * @description Returns an array of Data objects. Returns an error if no group was specified for the transform.
	 * @returns Array An array of Data objects, with each object corresponding to a group.
	 * 
	 */
	byGroup() : Array
	/**
	 * @description Returns the transformed data with the specified label.
	 * @param label The label that identifies the data to be retrieved.
	 * 
	 * @returns Data The Data object with the transform results.
	 * 
	 */
	getByLabel(label: string) : Data
	/**
	 * @description Returns a single Data object, or null if the result is empty.
	 * @returns Data The Data object with the transform results.
	 * 
	 */
	getData() : Data
	/**
	 * @description Returns the transformed data as an array. This method turns a Data object into an array.
	 * @returns Array The Data object formatted as an array.
	 * 
	 */
	toArray() : Array
	}
declare namespace sn_clotho {
	}
/**
	 * @description The IdentificationEngine API uses the Identification and Reconciliation framework to minimize the creation of duplicate configuration items (CIs) and to reconcile CI attributes by only accepting information from authorized data sources when updating the Configuration Management Database (CMDB).
	 * When using this class in a scoped application, use the sn\_cmdb namespace identifier.
	 * 
	 */
	declare class IdentificationEngine {
	/**
	 * @description Determines the operation (insert/update) that will be performed with the specified payload without committing the operation in the database.
	 * This works just like createOrUpdateCI(), but does not commit the result.
	 * 
	 * @param jsonString A JSON formatted string of configuration items to be added or updated. Each input string is in the format  'items: \[{}\], relations:\[{}\]', where each item within the items and relations lists contains name-value pairs.  The possible name-value pairs within the items list are:  *   className - the sys\_class\_name of the CI to be created or updated. *   values:{} - the field information for the CI as name-value pairs, where the name is the field name. *   lookup:\[{}\] - a list of records with each item having name-value pairs like the items list.  The possible name-value pairs within the relations list are:  *   parent - index of the parent item in the dependency relation *   child - index of the child item in the dependency relation *   type - the relationship type. This is one of the name field values from the cmdb\_rel\_type table.
	 * 
	 * @returns string A JSON formatted string that is a list of results. Each result string is in the format  'items: \[{}\], relations:\[{}\]', where each item within the items and relations lists contains name-value pairs.  The possible name-value pairs within the items list are:  *   className- the sys\_class\_name for the CI that was updated or created. *   operation, which is one of INSERT, UPDATE, UPDATE\_WITH\_UPGRADE, UPDATE\_WITH\_DOWNGRADE, UPDATE\_WITH\_SWITCH, DELETE, NO\_CHANGE *   sysId - the sys\_id of the CI that was updated or created. *   relatedSysIds - a list of sys\_id values of CIs used during lookup based identification. *   identifierEntrySysId - sys\_id of identifier entry used during matching. *   errors - a list of errors in the format of (error, message string) *   duplicateIndices - a list of indexes of items that are duplicates of the current item. *   identificationAttempts - a list of attempts in the format of (attributes, identiferName, attemptResult, searchOnTable) where     *   attributes - the attributes of identifier entry used during identification     *   identiferName - the CI identifier to which this identifier entry belongs     *   attemptResult - one of SKIPPED, NO\_MATCH, MATCHED, MULTI\_MATCH     *   searchOnTable - the table searched during the identification process.  The possible name-value pairs within the relations list are:  *   className - the relationship CI's class name and is always cmdb\_rel\_ci *   operation - one of INSERT, UPDATE, NO\_CHANGE *   sysId - the sys\_id of the relationship CI inserted or updated
	 * 
	 */
	identifyCI(jsonString: string) : string
	/**
	 * @description Determines the Configuration Management Database (CMDB) operation (insert/update) to perform with the specified payload (request body), without committing the operations in the database.
	 * Use this method to simulate submission of a payload.
	 * 
	 * This method is similar to the [IdentificationEngine - identifyCI(String jsonString)](dev.do#!/reference/api/paris/server/sn_cmdb-namespace/IdentificationEngineScopedAPI#IESS-identifyCI_S "Determines the operation (insert/update) that will be performed with the specified payload without committing the operation in the database.") method, however it also supports the following functionality:
	 * 
	 * *   Partial payloads
	 *     *   In case of an item having a warning or error, indicates if an item operation is INSERT\_AS\_PARTIAL or INSERT\_INCOMPLETE.
	 *     *   Returns the sys\_ids of partial payloads that were merged with existing partial payloads.
	 * *   Supports payload deduplicate feature.
	 * *   Generates a summary.
	 * 
	 * @example
	 * //
	 * var payload = {
	 * "items": [
	 * {
	 * "className": "cmdb_ci_win_server",
	 * "values": {
	 *    "chassis_type": "Desktop",
	 *    "os": "Windows 2012 R2 Datacenter",
	 *    "name": "Windows2012Server1",
	 *    "serial_number": "0000-0011-1690-8730-8636-5722-52",
	 *    "cpu_count": "1"
	 *   },
	 *   "lookup": [
	 *   {
	 *      "values": {
	 *        "valid": "true",
	 *        "serial_number": "0000-0011-1690-8730-8636-5722-52",
	 *        "serial_number_type": "bios"
	 *       },
	 *      "className": "cmdb_serial_number"
	 *    },
	 *    {
	 *      "values": {
	 *        "valid": "true",
	 *        "serial_number": "3311-9736-4988-9744-1749-4183-41",
	 *        "serial_number_type": "chassis"
	 *       },
	 *      "className": "cmdb_serial_number"
	 *    }],
	 *  
	 *     "internal_id": "16777219",
	 *     "sys_object_source_info": {
	 *       "source_feed": "SN Discovery Feed 1",
	 *       "source_name": "ServiceNow",
	 *       "source_native_key": "16777219",
	 *       "source_recency_timestamp": "2019-10-18 08:31:23"
	 *    }},
	 *    {
	 *    "className": "cmdb_ci_spkg",
	 *    "values": {
	 *      "name": "Windows 2012 R2 Datacenter",
	 *      "key": "Microsoft Windows Server 2012 R2 Datacenter_:::_NULL"
	 *      },
	 *  
	 *   "related": [
	 *     {
	 *      "internal_id": "Microsoft Windows Server 2012 R2 Datacenter_:::_NULL|16777219",
	 *       "values": {
	 *         "name": "Windows 2012 R2 Datacenter-SAMLABVM52"
	 *       },
	 *       "className": "cmdb_software_instance",
	 *       "sys_object_source_info": {
	 *         "source_feed": "SN Discovery Feed 1",
	 *         "source_name": "ServiceNow",
	 *         "source_native_key": "Microsoft Windows Server 2012 R2 Datacenter_:::_NULL|16777219"
	 *   }},
	 *   {
	 *     "internal_id": "Microsoft Windows Server 2012 R2 Datacenter_:::_NULL|16777229",
	 *     "values": {
	 *     },
	 *     "className": "cmdb_software_instance",
	 *     "sys_object_source_info": {
	 *       "source_feed": "SN Discovery Feed 1",
	 *       "source_name": "ServiceNow",
	 *       "source_native_key": "Microsoft Windows Server 2012 R2 Datacenter_:::_NULL|16777229"
	 *   }}
	 * ],
	 *   "settings" : {
	 *         "updateWithoutDowngrade" : "true",
	 *         "updateWithoutUpgrade" : "true",
	 *         "updateWithoutSwitch" : "true"
	 *       }},
	 *   {
	 *   "className": "cmdb_ci_app_server_tomcat",
	 *   "values": {
	 *     "running_process_key_parameters": "/opt/OV/nonOV/tomcat/b/temp org.apache.catalina.startup.Bootstrap start",
	 *     "install_directory": "/opt/OV/nonOV/tomcat/b",
	 *     "name": "Tomcat@hpom9:3443",
	 *     "server_port": "8006",
	 *     "sys_class_name": "cmdb_ci_app_server_tomcat"
	 *   },
	 *  
	 *   "internal_id": "tomcat_id"
	 *   }],
	 *  
	 * "relations": [
	 *   {
	 *     "parent_id": "tomcat_id",
	 *     "child_id": "16777219",
	 *     "type": "Runs on::Runs"
	 *   }],
	 *  
	 * "referenceItems": [
	 *   {
	 *     "referenceField": "installed_on",
	 *     "referenced": "16777219",
	 *     "referencedBy": "Microsoft Windows Server 2012 R2 Datacenter_:::_NULL|16777219"
	 *   }]};
	 *  
	 * var input = new JSON().encode(payload);
	 * var output = sn_cmdb.IdentificationEngine.identifyCIEnhanced('ServiceNow', input, {});
	 * 
	 * @param input Required. Input payload. A JSON formatted string of configuration items to add or update.  "input" {   "items": \[Array\],  "referenceItems": \[Array\],  "relations": \[Array\] }
	 * @param input.items Array of objects that define the items to add or update.  "items": \[   {      "className": "String",      "internal\_id": "String",      "lookup": \[Array\],     "related": \[Array\],     "settings": {Object},     "sys\_object\_source\_info": {Object},     "values": {Object}   } \]
	 * @param input.items.className Required. Class/table name, sys\_class\_name, of the configuration item (CI) to create or update.  This value can be any CMDB class/table, such as cmdb\_ci\_linux\_server or cmdb\_ci\_win\_server.
	 * @param input.items.internal_id Unique item identifier for the associated payload.  This can be any value, but must be unique within the payload.
	 * @param input.items.lookup Identifies the top-level item containing the lookup (lookup-based identification). These records are used to identify the configuration item based on a lookup table that has a reference back to cmdb\_ci.  For example:  "lookup": \[   {     "className": "String",     "internal\_id": "String",     "sys\_object\_source\_info": {Object},     "values": {Object}   } \]
	 * @param input.items.lookup.className Required. Class/table name, sys\_class\_name, of the configuration item (CI) to create or update.  This value can be any CMDB class/table, such as cmdb\_serial\_number or cmdb\_ci\_network\_adapter.
	 * @param input.items.lookup.internal_id Unique lookup item identifier for the associated payload.  This can be any value, but must be unique within the payload.
	 * @param input.items.lookup.sys_object_source_info Defines a unique CI identifier for a specific data source. Different sources may have different name-value pairs for the same CI.  "sys\_object\_source\_info": {    "source\_feed": "String",   "source\_name": "String",     "source\_native\_key": "String",   "source\_recency\_timestamp": "String" }
	 * @param input.items.lookup.sys_object_source_info.source_feed If the source can have multiple feeds, use this field to provide the name of the feed sending this item.  The data source generates this feed name. It can be any string that uniquely identifies the source feed.
	 * @param input.items.lookup.sys_object_source_info.source_name Data source of the CI information. This value must be one of the choice values defined for the discovery\_source field of the Configuration Item \[cmdb\_ci\] table.
	 * @param input.items.lookup.sys_object_source_info.source_native_key Unique key-id for the item from the source.  The data source generates this key. It can be any string that is unique to the item.
	 * @param input.items.lookup.sys_object_source_info.source_recency_timestamp UTC date/time that the item was scanned.  Format: YYYY-MM-DD hh:mm:ss
	 * @param input.items.lookup.values Field information for the CI as name-value pairs, where the name is the field name. When updating reference fields, the value must be the referenced sys\_id.  Field names and types depend on the fields selected by the user, such as:  "values": {   "serial\_number": "String",   "serial\_number\_type": "String",   "valid": "String",   "ip\_address": "String",   "mac\_address": "String" }
	 * @param input.items.related Reference to the top-level item that contains the related list. Rules in the Related Entry \[cmdb\_related\_entry\] define what type of records can be in this array. These records are used to add items based on a related table that has a reference to the CI that is being identified.  The related table may or may not extend cmdb\_ci. These records are not used to identify the configuration item.  "related" \[   {     "className": "String",     "internal\_id": "String",     "sys\_object\_source\_info": {Object},     "values": {Object}   } \]
	 * @param input.items.related.className Required. Class/table name, sys\_class\_name, of the configuration item (CI) to create or update.  This value can be any CMDB class/table, such as cmdb\_software\_instance or cmdb\_key\_value.
	 * @param input.items.related.internal_id Unique identifier for this related item in this payload. Can be any value, but must be unique within the payload.
	 * @param input.items.related.sys_object_source_info Object that makes up a unique CI identifier for a specified data source. Different sources may have different name-value pairs for the same CI.  "sys\_object\_source\_info": {    "source\_feed": "String",   "source\_name": "String",     "source\_native\_key": "String",   "source\_recency\_timestamp": "String" }
	 * @param input.items.related.sys_object_source_info.source_feed If the source can have multiple feeds, use this field to provide the name of the feed sending this item.  The data source generates this feed name. It can be any string that uniquely identifies the source feed.
	 * @param input.items.related.sys_object_source_info.source_name Identifies the data source of the CI information. This value must be one of the choice values defined for the discovery\_source field of the Configuration Item \[cmdb\_ci\] table.
	 * @param input.items.related.sys_object_source_info.source_native_key Unique key/id from the source for the related item.  The data source generates this key. It can be any string that is unique to the item.
	 * @param input.items.related.sys_object_source_info.source_recency_timestamp UTC date and time that the item was scanned.  Format: YYYY-MM-DD hh:mm:ss
	 * @param input.items.related.values Fields to create or update for this related item as name/value pairs, where the name is the field name. For a reference field, the value must be the referenced sys\_id.  Field names and types depend on the fields selected by the user, such as:  "values": {   "host\_name": "String",   "ip\_address": "String",   "name": "String",   "os\_name": "String",   "sys\_class\_name": "String" }
	 * @param input.items.settings Parameters that define the types of updates that are permitted.  "settings": {    "updateWithoutDowngrade": "String",    "updateWithoutSwitch": "String",   "updateWithoutUpgrade": "String" }
	 * @param input.items.settings.updateWithoutDowngrade Flag that indicates whether update and downgrade are both permitted for this item.  Valid values:  *   true: Update the item but downgrade is not permitted. *   false: Both item update and downgrade are permitted.  Default: false
	 * @param input.items.settings.updateWithoutSwitch Flag that indicates whether the item can be updated and the class switched.  Valid values:  *   true: Update the item but class switching is not permitted. *   false: Both item update and class switching are permitted.  Default: false
	 * @param input.items.settings.updateWithoutUpgrade Flag that indicates whether update and upgrade are both permitted for this item.  Valid values:  *   true: Update the item but upgrade is not permitted. *   false: Both item update and upgrade are permitted.  Default: false
	 * @param input.items.sys_object_source_info Unique CI identifier for a specific source.  "sys\_object\_source\_info": {    "source\_feed": "String",   "source\_name": "String",     "source\_native\_key": "String",   "source\_recency\_timestamp": "String" }
	 * @param input.items.sys_object_source_info.source_feed If the source can have multiple feeds, use this field to provide the name of the feed sending this item.  The data source generates this feed name. It can be any string that uniquely identifies the source feed.
	 * @param input.items.sys_object_source_info.source_name Data source of the CI information. This value must be one of the choice values defined for the discovery\_source field of the Configuration Item \[cmdb\_ci\] table.
	 * @param input.items.sys_object_source_info.source_native_key Unique key/id for the item from the source.  The data source generates this key. It can be any string that is unique to the item.
	 * @param input.items.sys_object_source_info.source_recency_timestamp UTC date and time that the item was scanned.  Format: YYYY-MM-DD hh:mm:ss
	 * @param input.items.values Fields to create or update for this related item as name/value pairs, where the name is the field name. For a reference field, the value must be the referenced sys\_id.  Field names and types depend on the fields selected by the user, such as:  "values": {   "host\_name": "String",   "ip\_address": "String",   "name": "String",   "os\_name": "String",   "sys\_class\_name": "String" }
	 * @param input.referenceItems Array of objects that define references between items in the input payload.  "referenceItems": \[   {      "referenced": "String",      "referencedBy": "String",      "referenceField": "String"    } \]
	 * @param input.referenceItems.referenced The internal\_id defined for the item being referenced by another item.
	 * @param input.referenceItems.referencedBy The internal\_id defined for the item that references another item.
	 * @param input.referenceItems.referenceField Name of the reference field in the class/table for the referencedBy item.
	 * @param input.relations Array of objects that specify relationships between items in the input payload.  A node in this array can use either of two formats.  *   The node can define a relationship between two top-level items (only) using parent and child name-value pairs, with values representing item indexes from the payload items array. *   The node can define a relationship between any two items, including top-level, related, or lookup items, using parent\_id and child\_id key/value pairs, with values representing internal\_id values defined for those items.  "relations": \[   {     "child": Number,     "parent": Number,     "type": "String"   } \]  "relations": \[   {     "child\_id": "String",     "parent\_id": "String",     "type": "String"   } \]
	 * @param input.relations.child Integer index of the CI object in the items array that represents the child in the relationship.
	 * @param input.relations.child_id The internal\_id of the child item in the relation.
	 * @param input.relations.parent Integer index of the parent item in the items array.
	 * @param input.relations.parent_id The internal\_id of the parent item in the relation (item.related or item.lookup item).
	 * @param input.relations.type The type of relationship that exists between the parent and child items. This must be a name field value from the CI Relationship Type \[cmdb\_rel\_type\] table.
	 * @param options Optional, but {} or null must be passed-in. Options to enable or disable features.  Note: By default or if partial\_payloads is set to true, both partial\_commits and deduplicate\_payloads are enabled, even if they are set to false, as those features are essential for partial payloads functionality.  "options": {   "deduplicate\_payloads": "Boolean",  "generate\_summary": "Boolean",   "partial\_commits": "Boolean",   "partial\_payloads": "Boolean" }
	 * @param options.deduplicate_payloads Flag that indicates whether duplicate items are merged or considered errors.  Valid values:  *   true: Merge duplicate items. *   false: Consider duplicate items as errors.  Default: true
	 * @param options.generate_summary Flag that indicates whether the returned results contain summary information. For the details of the returned summary information, see <String>.summary in the return results table.  Valid values:  *   true: Include summary information. *   false: Do not include summary information.  Default: false
	 * @param options.partial_commits Flag that indicates whether partial commit support is enabled. For additional information on partial commits, see [Enhanced IRE features](https://docs.servicenow.com/bundle/paris-servicenow-platform/page/product/configuration-management/concept/ire.html).  Valid values:  *   true: Partial commit enabled. *   false: Partial commit disabled.  Default: true
	 * @param options.partial_payloads Flag that indicates whether partial payload support is enabled. For additional information on partial payloads, see [Enhanced IRE features](https://docs.servicenow.com/bundle/paris-servicenow-platform/page/product/configuration-management/concept/ire.html) and [Create an IRE data source rule](https://docs.servicenow.com/bundle/paris-servicenow-platform/page/product/configuration-management/task/create-ire-data-source-rule.html).  Valid values:  *   true: Partial payload enabled. *   false: Partial payload disabled.  Default: true
	 * @param source Data source of the CI information. This value must be one of the choice values defined for the discovery\_source field of the Configuration Item \[cmdb\_ci\] table.
	 * 
	 * @returns number Number of items that generated a warning when processed.  Data type: Number
	 * 
	 */
	identifyCIEnhanced(source: string, input: any, options: any) : number
	/**
	 * @description Insert or update configuration items and non-Configuration Management Database (CMDB) configuration items (classes not extending from cmdb\_ci) in the CMDB based on identification and reconciliation rules. Use this API instead of updating the CMDB directly.
	 * @example
	 * //
	 * var payload = {
	 * "items": [
	 * {
	 *  "className": "cmdb_ci_win_server", 
	 *  "values": {
	 *    "chassis_type": "Desktop",
	 *    "os": "Windows 2012 R2 Datacenter",
	 *    "name": "Windows2012Server1",
	 *    "serial_number": "0000-0011-1690-8730-8636-5722-52",
	 *    "cpu_count": "1"
	 *   },
	 *   "lookup": [
	 *   {
	 *      "values": {
	 *        "valid": "true",
	 *        "serial_number": "0000-0011-1690-8730-8636-5722-52",
	 *        "serial_number_type": "bios"
	 *       },
	 *      "className": "cmdb_serial_number"
	 *    },
	 *    {
	 *      "values": {
	 *        "valid": "true",
	 *        "serial_number": "3311-9736-4988-9744-1749-4183-41",
	 *        "serial_number_type": "chassis"
	 *       },
	 *      "className": "cmdb_serial_number"
	 *    }],
	 * 
	 *     "internal_id": "16777219",
	 *     "sys_object_source_info": {
	 *       "source_feed": "SN Discovery Feed 1",
	 *       "source_name": "ServiceNow",
	 *       "source_native_key": "16777219",
	 *       "source_recency_timestamp": "2019-10-18 08:31:23"
	 *    }},
	 *    {  
	 *    "className": "cmdb_ci_spkg",
	 *    "values": {
	 *      "name": "Windows 2012 R2 Datacenter",
	 *      "key": "Microsoft Windows Server 2012 R2 Datacenter_:::_NULL"
	 *      },
	 * 
	 *   "related": [
	 *     {
	 *       "internal_id": "Microsoft Windows Server 2012 R2 Datacenter_:::_NULL|16777219",
	 *       "values": {
	 *         "name": "Windows 2012 R2 Datacenter-SAMLABVM52"
	 *       },
	 *       "className": "cmdb_software_instance",
	 *       "sys_object_source_info": {
	 *         "source_feed": "SN Discovery Feed 1",
	 *         "source_name": "ServiceNow",
	 *         "source_native_key": "Microsoft Windows Server 2012 R2 Datacenter_:::_NULL|16777219"
	 *   }}]}, 
	 *   {
	 *   "className": "cmdb_ci_app_server_tomcat",
	 *   "values": {
	 *     "running_process_key_parameters": "/opt/OV/nonOV/tomcat/b/temp org.apache.catalina.startup.Bootstrap start",
	 *     "install_directory": "/opt/OV/nonOV/tomcat/b",
	 *     "name": "Tomcat@hpom9:3443",
	 *     "server_port": "8006",
	 *     "sys_class_name": "cmdb_ci_app_server_tomcat"
	 *   },
	 * 
	 *   "internal_id": "tomcat_id"
	 *   }],
	 * 
	 * "relations": [
	 *   {
	 *     "parent_id": "tomcat_id",
	 *     "child_id": "16777219",
	 *     "type": "Runs on::Runs"
	 *   }],
	 * 
	 * "referenceItems": [
	 *   {
	 *     "referenceField": "installed_on",
	 *     "referenced": "16777219",
	 *     "referencedBy": "Microsoft Windows Server 2012 R2 Datacenter_:::_NULL|16777219"
	 *   }]};
	 * 
	 * var jsonUntil = new JSON();
	 * var input = jsonUntil.encode(payload);
	 * var output = sn_cmdb.IdentificationEngine.createOrUpdateCI('ServiceNow', input);
	 * gs.info(output);
	 * 
	 * 
	 * @example
	 * //Identify a dependent CI.
	 * var payload = 
	 *               {items: [ 
	 *                     {className:'cmdb_ci_web_server', 
	 *                      values: {name:'apache linux den 200', 
	 *                               running_process_command: 'xyz',  
	 *                               running_process_key_parameters: 'abc', 
	 *                               tcp_port:'3452'}}, 
	 *                     {className:'cmdb_ci_linux_server', 
	 *                      values: {name:'lnux100', ram:'2048'}}],
	 *                relations:[{parent: 0, child: 1, type: 'Runs on::Runs'}]
	 *               };
	 * 
	 * var jsonUntil = new JSON();
	 * var input = jsonUntil.encode(payload);
	 * var output = sn_cmdb.IdentificationEngine.createOrUpdateCI('ServiceWatch', input);
	 * gs.info(output);
	 * 
	 * 
	 * @example
	 * //Identify an independent CI with lookup-based identification.
	 * var payload = {items: [
	 *            {className:'cmdb_ci_netgear', 
	 *                values: {name:'ny8500-nbxs08',
	 *                         ports:'1200'}, 
	 *                lookup: [{className:'cmdb_serial_number',
	 *                             values:{serial_number:'1234ABCD', serial_number_type:'uuid',absent:'false',valid:'true'}},
	 *                         {className:'cmdb_serial_number',
	 *                             values:{serial_number:'3456EFGH', serial_number_type:'system',absent:'false',valid:'true'}}]}]};
	 * 
	 * var jsonUntil = new JSON();
	 * var input = jsonUntil.encode(payload);
	 * var output = sn_cmdb.IdentificationEngine.createOrUpdateCI('ServiceNow', input);
	 * gs.info(output);
	 * 
	 * 
	 * @param input Required. Input payload. A JSON formatted string of configuration items to add or update.  "input" {   "items": \[Array\],  "referenceItems": \[Array\],  "relations": \[Array\] }
	 * @param input.items Array of objects that define the items to add or update.  "items": \[   {      "className": "String",      "internal\_id": "String",      "lookup": \[Array\],     "related": \[Array\],     "settings": {Object},     "sys\_object\_source\_info": {Object},     "values": {Object}   } \]
	 * @param input.items.className Required. Class/table name, sys\_class\_name, of the configuration item (CI) to create or update.  This value can be any CMDB class/table, such as cmdb\_ci\_linux\_server or cmdb\_ci\_win\_server.
	 * @param input.items.internal_id Unique item identifier for the associated payload.  This can be any value, but must be unique within the payload.
	 * @param input.items.lookup Identifies the top-level item containing the lookup (lookup-based identification). These records are used to identify the configuration item based on a lookup table that has a reference back to cmdb\_ci.  For example:  "lookup": \[   {     "className": "String",     "internal\_id": "String",     "sys\_object\_source\_info": {Object},     "values": {Object}   } \]
	 * @param input.items.lookup.className Required. Class/table name, sys\_class\_name, of the configuration item (CI) to create or update.  This value can be any CMDB class/table, such as cmdb\_serial\_number or cmdb\_ci\_network\_adapter.
	 * @param input.items.lookup.internal_id Unique item identifier for the associated payload.  This can be any value, but must be unique within the payload.
	 * @param input.items.lookup.sys_object_source_info Unique CI identifier for a specific source.  "sys\_object\_source\_info": {    "source\_feed": "String",   "source\_name": "String",     "source\_native\_key": "String",   "source\_recency\_timestamp": "String" }
	 * @param input.items.lookup.sys_object_source_info.source_feed If the source can have multiple feeds, use this field to provide the name of the feed sending this item.  The data source generates this feed name. It can be any string that uniquely identifies the source feed.
	 * @param input.items.lookup.sys_object_source_info.source_name Data source of the CI information. This value must be one of the choice values defined for the discovery\_source field of the Configuration Item \[cmdb\_ci\] table.
	 * @param input.items.lookup.sys_object_source_info.source_native_key Unique key/id for the item from the source.  The data source generates this key. It can be any string that is unique to the item.
	 * @param input.items.lookup.sys_object_source_info.source_recency_timestamp UTC date and time that the item was scanned.  Format: YYYY-MM-DD hh:mm:ss
	 * @param input.items.lookup.values Fields to create or update for this related item as name/value pairs, where the name is the field name. For a reference field, the value must be the referenced sys\_id.  Field names and types depend on the fields selected by the user, such as:  "values": {   "host\_name": "String",   "ip\_address": "String",   "name": "String",   "os\_name": "String",   "sys\_class\_name": "String" }
	 * @param input.items.related Reference to the top-level item that contains the related list. Rules in the Related Entry \[cmdb\_related\_entry\] define what type of records can be in this array. These records are used to add items based on a related table that has a reference to the CI that is being identified.  The related table may or may not extend cmdb\_ci. These records are not used to identify the configuration item.  "related" \[   {     "className": "String",     "internal\_id": "String",     "sys\_object\_source\_info": {Object},     "values": {Object}   } \]
	 * @param input.items.related.className Required. Class/table name, sys\_class\_name, of the configuration item (CI) to create or update.  This value can be any CMDB class/table, such as cmdb\_software\_instance or cmdb\_key\_value.
	 * @param input.items.related.internal_id Unique item identifier for the associated payload.  This can be any value, but must be unique within the payload.
	 * @param input.items.related.sys_object_source_info Unique CI identifier for a specific source.  "sys\_object\_source\_info": {    "source\_feed": "String",   "source\_name": "String",     "source\_native\_key": "String",   "source\_recency\_timestamp": "String" }
	 * @param input.items.related.sys_object_source_info.source_feed If the source can have multiple feeds, use this field to provide the name of the feed sending this item.  The data source generates this feed name. It can be any string that uniquely identifies the source feed.
	 * @param input.items.related.sys_object_source_info.source_name Data source of the CI information. This value must be one of the choice values defined for the discovery\_source field of the Configuration Item \[cmdb\_ci\] table.
	 * @param input.items.related.sys_object_source_info.source_native_key Unique key/id for the item from the source.  The data source generates this key. It can be any string that is unique to the item.
	 * @param input.items.related.sys_object_source_info.source_recency_timestamp UTC date and time that the item was scanned.  Format: YYYY-MM-DD hh:mm:ss
	 * @param input.items.related.values Fields to create or update for this related item as name/value pairs, where the name is the field name. For a reference field, the value must be the referenced sys\_id.  Field names and types depend on the fields selected by the user, such as:  "values": {   "host\_name": "String",   "ip\_address": "String",   "name": "String",   "os\_name": "String",   "sys\_class\_name": "String" }
	 * @param input.items.settings Parameters that define the types of updates that are permitted.  "settings": {   "updateWithoutDowngrade": "String",   "updateWithoutSwitch": "String",  "updateWithoutUpgrade": "String" }
	 * @param input.items.settings.updateWithoutDowngrade Flag that indicates whether update and downgrade are both permitted for this item.  Valid values:  *   true: Update the item but downgrade is not permitted. *   false: Both item update and downgrade are permitted.  Default: false
	 * @param input.items.settings.updateWithoutUpgrade Flag that indicates whether update and upgrade are both permitted for this item.  Valid values:  *   true: Update the item but upgrade is not permitted. *   false: Both item update and upgrade are permitted.  Default: false
	 * @param input.items.settings.updateWithoutSwitch Flag that indicates whether the item can be updated and the class switched.  Valid values:  *   true: Update the item but class switching is not permitted. *   false: Both item update and class switching are permitted.  Default: false
	 * @param input.items.sys_object_source_info Unique CI identifier for a specific source.  "sys\_object\_source\_info": {    "source\_feed": "String",   "source\_name": "String",     "source\_native\_key": "String",   "source\_recency\_timestamp": "String" }
	 * @param input.items.sys_object_source_info.source_feed If the source can have multiple feeds, use this field to provide the name of the feed sending this item.  The data source generates this feed name. It can be any string that uniquely identifies the source feed.
	 * @param input.items.sys_object_source_info.source_name Data source of the CI information. This value must be one of the choice values defined for the discovery\_source field of the Configuration Item \[cmdb\_ci\] table.
	 * @param input.items.sys_object_source_info.source_native_key Unique key/id for the item from the source.  The data source generates this key. It can be any string that is unique to the item.
	 * @param input.items.sys_object_source_info.source_recency_timestamp UTC date and time that the item was scanned.  Format: YYYY-MM-DD hh:mm:ss
	 * @param input.items.values Fields to create or update for this related item as name/value pairs, where the name is the field name. For a reference field, the value must be the referenced sys\_id.  Field names and types depend on the fields selected by the user, such as:  "values": {   "host\_name": "String",   "ip\_address": "String",   "name": "String",   "os\_name": "String",   "sys\_class\_name": "String" }
	 * @param input.referenceItems Array of objects that define references between items in the input payload.  "referenceItems": \[   {      "referenced": "String",      "referencedBy": "String",      "referenceField": "String"    } \]
	 * @param input.referenceItems.referenced The internal\_id defined for the item being referenced by another item.
	 * @param input.referenceItems.referencedBy The internal\_id defined for the item that references another item.
	 * @param input.referenceItems.referenceField Name of the reference field in the class/table for the referencedBy item.
	 * @param input.relations Array of objects that specify relationships between items in the input payload.  A node in this array can use either of two formats.  *   The node can define a relationship between two top-level items (only) using parent and child name-value pairs, with values representing item indexes from the payload items array. *   The node can define a relationship between any two items, including top-level, related, or lookup items, using parent\_id and child\_id key/value pairs, with values representing internal\_id values defined for those items.  "relations": \[   {     "child": Number,     "parent": Number,     "type": "String"   } \]  "relations": \[   {     "child\_id": "String",     "parent\_id": "String",     "type": "String"   } \]
	 * @param input.relations.child Integer index of the CI object in the items array that represents the child in the relationship.
	 * @param input.relations.child_id The internal\_id of the child item in the relation.
	 * @param input.relations.parent Integer index of the parent item in the items array.
	 * @param input.relations.parent_id The internal\_id of the parent item in the relation (item.related or item.lookup item).
	 * @param input.relations.type The type of relationship that exists between the parent and child items. This must be a name field value from the CI Relationship Type \[cmdb\_rel\_type\] table.
	 * @param source Identifies the data source of the CI information. This value must be one of the choice values defined for the discovery\_source field of the cmdb\_ci table.
	 * 
	 * @returns string The sys\_id of the dependent relationship CI.  Data type: String
	 * 
	 */
	createOrUpdateCI(source: string, input: any) : string
	/**
	 * @description Insert or update configuration items and non-Configuration Management Database (CMDB) configuration items (classes not extending from cmdb\_ci) in the CMDB based on identification and reconciliation rules. Use this API instead of updating the CMDB directly.
	 * In addition to providing the functionality of the createOrUpdateCI() method, this method also supports:
	 * 
	 * *   Handling partial payloads
	 * *   Handling partial commits
	 * *   Removing duplicate items within a payload
	 * *   Generating output summaries
	 * 
	 * For additional information on IRE and more detailed explanations of the data used by this method, see [Identification and Reconciliation (IRE)](https://docs.servicenow.com/bundle/paris-servicenow-platform/page/product/configuration-management/concept/ire.html).
	 * 
	 * @example
	 * //This example shows how to import multiple CI entries.
	 * var payload = {
	 * "items": [
	 * {
	 *  "className": "cmdb_ci_win_server", 
	 *  "values": {
	 *    "chassis_type": "Desktop",
	 *    "os": "Windows 2012 R2 Datacenter",
	 *    "name": "Windows2012Server1",
	 *    "serial_number": "0000-0011-1690-8730-8636-5722-52",
	 *    "cpu_count": "1"
	 *   },
	 *   "lookup": [
	 *   {
	 *      "values": {
	 *        "valid": "true",
	 *        "serial_number": "0000-0011-1690-8730-8636-5722-52",
	 *        "serial_number_type": "bios"
	 *       },
	 *      "className": "cmdb_serial_number"
	 *    },
	 *    {
	 *      "values": {
	 *        "valid": "true",
	 *        "serial_number": "3311-9736-4988-9744-1749-4183-41",
	 *        "serial_number_type": "chassis"
	 *       },
	 *      "className": "cmdb_serial_number"
	 *    }],
	 * 
	 *     "internal_id": "16777219",
	 *     "sys_object_source_info": {
	 *       "source_feed": "SN Discovery Feed 1",
	 *       "source_name": "ServiceNow",
	 *       "source_native_key": "16777219",
	 *       "source_recency_timestamp": "2019-10-18 08:31:23"
	 *    }},
	 *    {  
	 *    "className": "cmdb_ci_spkg",
	 *    "values": {
	 *      "name": "Windows 2012 R2 Datacenter",
	 *      "key": "Microsoft Windows Server 2012 R2 Datacenter_:::_NULL"
	 *      },
	 * 
	 *   "related": [
	 *     {
	 *       "internal_id": "Microsoft Windows Server 2012 R2 Datacenter_:::_NULL|16777219",
	 *       "values": {
	 *         "name": "Windows 2012 R2 Datacenter-SAMLABVM52"
	 *       },
	 *       "className": "cmdb_software_instance",
	 *       "sys_object_source_info": {
	 *         "source_feed": "SN Discovery Feed 1",
	 *         "source_name": "ServiceNow",
	 *         "source_native_key": "Microsoft Windows Server 2012 R2 Datacenter_:::_NULL|16777219"
	 *   }}] 
	 *   "settings" : {
	 *         "updateWithoutDowngrade" : "true",
	 *         "updateWithoutUpgrade" : "true",
	 *         "updateWithoutSwitch" : "true"
	 *       }}, 
	 *   {
	 *   "className": "cmdb_ci_app_server_tomcat",
	 *   "values": {
	 *     "running_process_key_parameters": "/opt/OV/nonOV/tomcat/b/temp org.apache.catalina.startup.Bootstrap start",
	 *     "install_directory": "/opt/OV/nonOV/tomcat/b",
	 *     "name": "Tomcat@hpom9:3443",
	 *     "server_port": "8006",
	 *     "sys_class_name": "cmdb_ci_app_server_tomcat"
	 *   },
	 * 
	 *   "internal_id": "tomcat_id"
	 *   }],
	 * 
	 * "relations": [
	 *   {
	 *     "parent_id": "tomcat_id",
	 *     "child_id": "16777219",
	 *     "type": "Runs on::Runs"
	 *   }],
	 * 
	 * "referenceItems": [
	 *   {
	 *     "referenceField": "installed_on",
	 *     "referenced": "16777219",
	 *     "referencedBy": "Microsoft Windows Server 2012 R2 Datacenter_:::_NULL|16777219"
	 *   }]};
	 * 
	 * var input = new JSON().encode(payload);
	 * var output = sn_cmdb.IdentificationEngine.createOrUpdateCIEnhanced('ServiceNow', input, {});
	 * 
	 * @param input Required. Input payload. A JSON formatted string of configuration items to add or update.  "input" {   "items": \[Array\],  "referenceItems": \[Array\],  "relations": \[Array\] }
	 * @param input.items Array of objects that define the items to add or update.  "items": \[   {      "className": "String",      "internal\_id": "String",      "lookup": \[Array\],     "related": \[Array\],     "settings": {Object},     "sys\_object\_source\_info": {Object},     "values": {Object}   } \]
	 * @param input.items.className Required. Class/table name, sys\_class\_name, of the configuration item (CI) to create or update.  This value can be any CMDB class/table, such as cmdb\_ci\_linux\_server or cmdb\_ci\_win\_server.
	 * @param input.items.internal_id Unique item identifier for the associated payload.  This can be any value, but must be unique within the payload.
	 * @param input.items.lookup Identifies the top-level item containing the lookup (lookup-based identification). These records are used to identify the configuration item based on a lookup table that has a reference back to cmdb\_ci.  For example:  "lookup": \[   {     "className": "String",     "internal\_id": "String",     "sys\_object\_source\_info": {Object},     "values": {Object}   } \]
	 * @param input.items.lookup.className Required. Class/table name, sys\_class\_name, of the configuration item (CI) to create or update.  This value can be any CMDB class/table, such as cmdb\_serial\_number or cmdb\_ci\_network\_adapter.
	 * @param input.items.lookup.internal_id Unique lookup item identifier for the associated payload.  This can be any value, but must be unique within the payload.
	 * @param input.items.lookup.sys_object_source_info Defines a unique CI identifier for a specific data source. Different sources may have different name-value pairs for the same CI.  "sys\_object\_source\_info": {    "source\_feed": "String",   "source\_name": "String",     "source\_native\_key": "String",   "source\_recency\_timestamp": "String" }
	 * @param input.items.lookup.sys_object_source_info.source_feed If the source can have multiple feeds, use this field to provide the name of the feed sending this item.  The data source generates this feed name. It can be any string that uniquely identifies the source feed.
	 * @param input.items.lookup.sys_object_source_info.source_name Data source of the CI information. This value must be one of the choice values defined for the discovery\_source field of the Configuration Item \[cmdb\_ci\] table.
	 * @param input.items.lookup.sys_object_source_info.source_native_key Unique key-id for the item from the source.  The data source generates this key. It can be any string that is unique to the item.
	 * @param input.items.lookup.sys_object_source_info.source_recency_timestamp UTC date/time that the item was scanned.  Format: YYYY-MM-DD hh:mm:ss
	 * @param input.items.lookup.values Field information for the CI as name-value pairs, where the name is the field name. When updating reference fields, the value must be the referenced sys\_id.  Field names and types depend on the fields selected by the user, such as:  "values": {   "serial\_number": "String",   "serial\_number\_type": "String",   "valid": "String",   "ip\_address": "String",   "mac\_address": "String" }
	 * @param input.items.related Reference to the top-level item that contains the related list. Rules in the Related Entry \[cmdb\_related\_entry\] define what type of records can be in this array. These records are used to add items based on a related table that has a reference to the CI that is being identified.  The related table may or may not extend cmdb\_ci. These records are not used to identify the configuration item.  "related" \[   {     "className": "String",     "internal\_id": "String",     "sys\_object\_source\_info": {Object},     "values": {Object}   } \]
	 * @param input.items.related.className Required. Class/table name, sys\_class\_name, of the configuration item (CI) to create or update.  This value can be any CMDB class/table, such as cmdb\_software\_instance or cmdb\_key\_value.
	 * @param input.items.related.internal_id Unique identifier for this related item in this payload. Can be any value, but must be unique within the payload.
	 * @param input.items.related.sys_object_source_info Object that makes up a unique CI identifier for a specified data source. Different sources may have different name-value pairs for the same CI.  "sys\_object\_source\_info": {    "source\_feed": "String",   "source\_name": "String",     "source\_native\_key": "String",   "source\_recency\_timestamp": "String" }
	 * @param input.items.related.sys_object_source_info.source_feed If the source can have multiple feeds, use this field to provide the name of the feed sending this item.  The data source generates this feed name. It can be any string that uniquely identifies the source feed.
	 * @param input.items.related.sys_object_source_info.source_name Identifies the data source of the CI information. This value must be one of the choice values defined for the discovery\_source field of the Configuration Item \[cmdb\_ci\] table.
	 * @param input.items.related.sys_object_source_info.source_native_key Unique key/id from the source for the related item.  The data source generates this key. It can be any string that is unique to the item.
	 * @param input.items.related.sys_object_source_info.source_recency_timestamp UTC date and time that the item was scanned.  Format: YYYY-MM-DD hh:mm:ss
	 * @param input.items.related.values Fields to create or update for this related item as name/value pairs, where the name is the field name. For a reference field, the value must be the referenced sys\_id.  Field names and types depend on the fields selected by the user, such as:  "values": {   "host\_name": "String",   "ip\_address": "String",   "name": "String",   "os\_name": "String",   "sys\_class\_name": "String" }
	 * @param input.items.settings Parameters that define the types of updates that are permitted.  "settings": {    "updateWithoutDowngrade": "String",    "updateWithoutSwitch": "String",   "updateWithoutUpgrade": "String" }
	 * @param input.items.settings.updateWithoutDowngrade Flag that indicates whether update and downgrade are both permitted for this item.  Valid values:  *   true: Update the item but downgrade is not permitted. *   false: Both item update and downgrade are permitted.  Default: false
	 * @param input.items.settings.updateWithoutSwitch Flag that indicates whether the item can be updated and the class switched.  Valid values:  *   true: Update the item but class switching is not permitted. *   false: Both item update and class switching are permitted.  Default: false
	 * @param input.items.settings.updateWithoutUpgrade Flag that indicates whether update and upgrade are both permitted for this item.  Valid values:  *   true: Update the item but upgrade is not permitted. *   false: Both item update and upgrade are permitted.  Default: false
	 * @param input.items.sys_object_source_info Unique CI identifier for a specific source.  "sys\_object\_source\_info": {    "source\_feed": "String",   "source\_name": "String",     "source\_native\_key": "String",   "source\_recency\_timestamp": "String" }
	 * @param input.items.sys_object_source_info.source_feed If the source can have multiple feeds, use this field to provide the name of the feed sending this item.  The data source generates this feed name. It can be any string that uniquely identifies the source feed.
	 * @param input.items.sys_object_source_info.source_name Data source of the CI information. This value must be one of the choice values defined for the discovery\_source field of the Configuration Item \[cmdb\_ci\] table.
	 * @param input.items.sys_object_source_info.source_native_key Unique key/id for the item from the source.  The data source generates this key. It can be any string that is unique to the item.
	 * @param input.items.sys_object_source_info.source_recency_timestamp UTC date and time that the item was scanned.  Format: YYYY-MM-DD hh:mm:ss
	 * @param input.items.values Fields to create or update for this related item as name/value pairs, where the name is the field name. For a reference field, the value must be the referenced sys\_id.  Field names and types depend on the fields selected by the user, such as:  "values": {   "host\_name": "String",   "ip\_address": "String",   "name": "String",   "os\_name": "String",   "sys\_class\_name": "String" }
	 * @param input.referenceItems Array of objects that define references between items in the input payload.  "referenceItems": \[   {      "referenced": "String",      "referencedBy": "String",      "referenceField": "String"    } \]
	 * @param input.referenceItems.referenced The internal\_id defined for the item being referenced by another item.
	 * @param input.referenceItems.referencedBy The internal\_id defined for the item that references another item.
	 * @param input.referenceItems.referenceField Name of the reference field in the class/table for the referencedBy item.
	 * @param input.relations Array of objects that specify relationships between items in the input payload.  A node in this array can use either of two formats.  *   The node can define a relationship between two top-level items (only) using parent and child name-value pairs, with values representing item indexes from the payload items array. *   The node can define a relationship between any two items, including top-level, related, or lookup items, using parent\_id and child\_id key/value pairs, with values representing internal\_id values defined for those items.  "relations": \[   {     "child": Number,     "parent": Number,     "type": "String"   } \]  "relations": \[   {     "child\_id": "String",     "parent\_id": "String",     "type": "String"   } \]
	 * @param input.relations.child Integer index of the CI object in the items array that represents the child in the relationship.
	 * @param input.relations.child_id The internal\_id of the child item in the relation.
	 * @param input.relations.parent Integer index of the parent item in the items array.
	 * @param input.relations.parent_id The internal\_id of the parent item in the relation (item.related or item.lookup item).
	 * @param input.relations.type The type of relationship that exists between the parent and child items. This must be a name field value from the CI Relationship Type \[cmdb\_rel\_type\] table.
	 * @param options Optional, but {} or null must be passed-in. Options to enable or disable features.  Note: By default or if partial\_payloads is set to true, both partial\_commits and deduplicate\_payloads are enabled, even if they are set to false, as those features are essential for partial payloads functionality.  "options": {   "deduplicate\_payloads": "Boolean",  "generate\_summary": "Boolean",   "partial\_commits": "Boolean",   "partial\_payloads": "Boolean" }
	 * @param options.deduplicate_payloads Flag that indicates whether duplicate items are merged or considered errors.  Valid values:  *   true: Merge duplicate items. *   false: Consider duplicate items as errors.  Default: true
	 * @param options.generate_summary Flag that indicates whether the returned results contain summary information. For the details of the returned summary information, see <String>.summary in the return results table.  Valid values:  *   true: Include summary information. *   false: Do not include summary information.  Default: false
	 * @param options.partial_commits Flag that indicates whether partial commit support is enabled. For additional information on partial commits, see [Enhanced IRE features](https://docs.servicenow.com/bundle/paris-servicenow-platform/page/product/configuration-management/concept/ire.html).  Valid values:  *   true: Partial commit enabled. *   false: Partial commit disabled.  Default: true
	 * @param options.partial_payloads Flag that indicates whether partial payload support is enabled. For additional information on partial payloads, see [Enhanced IRE features](https://docs.servicenow.com/bundle/paris-servicenow-platform/page/product/configuration-management/concept/ire.html) and [Create an IRE data source rule](https://docs.servicenow.com/bundle/paris-servicenow-platform/page/product/configuration-management/task/create-ire-data-source-rule.html).  Valid values:  *   true: Partial payload enabled. *   false: Partial payload disabled.  Default: true
	 * @param source Data source of the CI information. This value must be one of the choice values defined for the discovery\_source field of the Configuration Item \[cmdb\_ci\] table.
	 * 
	 * @returns number Number of items that generated a warning when processed.  Data type: Number
	 * 
	 */
	createOrUpdateCI(source: string, input: any) : number
	/**
	 * @description Run an identification audit against the specified CI to detect duplicates.
	 * If duplicates are found, duplication tasks are created. Only use this method on CI types with independent identification rules.
	 * 
	 * @param gr The CI on which to run the audit to detect duplicates. The CI must have independent identification rules.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	runIdentificationAudit(gr: GlideRecord) : void
	}
declare namespace sn_cmdb {
	}
/**
	 * @description The CMDBGroupAPI provides methods for performing actions on Configuration Management Database (CMDB) groups.
	 * The CMDBGroupAPI is a scoped static class. To use the class you must include the namespace identifier sn\_cmdbgroup before the CMDBGroupAPI object. For example:	
 * 	
 *     var response = sn_cmdbgroup.CMDBGroupAPI.getManualCIList(groupSysId, false);	
 * 	
 *   	
 *   	
 * To access this API you must have the itil or asset role.
	 * 
	 */
	declare class CMDBGroupAPI {
	/**
	 * @description Returns the CMDB group's manual CI list.
	 * @example
	 * //
	 * // Script example for requireCompleteSet being false:
	 *     var getManualCIList = function(groupSysId) {
	 *     var parser = new JSONParser();
	 *     var response = sn_cmdbgroup.CMDBGroupAPI.getManualCIList(groupSysId, false);
	 *     var parsed = parser.parse(response);
	 *     if (parsed.result) {
	 *         gs.info("succeed to retrieve ci list: " + parsed.idList);
	 *     } else {
	 *         gs.info("fail to retrieve list, errors: " + JSON.stringify(parsed.errors));
	 *     }
	 * }
	 * // create a group in cmdb_group, and add CIs to this group in Edit Manual CI form
	 * var groupExists = "d0d2d25113152200eef2dd828144b0e4";
	 * // use a non-exist group
	 * var groupDoesNotExists = "d0d2d25113152200eef2dd828144b0e4111";
	 * getManualCIList(groupExists);
	 * getManualCIList(groupDoesNotExists);
	 *  
	 * 
	 * @example
	 * //
	 * // Script example for requireCompleteSet being true
	 *     var getManualCIList = function(groupSysId) {
	 *     var parser = new JSONParser();
	 *     var response = sn_cmdbgroup.CMDBGroupAPI.getManualCIList(groupSysId, true);
	 *     var parsed = parser.parse(response);
	 *     if (parsed.result) {
	 *         gs.info("succeed to retrieve ci list: " + parsed.idList);
	 *     } else {
	 *         gs.info("fail to retrieve list, errors: " + JSON.stringify(parsed.errors));
	 *     }
	 * }
	 * // create a group in cmdb_group, and add CIs to this group in Edit Manual CI form
	 * var groupExists = "d0d2d25113152200eef2dd828144b0e4";
	 * getManualCIList(groupExists);
	 * 
	 * @param groupId The sysId of the CMDB group.
	 * @param requireCompleteSet When true, returns an error string if any CIs are filtered out by ACL restrictions.
	 * 
	 * @returns string A JSON formated string in the format      { 'result':false,      'errors':[ {'message':'Group does not exist',                 'error':'GROUP_SYS_ID_IS_NOT_FOUND'},      { } // another error if it exists       ],      'partialCIListDueToACLFlag':false,     'idList':['sys_id_1', 'sys_id2'] }  Where  *   result - a boolean flag. When true the method was successful. *   errors - a list of errors with a message and error code. *   partialCIListDueToACLFlag -  a Boolean flag. When true, the idList is incomplete due to an ACL restriction. When false, the idList is complete. *   idList - an array of cmdb\_ci sys\_ids  When not successful, returns one of the errors GROUP\_SYS\_ID\_IS\_NOT\_FOUND, GROUP\_SYS\_ID\_IS\_EMPTY, FAIL\_TO\_INSERT\_GROUP\_CI\_PAIR, FAIL\_TO\_INSERT\_GROUP\_QUERY\_ID\_PAIR, CI\_CAN\_NOT\_FOUND, SAVED\_QUERY\_ID\_NOT\_FOUND, ERROR\_DURING\_QUERY\_BUILDER\_PROCESS\_QUERY, TIMEOUT\_DURING\_QUERY\_BUILDER\_PROCESS\_QUERY, NOT\_COMPLETE\_DURING\_QUERY\_BUILDER\_PROCESS\_QUERY, MAX\_LIMIT\_DURING\_QUERY\_BUILDER\_PROCESS\_QUERY, GROUP\_API\_TIMEOUT, EXCEPTION\_FROM\_EXECUTE\_QUERY, SOME\_CI\_NOT\_VISIBLE\_DUE\_TO\_SECURITY\_CONSTRAINT
	 * 
	 */
	getManualCIList(groupId: string,requireCompleteSet: boolean) : string
	/**
	 * @description Returns the query builder's query IDs for the specified CMDB group.
	 * @example
	 * //
	 * // Script example:
	 * var getSavedQueryIdList = function(groupSysId) {
	 *     var parser = new JSONParser();
	 *     var response = sn_cmdbgroup.CMDBGroupAPI.getSavedQueryIdList(groupSysId, false);
	 *     var parsed = parser.parse(response);
	 *     if (parsed.result) {
	 *         gs.info("succeed to retrieve saved query id list: " + parsed.idList);
	 *     } else {
	 *         gs.info("fail to retrieve list, errors: " + JSON.stringify(parsed.errors));
	 *     }
	 * }
	 * var groupExists = "d0d2d25113152200eef2dd828144b0e4";
	 * var groupDoesNotExists = "d0d2d25113152200eef2dd828144b0e4111";
	 * getSavedQueryIdList(groupExists);
	 * getSavedQueryIdList(groupDoesNotExists);
	 * 
	 * @param groupId The sysId of the CMDB group.
	 * @param requireCompleteSet When true, returns an empty string if any CIs are filtered out by ACL restrictions.
	 * 
	 * @returns string A JSON formated string in the format      { 'result':false,      'errors':[ {'message':'Group does not exist',                 'error':'GROUP_SYS_ID_IS_NOT_FOUND'},      { } // another error if it exists       ],      'partialCIListDueToACLFlag':false,     'idList':['sys_id_1', 'sys_id2'] }  Where  *   result - a boolean flag. When true the method was successful. *   errors - a list of errors with a message and error code. *   partialCIListDueToACLFlag -  a Boolean flag. When true, the idList is incomplete due to an ACL restriction. When false, the idList is complete. *   idList - an array of cmdb\_ci sys\_ids  When not successful, returns one of the errors GROUP\_SYS\_ID\_IS\_NOT\_FOUND, GROUP\_SYS\_ID\_IS\_EMPTY, FAIL\_TO\_INSERT\_GROUP\_CI\_PAIR, FAIL\_TO\_INSERT\_GROUP\_QUERY\_ID\_PAIR, CI\_CAN\_NOT\_FOUND, SAVED\_QUERY\_ID\_NOT\_FOUND, ERROR\_DURING\_QUERY\_BUILDER\_PROCESS\_QUERY, TIMEOUT\_DURING\_QUERY\_BUILDER\_PROCESS\_QUERY, NOT\_COMPLETE\_DURING\_QUERY\_BUILDER\_PROCESS\_QUERY, MAX\_LIMIT\_DURING\_QUERY\_BUILDER\_PROCESS\_QUERY, GROUP\_API\_TIMEOUT, EXCEPTION\_FROM\_EXECUTE\_QUERY, SOME\_CI\_NOT\_VISIBLE\_DUE\_TO\_SECURITY\_CONSTRAINT
	 * 
	 */
	getSavedQueryIdList(groupId: string,requireCompleteSet: boolean) : string
	/**
	 * @description Returns all configuration items (CIs) returned from all saved query builders' query IDs for the specified group.
	 * @example
	 * //
	 * // Script example:
	 * var getAllCIFromQueryBuilderFunc = function(groupSysId) {
	 *   var parser = new JSONParser();
	 *   var response = sn_cmdbgroup.CMDBGroupAPI.getAllCIFromQueryBuilder(groupSysId, false);
	 *   var parsed = parser.parse(response);
	 *   if (parsed.result) {
	 *     gs.info("succeed to retrieve ci list: " + parsed.idList);
	 *   } else {
	 *     gs.info("fail to retrieve list, errors: " + JSON.stringify(parsed.errors));
	 *   }
	 * }
	 * var groupExists = "d0d2d25113152200eef2dd828144b0e4";
	 * var groupContainsInvalidSavedQuery = "e685a2c3d7012200de92a5f75e610387";
	 * getAllCIFromQueryBuilderFunc(groupExists);
	 * getAllCIFromQueryBuilderFunc(groupContainsInvalidSavedQuery);
	 * 
	 * @param groupId Sys\_id of the Configuration Management Database (CMDB) group.
	 * @param requireCompleteSet Optional, but must be passed if requireAllQueryNodesCis is passed.  Flag that indicates whether an empty string is returned if any CIs are filtered out by access control list (ACL) restrictions.  Valid values:  *   true: Return empty string. *   false: Don't return value.  Default: false
	 * @param requireAllQueryNodesCis Optional. Flag that indicates whether to return CIs from all CMDB classes of the query.  Valid values:  *   true: Return CIs from all columns. *   false: Only return CIs from the starting node of the query builder query.  Default: false
	 * 
	 * @returns result Flag that indicates whether the method completed successfully.  Possible values:  *   true: Success *   false: Error
	 * 
	 */
	getAllCIFromQueryBuilder(groupId: string,requireCompleteSet: boolean,requireAllQueryNodesCis: boolean) : result
	/**
	 * @description Returns all configuration items (CIs) for the specified group. The results include all manual CIs and the list of CIs from the query builder's saved query.
	 * @example
	 * //
	 * // Script example:
	 * var getAllCIFunc = function(groupSysId) {
	 *   var parser = new JSONParser();
	 *   var response = sn_cmdbgroup.CMDBGroupAPI.getAllCI(groupSysId, false);
	 *   var parsed = parser.parse(response);
	 *   if (parsed.result) {
	 *     gs.info("succeed to retrieve ci list: " + parsed.idList);
	 *   } else {
	 *     gs.info("fail to retrieve list, errors: " + JSON.stringify(parsed.errors));
	 *   }
	 * }
	 * var groupExists = "d0d2d25113152200eef2dd828144b0e4";
	 * var groupContainsInvalidSavedQuery = "e685a2c3d7012200de92a5f75e610387";
	 * getAllCIFunc(groupExists);
	 * getAllCIFunc(groupContainsInvalidSavedQuery);
	 * 
	 * @param groupId Sys\_id of the Configuration Management Database (CMDB) group.
	 * @param requireCompleteSet Optional, but must be passed if requireAllQueryNodesCis is passed.  Flag that indicates whether an empty string is returned if any CIs are filtered out by access control list (ACL) restrictions.  Valid values:  *   true: Return empty string. *   false: Don't return value.  Default: false
	 * @param requireAllQueryNodesCis Optional. Flag that indicates whether to return CIs from all CMDB classes of the query.  Valid values:  *   true: Return CIs from all columns. *   false: Only return CIs from the starting node of the query builder query.  Default: false
	 * 
	 * @returns result Flag that indicates whether the method completed successfully.  Possible values:  *   true: Success *   false: Error
	 * 
	 */
	getAllCI(groupId: string,requireCompleteSet: boolean,requireAllQueryNodesCis: boolean) : result
	/**
	 * @description Sets the manual CI list for the specified group. The existing manual CI list is overwritten. CI sysIds not found in the cmdb\_ci table are ignored.
	 * @example
	 * //
	 * // Script example:
	 * var setManualCIListFunc = function(groupSysId, manualCIList) {
	 *     var parser = new JSONParser();
	 *     var response = sn_cmdbgroup.CMDBGroupAPI.setManualCIList(groupSysId, manualCIList);
	 *     var parsed = parser.parse(response);
	 *     if (parsed.result) {
	 *         gs.info("succeed to set manual ci list");
	 *     } else {
	 *         gs.info("fail to set manual ci list, errors: " + JSON.stringify(parsed.errors));
	 *     }
	 * }
	 * var group = "d0d2d25113152200eef2dd828144b0e4";
	 * var groupDoesNotExist = "1234";
	 * var manualCIList = "b4fd7c8437201000deeabfc8bcbe5dc1, affd3c8437201000deeabfc8bcbe5dc3";
	 * setManualCIListFunc(group, manualCIList);
	 * setManualCIListFunc(groupDoesNotExist, manualCIList);
	 * 
	 * @param groupId The sysId of the CMDB group.
	 * @param ciSysIds Comma separated list of CI sysIds.
	 * 
	 * @returns string A JSON formated string in the format      { 'result':false,      'errors':[ {'message':'Group does not exist',                 'error':'GROUP_SYS_ID_IS_NOT_FOUND'},      { } // another error if it exists       ],      'partialCIListDueToACLFlag':false,     'idList':['sys_id_1', 'sys_id2'] }  Where  *   result - a boolean flag. When true the method was successful. *   errors - a list of errors with a message and error code. *   partialCIListDueToACLFlag -  a Boolean flag. When true, the idList is incomplete due to an ACL restriction. When false, the idList is complete. *   idList - an array of cmdb\_ci sys\_ids  When not successful, returns one of the errors GROUP\_SYS\_ID\_IS\_NOT\_FOUND, GROUP\_SYS\_ID\_IS\_EMPTY, FAIL\_TO\_INSERT\_GROUP\_CI\_PAIR, FAIL\_TO\_INSERT\_GROUP\_QUERY\_ID\_PAIR, CI\_CAN\_NOT\_FOUND, SAVED\_QUERY\_ID\_NOT\_FOUND, ERROR\_DURING\_QUERY\_BUILDER\_PROCESS\_QUERY, TIMEOUT\_DURING\_QUERY\_BUILDER\_PROCESS\_QUERY, NOT\_COMPLETE\_DURING\_QUERY\_BUILDER\_PROCESS\_QUERY, MAX\_LIMIT\_DURING\_QUERY\_BUILDER\_PROCESS\_QUERY, GROUP\_API\_TIMEOUT, EXCEPTION\_FROM\_EXECUTE\_QUERY, SOME\_CI\_NOT\_VISIBLE\_DUE\_TO\_SECURITY\_CONSTRAINT
	 * 
	 */
	setManualCIList(groupId: string,ciSysIds: string) : string
	/**
	 * @description Sets the saved query ID list for the specified group. The existing query ID list is overwritten. Query sysIds not found in the qb\_saved\_query table are ignored.
	 * @example
	 * //
	 * // Script example:
	 * var setSavedQueryIdListFunc = function(groupSysId, queryIdList) {
	 *     var parser = new JSONParser();
	 *     var response = sn_cmdbgroup.CMDBGroupAPI.setSavedQueryIdList(groupSysId, queryIdList);
	 *     var parsed = parser.parse(response);
	 *     if (parsed.result) {
	 *         gs.info("succeed to set saved query id list");
	 *     } else {
	 *         gs.info("fail to set saved query id list, errors: " + JSON.stringify(parsed.errors));
	 *     }
	 * }
	 * var group = "d0d2d25113152200eef2dd828144b0e4";
	 * var savedQueryBuilderIdList = "394585fed7812200de92a5f75e6103e8";
	 * var savedQueryBuilderIdNotExistList = "b4fd7c8437201000deeabfc8bcbe5dc1,
	 *    affd3c8437201000deeabfc8bcbe5dc3";
	 *  
	 * setSavedQueryIdListFunc(group, savedQueryBuilderIdList);
	 * setSavedQueryIdListFunc(group, savedQueryBuilderIdNotExistList);
	 * 
	 * 
	 * @param groupId The sysId of the CMDB group.
	 * @param queryIds Comma separated list of saved query sysIds.
	 * 
	 * @returns string A JSON formated string in the format      { 'result':false,      'errors':[ {'message':'Group does not exist',                 'error':'GROUP_SYS_ID_IS_NOT_FOUND'},      { } // another error if it exists       ],      'partialCIListDueToACLFlag':false,     'idList':['sys_id_1', 'sys_id2'] }  Where  *   result - a boolean flag. When true the method was successful. *   errors - a list of errors with a message and error code. *   partialCIListDueToACLFlag -  a Boolean flag. When true, the idList is incomplete due to an ACL restriction. When false, the idList is complete. *   idList - an array of cmdb\_ci sys\_ids  When not successful, returns one of the errors GROUP\_SYS\_ID\_IS\_NOT\_FOUND, GROUP\_SYS\_ID\_IS\_EMPTY, FAIL\_TO\_INSERT\_GROUP\_CI\_PAIR, FAIL\_TO\_INSERT\_GROUP\_QUERY\_ID\_PAIR, CI\_CAN\_NOT\_FOUND, SAVED\_QUERY\_ID\_NOT\_FOUND, ERROR\_DURING\_QUERY\_BUILDER\_PROCESS\_QUERY, TIMEOUT\_DURING\_QUERY\_BUILDER\_PROCESS\_QUERY, NOT\_COMPLETE\_DURING\_QUERY\_BUILDER\_PROCESS\_QUERY, MAX\_LIMIT\_DURING\_QUERY\_BUILDER\_PROCESS\_QUERY, GROUP\_API\_TIMEOUT, EXCEPTION\_FROM\_EXECUTE\_QUERY, SOME\_CI\_NOT\_VISIBLE\_DUE\_TO\_SECURITY\_CONSTRAINT
	 * 
	 */
	setSavedQueryIdList(groupId: string,queryIds: string) : string
	}
declare namespace sn_cmdbgroup {
	}
/**
	 * @description The Conversation API enables you to create or modify Connect conversations.
	 * To use this class in a scoped application, use the sn\_connect namespace identifier. The Connect Scriptable APIs plugin (ID: com.glide.connect.scriptable) should be enabled to access the Conversation API.
	 * 
	 */
	declare class Conversation {
	/**
	 * @description Get an existing Connect conversation by sys\_id.
	 * @example
	 * //
	 * var conversation = sn_connect.Conversation.get("27b9844c1385030034bb58a12244b037");
	 * 
	 * @param sysID The sys\_id of the conversation record.
	 * 
	 * @returns Object Conversation object
	 * 
	 */
	get(sysID: string) : Object
	/**
	 * @description Create a Connect conversation.
	 * @example
	 * //
	 * var conversation = sn_connect.Conversation.create({
	 *     name: "Hello world",
	 *     type: "connect"
	 * });
	 * 
	 * @param name Create a conversation with a specific name.
	 * @param type Include a specific conversation type. The type is determined by the type choice list. The base system includes the following type options:  *   connect *   support *   group *   peer *   qanda *   team
	 * 
	 * @returns Object Scriptable Conversation
	 * 
	 */
	create(name: string,type: string) : Object
	/**
	 * @description Add a user to a conversation.
	 * @example
	 * //
	 * var conversation = sn_connect.Conversation.get("7caf49111309030034bb58a12244b06c");
	 * conversation.addSubscriber("a8f98bb0eb32010045e1a5115206fe3a");
	 * 
	 * @param sysID The sys\_ID of the user you want to add to a conversation.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	addSubscriber(sysID: string) : void
	/**
	 * @description Remove a user from a conversation.
	 * @example
	 * //
	 * var conversation = sn_connect.Conversation.get("7caf49111309030034bb58a12244b06c");
	 * conversation.removeSubscriber("a8f98bb0eb32010045e1a5115206fe3a");
	 * 
	 * @param SysID The sys\_id of the user you want to remove from a conversation.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	removeSubscriber(SysID: string) : void
	/**
	 * @description Send a message to a conversation.
	 * @example
	 * //
	 * var conversation = sn_connect.Conversation.get("2064fa3919010300964f5270e9840fbb");
	 * conversation.sendMessage({body: "Hello world", field: "work_notes"});
	 * 
	 * @param Body The main text of the message.
	 * @param Field The field you want the message to appear as. Only use this option if adding a message to a record conversation. Choose from work\_notes, comments, or system. Using the field system treats the message as a system message.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	sendMessage(Body: string,Field: string) : void
	}
/**
	 * @description The Queue API allows you to retrieve or join a Connect Support chat queue.
	 * To use this class in a scoped application, use the sn\_connect namespace identifier. The Connect Scriptable APIs plugin (ID: com.glide.connect.scriptable) should be enabled to access the Queue API.
	 * 
	 */
	declare class Queue {
	/**
	 * @description Retrieves a specified chat queue.
	 * @example
	 * //
	 * var queue = sn_connect.Queue.get("ab73be7dc09a4300964f336ee6b74361");
	 * 
	 * @param SysID Sys\_id of a queue from the Chat Queue \[chat\_queue\] table.
	 * 
	 * @returns Object Returns a conversation queue object.
	 * 
	 */
	get(SysID: string) : Object
	/**
	 * @description Adds the current user to an existing Connect Support chat queue and posts the specified question.
	 * Before calling this method, you must call the [Scoped Queue - get(String sysID)](dev.do#!/reference/api/paris/server/sn_connect-namespace/QueueScopedAPI#queue-get-string "Retrieves a specified chat queue.") method to retrieve the chat queue to which to attach the current user.
	 * 
	 * @example
	 * //
	 * var queue = sn_connect.Queue.get("ab73be7dc09a4300964f336ee6b74361");
	 * queue.join("How do I access my email?");
	 * 
	 * @param Question Question to add to the chat queue.
	 * 
	 * @returns Object GlideRecord object for the Chat Queue Entry.
	 * 
	 */
	join(Question: string) : Object
	}
declare namespace sn_connect {
	}
/**
	 * @description The CTIOperationRequest API provides methods to set and get data on the current CTIOperationRequest object.
	 * You use CTIOperationRequest objects to pass information between a message transformer and an operation handler within the Cloud Call Center framework.  	
 *   	
 * Typically, a message transformer is responsible for parsing an incoming CTI-specific payload and setting the payload data on an associated CTIOperationRequest object. An operation handler is then responsible for getting the information from the CTIOperationRequest object and using the data to process the requested operation.  	
 *   	
 * The ServiceNow base system provides working operation handlers and message transformers that enable connection to Amazon Connect. When building contact flows within Amazon Connect, there are two integration points between Amazon services and a ServiceNow instance:	
 * 	
 * *   Amazon Web Services (AWS) Lambda Proxy (Invoke AWS Lambda function)	
 * *   AWS Lex Bot (Get Customer Input)	
 * 	
 * You can find the available operation handlers and message transformers for these integration points in the Operation Handlers \[sn\_cti\_operation\_handler\] and Provider Message Transformer \[sn\_cti\_provider\_msg\_transormer\] tables.  	
 *   	
 * A payload is passed into a ServiceNow instance from an external source, such as from a computer telephony integration (CTI) provider that is making an operation request. When a request is received, a message transformer parses the payload and uses the CTIOperationRequest set methods to set payload values, such as the operation handler name, onto an operation and contact-specific CTIOperationRequest object.  	
 *   	
 * The following message transformer script parses the passed in JSON payload and sets the values required by the associated operation handler on the CTIOperationRequest object.  	
 *   	
 * 	
 *     {		
 *       try {	
 *         var jsonPayload = httpRequest.body.data;	
 *         if (jsonPayload) {	
 *     	var event = jsonPayload.event;	
 *     	if (event) {	
 *     	  var details = event.Details;	
 *     	  if (details) {						
 *     	    operationRequest.setOperationName(details.Parameters['sn_operation']);	
 *     	    var contactData = details.ContactData;	
 *     	    if(contactData) {	
 *     		// Call id should be surfaced in openframe call log so it can be tied to transcription later	
 *     		operationRequest.setParameter('contact.call_id', contactData.ContactId);	
 *     		for(var ck in contactData.CustomerEndpoint) {	
 *     		  operationRequest.setParameter('contact.' + ck, contactData.CustomerEndpoint[ck]);	
 *     	       }	
 *     	       operationRequest.setParameter('contact.id', contactData.ContactId);	
 *     	       operationRequest.setParameter('contact.phone', contactData.CustomerEndpoint.Address);	
 *     	    }	
 *     	    var parameters = details.Parameters;	
 *     	    if (parameters) {	
 *     		for (var pk in parameters) {	
 *     		  switch(pk) {	
 *     		    case 'interactionId':	
 *     			operationRequest.setInteractionSysId(parameters[pk]);	
 *     			break;	
 *     		    case 'authToken':	
 *     			operationRequest.setAuthToken(parameters[pk]);	
 *     			break;	
 *     		    case 'language':	
 *     			operationRequest.setLanguage(parameters[pk]);	
 *     			break;	
 *     									
 *     		    default:	
 *     			operationRequest.setParameter(pk, parameters[pk]);	
 *     		 }							
 *                 }	
 *               }						
 *             }	
 *           }	
 *         }	
 *       } catch(e) {	
 *     		ctx.setError(e);	
 *       }	
 *     })(httpRequest, operationRequest, ctx);	
 * 	
 *   	
 *   	
 * After the message transformer finishes parsing the passed in payload, the Cloud Call Center framework instantiates the specified operation handler. The operating handler uses the CTIOperationResponse API get methods to obtain the information that it needs from the associated CTIOperationRequest object to process the requested operation.  	
 *   	
 * The following operation handler script stores values that were set on the CTIOperationRequest object in the interaction record associated with the call.  	
 *   	
 * 	
 *     (function(  response, ctx) {	
 *       // Returns the sys_id of the interaction record.	
 *       var interactionSysId = request.getInteractionSysId();	
 *       var number = request.getParameter('number');	
 *       var addComment = request.getParameter('add_comment');	
 *       addComment = addComment ? addComment.toLowerCase() : addComment;	
 *       addComment = 'yes' === addComment || 'true' === addComment || '1' === addComment;	
 *       var workNotes = request.getParameter('work_notes');	
 *       var message = gs.getMessage('Thankyou');	
 *       var interactionGr = request.getInteractionRecord();	
 *       var openedFor = interactionGr ? interactionGr.getValue('opened_for') : null;	
 *       if (openedFor && number && addComment && workNotes) {	
 *         var now_GR = new GlideRecordSecure('incident');	
 *         now_GR.addQuery('caller_id', openedFor);	
 *         now_GR.addQuery('number', number);	
 *         now_GR.query();	
 *         if (now_GR.next()) {	
 *           now_GR.work_notes += workNotes;	
 *           now_GR.update();	
 *           message = gs.getMessage('Your comment was added');	
 *         }	
 *       }	
 *       response.setStatusCode(200);	
 *       response.setMessage(message);	
 *     })(request, response, ctx);	
 * 	
 *   	
 *   	
 * For additional information on creating operation handlers, see [Configure a contact flow for an automated caller interaction](https://docs.servicenow.com/bundle/paris-servicenow-platform/page/product/cloud-call-center/task/establish-automated-bot-interactions.html).  	
 *   	
 * This API runs in the sn\_cti\_core namespace. Before you are able to access the CTIOperationRequest API, the Cloud Call Center Core (sn\_cti\_core) plugin must be activated. For information on activating the Cloud Call Center, see [Install Cloud Call Center applications](https://docs.servicenow.com/bundle/paris-servicenow-platform/page/product/cloud-call-center/task/install-ccc-apps.html).  	
 *   	
 * For additional information on the Cloud Call Center, see [Cloud Call Center](https://docs.servicenow.com/bundle/paris-servicenow-platform/page/product/cloud-call-center/concept/cloud-call-center-overview.html).
	 * 
	 */
	declare class CTIOperationRequestScopedGlobal {
	/**
	 * @description Instantiates a CTIOperationRequest object.
	 * @example
	 * //
	 * var request = new sn_cti_core.CTIOperationRequest('AWS Connect');
	 * request.setSessionAttribute('contact.phone', '+15552222345');
	 * request.setSessionAttribute('contact.okToCall', true);
	 * request.setSessionAttribute('contact.address', {
	 *     street: '1234 Main St'
	 *     city: 'API City',
	 *     zip: 91335
	 * });
	 * 
	 * @param origin Optional. Origin of the request. Usually the name of the computer telephony integrator provider.  Default: null
	 * 
	 */
	constructor(origin: string) 
	/**
	 * @description Returns the authentication token set on the associated CTIOperationRequest object.
	 * This token is used by the Cloud Call Center framework to authenticate the current Cloud Call Center user before executing the requested operation handler if the handler's auth\_required flag is set to true. The auth\_required flag is a field in the Operation Handler \[sn\_cti\_operation\_handler\] table. The life of an authentication token should be for the life of the call session, but is determined by the CTI provider.
	 * 
	 * You can define whatever authentication/authorization handling required by your implementation by creating your own authentication operation handler. Regardless of how the authentication token is generated, the message translator must pass the token back in the CTI payload. Additionally, the CTI provider must store this authentication token locally and pass it in each operation request that requires authentication.
	 * 
	 * If using the instance provided authenticate operation handler, the handler initiates the creation of the authentication token based on a four-digit user-entered pin. It then sets the authentication token in the sessionAttributes object of the CTIOperationResponse object. The associated message transformer translates the sessionAttributes object into the CTI-specific payload and then sends it to the CTI provider.
	 * 
	 * Note: If the authentication token is not passed, all requests to execute operation handlers with the auth\_required flag set will fail. If you do not use authentication, you do not need to maintain authentication tokens.
	 * 
	 * The ServiceNow base system provides working operation handlers and message transformers that enable connection to Amazon Connect. When building contact flows within Amazon Connect, there are two integration points between Amazon services and a ServiceNow instance:
	 * 
	 * *   Amazon Web Services (AWS) Lambda Proxy (Invoke AWS Lambda function)
	 * *   AWS Lex Bot (Get Customer Input)
	 * 
	 * You can find the available operation handlers and message transformers for these integration points in the Operation Handlers \[sn\_cti\_operation\_handler\] and Provider Message Transformer \[sn\_cti\_provider\_msg\_transormer\] tables.
	 * 
	 * @example
	 * //
	 * (function(  httpResponse) {
	 *   var sessionAttributes = {},
	 *       intentResponse;
	 *   var statusCode = -1;
	 *   var message = 'Unprocessed';
	 *   if (operationResponse) {
	 *     statusCode = operationResponse.getStatusCode();
	 *     sessionAttributes = operationResponse.getSessionAttributes();
	 *     message = operationResponse.getMessage();
	 *     var error = operationResponse.getError();
	 *     if (error) {
	 *       sessionAttributes.error = error;
	 *     }
	 *   }
	 *   if (sn_cti_core.CTIRequestDispatcher.Constants.HTTP.Status.AUTH_REQUIRED.code === statusCode) {
	 *     //first call for a secure action without authentication token
	 *     sessionAttributes.statusCode = 401;
	 *     sessionAttributes.message = message;
	 *     intentResponse = {
	 *       sessionAttributes: sessionAttributes,
	 *       dialogAction: {
	 *         type: 'Close',
	 *         fulfillmentState: 'Fulfilled',
	 *         message: {
	 *           contentType: 'PlainText',
	 *           content: 'This operation requires authentication. Say authenticate for authentication.'
	 *         }
	 *       }
	 *     };
	 *   } else if ('DialogCodeHook' === operationRequest.getParameter('$$invocationSource')) {
	 *       //pass back authToken and interactionId
	 *       sessionAttributes.authToken = operationRequest.getAuthToken();
	 *       sessionAttributes.interactionId = operationRequest.getInteractionSysId();
	 *       var originalSlots = operationRequest.getParameter('$$slots');
	 *       var responseParameters = operationResponse ? operationResponse.getParameters() : {};
	 *       responseParameters = responseParameters ? responseParameters : {};
	 *       // See if processing happened and we got a dialogAction
	 *       var responseDialogAction = responseParameters['dialogAction'];
	 *       // Default dialog action
	 *       var dialogAction = {
	 *         type: 'Delegate',
	 *         slots: originalSlots
	 *       };
	 *       // If the response doesn't contain an override replay the inputs
	 *       if (responseDialogAction) {
	 *         // We bypassed dialoghook so delegate and pass through inputs
	 *         dialogAction = responseDialogAction;
	 *       }
	 *       intentResponse = {
	 *         sessionAttributes: sessionAttributes,
	 *         dialogAction: dialogAction
	 *       };
	 *   } else {
	 *     // Override required session attributes
	 *     sessionAttributes.statusCode = statusCode;
	 *     sessionAttributes.message = message;
	 *     // Build response template
	 *     intentResponse = {
	 *       sessionAttributes: sessionAttributes,
	 *       dialogAction: {
	 *         type: 'Close',
	 *         fulfillmentState: 'Fulfilled',
	 *         message: {
	 *           contentType: 'PlainText',
	 *           content: message
	 *         }
	 *       }
	 *     };
	 *   }
	 *   httpResponse.setBody(intentResponse);
	 * })(ctx, operationRequest, operationResponse, httpResponse);
	 * 
	 * @returns string The authentication token associated with the current Cloud Call Center user.
	 * 
	 */
	getAuthToken() : string
	/**
	 * @description Returns the interaction GlideRecord associated with the operation request.
	 * An interaction represents a customer request for assistance made through a chat, phone call, or in-person. Interactions can be routed to queues for assignment or assigned to agents directly. Interaction records are stored in the Interaction \[interaction\] table and can contain any type of data that describes service account interactions with a customer for a specific session.
	 * 
	 * Interaction records are associated with a CTIOperationRequest object through the [CTIOperationRequest - setInteractionSysId(String Id)](https://developer.servicenow.com/go_to_api.do?ID=CTIOpReq-setInteractionSysId_S&v=paris) method. This method is typically called by the message transformer and must be called prior to calling the getInteractionRecord() method.
	 * 
	 * @example
	 * //
	 * (function( ctx) {	
	 *   var notes = '', lang = request.getLanguage();
	 *   try { 
	 *     // Returns the interaction record (GlideRecord) set on the passed in CTIOperationRequest object		
	 *     var interactionGr = request.getInteractionRecord();
	 * 
	 *     var now_GR = new GlideRecord('sys_user');
	 *     if(interactionGr &amp;&amp; now_GR.get(interactionGr.opened_for.toString())) {	
	 *       if(now_GR.locked_out == true) {
	 *         notes += gs.getMessageLang("User record found locked. Unlocking the account.\n", lang);
	 *         now_GR.locked_out=false;
	 *         now_GR.update();
	 *         response.setStatusCode(200);
	 *         response.setMessage(gs.getMessageLang("Your account has been unlocked.", lang));
	 *       } else {
	 *         notes += gs.getMessageLang("User record not locked.\n", lang);
	 *         response.setStatusCode(200);
	 *         response.setMessage(gs.getMessageLang("Your account doesn't seem to be locked.", lang));
	 *       }	
	 *     } else {
	 *       notes += gs.getMessageLang("User record not found. Transfer to agent\n", lang);
	 *       response.setStatusCode(302);
	 *       response.setMessage(gs.getMessageLang("I am unable to find your record. Let me transfer to someone who can help.", lang));
	 *     }
	 *     if(interactionGr) {
	 *       interactionGr.work_notes = notes;
	 *       interactionGr.update();
	 *     }
	 *   } catch(e) {
	 *     ctx.setError(e);
	 *   }
	 * })(request, response, ctx);
	 * 
	 * @returns GlideRecord Interaction GlideRecord object associated with the current CTIOperationRequest object. If the interaction record sys\_id has not been set on the CTIOperationRequest object, returns null.
	 * 
	 */
	getInteractionRecord() : GlideRecord
	/**
	 * @description Returns the sys\_id of the interaction record associated with the current CTIOperationRequest object.
	 * The [CTIOperationRequest - setInteractionSysId(String Id)](https://developer.servicenow.com/go_to_api.do?ID=CTIOpReq-setInteractionSysId_S&v=paris) method must have been called prior to calling this method.
	 * 
	 * @example
	 * //
	 * (function(  response, ctx) {
	 *   // Returns the sys_id of the interaction record associated with the CTIOperationRequest object.
	 *   var interactionSysId = request.getInteractionSysId();
	 *   var number = request.getParameter('number');
	 *   var addComment = request.getParameter('add_comment');
	 *   addComment = addComment ? addComment.toLowerCase() : addComment;
	 *   addComment = 'yes' === addComment || 'true' === addComment || '1' === addComment;
	 *   var workNotes = request.getParameter('work_notes');
	 *   var message = gs.getMessage('Thankyou');
	 *   var interactionGr = request.getInteractionRecord();
	 *   var openedFor = interactionGr ? interactionGr.getValue('opened_for') : null;
	 *   if (openedFor &amp;&amp; number &amp;&amp; addComment &amp;&amp; workNotes) {
	 *     var now_GR = new GlideRecordSecure('incident');
	 *     now_GR.addQuery('caller_id', openedFor);
	 *     now_GR.addQuery('number', number);
	 *     now_GR.query();
	 *     if (now_GR.next()) {
	 *       now_GR.work_notes += workNotes;
	 *       now_GR.update();
	 *       message = gs.getMessage('Your comment was added');
	 *     }
	 *   }
	 *   response.setStatusCode(200);
	 *   response.setMessage(message);
	 * })(request, response, ctx);
	 * 
	 * @returns string The sys\_id of the interaction record set on the current CTIOperationRequest object.  If the sys\_id was not set on the associated CTIOperationRequest object, the method returns null.
	 * 
	 */
	getInteractionSysId() : string
	/**
	 * @description Returns the ISO 639.1 language code that was set on the current CTIOperationRequest object.
	 * Using the customer preferred language enables you to use platform-provided internationalization and localization capabilities to customize messages and other communications with the associated caller.
	 * 
	 * Typically an operation handler calls the getLanguage() method and the message transformer sets the language on the CTIOperationRequest object by calling the [CTIOperationRequest - setLanguage(String languageCode)](https://developer.servicenow.com/go_to_api.do?ID=CTIOpReq-setLanguage_S&v=paris) method.
	 * 
	 * @example
	 * //The following example shows an operation handler calling getLanguage() to obtain the caller's preferred language.
	 * (function( response) {
	 *   // Obtain the contact's preferred language
	 *   var notes = "", announcement, lang = request.getLanguage();
	 *   try {
	 * 		
	 *     var interactionGr = request.getInteractionRecord();
	 * 		
	 *     announcement = gs.getMessageLang("We are currently experiencing issues with VPN. If you are calling about VPN issues, you may hang up the call.", lang);
	 *     // Use the contact's language to customize the response messages and notes	
	 *     if(announcement) {	
	 *       notes = gs.getMessageLang("Listened to announcement: {0}", lang, [announcement]);
	 *       response.setStatusCode(200);
	 *     } else {
	 *       announcement = gs.getMessageLang("There are currently no known outage announcements", lang);
	 *       //use the status case as the flag to check for announcements in contact flow
	 *       response.setStatusCode(404);
	 *     }			
	 *     response.setMessage(announcement);	
	 * 			
	 *     if(interactionGr &amp;&amp; notes) {			
	 *       interactionGr.work_notes = notes;		
	 *       interactionGr.update();
	 *     }
	 * 		
	 *   } catch(e) {
	 *     ctx.setError(e);
	 *   }
	 * 
	 * })(request, response);
	 * 
	 * @returns string The ISO 639.1 language code set on the current CTIOperationRequest object. If the language code is not set, returns en.
	 * 
	 */
	getLanguage() : string
	/**
	 * @description Returns the major version of the computer telephony integrator (CTI) software set on the current CTIOperationRequest object.
	 * Use this method if the CTI providers connected to your ServiceNow instance are running multiple versions of their software, as different software versions may require different processing behavior. If the processing behavior is only slightly different between the software versions, it may make sense to have only a single operation handler. You can then handle the processing differences by just checking the version of software making the request and process the request/data within your operation handler. If the required processing is significantly different between versions, it may be more effective to use multiple operation handlers.
	 * 
	 * Typically the message transformer sets the software version on the CTIOperationRequest object by calling the [CTIOperationRequest - setMajorVersion(Number majorVersion)](https://developer.servicenow.com/go_to_api.do?ID=CTIOpReq-setMajorVersion_N&v=paris) method and an operation handler then consumes the set value using this method. You can also get/set the minor version value of a provider's software using the [CTIOperationRequest - getMinorVersion()](https://developer.servicenow.com/go_to_api.do?ID=CTIOpReq-getMinorVersion&v=paris) and [CTIOperationRequest - setMinorVersion(Number minorVersion)](https://developer.servicenow.com/go_to_api.do?ID=CTIOpReq-setMinorVersion_N&v=paris) methods.
	 * 
	 * @example
	 * //
	 * var request = new sn_cti_core.CTIOperationRequest('origin');
	 * var majorVersion = request.getMajorVersion();
	 * 
	 * @returns number Major version number of the CTI software.  If the major version was never set, returns 1.
	 * 
	 */
	getMajorVersion() : number
	/**
	 * @description Returns the minor version of the computer telephony integrator (CTI) software associated with a CTIOperationRequest object.
	 * Use this method if the CTI providers connected to your ServiceNow instance are running multiple versions of their software, as different software versions may require different processing behavior. If the processing behavior is only slightly different between the software versions, it may make sense to have only a single operation handler. You can then handle the processing differences by just checking the version of software making the request and process the request/data within your operation handler. If the required processing is significantly different between versions, it may be more effective to use multiple operation handlers.
	 * 
	 * Typically the message transformer sets the software version on the CTIOperationRequest object by calling the [CTIOperationRequest - setMinorVersion(Number minorVersion)](https://developer.servicenow.com/go_to_api.do?ID=CTIOpReq-setMinorVersion_N&v=paris)[CTIOperationRequest - setMinorVersion(Number minorVersion)](dev.do#!/reference/api/paris/server/sn_cti_core-namespace/CTIOperationRequestAPI#CTIOpReq-setMinorVersion_N "Sets the minor version of the computer telephony integrator (CTI) provider software making the request on the associated CTIOperationRequest object.") method and an operation handler then consumes the set value using this method. You can also get/set the major version value of a provider's software using the [CTIOperationRequest - getMajorVersion()](https://developer.servicenow.com/go_to_api.do?ID=CTIOpReq-getMajorVersion&v=paris)[CTIOperationRequest - getMajorVersion()](dev.do#!/reference/api/paris/server/sn_cti_core-namespace/CTIOperationRequestAPI#CTIOpReq-getMajorVersion "Returns the major version of the computer telephony integrator (CTI) software set on the current CTIOperationRequest object.") and [CTIOperationRequest - setMajorVersion(Number majorVersion)](https://developer.servicenow.com/go_to_api.do?ID=CTIOpReq-setMajorVersion_N&v=paris)[CTIOperationRequest - setMajorVersion(Number majorVersion)](dev.do#!/reference/api/paris/server/sn_cti_core-namespace/CTIOperationRequestAPI#CTIOpReq-setMajorVersion_N "Sets the major version of the computer telephony integrator (CTI) provider software making the request on the associated CTIOperationRequest object.") methods.
	 * 
	 * @example
	 * //
	 * var request = new sn_cti_core.CTIOperationRequest('origin');
	 * var minorVersion = request.getMinorVersion();
	 * 
	 * @returns number Minor version number of the CTI software.  If the minor version was never set, returns 0.
	 * 
	 */
	getMinorVersion() : number
	/**
	 * @description Returns the name of the operation that the computer telephony integration (CTI) provider is requesting to execute.
	 * The operation name determines the operation handler that is used to process a request. Typically the message transformer sets the operation name on the CTIOperationRequest object using the [CTIOperationRequest - setOperationName(String name)](https://developer.servicenow.com/go_to_api.do?ID=CTIOpReq-setOperationName_S&v=paris) method.
	 * 
	 * Note: The getOperationName() method does not instantiate the associated operation handler. This is done by the Cloud Call Center framework. This method simply returns the associated operation handler name.
	 * 
	 * Note: For Amazon Connect Lex Bot implementations, intent names are appended with a five letter suffix as different Amazon intents cannot have the same intent name. In the Cloud Call Center framework, the intent name equals the operation handler name. An operation handler can either be specific for an intent, having an operation handler name that includes this suffix (myOperation\_SUFFX), or it can be generic and used by multiple CTI providers or different use cases, such as using the same handler for processing an HR request and a helpdesk request (myOperation).
	 * 
	 * @example
	 * //
	 * var request = new sn_cti_core.CTIOperationRequest('origin');
	 * var name = request.getOperationName();
	 * 
	 * 
	 * @returns string The name of the operation that the CTI provider is requesting to execute. If the operation name is not set, returns null.
	 * 
	 */
	getOperationName() : string
	/**
	 * @description Returns the substep operation handler name set on the current CTIOperationRequest object.
	 * Use substeps to perform actions such as initialization and validation before processing an operation. Unlike operation handlers that are meant to be generic and used by all CTI providers, substeps are CTI provider specific and use terminology and naming conventions that are specific to the CTI provider.
	 * 
	 * The Cloud Call Center framework performs the following steps to locate the required operation handler and any associated substep operation handlers.
	 * 
	 * Note: For Amazon Connect Lex Bot implementations, intent names are appended with a five letter suffix as different Amazon intents cannot have the same intent name. In the Cloud Call Center framework, the intent name equals the operation handler name. An operation handler can either be specific for an intent, having an operation handler name that includes this suffix (myOperation\_SUFFX), or it can be generic and used by multiple CTI providers or different use cases, such as using the same handler for processing an HR request and a helpdesk request (myOperation).
	 * 
	 * 1.  Tries to locate the operation handler associated with the request.
	 *     *   First checks for an operation handler called myOperation\_SUFFX.
	 *     *   If not found, checks for the operation handler myOperation. If not found, errors out.
	 * 2.  If the handler is found, checks the auth\_required flag on the operation handler. If set, it checks that a valid authentication token (obtained through the getAuthToken() method) is present on the request. If present and valid, continue processing, else throw an error.
	 * 3.  Looks up the operation handler for the passed in substep. For this example let's assume subStepName=SubStep.
	 *     *   First checks for an operation handler named myOperation\_SUFFX.SubStep. If found, executes the handler.
	 *     *   If not found, checks for the handler myOperation.SubStep. If found executes the handler.
	 *     *   If not found, checks if a subStepNotFoundBehavior was set on the request object.
	 *     *   If set, executes the behavior, otherwise, errors out.
	 * 4.  Executes the primary operation handler (myOpersation\_SUFFX or myOperation.)
	 * 
	 * Typically the message transformer sets the substep name on the CTIOperationRequest object using the [CTIOperationRequest - setOperationSubStepName(String name)](https://developer.servicenow.com/go_to_api.do?ID=CTIOpReq-setOperationSubStepName_S&v=paris) method. You can override this behavior if you are creating your own transformer by calling the [CTIOperationRequest - setSubStepNotFoundBehaviour(Object behaviour)](https://developer.servicenow.com/go_to_api.do?ID=CTIOpReq-setSubStepNotFoundBehav_O&v=paris) method.
	 * 
	 * @example
	 * //
	 * var request = new sn_cti_core.CTIOperationRequest('origin');
	 * var name = request.getOperationSubStepName();
	 * 
	 * @returns string The name of the substep operation handler set on the CTIOperationRequest object. If it does not exist, returns null.
	 * 
	 */
	getOperationSubStepName() : string
	/**
	 * @description Returns the value of a specified key previously set on the current CTIOperationRequest object.
	 * Using the get/set parameter methods enables the passing of virtually any string or number value between a message transformer and an operation handler. The parameter object can contain zero or more key/value pairs of data that directly correlate to the current operation request. The operation handler determines what key/value pairs are required as it consumes these values. Typically the message transformer sets these parameters on the CTIOperationRequest object by calling the [CTIOperationRequest - setParameter(String key, Object value)](https://developer.servicenow.com/go_to_api.do?ID=CTIOpReq-setParameter_S_O&v=paris) method and the operation handler consumes them using this method.
	 * 
	 * @example
	 * //
	 * (function(  response, ctx) {
	 *   var interactionSysId = request.getInteractionSysId();
	 *   // Returns the number and add_comment parameters from the CTIOperationRequest object
	 *   var number = request.getParameter('number');
	 *   var addComment = request.getParameter('add_comment');
	 *   addComment = addComment ? addComment.toLowerCase() : addComment;
	 *   addComment = 'yes' === addComment || 'true' === addComment || '1' === addComment;
	 *   var workNotes = request.getParameter('work_notes');
	 *   var message = gs.getMessage('Thankyou');
	 *   var interactionGr = request.getInteractionRecord();
	 *   var openedFor = interactionGr ? interactionGr.getValue('opened_for') : null;
	 *   if (openedFor &amp;&amp; number &amp;&amp; addComment &amp;&amp; workNotes) {
	 *     var now_GR = new GlideRecordSecure('incident');
	 *     now_GR.addQuery('caller_id', openedFor);
	 *     now_GR.addQuery('number', number);
	 *     now_GR.query();
	 *     if (now_GR.next()) {
	 *       now_GR.work_notes += workNotes;
	 *       now_GR.update();
	 *       message = gs.getMessage('Your comment was added');
	 *     }
	 *   }
	 *   response.setStatusCode(200);
	 *   response.setMessage(message);
	 * })(request, response, ctx);
	 * 
	 * @param key The name of the key value to return.
	 * 
	 * @returns String | Number Value of the specified key. If no such key exists, returns null.
	 * 
	 */
	getParameter(key: string) : String | Number
	/**
	 * @description Returns the key-value pairs for all parameters that were previously set on the current CTIOperationRequest object.
	 * Using the get/set parameter methods enables the passing of virtually any string or number value between a message transformer and an operation handler. The parameter object can contain zero or more key/value pairs of data that directly correlate to the current operation request. The operation handler determines what key/value pairs are required as it consumes these values. Typically the message transformer sets these parameters on the CTIOperationRequest object by calling the [CTIOperationRequest - setParameter(String key, Object value)](https://developer.servicenow.com/go_to_api.do?ID=CTIOpReq-setParameter_S_O&v=paris) method and the operation handler consumes them using this method.
	 * 
	 * @example
	 * //
	 * var request = new sn_cti_core.CTIOperationRequest('origin');
	 * var parms = request.getParameters();
	 * for(var key in parms) {
	 *     gs.info(key + '=' + parms[key]);
	 * }
	 * 
	 * @returns Object A map of key-value pairs that were previously set on the CTIOperationRequest object. This key-value pairs are free-form and defined by the needs of the operation handler. The returned values are either Strings or Numbers.
	 * 
	 */
	getParameters() : Object
	/**
	 * @description Returns the value of a specified session attribute key set on the current CTIOperationRequest object.
	 * Using the get/set session attribute methods enables the passing of virtually any string or number value between a message transformer and an operation handler. The sessionAttribute object can contain zero or more key/value pairs of data that are valid for the duration of a computer telephony integration provider defined session, such as the contact's phone number. Session attributes can also be accessed within a contact flow. The operation handler determines what session attribute key/value pairs are needed as it consumes these values. Typically the message transformer sets these attributes on the CTIOperationRequest object by calling the [CTIOperationRequest - setSessionAttribute(String key, Object value)](https://developer.servicenow.com/go_to_api.do?ID=CTIOpReq-setSessionAttribute_S_O&v=paris) method. Session attributes are different than parameters in that they persist for the life of the session (such as the entire call) and should be passed back by the CTI provider with each operation request within that call session.
	 * 
	 * @example
	 * //
	 * var request = new sn_cti_core.CTIOperationRequest('origin');
	 * var phoneAttribute = request.getSessionAttribute('contact.phone');
	 * 
	 * @param key The name of the key value to return.
	 * 
	 * @returns String | Number Value of the specified key. If no such key exists, returns null.
	 * 
	 */
	getSessionAttribute(key: string) : String | Number
	/**
	 * @description Returns a key-value pair map of all session attributes set on the current CTIOperationRequest object.
	 * Using the get/set session attribute methods enables the passing of virtually any string or number value between a message transformer and an operation handler. The sessionAttribute object can contain zero or more key/value pairs of data that are valid for the duration of a computer telephony integration provider defined session, such as the contact's phone number. Session attributes can also be accessed within a contact flow. The operation handler determines what session attribute key/value pairs are needed as it consumes these values. Typically the message transformer sets these attributes on the CTIOperationRequest object by calling the [CTIOperationRequest - setSessionAttribute(String key, Object value)](https://developer.servicenow.com/go_to_api.do?ID=CTIOpReq-setSessionAttribute_S_O&v=paris) method. Session attributes are different than parameters in that they persist for the life of the session (such as the entire call) and should be passed back by the CTI provider with each operation request within that call session.
	 * 
	 * @example
	 * //
	 * var request = new sn_cti_core.CTIOperationRequest('origin');
	 * var parms = request.getSessionAttributes();
	 * for(var key in parms) {
	 *     gs.info(key + '=' + parms[key]);
	 * }
	 * 
	 * @returns Object A map of session attribute key-value pairs that were set on the associated CTIOperationResponse object. This map is free-form and defined by the needs of the operation handler.
	 * 
	 */
	getSessionAttributes() : Object
	/**
	 * @description Returns the handling behavior for a subsep when a substep's operation handler is not found.
	 * Use substeps to perform actions such as initialization and validation before processing an operation. Unlike operation handlers that are meant to be generic and used by all CTI providers, substeps are CTI provider specific and use terminology and naming conventions that are specific to the CTI provider.
	 * 
	 * If the requested substep operation handler cannot be found by the Cloud Call Center framework, it attempts to use the "step not found behavior". This behavior is typically set by the message transformer when an operation is initially requested.
	 * 
	 * @example
	 * //
	 * var request = new sn_cti_core.CTIOperationRequest('origin');
	 * var behavior = request.getSubStepNotFoundBehaviour();
	 * 
	 * @returns OperationNotFoundBehaviours The behavior/handling to perform when an operation handler cannot be found for the operation/substep combination (<operation\_name>.SubStep>). If not defined, returns null.  Possible values:  *   OperationNotFoundBehaviours.ThrowError: Throw an error. *   OperationNotFoundBehaviours.PassThrough: Do not perform any further processing on the request, just return. *   OperationNotFoundBehaviours.RouteToOperation: Use the parent operation handler <operation\_name>.
	 * 
	 */
	getSubStepNotFoundBehaviour() : OperationNotFoundBehaviours
	/**
	 * @description Sets an authentication token on the current CTIOperationRequest object.
	 * This token is used by the Cloud Call Center framework to authenticate the current Cloud Call Center user before executing the requested operation handler if the handler's auth\_required flag is set to true. The auth\_required flag is a field in the Operation Handler \[sn\_cti\_operation\_handler\] table. The life of an authentication token should be for the life of the call session, but is determined by the CTI provider.
	 * 
	 * You can define whatever authentication/authorization handling required by your implementation by creating your own authentication operation handler. Regardless of how the authentication token is generated, the message translator must pass the token back in the CTI payload. Additionally, the CTI provider must store this authentication token locally and pass it in each operation request that requires authentication.
	 * 
	 * If using the instance provided authenticate operation handler, the handler initiates the creation of the authentication token based on a four-digit user-entered pin. It then sets the authentication token in the sessionAttributes object of the CTIOperationResponse object. The associated message transformer translates the sessionAttributes object into the CTI-specific payload and then sends it to the CTI provider.
	 * 
	 * Note: If the authentication token is not passed, all requests to execute operation handlers with the auth\_required flag set will fail. If you do not use authentication, you do not need to maintain authentication tokens.
	 * 
	 * The ServiceNow base system provides working operation handlers and message transformers that enable connection to Amazon Connect. When building contact flows within Amazon Connect, there are two integration points between Amazon services and a ServiceNow instance:
	 * 
	 * *   Amazon Web Services (AWS) Lambda Proxy (Invoke AWS Lambda function)
	 * *   AWS Lex Bot (Get Customer Input)
	 * 
	 * You can find the available operation handlers and message transformers for these integration points in the Operation Handlers \[sn\_cti\_operation\_handler\] and Provider Message Transformer \[sn\_cti\_provider\_msg\_transormer\] tables.
	 * 
	 * @example
	 * //of message transformer script that saves the passed in authentication token.
	 * {	
	 *   try {
	 *     var jsonPayload = httpRequest.body.data;
	 *     if (jsonPayload) {
	 * 	var event = jsonPayload.event;
	 * 	if (event) {
	 * 	  var details = event.Details;
	 * 	  if (details) {					
	 * 	    operationRequest.setOperationName(details.Parameters['sn_operation']);
	 * 	    var contactData = details.ContactData;
	 * 	    if(contactData) {
	 * 		// Call id should be surfaced in openframe call log so it can be tied to transcription later
	 * 		operationRequest.setParameter('contact.call_id', contactData.ContactId);
	 * 		for(var ck in contactData.CustomerEndpoint) {
	 * 		  operationRequest.setParameter('contact.' + ck, contactData.CustomerEndpoint[ck]);
	 * 	       }
	 * 	       operationRequest.setParameter('contact.id', contactData.ContactId);
	 * 	       operationRequest.setParameter('contact.phone', contactData.CustomerEndpoint.Address);
	 * 	    }
	 * 	    var parameters = details.Parameters;
	 * 	    if (parameters) {
	 * 		for (var pk in parameters) {
	 * 		  switch(pk) {
	 * 		    case 'interactionId':
	 * 			operationRequest.setInteractionSysId(parameters[pk]);
	 * 			break;
	 * 		    case 'authToken':
	 * 			operationRequest.setAuthToken(parameters[pk]);
	 * 			break;
	 * 		    case 'language':
	 * 			operationRequest.setLanguage(parameters[pk]);
	 * 			break;
	 * 		    case 'statusCode':
	 * 		    case 'message':
	 * 			break;
	 * 								
	 * 		    default:
	 * 			operationRequest.setParameter(pk, parameters[pk]);
	 * 		 }						
	 *             }
	 *           }					
	 *         }
	 *       }
	 *     }
	 *   } catch(e) {
	 * 		ctx.setError(e);
	 *   }
	 * })(httpRequest, operationRequest, ctx);
	 * 
	 * @param id The authentication token for the associated Cloud Call Center user.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setAuthToken(id: string) : void
	/**
	 * @description Sets the sys\_id of the interaction record associated with the operation request on the current CTIOperationRequest object.
	 * If you want to maintain contact interaction information within a contact-specific interaction record, the interaction record sys\_id must be maintained for the entire Cloud Call Center call session.
	 * 
	 * Typically, an operation handler creates an interaction record when a new contact call is initiated. It then sets the interaction record sys\_id and table name on the associated CTIOperationResponse object as session attributes using the [CTIOperationRequest - setSessionAttribute(String key, Object value)](https://developer.servicenow.com/go_to_api.do?ID=CTIOpResp-setSessionAttribute_S_O&v=paris) method. The associated method transformer then translates this information into the computer telephony integration (CTI) provider payload and sends it back to the CTI provider.
	 * 
	 * The CTI provider must store the interaction record sys\_id for the contact session locally. Each time the CTI provider interacts with the Cloud Call Center for this contact session, it must pass back the corresponding interaction record sys\_id in its payload. The receiving message transformer then parses the payload and uses the CTIOperationRequest - setInteractionSysId() method to set the interaction record sys\_id on the associated CTIOperationtRequest object.
	 * 
	 * The [CTIOperationRequest - getInteractionRecord()](https://developer.servicenow.com/go_to_api.do?ID=CTIOpReq-getInteractionRecord&v=paris) method uses this sys\_id to obtain the correct interaction record for the contact session. Interaction records are located in the Interaction \[interaction\] table. For additional information on interaction records, see
	 * 
	 * @example
	 * //of a message transformer script that extracts the interaction record sys\_id from the incoming payload (passed as a parameter) and sets it on the associated CTIOperationRequest object.
	 * {	
	 *   try {
	 *     var jsonPayload = httpRequest.body.data;
	 *     if (jsonPayload) {
	 * 	var event = jsonPayload.event;
	 * 	if (event) {
	 * 	  var details = event.Details;
	 * 	  if (details) {					
	 * 	    operationRequest.setOperationName(details.Parameters['sn_operation']);
	 * 	    var contactData = details.ContactData;
	 * 	    if(contactData) {
	 * 		// Call id should be surfaced in openframe call log so it can be tied to transcription later
	 * 		operationRequest.setParameter('contact.call_id', contactData.ContactId);
	 * 		for(var ck in contactData.CustomerEndpoint) {
	 * 		  operationRequest.setParameter('contact.' + ck, contactData.CustomerEndpoint[ck]);
	 * 	       }
	 * 	       operationRequest.setParameter('contact.id', contactData.ContactId);
	 * 	       operationRequest.setParameter('contact.phone', contactData.CustomerEndpoint.Address);
	 * 	    }
	 * 	    var parameters = details.Parameters;
	 * 	    if (parameters) {
	 * 		for (var pk in parameters) {
	 * 		  switch(pk) {
	 *                  // Associate the existing customer interaction record with the request
	 * 		    case 'interactionId':
	 * 			operationRequest.setInteractionSysId(parameters[pk]);
	 * 			break;
	 * 		    case 'authToken':
	 * 			operationRequest.setAuthToken(parameters[pk]);
	 * 			break;
	 * 		    case 'language':
	 * 			operationRequest.setLanguage(parameters[pk]);
	 * 			break;
	 * 		    case 'statusCode':
	 * 		    case 'message':
	 * 			break;
	 * 								
	 * 		    default:
	 * 			operationRequest.setParameter(pk, parameters[pk]);
	 * 		 }						
	 *             }
	 *           }					
	 *         }
	 *       }
	 *     }
	 *   } catch(e) {
	 * 		ctx.setError(e);
	 *   }
	 * })(httpRequest, operationRequest, ctx);
	 * 
	 * @param sys_id The sys\_id of the interaction record to associate with the request.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setInteractionSysId(sys_id: string) : void
	/**
	 * @description Sets the ISO 639.1 language code to use when processing the associated operation on a CTIOperationRequest object.
	 * Using the customer preferred language enables you to use platform-provided internationalization and localization capabilities to customize messages and other communications with the associated caller. Typically the message transformer sets the language on the CTIOperationRequest object.
	 * 
	 * @example
	 * //
	 * {	
	 *   try {
	 *     var jsonPayload = httpRequest.body.data;
	 *     if (jsonPayload) {
	 * 	var event = jsonPayload.event;
	 * 	if (event) {
	 * 	  var details = event.Details;
	 * 	  if (details) {					
	 * 	    operationRequest.setOperationName(details.Parameters['sn_operation']);
	 * 	    var contactData = details.ContactData;
	 * 	    if(contactData) {
	 * 		// Call id should be surfaced in openframe call log so it can be tied to transcription later
	 * 		operationRequest.setParameter('contact.call_id', contactData.ContactId);
	 * 		for(var ck in contactData.CustomerEndpoint) {
	 * 		  operationRequest.setParameter('contact.' + ck, contactData.CustomerEndpoint[ck]);
	 * 	       }
	 * 	       operationRequest.setParameter('contact.id', contactData.ContactId);
	 * 	       operationRequest.setParameter('contact.phone', contactData.CustomerEndpoint.Address);
	 * 	    }
	 * 	    var parameters = details.Parameters;
	 * 	    if (parameters) {
	 * 		for (var pk in parameters) {
	 * 		  switch(pk) {
	 * 		    case 'interactionId':
	 * 			operationRequest.setInteractionSysId(parameters[pk]);
	 * 			break;
	 * 		    case 'authToken':
	 * 			operationRequest.setAuthToken(parameters[pk]);
	 * 			break;
	 * 		    case 'language':
	 * 			operationRequest.setLanguage(parameters[pk]);
	 * 			break;
	 * 		    case 'statusCode':
	 * 		    case 'message':
	 * 			break;
	 * 								
	 * 		    default:
	 * 			operationRequest.setParameter(pk, parameters[pk]);
	 * 		 }						
	 *             }
	 *           }					
	 *         }
	 *       }
	 *     }
	 *   } catch(e) {
	 * 		ctx.setError(e);
	 *   }
	 * })(httpRequest, operationRequest, ctx);
	 * 
	 * @param languageCode The ISO 639.1 language code to use when processing the associated operation.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setLanguage(languageCode: string) : void
	/**
	 * @description Sets the major version of the computer telephony integrator (CTI) provider software making the request on the associated CTIOperationRequest object.
	 * Use this method if the CTI providers connected to your ServiceNow instance are running multiple versions of their software, as different software versions may require different processing behavior. If the processing behavior is only slightly different between the software versions, it may make sense to have only a single operation handler. You can then handle the processing differences by just checking the version of software making the request and process the request/data within your operation handler. If the required processing is significantly different between versions, it may be more effective to use multiple operation handlers.
	 * 
	 * Typically the message transformer sets the software version on the CTIOperationRequest object by calling this method and an operation handler then consumes the set value using the [CTIOperationRequest - getMajorVersion()](https://developer.servicenow.com/go_to_api.do?ID=CTIOpReq-getMajorVersion&v=paris) method. You can also get/set the minor version value of a provider's software using the [CTIOperationRequest - getMinorVersion()](https://developer.servicenow.com/go_to_api.do?ID=CTIOpReq-getMinorVersion&v=paris) and [CTIOperationRequest - setMinorVersion(Number minorVersion)](https://developer.servicenow.com/go_to_api.do?ID=CTIOpReq-setMinorVersion_N&v=paris) methods.
	 * 
	 * @example
	 * //
	 * var request = new sn_cti_core.CTIOperationRequest('origin');
	 * request.setMajorVersion(2);
	 * 
	 * @param majorVersion Major version of the CTI provider software making the operation request.  If this value was not previously set, returns 1.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setMajorVersion(majorVersion: number) : void
	/**
	 * @description Sets the minor version of the computer telephony integrator (CTI) provider software making the request on the associated CTIOperationRequest object.
	 * Use this method if the CTI providers connected to your ServiceNow instance are running multiple versions of their software, as different software versions may require different processing behavior. If the processing behavior is only slightly different between the software versions, it may make sense to have only a single operation handler. You can then handle the processing differences by just checking the version of software making the request and process the request/data within your operation handler. If the required processing is significantly different between versions, it may be more effective to use multiple operation handlers.
	 * 
	 * Typically the message transformer sets the software version on the CTIOperationRequest object by calling this method and an operation handler then consumes the set value using the [CTIOperationRequest - getMinorVersion()](https://developer.servicenow.com/go_to_api.do?ID=CTIOpReq-getMinorVersion&v=paris) method. You can also get/set the major version value of a provider's software using the [CTIOperationRequest - getMajorVersion()](https://developer.servicenow.com/go_to_api.do?ID=CTIOpReq-getMajorVersion&v=paris) and [CTIOperationRequest - setMajorVersion(Number majorVersion)](https://developer.servicenow.com/go_to_api.do?ID=CTIOpReq-setMajorVersion_N&v=paris) methods.
	 * 
	 * @example
	 * //
	 * var request = new sn_cti_core.CTIOperationRequest('origin');
	 * ...
	 * request.setMinorVersion(3);
	 * 
	 * @param minorVersion Minor version of the CTI provider software making the operation request.  If this value was not previously set, returns 0.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setMinorVersion(minorVersion: number) : void
	/**
	 * @description Sets the name of the operation that the computer telephony integration (CTI) provider is attempting to execute on the current CTIOperationRequest object.
	 * The operation name determines the operation handler that is used to process the request. Call this method from the associated message transformer.
	 * 
	 * Note: For Amazon Connect Lex Bot implementations, intent names are appended with a five letter suffix as different Amazon intents cannot have the same intent name. In the Cloud Call Center framework, the intent name equals the operation handler name. An operation handler can either be specific for an intent, having an operation handler name that includes this suffix (myOperation\_SUFFX), or it can be generic and used by multiple CTI providers or different use cases, such as using the same handler for processing an HR request and a helpdesk request (myOperation).
	 * 
	 * @example
	 * //
	 * {	
	 *   try {
	 *     var jsonPayload = httpRequest.body.data;
	 *     if (jsonPayload) {
	 * 	var event = jsonPayload.event;
	 * 	if (event) {
	 * 	  var details = event.Details;
	 * 	  if (details) {	
	 *            // Set the operation handler to use to process the request				
	 * 	    operationRequest.setOperationName(details.Parameters['sn_operation']);
	 * 	    var contactData = details.ContactData;
	 * 	    if(contactData) {
	 * 		// Call id should be surfaced in openframe call log so it can be tied to transcription later
	 * 		operationRequest.setParameter('contact.call_id', contactData.ContactId);
	 * 		for(var ck in contactData.CustomerEndpoint) {
	 * 		  operationRequest.setParameter('contact.' + ck, contactData.CustomerEndpoint[ck]);
	 * 	       }
	 * 	       operationRequest.setParameter('contact.id', contactData.ContactId);
	 * 	       operationRequest.setParameter('contact.phone', contactData.CustomerEndpoint.Address);
	 * 	    }
	 * 	    var parameters = details.Parameters;
	 * 	    if (parameters) {
	 * 		for (var pk in parameters) {
	 * 		  switch(pk) {
	 * 		    case 'interactionId':
	 * 			operationRequest.setInteractionSysId(parameters[pk]);
	 * 			break;
	 * 		    case 'authToken':
	 * 			operationRequest.setAuthToken(parameters[pk]);
	 * 			break;
	 * 		    case 'language':
	 * 			operationRequest.setLanguage(parameters[pk]);
	 * 			break;
	 * 		    case 'statusCode':
	 * 		    case 'message':
	 * 			break;
	 * 								
	 * 		    default:
	 * 			operationRequest.setParameter(pk, parameters[pk]);
	 * 		 }						
	 *             }
	 *           }					
	 *         }
	 *       }
	 *     }
	 *   } catch(e) {
	 * 		ctx.setError(e);
	 *   }
	 * })(httpRequest, operationRequest, ctx);
	 * 
	 * @param name The name of the operation that the CTI provider is currently attempting to execute.  This name must be the same as the name of the operation handler to use to process the request. If it is not, an error is thrown. You can locate the available operation handlers in the Operation Handler \[sn\_cti\_operation\_handler\] table.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setOperationName(name: string) : void
	/**
	 * @description Sets the operation substep name on the current CTIOperationRequest object.
	 * Use substeps to perform actions such as initialization and validation before processing an operation. Unlike operation handlers that are meant to be generic and used by all CTI providers, substeps are CTI provider specific and use terminology and naming conventions that are specific to the CTI provider.
	 * 
	 * The Cloud Call Center framework performs the following steps to locate the required operation handler and any associated substep operation handlers.
	 * 
	 * Note: For Amazon Connect Lex Bot implementations, intent names are appended with a five letter suffix as different Amazon intents cannot have the same intent name. In the Cloud Call Center framework, the intent name equals the operation handler name. An operation handler can either be specific for an intent, having an operation handler name that includes this suffix (myOperation\_SUFFX), or it can be generic and used by multiple CTI providers or different use cases, such as using the same handler for processing an HR request and a helpdesk request (myOperation).
	 * 
	 * 1.  Tries to locate the operation handler associated with the request.
	 *     *   First checks for an operation handler called myOperation\_SUFFX.
	 *     *   If not found, checks for the operation handler myOperation. If not found, errors out.
	 * 2.  If the handler is found, checks the auth\_required flag on the operation handler. If set, it checks that a valid authentication token (obtained through the getAuthToken() method) is present on the request. If present and valid, continue processing, else throw an error.
	 * 3.  Looks up the operation handler for the passed in substep. For this example let's assume subStepName=SubStep.
	 *     *   First checks for an operation handler named myOperation\_SUFFX.SubStep. If found, executes the handler.
	 *     *   If not found, checks for the handler myOperation.SubStep. If found executes the handler.
	 *     *   If not found, checks if a subStepNotFoundBehavior was set on the request object.
	 *     *   If set, executes the behavior, otherwise, errors out.
	 * 4.  Executes the primary operation handler (myOpersation\_SUFFX or myOperation.)
	 * 
	 * You can set the default behavior of a substep by calling the [CTIOperationRequest - setSubStepNotFoundBehaviour(Object behaviour)](https://developer.servicenow.com/go_to_api.do?ID=CTIOpReq-setSubStepNotFoundBehav_O&v=paris) method.
	 * 
	 * @example
	 * //
	 * (function(  ctx) {
	 *   try {
	 *     var jsonPayload = httpRequest.body.data;
	 *     if (jsonPayload) {
	 *       var event = jsonPayload.event;
	 *       if (event) {
	 *         var intent = event.currentIntent;
	 * 	 var inputTranscript = event.inputTranscript;
	 * 	 if(inputTranscript) {
	 * 	   operationRequest.setParameter('$utterance', inputTranscript);
	 * 	 }
	 *         if (intent) {
	 *           operationRequest.setOperationName(intent.name);
	 * 	   // Add this because intent name gets changed through the pipeline
	 * 	   operationRequest.setParameter('$original_intent', intent.name);
	 *           var sessionAttributes = event.sessionAttributes;
	 *           if (sessionAttributes) {
	 *             for (var sk in sessionAttributes) {
	 *               switch (sk) {
	 *                 case 'interactionId':
	 *                   operationRequest.setInteractionSysId(sessionAttributes[sk]);
	 *                   break;
	 *                 case 'authToken':
	 *                   operationRequest.setAuthToken(sessionAttributes[sk]);
	 *                   break;
	 * 		  case 'language':
	 * 		    operationRequest.setLanguage(sessionAttributes[sk]);
	 * 		    break;
	 *                 case 'statusCode':
	 *                 case 'message':
	 *                   break;
	 *                 default:
	 *                   operationRequest.setSessionAttribute(sk, sessionAttributes[sk]);
	 *               }
	 *             }
	 *           }
	 *           var slots = intent.slots;
	 * 	   // Always copy in slots they are the parameters for the operation
	 *           if (slots) {
	 *             for (var pk in slots) {
	 *               operationRequest.setParameter(pk, slots[pk]);
	 *             }
	 *           }
	 *           var invocationSource = event.invocationSource;
	 * 	   operationRequest.setParameter('$$invocationSource', invocationSource);
	 *           // Specific handling for dialog hooks with a way to override for Amazon specific provider
	 *           if (invocationSource === 'DialogCodeHook') {
	 * 	     // Set substep to trigger forwarding to another handler IF it s present
	 * 	     operationRequest.setOperationSubStepName(invocationSource);
	 * 	     // Allow pass through behavior
	 * 	     var behaviourToUse = sn_cti_core.CTIOperationRequest.OperationNotFoundBehaviours.PassThrough;
	 * 	     operationRequest.setSubStepNotFoundBehaviour(behaviourToUse);
	 * 	     // Reserved - copy slots in so we can just use delegate as default if the call isn't handled
	 * 	     operationRequest.setParameter('$$slots', slots);
	 *           }
	 *         }
	 *       }
	 *     }
	 *   } catch (e) {
	 *       ctx.setError(e);
	 *   }
	 *   return operationRequest;
	 * })(httpRequest, operationRequest, ctx);
	 * 
	 * @param name The name of the substep that the CTI provider is trying to execute.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setOperationSubStepName(name: string) : void
	/**
	 * @description Sets the specified key-value pair on the parameter object of the current CTIOperationRequest object.
	 * Using the get/set parameter methods enables the passing of virtually any string or number value between a message transformer and an operation handler. The parameter object can contain zero or more key/value pairs of data that directly correlate to the current operation request. The operation handler determines what key/value pairs are required as it consumes these values. Typically the message transformer sets these parameters on the CTIOperationRequest object by calling this method and the operation handler consumes them using the [CTIOperationRequest - getParameter(String key)](https://developer.servicenow.com/go_to_api.do?ID=CTIOpReq-getParameter_S&v=paris) or [CTIOperationRequest - getParameters()](https://developer.servicenow.com/go_to_api.do?ID=CTIOpReq-getParameters&v=paris) method.
	 * 
	 * Note: You should only store objects that can survive a JSON.parse(JSON.stringify(object)) operation. Objects not meeting this criteria may not propagate correctly through the entire operation processing chain.
	 * 
	 * For example:
	 * 
	 * var x = {
	 *   "string": 'abc',
	 *   "int": 123,
	 *   "float": 1.234,
	 *   "number": new Number(3),
	 *   "boolean": true,
	 *   "date": new Date(2006, 0, 2, 15, 4, 5),
	 *   "object": {
	 *     "string": 'abc',
	 *     "int": 123,
	 *     "float": 1.234,
	 *     "number": new Number(3),
	 *     "boolean": true,
	 *     "date": new Date(2006, 0, 2, 15, 4, 5)
	 *   },
	 *   "function": function(abc) {
	 * 
	 *   }
	 * }
	 * var stringify = JSON.stringify(x);
	 * gs.info(stringify);
	 * var hydrate = JSON.parse(stringify);
	 * var stringify2 = JSON.stringify(hydrate);
	 * gs.info(stringify2);
	 * 
	 * Produces:
	 * 
	 * {"string":"abc","int":123,"float":1.234,"number":3,"boolean":true,"date":"2006-01-02T23:04:05.000Z","object":{"string":"abc","int":123,"float":1.234,"number":3,"boolean":true,"date":"2006-01-02T23:04:05.000Z"}}
	 * {"string":"abc","int":123,"float":1.234,"number":3,"boolean":true,"date":"2006-01-02T23:04:05.000Z","object":{"string":"abc","int":123,"float":1.234,"number":3,"boolean":true,"date":"2006-01-02T23:04:05.000Z"}}
	 * 
	 * @example
	 * //
	 * {	
	 *   try {
	 *     var jsonPayload = httpRequest.body.data;
	 *     if (jsonPayload) {
	 * 	var event = jsonPayload.event;
	 * 	if (event) {
	 * 	  var details = event.Details;
	 * 	  if (details) {					
	 * 	    operationRequest.setOperationName(details.Parameters['sn_operation']);
	 * 	    var contactData = details.ContactData;
	 * 	    if(contactData) {
	 * 		// Call id should be surfaced in openframe call log so it can be tied to transcription later
	 * 		operationRequest.setParameter('contact.call_id', contactData.ContactId);
	 * 		for(var ck in contactData.CustomerEndpoint) {
	 * 		  operationRequest.setParameter('contact.' + ck, contactData.CustomerEndpoint[ck]);
	 * 	       }
	 * 	       operationRequest.setParameter('contact.id', contactData.ContactId);
	 * 	       operationRequest.setParameter('contact.phone', contactData.CustomerEndpoint.Address);
	 * 	    }
	 * 	    var parameters = details.Parameters;
	 * 	    if (parameters) {
	 * 		for (var pk in parameters) {
	 * 		  switch(pk) {
	 * 		    case 'interactionId':
	 * 			operationRequest.setInteractionSysId(parameters[pk]);
	 * 			break;
	 * 		    case 'authToken':
	 * 			operationRequest.setAuthToken(parameters[pk]);
	 * 			break;
	 * 		    case 'language':
	 * 			operationRequest.setLanguage(parameters[pk]);
	 * 			break;
	 * 		    case 'statusCode':
	 * 		    case 'message':
	 * 			break;
	 * 								
	 * 		    default:
	 * 			operationRequest.setParameter(pk, parameters[pk]);
	 * 		 }						
	 *             }
	 *           }					
	 *         }
	 *       }
	 *     }
	 *   } catch(e) {
	 * 		ctx.setError(e);
	 *   }
	 * })(httpRequest, operationRequest, ctx);
	 * 
	 * @param key Name of the key under which to store the associated value.
	 * @param value Value to store.  Valid data types:  *   string *   int *   float *   number *   boolean *   date *   object
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setParameter(key: string,value: Object) : void
	/**
	 * @description Sets the specified session attribute key-value pair on the current CTIOperationRequest object.
	 * Using the get/set session attribute methods enables the passing of virtually any string or number value between a message transformer and an operation handler. The sessionAttribute object can contain zero or more key/value pairs of data that are valid for the duration of a computer telephony integration provider defined session. Session attributes can also be accessed within a contact flow. The operation handler determines what session attribute key/value pairs are needed as it consumes these values. Typically the message transformer sets these attributes on the CTIOperationRequest object by calling this method and the operation handler gets the attributes using the [CTIOperationRequest - getSessionAttribute(String key)](https://developer.servicenow.com/go_to_api.do?ID=CTIOpReq-getSessionAttribute_S&v=paris) or [CTIOperationRequest - getSessionAttribute()](https://developer.servicenow.com/go_to_api.do?ID=CTIOpReq-getSessionAttributes&v=paris) method.
	 * 
	 * Note: You should only store objects that can survive a JSON.parse(JSON.stringify(object)) operation. Objects not meeting this criteria may not propagate correctly through the entire operation processing chain.
	 * 
	 * For example:
	 * 
	 * var x = {
	 *   "string": 'abc',
	 *   "int": 123,
	 *   "float": 1.234,
	 *   "number": new Number(3),
	 *   "boolean": true,
	 *   "date": new Date(2006, 0, 2, 15, 4, 5),
	 *   "object": {
	 *     "string": 'abc',
	 *     "int": 123,
	 *     "float": 1.234,
	 *     "number": new Number(3),
	 *     "boolean": true,
	 *     "date": new Date(2006, 0, 2, 15, 4, 5)
	 *   },
	 *   "function": function(abc) {
	 * 
	 *   }
	 * }
	 * var stringify = JSON.stringify(x);
	 * gs.info(stringify);
	 * var hydrate = JSON.parse(stringify);
	 * var stringify2 = JSON.stringify(hydrate);
	 * gs.info(stringify2);
	 * 
	 * Produces:
	 * 
	 * {"string":"abc","int":123,"float":1.234,"number":3,"boolean":true,"date":"2006-01-02T23:04:05.000Z","object":{"string":"abc","int":123,"float":1.234,"number":3,"boolean":true,"date":"2006-01-02T23:04:05.000Z"}}
	 * {"string":"abc","int":123,"float":1.234,"number":3,"boolean":true,"date":"2006-01-02T23:04:05.000Z","object":{"string":"abc","int":123,"float":1.234,"number":3,"boolean":true,"date":"2006-01-02T23:04:05.000Z"}}
	 * 
	 * @example
	 * //
	 * var request = new sn_cti_core.CTIOperationRequest('origin');
	 * request.setSessionAttribute('contact.phone', '+15552222345');
	 * request.setSessionAttribute('contact.okToCall', true);
	 * request.setSessionAttribute('contact.address', {
	 *     street: '1234 Main St'
	 *     city: 'API City',
	 *     zip: 91335
	 * });
	 * 
	 * @param key Name of the key under which to store the associated value.
	 * @param value Value to store.  Valid data types:  *   string *   int *   float *   number *   boolean *   date *   object
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setSessionAttribute(key: string,value: Object) : void
	/**
	 * @description Sets the behavior to perform if the current substep's operation handler is not found.
	 * This method should be called by the input message transformer.
	 * 
	 * @example
	 * //
	 * (function(  ctx) {
	 *   try {
	 *     var jsonPayload = httpRequest.body.data;
	 *     if (jsonPayload) {
	 *       var event = jsonPayload.event;
	 *       if (event) {
	 *         var intent = event.currentIntent;
	 * 	 var inputTranscript = event.inputTranscript;
	 * 	 if(inputTranscript) {
	 * 	   operationRequest.setParameter('$utterance', inputTranscript);
	 * 	 }
	 *         if (intent) {
	 *           operationRequest.setOperationName(intent.name);
	 * 	   // Add this because intent name gets changed through the pipeline
	 * 	   operationRequest.setParameter('$original_intent', intent.name);
	 *           var sessionAttributes = event.sessionAttributes;
	 *           if (sessionAttributes) {
	 *             for (var sk in sessionAttributes) {
	 *               switch (sk) {
	 *                 case 'interactionId':
	 *                   operationRequest.setInteractionSysId(sessionAttributes[sk]);
	 *                   break;
	 *                 case 'authToken':
	 *                   operationRequest.setAuthToken(sessionAttributes[sk]);
	 *                   break;
	 * 		  case 'language':
	 * 		    operationRequest.setLanguage(sessionAttributes[sk]);
	 * 		    break;
	 *                 case 'statusCode':
	 *                 case 'message':
	 *                   break;
	 *                 default:
	 *                   operationRequest.setSessionAttribute(sk, sessionAttributes[sk]);
	 *               }
	 *             }
	 *           }
	 *           var slots = intent.slots;
	 * 	   // Always copy in slots they are the parameters for the operation
	 *           if (slots) {
	 *             for (var pk in slots) {
	 *               operationRequest.setParameter(pk, slots[pk]);
	 *             }
	 *           }
	 *           var invocationSource = event.invocationSource;
	 * 	   operationRequest.setParameter('$$invocationSource', invocationSource);
	 *           // Specific handling for dialog hooks with a way to overide for Amazon specific provider
	 *           if (invocationSource === 'DialogCodeHook') {
	 * 	     // Set substep to trigger forwarding to another handler IF it s present
	 * 	     operationRequest.setOperationSubStepName(invocationSource);
	 * 	     // Allow pass through behavior
	 * 	     var behaviourToUse = sn_cti_core.CTIOperationRequest.OperationNotFoundBehaviours.PassThrough;
	 * 	     operationRequest.setSubStepNotFoundBehaviour(behaviourToUse);
	 * 	     // Reserved - copy slots in so we can just use delegate as default if the call isn't handled
	 * 	     operationRequest.setParameter('$$slots', slots);
	 *           }
	 *         }
	 *       }
	 *     }
	 *   } catch (e) {
	 *       ctx.setError(e);
	 *   }
	 *   return operationRequest;
	 * })(httpRequest, operationRequest, ctx);
	 * 
	 * @param behaviour Behavior to use if a handling behavior is not specified for the substep. This must be a behavior defined on the CTIOperationRequest.OperationNotFoundBehaviours object.  Possible values:  *   ThrowError: Throw an error. *   PassThrough: Do not perform any further processing on the request, just return. *   RouteToOperation: Use the parent operation handler <operation\_name>.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setSubStepNotFoundBehaviour(behaviour: OperationNotFoundBehaviours) : void
	}
/**
	 * @description The CTIOperationResponse API provides methods to set and get data on the current CTIOperationResponse object.
	 * You use CTIOperationResponse objects to pass information between an operation handler and a message transformer within the Cloud Call Center framework.  	
 *   	
 * Typically, an operation handler is responsible for setting values on the CTIOperationResponse object as it processes the associated request. A message transformer is then responsible for getting the values from the CTIOperationRequest object and building the CTI-specific payload that is sent back to the computer telephony integrator (CTI) provider.  	
 *   	
 * The ServiceNow base system provides working operation handlers and message transformers that enable connection to Amazon Connect. When building contact flows within Amazon Connect, there are two integration points between Amazon services and a ServiceNow instance:	
 * 	
 * *   Amazon Web Services (AWS) Lambda Proxy (Invoke AWS Lambda function)	
 * *   AWS Lex Bot (Get Customer Input)	
 * 	
 * You can find the available operation handlers and message transformers for these integration points in the Operation Handlers \[sn\_cti\_operation\_handler\] and Provider Message Transformer \[sn\_cti\_provider\_msg\_transormer\] tables.  	
 *   	
 * The following operation handler script shows how to use various CTIOperationResponse methods to set values on the CTIOperationResponse object.  	
 *   	
 * 	
 *     (function( httpResponse) {	
 *     	// AWS Connect Lambda expects name value pairs only	
 *     	var out = {};	
 *     	for(var k in operationResponse.getSessionAttributes()) {	
 *     		out[k] = operationResponse.getSessionAttributes()[k];	
 *     	}	
 *     	out.statusCode = operationResponse.getStatusCode();	
 *     	out.message = operationResponse.getMessage();	
 *     	httpResponse.setBody(out);	
 *     })(operationResponse, httpResponse);	
 * 	
 *   	
 *   	
 * This API runs in the sn\_cti\_core namespace. Before you are able to access the CTIOperationRequest API, the Cloud Call Center Core (sn\_cti\_core) application must be installed. For information on this installation, see [Install Cloud Call Center applications](https://docs.servicenow.com/bundle/paris-servicenow-platform/page/product/cloud-call-center/task/install-ccc-apps.html).  	
 *   	
 * For additional information on the Cloud Call Center, see [Cloud Call Center](https://docs.servicenow.com/bundle/paris-servicenow-platform/page/product/cloud-call-center/concept/cloud-call-center-overview.html).
	 * 
	 */
	declare class CTIOperationResponseScopedGlobal {
	/**
	 * @description Instantiates a CTIOperationResponse object.
	 * @example
	 * //
	 * var response = new sn_cti_core.CTIOperationResponse();
	 * response.setMinorVersion(3);
	 * 
	 */
	constructor() 
	/**
	 * @description Returns the authentication token that was set on the CTIOperationResponse object.
	 * This token is used by the Cloud Call Center framework to authenticate the current Cloud Call Center user before executing the requested operation handler if the handler's auth\_required flag is set to true. The auth\_required flag is a field in the Operation Handler \[sn\_cti\_operation\_handler\] table. The life of an authentication token should be for the life of the call session, but is determined by the CTI provider.
	 * 
	 * You can define whatever authentication/authorization handling required by your implementation by creating your own authentication operation handler. Regardless of how the authentication token is generated, the message translator must pass the token back in the CTI payload. Additionally, the CTI provider must store this authentication token locally and pass it in each operation request that requires authentication.
	 * 
	 * If using the instance provided authenticate operation handler, the handler initiates the creation of the authentication token based on a four-digit user-entered pin. It then sets the authentication token in the sessionAttributes object of the CTIOperationResponse object. The associated message transformer translates the sessionAttributes object into the CTI-specific payload and then sends it to the CTI provider.
	 * 
	 * Note: If the authentication token is not passed, all requests to execute operation handlers with the auth\_required flag set will fail. If you do not use authentication, you do not need to maintain authentication tokens.
	 * 
	 * The ServiceNow base system provides working operation handlers and message transformers that enable connection to Amazon Connect. When building contact flows within Amazon Connect, there are two integration points between Amazon services and a ServiceNow instance:
	 * 
	 * *   Amazon Web Services (AWS) Lambda Proxy (Invoke AWS Lambda function)
	 * *   AWS Lex Bot (Get Customer Input)
	 * 
	 * You can find the available operation handlers and message transformers for these integration points in the Operation Handlers \[sn\_cti\_operation\_handler\] and Provider Message Transformer \[sn\_cti\_provider\_msg\_transormer\] tables.
	 * 
	 * @example
	 * //
	 * var response = new sn_cti_core.CTIOperationResponse();
	 * var token = response.getAuthToken();
	 * 
	 * @returns string The authentication token previously set on the CTIOperationRequest object. If not set, returns null.
	 * 
	 */
	getAuthToken() : string
	/**
	 * @description Returns the error object associated with the current CTIOperationResponse object.
	 * You might use this information to formulate the payload returned to the computer telephony integration (CTI) provider.
	 * 
	 * @example
	 * //
	 * (function(  httpResponse) {
	 *     var sessionAttributes = {},
	 *         intentResponse;
	 *     var statusCode = -1;
	 *     var message = 'Unprocessed';
	 *     if (operationResponse) {
	 *         statusCode = operationResponse.getStatusCode();
	 *         sessionAttributes = operationResponse.getSessionAttributes();
	 *         message = operationResponse.getMessage();
	 *         var error = operationResponse.getError();
	 *         if (error) {
	 *             sessionAttributes.error = error;
	 *         }
	 *     }
	 *     if (sn_cti_core.CTIRequestDispatcher.Constants.HTTP.Status.AUTH_REQUIRED.code === statusCode) {
	 *         //first call for a secure action without authentication token
	 *         sessionAttributes.statusCode = 401;
	 *         sessionAttributes.message = message;
	 *         intentResponse = {
	 *             sessionAttributes: sessionAttributes,
	 *             dialogAction: {
	 *                 type: 'Close',
	 *                 fulfillmentState: 'Fulfilled',
	 *                 message: {
	 *                     contentType: 'PlainText',
	 *                     content: 'This operation requires authentication. Say authenticate for authentication.'
	 *                 }
	 *             }
	 *         };
	 *     } else if ('DialogCodeHook' === operationRequest.getParameter('$$invocationSource')) {
	 *         //pass back authToken and interactionId
	 *         sessionAttributes.authToken = operationRequest.getAuthToken();
	 *         sessionAttributes.interactionId = operationRequest.getInteractionSysId();
	 * 		var originalSlots = operationRequest.getParameter('$$slots');
	 *         var responseParameters = operationResponse ? operationResponse.getParameters() : {};
	 *         responseParameters = responseParameters ? responseParameters : {};
	 *         // See if we processing happened and we got a dialogAction
	 * 		var responseDialogAction = responseParameters['dialogAction'];
	 * 		// Default dialog action
	 *         var dialogAction = {
	 *             type: 'Delegate',
	 *             slots: originalSlots
	 *         };
	 * 		// If the response doesn't contain an override replay the inputs
	 *         if (responseDialogAction) {
	 *             // We bypassed dialoghook so delegate and pass through inputs
	 *             dialogAction = responseDialogAction;
	 *         }
	 *         intentResponse = {
	 *             sessionAttributes: sessionAttributes,
	 *             dialogAction: dialogAction
	 *         };
	 *     } else {
	 *         // Override required session attributes
	 *         sessionAttributes.statusCode = statusCode;
	 *         sessionAttributes.message = message;
	 *         // Build response template
	 *         intentResponse = {
	 *             sessionAttributes: sessionAttributes,
	 *             dialogAction: {
	 *                 type: 'Close',
	 *                 fulfillmentState: 'Fulfilled',
	 *                 message: {
	 *                     contentType: 'PlainText',
	 *                     content: message
	 *                 }
	 *             }
	 *         };
	 *     }
	 *     httpResponse.setBody(intentResponse);
	 * })(ctx, operationRequest, operationResponse, httpResponse);
	 * 
	 * @returns Object Operation error information. The format of this object is determined by the CTI provider. If an error does not exist, returns null.
	 * 
	 */
	getError() : Object
	/**
	 * @description Returns the sys\_id of the interaction record associated with the call session that was set on the CTIOperationResponse object.
	 * The [CTIOperationResponse - setInteractionSysId(String Id)](https://developer.servicenow.com/go_to_api.do?ID=CTIOpResp-setInteractionSysId_S&v=paris) method must have been called prior to calling this method.
	 * 
	 * @example
	 * //
	 * var request = new sn_cti_core.CTIOperationResponse();
	 * var interactionId = request.getInteractionSysId();
	 * 
	 * 
	 * @returns string The sys\_id of the interaction record set on the CTIOperationResponse object. Interaction records are located in the Interaction \[interaction\] table.  If the interaction record sys\_id is not set, the method returns null.
	 * 
	 */
	getInteractionSysId() : string
	/**
	 * @description Returns the major version of the computer telephony integrator (CTI) software set on the current CTIOperationResponse object.
	 * Use this method if the CTI providers connected to your ServiceNow instance are running multiple versions of their software, as different software versions may require different payloads. If the payload is only slightly different between the software versions, it may make sense to have only a single message transformer. You can then handle the payload differences by just checking the version of software making the request within your message transformer. If the required payload is significantly different between versions, it may be more effective to use multiple message transformers.
	 * 
	 * @example
	 * //
	 * var request = new sn_cti_core.CTIOperationResponse();
	 * var majorVersion = response.getMajorVersion();
	 * 
	 * @returns number Major version number of the CTI software.  If the major version was never set, returns 1.
	 * 
	 */
	getMajorVersion() : number
	/**
	 * @description Returns the message string set on the current CTIOperationResponse object.
	 * Typically this is a message that is spoken back to the user once an operation is complete. You can set this value using the [CTIOperationResponse - setMessage(String message)](https://developer.servicenow.com/go_to_api.do?ID=CTIOpResp-setMessage_S&v=paris) method.
	 * 
	 * @example
	 * //
	 * (function ( httpResponse) {
	 *   // AWS Connect Lambda expects name value pairs only
	 *   var out = {};
	 *   for(var k in operationResponse.getSessionAttributes()) {
	 *     out[k] = operationResponse.getSessionAttributes()[k];
	 *   }
	 *   out.statusCode = operationResponse.getStatusCode();
	 *   out.message = operationResponse.getMessage();
	 *   httpResponse.setBody(out);
	 * })(operationResponse, httpResponse);
	 * 
	 * @returns string Message text. If no message exists, returns null.
	 * 
	 */
	getMessage() : string
	/**
	 * @description Returns the minor version of the computer telephony integrator (CTI) software set on the current CTIOperationResponse object.
	 * Use this method if the CTI providers connected to your ServiceNow instance are running multiple versions of their software, as different software versions may require different payloads. If the payload is only slightly different between the software versions, it may make sense to have only a single message transformer. You can then handle the payload differences by just checking the version of software making the request within your message transformer. If the required payload is significantly different between versions, it may be more effective to use multiple message transformers.
	 * 
	 * @example
	 * //
	 * var request = new sn_cti_core.CTIOperationResponse();
	 * var minorVersion = request.getMinorVersion();
	 * 
	 * @returns number Minor version number of the payload associated with this interaction.  If the minor version was never set, returns 0.
	 * 
	 */
	getMinorVersion() : number
	/**
	 * @description Returns the value of a specified key previously set on the current CTIOperationResponse object.
	 * Using the get/set parameter methods enables the passing of virtually any string or number value between an operation handler and a message transformer. The parameter object can contain zero or more key/value pairs of data that directly correlate to the current operation response. The operation handler determines what key/value pairs are required as it produces these values. Use the [CTIOperationResponse - setParameter(String key, Object value)](https://developer.servicenow.com/go_to_api.do?ID=CTIOpResp-setParameter_S_O&v=orlando) method to set parameters on the current CTIOperationResponse object.
	 * 
	 * @example
	 * //
	 * var request = new sn_cti_core.CTIOperationResponse();
	 * var parm = request.getParameter('contact.phone');
	 * 
	 * @param key The name of the key value to return.
	 * 
	 * @returns string The value of the passed in key. If no such key exists, returns null.
	 * 
	 */
	getParameter(key: string) : string
	/**
	 * @description Returns the key-value pairs for all parameters that were previously set on the current CTIOperationResponse object.
	 * Using the get/set parameter methods enables the passing of virtually any string or number value between an operation handler and a message transformer. The parameter object can contain zero or more key/value pairs of data that directly correlate to the current operation response. The operation handler determines what key/value pairs are required as it produces these values. Use the [CTIOperationResponse - setParameter(String key, Object value)](https://developer.servicenow.com/go_to_api.do?ID=CTIOpResp-setParameter_S_O&v=orlando) method to set parameters on the current CTIOperationResponse object.
	 * 
	 * @example
	 * //
	 * (function(  httpResponse) {
	 *   var sessionAttributes = {},
	 *       intentResponse;
	 *   var statusCode = -1;
	 *   var message = 'Unprocessed';
	 *   if (operationResponse) {
	 *     statusCode = operationResponse.getStatusCode();
	 *     sessionAttributes = operationResponse.getSessionAttributes();
	 *     message = operationResponse.getMessage();
	 *     var error = operationResponse.getError();
	 *     if (error) {
	 *       sessionAttributes.error = error;
	 *     }
	 *   }
	 *   if (sn_cti_core.CTIRequestDispatcher.Constants.HTTP.Status.AUTH_REQUIRED.code === statusCode) {
	 *     //first call for a secure action without authentication token
	 *     sessionAttributes.statusCode = 401;
	 *     sessionAttributes.message = message;
	 *     intentResponse = {
	 *       sessionAttributes: sessionAttributes,
	 *       dialogAction: {
	 *         type: 'Close',
	 *         fulfillmentState: 'Fulfilled',
	 *         message: {
	 *           contentType: 'PlainText',
	 *           content: 'This operation requires authentication. Say authenticate for authentication.'
	 *         }
	 *       }
	 *     };
	 *   } else if ('DialogCodeHook' === operationRequest.getParameter('$$invocationSource')) {
	 *       //pass back authToken and interactionId
	 *       sessionAttributes.authToken = operationRequest.getAuthToken();
	 *       sessionAttributes.interactionId = operationRequest.getInteractionSysId();
	 *       var originalSlots = operationRequest.getParameter('$$slots');
	 *       var responseParameters = operationResponse ? operationResponse.getParameters() : {};
	 *       responseParameters = responseParameters ? responseParameters : {};
	 *       // See if processing happened and we got a dialogAction
	 *       var responseDialogAction = responseParameters['dialogAction'];
	 *       // Default dialog action
	 *       var dialogAction = {
	 *         type: 'Delegate',
	 *         slots: originalSlots
	 *       };
	 *       // If the response doesn't contain an override replay the inputs
	 *       if (responseDialogAction) {
	 *         // We bypassed dialoghook so delegate and pass through inputs
	 *         dialogAction = responseDialogAction;
	 *       }
	 *         intentResponse = {
	 *             sessionAttributes: sessionAttributes,
	 *             dialogAction: dialogAction
	 *         };
	 *     } else {
	 *       // Override required session attributes
	 *       sessionAttributes.statusCode = statusCode;
	 *       sessionAttributes.message = message;
	 *       // Build response template
	 *       intentResponse = {
	 *         sessionAttributes: sessionAttributes,
	 *         dialogAction: {
	 *           type: 'Close',
	 *           fulfillmentState: 'Fulfilled',
	 *           message: {
	 *             contentType: 'PlainText',
	 *             content: message
	 *           }
	 *         }
	 *       };
	 *   }
	 *   httpResponse.setBody(intentResponse);
	 * })(ctx, operationRequest, operationResponse, httpResponse);
	 * 
	 * @returns Object A map of key-value pairs that were previously set on the CTIOperationResponse object. This key-value pairs are free-form and defined by the needs of the operation handler. The returned values are either Strings or Numbers.
	 * 
	 */
	getParameters() : Object
	/**
	 * @description Returns the value for a specified session attribute key set on the current CTIOperationResponse object.
	 * Using the get/set session attribute methods enables the passing of virtually any string or number value between an operation handler and a message transformer. Session attributes can also be accessed within a contact flow. The sessionAttribute object can contain zero or more key/value pairs of data, such as the contact's phone number, that are valid for the duration of a computer telephony integration provider defined session. The operation handler determines what session attribute key/value pairs are needed as it utilizes these values during processing. Typically the operation handler sets these attributes on the CTIOperationResponse object by calling the [CTIOperationResponse - setSessionAttribute(String key, Object value)](https://developer.servicenow.com/go_to_api.do?ID=CTIOpResp-setSessionAttribute_S_O&v=orlando) method and the message transformer consumes the attributes using this method.
	 * 
	 * @example
	 * //
	 * var response = new sn_cti_core.CTIOperationResponse();
	 * var phoneAttribute = response.getSessionAttribute('contact.phone');
	 * 
	 * @param key The name of the key value to return.
	 * 
	 * @returns string Value of the passed in key. If no such key exists, returns null.
	 * 
	 */
	getSessionAttribute(key: string) : string
	/**
	 * @description Returns the key-value pairs for all session attributes that were previously set on the current CTIOperationResponse object.
	 * Using the get/set session attribute methods enables the passing of virtually any string or number value between an operation handler and a message transformer. Session attributes can also be accessed within a contact flow. The sessionAttribute object can contain zero or more key/value pairs of data, such as the contact's phone number, that are valid for the duration of a computer telephony integration provider defined session. The operation handler determines what session attribute key/value pairs are needed as it utilizes these values during processing. Typically the operation handler sets these attributes on the CTIOperationResponse object by calling the [CTIOperationResponse - setSessionAttribute(String key, Object value)](https://developer.servicenow.com/go_to_api.do?ID=CTIOpResp-setSessionAttribute_S_O&v=orlando) method and the message transformer consumes the attributes using this method.
	 * 
	 * @example
	 * //
	 * (function ( httpResponse) {
	 *   // AWS Connect Lambda expects name value pairs only
	 *   var out = {};
	 *   for(var k in operationResponse.getSessionAttributes()) {
	 *     out[k] = operationResponse.getSessionAttributes()[k];
	 *   }
	 *   out.statusCode = operationResponse.getStatusCode();
	 *   out.message = operationResponse.getMessage();
	 *   httpResponse.setBody(out);
	 * })(operationResponse, httpResponse);
	 * 
	 * @returns Object A map of key-value pairs that were previously set on the CTIOperationResponse object. This key-value pairs are free-form and defined by the needs of the operation handler. The returned values are either Strings or Numbers.
	 * 
	 */
	getSessionAttributes() : Object
	/**
	 * @description Returns the status code set on the current CTIOperationResponse object.
	 * These status codes should correspond with standard HTTP status codes, such as 200 for success, 401 for authorization required. Typically, the resultant status codes are determined by the operation handler and are set on the CTIOperationResponse object using the [CTIOperationResponse - setStatusCode(String statusCode)](https://developer.servicenow.com/go_to_api.do?ID=CTIOpResp-setStatusCode_N&v=paris) method. The message transformer then uses this method to include the status code in the payload returned to the computer telephony integrator provider.
	 * 
	 * @example
	 * //
	 * (function ( httpResponse) {
	 *   // AWS Connect Lambda expects name value pairs only
	 *   var out = {};
	 *   for(var k in operationResponse.getSessionAttributes()) {
	 *     out[k] = operationResponse.getSessionAttributes()[k];
	 *   }
	 *   out.statusCode = operationResponse.getStatusCode();
	 *   out.message = operationResponse.getMessage();
	 *   httpResponse.setBody(out);
	 * })(operationResponse, httpResponse);
	 * 
	 * @returns number Status code of the current operation. If a status code has not been set, returns -1.
	 * 
	 */
	getStatusCode() : number
	/**
	 * @description Sets an authentication token on the current CTIOperationResponse object.
	 * This token is used by the Cloud Call Center framework to authenticate the current Cloud Call Center user before executing the requested operation handler if the handler's auth\_required flag is set to true. The auth\_required flag is a field in the Operation Handler \[sn\_cti\_operation\_handler\] table. The life of an authentication token should be for the life of the call session, but is determined by the CTI provider.
	 * 
	 * You can define whatever authentication/authorization handling required by your implementation by creating your own authentication operation handler. Regardless of how the authentication token is generated, the message translator must pass the token back in the CTI payload. Additionally, the CTI provider must store this authentication token locally and pass it in each operation request that requires authentication.
	 * 
	 * If using the instance provided authenticate operation handler, the handler initiates the creation of the authentication token based on a four-digit user-entered pin. It then sets the authentication token in the sessionAttributes object of the CTIOperationResponse object. The associated message transformer translates the sessionAttributes object into the CTI-specific payload and then sends it to the CTI provider.
	 * 
	 * Note: If the authentication token is not passed, all requests to execute operation handlers with the auth\_required flag set will fail. If you do not use authentication, you do not need to maintain authentication tokens.
	 * 
	 * The ServiceNow base system provides working operation handlers and message transformers that enable connection to Amazon Connect. When building contact flows within Amazon Connect, there are two integration points between Amazon services and a ServiceNow instance:
	 * 
	 * *   Amazon Web Services (AWS) Lambda Proxy (Invoke AWS Lambda function)
	 * *   AWS Lex Bot (Get Customer Input)
	 * 
	 * You can find the available operation handlers and message transformers for these integration points in the Operation Handlers \[sn\_cti\_operation\_handler\] and Provider Message Transformer \[sn\_cti\_provider\_msg\_transormer\] tables.
	 * 
	 * @example
	 * //
	 * var response = new sn_cti_core.CTIOperationResponse();
	 * var authenticate = &lt;Your authentication code here&gt;; // Authenticate the user
	 * if (authenticated) {
	 * 	var claims = {
	 * 		"interactionId":interactionGr.sys_id.toString()
	 * 	};
	 * 	var jwt = new sn_cti_core.AuthHelpers().generateJWT(claims);
	 * 	response.setAuthToken(jwt);
	 * }
	 * 
	 * @returns string The authentication token to use to authenticate operations that have the auth\_required flag set.
	 * 
	 */
	setAuthToken() : string
	/**
	 * @description Sets the error object in the current CTIOperationResponse object.
	 * You can use the error object in the component to formulate the payload to send to the computer telephony integrator (CTI) provider.
	 * 
	 * @example
	 * //
	 * var response = new sn_cti_core.CTIOperationResponse();
	 * response.setError(new Error(“You did not supply a field”));
	 * 
	 * @param error Information about the error that was detected while processing the requested operation. The format of this object is determined by the CTI provider.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setError(error: Object) : void
	/**
	 * @description Sets the sys\_id of the interaction record associated with the operation request on the current CTIOperationResponse object.
	 * @example
	 * //
	 * var response = new sn_cti_core.CTIOperationResponse();
	 * response.setInteractionSysId('98529cc55380001048e5ddeeff7b120b');
	 * 
	 * 
	 * @param sys_id The sys\_id to set for the current interaction.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setInteractionSysId(sys_id: string) : void
	/**
	 * @description Sets the major version of the computer telephony integrator (CTI) provider software making the request on the associated CTIOperationResponse object.
	 * Use this method if the CTI providers connected to your ServiceNow instance are running multiple versions of their software, as different software versions may require different payloads. If the payload is only slightly different between the software versions, it may make sense to have only a single message transformer. You can then handle the payload differences by just checking the version of software making the request within your message transformer. If the required payload is significantly different between versions, it may be more effective to use multiple message transformers.
	 * 
	 * @example
	 * //
	 * var request = new sn_cti_core.CTIOperationResponse();
	 * request.setMajorVersion(2);
	 * 
	 * @param majorVersion Major version of the CTI provider software making the operation request.  If this value was not previously set, returns 1.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setMajorVersion(majorVersion: number) : void
	/**
	 * @description Sets a text message on the current CTIOperationResponse object.
	 * Typically this is a message that is spoken back to the user once an operation is complete and is set by the associated operation handler. The message transformer then uses the [CTIOperationResponse - getMessage()](https://developer.servicenow.com/go_to_api.do?ID=CTIOpResp-getMessage&v=paris) method to obtain the message and pass it back to the computer telephony integration provider.
	 * 
	 * @example
	 * //
	 * (function( ctx) {	
	 *   var notes = '', lang = request.getLanguage();
	 *   try { 
	 * 		
	 *     var interactionGr = request.getInteractionRecord();
	 * 
	 *     var now_GR = new GlideRecord('sys_user');
	 *     if(interactionGr &amp;&amp; now_GR.get(interactionGr.opened_for.toString())) {	
	 *       if(now_GR.locked_out == true) {
	 *         notes += gs.getMessageLang("User record found locked. Unlocking the account.\n", lang);
	 *         now_GR.locked_out=false;
	 *         now_GR.update();
	 *         response.setStatusCode(200);
	 *         response.setMessage(gs.getMessageLang("Your account has been unlocked.", lang));
	 *       } else {
	 *         notes += gs.getMessageLang("User record not locked.\n", lang);
	 *         response.setStatusCode(200);
	 *         response.setMessage(gs.getMessageLang("Your account doesn't seem to be locked.", lang));
	 *       }	
	 *     } else {
	 *       notes += gs.getMessageLang("User record not found. Transfer to agent\n", lang);
	 *       response.setStatusCode(302);
	 *       response.setMessage(gs.getMessageLang("I am unable to find your record. Let me transfer to someone who can help.", lang));
	 *     }
	 *     if(interactionGr) {
	 *       interactionGr.work_notes = notes;
	 *       interactionGr.update();
	 *     }
	 *   } catch(e) {
	 *     ctx.setError(e);
	 *   }
	 * })(request, response, ctx);
	 * 
	 * @param message Message text
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setMessage(message: string) : void
	/**
	 * @description Sets the minor version of the computer telephony integrator (CTI) provider software making the request on the associated CTIOperationResponse object.
	 * Use this method if the CTI providers connected to your ServiceNow instance are running multiple versions of their software, as different software versions may require different payloads. If the payload is only slightly different between the software versions, it may make sense to have only a single message transformer. You can then handle the payload differences by just checking the version of software making the request within your message transformer. If the required payload is significantly different between versions, it may be more effective to use multiple message transformers.
	 * 
	 * @example
	 * //
	 * var response = new sn_cti_core.CTIOperationResponse();
	 * response.setMinorVersion(3);
	 * 
	 * @param minorVersion Minor version of the CTI provider software making the operation request.  If this value was not previously set, returns 0.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setMinorVersion(minorVersion: number) : void
	/**
	 * @description Sets the specified key-value pair on the associated CTIOperationResponse object.
	 * Using the get/set parameter methods enables the passing of virtually any string or number value between an operation handler and a message transformer. The parameter object can contain zero or more key/value pairs of data that directly correlate to the current operation request. The operation handler determines what key/value pairs are required as it consumes these values. Typically the operation handler sets these parameters on the CTIOperationResponse object by calling this method and the message transformer consumes them using the [CTIOperationResponse - getParmeter(String key)](https://developer.servicenow.com/go_to_api.do?ID=CTIOpResp-getParameter_S&v=paris) or [CTIOperationResponse - getSParameters()](https://developer.servicenow.com/go_to_api.do?ID=CTIOpResp-getParameters&v=paris) method.
	 * 
	 * Note: You should only store objects that can survive a JSON.parse(JSON.stringify(object)) operation. Objects not meeting this criteria may not propagate correctly through the entire operation processing chain.
	 * 
	 * For example:
	 * 
	 * var x = {
	 *   "string": 'abc',
	 *   "int": 123,
	 *   "float": 1.234,
	 *   "number": new Number(3),
	 *   "boolean": true,
	 *   "date": new Date(2006, 0, 2, 15, 4, 5),
	 *   "object": {
	 *     "string": 'abc',
	 *     "int": 123,
	 *     "float": 1.234,
	 *     "number": new Number(3),
	 *     "boolean": true,
	 *     "date": new Date(2006, 0, 2, 15, 4, 5)
	 *   },
	 *   "function": function(abc) {
	 * 
	 *   }
	 * }
	 * var stringify = JSON.stringify(x);
	 * gs.info(stringify);
	 * var hydrate = JSON.parse(stringify);
	 * var stringify2 = JSON.stringify(hydrate);
	 * gs.info(stringify2);
	 * 
	 * Produces:
	 * 
	 * {"string":"abc","int":123,"float":1.234,"number":3,"boolean":true,"date":"2006-01-02T23:04:05.000Z","object":{"string":"abc","int":123,"float":1.234,"number":3,"boolean":true,"date":"2006-01-02T23:04:05.000Z"}}
	 * {"string":"abc","int":123,"float":1.234,"number":3,"boolean":true,"date":"2006-01-02T23:04:05.000Z","object":{"string":"abc","int":123,"float":1.234,"number":3,"boolean":true,"date":"2006-01-02T23:04:05.000Z"}}
	 * 
	 * @example
	 * //
	 * var response = new sn_cti_core.CTIOperationResponse();
	 * response.setParameter('contact.phone', '+15552222345');
	 * response.setParameter('contact.okToCall', true);
	 * response.setParameter('contact.address', {
	 *     street: '1234 Main St'
	 *     city: 'API City',
	 *     zip: 91335
	 * });
	 * 
	 * @param key Name of the key under which to store the associated value.
	 * @param value Value to store for the key.  Valid data types:  *   string *   int *   float *   number *   boolean *   date *   object
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setParameter(key: string,value: Object) : void
	/**
	 * @description Sets the specified session attribute key-value pair on the associated CTIOperationResponse object.
	 * Using the get/set session attribute methods enables the passing of virtually any string or number value between an operation handler and a message transformer. The sessionAttribute object can contain zero or more key/value pairs of data that are valid for the duration of a computer telephony integration provider defined session. Session attributes can also be accessed within a contact flow. The operation handler determines what session attribute key/value pairs are needed as it consumes these values. Typically the operation handler sets these attributes on the CTIOperationResponse object by calling this method and the message transformer gets the attributes using the [CTIOperationResponse - getSessionAttribute(String key)](https://developer.servicenow.com/go_to_api.do?ID=CTIOpResp-getSessionAttribute_S&v=paris) or [CTIOperationResponse - getSessionAttribute()](https://developer.servicenow.com/go_to_api.do?ID=CTIOpResp-getSessionAttributes&v=paris) method.
	 * 
	 * Note: You should only store objects that can survive a JSON.parse(JSON.stringify(object)) operation. Objects not meeting this criteria may not propagate correctly through the entire operation processing chain.
	 * 
	 * For example:
	 * 
	 * var x = {
	 *   "string": 'abc',
	 *   "int": 123,
	 *   "float": 1.234,
	 *   "number": new Number(3),
	 *   "boolean": true,
	 *   "date": new Date(2006, 0, 2, 15, 4, 5),
	 *   "object": {
	 *     "string": 'abc',
	 *     "int": 123,
	 *     "float": 1.234,
	 *     "number": new Number(3),
	 *     "boolean": true,
	 *     "date": new Date(2006, 0, 2, 15, 4, 5)
	 *   },
	 *   "function": function(abc) {
	 * 
	 *   }
	 * }
	 * var stringify = JSON.stringify(x);
	 * gs.info(stringify);
	 * var hydrate = JSON.parse(stringify);
	 * var stringify2 = JSON.stringify(hydrate);
	 * gs.info(stringify2);
	 * 
	 * Produces:
	 * 
	 * {"string":"abc","int":123,"float":1.234,"number":3,"boolean":true,"date":"2006-01-02T23:04:05.000Z","object":{"string":"abc","int":123,"float":1.234,"number":3,"boolean":true,"date":"2006-01-02T23:04:05.000Z"}}
	 * {"string":"abc","int":123,"float":1.234,"number":3,"boolean":true,"date":"2006-01-02T23:04:05.000Z","object":{"string":"abc","int":123,"float":1.234,"number":3,"boolean":true,"date":"2006-01-02T23:04:05.000Z"}}
	 * 
	 * @example
	 * //
	 * var response = new sn_cti_core.CTIOperationResponse();
	 * response.setSessionAttribute('contact.phone', '+15552222345');
	 * response.setSessionAttribute('contact.okToCall', true);
	 * response.setSessionAttribute('contact.address', {
	 *     street: '1234 Main St'
	 *     city: 'API City',
	 *     zip: 91335
	 * });
	 * 
	 * @param key Name of the session attribute key under which to set the associated value.
	 * @param value Value to set.  Valid data types:  *   string *   int *   float *   number *   boolean *   date *   object
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setSessionAttribute(key: string,value: Object) : void
	/**
	 * @description Sets the status code of the current operation request on the CTIOperationResponse object.
	 * You can use any integer values to define the status, but it is recommended that you emulate the HTTP status codes, such as 200 = Ok/Success, 400 = Bad Request, 401 = Unauthorized.
	 * 
	 * @example
	 * //
	 * (function( ctx) {	
	 *   var notes = '', lang = request.getLanguage();
	 *   try { 
	 * 		
	 *     var interactionGr = request.getInteractionRecord();
	 * 
	 *     var now_GR = new GlideRecord('sys_user');
	 *     if(interactionGr &amp;&amp; now_GR.get(interactionGr.opened_for.toString())) {	
	 *       if(now_GR.locked_out == true) {
	 *         notes += gs.getMessageLang("User record found locked. Unlocking the account.\n", lang);
	 *         now_GR.locked_out=false;
	 *         now_GR.update();
	 *         response.setStatusCode(200);
	 *         response.setMessage(gs.getMessageLang("Your account has been unlocked.", lang));
	 *       } else {
	 *         notes += gs.getMessageLang("User record not locked.\n", lang);
	 *         response.setStatusCode(200);
	 *         response.setMessage(gs.getMessageLang("Your account doesn't seem to be locked.", lang));
	 *       }	
	 *     } else {
	 *       notes += gs.getMessageLang("User record not found. Transfer to agent\n", lang);
	 *       response.setStatusCode(302);
	 *       response.setMessage(gs.getMessageLang("I am unable to find your record. Let me transfer to someone who can help.", lang));
	 *     }
	 *     if(interactionGr) {
	 *       interactionGr.work_notes = notes;
	 *       interactionGr.update();
	 *     }
	 *   } catch(e) {
	 *     ctx.setError(e);
	 *   }
	 * })(request, response, ctx);
	 * 
	 * @param statusCode Integer that uniquely identifies the status of the requested operation.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setStatusCode(statusCode: number) : void
	}
declare namespace sn_cti_core {
	}
/**
	 * @description The GlideCurrencyConfig API provides methods to retrieve various configuration information for FX Currency fields.
	 * You can acquire information for a specific FX Currency field by calling the [GlideCurrencyConfig(Object ed)](https://developer.servicenow.com/go_to_api.do?ID=S-GCConfig-GlideCurrencyConfig_O&v=paris) constructor, which associates a specific FX Currency field to the instantiated object. When calling the various GlideCurrencyConfig() methods, if a record exists in the FX Currency Configuration \[fx\_configuration\] table for the FX Currency field, the requested value is passed back. If a record or field is not available, the default value is passed back. You can also acquire the default FX Currency configuration values by calling the [GlideCurrencyConfig()](https://developer.servicenow.com/go_to_api.do?ID=S-GCConfig-GlideCurrencyConfig&v=paris) constructor.  	
 *   	
 * For additional information on FX Currency configuration, see [Setting up and operating FX Currency fields](https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/currency/concept/fx-currency.html).  	
 *   	
 * This class runs is in the sn\_currency namespace.
	 * 
	 */
	declare class GlideCurrencyConfig {
	/**
	 * @description Returns the aggregation source value for an FX Currency field.
	 * If called on an existing FX Currency field that has a corresponding FX Currency Configuration \[fx\_configuration\] record, returns the value of the Aggregation Source (aggregation\_source) field. Otherwise, if a new record, returns a default value.
	 * 
	 * For more information on aggregation source, see [Specify the table field and its currency display parameters](https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/currency/concept/configure-fx-currency-field-behavior.html#fx-currency-display-parameters).
	 * 
	 * @example
	 * //This code example returns the default aggregation source.
	 * var cur_config = new sn_currency.GlideCurrencyConfig();
	 * var curr_agg_source = cur_config.getAggregationSource();
	 * 
	 * @example
	 * //This code example returns the aggregation source for a specific FX Currency field.
	 * var grCurr = new GlideRecord('my_FXCurrency_table');
	 * var curr_field = grCurr.getElement('currency');
	 * var ed = curr_field.getED();
	 * var cur_config = new sn_currency.GlideCurrencyConfig(ed);
	 * var curr_agg_source = cur_config.getAggregationSource();
	 * 
	 * @returns string Source of values for aggregations. The returned value depends on the constructor used to instantiate the object.  *   GlideCurrencyConfig(Object ed): If an fx\_configuration record exists, returns the aggregation\_source field from the fx\_configuration record that is associated with the FX Currency field specified by the GlideElementDescriptor passed in the constructor. If no fx\_configuration record, follows the GlideCurrencyConfig() rules. *   GlideCurrencyConfig(): If set, returns the value in the glide.currency2.aggregation\_source field in system properties. Otherwise, returns a hard-coded default of reference.  Possible values:  *   default *   as\_entered *   reference
	 * 
	 */
	getAggregationSource() : string
	/**
	 * @description Returns the field used as the source of the date and time for the currency conversion.
	 * If called on an existing FX Currency field that has a corresponding FX Currency Configuration \[fx\_configuration\] record, returns the value of the Conversion Date Source (conversion\_date\_source) field. Otherwise, if a new record, returns "null".
	 * 
	 * For more information on the Conversion Date Source field, see [Identify the rate table and date source for currency conversions](https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/currency/concept/configure-fx-currency-field-behavior.html#fx-currency-conv-rate-table-date-source).
	 * 
	 * @example
	 * //This code example returns the conversion date source for a specific FX Currency field.
	 * var grCurr = new GlideRecord('my_FXCurrency_table');
	 * var curr_field = grCurr.getElement('currency');
	 * var ed = curr_field.getED();
	 * var cur_config = new sn_currency.GlideCurrencyConfig(ed);
	 * var curr_conv_date_src = cur_config.getConversionDateSource();
	 * 
	 * @returns string Field in the record used as the conversion date source. The returned value depends on the constructor used to instantiate the object.  *   GlideCurrencyConfig(Object ed): If an fx\_configuration record exists, returns the conversion\_date\_source field from the fx\_configuration record that is associated with the FX Currency field specified by the GlideElementDescriptor passed in the constructor. If no fx\_configuration record, follows the GlideCurrencyConfig() rules. *   GlideCurrencyConfig(): Returns null.
	 * 
	 */
	getConversionDateSource() : string
	/**
	 * @description Returns the number of digits to display for an FX Currency field.
	 * If called on an existing FX Currency field that has a corresponding FX Currency Configuration \[fx\_configuration\] record, returns the value of the Display Digits (display\_digits) field. Otherwise, if a new record, returns a default value.
	 * 
	 * @example
	 * //This code example returns the default number of display digits.
	 * var cur_config = new sn_currency.GlideCurrencyConfig();
	 * var curr_display_digits = cur_config.getDisplayDigits();
	 * 
	 * @example
	 * //This code example returns the display digits for a specific FX Currency field.
	 * var grCurr = new GlideRecord('my_FXCurrency_table');
	 * var curr_field = grCurr.getElement('currency');
	 * var ed = curr_field.getED();
	 * var cur_config = new sn_currency.GlideCurrencyConfig(ed);
	 * var curr_display_digits = cur_config.getDisplayDigits();
	 * 
	 * @returns number Number of digits to display for the FX Currency field. The returned value depends on the constructor used to instantiate the object.  *   GlideCurrencyConfig(Object ed): If an fx\_configuration record exists, returns the value of the display\_digits field in the FX Currency Configuration \[fx\_configuration\] record that is associated with the FX Currency field specified by the GlideElementDescriptor passed in the constructor. If no fx\_configuration record, follows the GlideCurrencyConfig() rules. *   GlideCurrencyConfig(): If set, returns the value of the glide.currency2.display\_digits property in system properties. Otherwise, returns \-1.
	 * 
	 */
	getDisplayDigits() : number
	/**
	 * @description Returns the currency code used to convert the FX Currency value when it appears in lists and reports.
	 * If called on an existing FX Currency field that has a corresponding FX Currency Configuration \[fx\_configuration\] record, returns the value of the Display Value Currency (display\_value) field. Otherwise, if a new record, returns a default value.
	 * 
	 * @example
	 * //This code example returns the default currency code.
	 * var cur_config = new sn_currency.GlideCurrencyConfig();
	 * var curr_display_value = cur_config.getDisplayValue();
	 * 
	 * @example
	 * //This code example returns the display currency code for a specific FX Currency field.
	 * var grCurr = new GlideRecord('my_FXCurrency_table');
	 * var curr_field = grCurr.getElement('currency');
	 * var ed = curr_field.getED();
	 * var cur_config = new sn_currency.GlideCurrencyConfig(ed);
	 * var curr_display_value = cur_config.getDisplayValue();
	 * 
	 * @returns string Currency code to use to display the FX Currency field. The returned value depends on the constructor used to instantiate the object.  *   GlideCurrencyConfig(Object ed): If an fx\_configuration record exists, returns the display\_value field, which contains the currency code, from the fx\_configuration record that is associated with the FX Currency field specified by the GlideElementDescriptor passed in the constructor. If no fx\_configuration record, follows the GlideCurrencyConfig() rules. *   GlideCurrencyConfig(): If set, returns the value of the glide.currency2.display\_value property in system properties. Otherwise, returns as\_entered.  Possible values:  *   default: Global default. This is the value in the glide.currency2.display\_digits property. *   as\_entered: Currency value as entered by the user. *   in\_session\_currency: Currency value converted to the session currency. Session currency is based on the user's locale. *   in\_reference\_currency: Reference value if computed and stored. Otherwise, the currency value converted to the reference currency.
	 * 
	 */
	getDisplayValue() : string
	/**
	 * @description Returns the rate table field used as a rate table filter for an FX Currency field.
	 * If called on an existing FX Currency field that has a corresponding FX Currency Configuration \[fx\_configuration\] record, returns the value of the Rate Table Field (rate\_filter\_rate\_table\_field). Otherwise, if a new record, returns a default value.
	 * 
	 * For more information on rate table filters, see [Select the rate and target table fields used for filtering](https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/currency/concept/configure-fx-currency-field-behavior.html#fx-currency-rate-target-table-fields).
	 * 
	 * @example
	 * //This code example returns the rate table field used to filter rate table records for a specific FX Currency field.
	 * var grCurr = new GlideRecord('my_FXurrency_table');
	 * var curr_field = grCurr.getElement('currency');
	 * var ed = curr_field.getED();
	 * var cur_config = new sn_currency.GlideCurrencyConfig(ed);
	 * var curr_reference_currency = cur_config.getRateFilterRateTableField();
	 * 
	 * @returns string Field in the rate table used to filter the rate table records. The returned value depends on the constructor used to instantiate the object.  *   GlideCurrencyConfig(Object ed): If an fx\_configuration record exists, returns the rate\_filter\_rate\_table\_field from the fx\_configuration record that is associated with the FX Currency field specified by the GlideElementDescriptor passed in the constructor. If no fx\_configuration record, follows the GlideCurrencyConfig() rules. *   GlideCurrencyConfig(): Returns null.
	 * 
	 */
	getRateFilterRateTableField() : string
	/**
	 * @description Returns the target table field used to filter the rate table records for an FX Currency field.
	 * If called on an existing FX Currency field that has a corresponding FX Currency Configuration \[fx\_configuration\] record, returns the value of the Target Table Field (rate\_filter\_target\_table\_field). Otherwise, if a new record, returns a default value.
	 * 
	 * For more information on rate table filters, see [Select the rate and target table fields used for filtering](https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/currency/concept/configure-fx-currency-field-behavior.html#fx-currency-rate-target-table-fields).
	 * 
	 * @example
	 * //This code example returns the default rate filter, target table field.
	 * var cur_config = new sn_currency.GlideCurrencyConfig();
	 * var curr_rate_filter = cur_config.getRateFilterTargetTableField();
	 * 
	 * @example
	 * //This code example returns the rate filter, target table field for a specific FX Currency field.
	 * var grCurr = new GlideRecord('my_FXCurrency_table');
	 * var curr_field = grCurr.getElement('currency');
	 * var ed = curr_field.getED();
	 * var cur_config = new sn_currency.GlideCurrencyConfig(ed);
	 * var curr_rate_filter = cur_config.getRateFilterTargetTableField();
	 * 
	 * @returns string Field in the target table used/to use to filter the rate table. The returned value depends on the constructor used to instantiate the object.  *   GlideCurrencyConfig(Object ed): If an fx\_configuration record exists, returns the rate\_filter\_target\_table\_field from the fx\_configuration record that is associated with the FX Currency field specified by the GlideElementDescriptor passed in the constructor. If no fx\_configuration record, follows the GlideCurrencyConfig() rules. *   GlideCurrencyConfig(): Returns null.
	 * 
	 */
	getRateFilterTargetTableField() : string
	/**
	 * @description Returns the rate table used to convert currency for an FX Currency field.
	 * If called on an existing FX Currency field that has a corresponding FX Currency Configuration \[fx\_configuration\] record, returns the value of the Rate Table Field (rate\_filter\_rate\_table\_field). Otherwise, if a new record, returns a default value.
	 * 
	 * For more information on FX Currency rate tables, see [Identify the rate table and date source for currency conversions](https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/currency/concept/configure-fx-currency-field-behavior.html#fx-currency-conv-rate-table-date-source).
	 * 
	 * @example
	 * //Returns the default rate table.
	 * var cur_config = new sn_currency.GlideCurrencyConfig();
	 * var curr_rate_table = cur_config.getRateTable();
	 * 
	 * @example
	 * //Returns the rate table used for a specific FX Currency field.
	 * var grCurr = new GlideRecord('my_FXCurrency_table');
	 * var curr_field = grCurr.getElement('currency');
	 * var ed = curr_field.getED();
	 * var cur_config = new sn_currency.GlideCurrencyConfig(ed);
	 * var curr_rate_table = cur_config.getRateTable();
	 * 
	 * @returns string Name of the rate table used to perform the currency conversion. The returned value depends on the constructor used to instantiate the object.  *   GlideCurrencyConfig(Object ed): If an fx\_configuration record exists, returns the rate\_table\_field field from the fx\_configuration record that is associated with the FX Currency field specified by the GlideElementDescriptor passed in the constructor. If no fx\_configuration record, follows the GlideCurrencyConfig() rules. *   GlideCurrencyConfig(): If set, returns the value of the glide.currency2.system\_rate\_table property from system properties. Otherwise, returns fx\_system\_rate.
	 * 
	 */
	getRateTable() : string
	/**
	 * @description Returns the reference currency for an FX Currency field.
	 * If called on an existing FX Currency field that has a corresponding FX Currency Configuration \[fx\_configuration\] record, returns the value of the Reference Currency (reference\_currency) field. Otherwise, if a new record, returns a default value.
	 * 
	 * For more information on reference currency, see [Set the reference currency](https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/currency/concept/configure-fx-currency-field-behavior.html#fx-currency-set-reference).
	 * 
	 * @example
	 * //This code example returns the default reference currency.
	 * var cur_config = new sn_currency.GlideCurrencyConfig();
	 * var curr_reference_currency = cur_config.getReferenceCurrency();
	 * 
	 * @example
	 * //This code example returns the reference currency for a specific FX Currency field.
	 * var grCurr = new GlideRecord('my_FXCurrency_table');
	 * var curr_field = grCurr.getElement('currency');
	 * var ed = curr_field.getED();
	 * var cur_config = new sn_currency.GlideCurrencyConfig(ed);
	 * var curr_reference_currency = cur_config.getReferenceCurrency();
	 * 
	 * @returns string Reference currency as an ISO currency code. The returned value depends on the constructor used to instantiate the object.  *   GlideCurrencyConfig(Object ed): If an fx\_configuration record exists, returns the reference\_currency field from the fx\_configuration record that is associated with the FX Currency field specified by the GlideElementDescriptor passed in the constructor. If no fx\_configuration record, follows the GlideCurrencyConfig() rules. *   GlideCurrencyConfig(): If set, returns the value of the glide.currency2.default\_reference\_currency system property. Otherwise the method applies the following rules, in the specified order, to determine the reference currency code:     *   If the glide.system.reference\_currency system property is set to true, uses the value in the glide.system.reference\_currency.code system property.     *   The value in the glide.system.locale system property (which implies a currency).     *   Default locale of the Java Virtual Machine on which the instance is running.
	 * 
	 */
	getReferenceCurrency() : string
	/**
	 * @description Returns the reference currency source for an FX Currency field.
	 * If called on an existing FX Currency field that has a corresponding FX Currency Configuration \[fx\_configuration\] record, returns the value (dot-walk path) of the Reference Currency Source (reference\_currency\_source) field. Otherwise, if a new record, returns a default value.
	 * 
	 * For more information on reference currency source, see [Set the reference currency](https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/currency/concept/configure-fx-currency-field-behavior.html#fx-currency-set-reference).
	 * 
	 * @example
	 * //This code example returns the default reference currency source.
	 * var cur_config = new sn_currency.GlideCurrencyConfig();
	 * var curr_reference_currency = cur_config.getReferenceCurrencySource();
	 * 
	 * @example
	 * //This code example returns the reference currency source for a specific FX Currency field.
	 * var grCurr = new GlideRecord('my_FXCurrency_table');
	 * var curr_field = grCurr.getElement('currency');
	 * var ed = curr_field.getED();
	 * var cur_config = new sn_currency.GlideCurrencyConfig(ed);
	 * var curr_reference_currency = cur_config.getReferenceCurrencySource();
	 * 
	 * @returns string Dot-walk path of the field used/to use as the reference currency. The returned value depends on the constructor used to instantiate the object.  *   GlideCurrencyConfig(Object ed): If an fx\_configuration record exists, returns the reference\_currency\_source field from the fx\_configuration record that is associated with the FX Currency field specified by the GlideElementDescriptor passed in the constructor. If no fx\_configuration record, follows the GlideCurrencyConfig() rules. *   GlideCurrencyConfig(): Returns null.
	 * 
	 */
	getReferenceCurrencySource() : string
	/**
	 * @description Instantiates a GlideCurrencyConfig object that enables the retrieval of global default FX Currency configuration information.
	 * When calling the available methods on this type of GlideCurrencyConfig object, the return values are the FX Currency global defaults from system properties. If a global default is not defined in system properties, a hard-coded default is returned (this can also be an empty value if not configured). This object does not provide configuration information for a specific FX Currency field. To retrieve specific FX Currency field information, use the [GlideCurrencyConfig(Object ed)](https://developer.servicenow.com/go_to_api.do?ID=S-GCConfig-GlideCurrencyConfig_O&v=paris) constructor.
	 * 
	 * For more information on FX Currency fields, see [Setting up and operating FX Currency fields](https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/currency/concept/fx-currency.html).
	 * 
	 * @example
	 * //
	 * var cur_config = new sn_currency.GlideCurrencyConfig();
	 * 
	 */
	constructor() 
	/**
	 * @description Instantiates a GlideCurrencyConfig object that enables the retrieval of the configuration information for a specific FX Currency field.
	 * When calling the available methods on this type of GlideCurrencyConfig object, the return values are from the FX Currency Configuration \[fx\_configuration\] record associated with the FX Currency field, if a record exists. If a record does not exist, default values are returned.
	 * 
	 * For more information on FX Currency fields, see [Setting up and operating FX Currency fields](https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/currency/concept/fx-currency.html).
	 * 
	 * @example
	 * //
	 * var grCurr = new GlideRecord('my_FXCurrency_table');
	 * var curr_field = grCurr.getElement('currency');
	 * var ed = curr_field.getED();
	 * var cur_config = new sn_currency.GlideCurrencyConfig(ed);
	 * 
	 * @param ed GlideElementDescriptor object of the FX Currency field to associate with the GlideCurrencyConfig object.
	 * 
	 */
	constructor(ed: GlideElementDescriptor) 
	}
/**
	 * @description The GlideCurrencyConverter API provides methods to convert one currency value to another, such as converting US dollars into European Euro.
	 * You can instantiate the GlideCurrencyConverter object and define the source and destination currencies during instantiation using GlideCurrencyConverter(from, to). You can also instantiate the object without these values and define them later using the setFromCurrency() and setToCurrency() methods. These values and the amount to convert must be set before calling the convert() method to perform the currency conversion. To set the amount to convert, use the setAmount() method.  	
 *   	
 * The GlideCurrencyConverter() API also provides optional methods that enable you to:	
 * 	
 * *   Set the date and time for which to perform the conversion, setDateTime(). By setting the date and time, the rate that is used in the conversion calculation is that for the specified date and time, instead of the default of the current date and time.	
 * *   Set the rate table to use in the conversion, setRateTable(). By default the conversion uses the fx\_system\_rate table however, you can define custom rate tables for your instance. For additional information on creating rate tables, see [Add conversion rates using a custom rate table](https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/currency/task/custom-rate-table.html).	
 * 	
 *   	
 *   	
 * This class runs is in the sn\_currency namespace.
	 * 
	 */
	declare class GlideCurrencyConverter {
	/**
	 * @description Executes the currency converter.
	 * Call this method after calling other GlideCurrencyConverter methods that construct the currency conversion, such as setAmount(), setRateTable(), and setDate().
	 * 
	 * @example
	 * //
	 * var conv = new sn_currency.GlideCurrencyConverter('EUR', 'USD');
	 * conv.setAmount(100);
	 * gs.info(conv.convert());
	 * 
	 * @returns Object If the conversion is successful, returns CurrencyExchangeValue object. If unsuccessful, returns "null".      CurrencyExchangeValue {     Rate: Number,     OriginalAmount: Number,     Amount: Number,     fromCurrency: String,     toCurrency: String,     rateSysId: String     }  Rate: Number. Exchange rate used in the conversion.  OriginalAmount: Number. Source currency amount.  Amount: Number. Converted amount (OriginalAmount \* Rate).  fromCurrency: String. Three-letter ISO 3166 country code of the source currency.  toCurrency: String. Three-letter ISO 3166 country code of the converted currency.  rateSysId: String. Sys\_id of the rate table record used to calculate the conversion.
	 * 
	 */
	convert() : Object
	/**
	 * @description Instantiates a GlideCurrencyConverter object.
	 * @example
	 * //
	 * var conv = new sn_currency.GlideCurrencyConverter();
	 * 
	 */
	constructor() 
	/**
	 * @description Instantiates a GlideCurrencyConverter object and sets the source and destination country codes to use in the currency conversion.
	 * @example
	 * //
	 * var conv = new sn_currency.GlideCurrencyConverter('EUR', 'USD');
	 * 
	 * @param from Three-letter ISO 3166 country code of the source currency.
	 * @param to Three-letter ISO 3166 country code of the converted currency.
	 * 
	 */
	constructor(from: string,to: string) 
	/**
	 * @description Sets the amount of currency to convert.
	 * @example
	 * //
	 * var conv = new sn_currency.GlideCurrencyConverter('EUR', 'USD');
	 * conv.setAmount(100);
	 * 
	 * @param amount Currency amount to convert. This value must be unformatted except for a decimal point to denote fractional currency. For example, 1234.56 is valid, 1,234.56 is invalid.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setAmount(amount: string) : void
	/**
	 * @description Sets the currency conversion date and time.
	 * This date and time determines the conversion rate that is used to convert the currency. If this method is not called before the GlideCurrencyConverter.convert() method, the conversion is performed using the rate for the current date/time.
	 * 
	 * @example
	 * //
	 * var conv = new sn_currency.GlideCurrencyConverter('EUR', 'USD');
	 * conv.setAmount(100);
	 * var gd = new GlideDateTime("2019-01-03 11:00:00");
	 * conv.setDateTime(gd);
	 * gs.info(conv.convert());
	 * 
	 * @param date Date/time for which to calculate the currency conversion. This value determines the rate that is used in the conversion.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setDateTime(date: GlideDateTime) : void
	/**
	 * @description Sets the currency type to convert from.
	 * @example
	 * //
	 * var conv = new sn_currency.GlideCurrencyConverter.setFromCurrency('EUR');
	 * 
	 * @param from Currency to convert from. Use the three-letter ISO currency code of the currency.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setFromCurrency(from: string) : void
	/**
	 * @description Defines the rate table to be used in currency conversions.
	 * @example
	 * //
	 * var conv = new sn_currency.GlideCurrencyConverter('EUR', 'USD');
	 * conv.setRateTable(custom_rate_table);
	 * 
	 * @param rateTable The rate table used in currency conversons, which must extend fx\_conversion\_rate. If the value is undefined, fx\_system\_rate is used.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setRateTable(rateTable: string) : void
	/**
	 * @description Sets the currency type to convert to.
	 * @example
	 * //
	 * var conv = new sn_currency.GlideCurrencyConverter.setToCurrency('USD');
	 * 
	 * @param to Currency to convert to. Use the three-letter ISO currency code of the currency.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setToCurrency(to: string) : void
	}
/**
	 * @description Provides access to information related to FX Currency conversions.
	 * Refer to the [GlideCurrencyConverter()](dev.do#!/reference/api/paris/server/sn_currency-namespace/GlideCurrConverterScopedAPI "The GlideCurrencyConverter API provides methods to convert one currency value to another, such as converting US dollars into European Euro.") API for methods that return a GlideCurrencyExchangeValue object.  	
 *   	
 * 	
 * Note: There is no constructor for this class.
	 * 
	 */
	declare class GlideCurrencyExchangeValue {
	/**
	 * @description Returns the amount after conversion.
	 * @example
	 * //
	 * var originalValue = 999.999;
	 * var nowDate = gs.daysAgo(0).toString().substring(0,10);
	 * var exchangeValue = new sn_currency.GlideCurrencyConverter('USD', 'JPY');
	 * var exchangedValue = exchangeValue.setAmount(originalValue).setDate(nowDate).convert().getAmount();
	 * gs.info('Exchanged Amount: ' + exchangedValue);
	 * 
	 * @returns number The amount after conversion.
	 * 
	 */
	getAmount() : number
	/**
	 * @description Returns the currency type converted to.
	 * @example
	 * //
	 * var exchangeValue = new sn_currency.GlideCurrencyConverter('USD', 'JPY');
	 * gs.info('Exchanged Currency(To): ' + exchangeValue.convert().getCurrency());
	 * 
	 * @returns string The three-letter ISO currency code of the currency converted to.
	 * 
	 */
	getCurrency() : string
	/**
	 * @description Returns the original, pre-conversion currency type.
	 * @example
	 * //
	 * var exchangeValue = new sn_currency.GlideCurrencyConverter('USD', 'JPY');
	 * gs.info('Original Currency(From): ' + exchangeValue.convert().getOriginalCurrency());
	 * 
	 * @returns string The three-letter ISO currency code of the currency converted from.
	 * 
	 */
	getOriginalCurrency() : string
	/**
	 * @description Returns the original, pre-conversion amount.
	 * @example
	 * //
	 * var converter = new sn_currency.GlideCurrencyConverter('USD', 'JPY');
	 * converter.setAmount(999.999)
	 * var convertValues = converter.convert();
	 * gs.info('Original Amount: ' + 'convertValues.getOriginalAmount());
	 * 
	 * 
	 * @returns number Original amount before conversion.
	 * 
	 */
	getOriginalValue() : number
	/**
	 * @description Returns the currency conversion rate used to create the GlideCurrencyExchangeValue object.
	 * @example
	 * //
	 * var nowDate = gs.daysAgo(0).toString().substring(0,10);
	 * var exchangeUSD = new sn_currency.GlideCurrencyConverter('EUR', 'USD');
	 * var EURUSD = exchangeUSD.setDate(nowDate).convert().getRate();
	 * gs.info('Exchange Rate From EUR to USD: ' + EURUSD);
	 * 
	 * @returns number The exchange rate used in the currency conversion.
	 * 
	 */
	getRate() : number
	/**
	 * @description Returns the sys\_id of the record in the rate table used in the currency conversion.
	 * @example
	 * //
	 * var converter = new sn_currency.GlideCurrencyConverter('USD', 'JPY');
	 * converter.setAmount(999.999)
	 * var convertValues = converter.convert();
	 * gs.info('Rate table sys_id: ' + convertValues.getRateSysId());
	 * 
	 * @returns string Sys\_id of the rate table used in the currency conversion.
	 * 
	 */
	getRateSysId() : string
	}
/**
	 * @description The GlideCurrencyFormatter API provides methods to format FX Currency strings.
	 * When instantiating the GlideCurrencyFormatter object, you define the format of the output results for this object. Once set, the same format is used each time you call the GlideCurrencyFormatter.format() method of that object. The GlideCurrencyFormatter() and format() methods are the only two methods that you must call to format FX Currency.  	
 *   	
 * The GlideCurrencyFormatter() API also provides optional methods that enable you to:	
 * 	
 * *   Set the locale of the currency using setLocale(). By setting the locale, the formatter takes into consideration any formatting that is specific to that locale, such as whether a decimal point or decimal comma is used to denote fractions of currency amount. Default: System locale	
 * *   Set the minimum number of fractional digits to display using setMinFractionDigits(). Defines the minimum number of digits to the right of the decimal point/decimal comma to include. By default, all digits passed in are displayed. If the passed in amount has fewer digits than the specified minimum, the result is padded with "0".	
 * *   Set the maximum number of fractional digits to display using setMaxFractionDigits(). Defines the maximum number of digits to the right of the decimal point/decimal comma to include. By default, all digits passed in are displayed. If the passed in amount has a greater number of digits than the specified maximum, the additional digits are truncated during the process of rounding to the number of maximum fraction digits. Rounding is performed to the closest right-most digit. For example, if the maximum fraction digit is set to 2 and the passed in currency value is 123.456, the formatted value is 123.46. If the currency value is 23.122, the formatted value is 23.12. If the maximum is set to less than the minimum, the minimum value is used.	
 * 	
 *   	
 *   	
 * This class runs is in the sn\_currency namespace.
	 * 
	 */
	declare class GlideCurrencyFormatter {
	/**
	 * @description Instantiates a GlideCurrencyFormatter object and defines the format string to use to format FX Currency.
	 * This method does not perform the actual string format. You must call the GlideCurrencyFormatter.format() method to format the currency.
	 * 
	 * @example
	 * //
	 * var formatString = '%s%v%c';
	 * var exchangeValue = new sn_currency.GlideCurrencyFormatter(formatString);
	 * 
	 * @param formatString Optional. Format string to use to format any currency passed into the formatter.  Valid values:  *   %s: Replaced by the currency symbol associated with the country code specified in the format() call. *   %v: Replaced by the currency amount, such as 123.45. *   %c: Replaced by the ISO currency code specified in the format() call, such as USD or EUR. *   %l: Replaced with the passed in value, no formatting performed. *   %p: Replaced by the percent sign (%).  For example, if the format string is '%s%v%c' and the value to format is 123.45 in US dollars, the returned formatted string is $123.45 USD. If the format string is '%s%l%c' and the value string to format is '56M' in Euros, the returned formatted string is €56M EUR.  Note: The same format string is used each time the format() method is called on this object.
	 * 
	 */
	constructor(formatString: string) 
	/**
	 * @description Formats a specified currency value using the specified currency code.
	 * The resulting format of the currency is also dependent on the values passed in when the GlideCurrencyFormatter object was initially instantiated.
	 * 
	 * @example
	 * //
	 * var amount = '123456.123456789';
	 * var currencyCode = 'USD';
	 * var formatString = '%s%v%c';
	 * var exchangeValue = new sn_currency.GlideCurrencyFormatter(formatString);
	 * gs.info('Formatted currency: ' + exchangeValue.setMaxFractionDigits(2).format(amount, currencyCode));
	 * 
	 * @param value Currency amount to format. The amount can only contain a decimal point to denote the fractional amount, commas are not supported.  Valid values: 123.45 or 2436.23  Invalid values 123,45 or 2,134.56
	 * @param currencyCode Three-letter ISO currency code to use when formatting the currency.
	 * 
	 * @returns string Formatted currency value.
	 * 
	 */
	format(value: string,currencyCode: string) : string
	/**
	 * @description Sets the locale for the displayed value.
	 * @param language The three-letter ISO 639 code of the language.
	 * @param country The three-letter ISO 3166 code of the country.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setLocale(language: string,country: string) : void
	/**
	 * @description Sets the maximum number of fraction digits to display.
	 * @example
	 * //
	 * var originalAmount = '123456.123456789';
	 * var originalCurrency = 'USD';
	 * var exchangeValue = new sn_currency.GlideCurrencyFormatter(originalAmount, originalCurrency);
	 * gs.info('Set maximum fraction digits: ' + exchangeValue.setMaxFractionDigits(2).format());
	 * 
	 * @param maxFractionDigits Sets the maximum number of fraction digits to display.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setMaxFractionDigits(maxFractionDigits: number) : void
	/**
	 * @description Sets the minimum number of fraction digits to display.
	 * @example
	 * //
	 * var originalAmount = '123456.123456789';
	 * var originalCurrency = 'USD';
	 * var exchangeValue = new sn_currency.GlideCurrencyFormatter(originalAmount, originalCurrency);
	 * gs.info('Set minimum fraction digits: ' + exchangeValue.setMinFractionDigits(3).format());
	 * 
	 * @param minFractionDigits The minimum number of fraction digits to display.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setMinFractionDigits(minFractionDigits: number) : void
	}
/**
	 * @description The GlideCurrencyParser API provides methods to parse FX Currency values to detect locale-based formatting.
	 * The methods in this class parse a specified string into a [GlideCurrencyValue](dev.do#!/reference/api/paris/server/sn_currency-namespace/GlideCurrencyValueScopedAPI "Provides methods that return the currency code and original currency from an associated GlideCurrencyParser.parse() call.") object enabling you to obtain locale-based currency formatting. Before calling the GlideCurrencyParser.parse() method, which actually performs the parse, you must set the currency code to use during the parse. You can set the currency code by either passing it in the GlideCurrencyParser.parse() method call or by calling GlideCurrencyParser.setDefaultCurrencyCode().  	
 *   	
 * Setting the locale is optional. If you do not set it through the GlideCurrencyParser.setLocale() method, the currency amount passed into GlideCurrencyParser.parse() must be unformatted.  	
 *   	
 * This class runs is in the sn\_currency namespace.
	 * 
	 */
	declare class GlideCurrencyParser {
	/**
	 * @description Instantiates a GlideCurrencyParser object that provides methods to parse a string into a GlideCurrencyValue object.
	 * @example
	 * //
	 * var parser = new sn_currency.GlideCurrencyParser();
	 * 
	 */
	constructor() 
	/**
	 * @description Parses a specified string into a GlideCurrencyValue object to obtain locale-based currency formatting.
	 * @example
	 * //Passes the currency code in value string.
	 * var gp = new sn_currency.GlideCurrencyParser(); 
	 * gp.setLocale("fre", "FRA"); 
	 * var cv = gp.parse("USD;1234.56"); 
	 * gs.info(cv);
	 * 
	 * 
	 * @example
	 * //Uses the setDefaultCurrencyCode property to define currency code.
	 * var amount = “1234,56”
	 * var gp = new sn_currency.GlideCurrencyParser();
	 * gp.setDefaultCurrencyCode("USD");
	 * var cv = gp.parse(amount);
	 * gs.info(cv);
	 * 
	 * 
	 * @param value String to parse. You can prepend this string with the ISO currency code to use when parsing the string (semicolon separated). If the currency code is not set prior to calling the parse() method, it defaults to the current session currency code.  This method supports both decimal point and decimal comma notation.  For example: "123.45", "USD;123.45", "123,45", "EUR;123,45"
	 * 
	 * @returns GlideCurrencyValue Parsed value information.  Data type: Object
	 * 
	 */
	parse(value: string) : GlideCurrencyValue
	/**
	 * @description Sets the currency code for the associated GlideCurrencyParser object.
	 * @example
	 * //
	 * var amount = “123.45”
	 * var gp = new sn_currency.GlideCurrencyParser();
	 * gp.setDefaultCurrencyCode("USD");
	 * var cv = gp.parse(amount);
	 * 
	 * @param currencyCode Three-letter ISO currency code to use as the default in the associated GlideCurrencyParser object.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setDefaultCurrencyCode(currencyCode: string) : void
	/**
	 * @description Sets the default language and country codes, which constitute the locale, on the associated GlideCurrencyParser object.
	 * If you do not call this method before calling the GlideCurrencyParser.parse() method, the locale defaults to the current session locale.
	 * 
	 * @example
	 * //
	 * var amount = “USD;123.45”
	 * var gp = new sn_currency.GlideCurrencyParser();
	 * gp.setLocale("spa", "ESP");
	 * var cv = gp.parse(amount);
	 * 
	 * @param language Three-letter ISO 639 language code, such as eng, spa, and fre.
	 * @param country Three-letter ISO 3166 country code, such as USA, ESP, and FRA.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setLocale(language: string,country: string) : void
	}
/**
	 * @description Provides methods that return the currency code and original currency from an associated GlideCurrencyParser.parse() call.
	 * Note: There is no constructor for this class.
	 * 
	 */
	declare class GlideCurrencyValue {
	/**
	 * @description Returns the currency amount originally passed into the associated GlideCurrencyParser.parse() call.
	 * @example
	 * //
	 * var gp = new sn_currency.GlideCurrencyParser(); 
	 * gp.setLocale("eng", "USA");  
	 * var cv = gp.parse("USD;1234.56"); 
	 * gs.info('Original currency amount: ' + cv.getAmount());
	 * 
	 * 
	 * @returns string Original currency passed into the parse() method.
	 * 
	 */
	getAmount() : string
	/**
	 * @description Returns the currency code used to parse the currency in the associated GlideCurrencyParser.parse() call.
	 * @example
	 * //
	 * var gp = new sn_currency.GlideCurrencyParser(); 
	 * gp.setLocale(eng, USA); 
	 * var cv = gp.parse("USD";"1234.56"); 
	 * gs.info('Parsed currency code: ' + cv.getCurrencyCode());
	 * 
	 * 
	 * @returns string Three-letter ISO currency code used to parse the currency.
	 * 
	 */
	getCurrencyCode() : string
	}
declare namespace sn_currency {
	}
/**
	 * @description The methods of the DiscoveryAPI - Scoped class launch a quick Discovery of a single IPv4 address and return summaries of previously launched Discovery statuses for a single CI or for all scanned CIs.
	 * 
	 */
	declare class DiscoveryAPI {
	/**
	 * @description Discovers a specified IPv4 address.
	 * A MID Server is selected automatically, based on the IP address provided or the application specified.
	 * 
	 * @example
	 * //
	 * var sysid = sn_discovery.DiscoveryAPI.discoverIpAddress("11.23.125.39");
	 * 
	 * @param application Optional. Application configured for the MID Server.  To define a source parameter but not an application parameter, use "NULL" as the place holder.  Default: Discovery
	 * @param ipAddress IP address to discover.
	 * @param source Optional. Source of the Discovery. This same value appears in the optional Source field in the Discovery Status record, which indicates how the Discovery was triggered.  Default: Discovery\_API
	 * 
	 * @returns string Discovery status record sys\_id.  The following exceptions can be thrown during MID Server selection:  *   NoSuitableMidServerFoundException: No appropriate MID Server available for this Discovery *   BadArgumentException: Invalid argument detected during MID Server selection
	 * 
	 */
	discoverIpAddress(application: string,ipAddress: string,source: string) : string
	/**
	 * @description Used to return a summary of a configuration item's Discovery status given the specific status sys\_id and IPv4 address.
	 * The following exceptions can be thrown:
	 * 
	 * *   DiscoveryStatusNotFoundException: Displays this message: Discovery Status with sys id '<invalid value\>' does not exist
	 * *   DiscoveryDeviceHistoryNotFoundException: Device History with Discovery Status sys id '<invalid value\>' and ipAddress '<invalid value\>' does not exist
	 * *   IllegalArgumentException (invalid input arguments): This argument exception prevents input values from being null.
	 *     *   Discovery Status sys id can not be null
	 *     *   ipAddress can not be null
	 * *   IllegalArgumentException (values stored in database): This argument exception prevents erroneous data from being returned to the caller in the case of bad attribute values.
	 *     *   Discovery Status 'state' property can not be null
	 *     *   Device history 'source' property can not be null
	 *     *   Device history 'issues' property is not an integer: <invalid value\>
	 *     *   Device history 'issues' property can not be less than 0: <invalid value\>
	 * 
	 * @example
	 * //
	 * var ipResultObj = sn_discovery.DiscoveryAPI.reportCiIpAddressStatus(ipAddress, discoveryStatus);
	 * 
	 * 
	 * @param ipAddress The IPv4 address that was scanned.
	 * @param discoveryStatusSysId The sys\_id of the Discovery status record for the IP address that was scanned.
	 * 
	 * @returns array JavaScript array of immutable [ReportCiStatusOutputJS](dev.do#!/reference/api/paris/server/sn_discovery-namespace/c_ReportCiStatusOutputJSScopedAPI "The ReportCiStatusOutputJS methods are getters that return specific object properties for the DiscoveryAPI reportCiIpAddressStatus method and then convert the information into a JSON string.") objects.
	 * 
	 */
	reportCiIpAddressStatus(ipAddress: string,discoveryStatusSysId: string) : array
	/**
	 * @description Used to return a summary of a CI Discovery status given a specific Discovery Status sys\_id.
	 * The following exceptions can be thrown:
	 * 
	 * *   DiscoveryStatusNotFoundException: Discovery Status with sys id '<invalid value\>' does not exist
	 * *   DiscoveryDeviceHistoryNotFoundException: Device History with Discovery Status sys id '<invalid value\>' and ipAddress '<invalid value\>' does not exist
	 * *   IllegalArgumentException (invalid input arguments): This argument exception prevents input values from being null.
	 *     *   Discovery Status sys id can not be null
	 *     *   ipAddress can not be null
	 * *   IllegalArgumentException (values stored in database): This argument exception imposes post conditions on database access values.
	 *     *   Discovery Status 'state' property can not be null
	 *     *   Device history 'source' property can not be null
	 *     *   Device history 'issues' property is not an integer: <invalid value\>
	 *     *   Device history 'issues' property can not be less than 0: <invalid value\>
	 * 
	 * @example
	 * //
	 * var ipResultObjArray = sn_discovery.DiscoveryAPI.reportCiStatus(discoveryStatus);
	 * for(var idx=0; idx &lt; ipResultObjArray.length; idx++) {    
	 * var ipResultObj = ipResultObjArray[idx]; 
	 * 
	 * @param sys_id The sys\_id of a Discovery status record.
	 * 
	 * @returns array JavaScript array of immutable [ReportCiStatusOutputJS](dev.do#!/reference/api/paris/server/sn_discovery-namespace/c_ReportCiStatusOutputJSScopedAPI "The ReportCiStatusOutputJS methods are getters that return specific object properties for the DiscoveryAPI reportCiIpAddressStatus method and then convert the information into a JSON string.") objects.
	 * 
	 */
	reportCiStatus(sys_id: string) : array
	}
/**
	 * @description The ReportCiStatusOutputJS methods are getters that return specific object properties for the DiscoveryAPI reportCiIpAddressStatus method and then convert the information into a JSON string.
	 * 
	 */
	declare class ReportCiStatusOutputJS {
	/**
	 * @description Used to return the value in the cmdb\_ci field from the discovery\_device\_history table for the CI being scanned.
	 * @example
	 * //
	 * var ipResultObj = sn_discovery.DiscoveryAPI.reportCiIpAddressStatus(ipAddress, discoveryStatus);
	 * gs.info("ipResultObj(cmdb): " + ipResultObj.getCmdbCI());
	 * 
	 * 
	 * @returns string Sys\_id of the CI created or updated. This value can be null in the case of intermediate results before a CI is created.
	 * 
	 */
	getCmdbCI() : string
	/**
	 * @description Used to return the state of the scanned CI.
	 * This is a calculated field based on the last\_state field in discovery\_device\_history table and the state field in the discovery\_status table.
	 * 
	 * @example
	 * //
	 * var ipResultObj = sn_discovery.DiscoveryAPI.reportCiIpAddressStatus(ipAddress, discoveryStatus);
	 * gs.info("ipResultObj(CiOperationStatus): " + ipResultObj.getCiOperationStatus());
	 * 
	 * 
	 * @returns string The three possible states returned by this method are:  *   Processing: Discovery is still processing the request. *   Successful: A CI was created or updated. *   NotSuccessful: A CI was not created or updated, and the Discovery status was Completed or Cancelled.
	 * 
	 */
	getCiOperationStatus() : string
	/**
	 * @description Used to return the value from the State field in the Discovery Status \[discovery\_status\] table.
	 * The values returned by this method are used to calculate the value returned by the [getCiOperationStatus()](dev.do#!/reference/api/paris/server/sn_discovery-namespace/c_ReportCiStatusOutputJSScopedAPI#r_RepCiStatOutgetCiOperationStatus "Used to return the state of the scanned CI.") method
	 * 
	 * @example
	 * //
	 * var ipResultObj = sn_discovery.DiscoveryAPI.reportCiIpAddressStatus(ipAddress, discoveryStatus);
	 * gs.info("ipResultObj(discoveryState): " + ipResultObj.getDiscoveryState());
	 * 
	 * 
	 * @returns string The possible states returned by this method are:  *   Starting *   Active *   Complete *   Cancelled
	 * 
	 */
	getDiscoveryState() : string
	/**
	 * @description Used to return the value from the source field in the discovery\_device\_history table for the CI being scanned.
	 * @example
	 * //
	 * var ipResultObj = sn_discovery.DiscoveryAPI.reportCiIpAddressStatus(ipAddress, discoveryStatus);
	 * gs.info("ipResultObj(IpAddress): " + ipResultObj.getIpAddress());
	 * 
	 * @returns string The IP address of the CI being scanned.
	 * 
	 */
	getIpAddress() : string
	/**
	 * @description Used to return the value from the issues field in the discovery\_device\_history table for the CI being scanned.
	 * @example
	 * //
	 * var ipResultObj = sn_discovery.DiscoveryAPI.reportCiIpAddressStatus(ipAddress, discoveryStatus);
	 * gs.info("ipResultObj(issues): " + ipResultObj.getIssues());
	 * 
	 * @returns integer Number of issues in this Discovery for this CI.
	 * 
	 */
	getIssues() : integer
	/**
	 * @description Used to return the value from the issues\_link field in the discovery\_device\_history table for the CI being scanned.
	 * @example
	 * //
	 * var ipResultObj = sn_discovery.DiscoveryAPI.reportCiIpAddressStatus(ipAddress, discoveryStatus);
	 * gs.info("ipResultObj(issues_link): " + ipResultObj.getIssuesLink());
	 * 
	 * @returns string The issues\_link field from the discovery\_device\_history table.  This value may be null or an anchor tag defining a hyperlink to a page that provides the list of issues associated with the Discovery Status and CI (IP address).
	 * 
	 */
	getIssuesLink() : string
	/**
	 * @description Used to serialized the ReportCiStatusOutputJS object.
	 * This method throws the IllegalArgumentException exception, Cannot serialize object, e when the method is unable to serialize the object. The e is the exception object, which provides the exception message and trace.
	 * 
	 * @example
	 * //
	 * var ipResultObj = sn_discovery.DiscoveryAPI.reportCiIpAddressStatus(ipAddress, discoveryStatus);
	 * gs.info("ipResultObj(json): " + ipResultObj.toJson());
	 * 
	 * @returns string Serialized instance of the ReportCiStatusOutputJS object into a JSON string.
	 * 
	 */
	toJson() : string
	}
declare namespace sn_discovery {
	}
/**
	 * @description Use the DecisionTableAPI class to access Decision Tables data in scoped and global server-side scripts.
	 * Access DecisionTableAPI methods using the sn\_dt namespace. To learn more about Decision Tables, see [Decision Tables](https://docs.servicenow.com/bundle/paris-servicenow-platform/page/administer/decision-table/concept/decision-table.html).
	 * 
	 */
	declare class DecisionTableAPIScopedGlobal {
	/**
	 * @description Instantiates a DecisionTableAPI object.
	 * @example
	 * //
	 * var dt = new sn_dt.DecisionTableAPI();
	 * 
	 */
	constructor() 
	/**
	 * @description Returns all decision tables from the Decision Tables \[sys\_decision\] table.
	 * @example
	 * //
	 * var dt = new sn_dt.DecisionTableAPI();
	 * var response = dt.getAll();
	 * gs.info(JSON.stringify(response));
	 * 
	 * 
	 * @returns Object All decision tables and their fields from the Decision Tables \[sys\_decision\] table. Each decision table contains these key-value pairs:  *   distinctAnswers: Array. Answer records associated with the decision table. Each record contains these key-value pairs.     *   valid: Boolean. True if the record exists in the system; otherwise false.     *   label: String. Answer record label.     *   value: String. Sys ID of the answer record.     *   table: String. Table containing the answer record. *   referenceQualifier: String. Used for internal purposes. *   inputs: Array. Decision inputs from the Decision Inputs \[sys\_decision\_input\] table associated with the decision table. Each record contains these key-value pairs.     *   searchField: String. Used for internal purposes.     *   defaultValue: String. Default value for the input.     *   show\_ref\_finder: Boolean. Used for internal purposes.     *   use\_dependent: Boolean. Used for internal purposes.     *   type: String. Input data type.     *   mandatory: Boolean. True if the input is mandatory; otherwise false.     *   extended: Boolean. True if the input extends another field; otherwise false.     *   local: Boolean. Used for internal purposes.     *   sys\_class\_name: String. Used for internal purposes.     *   reference: String. Reference table used if the input type is reference.     *   dependent\_on: String. Field that document ID and choice inputs depend on.     *   data\_structure: String. Used for internal purposes.     *   readonly: Boolean. True if the input is read-only; otherwise false.     *   id: String. Sys ID of the input from the Decision Inputs \[sys\_decision\_input\] table.     *   type\_label: String. Input data type label.     *   table: String. Reference field table if the input type is reference.     *   order: Number. Order in which the system evaluates inputs.     *   ref\_qual: String. Condition applied to the reference table.     *   reference\_display: String. Used for internal purposes.     *   choiceOption: String. Method for users to see a list of suggested values.     *   label: String. Label of the input record.     *   hint: String. Hint text used to help users understand the input required.     *   name: String. Internal name of the input record.     *   attributes: Array. Field attributes that apply to the input record.     *   maxsize: Number. Maximum number of characters allowed in the field.     *   columnName: String. Name of the input. *   domain: String. Domain in which the decision table is visible. *   answerType: String. Used for internal purposes. *   questions: Array. Decision records from the Decision \[sys\_decision\_question\] table associated with the decision table. Decision records contain these key-value pairs.     *   defaultAnswer: Boolean. True if this decision is the default for the decision table; otherwise false.     *   condition: String. Conditions required to reach this decision. The fields available for the condition are the decision inputs that are associated with this decision table.     *   answer: Object. Answer record associated with the decision. Answer objects contain these key-value pairs.         *   valid: Boolean. True if the record exists in the system; otherwise false.         *   label: String. Answer record label.         *   value: String. Sys ID of the answer record.         *   table: String. Table containing the answer record.     *   decisionTable: String. Sys ID of the decision table from the Decision Tables \[sys\_decision\] table associated with the decision.     *   domain: String. Domain in which the decision is visible.     *   active: Boolean. True if the decision record is active; otherwise false.     *   id: String. Sys ID of the decision record from the Decision \[sys\_decision\_question\] table.     *   label: String. Label for the decision record.     *   order: Number. Order in which the system evaluates decisions. *   accessibleFrom: String. Scopes that have access to the record. *   name: String. Internal name of the decision table record. *   active: Boolean. True if the decision table record is active; otherwise false. *   id: String. Sys ID of the decision table record. *   label: String. Label of the decision table record. *   answerTable: Object. Answer table associated with the decision table.     *   displayValue: String. Display name of the table that contains answer records.     *   value: String. Internal name of the table that contains answer records.  Format: JSON
	 * 
	 */
	getAll() : Object
	/**
	 * @description Returns the answers associated with the specified decision table. An answer is a record on any table associated with a Decision \[sys\_decision\_question\] record.
	 * @example
	 * //
	 * var dt = new sn_dt.DecisionTableAPI();
	 * var response = dt.getAnswers("3c4464a7b701230034d1da23ee11a993");
	 * gs.info(JSON.stringify(response));
	 * 
	 * @param decisionID Sys ID of the Decision Table record from the Decision Tables \[sys\_decision\] table.
	 * 
	 * @returns Object Answer records associated with the decision table. Each record contains these key-value pairs:  *   valid: Boolean. True if the record exists in the system; otherwise false. *   label: String. Answer record label. *   value: String. Sys ID of the answer record. *   table: String. Table containing the answer record.  Format: JSON
	 * 
	 */
	getAnswers(decisionID: string) : Object
	/**
	 * @description Evaluates a decision table based on the provided inputs and returns an answer. If no inputs are provided, returns the first default answer found.
	 * @example
	 * //
	 * var dt = new sn_dt.DecisionTableAPI();
	 * var inputs = new Object();
	 * inputs[‘age’] = 25;
	 * var response = dt.getDecision('26eea7a9dba07300efc65404ce961961', inputs);
	 * 
	 * @param decisionID Sys ID of the Decision Table record from the Decision Tables \[sys\_decision\] table.
	 * @param inputs Optional. Input values for the Decision Inputs \[sys\_decision\_input\] table associated with the provided decision table. Use the value of the Column name field as the key. The data type of the value must match the Decision Input Type field. If no inputs are provided, returns the first default answer found.
	 * 
	 * @returns GlideRecord The correctly evaluated Answer record associated with the decision table. An answer record is a record from the table defined in the Decision \[sys\_decision\_question\] record Answer table field.  If no inputs are provided, returns the first default answer found. If no default or correctly evaluated answers are found, returns an error.
	 * 
	 */
	getDecision(decisionID: string,inputs: Map) : GlideRecord
	/**
	 * @description Evaluates a decision table based on the provided inputs and returns all correctly evaluated answers. If no inputs are provided, returns all default answers.
	 * @example
	 * //
	 * var dt = new sn_dt.DecisionTableAPI();
	 * var input = new Object();
	 * input['age'] = 25;
	 * var response = dt.getDecisions('5b06ce5db701230034d1da23ee11a965', input);
	 * 
	 * 
	 * @param decisionID Sys ID of the Decision Table record from the Decision Tables \[sys\_decision\] table.
	 * @param inputs Optional. Input values for the Decision Inputs \[sys\_decision\_input\] table associated with the provided decision table. If no inputs are provided, returns all default answers.
	 * 
	 * @returns Array Answer records in GlideRecord format. An answer record is a record on any table associated with a Decision \[sys\_decision\_question\] record. If no inputs are provided, returns all default answers. If no default or correctly evaluated answers are found, returns an error.
	 * 
	 */
	getDecisions(decisionID: string,inputs: Map) : Array
	/**
	 * @description Returns a single decision table from the Decision Tables \[sys\_decision\] table.
	 * @example
	 * //
	 * var dt = new sn_dt.DecisionTableAPI();
	 * var response = dt.getDecisionTable("3c4464a7b701230034d1da23ee11a993");
	 * gs.info(JSON.stringify(response));
	 * 
	 * 
	 * @param decisionID Sys ID of the Decision Table record from the Decision Tables \[sys\_decision\] table.
	 * 
	 * @returns Object Decision table from the Decision Tables \[sys\_decision\] table. Each decision table contains these key-value pairs.  *   distinctAnswers: Array. Answer records associated with the decision table. Each record contains these key-value pairs.     *   valid: Boolean. True if the record exists in the system; otherwise false.     *   label: String. Answer record label.     *   value: String. Sys ID of the answer record.     *   table: String. Table containing the answer record. *   referenceQualifier: String. Used for internal purposes. *   inputs: Array. Decision inputs from the Decision Inputs \[sys\_decision\_input\] table associated with the decision table. Each record contains these key-value pairs.     *   searchField: String. Used for internal purposes.     *   defaultValue: String. Default value for the input.     *   show\_ref\_finder: Boolean. Used for internal purposes.     *   use\_dependent: Boolean. Used for internal purposes.     *   type: String. Input data type.     *   mandatory: Boolean. True if the input is mandatory; otherwise false.     *   extended: Boolean. True if the input extends another field; otherwise false.     *   local: Boolean. Used for internal purposes.     *   sys\_class\_name: String. Used for internal purposes.     *   reference: String. Reference table used if the input type is reference.     *   dependent\_on: String. Field that document ID and choice inputs depend on.     *   data\_structure: String. Used for internal purposes.     *   readonly: Boolean. True if the input is read-only; otherwise false.     *   id: String. Sys ID of the input from the Decision Inputs \[sys\_decision\_input\] table.     *   type\_label: String. Input data type label.     *   table: String. Reference field table if the input type is reference.     *   order: Number. Order in which the system evaluates inputs.     *   ref\_qual: String. Condition applied to the reference table.     *   reference\_display: String. Used for internal purposes.     *   choiceOption: String. Method for users to see a list of suggested values.     *   label: String. Label of the input record.     *   hint: String. Hint text used to help users understand the input required.     *   name: String. Internal name of the input record.     *   attributes: Array. Field attributes that apply to the input record.     *   maxsize: Number. Maximum number of characters allowed in the field.     *   columnName: String. Name of the input. *   domain: String. Domain in which the decision table is visible. *   answerType: String. Used for internal purposes. *   questions: Array. Decision records from the Decision \[sys\_decision\_question\] table associated with the decision table. Decision records contain these key-value pairs.     *   defaultAnswer: Boolean. True if this decision is the default for the decision table; otherwise false.     *   condition: String. Conditions required to reach this decision. The fields available for the condition are the decision inputs that are associated with this decision table.     *   answer: Object. Answer record associated with the decision. Answer objects contain these key-value pairs.         *   valid: Boolean. True if the record exists in the system; otherwise false.         *   label: String. Answer record label.         *   value: String. Sys ID of the answer record.         *   table: String. Table containing the answer record.     *   decisionTable: String. Sys ID of the decision table from the Decision Tables \[sys\_decision\] table associated with the decision.     *   domain: String. Domain in which the decision is visible.     *   active: Boolean. True if the decision record is active; otherwise false.     *   id: String. Sys ID of the decision record from the Decision \[sys\_decision\_question\] table.     *   label: String. Label for the decision record.     *   order: Number. Order in which the system evaluates decisions. *   accessibleFrom: String. Scopes that have access to the record. *   name: String. Internal name of the decision table record. *   active: Boolean. True if the decision table record is active; otherwise false. *   id: String. Sys ID of the decision table record. *   label: String. Label of the decision table record. *   answerTable: Object. Answer table associated with the decision table.     *   displayValue: String. Display name of the table that contains answer records.     *   value: String. Internal name of the table that contains answer records.  Format: JSON
	 * 
	 */
	getDecisionTable(decisionID: string) : Object
	/**
	 * @description Returns the decision inputs from the Decision Inputs \[sys\_decision\_input\] table associated with the passed in decision table.
	 * @example
	 * //
	 * var dt = new sn_dt.DecisionTableAPI();
	 * var response = dt.getInputs("3c4464a7b701230034d1da23ee11a993");
	 * gs.info(JSON.stringify(response));
	 * 
	 * 
	 * @param decisionID Sys ID of the Decision Table record from the Decision Tables \[sys\_decision\] table.
	 * 
	 * @returns Object Decision inputs from the Decision Inputs \[sys\_decision\_input\] table associated with the decision table. You can find the inputs associated with a decision table using the Decision Inputs related list in the Decision Tables \[sys\_decision\] table. Inputs contain these key-value pairs.  *   searchField: String. Used for internal purposes. *   defaultValue: String. Default value for the input. *   show\_ref\_finder: Boolean. Used for internal purposes. *   use\_dependent: Boolean. Used for internal purposes. *   type: String. Input data type. *   mandatory: Boolean. True if the input is mandatory; otherwise false. *   extended: Boolean. True if the input extends another field; otherwise false. *   local: Boolean. Used for internal purposes. *   sys\_class\_name: String. Used for internal purposes. *   reference: String. Reference table used if the input type is reference. *   dependent\_on: String. Field that document ID and choice inputs depend on. *   data\_structure: String. Used for internal purposes. *   readonly: Boolean. True if the input is read-only; otherwise false. *   id: String. Sys ID of the input from the Decision Inputs \[sys\_decision\_input\] table. *   type\_label: String. Input data type label. *   table: String. Reference field table if the input type is reference. *   order: Number. Order in which the system evaluates inputs. *   ref\_qual: String. Condition applied to the reference table. *   reference\_display: String. Used for internal purposes. *   choiceOption: String. Method for users to see a list of suggested values. *   label: String. Label of the input record. *   hint: String. Hint text used to help users understand the input required. *   name: String. Internal name of the input record. *   attributes: Array. Field attributes that apply to the input record. *   maxsize: Number. Maximum number of characters allowed in the field. *   columnName: String. Name of the input.  Format: JSON
	 * 
	 */
	getInputs(decisionID: string) : Object
	/**
	 * @description Returns the decisions from the Decision \[sys\_decision\_question\] table associated with the passed in decision table.
	 * @example
	 * //
	 * var dt = new sn_dt.DecisionTableAPI();
	 * var response = dt.getQuestions("3c4464a7b701230034d1da23ee11a993");
	 * gs.info(JSON.stringify(response));
	 * 
	 * 
	 * @param decisionID Sys ID of the Decision Table record from the Decision Tables \[sys\_decision\] table.
	 * 
	 * @returns Object Decisions from the Decision \[sys\_decision\_question\] table associated with the decision table. You can find the decisions associated with a decision table using the Decisions related list in the Decision Tables \[sys\_decision\] table. Decision records contain these key-value pairs.  *   defaultAnswer: Boolean. True if this decision is the default for the decision table; otherwise false. *   condition: String. Conditions required to reach this decision. The fields available for the condition are the decision inputs that are associated with this decision table. *   answer: Object. Answer record associated with the decision. Answer objects contain these key-value pairs.     *   valid: Boolean. True if the record exists in the system; otherwise false.     *   label: String. Answer record label.     *   value: String. Sys ID of the answer record.     *   table: String. Table containing the answer record. *   decisionTable: String. Sys ID of the decision table from the Decision Tables \[sys\_decision\] table associated with the decision. *   domain: String. Domain in which the decision is visible. *   active: Boolean. True if the decision record is active; otherwise false. *   id: String. Sys ID of the decision record from the Decision \[sys\_decision\_question\] table. *   label: String. Label for the decision record. *   order: Number. Order in which the system evaluates decisions.  Format: JSON
	 * 
	 */
	getQuestions(decisionID: string) : Object
	}
declare namespace sn_dt {
	}
/**
	 * @description The DynamicTranslation API provides methods that translate text, in real time, into multiple languages using translation service providers.
	 * In addition, you can use this API to detect the language of a specific string and check whether the getDetectedLanguage() and getTranslation() methods are enabled for a translation service. Use this API to create a seamless localization experience for your user interface, enabling one interface to service multiple countries.  	
 *   	
 * Currently this API supports two translation service providers: Microsoft Azure Translator Service and IBM Watson Translator Service. You can also configure other translation services within your instance and then use the DynamicTranslation API to translate your text.  	
 *   	
 * When using these methods in a server-side script, use the sn\_dt\_api namespace identifier. Before you are able to use this API, you must activate the DynamicTranslation plugin. For information on this plugin and additional information on Dynamic Translation, refer to [Dynamic translation overview](https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/dynamic-translation/concept/dynamic-translation-overview.html).
	 * 
	 */
	declare class DynamicTranslation {
	/**
	 * @description Detects the language of the passed in text.
	 * If you pass in a translator, the method uses that translation service to detect the source language. Otherwise, the detection is performed by the default translation service. Ensure that the text you provide contains enough verbiage to enable proper language detection.
	 * 
	 * In addition to the detected language, the response contains a confidence level of the detection, along with other possible language alternatives. If a translator is not passed in, the method also returns the default translation service used to detect the language.
	 * 
	 * @example
	 * //This example shows code in a server-side script that detects a string in English using IBM's translation service.
	 * var detectedResponse = sn_dt_api.DynamicTranslation.getDetectedLanguage('Please detect the language of this text', {"translator":'IBM'});
	 *  gs.info(JSON.stringify(detectedResponse));
	 * 
	 * 
	 * @example
	 * //This example shows a server script that throws an error when an invalid translation service is passed in.
	 * var detectedResponse = sn_dt_api.DynamicTranslation.getDetectedLanguage('Please detect the language of this text', {"translator":123});
	 *  gs.info(JSON.stringify(detectedResponse));
	 * 
	 * 
	 * @param text Text to use to detect the language.
	 * @param parms Optional. JSON object that contains additional translation parameters.
	 * @param parms.translator Optional. Translation service to use to translate the text (not case-sensitive).  Valid values:  *   Microsoft *   IBM *   <custom>  Note: To use custom translation services you must first configure the translation service in your instance. For details, see [Integrate with a translation service provider](https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/dynamic-translation/task/integrate-translation-service-provider.html).  Default: translation service configured in the Translator Configuration \[sn\_dt\_translator\_configuration\] table.
	 * 
	 * @returns Error  The following are error messages that the method may return and indications as to the error's root cause.  *   Text ("text" field) is missing or invalid (40000): The text to translate is either missing or not a String. *   Dynamic Translation plugin is not installed (40001): The Dynamic Translation API was invoked without activating the com.glide.dynamic\_translation plugin. For information on activating this plugin, see [Dynamic translation overview](https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/dynamic-translation/concept/dynamic-translation-overview.html). *   Default translator is not configured (40002): No translation service is marked as the Default in Translator Configurations. For information on creating/modifying a translator configuration, see [Create a translator configuration](https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/dynamic-translation/task/create-custom-translator.html). *   Translator ("translator" field) is invalid (40003): The passed in translator parameter is not a String. *   <translator> translator is not configured (40004): The specified translation service is not configured in Translator Configurations. For information on creating/modifying a translator configuration, see [Create a translator configuration](https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/dynamic-translation/task/create-custom-translator.html). *   <translator> translator is inactive (40005): The specified translation service is not set to Active in Translator Configurations. For information on creating/modifying a translator configuration, see [Create a translator configuration](https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/dynamic-translation/task/create-custom-translator.html). *   Additional parameters are invalid (40006): Additional parameters passed are not an Object. *   Maximum time limit has been exceeded (40009): Operation took longer than the defined timeout value specified in Translation Configuration. Default: 40 seconds *   Unknown error occurred (40051): Default error thrown when the error doesn’t fall in to any other category. *   Request is not authorized because credentials are missing or not valid (40055): The credentials configured for the translation service in Connections & Credentials are not valid. For information on connections and credentials, see [Dynamic translation overview](https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/dynamic-translation/concept/dynamic-translation-overview.html).
	 * 
	 */
	getDetectedLanguage(text: string,parms: Object,parmstranslator: string) : Error 
	/**
	 * @description Translates the passed in text to one or more languages.
	 * The method uses translation services, such as Microsoft Azure Translator Service and IBM Watson Translator Service, to perform the translation. If you do not pass in translation parameters, the method uses the system default.
	 * 
	 * @example
	 * //This example shows a server script translating plain text from English (detected) into French and Italian using Microsoft's translation service.
	 * try {
	 *     gs.info(JSON.stringify(sn_dt_api.DynamicTranslation.getTranslation("Translate this text using platform from server", {
	 *         "targetLanguages": ["fr", "it"],
	 *         "additionalParameters": [{
	 *             "parameterName": "texttype",
	 *             "parameterValue": "plain"
	 *         }],
	 *         "translator": "Microsoft"
	 *     })));
	 * } catch (error) {
	 *     gs.info(error.message);
	 * }
	 * 
	 * 
	 * @example
	 * //This example shows a server script that throws an error when an invalid target language is passed in.
	 * try {
	 *     gs.info(JSON.stringify(sn_dt_api.DynamicTranslation.getTranslation("Translate this text using platform from server", {
	 *         "targetLanguages": ["123"],
	 *         "additionalParameters": [{
	 *             "parameterName": "texttype",
	 *             "parameterValue": "plain"
	 *         }],
	 *         "translator": "Microsoft"
	 *     })));
	 * } catch (error) {
	 *     gs.info(error.message);
	 * }
	 * 
	 * @param textToTranslate Text to translate.
	 * @param parms Optional. JSON object that contains additional translation parameters.
	 * @param parms.targetLanguages Optional. List of language codes to use to translate the text. The method returns translated text for each language code.  Default: User preferred language.
	 * @param parms.translator Optional. Translation service to use to translate the text (not case-sensitive).  Valid values:  *   Microsoft *   IBM *   <custom>  Note: To use custom translation services you must first configure the translation service in your instance. For details, see [Integrate with a translation service provider](https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/dynamic-translation/task/integrate-translation-service-provider.html).  Default: translation service configured in the Translator Configuration \[sn\_dt\_translator\_configuration\] table.
	 * @param parms.sourceLanguage Optional. Language code of the source text.  Default: Translation service detects the source language.
	 * @param parms.additionalParameters Optional. Array of JSON objects. Each object contains key-value pairs that provide additional information for performing the translation.
	 * @param parms.additionalParameters[].parameterName Key name.  Valid values:  *   textype: Type of text to translate. For Microsoft Azure Translation Service only.
	 * @param parms.additionalParameters[].parameterValue Value of the associated key.  Valid values:  *   plain: Standard text string *   html: HTML text string  Default: plain
	 * 
	 * @returns Error  The following are error messages that the method may return and indications as to their root cause.  *   Text ("text" field) is missing or invalid (40000): The text to translate is either missing or not a String. *   Dynamic Translation plugin is not installed (40001): The Dynamic Translation API was invoked without activating the com.glide.dynamic\_translation plugin. For information on activating this plugin, see [Dynamic translation overview](https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/dynamic-translation/concept/dynamic-translation-overview.html). *   Default translator is not configured (40002): No translation service is marked as the Default in Translator Configurations. For information on creating/modifying a translator configuration, see [Create a translator configuration](https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/dynamic-translation/task/create-custom-translator.html). *   Translator ("translator" field) is invalid (40003): The passed in translator parameter is not a String. *   <translator> translator is not configured (40004): The specified translation service is not configured in Translator Configurations. For information on creating/modifying a translator configuration, see [Create a translator configuration](https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/dynamic-translation/task/create-custom-translator.html). *   <translator> translator is inactive (40005): The specified translation service is not set to Active in Translator Configurations. For information on creating/modifying a translator configuration, see [Create a translator configuration](https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/dynamic-translation/task/create-custom-translator.html). *   Additional parameters are invalid (40006): Additional parameters passed are not an Object. *   Target languages ("targetLanguages" field) are invalid (40007): The targetLanguages parameter is passed in the call but is not valid for one of the following reasons:          *   Value is not an Array     *   Array is empty     *   One or multiple of the entries is not a String      *   Source language ("sourceLanguage" field) is invalid (40008): The sourceLanguage parameter is passed in the call but the value is not a String. *   Maximum time limit has been exceeded (40009): Operation took longer than the defined timeout value specified in Translation Configuration. Default: 40 seconds *   Unknown error occurred (40051): Default error thrown when the error doesn’t fall in to any other category. *   Text ("text" field) has exceeded its maximum length (40052): The text passed in to translate exceeds the maximum length supported by the corresponding translation service. *   Source language is invalid (40053): The passed in sourceLanguage parameter contains a language code that is not supported by the corresponding translation service. *   Target language is invalid (40054): One or more of the language codes passed in the targetLanguages parameter is not supported by the corresponding translation service. *   Request is not authorized because credentials are missing or not valid (40055): The credentials configured for the translation service in Connections & Credentials are not valid. For information on connections and credentials, see [Dynamic translation overview](https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/dynamic-translation/concept/dynamic-translation-overview.html). *   Text cannot be translated to target languages (40056): The specified translation service is not able to translate the passed in text into the specified target languages.
	 * 
	 */
	getTranslation(textToTranslate: string, parms: any) : Error 
	/**
	 * @description Determines whether the getDetectedLanguage() and getTranslation() methods are enabled for a translation service.
	 * If you pass in a specific translation service, the API checks the method activation for that translation service; otherwise the method checks the default translation service.
	 * 
	 * @example
	 * //This example shows a server script that checks whether the DynamicTranslation methods are active.
	 * IsIBMTranslatorEnabled : function() {
	 *   try {
	 *     var response = sn_dt_api.DynamicTranslation.isEnabled('ibm');
	 *      gs.info(JSON.stringify(response));
	 * } catch(error) {
	 * gs.info(error.message);
	 * }
	 * 
	 * @example
	 * //This example shows a server script that throws an error when an invalid translation service is passed in.
	 * IsIBMTranslatorEnabled : function() {
	 *   try {
	 *     var response = sn_dt_api.DynamicTranslation.isEnabled(123);
	 *      gs.info(JSON.stringify(response));
	 * } catch(error) {
	 * gs.info(error.message);
	 * }
	 * 
	 * @param translator Optional. Translation service to verify whether the methods are active. Translation services are configured under the Translator Configuration menu.  Possible values - not case-sensitive:  *   Microsoft *   IBM *   <custom>  Note: To use custom translation services you must first configure the translation service in your instance. For details, see [Integrate with a translation service provider](https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/dynamic-translation/task/integrate-translation-service-provider.html).
	 * 
	 * @returns Error  The following are error messages that the API may return and indications as to their root cause.  *   Translator ("translator" field) is invalid (40003): The passed in translator parameter is not a String.
	 * 
	 */
	isEnabled(translator: string) : Error 
	}
declare namespace sn_dt_api {
	}
/**
	 * @description Runs activated Flow Designer flows.
	 * This API is deprecated and replaced by the [FlowAPI - Scoped, Global](dev.do#!/reference/api/paris/server/sn_fd-namespace/ScriptableFlowAPI "Use FlowAPI methods to execute actions, flows, or subflows in server-side scripts using either blocking or non-blocking methods.") and [ScriptableFlowRunner - Scoped](dev.do#!/reference/api/paris/server/sn_fd-namespace/ScriptableFlowRunnerScopedAPI "Create a builder object used to define parameters for flow, subflow, and action execution. You can specify a flow to execute in a particular domain. Start the flow, subflow, or action execution directly from the builder and view the results in a ScriptableFlowRunnerResult object.") APIs.  	
 *   	
 * The Flow API can only be used in server scripts.  	
 *   	
 * Use the sn\_fd namespace to access the Flow API.  	
 *   	
 * Before interacting with a flow using the Flow API, you must first create and activate the flow in the Flow Designer interface. Because the Flow API only interacts with pre-built flows, there is no constructor for the class.  	
 *   	
 * 	
 * Note: To optimize instance performance, avoid calling these methods from a script for an asynchronous business rule. Instead, create a scheduled job record within the Flow Designer UI.
	 * 
	 */
	declare class Flow {
	/**
	 * @description Ignores the trigger and runs an activated flow asynchronously.
	 * Asynchronous calls are non-blocking, allowing the client to execute other code in the script without having to wait for the flow to complete.
	 * 
	 * @example
	 * //
	 * //Example 1: Run a flow with a record-based trigger
	 * (function startFlowAsync() {
	 * 
	 * 	try {
	 * 		// You MUST fetch the GlideRecord that will be passed to the flow
	 * 		var glideRecordInput = new GlideRecord('sys_user');
	 * 		glideRecordInput.get('62826bf03710200044e0bfc8bcbe5df1');
	 * 
	 * 		var flowInputs = {};
	 * 		flowInputs['current'] = glideRecordInput;
	 * 		flowInputs['table_name'] = glideRecordInput.getTableName();
	 * 
	 * 		var result = sn_fd.Flow.startAsync('global.recordtriggeredflow', flowInputs);
	 * 
	 * 		//The Sys ID of a flow execution (contextId)
	 * 		var contextId = result.contextId;
	 * 
	 * 	} catch (ex) {
	 * 		var message = ex.getMessage();
	 * 		gs.error(message);
	 * 	}
	 * 
	 * })();
	 * 
	 * //Example 2: Run a flow with a schedule-based trigger
	 * (function startFlowAsync() {
	 * 
	 * 	try {
	 * 		var result = sn_fd.Flow.startAsync('global.scheduletriggeredflow');
	 * 
	 * 		//The Sys ID of a flow execution (contextId)
	 * 		var contextId = result.contextId;
	 * 
	 * 	} catch (ex) {
	 * 		var message = ex.getMessage();
	 * 		gs.error(message);
	 * 	}
	 * 
	 * })();
	 * 
	 * //Example 3: Run a flow with a Service Catalog trigger
	 * (function startFlowAsync() {
	 * 
	 * 	try {
	 * 		// You MUST fetch the GlideRecord that will be passed to the flow
	 * 		var glideRecordInput = new GlideRecord('sc_req_item');
	 * 		glideRecordInput.get(aeed229047801200e0ef563dbb9a71c2);
	 * 
	 * 		var flowInputs = {};
	 * 		flowInputs['request_item'] = glideRecordInput;
	 * 		flowInputs['table_name'] = glideRecordInput.getTableName();
	 * 
	 * 		var result = sn_fd.Flow.startAsync('global.catalogtriggeredflow', flowInputs);
	 * 
	 * 		//The Sys ID of a flow execution (contextId)
	 * 		var contextId = result.contextId;
	 * 
	 * 	} catch (ex) {
	 * 		var message = ex.getMessage();
	 * 		gs.error(message);
	 * 	}
	 * 
	 * })();
	 * 
	 * //Example 4: Run a flow with a MetricBase trigger
	 * (function startMetricBaseFlowAsync() {
	 * 
	 * 	try {
	 * 
	 * 		var oilLevelTriggerRecord = new GlideRecord('oil_levels');
	 * 		oilLevelTriggerRecord.get('a4b3622bc72113007b237f48cb97635f');
	 * 
	 * 		var metricTriggerDefinition = new GlideRecord('sys_metric_trigger_definition');
	 * 		metricTriggerDefinition.get('21f2eae7c72113007b237f48cb976352');
	 * 
	 * 		var event_time = oilLevelTriggerRecord.getValue('sys_created_on');
	 * 		var level = 4;
	 * 
	 * 		var metricBaseFlowInputs = {};
	 * 		//The record that triggered the metric event
	 * 		metricBaseFlowInputs['current'] = oilLevelTriggerRecord;
	 * 		//The MetricBase Trigger Definition record
	 * 		metricBaseFlowInputs['metric'] = metricTriggerDefinition;
	 * 		//The time that the 'record' reached a specific metric event level and triggered this flow
	 * 		metricBaseFlowInputs['event_time'] = event_time;
	 * 		//The target event level to reach in order for a metric flow to trigger
	 * 		metricBaseFlowInputs['level'] = level;
	 * 
	 * 		var result = sn_fd.Flow.startAsync('global.metricbasedtriggeredflow', metricBaseFlowInputs);
	 * 
	 * 		//The Sys ID of a flow execution (contextId)
	 * 		var contextId = result.contextId;
	 * 
	 * 	} catch (ex) {
	 * 		var message = ex.getMessage();
	 * 		gs.error(message);
	 * 	}
	 * 
	 * })();
	 * 
	 * @param scopeName.flowName The application scope for the flow and the internal name of the flow to run. If scopeName is not included, the scope of the user currently logged in is used. Retrieve the internal name of the flow using the Internal name column on the Flow Designer landing page.
	 * @param flowInputs Name-value pairs in <String, Object> format that define record-based flow inputs.  To call a flow with a record-based trigger, use the format:  var flowInputs = {}; flowInputs\['current'\] = glideRecord; flowInputs\['table\_name'\] = glideRecord.getTableName();  The GlideRecord object must be named 'current'.  To call a flow with a Service Catalog trigger, use the format:  var flowInputs = {}; flowInputs\['request\_item'\] = glideRecord; flowInputs\['table\_name'\] = glideRecord.getTableName();  The GlideRecord object must be named 'request\_item'.
	 * 
	 * @returns Object PlanResponse object containing the following properties:  *   contextId: sys\_id of the execution details record for the executed flow. Access the execution details by navigating to the Flow Executions tab in Flow Designer and filtering by sys\_id.  An exception occurs when the flow:  *   Does not exist within the specified application scope, or the flow or scope name has been misspelled. *   Is not activated. *   Exceeds the recursion limit set by the com.glide.hub.flow\_engine.indirect\_recursion\_limit system property. The default value is three.
	 * 
	 */
	startAsync(flowName: string,flowInputs: Map) : Object
	}
/**
	 * @description Use FlowAPI methods to execute actions, flows, or subflows in server-side scripts using either blocking or non-blocking methods.
	 * Access FlowAPI methods in global and scoped scripts using the sn\_fd.FlowAPI object. Create calls to your flows using the Code Snippet action in Flow Designer, or use the methods detailed here to update scripts manually.  	
 *   	
 * 	
 * Note: In domain separated instances, flows, subflows, and actions triggered by this API run in the domain of the user who started the script. For example, if a user in the Acme domain starts a script that triggers a flow, the flow runs in the Acme domain and can only access Acme data, even if the flow runs as the System User.	
 * 	
 *   	
 *   	
 * 	
 * Note: To optimize instance performance, avoid calling these methods from a script for an asynchronous business rule. Instead, create a scheduled job record within the Flow Designer UI.
	 * 
	 */
	declare class FlowAPIScopedGlobal {
	/**
	 * @description Cancels a paused or running flow, subflow, or action.
	 * @example
	 * //This example uses the return value of the startFlow() method to cancel any long-running flows.
	 * (function() { 
	 * 
	 * var now_GR = new GlideRecord('incident'); 
	 * now_GR.addQuery('number', 'INC0000050'); 
	 * now_GR.query(); 
	 * now_GR.next(); 
	 * 
	 *       try { 
	 *           var inputs = {}; 
	 *           inputs['current'] = gr; // GlideRecord of table: 
	 *           inputs['table_name'] = 'incident'; 
	 * 
	 *           // Starts the flow asynchronously.
	 *           var contextId = sn_fd.FlowAPI.startFlow('global.myFlow', inputs); 
	 * 
	 *       } catch (ex) { 
	 *           var message = ex.getMessage(); 
	 *           gs.error(message); 
	 *       } 
	 * })();
	 * 
	 *  
	 * // Call the cancel() method using the context Id returned from the startFlow() method
	 * sn_fd.FlowAPI.cancel(contextId, 'Flow took too long to execute.');
	 * 
	 * @example
	 * //This example cancels any flows named Test Flow.
	 * var now_GR = new GlideRecord("sys_flow_context");
	 * now_GR.addQuery("name", "Test Flow");
	 * now_GR.query();
	 * 
	 * while (now_GR.next()) {
	 *   sn_fd.FlowAPI.cancel(now_GR.getUniqueValue(), 'Canceling Test Flows');
	 * } 
	 * 
	 * @param contextId Sys\_id of the execution details record for the flow, subflow, or action. Access the execution details by navigating to the Flow Executions tab in Flow Designer, or pass the sys\_id of the context record returned by the startFlow(), startSubflow(), or startAction() methods.
	 * @param reason Optional. Reason for canceling the flow, subflow, or action. Appears in the Message field of the Flow engine log entries \[sys\_flow\_log\] table.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	cancel(contextId: string,reason: string) : void
	/**
	 * @description Run an action from a server-side script synchronously.
	 * Execute an action from within a business rule, script include, or any other server-side script. Actions run using this method run synchronously, so the method has access to outputs created by the action. Use startAction to run an action asynchronously.
	 * 
	 * Note: This API is replaced by [ScriptableFlowRunner](https://developer.servicenow.com/go_to_api.do?ID=ScriptableFlowRunnerScopedAPI&v=paris), which deprecates the existing methods used to build objects and execute Flow Designer flows and actions. Use the getRunner() method in the FlowAPI class to return a ScriptableFlowRunner object and use the associated methods. Use the ScriptableFlowRunner methods if you need to support domain separation.
	 * 
	 * Note: This method runs the action as the user who initiates the session.
	 * 
	 * @example
	 * //In this example, the script uses sn\_fd.FlowAPI.executeAction to execute an action called actionforpassword2test in the global scope. A variable called inputs contains the inputs for the action. In this case, a name and password. The outputs for the action are stored in the outputs variable, which in this case, is an encrypted password object. The code is wrapped in a try/catch statement to capture any errors that might occur when the flow executes.
	 * 
	 * (function() {
	 * 	
	 * 	try {
	 * 		var inputs = {};
	 * 		inputs['name'] = ; // String 
	 * 		inputs['password2'] = ; // Password (2 Way Encrypted) 
	 * 		
	 * 		// Execute Synchronously: Run in foreground. Code snippet has access to outputs.
	 * 		// var timeout = ; //timeout in ms
	 *               //sn_fd.FlowAPI.executeAction('global.actionforpassword2test', inputs, timeout)
	 *               var outputs = sn_fd.FlowAPI.executeAction('global.actionforpassword2test', inputs);
	 * 
	 * 		// Get Outputs:
	 * 		// Note: outputs can only be retrieved when executing synchronously.
	 * 		var output = outputs['output']; // Password (2 Way Encrypted)
	 * 		
	 * 	} catch (ex) {
	 * 		var message = ex.getMessage();
	 * 		gs.error(message);
	 * 	}	
	 * })();
	 * 
	 * @param name The scope and name of the action to be executed, for example global.action\_name.
	 * @param inputs Name-value pairs that define action inputs. Use the input name, not the input label.
	 * @param timeout Optional. Timeout in milliseconds. This value overrides the 30 second default timeout specified by the com.glide.hub.flow\_api.default\_execution\_time system property. After the timeout expires, an exception is thrown.
	 * 
	 * @returns Object The action outputs.
	 * 
	 */
	executeAction(name: string,inputs: Map,timeout: number) : Object
	/**
	 * @description Run an action from a server-side script synchronously from the current user session without creating execution details or other related records. Improve performance by eliminating record-keeping overhead. Use this API to increase the speed of high-volume processing, for example multiple executions per second, in a production environment.
	 * Note: This API is replaced by [ScriptableFlowRunner](https://developer.servicenow.com/go_to_api.do?ID=ScriptableFlowRunnerScopedAPI&v=paris), which deprecates the existing methods used to build objects and execute Flow Designer flows and actions. Use the getRunner() method in the FlowAPI class to return a ScriptableFlowRunner object and use the associated methods. Use the ScriptableFlowRunner methods if you need to support domain separation.
	 * 
	 * Note: Execution details and context records are not created, regardless of Flow Designer settings.
	 * 
	 * @example
	 * //
	 * (function() {
	 *   try {
	 * 
	 *     var grIncident = new GlideRecord('incident');
	 *     grIncident.get('57af7aec73d423002728660c4cf6a71c');
	 * 
	 *     var inputs = {};
	 *     inputs['variable'] = grIncident;
	 * 
	 *     var outputs = sn_fd.FlowAPI.executeActionQuick('global.update_record_test', inputs);
	 * 
	 *     // Get Outputs:
	 *     // Note: outputs can only be retrieved when executing synchronously.
	 *     var output1 = outputs['output1']; 
	 * 
	 *   } catch (ex) { 
	 *     var message = ex.getMessage();
	 *     gs.error(message);
	 *     }
	 * 	
	 * })();
	 * 
	 * @param name Scope and internal name of the action to execute. For example, global.action\_name. Locate the Internal name field in the list of Flow Designer actions.
	 * @param inputs Name-value pairs that define action inputs. You can find the available action inputs and required data types under Inputs in the action outline. Use the input name, not the input label. For example, {'table':'incident','sys\_id':'a39d8e3cf0212300964feeefe80ff0ed'}.
	 * @param timeout Optional. Timeout in milliseconds. This value overrides the 30 second default timeout specified by the com.glide.hub.flow\_api.default\_execution\_time system property. After the timeout expires, an exception is thrown.
	 * 
	 * @returns Object Object containing outputs defined by the action. You can find the outputs for the action under Outputs in the action outline.
	 * 
	 */
	executeActionQuick(name: string,inputs: Map,timeout: number) : Object
	/**
	 * @description Runs a Data Stream action synchronously from a server-side script and returns a ScriptableDataStream object.
	 * For more information about Data Stream actions, see [Data Stream actions and pagination](https://docs.servicenow.com/bundle/paris-servicenow-platform/page/administer/integrationhub/concept/data-stream-actions.html).
	 * 
	 * Note: This API is replaced by [ScriptableFlowRunner](https://developer.servicenow.com/go_to_api.do?ID=ScriptableFlowRunnerScopedAPI&v=paris), which deprecates the existing methods used to build objects and execute Flow Designer flows and actions. Use the getRunner() method in the FlowAPI class to return a ScriptableFlowRunner object and use the associated methods. Use the ScriptableFlowRunner methods if you need to support domain separation.
	 * 
	 * Note: Always wrap data stream logic in a try/catch block to catch errors. Always include a finally statement that ends with the close() method from the ScriptableDataStream class to close the data stream and prevent performance issues.
	 * 
	 * @example
	 * //This example creates an incident record for each item returned in the data stream.
	 * (function() {
	 * 	
	 * 	try {
	 * 
	 * 		// Execute Data Stream Action. 
	 * 		var stream = sn_fd.FlowAPI.executeDataStreamAction('x_my_scope.data_stream_name');
	 * 
	 * 		// Process each item in the data stream
	 * 		while (stream.hasNext()) {
	 * 
	 * 			// Get a single item from the data stream.
	 * 			var item = stream.next();
	 * 
	 * 			// Use the item. 
	 * 			var now_GR = new GlideRecord('incident');
	 * 			now_GR.setValue('number',item.id);
	 * 			now_GR.setValue('short_description',item.name);
	 * 			now_GR.insert();
	 * 		
	 * 			// By default, this code snippet will terminate after 10 items.
	 * 			// Remove or modify this limit after testing your code.
	 * 			if (stream.getItemIndex() &gt;= 9) {
	 * 				break;
	 * 			}
	 * 		}		
	 * 	} catch (ex) {
	 * 		var message = ex.getMessage();
	 * 		gs.error(message);
	 * 	} finally {
	 * 		stream.close();
	 * 	}
	 * 	
	 * })();
	 * 
	 * @param name The scope and name of the Data Stream action to execute. For example, global.data\_stream\_action\_name.
	 * @param inputs Name-value pairs that define action inputs. Use the input name, not the input label. If the action does not have any inputs, do not include this parameter.
	 * @param timeout Optional. Amount of time before the action times out. After the timeout expires, an exception is thrown. The timeout only applies to the executeDataStreamAction method, not to methods in the ScriptableDataStream class.  Default: 30000, specified by the com.glide.hub.flow\_api.default\_execution\_time system property  Unit: Milliseconds
	 * 
	 * @returns ScriptableDataStream An object used to iterate through items in the data stream. Use the methods in the ScriptableDataStream class to interact with this object. See [ScriptableDataStream API](https://developer.servicenow.com/go_to_api.do?ID=ScriptableDataStreamAPI&v=paris).
	 * 
	 */
	executeDataStreamAction(name: string,inputs: Map,timeout: number) : ScriptableDataStream
	/**
	 * @description Run a flow from a server-side script synchronously.
	 * Execute a flow from within a business rule, script include, or any other server-side script. Flows run using this method run synchronously. Use startFlow to run a flow asynchronously.
	 * 
	 * Note: This API is replaced by [ScriptableFlowRunner](https://developer.servicenow.com/go_to_api.do?ID=ScriptableFlowRunnerScopedAPI&v=paris), which deprecates the existing methods used to build objects and execute Flow Designer flows and actions. Use the getRunner() method in the FlowAPI class to return a ScriptableFlowRunner object and use the associated methods. Use the ScriptableFlowRunner methods if you need to support domain separation.
	 * 
	 * Note: This method runs the flow as the user specified in flow properties.
	 * 
	 * @example
	 * //This example uses sn\_fd.FlowAPI.executeFlow to execute a global flow called test\_flow. This flow is normally triggered when a record on the incident table is updated. Because you are activating the flow from a script, you must provide this information. The code creates an inputs variable that contains the current record, and the table for the record. The code is wrapped in a try/catch statement to capture any errors that might occur when the flow executes.
	 * 
	 * (function() {
	 * 	try {
	 * 		var inputs = {};
	 * 		inputs['current'] = ; // GlideRecord of table:  
	 * 		inputs['table_name'] = 'incident';
	 * 
	 *               // Execute Synchronously: Run in foreground.
	 *               // var timeout = ; //timeout in ms
	 *               //sn_fd.FlowAPI.executeFlow('global.test_flow', inputs, timeout)
	 *               sn_fd.FlowAPI.executeFlow('global.test_flow', inputs);
	 * 	} catch (ex) {
	 * 		var message = ex.getMessage();
	 * 		gs.error(message);
	 * 	}
	 * })();
	 * 
	 * @param name The scope and name of the flow to be executed, for example global.flow\_name.
	 * @param inputs Name-value pairs that define trigger inputs. Use the input name, not the input label.
	 * @param timeout Optional. Timeout in milliseconds. This value overrides the 30 second default timeout specified by the com.glide.hub.flow\_api.default\_execution\_time system property. After the timeout expires, an exception is thrown.
	 * 
	 * @returns Exception The API throws an exception when a flow called synchronously pauses. The current execution is in the waiting state. In most cases, the exception is removed when the flow resumes. However, the API cannot resume a flow that has been sent to a MID Server.
	 * 
	 */
	executeFlow(name: string,inputs: Map,timeout: number) : Exception
	/**
	 * @description Runs a flow, subflow, or action from a server-side script synchronously or asynchronously without creating execution details or other related records. Improves performance by eliminating record-keeping overhead. Use this API to increase the speed of high-volume processing, for example multiple executions per second, in a production environment.
	 * This method runs the flow as the user who initiates the session. Setting the flow to run as the system user, or impersonating a user, is not supported. Flows that include wait conditions, for instance the Wait for a duration of time flow logic or Ask For Approval action, are not supported.
	 * 
	 * Note: This API is replaced by [ScriptableFlowRunner](https://developer.servicenow.com/go_to_api.do?ID=ScriptableFlowRunnerScopedAPI&v=paris), which deprecates the existing methods used to build objects and execute Flow Designer flows and actions. Use the getRunner() method in the FlowAPI class to return a ScriptableFlowRunner object and use the associated methods. Use the ScriptableFlowRunner methods if you need to support domain separation.
	 * 
	 * Note: Execution details and context records are not created, regardless of Flow Designer settings.
	 * 
	 * @example
	 * //
	 * (function() {
	 * 	
	 *   try {
	 *     var grIncident = new GlideRecord('incident');
	 *     grIncident.get('ed92e8d173d023002728660c4cf6a7bc');
	 * 
	 *     var inputs = {};
	 *     inputs['current'] = grIncident;
	 *     inputs['table_name'] = 'incident';
	 * 		
	 *     sn_fd.FlowAPI.executeFlowQuick('global.test_quick_flow', inputs);
	 * 		
	 *   } catch (ex) {
	 *     var message = ex.getMessage();
	 *     gs.error(message);
	 * 	}
	 * 	
	 * })();
	 * 
	 * @param name Scope and internal name of the flow to execute. For example, global.flow\_name. Locate the Internal name field in the list of Flow Designer flows.
	 * @param inputs Name-value pairs that define trigger inputs. You can find the available trigger inputs and required data types in the Trigger section of the flow. Use the input name, not the input label. For example, {'table':'incident','sys\_id':'a39d8e3cf0212300964feeefe80ff0ed'}.
	 * @param timeout Optional. Timeout in milliseconds. This value overrides the 30 second default timeout specified by the com.glide.hub.flow\_api.default\_execution\_time system property. After the timeout expires, an exception is thrown.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	executeFlowQuick(name: string,inputs: Map,timeout: number) : void
	/**
	 * @description Run an subflow from a server-side script synchronously.
	 * Execute a subflow from within a business rule, script include, or any other server-side script. Subflows run using this method run synchronously. Use startSubflow to run an subflow asynchronously.
	 * 
	 * Note: This API is replaced by [ScriptableFlowRunner](https://developer.servicenow.com/go_to_api.do?ID=ScriptableFlowRunnerScopedAPI&v=paris), which deprecates the existing methods used to build objects and execute Flow Designer flows and actions. Use the getRunner() method in the FlowAPI class to return a ScriptableFlowRunner object and use the associated methods. Use the ScriptableFlowRunner methods if you need to support domain separation.
	 * 
	 * Note: This method runs the flow as the user specified in flow properties.
	 * 
	 * @example
	 * //In this example, the script uses sn\_fd.FlowAPI.executeSubflow to execute an subflow called subflowTest in the global scope. A variable called inputs contains the inputs for the subflow. In this case, a name and password. The code is wrapped in a try/catch statement to capture any errors that might occur when the flow executes.
	 * 
	 * (function() {
	 * 	
	 * 	try {
	 * 		var inputs = {};
	 * 		inputs['name'] = ; // String 
	 * 		inputs['password2'] = ; // Password (2 Way Encrypted) 
	 * 		
	 * 		// Execute Synchronously: Run in foreground.
	 * 		// var timeout = ; //timeout in ms
	 *               //sn_fd.FlowAPI.executeSubflow('global.subflowTest', inputs, timeout)
	 *               var outputs = sn_fd.FlowAPI.executeSubflow('global.subflowTest', inputs);
	 * 		
	 * 	} catch (ex) {
	 * 		var message = ex.getMessage();
	 * 		gs.error(message);
	 * 	}	
	 * })();
	 * 
	 * @param name The scope and name of the subflow to be executed, for example global.subflow\_name.
	 * @param inputs Name-value pairs that define subflow inputs. Use the input name, not the input label.
	 * @param timeout Optional. Timeout in milliseconds. This value overrides the 30 second default timeout specified by the com.glide.hub.flow\_api.default\_execution\_time system property. After the timeout expires, an exception is thrown.
	 * 
	 * @returns Exception The API throws an exception when a flow called synchronously pauses. The current execution is in the waiting state. In most cases, the exception is removed when the flow resumes. However, the API cannot resume a flow that has been sent to a MID Server.
	 * 
	 */
	executeSubflow(name: string,inputs: Map,timeout: number) : Exception
	/**
	 * @description Run a subflow from a server-side script synchronously from the current user session without creating execution details or other related records. Improve performance by eliminating record-keeping overhead. Use this API to increase the speed of high-volume processing, for example multiple executions per second, in a production environment.
	 * This method runs the subflow as the user who initiates the session. Setting the subflow to run as the System User, or impersonating a user, is not applied. Subflows that include wait conditions, for instance the Wait for a duration of time flow logic or Ask For Approval action, are not supported.
	 * 
	 * Note: This API is replaced by [ScriptableFlowRunner](https://developer.servicenow.com/go_to_api.do?ID=ScriptableFlowRunnerScopedAPI&v=paris), which deprecates the existing methods used to build objects and execute Flow Designer flows and actions. Use the getRunner() method in the FlowAPI class to return a ScriptableFlowRunner object and use the associated methods. Use the ScriptableFlowRunner methods if you need to support domain separation.
	 * 
	 * Note: Execution details and context records are not created, regardless of Flow Designer settings.
	 * 
	 * @example
	 * //
	 * (function() {
	 * 
	 *   try {
	 *     var grIncident = new GlideRecord('incident');
	 *     grIncident.get('57af7aec73d423002728660c4cf6a71c');
	 * 
	 *     var inputs = {};
	 *     inputs['variable'] = grIncident;
	 * 
	 *     var outputs = sn_fd.FlowAPI.executeSubflowQuick('global.test_quick_run_subflow', inputs);
	 * 
	 *     // Get Outputs:
	 *     // Note: outputs can only be retrieved when executing synchronously.
	 *     var output1 = outputs['output1']; 
	 * 		
	 *   } catch (ex) {
	 *     var message = ex.getMessage();
	 *     gs.error(message);
	 *     }
	 * 	
	 * })();
	 * 
	 * @param name Scope and internal name of the subflow to execute. For example, global.subflow\_name. Locate the Internal name field in the list of Flow Designer subflows.
	 * @param inputs Name-value pairs that define subflow inputs. You can find the available subflow inputs and required data types under Inputs in the subflow. Use the input name, not the input label. For example, {'table':'incident','sys\_id':'a39d8e3cf0212300964feeefe80ff0ed'}.
	 * @param timeout Optional. Timeout in milliseconds. This value overrides the 30 second default timeout specified by the com.glide.hub.flow\_api.default\_execution\_time system property. After the timeout expires, an exception is thrown.
	 * 
	 * @returns Object Object containing outputs defined by the subflow. You can find the outputs for the subflow under Subflow Inputs & Outputs in the subflow outline.
	 * 
	 */
	executeSubflowQuick(name: string,inputs: Map,timeout: number) : Object
	/**
	 * @description Returns the outputs of a completed action or subflow.
	 * You can use the return values from either the startAction() orstartSubflow() methods as the contextId parameter.
	 * 
	 * Note: This API is replaced by [ScriptableFlowRunner](https://developer.servicenow.com/go_to_api.do?ID=ScriptableFlowRunnerScopedAPI&v=paris), which deprecates the existing methods used to build objects and execute Flow Designer flows and actions. Use the getRunner() method in the FlowAPI class to return a ScriptableFlowRunner object and use the associated methods. Use the ScriptableFlowRunner methods if you need to support domain separation.
	 * 
	 * @example
	 * //This example starts a global subflow called test\_subflow, waits for the flow to finish, and then gets its output values. Normally, a single script does not both run a flow and then get its output values. Since a flow may not complete before the getOutputs() call, this example uses a wait time. Typically, either another script or Flow Designer would have already run the flow. The code is wrapped in a try/catch statement to capture any errors that might occur when the flow executes.
	 * (function() {
	 * 
	 * 	try {
	 * 		// Gather inputs to call flow
	 * 		var inputs = {};
	 * 		inputs['ah_task'] = myTaskRecord; // GlideRecord of table: task
	 * 		inputs['ah_comment'] ='Test Comment' ; // String
	 * 
	 * 		// Call flow
	 * 		var contextId = sn_fd.FlowAPI.startSubflow('global.test_subflow', inputs);
	 * 
	 * 		// Wait for the flow to finish running
	 * 
	 * 		// Get flow outputs
	 * 		var outputs = sn_fd.FlowAPI.getOutputs(contextId);
	 * 		var output1 = outputs['output1'];
	 * 		return output1;
	 * 
	 * 	} catch (ex) {
	 * 		var message = ex.getMessage();
	 * 		gs.error(message);
	 * 	}
	 * })();
	 * 
	 * 
	 * @param contextId The sys\_id of the action or subflow whose outputs you want to get.
	 * 
	 * @returns Object Object containing the action or subflow outputs.
	 * 
	 */
	getOutputs(contextId: string) : Object
	/**
	 * @description Checks if a flow within a give scope contains any Ask for Approval actions.
	 * The hasApprovals() method determines if a flow within a given scope contains any Ask for Approval actions. This method also checks if any Ask for Approval actions within the flow are nested under If flow logic blocks. For more information, see [Ask for Approval action](https://docs.servicenow.com/bundle/paris-servicenow-platform/page/administer/flow-designer/reference/ask-approval-flow-designer.html).
	 * 
	 * @example
	 * //The following example checks if the example\_flow flow within the global scope contains any Ask for Approval actions and logs the result.
	 * (function() {
	 * 	
	 *   try {
	 *     var result = sn_fd.FlowAPI.hasApprovals('global.example_flow');
	 *     gs.log('Result: ' + result);
	 *   }
	 * 
	 *   catch (ex) {
	 *     var message = ex.getMessage();
	 *     gs.error(message);
	 *   }
	 * })();
	 * 
	 * @param scopedFlowName Scope and internal name of the flow to execute. For example, global.flow\_name. Locate the Internal name field in the list of Flow Designer flows.
	 * 
	 * @returns string Returns one of the following values:  *   "ALWAYS" - The flow contains an Ask for Approval action that isn't nested within a conditional If flow logic block. *   "CONDITIONALLY" - The flow contains an Ask for Approval action that is nested within a conditional If flow logic block. *   "NO" - The flow doesn't contain any Ask for Approval actions. *   "UNKNOWN" - There was a compiler error, and the system can't determine whether the flow contains any Ask for Approval actions.
	 * 
	 */
	hasApprovals(scopedFlowName: string) : string
	/**
	 * @description Build password2 values inside a script step.
	 * Identify an encrypted password2 value returned from a GlideRecord, enabling the system to display the value as a masked password rather than an encrypted string.
	 * 
	 * @example
	 * //This example returns value of a password2 field from a user record and stores in in a variable. This variable is passed into the setEncryptedOutput method, which is called using sn\_fd.GlideActionUtil.setEncryptedOutput. The instance recognises the returned value as a password.
	 * 
	 * (function execute(inputs, outputs) {
	 * 	// ...code...
	 * 	var now_GR = new GlideRecord('sys_user');
	 * 	now_GR.addQuery('first_name' , 'Abel');
	 * 	now_GR.query();
	 * 	now_GR.next();
	 * 	var pwVal = now_GR.getValue('pw2');
	 * 	outputs['usedSetEncrypted'] = sn_fd.GlideActionUtil.setEncryptedOutput(pwVal);
	 * 	outputs['justSetDirectly'] = pwVal;
	 * })(inputs, outputs);
	 * 
	 * @param password Encrypted password2 value.
	 * 
	 * @returns string Encrypted password2 value, recognised by the engine as a password value.
	 * 
	 */
	setEncryptedOutput(password: string) : string
	/**
	 * @description Run an action from a server-side script asynchronously.
	 * Execute an action from within a business rule, script include, or any other server-side script. Actions run using this method run asynchronously, so scripts using this method do not have access to any outputs created by the action. Use executeAction to run an action synchronously and access the outputs it generates.
	 * 
	 * Note: This API is replaced by [ScriptableFlowRunner](https://developer.servicenow.com/go_to_api.do?ID=ScriptableFlowRunnerScopedAPI&v=paris), which deprecates the existing methods used to build objects and execute Flow Designer flows and actions. Use the getRunner() method in the FlowAPI class to return a ScriptableFlowRunner object and use the associated methods. Use the ScriptableFlowRunner methods if you need to support domain separation.
	 * 
	 * Note: This method runs the action as the user who initiates the session.
	 * 
	 * @example
	 * //This example uses sn\_fd.FlowAPI.startAction to execute an action called add\_comment in the sn\_itsm\_spoke scope. The inputs object contains a target record and a comment to add to that record. The code is wrapped in a try/catch statement to capture any errors that might occur when the flow executes.
	 * 
	 * (function() {
	 * 	try {
	 * 		var inputs = {};
	 * 		inputs['ah_task'] = myTaskRecord; // GlideRecord of table: task 
	 * 		inputs['ah_comment'] ='Test Comment' ; // String 
	 * 
	 * 		var contextId = sn_fd.FlowAPI.startAction('sn_itsm_spoke.add_comment', inputs);	
	 * 			
	 * 	} catch (ex) {
	 * 		var message = ex.getMessage();
	 * 		gs.error(message);
	 * 	}
	 * })();
	 * 
	 * @param name The scope and name of the action to be executed, for example global.action\_name.
	 * @param inputs Name-value pairs that define action inputs. Use the input name, not the input label.
	 * 
	 * @returns string Sys Id of the context record for the action. Access the context record by navigating to the Flow Executions tab in Flow Designer, selecting a flow execution, and clicking Open Context Record.
	 * 
	 */
	startAction(name: string,inputs: Map) : string
	/**
	 * @description Run an action from a server-side script asynchronously without creating execution details or other related records. Improve performance by eliminating record-keeping overhead. Use this API to increase the speed of high-volume processing, for example multiple executions per second, in a production environment.
	 * Note: This API is replaced by [ScriptableFlowRunner](https://developer.servicenow.com/go_to_api.do?ID=ScriptableFlowRunnerScopedAPI&v=paris), which deprecates the existing methods used to build objects and execute Flow Designer flows and actions. Use the getRunner() method in the FlowAPI class to return a ScriptableFlowRunner object and use the associated methods. Use the ScriptableFlowRunner methods if you need to support domain separation.
	 * 
	 * Note: Execution details and context records are not created, regardless of Flow Designer settings.
	 * 
	 * @example
	 * //
	 * (function() {
	 * 	
	 *   try {
	 *     var grIncident = new GlideRecord('incident');
	 *     grIncident.get('57af7aec73d423002728660c4cf6a71c');
	 * 
	 *     var inputs = {};
	 *     inputs['variable'] = grIncident;
	 * 
	 *     sn_fd.FlowAPI.startActionQuick('global.update_record_test', inputs);
	 * 
	 *   } catch (ex) {
	 *     var message = ex.getMessage();
	 *     gs.error(message);
	 *     }
	 * 	
	 * })();
	 * 
	 * @param name Scope and internal name of the action to execute. For example, global.action\_name. Locate the Internal name field in the list of Flow Designer actions.
	 * @param inputs Name-value pairs that define action inputs. You can find the available action inputs and required data types under Inputs in the action outline. Use the input name, not the input label. For example, {'table':'incident','sys\_id':'a39d8e3cf0212300964feeefe80ff0ed'}.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	startActionQuick(name: string,inputs: Map) : void
	/**
	 * @description Run a flow from a server-side script.
	 * Execute a flow from within a business rule, script include, or any other server-side script. Flows executed with this method run asynchronously.
	 * 
	 * Note: This API is replaced by [ScriptableFlowRunner](https://developer.servicenow.com/go_to_api.do?ID=ScriptableFlowRunnerScopedAPI&v=paris), which deprecates the existing methods used to build objects and execute Flow Designer flows and actions. Use the getRunner() method in the FlowAPI class to return a ScriptableFlowRunner object and use the associated methods. Use the ScriptableFlowRunner methods if you need to support domain separation.
	 * 
	 * Note: This method runs the flow as the user specified in flow properties.
	 * 
	 * @example
	 * //This example uses sn\_fd.FlowAPI.startFlow to execute a global flow called test\_flow. The code creates an inputs variable that contains inputs required by the flow. In this case, the current record and the table for the record. The code is wrapped in a try/catch statement to capture any errors that might occur when the flow executes.
	 * 
	 * (function() {
	 * 
	 * var now_GR = new GlideRecord('incident'); 
	 * now_GR.addQuery('number', 'INC0009009'); 
	 * now_GR.query(); 
	 * now_GR.next();
	 * 
	 *     try {
	 *         var inputs = {};
	 *         inputs['current'] = gr; // GlideRecord of table: Incident
	 *         inputs['table_name'] = 'incident';
	 * 
	 *         var contextId = sn_fd.FlowAPI.startFlow('global.test_flow', inputs);	
	 * 	
	 *     } catch (ex) {
	 *         var message = ex.getMessage();
	 *         gs.error(message);  
	 *     }
	 * })();
	 * 
	 * @param name The scope and name of the flow to be executed, for example global.flow\_name.
	 * @param inputs Name-value pairs that define trigger inputs. Use the input name, not the input label.
	 * 
	 * @returns string Sys Id of the context record for the flow. Access the context record by navigating to the Flow Executions tab in Flow Designer, selecting a flow execution, and clicking Open Context Record.
	 * 
	 */
	startFlow(name: string,inputs: Map) : string
	/**
	 * @description Run a flow from a server-side script asynchronously without creating execution details or other related records. Improve performance by eliminating record-keeping overhead. Use this API to increase the speed of high-volume processing, for example multiple executions per second, in a production environment.
	 * This method runs the flow as the System User. Setting the flow to run as the user who initiates the session, or impersonating a user, is not applied. Flows that include wait conditions, for instance the Wait for a duration of time flow logic or Ask For Approval action, are not supported.
	 * 
	 * Note: This API is replaced by [ScriptableFlowRunner](https://developer.servicenow.com/go_to_api.do?ID=ScriptableFlowRunnerScopedAPI&v=paris), which deprecates the existing methods used to build objects and execute Flow Designer flows and actions. Use the getRunner() method in the FlowAPI class to return a ScriptableFlowRunner object and use the associated methods. Use the ScriptableFlowRunner methods if you need to support domain separation.
	 * 
	 * Note: Execution details and context records are not created, regardless of Flow Designer settings.
	 * 
	 * @example
	 * //
	 * (function() {
	 * 	
	 *   try {
	 *     var grIncident = new GlideRecord('incident');
	 *     grIncident.get('ed92e8d173d023002728660c4cf6a7bc');
	 * 
	 *     var inputs = {};
	 *     inputs['current'] = grIncident;
	 *     inputs['table_name'] = 'incident';
	 * 		
	 *     sn_fd.FlowAPI.startFlowQuick('global.test_quick_flow', inputs);
	 * 		
	 *   } catch (ex) {
	 *     var message = ex.getMessage();
	 *     gs.error(message);
	 * 	}
	 * 	
	 * })();
	 * 
	 * @param name Scope and internal name of the flow to execute. For example, global.flow\_name. Locate the Internal name field in the list of Flow Designer flows.
	 * @param inputs Name-value pairs that define trigger inputs. You can find the available trigger inputs and required data types in the Trigger section of the flow. Use the input name, not the input label. For example, {'table':'incident','sys\_id':'a39d8e3cf0212300964feeefe80ff0ed'}.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	startFlowQuick(name: string,inputs: Map) : void
	/**
	 * @description Run a subflow from a server-side script.
	 * Execute a subflow from within a business rule, script include, or any other server-side script. Subflows run using this method run asynchronously Scripts that include this method do not have access to outputs created by the flow. Use executeSubflow to run a subflow synchronously and access the outputs it generates.
	 * 
	 * Note: This API is replaced by [ScriptableFlowRunner](https://developer.servicenow.com/go_to_api.do?ID=ScriptableFlowRunnerScopedAPI&v=paris), which deprecates the existing methods used to build objects and execute Flow Designer flows and actions. Use the getRunner() method in the FlowAPI class to return a ScriptableFlowRunner object and use the associated methods. Use the ScriptableFlowRunner methods if you need to support domain separation.
	 * 
	 * Note: This method runs the flow as the user specified in flow properties.
	 * 
	 * @example
	 * //This example uses sn\_fd.FlowAPI.startSubflow to execute a global flow called test\_subflow. The code is wrapped in a try/catch statement to capture any errors that might occur when the flow executes.
	 * (function() {
	 * 	try {
	 * 		var inputs = {};
	 * 		inputs['ah_task'] = myTaskRecord; // GlideRecord of table: task 
	 * 		inputs['ah_comment'] ='Test Comment' ; // String 
	 * 
	 * 		var contextId = sn_fd.FlowAPI.startSubflow('global.test_subflow', inputs);
	 * 
	 * 	} catch (ex) {
	 * 		var message = ex.getMessage();
	 * 		gs.error(message);
	 * 	}
	 * 	
	 * })();
	 * 
	 * @param name The scope and name of the subflow to be executed, for example global.subflow\_name.
	 * @param inputs Name-value pairs that define subflow inputs. Use the input name, not the input label.
	 * 
	 * @returns string Sys Id of the context record for the subflow. Access the context record by navigating to the Flow Executions tab in Flow Designer, selecting a flow execution, and clicking Open Context Record.
	 * 
	 */
	startSubflow(name: string,inputs: Map) : string
	/**
	 * @description Run a subflow from a server-side script asynchronously without creating execution details or other related records. Improve performance by eliminating record-keeping overhead. Use this API to increase the speed of high-volume processing, for example multiple executions per second, in a production environment.
	 * This method runs the subflow as the System User. Setting the subflow to run as the user who initiates the session, or impersonating a user, is not applied. Subflows that include wait conditions, for instance the Wait for a duration of time flow logic or Ask For Approval action, are not supported.
	 * 
	 * Note: This API is replaced by [ScriptableFlowRunner](https://developer.servicenow.com/go_to_api.do?ID=ScriptableFlowRunnerScopedAPI&v=paris), which deprecates the existing methods used to build objects and execute Flow Designer flows and actions. Use the getRunner() method in the FlowAPI class to return a ScriptableFlowRunner object and use the associated methods. Use the ScriptableFlowRunner methods if you need to support domain separation.
	 * 
	 * Note: Execution details and context records are not created, regardless of Flow Designer settings.
	 * 
	 * @example
	 * //
	 * (function() {
	 * 
	 *   try {
	 *     var grIncident = new GlideRecord('incident');
	 *     grIncident.get('57af7aec73d423002728660c4cf6a71c');
	 * 
	 *     var inputs = {};
	 *     inputs['variable'] = grIncident;
	 * 
	 *     sn_fd.FlowAPI.startSubflowQuick('global.test_quick_run_subflow', inputs);
	 * 
	 *   } catch (ex) {
	 *     var message = ex.getMessage();  
	 *     gs.error(message);
	 *     }
	 * 	
	 * })();
	 * 
	 * @param name Scope and internal name of the subflow to execute. For example, global.subflow\_name. Locate the Internal name field in the list of Flow Designer subflows.
	 * @param inputs Name-value pairs that define subflow inputs. You can find the available subflow inputs and required data types under Inputs in the subflow. Use the input name, not the input label. For example, {'table':'incident','sys\_id':'a39d8e3cf0212300964feeefe80ff0ed'}.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	startSubflowQuick(name: string,inputs: Map) : void
	/**
	 * @description Returns a ScriptableFlowRunner builder object for a flow or action that you want to run.
	 * @example
	 * //This example runs a flow synchronously.
	 * 
	 * (function() {
	 *   try {
	 * 
	 *     var inputs = {}; 
	 * 
	 *     inputs['sys_id'] = '57af7aec73d423002728660c4cf6a71c';  // Pass the record’s sys_id in as input.  
	 * 
	 *     var result = sn_fd.FlowAPI.getRunner()  // Create a ScriptableFlowRunner builder object.
	 *       .action('global.markapproved')        // Run the global scope action named markapproved.
	 *       .inForeground()
	 *       .inDomain('TOP/ACME')                 // Run the action from the TOP/ACME domain.                               
	 *       .withInputs(inputs)
	 *       .run();                               // Run the action and return a FlowRunnerResult object.
	 * 
	 *     var contextId = result.getContextId();  // Retrieve the context ID from the result
	 *     var dateRun = result.getDate();
	 *     var domainUsed = result.getDomainId();  // Retrieve the Domain ID from the result.
	 *     var flowName = result.getFlowObjectName();
	 *     var flowObjectType = result.getFlowObjectType();
	 * 
	 *     var outputs = result.getOutputs();            // Retrieve any outputs from the action execution.
	 *     var newApprovalStatus = outputs['approval'];  // Echo back the approval status for verification.
	 * 		
	 *   } catch (ex) {
	 *     var message = ex.getMessage();
	 *     gs.error(message);
	 *   }
	 * 	
	 * })();
	 *    
	 * 
	 * @returns ScriptableFlowRunner Builder object used to run a Flow Designer action, flow, or subflow.
	 * 
	 */
	getRunner() : ScriptableFlowRunner
	}
/**
	 * @description Provides methods to interact with a stream of data.
	 * This class can only be used in a server-side script after retrieving a ScriptableDataStream object using one of these APIs:  	
 *   	
 * 	
 * *   The executeDataStreamAction() method in the FlowAPI class. See [FlowAPI](https://developer.servicenow.com/go_to_api.do?ID=ScriptableFlowAPI&v=paris).	
 * *   The getDataStream() method in the ScriptableFlowRunnerResult class. See [ScriptableFlowRunnerResult](../../ScriptableFlowRunnerResultScoped/concept/ScriptableFlowRunnerResultScopedAPI.html "Captures the result of using ScriptableFlowRunner to execute a flow, subflow, or action. Includes data such as the context ID, domain, and any outputs from the flow execution.").	
 * 	
 *   	
 *   	
 * After retrieving a ScriptableDataStream object, call the methods in this specific order:  	
 *   	
 * 	
 * 1.  Use the hasNext() method to determine whether there are more items in the data stream.	
 * 2.  Use the next() method to access the next item in the stream.	
 * 3.  Use the getItemIndex(), getItemInPageIndex(), and getPageIndex() methods to get information from the stream.	
 * 4.  Use the close() method to close the stream.	
 * 	
 *   	
 *   	
 * 	
 * Note: Always wrap data stream logic in a try/catch block to catch errors. Always include a finally statement that ends with the close() method from the ScriptableDataStream class to close the data stream and prevent performance issues.
	 * 
	 */
	declare class ScriptableDataStreamScopedGlobal {
	/**
	 * @description Closes the connection to a data stream. Always call this method after performing any desired operations on a data stream.
	 * You can only call this method on a ScriptableDataStream object returned from the executeDataStreamAction() method in the FlowAPI class. See [FlowAPI](https://developer.servicenow.com/go_to_api.do?ID=ScriptableFlowAPI&v=paris).
	 * 
	 * @example
	 * //
	 * (function() {
	 * 	
	 * 	try {
	 * ​
	 * 		// Execute Data Stream Action. 
	 * 		var stream = sn_fd.FlowAPI.executeDataStreamAction('x_snc_my_scope.data_stream_name');
	 * ​
	 * 		// Process each item in the data stream
	 * 		while (stream.hasNext()) {
	 * ​
	 * 			// Get a single item from the data stream.
	 * 			var user = stream.next();
	 * 		
	 * 			// Only log the first item in each page
	 * 			if (stream.getItemInPageIndex() == 0) {
	 * 				gs.info('first user on page is ' + user.name);
	 * 			}
	 * 		}		
	 * 	} catch (ex) {
	 * 		var message = ex.getMessage();
	 * 		gs.error(message);
	 * 	} finally {
	 * 		stream.close();
	 * 	}
	 * 	
	 * })();
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	close() : void
	/**
	 * @description Returns the current index of an item in a data stream.
	 * You can only call this method on a ScriptableDataStream object returned from the executeDataStreamAction() method in the FlowAPI class. See [FlowAPI](https://developer.servicenow.com/go_to_api.do?ID=ScriptableFlowAPI&v=paris).
	 * 
	 * @example
	 * //
	 * (function() {
	 * 	
	 * 	try {
	 * 
	 * 		// Execute Data Stream Action. 
	 * 		var stream = sn_fd.FlowAPI.executeDataStreamAction('x_my_scope.data_stream_name');
	 * 
	 * 		// Process each item in the data stream
	 * 		while (stream.hasNext()) {
	 * 
	 * 			// Get a single item from the data stream.
	 * 			var User = stream.next();
	 * 
	 * 			// Use the item. Example:
	 * 			// var now_GR = new GlideRecord(&lt;table_name&gt;);
	 * 			// now_GR.&lt;field_name&gt; = User.&lt;field_name&gt;;
	 * 			// now_GR.insert();
	 * 		
	 * 			// By default, this code snippet will terminate after 10 items.
	 * 			// Remove or modify this limit after your code has been tested.
	 * 			if (stream.getItemIndex() &gt;= 9) {
	 * 				break;
	 * 			}
	 * 		}		
	 * 	} catch (ex) {
	 * 		var message = ex.getMessage();
	 * 		gs.error(message);
	 * 	} finally {
	 * 		stream.close();
	 * 	}
	 * 	
	 * })();
	 * 
	 * @returns number Current index of an item in a data stream using zero-based indexing.
	 * 
	 */
	getItemIndex() : number
	/**
	 * @description Returns the current index of an item within the current page in a data stream.
	 * You can only call this method on a ScriptableDataStream object returned from the executeDataStreamAction() method in the FlowAPI class. See [FlowAPI](https://developer.servicenow.com/go_to_api.do?ID=ScriptableFlowAPI&v=paris).
	 * 
	 * @example
	 * //
	 * (function() {
	 * 	
	 * 	try {
	 * ​
	 * 		// Execute Data Stream Action. 
	 * 		var stream = sn_fd.FlowAPI.executeDataStreamAction('x_snc_my_scope.data_stream_name');
	 * ​
	 * 		// Process each item in the data stream
	 * 		while (stream.hasNext()) {
	 * ​
	 * 			// Get a single item from the data stream.
	 * 			var user = stream.next();
	 * 		
	 * 			// Only log the first item in each page
	 * 			if (stream.getItemInPageIndex() == 0) {
	 * 				gs.info('first user on page is ' + user.name);
	 * 			}
	 * 		}		
	 * 	} catch (ex) {
	 * 		var message = ex.getMessage();
	 * 		gs.error(message);
	 * 	} finally {
	 * 		stream.close();
	 * 	}
	 * 	
	 * })();
	 * 
	 * @returns number Current index of an item within the current page in the data stream using zero-based indexing.
	 * 
	 */
	getItemInPageIndex() : number
	/**
	 * @description Returns the current index of a page in a data stream.
	 * You can only call this method on a ScriptableDataStream object returned from the executeDataStreamAction() method in the FlowAPI class. See [FlowAPI](https://developer.servicenow.com/go_to_api.do?ID=ScriptableFlowAPI&v=paris).
	 * 
	 * @example
	 * //
	 * (function() {
	 * 	
	 * 	try {
	 * 
	 * 		// Execute Data Stream Action. 
	 * 		var stream = sn_fd.FlowAPI.executeDataStreamAction('x_my_scope.data_stream_name');
	 * 
	 * 		// Process each item in the data stream
	 * 		while (stream.hasNext()) {
	 * 
	 * 			// Get a single item from the data stream.
	 * 			var item = stream.next();
	 * 
	 * 			// Use the item. 
	 * 			var now_GR = new GlideRecord('incident');
	 * 			now_GR.setValue('number',item.id);
	 * 			now_GR.setValue('short_description',item.name);
	 * 			now_GR.insert();
	 * 		
	 * 			// By default, this code snippet will terminate after 5 pages.
	 * 			// Remove or modify this limit after testing your code.
	 * 			if (stream.getPageIndex() &gt;= 4) {
	 * 				break;
	 * 			}
	 * 		}		
	 * 	} catch (ex) {
	 * 		var message = ex.getMessage();
	 * 		gs.error(message);
	 * 	} finally {
	 * 		stream.close();
	 * 	}
	 * 	
	 * })();
	 * 
	 * @returns number Current index of a page in a data stream using zero-based indexing.
	 * 
	 */
	getPageIndex() : number
	/**
	 * @description Returns true if there are more items in the data stream.
	 * You can only call this method on a ScriptableDataStream object returned from the executeDataStreamAction() method in the FlowAPI class. See [FlowAPI](https://developer.servicenow.com/go_to_api.do?ID=ScriptableFlowAPI&v=paris).
	 * 
	 * Note: By default, the instance waits for 600 seconds to retrieve a single page of data from a MID Server. If you encounter a timeout when running a Data Stream action through a MID Server, change this default by increasing the datastream\_alternative\_env\_fetch\_page\_timeout system property.
	 * 
	 * @example
	 * //This example creates an incident record for each item returned in the data stream.
	 * (function() {
	 * 	
	 * 	try {
	 * 
	 * 		// Execute Data Stream Action. 
	 * 		var stream = sn_fd.FlowAPI.executeDataStreamAction('x_my_scope.data_stream_name');
	 * 
	 * 		// Process each item in the data stream
	 * 		while (stream.hasNext()) {
	 * 
	 * 			// Get a single item from the data stream.
	 * 			var item = stream.next();
	 * 
	 * 			// Use the item. 
	 * 			var now_GR = new GlideRecord('incident');
	 * 			now_GR.setValue('number',item.id);
	 * 			now_GR.setValue('short_description',item.name);
	 * 			now_GR.insert();
	 * 		
	 * 			// By default, this code snippet will terminate after 10 items.
	 * 			// Remove or modify this limit after testing your code.
	 * 			if (stream.getItemIndex() &gt;= 9) {
	 * 				break;
	 * 			}
	 * 		}		
	 * 	} catch (ex) {
	 * 		var message = ex.getMessage();
	 * 		gs.error(message);
	 * 	} finally {
	 * 		stream.close();
	 * 	}
	 * 	
	 * })();
	 * 
	 * @returns boolean Flag that determines whether there are more items in the data stream. Values include:  *   true: There are more items to iterate through in the data stream. *   false: There are no more items in the data stream.
	 * 
	 */
	hasNext() : boolean
	/**
	 * @description Returns the next item in a data stream.
	 * You can only call this method on a ScriptableDataStream object returned from the executeDataStreamAction() method in the FlowAPI class. See [FlowAPI](https://developer.servicenow.com/go_to_api.do?ID=ScriptableFlowAPI&v=paris).
	 * 
	 * Note: By default, the instance waits for 600 seconds to retrieve a single page of data from a MID Server. If you encounter a timeout when running a Data Stream action through a MID Server, change this default by increasing the datastream\_alternative\_env\_fetch\_page\_timeout system property.
	 * 
	 * @example
	 * //This example creates an incident record for each item returned in the data stream.
	 * (function() {
	 * 	
	 * 	try {
	 * 
	 * 		// Execute Data Stream Action. 
	 * 		var stream = sn_fd.FlowAPI.executeDataStreamAction('x_my_scope.data_stream_name');
	 * 
	 * 		// Process each item in the data stream
	 * 		while (stream.hasNext()) {
	 * 
	 * 			// Get a single item from the data stream.
	 * 			var item = stream.next();
	 * 
	 * 			// Use the item. 
	 * 			var now_GR = new GlideRecord('incident');
	 * 			now_GR.setValue('number',item.id);
	 * 			now_GR.setValue('short_description',item.name);
	 * 			now_GR.insert();
	 * 		
	 * 			// By default, this code snippet will terminate after 10 items.
	 * 			// Remove or modify this limit after testing your code.
	 * 			if (stream.getItemIndex() &gt;= 9) {
	 * 				break;
	 * 			}
	 * 		}		
	 * 	} catch (ex) {
	 * 		var message = ex.getMessage();
	 * 		gs.error(message);
	 * 	} finally {
	 * 		stream.close();
	 * 	}
	 * 	
	 * })();
	 * 
	 * @returns Object The next item in the data stream. This object contains the outputs defined by the Data Stream action. To view the Data Stream action outputs, navigate to the Outputs section of the Data Stream action in the Flow Designer interface.
	 * 
	 */
	next() : Object
	}
/**
	 * @description Create a builder object used to define parameters for flow, subflow, and action execution. You can specify a flow to execute in a particular domain. Start the flow, subflow, or action execution directly from the builder and view the results in a ScriptableFlowRunnerResult object.
	 * Use these methods in your server-side scripts with the sn\_fd namespace identifier.	
 * 	
 *   	
 *   	
 * 	
 * API call order	
 * --------------	
 * 	
 * Build and execute flows, subflows, and actions using these APIs in the following order:	
 * 	
 * 1\. FlowAPI: Creates a builder object	
 * 	
 * Use getRunner() to instantiate the ScriptableFlowRunner builder object.	
 * 	
 * 2\. ScriptableFlowRunner: Specify Flow Designer content to run	
 * 	
 * Use these methods in the following order to create the builder pattern:	
 * 	
 * 1.  Use one of the methods action(), datastream(), flow(), or subflow() to specify what type of Flow Designer object to build.	
 * 2.  Use one or more methods such as addInput(), inDomain(), or quick() to specify execution parameters.	
 * 3.  Use the run() method to run the action, flow, or subflow with the provided parameters and return a ScriptableFlowRunnerResult object.	
 * 	
 * 3\. ScriptableFlowRunnerResult: Retrieve Flow Designer execution details	
 * 	
 * Use one or more methods such as getContextId(), getOutputs(), and getDomainId() to view execution details.	
 * 	
 *   	
 *   	
 * 	
 * Example	
 * -------	
 * 	
 * This example shows how to create a ScriptableFlowRunner builder object and uses it to execute an approval action on a specific record. A ScriptableFlowRunnerResult object captures the execution arguments and action outputs.	
 * 	
 *     	
 *     (function() {	
 *       try {	
 *     	
 *         var inputs = {}; 	
 *     	
 *         inputs['sys_id'] = '57af7aec73d423002728660c4cf6a71c';  // Pass the record’s sys_id in as input.  	
 *     	
 *         var result = sn_fd.FlowAPI.getRunner()  // Create a ScriptableFlowRunner builder object.	
 *           .action('global.markapproved')        // Run the global scope action named markapproved.	
 *           .inForeground()	
 *           .inDomain('TOP/ACME')                 // Run the action from the TOP/ACME domain.                               	
 *           .withInputs(inputs)	
 *           .run();                               // Run the action and return a FlowRunnerResult object.	
 *     	
 *         var contextId = result.getContextId();  // Retrieve the context ID from the result	
 *         var dateRun = result.getDate();	
 *         var domainUsed = result.getDomainId();  // Retrieve the Domain ID from the result.	
 *         var flowName = result.getFlowObjectName();	
 *         var flowObjectType = result.getFlowObjectType();	
 *     	
 *         var outputs = result.getOutputs();            // Retrieve any outputs from the action execution.	
 *         var newApprovalStatus = outputs['approval'];  // Echo back the approval status for verification.	
 *     			
 *       } catch (ex) {	
 *         var message = ex.getMessage();	
 *         gs.error(message);	
 *       }	
 *     		
 *     })();
	 * 
	 */
	declare class ScriptableFlowRunner {
	/**
	 * @description Overrides the Connections and Credentials alias associated with the flow, action, or subflow.
	 * To learn more about overriding a Connections and Credentials alias, see [Supporting multiple connections](https://docs.servicenow.com/bundle/paris-servicenow-platform/page/administer/integrationhub/concept/support-multiple-connections.html).
	 * 
	 * @example
	 * //This example shows how to run a flow using a different alias than the default associated with the flow.
	 * (function() {
	 *   try {
	 * 
	 *     var result = sn_fd.FlowAPI.getRunner()
	 *       .flow('global.test_flow')
	 *       .withConnectionAliasOverride('sn_original_alias.spoke', 'x_new_alias.spoke')
	 *       .inForeground()
	 *       .run();
	 * 
	 *     gs.info(result.debug());
	 * 
	 *   } catch (ex) {
	 *     var message = ex.getMessage();
	 *     gs.error(message);
	 *   }
	 * 
	 * })();
	 * 
	 * @param aliasName The name of the alias to override.
	 * @param overrideName The name of the alias to use when running the flow, subflow, or action.
	 * 
	 * @returns ScriptableFlowRunner Builder object used to run a Flow Designer action, flow, or subflow.
	 * 
	 */
	withConnectionAliasOverride(aliasName: string,overrideName: string) : ScriptableFlowRunner
	/**
	 * @description Identifies the scope and name of the action to execute.
	 * @example
	 * //This example shows how to create a ScriptableFlowRunner builder object and uses it to execute an approval action on a specific record. A ScriptableFlowRunnerResult object captures the execution arguments and action outputs.
	 * 
	 * (function() {
	 *   try {
	 * 
	 *     var inputs = {}; 
	 * 
	 *     inputs['sys_id'] = '57af7aec73d423002728660c4cf6a71c';  // Pass the record’s sys_id in as input.  
	 * 
	 *     var result = sn_fd.FlowAPI.getRunner()  // Create a ScriptableFlowRunner builder object.
	 *       .action('global.markapproved')        // Run the global scope action named markapproved.
	 *       .inForeground()
	 *       .inDomain('TOP/ACME')                 // Run the action from the TOP/ACME domain.                               
	 *       .withInputs(inputs)
	 *       .run();                               // Run the action and return a FlowRunnerResult object.
	 * 
	 *     var contextId = result.getContextId();  // Retrieve the context ID from the result
	 *     var dateRun = result.getDate();
	 *     var domainUsed = result.getDomainId();  // Retrieve the Domain ID from the result.
	 *     var flowName = result.getFlowObjectName();
	 *     var flowObjectType = result.getFlowObjectType();
	 * 
	 *     var outputs = result.getOutputs();            // Retrieve any outputs from the action execution.
	 *     var newApprovalStatus = outputs['approval'];  // Echo back the approval status for verification.
	 * 		
	 *   } catch (ex) {
	 *     var message = ex.getMessage();
	 *     gs.error(message);
	 *   }
	 * 	
	 * })();
	 *    
	 * 
	 * @param scopedActionName Scope and name of the action to execute. For example, global.actionName.
	 * 
	 * @returns ScriptableFlowRunner Builder object used to run a Flow Designer action, flow, or subflow.
	 * 
	 */
	action(scopedActionName: string) : ScriptableFlowRunner
	/**
	 * @description Adds a single input. If the name passed as an argument already exists as a separate input, the new value replaces the pre-existing value.
	 * This method adds a single input. To create an object and add multiple inputs, use the withInputs() method.
	 * 
	 * @example
	 * //This example runs an action that takes a single input called table\_name.
	 * (function() {
	 *   try {
	 * 
	 *     var result = sn_fd.FlowAPI.getRunner()
	 *       .action('global.test_action')
	 *       .addInput('table_name', 'incident')
	 *       .inForeground()
	 *       .run();
	 * 
	 *     gs.info(result.debug());
	 * 
	 *   } catch (ex) {
	 *     var message = ex.getMessage();
	 *     gs.error(message);
	 *   }
	 * 
	 * })();
	 * 
	 * @param name The name of the input for the flow, subflow, or action.
	 * @param value The value of the input for the flow, subflow, or action.
	 * 
	 * @returns ScriptableFlowRunner Builder object used to run a Flow Designer action, flow, or subflow.
	 * 
	 */
	addInput(name: string,value: Object) : ScriptableFlowRunner
	/**
	 * @description Identifies the scope and name of the data stream action to execute.
	 * To learn more about data stream actions, see [Data Stream actions and pagination](https://docs.servicenow.com/bundle/paris-servicenow-platform/page/administer/integrationhub/concept/data-stream-actions.html).
	 * 
	 * @example
	 * //This example shows how to run a Data Stream action.
	 * (function() {
	 *   try {
	 * 
	 *     var result = sn_fd.FlowAPI.getRunner()
	 *       .datastream('global.test_dsa')
	 *       .inForeground()
	 *       .run();
	 * 
	 *     gs.info(result.debug());
	 * 
	 *   } catch (ex) {
	 *     var message = ex.getMessage();
	 *     gs.error(message);
	 *   }
	 * 
	 * })();
	 * 
	 * @param scopedDatastreamName Scope and name of the Data Stream action to execute. For example, global.dataStreamActionName.
	 * 
	 * @returns ScriptableFlowRunner Builder object used to run a Flow Designer action, flow, or subflow.
	 * 
	 */
	datastream(scopedDatastreamName: string) : ScriptableFlowRunner
	/**
	 * @description Identifies the scope and name of the flow to execute.
	 * @example
	 * //This example shows how to run a flow that logs a message.
	 * (function() {
	 *   try {
	 * 
	 *     var result = sn_fd.FlowAPI.getRunner()
	 *       .flow('global.test_flow')
	 *       .inForeground()
	 *       .run();
	 * 
	 *     gs.info(result.debug());
	 * 
	 *   } catch (ex) {
	 *     var message = ex.getMessage();
	 *     gs.error(message);
	 *   }
	 * 
	 * })();
	 * 
	 * @param scopedFlowName Scope and name of the flow to execute. For example, global.flowName.
	 * 
	 * @returns ScriptableFlowRunner Builder object used to run a Flow Designer action, flow, or subflow.
	 * 
	 */
	flow(scopedFlowName: string) : ScriptableFlowRunner
	/**
	 * @description Runs the flow, subflow, or action asynchronously. Once the flow object starts running, script execution resumes immediately.
	 * @example
	 * //This example shows how to run a flow asynchronously.
	 * (function() {
	 *   try {
	 * 
	 *     var result = sn_fd.FlowAPI.getRunner()
	 *       .flow('global.test_flow')
	 *       .inBackground()
	 *       .run();
	 * 
	 *     gs.info(result.debug());
	 * 
	 *   } catch (ex) {
	 *     var message = ex.getMessage();
	 *     gs.error(message);
	 *   }
	 * 
	 * })();
	 * 
	 * @returns ScriptableFlowRunner Builder object used to run a Flow Designer action, flow, or subflow.
	 * 
	 */
	inBackground() : ScriptableFlowRunner
	/**
	 * @description Runs the flow, subflow, or action in the specified domain. Checks to ensure the domain exists and is available.
	 * @example
	 * //This example shows how to create a ScriptableFlowRunner builder object and uses it to execute an approval action on a specific record. A ScriptableFlowRunnerResult object captures the execution arguments and action outputs.
	 * 
	 * (function() {
	 *   try {
	 * 
	 *     var inputs = {}; 
	 * 
	 *     inputs['sys_id'] = '57af7aec73d423002728660c4cf6a71c';  // Pass the record’s sys_id in as input.  
	 * 
	 *     var result = sn_fd.FlowAPI.getRunner()  // Create a ScriptableFlowRunner builder object.
	 *       .action('global.markapproved')        // Run the global scope action named markapproved.
	 *       .inForeground()
	 *       .inDomain('TOP/ACME')                 // Run the action from the TOP/ACME domain.                               
	 *       .withInputs(inputs)
	 *       .run();                               // Run the action and return a FlowRunnerResult object.
	 * 
	 *     var contextId = result.getContextId();  // Retrieve the context ID from the result
	 *     var dateRun = result.getDate();
	 *     var domainUsed = result.getDomainId();  // Retrieve the Domain ID from the result.
	 *     var flowName = result.getFlowObjectName();
	 *     var flowObjectType = result.getFlowObjectType();
	 * 
	 *     var outputs = result.getOutputs();            // Retrieve any outputs from the action execution.
	 *     var newApprovalStatus = outputs['approval'];  // Echo back the approval status for verification.
	 * 		
	 *   } catch (ex) {
	 *     var message = ex.getMessage();
	 *     gs.error(message);
	 *   }
	 * 	
	 * })();
	 *    
	 * 
	 * @param domainId The sys\_id or name for the domain of execution for the flow.
	 * 
	 * @returns ScriptableFlowRunner Builder object used to run a Flow Designer action, flow, or subflow.
	 * 
	 */
	inDomain(domainId: string) : ScriptableFlowRunner
	/**
	 * @description Runs the flow, subflow, or action synchronously. Script execution pauses while the flow object is running.
	 * @example
	 * //This example shows how to create a ScriptableFlowRunner builder object and uses it to execute an approval action on a specific record. A ScriptableFlowRunnerResult object captures the execution arguments and action outputs.
	 * 
	 * (function() {
	 *   try {
	 * 
	 *     var inputs = {}; 
	 * 
	 *     inputs['sys_id'] = '57af7aec73d423002728660c4cf6a71c';  // Pass the record’s sys_id in as input.  
	 * 
	 *     var result = sn_fd.FlowAPI.getRunner()  // Create a ScriptableFlowRunner builder object.
	 *       .action('global.markapproved')        // Run the global scope action named markapproved.
	 *       .inForeground()
	 *       .inDomain('TOP/ACME')                 // Run the action from the TOP/ACME domain.                               
	 *       .withInputs(inputs)
	 *       .run();                               // Run the action and return a FlowRunnerResult object.
	 * 
	 *     var contextId = result.getContextId();  // Retrieve the context ID from the result
	 *     var dateRun = result.getDate();
	 *     var domainUsed = result.getDomainId();  // Retrieve the Domain ID from the result.
	 *     var flowName = result.getFlowObjectName();
	 *     var flowObjectType = result.getFlowObjectType();
	 * 
	 *     var outputs = result.getOutputs();            // Retrieve any outputs from the action execution.
	 *     var newApprovalStatus = outputs['approval'];  // Echo back the approval status for verification.
	 * 		
	 *   } catch (ex) {
	 *     var message = ex.getMessage();
	 *     gs.error(message);
	 *   }
	 * 	
	 * })();
	 *    
	 * 
	 * @returns ScriptableFlowRunner Builder object used to run a Flow Designer action, flow, or subflow.
	 * 
	 */
	inForeground() : ScriptableFlowRunner
	/**
	 * @description Runs a flow, subflow, or action from a server-side script synchronously or asynchronously without creating execution details or other related records. Improves performance by eliminating record-keeping overhead. Use this API to increase the speed of high-volume processing, for example multiple executions per second, in a production environment.
	 * @example
	 * //This example shows how to run a flow without creating any related records.
	 * (function() {
	 *   try {
	 * 
	 *     var result = sn_fd.FlowAPI.getRunner()
	 *       .flow('global.test_flow')
	 *       .inForeground()
	 *       .quick()
	 *       .run();
	 * 
	 *     gs.info(result);
	 * 
	 *   } catch (ex) {
	 *     var message = ex.getMessage();
	 *     gs.error(message);
	 *   }
	 * 
	 * })();
	 * 
	 * @returns ScriptableFlowRunner Builder object used to run a Flow Designer action, flow, or subflow.
	 * 
	 */
	quick() : ScriptableFlowRunner
	/**
	 * @description Runs the flow, subflow, or action with the specified parameters.
	 * @example
	 * //This example shows how to create a ScriptableFlowRunner builder object and uses it to execute an approval action on a specific record. A ScriptableFlowRunnerResult object captures the execution arguments and action outputs.
	 * 
	 * (function() {
	 *   try {
	 * 
	 *     var inputs = {}; 
	 * 
	 *     inputs['sys_id'] = '57af7aec73d423002728660c4cf6a71c';  // Pass the record’s sys_id in as input.  
	 * 
	 *     var result = sn_fd.FlowAPI.getRunner()  // Create a ScriptableFlowRunner builder object.
	 *       .action('global.markapproved')        // Run the global scope action named markapproved.
	 *       .inForeground()
	 *       .inDomain('TOP/ACME')                 // Run the action from the TOP/ACME domain.                               
	 *       .withInputs(inputs)
	 *       .run();                               // Run the action and return a FlowRunnerResult object.
	 * 
	 *     var contextId = result.getContextId();  // Retrieve the context ID from the result
	 *     var dateRun = result.getDate();
	 *     var domainUsed = result.getDomainId();  // Retrieve the Domain ID from the result.
	 *     var flowName = result.getFlowObjectName();
	 *     var flowObjectType = result.getFlowObjectType();
	 * 
	 *     var outputs = result.getOutputs();            // Retrieve any outputs from the action execution.
	 *     var newApprovalStatus = outputs['approval'];  // Echo back the approval status for verification.
	 * 		
	 *   } catch (ex) {
	 *     var message = ex.getMessage();
	 *     gs.error(message);
	 *   }
	 * 	
	 * })();
	 *    
	 * 
	 * @returns ScriptableFlowRunnerResult Object containing the execution details of a Flow Designer action, flow, or subflow.
	 * 
	 */
	run() : ScriptableFlowRunnerResult
	/**
	 * @description Identifies the scope and name of the subflow to execute.
	 * @example
	 * //
	 * (function() {
	 *   try {
	 * 
	 *     var result = sn_fd.FlowAPI.getRunner()
	 *       .subflow('global.test_subflow')
	 *       .inForeground()
	 *       .run();
	 * 
	 *     gs.info(result);
	 * 
	 *   } catch (ex) {
	 *     var message = ex.getMessage();
	 *     gs.error(message);
	 *   }
	 * 
	 * })();
	 * 
	 * @param scopedSubflowName Scope and name of the subflow to execute. For example, global.subflowName.
	 * 
	 * @returns ScriptableFlowRunner Builder object used to run a Flow Designer action, flow, or subflow.
	 * 
	 */
	subflow(scopedSubflowName: string) : ScriptableFlowRunner
	/**
	 * @description Sets a timeout for a flow, subflow, or action execution.
	 * @example
	 * //This example shows how to run a flow and sets a timeout for two minutes.
	 * (function() {
	 *   try {
	 * 
	 *     var result = sn_fd.FlowAPI.getRunner()
	 *       .flow('global.test_flow')
	 *       .inForeground()
	 *       .timeout(120000)
	 *       .run();
	 * 
	 *     gs.info(result.debug());
	 * 
	 *   } catch (ex) {
	 *     var message = ex.getMessage();
	 *     gs.error(message);
	 *   }
	 * 
	 * })(); 
	 * 
	 * @param timeout Timeout in milliseconds.
	 * 
	 * @returns ScriptableFlowRunner Builder object used to run a Flow Designer action, flow, or subflow.
	 * 
	 */
	timeout(timeout: number) : ScriptableFlowRunner
	/**
	 * @description Adds a collection of inputs. If a name in one of the name-value pairs already exists, the new value replaces the pre-existing value.
	 * @example
	 * //Creates an input object and passes the value to the withInputs() method.
	 * 
	 * (function() {
	 *   try {
	 * 
	 *     var inputs = {}; 
	 * 
	 *     inputs['sys_id'] = '57af7aec73d423002728660c4cf6a71c';  // Pass the record’s sys_id in as input.  
	 * 
	 *     var result = sn_fd.FlowAPI.getRunner()  // Create a ScriptableFlowRunner builder object.
	 *       .action('global.markapproved')        // Run the global scope action named markapproved.
	 *       .inForeground()
	 *       .inDomain('TOP/ACME')                 // Run the action from the TOP/ACME domain.                               
	 *       .withInputs(inputs)
	 *       .run();                               // Run the action and return a FlowRunnerResult object.
	 * 
	 *     var contextId = result.getContextId();  // Retrieve the context ID from the result
	 *     var dateRun = result.getDate();
	 *     var domainUsed = result.getDomainId();  // Retrieve the Domain ID from the result.
	 *     var flowName = result.getFlowObjectName();
	 *     var flowObjectType = result.getFlowObjectType();
	 * 
	 *     var outputs = result.getOutputs();            // Retrieve any outputs from the action execution.
	 *     var newApprovalStatus = outputs['approval'];  // Echo back the approval status for verification.
	 * 		
	 *   } catch (ex) {
	 *     var message = ex.getMessage();
	 *     gs.error(message);
	 *   }
	 * 	
	 * })();
	 *    
	 * 
	 * @param inputs Map object containing the name-value pairs that define inputs for the flow, subflow, or action.
	 * 
	 * @returns ScriptableFlowRunner Builder object used to run a Flow Designer action, flow, or subflow.
	 * 
	 */
	withInputs(inputs: Object) : ScriptableFlowRunner
	}
/**
	 * @description Captures the result of using ScriptableFlowRunner to execute a flow, subflow, or action. Includes data such as the context ID, domain, and any outputs from the flow execution.
	 * Use these methods in your server-side scripts with the sn\_fd namespace identifier.	
 * 	
 *   	
 *   	
 * 	
 * API call Order	
 * --------------	
 * 	
 * Build and execute flows, subflows, and actions using these APIs in the following order:	
 * 	
 * 1\. FlowAPI: Creates a builder object	
 * 	
 * Use getRunner() to instantiate the ScriptableFlowRunner builder object.	
 * 	
 * 2\. ScriptableFlowRunner: Specify Flow Designer content to run	
 * 	
 * Use these methods in the following order to create the builder pattern:	
 * 	
 * 1.  Use one of the methods action(), datastream(), flow(), or subflow() to specify what type of Flow Designer object to build.	
 * 2.  Use one or more methods such as addInput(), inDomain(), or quick() to specify execution parameters.	
 * 3.  Use the run() method to run the action, flow, or subflow with the provided parameters and return a ScriptableFlowRunnerResult object.	
 * 	
 * 3\. ScriptableFlowRunnerResult: Retrieve Flow Designer execution details	
 * 	
 * Use one or more methods such as getContextId(), getOutputs(), and getDomainId() to view execution details.	
 * 	
 *   	
 *   	
 * 	
 * Example	
 * -------	
 * 	
 * This example shows how to create a ScriptableFlowRunner builder object and uses it to execute an approval action on a specific record. A ScriptableFlowRunnerResult object captures the execution arguments and action outputs.	
 * 	
 *     	
 *     (function() {	
 *       try {	
 *     	
 *         var inputs = {}; 	
 *     	
 *         inputs['sys_id'] = '57af7aec73d423002728660c4cf6a71c';  // Pass the record’s sys_id in as input.  	
 *     	
 *         var result = sn_fd.FlowAPI.getRunner()  // Create a ScriptableFlowRunner builder object.	
 *           .action('global.markapproved')        // Run the global scope action named markapproved.	
 *           .inForeground()	
 *           .inDomain('TOP/ACME')                 // Run the action from the TOP/ACME domain.                               	
 *           .withInputs(inputs)	
 *           .run();                               // Run the action and return a FlowRunnerResult object.	
 *     	
 *         var contextId = result.getContextId();  // Retrieve the context ID from the result	
 *         var dateRun = result.getDate();	
 *         var domainUsed = result.getDomainId();  // Retrieve the Domain ID from the result.	
 *         var flowName = result.getFlowObjectName();	
 *         var flowObjectType = result.getFlowObjectType();	
 *     	
 *         var outputs = result.getOutputs();            // Retrieve any outputs from the action execution.	
 *         var newApprovalStatus = outputs['approval'];  // Echo back the approval status for verification.	
 *     			
 *       } catch (ex) {	
 *         var message = ex.getMessage();	
 *         gs.error(message);	
 *       }	
 *     		
 *     })();
	 * 
	 */
	declare class ScriptableFlowRunnerResult {
	/**
	 * @description Returns information about the executed flow, subflow, or action, including the context ID, domain ID, and execution outputs.
	 * @example
	 * //This example shows how to retrieve information about the executed flow, subflow, or action from the ScriptableFlowRunnerResult object.
	 * (function() {
	 *   try {
	 * 
	 *     var result = sn_fd.FlowAPI.getRunner()
	 *       .flow('global.test_flow')
	 *       .inForeground()
	 *       .timeout(12000)
	 *       .run();
	 * 
	 *     gs.print(result.debug());
	 * 
	 *   } catch (ex) {
	 *     var message = ex.getMessage();
	 *     gs.error(message);
	 *   }
	 * 
	 * })();
	 * 
	 * @returns string Execution details about the Flow Designer action, flow, or subflow run.  *   flow object name: Name of the flow, subflow, or action. *   flow object type: Flow, subflow, action, or datastream action. *   domain ID: ID of the domain that the flow, subflow, or action ran in. *   result time: Amount of time it took to run. *   context ID: Sys\_id of the Flow Designer execution details record for the action, flow, or subflow. *   output count: Number of action or subflow outputs.
	 * 
	 */
	debug() : string
	/**
	 * @description Returns the context ID of the flow, subflow, or action.
	 * @example
	 * //This example shows how to retrieve a context ID from a ScriptableFlowRunnerResult object.
	 * var contextId = result.getContextId();
	 * 
	 * @returns string The sys\_id of the Flow Designer execution details record for the action, flow, or subflow.
	 * 
	 */
	getContextId() : string
	/**
	 * @description Returns the stream of data from a data stream action.
	 * If the datastream() method was used in the ScriptableFlowRunner builder class, this returns the stream of data as a ScriptableDataStream object. Use the ScriptableDataStream class to iterate over items in the stream. See [ScriptableDataStream](dev.do#!/reference/api/paris/server/sn_fd-namespace/ScriptableDataStreamAPI "Provides methods to interact with a stream of data.").
	 * 
	 * For more information about data stream actions, see [Data Stream actions and pagination](https://docs.servicenow.com/bundle/paris-servicenow-platform/page/administer/integrationhub/concept/data-stream-actions.html).
	 * 
	 * @example
	 * //This example shows how to retrieve a data stream from a ScriptableFlowRunnerResult object.
	 * var datastream = result.getDataStream();
	 * 
	 * @returns ScriptableDataStream A ScriptableDataStream object you can use to iterate through items in a data stream. Use the methods in the ScriptableDataStream class to interact with this object. See [ScriptableDataStream](https://developer.servicenow.com/go_to_api.do?ID=ScriptableDataStreamAPI&v=paris).
	 * 
	 */
	getDataStream() : ScriptableDataStream
	/**
	 * @description Returns the date and time when a Flow Designer action, flow, or subflow ran as a GlideDateTime object.
	 * @example
	 * //This example shows how to retrieve the date and time of a flow execution from a ScriptableFlowRunnerResult object.
	 * (function() {
	 *   try {
	 * 
	 *     var result = sn_fd.FlowAPI.getRunner()
	 *       .flow('global.test_flow')
	 *       .inForeground()
	 *       .timeout(12000)
	 *       .run();
	 * 
	 *     gs.print(result.getDate());
	 * 
	 *   } catch (ex) {
	 *     var message = ex.getMessage();
	 *     gs.error(message);
	 *   }
	 * 
	 * })();
	 * 
	 * @returns GlideDateTime The execution date and time for the flow, subflow, or action.
	 * 
	 */
	getDate() : GlideDateTime
	/**
	 * @description Returns the sys\_id of the domain that the Flow Designer action, flow, or subflow ran in.
	 * @example
	 * //This example shows how to retrieve a domain ID from a ScriptableFlowRunnerResult object.
	 * (function() {
	 *   try {
	 * 
	 *     var result = sn_fd.FlowAPI.getRunner()
	 *       .flow('global.test_flow')
	 *       .inForeground()
	 *       .inDomain('TOP/ACME')
	 *       .timeout(12000)
	 *       .run();
	 * 
	 *     gs.print(result.getDomainId());
	 * 
	 *   } catch (ex) {
	 *     var message = ex.getMessage();
	 *     gs.error(message);
	 *   }
	 * 
	 * })();
	 * 
	 * @returns string The sys\_id of the domain that the Flow Designer action, flow, or subflow ran in.
	 * 
	 */
	getDomainId() : string
	/**
	 * @description Returns the scope and internal name of the Flow Designer action, flow, or subflow run.
	 * @example
	 * //This example shows how to retrieve the name of the flow, subflow, or action name from a ScriptableFlowRunnerResult object.
	 * (function() {
	 *   try {
	 * 
	 *     var result = sn_fd.FlowAPI.getRunner()
	 *       .flow('global.test_flow')
	 *       .inForeground()
	 *       .timeout(12000)
	 *       .run();
	 * 
	 *     gs.print(result.getFlowObjectName());
	 * 
	 *   } catch (ex) {
	 *     var message = ex.getMessage();
	 *     gs.error(message);
	 *   }
	 * 
	 * })();
	 * 
	 * @returns string The scope and internal name of the Flow Designer action, flow, or subflow run. For example, global.emailflow.
	 * 
	 */
	getFlowObjectName() : string
	/**
	 * @description Returns the type of Flow Designer object run.
	 * @example
	 * //This example shows how to retrieve the flow object type from the ScriptableFlowRunnerResult API.
	 * (function() {
	 *   try {
	 * 
	 *     var result = sn_fd.FlowAPI.getRunner()
	 *       .flow('global.test_flow')
	 *       .inForeground()
	 *       .timeout(12000)
	 *       .run();
	 * 
	 *     gs.print(result.getFlowObjectType());
	 * 
	 *   } catch (ex) {
	 *     var message = ex.getMessage();
	 *     gs.error(message);
	 *   }
	 * 
	 * })();
	 * 
	 * @returns FlowObjectType The type of Flow Designer object run, which is either action, flow, or subflow.
	 * 
	 */
	getFlowObjectType() : FlowObjectType
	/**
	 * @description Returns the outputs of a completed Flow Designer action, flow, or subflow.
	 * @example
	 * //This example shows how to retrieve the outputs from a Flow Designer action, flow, or subflow run with the ScriptableFlowRunner API.
	 * (function() {
	 *   try {
	 * 
	 *     var result = sn_fd.FlowAPI.getRunner()
	 *       .action('global.test_action')
	 *       .inForeground()
	 *       .timeout(12000)
	 *       .run();
	 * 
	 *     gs.print(result.getOutputs());
	 * 
	 *   } catch (ex) {
	 *     var message = ex.getMessage();
	 *     gs.error(message);
	 *   }
	 * 
	 * })();
	 * 
	 * @returns Object Object containing the output of a completed Flow Designer action, flow, or subflow.
	 * 
	 */
	getOutputs() : Object
	}
/**
	 * @description Runs published Flow Designer subflows.
	 * This API is deprecated and replaced by the [FlowAPI - Scoped, Global](dev.do#!/reference/api/paris/server/sn_fd-namespace/ScriptableFlowAPI "Use FlowAPI methods to execute actions, flows, or subflows in server-side scripts using either blocking or non-blocking methods.").  	
 *   	
 * The Subflow API can only be used in server scripts.  	
 *   	
 * Use the sn\_fd namespace to access the Subflow API.  	
 *   	
 * Before interacting with a subflow using the Subflow API, you must first create and publish the subflow in the Flow Designer interface. Because the Subflow API only interacts with pre-built subflows, there is no constructor for the class.  	
 *   	
 * 	
 * Note: To optimize instance performance, avoid calling these methods from a script for an asynchronous business rule. Instead, create a scheduled job record within the Flow Designer UI.
	 * 
	 */
	declare class Subflow {
	/**
	 * @description Runs a published subflow asynchronously.
	 * Asynchronous calls are non-blocking, allowing the client to execute other code in the script without having to wait for the subflow to complete.
	 * 
	 * @example
	 * //
	 * //Run a subflow that takes two inputs: user, a sys_user record, and laptop_welcome_message, a string.
	 * (function startSubflowAsync() {
	 * 
	 * 	try {
	 * 		var userToProvisionFor = new GlideRecord('sys_user');
	 * 		userToProvisionFor.get('62826bf03710200044e0bfc8bcbe5df1');
	 * 
	 * 		var inputs = {};
	 * 		inputs['user'] = userToProvisionFor;
	 * 		inputs['laptop_welcome_message'] = 'Welcome Onboard!!';
	 * 
	 * 		var result = sn_fd.Subflow.startAsync('sn_devstudio.provisionlaptop', inputs);
	 * 
	 * 		//The Sys ID of a flow execution (contextId)
	 * 		var contextId = result.contextId;
	 * 
	 * 	} catch (ex) {
	 * 		var message = ex.getMessage();
	 * 		gs.error(message);
	 * 	}
	 * 
	 * })();
	 * 
	 * @param scopeName.subflowName The application scope for the subflow and the internal name of the subflow to run. If scopeName is not included, the scope of the user currently logged in is used. Retrieve the internal name of the subflow using the Internal name column on the Flow Designer landing page.
	 * @param inputs Name-value pairs that define subflow inputs. If a subflow includes mandatory inputs, they must be included. For inputs of Reference or Document ID field types, use a GlideRecord object as the value.
	 * 
	 * @returns Object PlanResponse object containing the following properties:  *   contextId: sys\_id of the execution details record for the executed subflow. Access the execution details by navigating to the Flow Executions tab in Flow Designer and filtering by sys\_id.  An exception occurs when the subflow:  *   Does not exist within the specified application scope, or the subflow or scope name has been misspelled. *   Is not published. *   Is passed an input object that does not match the subflow inputs. *   Exceeds the recursion limit set by the com.glide.hub.flow\_engine.indirect\_recursion\_limit system property. The default value is three.
	 * 
	 */
	startAsync(scopeNamesubflowName: string,inputs: Map) : Object
	}
declare namespace sn_fd {
	}
/**
	 * @description Provides basic functionality for the HR application.
	 * The hr\_Utils API requires the HR core plugin (com.sn\_hr\_core).
	 * 
	 */
	declare class hr_Utils {
	/**
	 * @description Gets the Sys ID of the active primary job for a provided user.
	 * @example
	 * //
	 * var result = new sn_hr_core.hr_Utils().getPrimaryJob('5137153cc611227c000bbd1bd8cd2007');
	 * gs.info('Result: ' + result);
	 * 
	 * @param userID Sys ID of the HR user from the User \[sys\_user\] table assigned an active or future job in which Primary is true.
	 * 
	 * @returns string If present and active, Sys ID of the primary job from the Jobs \[sn\_hr\_core\_job\] table, null otherwise.
	 * 
	 */
	getPrimaryJob(userID: string) : string
	/**
	 * @description Instantiates an instance of the hr\_Utils class.
	 */
	constructor() 
	/**
	 * @description Switches the primary job of a user.
	 * @example
	 * //
	 * var result = new sn_hr_core.hr_Utils().switchPrimaryJob('5137153cc611227c000bbd1bd8cd2007', 'bc884e723c0ebf00964fb8b1ce04f9d7');
	 * gs.info('Result: ' + result);
	 * 
	 * @param userId Sys ID of HR user from the Users \[sys\_user\] table.
	 * @param jobId Job Sys ID from the Jobs \[sn\_hr\_core\_job\] table.
	 * 
	 * @returns string Encoded JSON with message and status, error otherwise.
	 * 
	 */
	switchPrimaryJob(userId: string,jobId: string) : string
	}
declare namespace sn_hr_core {
	}
/**
	 * @description Handles lifecycle event activity set cases.
	 * Lifecycle event activity sets represent different stages in the lifecycle event process. You must define when the activity set is triggered, such as immediately upon creation of the lifecycle event case or after the completion of another activity set. Each activity set is associated with a single lifecycle event.  	
 *   	
 * The hr\_ActivitySet API requires the HR Lifecycle Events plugin (com.sn\_hr\_lifecycle\_events).  	
 *   	
 * See also [Understanding Enterprise Onboarding and Transitions](https://docs.servicenow.com/bundle/paris-hr-service-delivery/page/product/human-resources/concept/understanding-enterprise-onboarding-and-transitions.html).
	 * 
	 */
	declare class hr_ActivitySet {
	/**
	 * @description Creates a lifecycle event case based on a specified HR service.
	 * @example
	 * //Output includes summary with Operation Table and Row Count columns. Click the link in the row count column adjacent sn\_hr\_le\_case table to view the new case.
	 * var caseValues = {
	 *               ‘subject_person’: ‘62826bf03710200044e0bfc8bcbe5df1’,
	 *               ‘opened_for’: ‘0e826bf03710200044e0bfc8bcbe5d7c’,
	 *               ‘subject_person_job’: ‘f8d56900587d3700964f4efae452b3db’,
	 *               ‘location’: ‘25ab9d1d0a0a0bb300537fd25687439d’,
	 *               ‘department’: ‘93b25282c0a8000b0b55c8ab34e2f1e6’,
	 *               ‘subject_person_hr_profile’: ‘330370019f22120047a2d126c42e7012’,
	 *               ‘short_description’: ‘Short description’,
	 *               ‘state’: 10
	 *           };
	 * 
	 *   var activity = new sn_hr_le.hr_ActivitySet();
	 *   var createCase = new activity.createLECaseByService(‘4719647c67a60300132a6c3b5685ef16’, caseValues);
	 * 
	 * @param hrService Sys ID of HR service in the HR Services \[sn\_hr\_core\_service\] table to be assigned to the lifecycle event case.
	 * @param caseValues Key-value pairs containing a value for each case field.
	 * @param caseValues.subject_person Sys ID of subject person's name in the User \[sys\_user\] table.
	 * @param caseValues.opened_for Sys ID of case opened for subject person in the Users \[sys\_user\] table.
	 * @param caseValues.subject_person_job Sys ID of subject person's Business title in the Jobs \[sn\_hr\_core\_job\] table.
	 * @param caseValues.location Sys ID of subject person's location in HR profile in the Locations \[cmn\_location\] table.
	 * @param caseValues.department Sys ID of subject person's department in HR profile in the Departments \[cmn\_department\] table.
	 * @param caseValues.subject_person_hr_profile Sys ID of subject person's HR profile in the HR Profiles \[sn\_hr\_core\_profile\] table.
	 * @param caseValues.short_description Case description.
	 * @param caseValues.state Number representing uniquely-defined custom case state.
	 * 
	 * @returns string Sys ID of the created case in the HR Lifecycle Events Cases \[sn\_hr\_le\_case\] table.
	 * 
	 */
	createLECaseByService(hrService: string,caseValues: Object,caseValuessubject_person: string,caseValuesopened_for: string,caseValuessubject_person_job: string,caseValueslocation: string,caseValuesdepartment: string,caseValuessubject_person_hr_profile: string,caseValuesshort_description: string,caseValuesstate: number) : string
	/**
	 * @description Checks for a case matching the specified combination of subject person user, HR service, and job.
	 * @example
	 * //
	 * var userId = '62826bf03710200044e0bfc8bcbe5df1'; //Abel Tuter
	 * var hrServiceId = '64fa4c53534222003066a5f4a11c0875'; //Onboarding HR Service
	 * var jobId = '3D62826bf03710200044e0bfc8bcbe5df1'; // Sample Job sys_id for the example
	 * 
	 * var activity = new sn_hr_le.hr_ActivitySet();
	 * 
	 * var hasActiveLECase = activity.hasActiveCaseByService(userId, hrServiceId, jobId);
	 * 
	 * gs.info('User has an active HR case: ' + hasActiveLECase);
	 * 
	 * @param spUser Sys ID of subject person user in the Users \[sys\_user\] table.
	 * @param hrService Sys ID of HR service in the HR Services \[sn\_hr\_core\_service\] table.
	 * @param jobId Sys ID of subject user's job title in the HR Services \[sn\_hr\_core\_service\] table.
	 * 
	 * @returns boolean True if matching case exists, false otherwise.
	 * 
	 */
	hasActiveCaseByService(spUser: string,hrService: string,jobId: string) : boolean
	/**
	 * @description Instantiates an instance of the hr\_ActivitySet class.
	 */
	constructor() 
	}
/**
	 * @description Enables creating HR cases from a record producer.
	 * The hr\_ActivityUtils script include requires the HR Lifecycle Events plugin (com.sn\_hr\_lifecycle\_events).
	 * 
	 */
	declare class hr_ActivityUtils {
	/**
	 * @description Creates a case from a record producer and service. This method is intended to be called as-is to create a producer and does not require supplying data.
	 * The following variables can be configured in a record producer to provide additional capabilities as follows:
	 * 
	 * *   job – References sn\_hr\_core\_job and maps to subject\_person\_job in an HR case
	 * *   opened\_for – References sys\_user and maps opened\_for in an HR case
	 * *   concurrent\_job – If the record producer includes this variable (by activating checkbox) and parameters have job information, creates a new job in sn\_hr\_core\_job table
	 * 
	 * @example
	 * //This method is intended to be called as-is to create a producer and does not require supplying data.
	 * new sn_hr_core.hr_ActivityUtils(current).createCaseFromProducer(producer, cat_item.sys_id);
	 * 
	 * @param current GlideRecord for case to be created.
	 * @param producer Comma-separated key value pair containing data as questions and answers that are automatically provided when a user submits an answer to a record producer question.
	 * @param cat_item.sys_id Looks up the HR service of case being created and variable names to populate the description.
	 * 
	 * @returns Object New case in related table, varies by product.
	 * 
	 */
	createCaseFromProducer(current: GlideRecord,producer: Object,cat_itemsys_id: string) : Object
	}
declare namespace sn_hr_le {
	}
/**
	 * @description The HistoryWalker API uses the audit/history tables to generate a historical version of an existing record.
	 * It supports the ability to return a GlideRecord to a previous update count (walked GlideRecord) with the appropriate GlideElements populated. After the walked GlideRecord is retrieved, the API provides the ability to move forward and backward the update numbers navigating through its historical updates.  	
 *   	
 * To use this class in scoped and global applications, use the sn\_hw namespace identifier. The History Walker plugin (com.glide.history\_walker) that is enabled by default is required to access the HistoryWalker API.	
 * 	
 * Note: For offline updates, the HistoryWalker API is initiated automatically and the only two methods that you can use are: walkTo() (the input argument for this method can only be zero) and walkForward(). Other available methods cannot be invoked for offline updates.	
 * 	
 *   	
 *   	
 * The HistoryWalker API provides two ways to retrieve the audit data:	
 * 	
 * *   Using History Set: A History Set entry is created (if not available or not up to date) from the data in the Sys Audit \[sys\_audit\] table for the record that you are going to walk through. The History Set table contains records (History Lines) with the actual changes to field values that occurred. Methods of the HistoryWalker API retrieve the history data from the generated History Lines, instead of querying the sys\_audit table.	
 * *   Using Sys Audit table: In this case, the HistoryWalker API extracts data directly querying the sys\_audit table.	
 * 	
 *   	
 *   	
 * By default, it populates the data to support the changes(), changesFrom(), and changesTo() methods in the walked record, as well as provides record and field level security. Additionally, it can enable journal fields and variables to be also populated in the walked GlideRecord when walking through the updates.  	
 *   	
 * This API enables you to:  	
 *   	
 * *   Apply the appropriate history/audit data to get an existing GlideRecord to the state it was in a specific update count.	
 * *   Instruct the HistoryWalker API to use sys\_audit table instead of sys\_history\_set/sys\_history\_line tables to retrieve its data.	
 * *   Turn off row-level access control.	
 * *   Turn off field-level access control.	
 * *   Turn off retrieval and processing of “changes” data.	
 * *   Enable journal fields.	
 * *   Enable variables.
	 * 
	 */
	declare class HistoryWalkerScopedGlobal {
	/**
	 * @description Fetches the database record based on the parameters, using the History Sets to retrieve the historic data.
	 * @example
	 * //:
	 * var incGr = new GlideRecord('incident');
	 * incGr.get('number', 'INC0000015');
	 * 
	 * var hw = new sn_hw.HistoryWalker(incGr.getTableName(), incGr.getUniqueValue());
	 * if (hw.walkTo(3)) {
	 *     var oldPriority = hw.getWalkedRecord().priority;
	 *     gs.info('Incident priority in update number ' + hw.getUpdateNumber() + ' was ' + oldPriority);
	 * } else
	 *     gs.info('Incident does not have update number 3');
	 * 
	 * @param tableName Name of table containing the record to retrieve.
	 * @param sydId sys\_id of the record to retrieve.
	 * 
	 */
	constructor(tableName: string,sydId: string) 
	/**
	 * @description Fetches the database record based on the parameters, using the History Sets or Audit data to retrieve the historic data, depending on the third parameter.
	 * @example
	 * //
	 * var incGr = new GlideRecord('incident');
	 * incGr.get('number', 'INC0000015');
	 * 
	 * var hw = new sn_hw.HistoryWalker(incGr.getTableName(), incGr.getUniqueValue(), true);
	 * if (hw.walkTo(3)) {
	 *     var oldPriority = hw.getWalkedRecord().priority;
	 *     gs.info('Incident priority in update number ' + hw.getUpdateNumber() + ' was ' + oldPriority);
	 * } else
	 *     gs.info('Incident does not have update number 3');
	 * 
	 * 
	 * @param tableName Name of table containing the record to retrieve.
	 * @param sydId sys\_id of the record to retrieve.
	 * @param useAudit *   If set to true, uses audit data to retrieve historic date. *   If set to false, uses history set to retrieve historic date.
	 * 
	 */
	constructor(tableName: string,sydId: string,useAudit: boolean) 
	/**
	 * @description Gets the update number of the current walked glide record.
	 * @example
	 * //:
	 * var incGr = new GlideRecord('incident');
	 * incGr.get('number', 'INC0000015');
	 * 
	 * var hw = new sn_hw.HistoryWalker(incGr.getTableName(), incGr.getUniqueValue());
	 * hw.walkTo(3);
	 * gs.info('Update number: ' + hw.getUpdateNumber());
	 * 
	 * @returns int Current update number or, -1 if record is not found
	 * 
	 */
	getUpdateNumber() : int
	/**
	 * @description Gets the record filled with the history/audit data after walking to an update number.
	 * @example
	 * //:
	 * var incGr = new GlideRecord('incident');
	 * incGr.get('number', 'INC0000015');
	 * 
	 * var hw = new sn_hw.HistoryWalker(incGr.getTableName(), incGr.getUniqueValue());
	 * hw.walkTo(0);
	 * var walkedRecord = hw.getWalkedRecord();
	 * gs.info('Priority in update number 0: ' + walkedRecord.priority);
	 * hw.walkTo(1);
	 * walkedRecord = hw.getWalkedRecord();
	 * gs.info('Short description in update number 1: ' + walkedRecord.short_description);
	 * 
	 * @returns GlideRecord The walked GlideRecord.
	 * 
	 */
	getWalkedRecord() : GlideRecord
	/**
	 * @description Returns a copy of the record filled with the history/audit data after walking to an update number.
	 * Note: The getWalkedRecord() API might modify the obtained walkedRecord after walking to another update number. The getWalkedRecordCopy() API gets a clone to the walked record to prevent that.
	 * 
	 * @example
	 * //:
	 * var incGr = new GlideRecord('incident');
	 * incGr.get('number', 'INC0000015');
	 * 
	 * var walkedRecord = [];
	 * var hw = new sn_hw.HistoryWalker(incGr.getTableName(), incGr.getUniqueValue());
	 * hw.walkTo(0);
	 * walkedRecord[0] = hw.getWalkedRecordCopy();
	 * hw.walkTo(1);
	 * walkedRecord[1] = hw.getWalkedRecordCopy();
	 * 
	 * gs.info('Priority in update number 0: ' + walkedRecord[0].priority);
	 * gs.info('Short description in update number 1: ' + walkedRecord[1].short_description);
	 * 
	 * 
	 * @returns GlideRecord A copy of the walked GlideRecord.
	 * 
	 */
	getWalkedRecordCopy() : GlideRecord
	/**
	 * @description Specifies if the record-level read access is applied on the record when retrieving from the database.
	 * @example
	 * //:
	 * var incGr = new GlideRecord('incident');
	 * incGr.get('number', 'INC0000015');
	 * 
	 * var hw = new sn_hw.HistoryWalker(incGr.getTableName(), incGr.getUniqueValue());
	 * gs.info('Field level security is active: ' + hw.isFieldLevelSecurity());
	 * 
	 * @returns boolean Returns true if field level security is enabled, else returns false.
	 * 
	 */
	isFieldLevelSecurity() : boolean
	/**
	 * @description Specifies if the record-level read access is applied on the record when retrieving from the database.
	 * @example
	 * //:
	 * var incGr = new GlideRecord('incident');
	 * incGr.get('number', 'INC0000015');
	 * 
	 * var hw = new sn_hw.HistoryWalker(incGr.getTableName(), incGr.getUniqueValue());
	 * gs.info('Record level security is active: ' + hw.isRecordLevelSecurity());
	 * 
	 * 
	 * @returns boolean Returns true if the record-level security is enabled, else returns false.
	 * 
	 */
	isRecordLevelSecurity() : boolean
	/**
	 * @description Specifies if any of the methods that walk the record from one update to another, support the “changes” data for each element.
	 * @example
	 * //:
	 * var incGr = new GlideRecord('incident');
	 * incGr.get('number', 'INC0000015');
	 * 
	 * var hw = new sn_hw.HistoryWalker(incGr.getTableName(), incGr.getUniqueValue());
	 * gs.info('Changes is active: ' + hw.isWithChanges());
	 * 
	 * @returns boolean Returns true if the changes support is enabled, else returns false.
	 * 
	 */
	isWithChanges() : boolean
	/**
	 * @description Specifies if journal type fields are populated from the historical values.
	 * @example
	 * //:
	 * var incGr = new GlideRecord('incident');
	 * incGr.get('number', 'INC0000015');
	 * 
	 * var hw = new sn_hw.HistoryWalker(incGr.getTableName(), incGr.getUniqueValue());
	 * gs.info('Populating journal fields is active: ' + hw. isWithJournalFields());
	 * 
	 * 
	 * @returns boolean Returns true if journal fields are populated, else returns false.
	 * 
	 */
	isWithJournalFields() : boolean
	/**
	 * @description Specifies if values are set for variables that are recorded in the history.
	 * @example
	 * //:
	 * var incGr = new GlideRecord('incident');
	 * incGr.get('number', 'INC0000015');
	 * 
	 * var hw = new sn_hw.HistoryWalker(incGr.getTableName(), incGr.getUniqueValue());
	 * gs.info('Populating variables is active: ' + hw. isWithVariables());
	 * 
	 * @returns boolean Returns true if including values for variables, else returns false.
	 * 
	 */
	isWithVariables() : boolean
	/**
	 * @description Sets the field-level read access on each element before setting the historical value of that element in the GlideRecord. If the field-level security is enabled, it prevents the API to populate the fields of the walked record that the user of the API does not have access to.
	 * @example
	 * //:
	 * var incGr = new GlideRecord('incident');
	 * incGr.get('number', 'INC0000015');
	 * 
	 * var hw = new sn_hw.HistoryWalker(incGr.getTableName(), incGr.getUniqueValue());
	 * hw.setFieldLevelSecurity(false);
	 * hw.walkTo(0);
	 * 
	 * 
	 * @param fieldLevelSecurity If set to true, field-level security is enabled. The default value is true.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setFieldLevelSecurity(fieldLevelSecurity: boolean) : void
	/**
	 * @description Sets the record-level read access on the record when retrieving from the database. The record-level security prevents the API to retrieve the walked record if the user of the API does not have access to the GlideRecord.
	 * @example
	 * //:
	 * var incGr = new GlideRecord('incident');
	 * incGr.get('number', 'INC0000015');
	 * 
	 * var hw = new sn_hw.HistoryWalker(incGr.getTableName(), incGr.getUniqueValue());
	 * hw.setRecordLevelSecurity(false);
	 * hw.walkTo(0);
	 * 
	 * 
	 * @param recordLevelSecurity If set to true, record-level read access security is enabled. The default value is true.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setRecordLevelSecurity(recordLevelSecurity: boolean) : void
	/**
	 * @description Sets the “changes” data support for each element for a method that walks the record from one update to another.
	 * @example
	 * //: With the Changes data support
	 * var hw = new sn_hw.HistoryWalker(incGr.getTableName(), incGr.getUniqueValue());
	 * hw.walkTo(0);
	 * do {
	 *     printChangedFields(hw);
	 * } while (hw.walkForward());
	 * 
	 * function printChangedFields(hw) {
	 *     var walkedGr = hw.getWalkedRecord();
	 *     var fields = GlideScriptRecordUtil.get(walkedGr).getChangedFieldNames();
	 *     gs.info("Fields changed at update " + hw.getUpdateNumber() + " were:");
	 *     for (var j = 0; j &lt; fields.size(); j++)
	 *         gs.info(" " + fields.get(j));
	 *     gs.info("");
	 * }
	 * 
	 * 
	 * @param withChanges If set to true, the “changes” data is supported for each element. The default value is true.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setWithChanges(withChanges: boolean) : void
	/**
	 * @description Specifies if journal type fields are populated from the historical values.
	 * @example
	 * //:
	 * var incGr = new GlideRecord('incident');
	 * incGr.get('number', 'INC0000015');
	 * 
	 * var hw = new sn_hw.HistoryWalker(incGr.getTableName(), incGr.getUniqueValue());
	 * hw.setWithJournalFields(true);
	 * if (hw.walkTo(0)) {
	 *     var workNotes = hw.getWalkedRecord().work_notes;
	 *     gs.info('Work Notes in update number ' + hw.getUpdateNumber() + ' was ' + workNotes);
	 * }
	 * 
	 * 
	 * @param withJournalFields If set to true, include journal-type fields. Th default value is false.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setWithJournalFields(withJournalFields: boolean) : void
	/**
	 * @description Specifies if variables are populated from the historical values.
	 * @example
	 * //:
	 * var incGr = new GlideRecord('incident');
	 * incGr.get('number', 'INC0000015');
	 * 
	 * var hw = new sn_hw.HistoryWalker(incGr.getTableName(), incGr.getUniqueValue());
	 * hw.setWithVariables(true);
	 * hw.walkTo(0);
	 * if (hw.walkTo(0)) {
	 *     var varUrgency = hw.getWalkedRecord().variables.urgency;
	 *     gs.info('Variable Urgency in update number ' + hw.getUpdateNumber() + ' was ' + varUrgency);
	 * }
	 * 
	 * 
	 * @param withVariables If set to true, values are populated for variables. The default value is false.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setWithVariables(withVariables: boolean) : void
	/**
	 * @description Applies the appropriate history/audit data to get a walked GlideRecord to the state when it was one update number backward. If the previous update count is missing from the history/audit data, it will walk to the previous available update count.
	 * @example
	 * //:
	 * var incGr = new GlideRecord('incident');
	 * incGr.get('number', 'INC0000015');
	 * 
	 * var hw = new sn_hw.HistoryWalker(incGr.getTableName(), incGr.getUniqueValue());
	 * hw.walkTo(incnow_GR.sys_mod_count);
	 * do {
	 *     var oldPriority = hw.getWalkedRecord().priority;
	 *     gs.info('Incident priority in update number ' + hw.getUpdateNumber() + ' was ' + oldPriority);
	 * } while (hw.walkBackward())
	 * 
	 * 
	 * @returns boolean Returns true if walking to the specified update number was possible. Else, returns false, for example if already walked to the update number 0.
	 * 
	 */
	walkBackward() : boolean
	/**
	 * @description Applies the appropriate history/audit data to get a walked GlideRecord to the state when it was one update number forward. If next update count is missing from the history/audit data, it will walk to the next available update count.
	 * @example
	 * //:
	 * var incGr = new GlideRecord('incident');
	 * incGr.get('number', 'INC0000015');
	 * 
	 * var hw = new sn_hw.HistoryWalker(incGr.getTableName(), incGr.getUniqueValue());
	 * hw.walkTo(0);
	 * do {
	 *     var oldPriority = hw.getWalkedRecord().priority;
	 *     gs.info('Incident priority in update number ' + hw.getUpdateNumber() + ' was ' + oldPriority);
	 * } while (hw.walkForward())
	 * 
	 * 
	 * @returns boolean Returns true if walking to the specified update number was possible. Else, returns false, for example if already walked to the GlideRecord update count.
	 * 
	 */
	walkForward() : boolean
	/**
	 * @description Applies the appropriate history/audit data to get a GlideRecord to the state it was in a specific update count. Use getWalkedRecord() or getWalkedRecordCopy() after walking to an update number to retrieve the “walked” GlideRecord.
	 * @example
	 * //:
	 * var incGr = new GlideRecord('incident');
	 * incGr.get('number', 'INC0000015');
	 * 
	 * var hw = new sn_hw.HistoryWalker(incGr.getTableName(), incGr.getUniqueValue());
	 * if (hw.walkTo(3)) {
	 *     var oldPriority = hw.getWalkedRecord().priority;
	 *     gs.info('Incident priority in update number ' + hw.getUpdateNumber() + ' was ' + oldPriority);
	 * } else
	 *     gs.info('Incident does not have update number 3');
	 * 
	 * @param updateCount The update number to walk to.
	 * 
	 * @returns boolean true if walking to the specified update number was possible, false otherwise, for example if the requested update is greater than the update count of the GlideRecord, or if there is no history/audit data of the requested update number
	 * 
	 */
	walkTo(updateCount: Integer) : boolean
	}
declare namespace sn_hw {
	}
/**
	 * @description Build a large streaming JSON payload to use in a REST or SOAP request to send bulk data to a third-party API. You can also create the payload as a JSON string for a non-streaming option.
	 * Use these methods in the Flow Designer script step with the sn\_ih namespace identifier. For example, you can use this API to create a JSON payload in the Flow Designer Script step and pass the returned value to the REST step to send the request to a third-party service. For more information, see the Flow Designer [Script step](https://docs.servicenow.com/bundle/paris-servicenow-platform/page/administer/flow-designer/reference/javascript-step-action-designer.html).	
 * 	
 * You can only use this API within the Flow Designer environment.	
 * 	
 * To use this class, you must call the build() method in the JSONStreamingBuilder class to return a JSONStreamingAPI object. See [JSONStreamingBuilder](../../JSONStreamingBuilder/concept/JSONStreamingBuilderScopedAPI.html "Create a builder object used to build a large streaming JSON payload to use in a REST or SOAP request to send bulk data to a third-party API. You can also create the payload as a JSON string for a non-streaming option.").	
 * 	
 *   	
 *   	
 * 	
 * API call order	
 * --------------	
 * 	
 * Generate JSON payloads using these APIs in the following order:	
 * 	
 * JSONStreamingBuilder: Creates a builder object	
 * 	
 * Use these methods in the following order to create a builder object:	
 * 	
 * 1.  JSONStreamingBuilder(): Instantiates the JSONStreamingBuilder object.	
 * 2.  withAttachment(): Optional. Creates the JSON object as a streaming attachment and stores it in the Streaming Attachments \[streaming\_attachment\] table. If you do not call this method, the API creates the payload as a JSON string.	
 * 3.  expiresAt(): Optional. Sets a time when the attachment expires. Must also call the withAttachment() method.	
 * 4.  build(): Returns a JSONStreamingAPI object.	
 * 	
 * JSONStreamingAPI: Builds the JSON payload	
 * 	
 * Use these methods in the following order to create the JSON payload:	
 * 	
 * 1.  startObject(): Creates the parent JSON object.	
 * 2.  Methods to generate the JSON key-value pairs, such as writeFieldName(), writeString(), and writeNumberField().	
 * 3.  endObject(): Closes the parent JSON object.	
 * 4.  getJSONString() or getAttachmentId(): Returns the JSON string or attachment ID that you created.	
 * 5.  close(): Closes the JSONStreamingAPI object.	
 * 	
 *   	
 *   	
 * 	
 * Size limits	
 * -----------	
 * 	
 * Payloads generated through this API cannot exceed these size limits:	
 * 	
 * *   Attachments: 200 MB	
 * *   Strings: 5 MB	
 * 	
 *   	
 *   	
 * 	
 * Example	
 * -------	
 * 	
 * This example create a JSON object and stores it in the Attachment \[sys\_attachment\] table with a defined expiration date. You can use this option to create payloads under 5 MB.	
 * 	
 *     try {	
 *       var ttl = new GlideDateTime("2011-01-01 12:00:00");	
 *       var builder = new sn_ih.JSONStreamingBuilder()	
 *         .withAttachment() // Creates the JSON object in streaming mode within an attachment.	
 *         .expiresAt(ttl) // Sets an expiration date for the attachment.	
 *         .build(); // Creates the JSONStreamingAPI object. 	
 *     	
 *       builder.startObject()  // Begins generating the JSON object.	
 *     	.writeFieldName("firstName")  // Adds a "firstName" field 	
 *     	.writeString("John")          // Writes the value of the "firstName" field	
 *     	.writeFieldName("lastName")	
 *     	.writeString("Smith")	
 *     	.writeNumberField("age","25") // Write a number field named "age" with value "25"	
 *     	.writeFieldName("address")	
 *     	.startObject()                // Start a new object nested under the parent object	
 *     		.writeStringField("streetAddress", "21 2nd Street")	
 *     		.writeStringField("city", "Santa Clara")	
 *     		.writeStringField("state", "CA")	
 *     		.writeStringField("postalCode", "11111")	
 *     	.endObject()	
 *     	.writeFieldName("phoneNumber")	
 *     	.startArray()                    // Start an array 	
 *     		.startObject()               // Add the first object to the array 	
 *     			.writeFieldName("type")	
 *     			.writeString("home")	
 *     			.writeFieldName("number")	
 *     			.writeString("212 555-1234")	
 *     		.endObject()	
 *     		.startObject()               // Add another object to the array 	
 *     			.writeFieldName("type")	
 *     			.writeString("fax")	
 *     			.writeFieldName("number")	
 *     			.writeString("646 555-4567")	
 *     		.endObject()	
 *     	.endArray()	
 *     	.endObject()	
 *     	
 *       gs.log(builder.getAttachmentId()); // Returns the sys_id of the attachment.	
 *     } 	
 *     	
 *     catch (err) {	
 *       gs.log(err);	
 *     } 	
 *     	
 *     finally {	
 *       builder.close();	
 *     }	
 * 	
 * Alternatively, this example uses the API in the Script step and creates the payload as a JSON string. You can use this option to create payloads under 5 MB.	
 * 	
 *     (function execute(inputs, outputs) {	
 *     	
 *       var builder = new sn_ih.JSONStreamingBuilder().build();	
 *       	
 *       builder.startObject()	
 *         .enablePrettyPrint()	
 *         .writeFieldName("firstName")	
 *         .writeString("John")	
 *         .writeFieldName("lastName")	
 *         .writeString("Smith")	
 *         .writeNumberField("age","25")	
 *         .writeFieldName("address")	
 *         .startObject()	
 *           .writeStringField("streetAddress", "21 2nd Street")	
 *           .writeStringField("city", "Santa Clara")	
 *           .writeStringField("state", "CA")	
 *           .writeStringField("postalCode", "11111")	
 *         .endObject()	
 *         .writeFieldName("phoneNumber")	
 *         .startArray()	
 *           .startObject()	
 *             .writeFieldName("type")	
 *             .writeString("home")	
 *             .writeFieldName("number")	
 *             .writeString("212 555-1234")	
 *           .endObject()	
 *           .startObject()	
 *             .writeFieldName("type")	
 *             .writeString("fax")	
 *             .writeFieldName("number")	
 *             .writeString("646 555-4567")	
 *           .endObject()	
 *         .endArray()	
 *         .endObject()	
 *     	
 *       outputs.payload = builder.getJSONString();	
 *       	
 *     })(inputs, outputs);	
 * 	
 * Output:	
 * 	
 *     {	
 *     "firstName" : "John",	
 *     "lastName" : "Smith",	
 *     "age" : 25,	
 *     "address" : {	
 *       "streetAddress" : "21 2nd Street",	
 *       "city" : "Santa Clara",	
 *       "state" : "CA",	
 *       "postalCode" : "11111"	
 *     },	
 *     "phoneNumber" : [ {	
 *       "type" : "home",	
 *       "number" : "212 555-1234"	
 *     }, {	
 *       "type" : "fax",	
 *       "number" : "646 555-4567"	
 *     } ]	
 *     }
	 * 
	 */
	declare class JSONStreamingAPI {
	/**
	 * @description Closes the JSONStreamingAPI object. Must call this method to close the stream after building a JSON object.
	 * @example
	 * //This example shows how to create a JSON object and store it in the Attachment \[sys\_attachment\] table with a defined expiration date.
	 * try {
	 *   var ttl = new GlideDateTime("2011-01-01 12:00:00");
	 *   var builder = new sn_ih.JSONStreamingBuilder()
	 *     .withAttachment() // Creates the JSON object in streaming mode within an attachment.
	 *     .expiresAt(ttl) // Sets an expiration date for the attachment.
	 *     .build(); // Creates the JSONStreamingAPI object. 
	 * 
	 *   builder.startObject()  // Begins generating the JSON object.
	 * 	.writeFieldName("firstName")  // Adds a "firstName" field 
	 * 	.writeString("John")          // Writes the value of the "firstName" field
	 * 	.writeFieldName("lastName")
	 * 	.writeString("Smith")
	 * 	.writeNumberField("age","25") // Write a number field named "age" with value "25"
	 * 	.writeFieldName("address")
	 * 	.startObject()                // Start a new object nested under the parent object
	 * 		.writeStringField("streetAddress", "21 2nd Street")
	 * 		.writeStringField("city", "Santa Clara")
	 * 		.writeStringField("state", "CA")
	 * 		.writeStringField("postalCode", "11111")
	 * 	.endObject()
	 * 	.writeFieldName("phoneNumber")
	 * 	.startArray()                    // Start an array 
	 * 		.startObject()               // Add the first object to the array 
	 * 			.writeFieldName("type")
	 * 			.writeString("home")
	 * 			.writeFieldName("number")
	 * 			.writeString("212 555-1234")
	 * 		.endObject()
	 * 		.startObject()               // Add another object to the array 
	 * 			.writeFieldName("type")
	 * 			.writeString("fax")
	 * 			.writeFieldName("number")
	 * 			.writeString("646 555-4567")
	 * 		.endObject()
	 * 	.endArray()
	 * 	.endObject()
	 * 
	 *   gs.log(builder.getAttachmentId()); // Returns the sys_id of the attachment.
	 * } 
	 * 
	 * catch (err) {
	 *   gs.log(err);
	 * } 
	 * 
	 * finally {
	 *   builder.close();
	 * }
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	close() : void
	/**
	 * @description Ends pretty print JSON formatting.
	 * Before calling this method, you must first call enablePrettyPrint() to add JSON formatting to a specific section.
	 * 
	 * @example
	 * //This example adds pretty print formatting to the address object.
	 * try {
	 *   var builder = new sn_ih.JSONStreamingBuilder().build();
	 * 
	 *   builder.startObject()
	 *     .writeFieldName("firstName")
	 *     .writeString("John")
	 *     .writeFieldName("lastName")
	 *     .writeString("Smith")  
	 *     .writeNumberField("age","25")
	 *     .enablePrettyPrint()
	 *     .writeFieldName("address")
	 *     .startObject()
	 *     .writeStringField("streetAddress", "21 2nd Street")
	 *     .writeStringField("city", "Santa Clara")
	 *     .writeStringField("state", "CA")
	 *     .writeStringField("postalCode", "11111")
	 *     .endObject()
	 *     .disablePrettyPrint()
	 *     .writeFieldName("phoneNumber")
	 *     .startArray()
	 *     .startObject()
	 *     .writeFieldName("type")
	 *     .writeString("home")
	 *     .writeFieldName("number")
	 *     .writeString("212 555-1234")
	 *     .endObject()
	 *     .startObject()
	 *     .writeFieldName("type")
	 *     .writeString("fax")
	 *     .writeFieldName("number")
	 *     .writeString("646 555-4567")
	 *     .endObject()
	 *     .endArray()
	 *     .endObject()
	 * 
	 *   gs.log(builder.getJSONString());
	 * } 
	 * 
	 * catch (err) {
	 *   gs.log("Exception: " + err);
	 * } 
	 * 
	 * finally {
	 *   builder.close();
	 * }
	 * 
	 * @returns JSONStreamingAPI Streaming JSON object used to construct the payload.
	 * 
	 */
	disablePrettyPrint() : JSONStreamingAPI
	/**
	 * @description Adds pretty print formatting to a JSON object, or a section of a JSON object.
	 * To disable pretty print formatting in a JSON object section, use the disablePrettyPrint() method.
	 * 
	 * @example
	 * //
	 * try {
	 *   var builder = new sn_ih.JSONStreamingBuilder().build();
	 * 
	 *   builder.enablePrettyPrint()
	 *     .startObject()
	 *     .writeFieldName("firstName")
	 *     .writeString("John")
	 *     .writeFieldName("lastName")
	 *     .writeString("Smith")
	 *     .writeNumberField("age","25")
	 *     .writeFieldName("address")
	 *     .startObject()
	 *     .writeStringField("streetAddress", "21 2nd Street")
	 *     .writeStringField("city", "Santa Clara")
	 *     .writeStringField("state", "CA")
	 *     .writeStringField("postalCode", "11111")
	 *     .endObject()
	 *     .writeFieldName("phoneNumber")
	 *     .startArray()
	 *     .startObject()
	 *     .writeFieldName("type")
	 *     .writeString("home")
	 *     .writeFieldName("number")
	 *     .writeString("212 555-1234")
	 *     .endObject()
	 *     .startObject()
	 *     .writeFieldName("type")
	 *     .writeString("fax")
	 *     .writeFieldName("number")
	 *     .writeString("646 555-4567")
	 *     .endObject()
	 *     .endArray()
	 *     .endObject()
	 * 
	 *   gs.log(builder.getJSONString());
	 * } 
	 * 
	 * catch (err) {
	 *   gs.log("Exception: " + err);
	 * } 
	 * 
	 * finally {
	 *   builder.close();
	 * }
	 * 
	 * 
	 * @returns JSONStreamingAPI Streaming JSON object used to construct the payload.
	 * 
	 */
	enablePrettyPrint() : JSONStreamingAPI
	/**
	 * @description Closes an array within the parent JSON object.
	 * Call the startArray() method first to open the array.
	 * 
	 * @example
	 * //This example shows how to create a JSON object and store it in the Attachment \[sys\_attachment\] table with a defined expiration date.
	 * try {
	 *   var ttl = new GlideDateTime("2011-01-01 12:00:00");
	 *   var builder = new sn_ih.JSONStreamingBuilder()
	 *     .withAttachment() // Creates the JSON object in streaming mode within an attachment.
	 *     .expiresAt(ttl) // Sets an expiration date for the attachment.
	 *     .build(); // Creates the JSONStreamingAPI object. 
	 * 
	 *   builder.startObject()  // Begins generating the JSON object.
	 * 	.writeFieldName("firstName")  // Adds a "firstName" field 
	 * 	.writeString("John")          // Writes the value of the "firstName" field
	 * 	.writeFieldName("lastName")
	 * 	.writeString("Smith")
	 * 	.writeNumberField("age","25") // Write a number field named "age" with value "25"
	 * 	.writeFieldName("address")
	 * 	.startObject()                // Start a new object nested under the parent object
	 * 		.writeStringField("streetAddress", "21 2nd Street")
	 * 		.writeStringField("city", "Santa Clara")
	 * 		.writeStringField("state", "CA")
	 * 		.writeStringField("postalCode", "11111")
	 * 	.endObject()
	 * 	.writeFieldName("phoneNumber")
	 * 	.startArray()                    // Start an array 
	 * 		.startObject()               // Add the first object to the array 
	 * 			.writeFieldName("type")
	 * 			.writeString("home")
	 * 			.writeFieldName("number")
	 * 			.writeString("212 555-1234")
	 * 		.endObject()
	 * 		.startObject()               // Add another object to the array 
	 * 			.writeFieldName("type")
	 * 			.writeString("fax")
	 * 			.writeFieldName("number")
	 * 			.writeString("646 555-4567")
	 * 		.endObject()
	 * 	.endArray()
	 * 	.endObject()
	 * 
	 *   gs.log(builder.getAttachmentId()); // Returns the sys_id of the attachment.
	 * } 
	 * 
	 * catch (err) {
	 *   gs.log(err);
	 * } 
	 * 
	 * finally {
	 *   builder.close();
	 * }
	 * 
	 * @returns JSONStreamingAPI Streaming JSON object used to construct the payload.
	 * 
	 */
	endArray() : JSONStreamingAPI
	/**
	 * @description Closes an object within the parent JSON object.
	 * Call the startObject() method first to open the object.
	 * 
	 * @example
	 * //This example shows how to create a JSON object and store it in the Attachment \[sys\_attachment\] table with a defined expiration date.
	 * try {
	 *   var ttl = new GlideDateTime("2011-01-01 12:00:00");
	 *   var builder = new sn_ih.JSONStreamingBuilder()
	 *     .withAttachment() // Creates the JSON object in streaming mode within an attachment.
	 *     .expiresAt(ttl) // Sets an expiration date for the attachment.
	 *     .build(); // Creates the JSONStreamingAPI object. 
	 * 
	 *   builder.startObject()  // Begins generating the JSON object.
	 * 	.writeFieldName("firstName")  // Adds a "firstName" field 
	 * 	.writeString("John")          // Writes the value of the "firstName" field
	 * 	.writeFieldName("lastName")
	 * 	.writeString("Smith")
	 * 	.writeNumberField("age","25") // Write a number field named "age" with value "25"
	 * 	.writeFieldName("address")
	 * 	.startObject()                // Start a new object nested under the parent object
	 * 		.writeStringField("streetAddress", "21 2nd Street")
	 * 		.writeStringField("city", "Santa Clara")
	 * 		.writeStringField("state", "CA")
	 * 		.writeStringField("postalCode", "11111")
	 * 	.endObject()
	 * 	.writeFieldName("phoneNumber")
	 * 	.startArray()                    // Start an array 
	 * 		.startObject()               // Add the first object to the array 
	 * 			.writeFieldName("type")
	 * 			.writeString("home")
	 * 			.writeFieldName("number")
	 * 			.writeString("212 555-1234")
	 * 		.endObject()
	 * 		.startObject()               // Add another object to the array 
	 * 			.writeFieldName("type")
	 * 			.writeString("fax")
	 * 			.writeFieldName("number")
	 * 			.writeString("646 555-4567")
	 * 		.endObject()
	 * 	.endArray()
	 * 	.endObject()
	 * 
	 *   gs.log(builder.getAttachmentId()); // Returns the sys_id of the attachment.
	 * } 
	 * 
	 * catch (err) {
	 *   gs.log(err);
	 * } 
	 * 
	 * finally {
	 *   builder.close();
	 * }
	 * 
	 * @returns JSONStreamingAPI Streaming JSON object used to construct the payload.
	 * 
	 */
	endObject() : JSONStreamingAPI
	/**
	 * @description Returns the sys\_id of the attachment record in the Streaming Attachments \[streaming\_attachment\] table that contains the JSON payload.
	 * You must call the withAttachment() method in the JSONStreamingBuilder class to save the JSON payload as an attachment before calling this method. See [JSONStreamingBuilder](dev.do#!/reference/api/paris/server/sn_ih-namespace/JSONStreamingBuilderScopedAPI "Create a builder object used to build a large streaming JSON payload to use in a REST or SOAP request to send bulk data to a third-party API. You can also create the payload as a JSON string for a non-streaming option.").
	 * 
	 * @example
	 * //This example shows how to create a JSON object and store it in the Attachment \[sys\_attachment\] table with a defined expiration date.
	 * try {
	 *   var ttl = new GlideDateTime("2011-01-01 12:00:00");
	 *   var builder = new sn_ih.JSONStreamingBuilder()
	 *     .withAttachment() // Creates the JSON object in streaming mode within an attachment.
	 *     .expiresAt(ttl) // Sets an expiration date for the attachment.
	 *     .build(); // Creates the JSONStreamingAPI object. 
	 * 
	 *   builder.startObject()  // Begins generating the JSON object.
	 * 	.writeFieldName("firstName")  // Adds a "firstName" field 
	 * 	.writeString("John")          // Writes the value of the "firstName" field
	 * 	.writeFieldName("lastName")
	 * 	.writeString("Smith")
	 * 	.writeNumberField("age","25") // Write a number field named "age" with value "25"
	 * 	.writeFieldName("address")
	 * 	.startObject()                // Start a new object nested under the parent object
	 * 		.writeStringField("streetAddress", "21 2nd Street")
	 * 		.writeStringField("city", "Santa Clara")
	 * 		.writeStringField("state", "CA")
	 * 		.writeStringField("postalCode", "11111")
	 * 	.endObject()
	 * 	.writeFieldName("phoneNumber")
	 * 	.startArray()                    // Start an array 
	 * 		.startObject()               // Add the first object to the array 
	 * 			.writeFieldName("type")
	 * 			.writeString("home")
	 * 			.writeFieldName("number")
	 * 			.writeString("212 555-1234")
	 * 		.endObject()
	 * 		.startObject()               // Add another object to the array 
	 * 			.writeFieldName("type")
	 * 			.writeString("fax")
	 * 			.writeFieldName("number")
	 * 			.writeString("646 555-4567")
	 * 		.endObject()
	 * 	.endArray()
	 * 	.endObject()
	 * 
	 *   gs.log(builder.getAttachmentId()); // Returns the sys_id of the attachment.
	 * } 
	 * 
	 * catch (err) {
	 *   gs.log(err);
	 * } 
	 * 
	 * finally {
	 *   builder.close();
	 * }
	 * 
	 * @returns string Sys\_id of the attachment record in the Streaming Attachments \[streaming\_attachment\] table that contains the JSON payload.
	 * 
	 */
	getAttachmentId() : string
	/**
	 * @description Returns the JSON object as a string.
	 * To return the JSON object as a string, do not call the withAttachment() method in the JSONStreamingBuilder class. See [JSONStreamingBuilder](dev.do#!/reference/api/paris/server/sn_ih-namespace/JSONStreamingBuilderScopedAPI "Create a builder object used to build a large streaming JSON payload to use in a REST or SOAP request to send bulk data to a third-party API. You can also create the payload as a JSON string for a non-streaming option.").
	 * 
	 * @example
	 * //
	 * try {
	 *   var builder = new sn_ih.JSONStreamingBuilder().build();
	 * 
	 *   builder.startObject()
	 *     .writeFieldName("firstName")
	 *     .writeString("John")
	 *     .writeFieldName("lastName")
	 *     .writeString("Smith")
	 *     .writeNumberField("age","25")
	 *     .writeFieldName("address")
	 *     .startObject()
	 *     .writeStringField("streetAddress", "21 2nd Street")
	 *     .writeStringField("city", "Santa Clara")
	 *     .writeStringField("state", "CA")
	 *     .writeStringField("postalCode", "11111")
	 *     .endObject()
	 *     .writeFieldName("phoneNumber")
	 *     .startArray()
	 *     .startObject()
	 *     .writeFieldName("type")
	 *     .writeString("home")
	 *     .writeFieldName("number")
	 *     .writeString("212 555-1234")
	 *     .endObject()
	 *     .startObject()
	 *     .writeFieldName("type")
	 *     .writeString("fax")
	 *     .writeFieldName("number")
	 *     .writeString("646 555-4567")
	 *     .endObject()
	 *     .endArray()
	 *     .endObject()
	 * 
	 *   gs.log(builder.getJSONString());
	 * } 
	 * 
	 * catch (err) {
	 *   gs.log("Exception: " + err);
	 * } 
	 * 
	 * finally {
	 *   builder.close();
	 * }
	 * 
	 * @returns string Contains the JSON object built using the JSONStreamingAPI.
	 * 
	 */
	getJSONString() : string
	/**
	 * @description Opens an array within the parent JSON object.
	 * Include the endArray() method to close the array.
	 * 
	 * @example
	 * //This example shows how to create a JSON object and store it in the Attachment \[sys\_attachment\] table with a defined expiration date.
	 * try {
	 *   var ttl = new GlideDateTime("2011-01-01 12:00:00");
	 *   var builder = new sn_ih.JSONStreamingBuilder()
	 *     .withAttachment() // Creates the JSON object in streaming mode within an attachment.
	 *     .expiresAt(ttl) // Sets an expiration date for the attachment.
	 *     .build(); // Creates the JSONStreamingAPI object. 
	 * 
	 *   builder.startObject()  // Begins generating the JSON object.
	 * 	.writeFieldName("firstName")  // Adds a "firstName" field 
	 * 	.writeString("John")          // Writes the value of the "firstName" field
	 * 	.writeFieldName("lastName")
	 * 	.writeString("Smith")
	 * 	.writeNumberField("age","25") // Write a number field named "age" with value "25"
	 * 	.writeFieldName("address")
	 * 	.startObject()                // Start a new object nested under the parent object
	 * 		.writeStringField("streetAddress", "21 2nd Street")
	 * 		.writeStringField("city", "Santa Clara")
	 * 		.writeStringField("state", "CA")
	 * 		.writeStringField("postalCode", "11111")
	 * 	.endObject()
	 * 	.writeFieldName("phoneNumber")
	 * 	.startArray()                    // Start an array 
	 * 		.startObject()               // Add the first object to the array 
	 * 			.writeFieldName("type")
	 * 			.writeString("home")
	 * 			.writeFieldName("number")
	 * 			.writeString("212 555-1234")
	 * 		.endObject()
	 * 		.startObject()               // Add another object to the array 
	 * 			.writeFieldName("type")
	 * 			.writeString("fax")
	 * 			.writeFieldName("number")
	 * 			.writeString("646 555-4567")
	 * 		.endObject()
	 * 	.endArray()
	 * 	.endObject()
	 * 
	 *   gs.log(builder.getAttachmentId()); // Returns the sys_id of the attachment.
	 * } 
	 * 
	 * catch (err) {
	 *   gs.log(err);
	 * } 
	 * 
	 * finally {
	 *   builder.close();
	 * }
	 * 
	 * @returns JSONStreamingAPI Streaming JSON object used to construct the payload.
	 * 
	 */
	startArray() : JSONStreamingAPI
	/**
	 * @description Creates an array within the parent JSON object.
	 * Surround this method with the startArray() and endArray() methods to open and close the array.
	 * 
	 * @example
	 * //
	 * try {
	 *   var builder = new sn_ih.JSONStreamingBuilder().build();
	 * 
	 *   builder.startObject()
	 *     .writeFieldName("firstName")
	 *     .writeString("John")
	 *     .writeFieldName("lastName")
	 *     .writeString("Smith")
	 *     .writeNumberField("age","25")
	 *     .writeFieldName("address")
	 *     .startObject()
	 *     .writeStringField("streetAddress", "21 2nd Street")
	 *     .writeStringField("city", "Santa Clara")
	 *     .writeStringField("state", "CA")
	 *     .writeStringField("postalCode", "11111")
	 *     .endObject()
	 *     .startArrayField("phoneNumber")
	 *     .startArray()
	 *     .startObject()
	 *     .writeFieldName("type")
	 *     .writeString("home")
	 *     .writeFieldName("number")
	 *     .writeString("212 555-1234")
	 *     .endObject()
	 *     .startObject()
	 *     .writeFieldName("type")
	 *     .writeString("fax")
	 *     .writeFieldName("number")
	 *     .writeString("646 555-4567")
	 *     .endObject()
	 *     .endArray()
	 *     .endObject()
	 * 
	 *   gs.log(builder.getJSONString());
	 * } 
	 * 
	 * catch (err) {
	 *   gs.log("Exception: " + err);
	 * } 
	 * 
	 * finally {
	 *   builder.close();
	 * }
	 * 
	 * 
	 * @param fieldName The name of the array.
	 * 
	 * @returns JSONStreamingAPI Streaming JSON object used to construct the payload.
	 * 
	 */
	startArrayField(fieldName: string) : JSONStreamingAPI
	/**
	 * @description Opens an object within the parent JSON object.
	 * Requires the endObject() method to close the object.
	 * 
	 * @example
	 * //This example shows how to create a JSON object and store it in the Attachment \[sys\_attachment\] table with a defined expiration date.
	 * try {
	 *   var ttl = new GlideDateTime("2011-01-01 12:00:00");
	 *   var builder = new sn_ih.JSONStreamingBuilder()
	 *     .withAttachment() // Creates the JSON object in streaming mode within an attachment.
	 *     .expiresAt(ttl) // Sets an expiration date for the attachment.
	 *     .build(); // Creates the JSONStreamingAPI object. 
	 * 
	 *   builder.startObject()  // Begins generating the JSON object.
	 * 	.writeFieldName("firstName")  // Adds a "firstName" field 
	 * 	.writeString("John")          // Writes the value of the "firstName" field
	 * 	.writeFieldName("lastName")
	 * 	.writeString("Smith")
	 * 	.writeNumberField("age","25") // Write a number field named "age" with value "25"
	 * 	.writeFieldName("address")
	 * 	.startObject()                // Start a new object nested under the parent object
	 * 		.writeStringField("streetAddress", "21 2nd Street")
	 * 		.writeStringField("city", "Santa Clara")
	 * 		.writeStringField("state", "CA")
	 * 		.writeStringField("postalCode", "11111")
	 * 	.endObject()
	 * 	.writeFieldName("phoneNumber")
	 * 	.startArray()                    // Start an array 
	 * 		.startObject()               // Add the first object to the array 
	 * 			.writeFieldName("type")
	 * 			.writeString("home")
	 * 			.writeFieldName("number")
	 * 			.writeString("212 555-1234")
	 * 		.endObject()
	 * 		.startObject()               // Add another object to the array 
	 * 			.writeFieldName("type")
	 * 			.writeString("fax")
	 * 			.writeFieldName("number")
	 * 			.writeString("646 555-4567")
	 * 		.endObject()
	 * 	.endArray()
	 * 	.endObject()
	 * 
	 *   gs.log(builder.getAttachmentId()); // Returns the sys_id of the attachment.
	 * } 
	 * 
	 * catch (err) {
	 *   gs.log(err);
	 * } 
	 * 
	 * finally {
	 *   builder.close();
	 * }
	 * 
	 * @returns JSONStreamingAPI Streaming JSON object used to construct the payload.
	 * 
	 */
	startObject() : JSONStreamingAPI
	/**
	 * @description Adds a Boolean value to the parent JSON object.
	 * @example
	 * //
	 * try {
	 *   var builder = new sn_ih.JSONStreamingBuilder().build();
	 * 
	 *   builder.startObject()
	 *     .writeFieldName("firstName")
	 *     .writeString("John")
	 *     .writeFieldName("lastName")
	 *     .writeString("Smith")
	 *     .writeFieldName("activeUser")
	 *     .writeBoolean(true)
	 *     .writeNumberField("age","25")
	 *     .writeFieldName("address")
	 *     .startObject()
	 *     .writeStringField("streetAddress", "21 2nd Street")
	 *     .writeStringField("city", "Santa Clara")
	 *     .writeStringField("state", "CA")
	 *     .writeStringField("postalCode", "11111")
	 *     .endObject()
	 *     .writeFieldName("phoneNumber")
	 *     .startArray()
	 *     .startObject()
	 *     .writeFieldName("type")
	 *     .writeString("home")
	 *     .writeFieldName("number")
	 *     .writeString("212 555-1234")
	 *     .endObject()
	 *     .startObject()
	 *     .writeFieldName("type")
	 *     .writeString("fax")
	 *     .writeFieldName("number")
	 *     .writeString("646 555-4567")
	 *     .endObject()
	 *     .endArray()
	 *     .endObject()
	 * 
	 *   gs.log(builder.getJSONString());
	 * } 
	 * 
	 * catch (err) {
	 *   gs.log("Exception: " + err);
	 * } 
	 * 
	 * finally {
	 *   builder.close();
	 * }
	 * 
	 * @param state The boolean value to add to the parent JSON object.  Valid values:  *   true *   false
	 * 
	 * @returns JSONStreamingAPI Streaming JSON object used to construct the payload.
	 * 
	 */
	writeBoolean(state: boolean) : JSONStreamingAPI
	/**
	 * @description Adds a Boolean field and value to the parent JSON object.
	 * @example
	 * //
	 * try {
	 *   var builder = new sn_ih.JSONStreamingBuilder().build();
	 * 
	 *   builder.startObject()
	 *     .writeFieldName("firstName")
	 *     .writeString("John")
	 *     .writeFieldName("lastName")
	 *     .writeString("Smith")
	 *     .writeBooleanField("activeUser", true)
	 *     .writeNumberField("age","25")
	 *     .writeFieldName("address")
	 *     .startObject()
	 *     .writeStringField("streetAddress", "21 2nd Street")
	 *     .writeStringField("city", "Santa Clara")
	 *     .writeStringField("state", "CA")
	 *     .writeStringField("postalCode", "11111")
	 *     .endObject()
	 *     .writeFieldName("phoneNumber")  
	 *     .startArray()
	 *     .startObject()
	 *     .writeFieldName("type")
	 *     .writeString("home")
	 *     .writeFieldName("number")
	 *     .writeString("212 555-1234")
	 *     .endObject()
	 *     .startObject()
	 *     .writeFieldName("type")
	 *     .writeString("fax")
	 *     .writeFieldName("number")
	 *     .writeString("646 555-4567")
	 *     .endObject()
	 *     .endArray()
	 *     .endObject()
	 * 
	 *   gs.log(builder.getJSONString());
	 * } 
	 * 
	 * catch (err) {
	 *   gs.log("Exception: " + err);
	 * } 
	 * 
	 * finally {
	 *   builder.close();
	 * }
	 * 
	 * @param fieldName The name of the field to add to the parent JSON object.
	 * @param value The boolean value to add to the parent JSON object.  Valid values:  *   true *   false
	 * 
	 * @returns JSONStreamingAPI Streaming JSON object used to construct the payload.
	 * 
	 */
	writeBooleanField(fieldName: string,value: boolean) : JSONStreamingAPI
	/**
	 * @description Adds a field name to the parent JSON object.
	 * @example
	 * //This example shows how to create a JSON object and store it in the Attachment \[sys\_attachment\] table with a defined expiration date.
	 * try {
	 *   var ttl = new GlideDateTime("2011-01-01 12:00:00");
	 *   var builder = new sn_ih.JSONStreamingBuilder()
	 *     .withAttachment() // Creates the JSON object in streaming mode within an attachment.
	 *     .expiresAt(ttl) // Sets an expiration date for the attachment.
	 *     .build(); // Creates the JSONStreamingAPI object. 
	 * 
	 *   builder.startObject()  // Begins generating the JSON object.
	 * 	.writeFieldName("firstName")  // Adds a "firstName" field 
	 * 	.writeString("John")          // Writes the value of the "firstName" field
	 * 	.writeFieldName("lastName")
	 * 	.writeString("Smith")
	 * 	.writeNumberField("age","25") // Write a number field named "age" with value "25"
	 * 	.writeFieldName("address")
	 * 	.startObject()                // Start a new object nested under the parent object
	 * 		.writeStringField("streetAddress", "21 2nd Street")
	 * 		.writeStringField("city", "Santa Clara")
	 * 		.writeStringField("state", "CA")
	 * 		.writeStringField("postalCode", "11111")
	 * 	.endObject()
	 * 	.writeFieldName("phoneNumber")
	 * 	.startArray()                    // Start an array 
	 * 		.startObject()               // Add the first object to the array 
	 * 			.writeFieldName("type")
	 * 			.writeString("home")
	 * 			.writeFieldName("number")
	 * 			.writeString("212 555-1234")
	 * 		.endObject()
	 * 		.startObject()               // Add another object to the array 
	 * 			.writeFieldName("type")
	 * 			.writeString("fax")
	 * 			.writeFieldName("number")
	 * 			.writeString("646 555-4567")
	 * 		.endObject()
	 * 	.endArray()
	 * 	.endObject()
	 * 
	 *   gs.log(builder.getAttachmentId()); // Returns the sys_id of the attachment.
	 * } 
	 * 
	 * catch (err) {
	 *   gs.log(err);
	 * } 
	 * 
	 * finally {
	 *   builder.close();
	 * }
	 * 
	 * @param name Field name to add to the parent JSON object.
	 * 
	 * @returns JSONStreamingAPI Streaming JSON object used to construct the payload.
	 * 
	 */
	writeFieldName(name: string) : JSONStreamingAPI
	/**
	 * @description Adds a null value to the parent JSON object.
	 * @example
	 * //
	 * try {
	 *   var builder = new sn_ih.JSONStreamingBuilder().build();
	 * 
	 *   builder.startObject()
	 *     .writeFieldName("firstName")
	 *     .writeString("John")
	 *     .writeFieldName("lastName")
	 *     .writeString("Smith")
	 *     .writeFieldName("activeUser")
	 *     .writeNull()
	 *     .writeNumberField("age","25")
	 *     .writeFieldName("address")
	 *     .startObject()
	 *     .writeStringField("streetAddress", "21 2nd Street")
	 *     .writeStringField("city", "Santa Clara")
	 *     .writeStringField("state", "CA")
	 *     .writeStringField("postalCode", "11111")
	 *     .endObject()
	 *     .writeFieldName("phoneNumber")
	 *     .startArray()
	 *     .startObject()
	 *     .writeFieldName("type")
	 *     .writeString("home")
	 *     .writeFieldName("number")
	 *     .writeString("212 555-1234")
	 *     .endObject()
	 *     .startObject()
	 *     .writeFieldName("type")
	 *     .writeString("fax")
	 *     .writeFieldName("number")
	 *     .writeString("646 555-4567")
	 *     .endObject()
	 *     .endArray()
	 *     .endObject()
	 * 
	 *   gs.log(builder.getJSONString());
	 * } 
	 * 
	 * catch (err) {
	 *   gs.log("Exception: " + err);
	 * } 
	 * 
	 * finally {
	 *   builder.close();
	 * }
	 * 
	 * @returns JSONStreamingAPI Streaming JSON object used to construct the payload.
	 * 
	 */
	writeNull() : JSONStreamingAPI
	/**
	 * @description Adds a field with a null value to the parent JSON object.
	 * @example
	 * //
	 * try {
	 *   var builder = new sn_ih.JSONStreamingBuilder().build();
	 * 
	 *   builder.startObject()
	 *     .writeFieldName("firstName")
	 *     .writeString("John")
	 *     .writeFieldName("lastName")
	 *     .writeString("Smith")
	 *     .writeNullField("activeUser")
	 *     .writeNumberField("age","25")
	 *     .writeFieldName("address")
	 *     .startObject()
	 *     .writeStringField("streetAddress", "21 2nd Street")
	 *     .writeStringField("city", "Santa Clara")
	 *     .writeStringField("state", "CA")
	 *     .writeStringField("postalCode", "11111")
	 *     .endObject()
	 *     .writeFieldName("phoneNumber")
	 *     .startArray()
	 *     .startObject()
	 *     .writeFieldName("type")
	 *     .writeString("home")
	 *     .writeFieldName("number")
	 *     .writeString("212 555-1234")
	 *     .endObject()
	 *     .startObject()
	 *     .writeFieldName("type")
	 *     .writeString("fax")
	 *     .writeFieldName("number")
	 *     .writeString("646 555-4567")
	 *     .endObject()
	 *     .endArray()  
	 *     .endObject()
	 * 
	 *   gs.log(builder.getJSONString());
	 * } 
	 * 
	 * catch (err) {
	 *   gs.log("Exception: " + err);
	 * } 
	 * 
	 * finally {
	 *   builder.close();
	 * }
	 * 
	 * @param fieldName The name of the null field.
	 * 
	 * @returns JSONStreamingAPI Streaming JSON object used to construct the payload.
	 * 
	 */
	writeNullField(fieldName: string) : JSONStreamingAPI
	/**
	 * @description Adds a number field and value to the parent JSON object.
	 * @example
	 * //This example shows how to create a JSON object and store it in the Attachment \[sys\_attachment\] table with a defined expiration date.
	 * try {
	 *   var ttl = new GlideDateTime("2011-01-01 12:00:00");
	 *   var builder = new sn_ih.JSONStreamingBuilder()
	 *     .withAttachment() // Creates the JSON object in streaming mode within an attachment.
	 *     .expiresAt(ttl) // Sets an expiration date for the attachment.
	 *     .build(); // Creates the JSONStreamingAPI object. 
	 * 
	 *   builder.startObject()  // Begins generating the JSON object.
	 * 	.writeFieldName("firstName")  // Adds a "firstName" field 
	 * 	.writeString("John")          // Writes the value of the "firstName" field
	 * 	.writeFieldName("lastName")
	 * 	.writeString("Smith")
	 * 	.writeNumberField("age","25") // Write a number field named "age" with value "25"
	 * 	.writeFieldName("address")
	 * 	.startObject()                // Start a new object nested under the parent object
	 * 		.writeStringField("streetAddress", "21 2nd Street")
	 * 		.writeStringField("city", "Santa Clara")
	 * 		.writeStringField("state", "CA")
	 * 		.writeStringField("postalCode", "11111")
	 * 	.endObject()
	 * 	.writeFieldName("phoneNumber")
	 * 	.startArray()                    // Start an array 
	 * 		.startObject()               // Add the first object to the array 
	 * 			.writeFieldName("type")
	 * 			.writeString("home")
	 * 			.writeFieldName("number")
	 * 			.writeString("212 555-1234")
	 * 		.endObject()
	 * 		.startObject()               // Add another object to the array 
	 * 			.writeFieldName("type")
	 * 			.writeString("fax")
	 * 			.writeFieldName("number")
	 * 			.writeString("646 555-4567")
	 * 		.endObject()
	 * 	.endArray()
	 * 	.endObject()
	 * 
	 *   gs.log(builder.getAttachmentId()); // Returns the sys_id of the attachment.
	 * } 
	 * 
	 * catch (err) {
	 *   gs.log(err);
	 * } 
	 * 
	 * finally {
	 *   builder.close();
	 * }
	 * 
	 * @param fieldName The name of the number field.
	 * @param encodedValue The value of the number field.
	 * 
	 * @returns JSONStreamingAPI Streaming JSON object used to construct the payload.
	 * 
	 */
	writeNumberField(fieldName: string,encodedValue: string) : JSONStreamingAPI
	/**
	 * @description Adds a raw value to the parent JSON object.
	 * @example
	 * //
	 * try {
	 *   var builder = new sn_ih.JSONStreamingBuilder().build();
	 * 
	 *   builder.startObject()
	 *     .writeFieldName("firstName")
	 *     .writeString("John")
	 *     .writeFieldName("lastName")
	 *     .writeString("Smith")
	 *     .writeFieldName("filePath")
	 *     .writeRaw("C:\Users\profile\aboutme.html")
	 *     .writeNumberField("age","25")
	 *     .writeFieldName("address")
	 *     .startObject()
	 *     .writeStringField("streetAddress", "21 2nd Street")
	 *     .writeStringField("city", "Santa Clara")
	 *     .writeStringField("state", "CA")
	 *     .writeStringField("postalCode", "11111")
	 *     .endObject()
	 *     .writeFieldName("phoneNumber")
	 *     .startArray()
	 *     .startObject()
	 *     .writeFieldName("type")
	 *     .writeString("home")
	 *     .writeFieldName("number")
	 *     .writeString("212 555-1234")
	 *     .endObject()
	 *     .startObject()
	 *     .writeFieldName("type")
	 *     .writeString("fax")
	 *     .writeFieldName("number")
	 *     .writeString("646 555-4567")
	 *     .endObject()
	 *     .endArray()
	 *     .endObject()
	 * 
	 *   gs.log(builder.getJSONString());
	 * } 
	 * 
	 * catch (err) {
	 *   gs.log("Exception: " + err);
	 * } 
	 * 
	 * finally {
	 *   builder.close();
	 * }
	 * 
	 * @param text Raw text to add to the parent JSON object.
	 * 
	 * @returns JSONStreamingAPI Streaming JSON object used to construct the payload.
	 * 
	 */
	writeRaw(text: string) : JSONStreamingAPI
	/**
	 * @description Adds a string value to the parent JSON object.
	 * @example
	 * //This example shows how to create a JSON object and store it in the Attachment \[sys\_attachment\] table with a defined expiration date.
	 * try {
	 *   var ttl = new GlideDateTime("2011-01-01 12:00:00");
	 *   var builder = new sn_ih.JSONStreamingBuilder()
	 *     .withAttachment() // Creates the JSON object in streaming mode within an attachment.
	 *     .expiresAt(ttl) // Sets an expiration date for the attachment.
	 *     .build(); // Creates the JSONStreamingAPI object. 
	 * 
	 *   builder.startObject()  // Begins generating the JSON object.
	 * 	.writeFieldName("firstName")  // Adds a "firstName" field 
	 * 	.writeString("John")          // Writes the value of the "firstName" field
	 * 	.writeFieldName("lastName")
	 * 	.writeString("Smith")
	 * 	.writeNumberField("age","25") // Write a number field named "age" with value "25"
	 * 	.writeFieldName("address")
	 * 	.startObject()                // Start a new object nested under the parent object
	 * 		.writeStringField("streetAddress", "21 2nd Street")
	 * 		.writeStringField("city", "Santa Clara")
	 * 		.writeStringField("state", "CA")
	 * 		.writeStringField("postalCode", "11111")
	 * 	.endObject()
	 * 	.writeFieldName("phoneNumber")
	 * 	.startArray()                    // Start an array 
	 * 		.startObject()               // Add the first object to the array 
	 * 			.writeFieldName("type")
	 * 			.writeString("home")
	 * 			.writeFieldName("number")
	 * 			.writeString("212 555-1234")
	 * 		.endObject()
	 * 		.startObject()               // Add another object to the array 
	 * 			.writeFieldName("type")
	 * 			.writeString("fax")
	 * 			.writeFieldName("number")
	 * 			.writeString("646 555-4567")
	 * 		.endObject()
	 * 	.endArray()
	 * 	.endObject()
	 * 
	 *   gs.log(builder.getAttachmentId()); // Returns the sys_id of the attachment.
	 * } 
	 * 
	 * catch (err) {
	 *   gs.log(err);
	 * } 
	 * 
	 * finally {
	 *   builder.close();
	 * }
	 * 
	 * @param text The string value to add to the parent JSON object.
	 * 
	 * @returns JSONStreamingAPI Streaming JSON object used to construct the payload.
	 * 
	 */
	writeString(text: string) : JSONStreamingAPI
	/**
	 * @description Adds a string field and value to the parent JSON object.
	 * @example
	 * //This example shows how to create a JSON object and store it in the Attachment \[sys\_attachment\] table with a defined expiration date.
	 * try {
	 *   var ttl = new GlideDateTime("2011-01-01 12:00:00");
	 *   var builder = new sn_ih.JSONStreamingBuilder()
	 *     .withAttachment() // Creates the JSON object in streaming mode within an attachment.
	 *     .expiresAt(ttl) // Sets an expiration date for the attachment.
	 *     .build(); // Creates the JSONStreamingAPI object. 
	 * 
	 *   builder.startObject()  // Begins generating the JSON object.
	 * 	.writeFieldName("firstName")  // Adds a "firstName" field 
	 * 	.writeString("John")          // Writes the value of the "firstName" field
	 * 	.writeFieldName("lastName")
	 * 	.writeString("Smith")
	 * 	.writeNumberField("age","25") // Write a number field named "age" with value "25"
	 * 	.writeFieldName("address")
	 * 	.startObject()                // Start a new object nested under the parent object
	 * 		.writeStringField("streetAddress", "21 2nd Street")
	 * 		.writeStringField("city", "Santa Clara")
	 * 		.writeStringField("state", "CA")
	 * 		.writeStringField("postalCode", "11111")
	 * 	.endObject()
	 * 	.writeFieldName("phoneNumber")
	 * 	.startArray()                    // Start an array 
	 * 		.startObject()               // Add the first object to the array 
	 * 			.writeFieldName("type")
	 * 			.writeString("home")
	 * 			.writeFieldName("number")
	 * 			.writeString("212 555-1234")
	 * 		.endObject()
	 * 		.startObject()               // Add another object to the array 
	 * 			.writeFieldName("type")
	 * 			.writeString("fax")
	 * 			.writeFieldName("number")
	 * 			.writeString("646 555-4567")
	 * 		.endObject()
	 * 	.endArray()
	 * 	.endObject()
	 * 
	 *   gs.log(builder.getAttachmentId()); // Returns the sys_id of the attachment.
	 * } 
	 * 
	 * catch (err) {
	 *   gs.log(err);
	 * } 
	 * 
	 * finally {
	 *   builder.close();
	 * }
	 * 
	 * @param fieldName The name of the field to add to the parent JSON object.
	 * @param value The value of the field.
	 * 
	 * @returns JSONStreamingAPI Streaming JSON object used to construct the payload.
	 * 
	 */
	writeStringField(fieldName: string,value: string) : JSONStreamingAPI
	}
/**
	 * @description Create a builder object used to build a large streaming JSON payload to use in a REST or SOAP request to send bulk data to a third-party API. You can also create the payload as a JSON string for a non-streaming option.
	 * Use these methods in the Flow Designer script step with the sn\_ih namespace identifier. For example, you can use this API to create a JSON payload in the Flow Designer Script step and pass the returned value to the REST step to send the request to a third-party service. For more information, see the Flow Designer [Script step](https://docs.servicenow.com/bundle/paris-servicenow-platform/page/administer/flow-designer/reference/javascript-step-action-designer.html).	
 * 	
 * You can only use this API within the Flow Designer environment.	
 * 	
 *   	
 *   	
 * 	
 * API call order	
 * --------------	
 * 	
 * Generate JSON payloads using these APIs in the following order:	
 * 	
 * JSONStreamingBuilder: Creates a builder object	
 * 	
 * Use these methods in the following order to create a builder object:	
 * 	
 * 1.  JSONStreamingBuilder(): Instantiates the JSONStreamingBuilder object.	
 * 2.  withAttachment(): Optional. Creates the JSON object as a streaming attachment and stores it in the Streaming Attachments \[streaming\_attachment\] table. If you do not call this method, the API creates the payload as a JSON string.	
 * 3.  expiresAt(): Optional. Sets a time when the attachment expires. Must also call the withAttachment() method.	
 * 4.  build(): Returns a JSONStreamingAPI object.	
 * 	
 * JSONStreamingAPI: Builds the JSON payload	
 * 	
 * Use these methods in the following order to create the JSON payload:	
 * 	
 * 1.  startObject(): Creates the parent JSON object.	
 * 2.  Methods to generate the JSON key-value pairs, such as writeFieldName(), writeString(), and writeNumberField().	
 * 3.  endObject(): Closes the parent JSON object.	
 * 4.  getJSONString() or getAttachmentId(): Returns the JSON string or attachment ID that you created.	
 * 5.  close(): Closes the JSONStreamingAPI object.	
 * 	
 *   	
 *   	
 * 	
 * Size limits	
 * -----------	
 * 	
 * Payloads generated through this API cannot exceed these size limits:	
 * 	
 * *   Attachments: 200 MB	
 * *   Strings: 5 MB	
 * 	
 *   	
 *   	
 * 	
 * Examples	
 * --------	
 * 	
 * This example shows how to create a JSON object and store it in the Attachment \[sys\_attachment\] table with a defined expiration date.	
 * 	
 *     try {	
 *       var ttl = new GlideDateTime("2011-01-01 12:00:00");	
 *       var builder = new sn_ih.JSONStreamingBuilder()	
 *         .withAttachment() // Creates the JSON object in streaming mode within an attachment.	
 *         .expiresAt(ttl) // Sets an expiration date for the attachment.	
 *         .build(); // Creates the JSONStreamingAPI object. 	
 *     	
 *       builder.startObject()  // Begins generating the JSON object.	
 *     	.writeFieldName("firstName")  // Adds a "firstName" field 	
 *     	.writeString("John")          // Writes the value of the "firstName" field	
 *     	.writeFieldName("lastName")	
 *     	.writeString("Smith")	
 *     	.writeNumberField("age","25") // Write a number field named "age" with value "25"	
 *     	.writeFieldName("address")	
 *     	.startObject()                // Start a new object nested under the parent object	
 *     		.writeStringField("streetAddress", "21 2nd Street")	
 *     		.writeStringField("city", "Santa Clara")	
 *     		.writeStringField("state", "CA")	
 *     		.writeStringField("postalCode", "11111")	
 *     	.endObject()	
 *     	.writeFieldName("phoneNumber")	
 *     	.startArray()                    // Start an array 	
 *     		.startObject()               // Add the first object to the array 	
 *     			.writeFieldName("type")	
 *     			.writeString("home")	
 *     			.writeFieldName("number")	
 *     			.writeString("212 555-1234")	
 *     		.endObject()	
 *     		.startObject()               // Add another object to the array 	
 *     			.writeFieldName("type")	
 *     			.writeString("fax")	
 *     			.writeFieldName("number")	
 *     			.writeString("646 555-4567")	
 *     		.endObject()	
 *     	.endArray()	
 *     	.endObject()	
 *     	
 *       gs.log(builder.getAttachmentId()); // Returns the sys_id of the attachment.	
 *     } 	
 *     	
 *     catch (err) {	
 *       gs.log(err);	
 *     } 	
 *     	
 *     finally {	
 *       builder.close();	
 *     }	
 * 	
 * Alternatively, this example shows how to use the API in the Script step and create the payload as a JSON string. You can use this option to create payloads under 5 MB.	
 * 	
 *     (function execute(inputs, outputs) {	
 *     	
 *       var builder = new sn_ih.JSONStreamingBuilder().build();	
 *       	
 *       builder.startObject()	
 *         .enablePrettyPrint()	
 *         .writeTextElement("firstName","John")	
 *         .writeString("John")	
 *         .writeFieldName("lastName")	
 *         .writeString("Smith")	
 *         .writeNumberField("age","25")	
 *         .writeFieldName("address")	
 *         .startObject()	
 *           .writeStringField("streetAddress", "21 2nd Street")	
 *           .writeStringField("city", "Santa Clara")	
 *           .writeStringField("state", "CA")	
 *           .writeStringField("postalCode", "11111")	
 *         .endObject()	
 *         .writeFieldName("phoneNumber")	
 *         .startArray()	
 *           .startObject()	
 *             .writeFieldName("type")	
 *             .writeString("home")	
 *             .writeFieldName("number")	
 *             .writeString("212 555-1234")	
 *           .endObject()	
 *           .startObject()	
 *             .writeFieldName("type")	
 *             .writeString("fax")	
 *             .writeFieldName("number")	
 *             .writeString("646 555-4567")	
 *           .endObject()	
 *         .endArray()	
 *         .endObject()	
 *     	
 *       outputs.payload = builder.getJSONString();	
 *       	
 *     })(inputs, outputs);	
 * 	
 * Output:	
 * 	
 *     {	
 *     "firstName" : "John",	
 *     "lastName" : "Smith",	
 *     "age" : 25,	
 *     "address" : {	
 *       "streetAddress" : "21 2nd Street",	
 *       "city" : "Santa Clara",	
 *       "state" : "CA",	
 *       "postalCode" : "11111"	
 *     },	
 *     "phoneNumber" : [ {	
 *       "type" : "home",	
 *       "number" : "212 555-1234"	
 *     }, {	
 *       "type" : "fax",	
 *       "number" : "646 555-4567"	
 *     } ]	
 *     }
	 * 
	 */
	declare class JSONStreamingBuilder {
	/**
	 * @description Returns a JSONStreamingAPI object.
	 * @example
	 * //This example shows how to create a JSON object and store it in the Attachment \[sys\_attachment\] table with a defined expiration date.
	 * try {
	 *   var ttl = new GlideDateTime("2011-01-01 12:00:00");
	 *   var builder = new sn_ih.JSONStreamingBuilder()
	 *     .withAttachment() // Creates the JSON object in streaming mode within an attachment.
	 *     .expiresAt(ttl) // Sets an expiration date for the attachment.
	 *     .build(); // Creates the JSONStreamingAPI object. 
	 * 
	 *   builder.startObject()  // Begins generating the JSON object.
	 * 	.writeFieldName("firstName")  // Adds a "firstName" field 
	 * 	.writeString("John")          // Writes the value of the "firstName" field
	 * 	.writeFieldName("lastName")
	 * 	.writeString("Smith")
	 * 	.writeNumberField("age","25") // Write a number field named "age" with value "25"
	 * 	.writeFieldName("address")
	 * 	.startObject()                // Start a new object nested under the parent object
	 * 		.writeStringField("streetAddress", "21 2nd Street")
	 * 		.writeStringField("city", "Santa Clara")
	 * 		.writeStringField("state", "CA")
	 * 		.writeStringField("postalCode", "11111")
	 * 	.endObject()
	 * 	.writeFieldName("phoneNumber")
	 * 	.startArray()                    // Start an array 
	 * 		.startObject()               // Add the first object to the array 
	 * 			.writeFieldName("type")
	 * 			.writeString("home")
	 * 			.writeFieldName("number")
	 * 			.writeString("212 555-1234")
	 * 		.endObject()
	 * 		.startObject()               // Add another object to the array 
	 * 			.writeFieldName("type")
	 * 			.writeString("fax")
	 * 			.writeFieldName("number")
	 * 			.writeString("646 555-4567")
	 * 		.endObject()
	 * 	.endArray()
	 * 	.endObject()
	 * 
	 *   gs.log(builder.getAttachmentId()); // Returns the sys_id of the attachment.
	 * } 
	 * 
	 * catch (err) {
	 *   gs.log(err);
	 * } 
	 * 
	 * finally {
	 *   builder.close();
	 * }
	 * 
	 * @returns JSONStreamingAPI Streaming JSON object used to construct the payload.
	 * 
	 */
	build() : JSONStreamingAPI
	/**
	 * @description Sets a time when the attachment expires. Must also call the withAttachment() method. If you do not call this method, the attachment expires two hours from the time the attachment is created.
	 * @example
	 * //This example shows how to create a JSON object and store it in the Attachment \[sys\_attachment\] table with a defined expiration date.
	 * try {
	 *   var ttl = new GlideDateTime("2011-01-01 12:00:00");
	 *   var builder = new sn_ih.JSONStreamingBuilder()
	 *     .withAttachment() // Creates the JSON object in streaming mode within an attachment.
	 *     .expiresAt(ttl) // Sets an expiration date for the attachment.
	 *     .build(); // Creates the JSONStreamingAPI object. 
	 * 
	 *   builder.startObject()  // Begins generating the JSON object.
	 * 	.writeFieldName("firstName")  // Adds a "firstName" field 
	 * 	.writeString("John")          // Writes the value of the "firstName" field
	 * 	.writeFieldName("lastName")
	 * 	.writeString("Smith")
	 * 	.writeNumberField("age","25") // Write a number field named "age" with value "25"
	 * 	.writeFieldName("address")
	 * 	.startObject()                // Start a new object nested under the parent object
	 * 		.writeStringField("streetAddress", "21 2nd Street")
	 * 		.writeStringField("city", "Santa Clara")
	 * 		.writeStringField("state", "CA")
	 * 		.writeStringField("postalCode", "11111")
	 * 	.endObject()
	 * 	.writeFieldName("phoneNumber")
	 * 	.startArray()                    // Start an array 
	 * 		.startObject()               // Add the first object to the array 
	 * 			.writeFieldName("type")
	 * 			.writeString("home")
	 * 			.writeFieldName("number")
	 * 			.writeString("212 555-1234")
	 * 		.endObject()
	 * 		.startObject()               // Add another object to the array 
	 * 			.writeFieldName("type")
	 * 			.writeString("fax")
	 * 			.writeFieldName("number")
	 * 			.writeString("646 555-4567")
	 * 		.endObject()
	 * 	.endArray()
	 * 	.endObject()
	 * 
	 *   gs.log(builder.getAttachmentId()); // Returns the sys_id of the attachment.
	 * } 
	 * 
	 * catch (err) {
	 *   gs.log(err);
	 * } 
	 * 
	 * finally {
	 *   builder.close();
	 * }
	 * 
	 * @param expiresAt Object that is set when the attachment expires.  *   Minimum value: 7200 seconds, or two hours, from the time the attachment is created. Default. *   Maximum value: 172800 seconds, or 48 hours, from the time the attachment is created.
	 * 
	 * @returns JSONStreamingBuilder Builder object used to initiate the JSON payload.
	 * 
	 */
	expiresAt(expiresAt: GlideDateTime) : JSONStreamingBuilder
	/**
	 * @description Instantiates the JSONStreamingBuilder object.
	 * @example
	 * //
	 * var builder = new sn_ih.JSONStreamingBuilder()
	 * 
	 */
	constructor() 
	/**
	 * @description Creates the JSON object as a streaming attachment and stores it in the Streaming Attachments \[streaming\_attachment\] table. If you do not call this method, the API creates the payload as a JSON string.
	 * @example
	 * //This example shows how to build the JSON payload and save it as an attachment.
	 * try {
	 *   var ttl = new GlideDateTime("2011-01-01 12:00:00");
	 *   var builder = new sn_ih.JSONStreamingBuilder()
	 *     .withAttachment() // Creates the JSON object in streaming mode within an attachment.
	 *     .expiresAt(ttl) // Sets an expiration date for the attachment.
	 *     .build(); // Creates the JSONStreamingAPI object. 
	 * 
	 *   builder.startObject()  // Begins generating the JSON object.
	 * 	.writeFieldName("firstName")  // Adds a "firstName" field 
	 * 	.writeString("John")          // Writes the value of the "firstName" field
	 * 	.writeFieldName("lastName")
	 * 	.writeString("Smith")
	 * 	.writeNumberField("age","25") // Write a number field named "age" with value "25"
	 * 	.writeFieldName("address")
	 * 	.startObject()                // Start a new object nested under the parent object
	 * 		.writeStringField("streetAddress", "21 2nd Street")
	 * 		.writeStringField("city", "Santa Clara")
	 * 		.writeStringField("state", "CA")
	 * 		.writeStringField("postalCode", "11111")
	 * 	.endObject()
	 * 	.writeFieldName("phoneNumber")
	 * 	.startArray()                    // Start an array 
	 * 		.startObject()               // Add the first object to the array 
	 * 			.writeFieldName("type")
	 * 			.writeString("home")
	 * 			.writeFieldName("number")
	 * 			.writeString("212 555-1234")
	 * 		.endObject()
	 * 		.startObject()               // Add another object to the array 
	 * 			.writeFieldName("type")
	 * 			.writeString("fax")
	 * 			.writeFieldName("number")
	 * 			.writeString("646 555-4567")
	 * 		.endObject()
	 * 	.endArray()
	 * 	.endObject()
	 * 
	 *   gs.log(builder.getAttachmentId()); // Returns the sys_id of the attachment.
	 * } 
	 * 
	 * catch (err) {
	 *   gs.log(err);
	 * } 
	 * 
	 * finally {
	 *   builder.close();
	 * }
	 * 
	 * @example
	 * //This example shows how to build the JSON payload and save it as a string.
	 * try {
	 *   var builder = new sn_ih.JSONStreamingBuilder().build();
	 * 
	 *   builder.startObject()
	 *     .writeFieldName("firstName")
	 *     .writeString("John")
	 *     .writeFieldName("lastName")
	 *     .writeString("Smith")
	 *     .writeNumberField("age","25")
	 *     .writeFieldName("address")
	 *     .startObject()
	 *     .writeStringField("streetAddress", "21 2nd Street")
	 *     .writeStringField("city", "Santa Clara")
	 *     .writeStringField("state", "CA")
	 *     .writeStringField("postalCode", "11111")
	 *     .endObject()
	 *     .writeFieldName("phoneNumber")
	 *     .startArray()
	 *     .startObject()
	 *     .writeFieldName("type")
	 *     .writeString("home")
	 *     .writeFieldName("number")
	 *     .writeString("212 555-1234")
	 *     .endObject()
	 *     .startObject()
	 *     .writeFieldName("type")
	 *     .writeString("fax")
	 *     .writeFieldName("number")
	 *     .writeString("646 555-4567")
	 *     .endObject()
	 *     .endArray()
	 *     .endObject()
	 * 
	 *   gs.log(builder.getJSONString());
	 * } 
	 * 
	 * catch (err) {
	 *   gs.log("Exception: " + err);
	 * } 
	 * 
	 * finally {
	 *   builder.close();
	 * }
	 * 
	 * @returns JSONStreamingBuilder Builder object used to initiate the JSON payload.
	 * 
	 */
	withAttachment() : JSONStreamingBuilder
	}
/**
	 * @description Build a large streaming XML payload for use in a REST or SOAP request to send bulk data to a third-party API. You can also create the payload as an XML string for a non-streaming option.
	 * Use these methods in a Flow Designer Script step with the sn\_ih namespace identifier. For example, you can use this API to create an XML payload in the Flow Designer Script step and pass the returned value to the REST step to send the request to a third-party service. For more information, see the Flow Designer [Script step](https://docs.servicenow.com/bundle/paris-servicenow-platform/page/administer/flow-designer/reference/javascript-step-action-designer.html).	
 * 	
 * Note: You can only use this API within the Flow Designer environment.	
 * 	
 * There is no constructor for this class. Instead, you must call the build() method in the XMLStreamingBuilder class to return an XMLStreamingAPI object. For more information, see [XMLStreamingBuilder](../../XMLStreamingBuilder/concept/XMLStreamingBuilderScopedAPI.html "Create a builder object to build a large XML payload for use in a REST or SOAP request to send bulk data to a third-party API. You can also create the payload as an XML string for a non-streaming option.").	
 * 	
 *   	
 *   	
 * 	
 * API call order	
 * --------------	
 * 	
 * Generate XML payloads by first instantiating a builder object with XMLStreamingBuilder and then calling the methods in the XMLStreamingAPI class:	
 * 	
 * 1\. XMLStreamingBuilder: Creates a builder object	
 * 	
 * Use these method in the following order to create a builder object:	
 * 	
 * 1.  XMLStreamingBuilder(): Instantiates the XMLStreamingBuilder object.	
 * 2.  withAttachment(): Optional. Creates an XML document as an attachment and stores it in the Streaming Attachments \[streaming\_attachment\] table. If you don't call this method, the API builds the payload as an XML string.	
 * 3.  expiresAt(): Optional. Sets a time when the attachment expires. False is the default. Must also call the withAttachment() method.	
 * 4.  build(): Returns an XMLStreamingAPI object.	
 * 	
 * 2\. XMLStreamingAPI: Builds the XML payload	
 * 	
 * Use these methods in the following order to create the XML payload:	
 * 	
 * 1.  startDocument(): Creates the top-level parent element in the XML document.	
 * 2.  Methods to generate child elements in the XML document, such as writeTextElement(), startElement(), and writeArray().	
 * 3.  Methods to generate attributes for an element, such as writeAttribute(), writeNamespace(), and writeDtd().	
 * 4.  endElement(): Closes an XML element.	
 * 5.  endDocument: Closes the top-level parent element.	
 * 6.  getXMLString() or getAttachmentId(): Returns the XML string or attachment ID that you created.	
 * 7.  close(): Closes the XMLStreamingAPI object.	
 * 	
 *   	
 *   	
 * 	
 * Size limits	
 * -----------	
 * 	
 * Payloads generated through this API cannot exceed these size limits:	
 * 	
 * *   Attachments: 200 MB	
 * *   Strings: 5 MB	
 * 	
 *   	
 *   	
 * 	
 * The following example shows how to create an XML document and store it in the Streaming Attachments \[streaming\_attachment\] table with a defined expiration date.	
 * 	
 *     	
 *     try {	
 *       var ttl = new GlideDateTime("2011-01-01 12:00:00");	
 *       var builder = new sn_ih.XMLStreamingBuilder()	
 *         .withAttachment() // Creates the XML document in streaming mode within an attachment.	
 *         .expiresAt(ttl) // Sets an expiration date for the attachment.	
 *         .build(); // Creates the XMLStreamingAPI object.	
 *     	
 *       builder.startDocument() // Begins generating the XML document.	
 *         .writeTextElement("firstName","John") // Writes a "firstName" element and value.	
 *         .writeTextElement("lastName","Smith")	
 *         .writeTextElement("age","25")	
 *         .startElement("address") // Adds an "address" parent element.	
 *           .writeTextElement("streetAddress", "21 2nd Street") // Writes a child element and value.	
 *           .writeTextElement("city", "Santa Clara")	
 *           .writeTextElement("state", "CA")	
 *           .writeTextElement("postalCode", "11111")	
 *         .endElement() // Adds a closing tag for the "address" element.	
 *         .startElement("phoneNumber")	
 *           .writeTextElement("type","home")	
 *           .writeTextElement("number","212 555-1234")	
 *           .writeTextElement("type","fax")	
 *           .writeTextElement("number","646 555-4567")	
 *         .endElement()	
 *       .endDocument() // Stops generating the XML document.	
 *           	
 *       gs.log(builder.getAttachmentId()); // Returns the sys_id of the attachment.	
 *     } catch (err) {	
 *       gs.log(err);	
 *     } finally {	
 *       builder.close();	
 *     }	
 * 	
 * Alternatively, this example shows how to use the API in the Script step and create the payload as an XML string. You can use this option to create payloads under 5 MB.	
 * 	
 *     (function execute(inputs, outputs) {	
 *     	
 *       var builder = new sn_ih.XMLStreamingBuilder().build();	
 *       	
 *       builder.startDocument()	
 *         .enablePrettyPrint()	
 *         .writeTextElement("firstName","John")	
 *         .writeTextElement("lastName","Smith")	
 *         .writeTextElement("age","25")	
 *         .startElement("address")	
 *           .writeTextElement("streetAddress", "21 2nd Street")	
 *           .writeTextElement("city", "Santa Clara")	
 *           .writeTextElement("state", "CA")	
 *           .writeTextElement("postalCode", "11111")	
 *         .endElement()	
 *         .startElement("phoneNumber")	
 *           .writeTextElement("type","home")	
 *           .writeTextElement("number","212 555-1234")	
 *           .writeTextElement("type","fax")	
 *           .writeTextElement("number","646 555-4567")	
 *         .endElement()	
 *       .endDocument()	
 *     	
 *       outputs.payload = builder.getXMLString();	
 *       	
 *     })(inputs, outputs);	
 * 	
 * Output:	
 * 	
 *     <?xml version="1.0" encoding="UTF-8"?>	
 *     <firstName>John</firstName>	
 *     <lastName>Smith</lastName>	
 *     <age>25</age>	
 *     <address>	
 *       <streetAddress>21 2nd Street</streetAddress>	
 *       <city>Santa Clara</city>	
 *       <state>CA</state>	
 *       <postalCode>11111</postalCode>	
 *     </address>	
 *     <phoneNumber>	
 *       <type>home</type>	
 *       <number>212 555-1234</number>	
 *       <type>fax</type>	
 *       <number>646 555-4567</number>	
 *     </phoneNumber>
	 * 
	 */
	declare class XMLStreamingAPI {
	/**
	 * @description Closes the XMLStreamingAPI object. You must call this method to close the stream after building your XML document.
	 * The following example shows how to create an XML document and store it in the Streaming Attachments \[streaming\_attachment\] table with a defined expiration date.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	close() : void
	/**
	 * @description Ends pretty print XML formatting.
	 * Before calling this method, you must first call enablePrettyPrint() to add XML formatting to a section.
	 * 
	 * @example
	 * //The following example shows how to add pretty print formatting to the address element.
	 * try {
	 *   var ttl = new GlideDateTime("2011-01-01 12:00:00");
	 *   var builder = new sn_ih.XMLStreamingBuilder()
	 *     .withAttachment()
	 *     .expiresAt(ttl)
	 *     .build();
	 * 
	 *   builder.startDocument()
	 *     .writeTextElement("firstName","John")
	 *     .writeTextElement("lastName","Smith")
	 *     .writeTextElement("age","25")
	 *     .enablePrettyPrint()
	 *     .startElement("address")
	 *       .writeTextElement("streetAddress", "21 2nd Street")
	 *       .writeTextElement("city", "Santa Clara")
	 *       .writeTextElement("state", "CA")
	 *       .writeTextElement("postalCode", "11111")
	 *     .endElement()
	 *     .disablePrettyPrint()
	 *     .startElement("phoneNumber")
	 *       .writeTextElement("type","home")
	 *       .writeTextElement("number","212 555-1234")
	 *       .writeTextElement("type","fax")
	 *       .writeTextElement("number","646 555-4567")
	 *     .endElement()
	 *   .endDocument()
	 *       
	 *   gs.log(builder.getAttachmentId());
	 * } catch (err) {
	 *   gs.log(err);
	 * } finally {
	 *   builder.close();
	 * }
	 * 
	 * @returns XMLStreamingAPI Streaming XML object for constructing the payload.
	 * 
	 */
	disablePrettyPrint() : XMLStreamingAPI
	/**
	 * @description Adds pretty print formatting to an XML element or tree of elements.
	 * Use the disablePrettyPrint() method to end the formatting.
	 * 
	 * @example
	 * //The following example shows how to add pretty print formatting to the address element.
	 * try {
	 *   var ttl = new GlideDateTime("2011-01-01 12:00:00");
	 *   var builder = new sn_ih.XMLStreamingBuilder()
	 *     .withAttachment()
	 *     .expiresAt(ttl)
	 *     .build();
	 * 
	 *   builder.startDocument()
	 *     .writeTextElement("firstName","John")
	 *     .writeTextElement("lastName","Smith")
	 *     .writeTextElement("age","25")
	 *     .enablePrettyPrint()
	 *     .startElement("address")
	 *       .writeTextElement("streetAddress", "21 2nd Street")
	 *       .writeTextElement("city", "Santa Clara")
	 *       .writeTextElement("state", "CA")
	 *       .writeTextElement("postalCode", "11111")
	 *     .endElement()
	 *     .disablePrettyPrint()
	 *     .startElement("phoneNumber")
	 *       .writeTextElement("type","home")
	 *       .writeTextElement("number","212 555-1234")
	 *       .writeTextElement("type","fax")
	 *       .writeTextElement("number","646 555-4567")
	 *     .endElement()
	 *   .endDocument()
	 *       
	 *   gs.log(builder.getAttachmentId());
	 * } catch (err) {
	 *   gs.log(err);
	 * } finally {
	 *   builder.close();
	 * }
	 * 
	 * @returns XMLStreamingAPI Streaming XML object for constructing the payload.
	 * 
	 */
	enablePrettyPrint() : XMLStreamingAPI
	/**
	 * @description Ends the structure of your XML document.
	 * After calling the startDocument() method and organizing your streaming XML document, call the endDocument() method at the end of your document's structure. You must use these two methods together to successfully build your streaming XML document's structure.
	 * 
	 * @example
	 * //The following example shows how to create an XML document containing elements about a user.
	 * try {
	 *     var ttl = new GlideDateTime('2011-01-01 12:00:00');
	 *     var builder = new sn_ih.XMLStreamingBuilder().withAttachment().expiresAt(ttl);
	 *     var streamingDocument = builder.build();
	 * 
	 *     streamingDocument.startDocument('Employee')
	 *         .writeTextElement('firstName', 'John')
	 *         .writeTextElement('lastName', 'Smith')
	 *         .writeTextElement('age', '25')
	 *         .endDocument();
	 *     gs.log(streamingDocument.getAttachmentId());
	 * } catch (err) {
	 *     gs.log(err);
	 * } finally {
	 *     streamingDocument.close();
	 * }
	 * 
	 * @returns XMLStreamingAPI Streaming XML object for constructing the payload.
	 * 
	 */
	endDocument() : XMLStreamingAPI
	/**
	 * @description Adds a closing tag to an XML element.
	 * Use the following methods in this sequence to create a valid XML element:
	 * 
	 * 1.  Use the startElement() method to add a starting tag.
	 * 2.  Use the endElement() method to add the closing tag.
	 * 
	 * @example
	 * //The following example shows how to build a parent element named address and then write four child elements.
	 * try {
	 *   var ttl = new GlideDateTime("2011-01-01 12:00:00");
	 *   var builder = new sn_ih.XMLStreamingBuilder()
	 *     .withAttachment()
	 *     .expiresAt(ttl)
	 *     .build();
	 * 
	 *   builder.startDocument()
	 *       .startElement("address")
	 *       .writeTextElement("streetAddress", "21 2nd Street")
	 *       .writeTextElement("city", "Santa Clara")
	 *       .writeTextElement("state", "CA")
	 *       .writeTextElement("postalCode", "11111")
	 *     .endElement()
	 *   .endDocument()
	 *       
	 *   gs.log(builder.getAttachmentId());
	 * } catch (err) {
	 *   gs.log(err);
	 * } finally {
	 *   builder.close();
	 * }
	 * 
	 * @returns XMLStreamingAPI Streaming XML object for constructing the payload.
	 * 
	 */
	endElement() : XMLStreamingAPI
	/**
	 * @description Returns the XML document as a string.
	 * To return the XML document as a string, don't call the getAttachementId() method in the XMLStreamingBuilder class. For more information, see [XMLStreamingBuilder - Scoped](dev.do#!/reference/api/paris/server/sn_ih-namespace/XMLStreamingBuilderScopedAPI "Create a builder object to build a large XML payload for use in a REST or SOAP request to send bulk data to a third-party API. You can also create the payload as an XML string for a non-streaming option.").
	 * 
	 * @returns string XML document created using the XMLStreamingAPI methods, as a string.
	 * 
	 */
	getXMLString() : string
	/**
	 * @description Begins building an XML document.
	 * After calling the build() method, call the startDocument() method to start organizing your XML document. You must also call the endDocument method at the end of your document's structure.
	 * 
	 * @example
	 * //The following example shows how to create an XML document containing elements with information about an employee.
	 * try {
	 *     var ttl = new GlideDateTime('2011-01-01 12:00:00');
	 *     var builder = new sn_ih.XMLStreamingBuilder().withAttachment().expiresAt(ttl);
	 *     var streamingDocument = builder.build();
	 * 
	 *     streamingDocument.startDocument('Employee')
	 *         .writeTextElement('firstName', 'John')
	 *         .writeTextElement('lastName', 'Smith')
	 *         .writeTextElement('age', '25')
	 *         .endDocument();
	 *     gs.log(streamingDocument.getAttachmentId());
	 * } catch (err) {
	 *     gs.log(err);
	 * } finally {
	 *     streamingDocument.close();
	 * }
	 * 
	 * @param rootElement Optional. Root element, or top-level parent element, for your XML document.
	 * @param namespaceDefinitionMap Optional. Map of keys and values for the namespaces and their associated values in a subsequent list of elements. For example:  { 'namespaceOne':'namespaceValue', 'namespaceTwo':'namespaceValue' }
	 * 
	 * @returns XMLStreamingAPI Streaming XML object for constructing the payload.
	 * 
	 */
	startDocument(rootElement: string,namespaceDefinitionMap: Object) : XMLStreamingAPI
	/**
	 * @description Adds a starting tag for an XML element.
	 * Use the following methods in this sequence to create a valid XML element:
	 * 
	 * 1.  Use the startElement() method to add a starting tag.
	 * 2.  Use the endElement() method to add the closing tag.
	 * 
	 * @example
	 * //The following example shows how to build a parent element named address and then write four child elements.
	 * try {
	 *   var ttl = new GlideDateTime("2011-01-01 12:00:00");
	 *   var builder = new sn_ih.XMLStreamingBuilder()
	 *     .withAttachment()
	 *     .expiresAt(ttl)
	 *     .build();
	 * 
	 *   builder.startDocument()
	 *       .startElement("address")
	 *       .writeTextElement("streetAddress", "21 2nd Street")
	 *       .writeTextElement("city", "Santa Clara")
	 *       .writeTextElement("state", "CA")
	 *       .writeTextElement("postalCode", "11111")
	 *     .endElement()
	 *   .endDocument()
	 *       
	 *   gs.log(builder.getAttachmentId());
	 * } catch (err) {
	 *   gs.log(err);
	 * } finally {
	 *   builder.close();
	 * }
	 * 
	 * @param name Name of the XML element.
	 * @param namespaceMap Optional. Map of keys and values for the namespaces and their associated values in a subsequent list of elements. For example:  { 'namespaceOne':'namespaceValue', 'namespaceTwo':'namespaceValue' }
	 * @param attributeMap Optional. Map of keys and values for the attributes and their associated values in a subsequent list of elements.
	 * @param prefix Optional. Prefix for the XML element.
	 * 
	 * @returns XMLStreamingAPI Streaming XML object for constructing the payload.
	 * 
	 */
	startElement(name: string,namespaceMap: Object,attributeMap: Object,prefix: string) : XMLStreamingAPI
	/**
	 * @description Adds a list of nested elements with predefined text to your streaming XML document.
	 * After calling the startDocument() method, you can call the writeArray() method to add a block of nested elements to your streaming XML document.
	 * 
	 * @example
	 * //The following example shows how to build a parent element named officeLocations, and then nest an array of five city elements.
	 * try {
	 *   var ttl = new GlideDateTime("2011-01-01 12:00:00");
	 *   var builder = new sn_ih.XMLStreamingBuilder()
	 *     .withAttachment()
	 *     .expiresAt(ttl)
	 *     .build();
	 * 
	 *   builder.startDocument()
	 *       .writeArray('city', ['Santa Clara','San Diego','Chicago','Sydney','London'], 'officeLocations')
	 *   .endDocument()
	 *       
	 *   gs.log(builder.getAttachmentId());
	 * } catch (err) {
	 *   gs.log(err);
	 * } finally {
	 *   builder.close();
	 * }
	 * 
	 * @param elementName Name of the XML element associated with each string listed in the data array.
	 * @param data List of values to assign to each element nested inside wrappingElement.
	 * @param wrappingElement Parent element containing each elementName.
	 * 
	 * @returns XMLStreamingAPI Streaming XML object for constructing the payload.
	 * 
	 */
	writeArray(elementName: string,data: Array,wrappingElement: string) : XMLStreamingAPI
	/**
	 * @description Adds an attribute to an element in your XML document.
	 * After calling the startDocument(), startElement(), or writeTextElement() method, you can call the writeAttribute() method to add an attribute to the associated XML element.
	 * 
	 * @example
	 * //This example adds an attribute named idNumber to the employee element.
	 * try {
	 *     var ttl = new GlideDateTime('2011-01-01 12:00:00');
	 *     var builder = new sn_ih.XMLStreamingBuilder().withAttachment().expiresAt(ttl);
	 *     var streamingDocument = builder.build();
	 * 
	 *     streamingDocument.startDocument('Employee')
	 *     .writeAttribute('idNumber','12345')
	 *         .writeTextElement('firstName', 'John')
	 *         .writeTextElement('lastName', 'Smith')
	 *         .writeTextElement('age', '25')
	 *     .endDocument();
	 *     gs.log(streamingDocument.getAttachmentId());
	 * } catch (err) {
	 *     gs.log(err);
	 * } finally {
	 *     streamingDocument.close();
	 * }
	 * 
	 * @param name Name of the XML element's attribute.
	 * @param value Value for the XML element's attribute.
	 * 
	 * @returns XMLStreamingAPI Streaming XML object for constructing the payload.
	 * 
	 */
	writeAttribute(name: string,value: string) : XMLStreamingAPI
	/**
	 * @description Adds attributes to an element in your XML document.
	 * After calling the startDocument(), startElement(), or writeTextElement() method, you can call the writeAttributes() method to add attributes to the associated XML element.
	 * 
	 * @example
	 * //This example adds attributes named idNumber, officeLocation, and department to the employee element.
	 * try {
	 *     var ttl = new GlideDateTime('2011-01-01 12:00:00');
	 *     var builder = new sn_ih.XMLStreamingBuilder().withAttachment().expiresAt(ttl);
	 *     var streamingDocument = builder.build();
	 * 
	 *     streamingDocument.startDocument('Employee')
	 *     .writeAttributes({'idNumber':'12345', 'officeLocation':'San Diego', 'department':'Sales'})
	 *         .writeTextElement('firstName', 'John')
	 *         .writeTextElement('lastName', 'Smith')
	 *         .writeTextElement('age', '25')
	 *     .endDocument();
	 *     gs.log(streamingDocument.getAttachmentId());
	 * } catch (err) {
	 *     gs.log(err);
	 * } finally {
	 *     streamingDocument.close();
	 * }
	 * 
	 * @param attributeMap Map of keys and values containing attribute names and values to associate with the XML element. For example:  { 'attributeOne':'attributeValue', 'attributeTwo':'attributeValue' }
	 * 
	 * @returns XMLStreamingAPI Streaming XML object for constructing the payload.
	 * 
	 */
	writeAttributes(attributeMap: Object) : XMLStreamingAPI
	/**
	 * @description Adds CDATA to your XML document.
	 * After calling the writeCDataElement() method, you can call the writeCData() method to add CDATA within the element.
	 * 
	 * @example
	 * //This example adds CDATA to the CDATA element timeWorked.
	 * try {
	 *     var ttl = new GlideDateTime('2011-01-01 12:00:00');
	 *     var builder = new sn_ih.XMLStreamingBuilder().withAttachment().expiresAt(ttl);
	 *     var streamingDocument = builder.build();
	 * 
	 *     streamingDocument.startDocument('Employee')
	 *         .writeTextElement('firstName', 'John')
	 *         .writeTextElement('lastName', 'Smith')
	 *         .writeTextElement('age', '25')
	 *         .writeCDataElement('timeWorked')
	 *         .writeCData('&lt; 2 years')
	 *     .endDocument();
	 *     gs.log(streamingDocument.getAttachmentId());
	 * } catch (err) {
	 *     gs.log(err);
	 * } finally {
	 *     streamingDocument.close();
	 * }
	 * 
	 * @param data Value to include after the CDATA keyword in your CDATA element.
	 * 
	 * @returns XMLStreamingAPI Streaming XML object for constructing the payload.
	 * 
	 */
	writeCData(data: string) : XMLStreamingAPI
	/**
	 * @description Adds a CDATA element to your XML document.
	 * After calling the startDocument() method, you can call the writeCDataElement() method to add a CDATA element to your XML document.
	 * 
	 * @example
	 * //This example uses a document type definition named address to define an internal document type definition for the XML document.
	 * try {
	 *   var ttl = new GlideDateTime("2011-01-01 12:00:00");
	 *   var builder = new sn_ih.XMLStreamingBuilder()
	 *     .withAttachment()
	 *     .expiresAt(ttl)
	 *     .build();
	 * 
	 *   builder.startDocument()
	 *   .writeDtd('address')
	 *   .writeCDataElement('home', '#PCDATA', {'streetAddress', 'city', 'state', 'postalCode'})
	 *       .writeTextElement("streetAddress", "21 2nd Street")
	 *       .writeTextElement("city", "Santa Clara")
	 *       .writeTextElement("state", "CA")
	 *       .writeTextElement("postalCode", "11111")
	 *   .endDocument()
	 *       
	 *   gs.log(builder.getAttachmentId());
	 * } catch (err) {
	 *   gs.log(err);
	 * } finally {
	 *   builder.close();
	 * }
	 * 
	 * @param name Name of the CDATA element.
	 * @param data Optional. Type of data to parse the CDATA element as.
	 * @param prefix Optional. Map of child elements and values that the CDATA element includes. For example:  { 'prefixOne':'prefixValue', 'prefixTwo':'prefixValue' }  You must associate an XML element's prefix with a namespace using [writeNamespace()](https://docs.servicenow.com/bundle/paris-application-development/page/app-store/dev_portal/API_reference/XMLStreamingAPI/concept/XMLStreamingAPIScopedAPI.html#XSA-writeNamespace).
	 * 
	 * @returns XMLStreamingAPI Streaming XML object for constructing the payload.
	 * 
	 */
	writeCDataElement(name: string,data: string,prefix: Object) : XMLStreamingAPI
	/**
	 * @description Adds text to your XML document.
	 * Use the writeCharacters() method to insert string data to a section in your XML document.
	 * 
	 * @example
	 * //The following example shows how to add text values to elements in your XML document.
	 * try {
	 *     var ttl = new GlideDateTime('2011-01-01 12:00:00');
	 *     var builder = new sn_ih.XMLStreamingBuilder().withAttachment().expiresAt(ttl);
	 *     var streamingDocument = builder.build();
	 * 
	 *     streamingDocument.startDocument('Employee')
	 *         .startElement('firstName')
	 *         .writeCharacters('John')
	 *         .EndElement()
	 *         .startElement('lastName')
	 *         .writeCharacters('Smith')
	 *         .endElement()
	 *     .endDocument();
	 *     gs.log(streamingDocument.getAttachmentId());
	 * } catch (err) {
	 *     gs.log(err);
	 * } finally {
	 *     streamingDocument.close();
	 * }
	 * 
	 * @param text Text to add to a section of your XML document.
	 * 
	 * @returns XMLStreamingAPI Streaming XML object for constructing the payload.
	 * 
	 */
	writeCharacters(text: string) : XMLStreamingAPI
	/**
	 * @description Adds a comment to your XML document.
	 * After calling the startDocument() method, you can call the writeComment() method to add a comment to your XML document.
	 * 
	 * @example
	 * //The following example shows how to add a comment to an XML document.
	 * try {
	 *     var ttl = new GlideDateTime('2011-01-01 12:00:00');
	 *     var builder = new sn_ih.XMLStreamingBuilder().withAttachment().expiresAt(ttl);
	 *     var streamingDocument = builder.build();
	 * 
	 *     streamingDocument.startDocument('Employee')
	 *         .writeComment('Element for information related to active employees.')
	 *         .writeTextElement('firstName', 'John')
	 *         .writeTextElement('lastName', 'Smith')
	 *         .writeTextElement('age', '25')
	 *     .endDocument();
	 *     gs.log(streamingDocument.getAttachmentId());
	 * } catch (err) {
	 *     gs.log(err);
	 * } finally {
	 *     streamingDocument.close();
	 * }
	 * 
	 * @param comment Comment text to include.
	 * 
	 * @returns XMLStreamingAPI Streaming XML object for constructing the payload.
	 * 
	 */
	writeComment(comment: string) : XMLStreamingAPI
	/**
	 * @description Adds a document type definition to your XML document.
	 * After calling the startDocument() method, you can call the writeDtd() method to add a valid XML document type definition to your XML document.
	 * 
	 * @example
	 * //This example uses a document type definition named address to define an internal document type definition for the XML document.
	 * try {
	 *   var ttl = new GlideDateTime("2011-01-01 12:00:00");
	 *   var builder = new sn_ih.XMLStreamingBuilder()
	 *     .withAttachment()
	 *     .expiresAt(ttl)
	 *     .build();
	 * 
	 *   builder.startDocument()
	 *   .writeDtd('address')
	 *   .writeCDataElement('home', '#PCDATA', {'streetAddress', 'city', 'state', 'postalCode'})
	 *       .writeTextElement("streetAddress", "21 2nd Street")
	 *       .writeTextElement("city", "Santa Clara")
	 *       .writeTextElement("state", "CA")
	 *       .writeTextElement("postalCode", "11111")
	 *   .endDocument()
	 *       
	 *   gs.log(builder.getAttachmentId());
	 * } catch (err) {
	 *   gs.log(err);
	 * } finally {
	 *   builder.close();
	 * }
	 * 
	 * @param dtd Name of a valid XML document type definition.
	 * 
	 * @returns XMLStreamingAPI Streaming XML object for constructing the payload.
	 * 
	 */
	writeDtd(dtd: string) : XMLStreamingAPI
	/**
	 * @description Adds a namespace to an element in your XML document.
	 * After calling the startDocument(), startElement(), or writeTextElement() method, you can call the writeNamespace() method to add a namespace to the associated XML element.
	 * 
	 * @example
	 * //The following example shows how to add a namespace and URI to the company root element, and then assign the prefix to the nested companyName element.
	 * try {
	 *     var ttl = new GlideDateTime('2011-01-01 12:00:00');
	 *     var builder = new sn_ih.XMLStreamingBuilder().withAttachment().expiresAt(ttl);
	 *     var streamingDocument = builder.build();
	 * 
	 *     streamingDocument.startDocument('company')
	 *     .writeNamespace('x','https://www.servicenow.com')
	 *         .writeTextElement('companyName', 'ServiceNow')
	 *         .writeNamespace('x')
	 *     .endDocument();
	 *     gs.log(streamingDocument.getAttachmentId());
	 * } catch (err) {
	 *     gs.log(err);
	 * } finally {
	 *     streamingDocument.close();
	 * }
	 * 
	 * @param prefix Prefix for the XML namespace.
	 * @param namespaceURI Optional. URI for the namespace.
	 * 
	 * @returns XMLStreamingAPI Streaming XML object for constructing the payload.
	 * 
	 */
	writeNamespace(prefix: string,namespaceURI: string) : XMLStreamingAPI
	/**
	 * @description Adds namespaces to the root element in your XML document.
	 * After calling the startDocument() or startElement() method, you can call the writeNamespaces() method to declare namespaces for the associated XML element.
	 * 
	 * @example
	 * //This example adds two namespaces and URIs to the company root element, and then assigns the appropriate prefixes to the nested elements.
	 * try {
	 *     var ttl = new GlideDateTime('2011-01-01 12:00:00');
	 *     var builder = new sn_ih.XMLStreamingBuilder().withAttachment().expiresAt(ttl);
	 *     var streamingDocument = builder.build();
	 * 
	 *     streamingDocument.startDocument('company')
	 *     .writeNamespaces({'x':'https://www.servicenow.com', 'y':'https://www.developer.servicenow.com'})
	 *         .writeTextElement('companyName', 'ServiceNow')
	 *         .writeNamespace('x')
	 *         .writeTextElement('devFramework', 'Now Experience UI Framework')
	 *         .writeNamespace('y')
	 *     .endDocument();
	 *     gs.log(streamingDocument.getAttachmentId());
	 * } catch (err) {
	 *     gs.log(err);
	 * } finally {
	 *     streamingDocument.close();
	 * }
	 * 
	 * @param namespaceMap Map of keys and values containing namespace prefixes and URIs to associate with the root element of the XML document. For example:  { 'namespaceOne':'namespaceValue', 'namespaceTwo':'namespaceValue' }
	 * 
	 * @returns XMLStreamingAPI Streaming XML object for constructing the payload.
	 * 
	 */
	writeNamespaces(namespaceMap: Object) : XMLStreamingAPI
	/**
	 * @description Adds a single XML element to your XML document.
	 * After calling the startDocument() method, you can call the writeTextElement() method to add a single XML element to your XML document's structure.
	 * 
	 * @example
	 * //The following example shows how to create an XML document containing three elements with information about an employee.
	 * try {
	 *     var ttl = new GlideDateTime('2011-01-01 12:00:00');
	 *     var builder = new sn_ih.XMLStreamingBuilder().withAttachment().expiresAt(ttl);
	 *     var streamingDocument = builder.build();
	 * 
	 *     streamingDocument.startDocument('Employee')
	 *         .writeTextElement('firstName', 'John')
	 *         .writeTextElement('lastName', 'Smith')
	 *         .writeTextElement('age', '25')
	 *     .endDocument();
	 *     gs.log(streamingDocument.getAttachmentId());
	 * } catch (err) {
	 *     gs.log(err);
	 * } finally {
	 *     streamingDocument.close();
	 * }
	 * 
	 * @param name Name of the XML element.
	 * @param text Value for the XML element.
	 * @param prefix Optional. Map of prefixes and values associated with the XML element. For example:  { 'prefixOne':'prefixValue', 'prefixTwo':'prefixValue' }  You must associate an XML element's prefix with a namespace using [writeNamespace()](https://docs.servicenow.com/bundle/paris-application-development/page/app-store/dev_portal/API_reference/XMLStreamingAPI/concept/XMLStreamingAPIScopedAPI.html#XSA-writeNamespace).
	 * 
	 * @returns XMLStreamingAPI Streaming XML object for constructing the payload.
	 * 
	 */
	writeTextElement(name: string,text: string,prefix: Object) : XMLStreamingAPI
	}
/**
	 * @description Create a builder object to build a large XML payload for use in a REST or SOAP request to send bulk data to a third-party API. You can also create the payload as an XML string for a non-streaming option.
	 * Use these methods in a Flow Designer Script step with the sn\_ih namespace identifier. For example, you can use this API to create an XML payload in the Flow Designer Script step and pass the returned value to the REST step to send the request to a third-party service. For more information, see the Flow Designer [Script step](https://docs.servicenow.com/bundle/paris-servicenow-platform/page/administer/flow-designer/reference/javascript-step-action-designer.html).	
 * 	
 * Note: You can only use this API within the Flow Designer environment.	
 * 	
 *   	
 *   	
 * 	
 * API call order	
 * --------------	
 * 	
 * Generate XML payloads by first instantiating a builder object with XMLStreamingBuilder and then calling the methods in the XMLStreamingAPI class:	
 * 	
 * 1\. XMLStreamingBuilder: Creates a builder object	
 * 	
 * Use these method in the following order to create a builder object:	
 * 	
 * 1.  XMLStreamingBuilder(): Instantiates the XMLStreamingBuilder object.	
 * 2.  withAttachment(): Optional. Creates an XML document as an attachment and stores it in the Streaming Attachments \[streaming\_attachment\] table. If you don't call this method, the API builds the payload as an XML string.	
 * 3.  expiresAt(): Optional. Sets a time when the attachment expires. False is the default. Must also call the withAttachment() method.	
 * 4.  build(): Returns an XMLStreamingAPI object.	
 * 	
 * 2\. XMLStreamingAPI: Builds the XML payload	
 * 	
 * Use these methods in the following order to create the XML payload:	
 * 	
 * 1.  startDocument(): Creates the top-level parent element in the XML document.	
 * 2.  Methods to generate child elements in the XML document, such as writeTextElement(), startElement(), and writeArray().	
 * 3.  Methods to generate attributes for an element, such as writeAttribute(), writeNamespace(), and writeDtd().	
 * 4.  endElement(): Closes an XML element.	
 * 5.  endDocument: Closes the top-level parent element.	
 * 6.  getXMLString() or getAttachmentId(): Returns the XML string or attachment ID that you created.	
 * 7.  close(): Closes the XMLStreamingAPI object.	
 * 	
 *   	
 *   	
 * 	
 * Size limits	
 * -----------	
 * 	
 * Payloads generated through this API cannot exceed these size limits:	
 * 	
 * *   Attachments: 200 MB	
 * *   Strings: 5 MB	
 * 	
 *   	
 *   	
 * 	
 * The following example shows how to create an XML document and store it in the Streaming Attachments \[streaming\_attachment\] table with a defined expiration date.	
 * 	
 *     	
 *     try {	
 *       var ttl = new GlideDateTime("2011-01-01 12:00:00");	
 *       var builder = new sn_ih.XMLStreamingBuilder()	
 *         .withAttachment() // Creates the XML document in streaming mode within an attachment.	
 *         .expiresAt(ttl) // Sets an expiration date for the attachment.	
 *         .build(); // Creates the XMLStreamingAPI object.	
 *     	
 *       builder.startDocument() // Begins generating the XML document.	
 *         .writeTextElement("firstName","John") // Writes a "firstName" element and value.	
 *         .writeTextElement("lastName","Smith")	
 *         .writeTextElement("age","25")	
 *         .startElement("address") // Adds an "address" parent element.	
 *           .writeTextElement("streetAddress", "21 2nd Street") // Writes a child element and value.	
 *           .writeTextElement("city", "Santa Clara")	
 *           .writeTextElement("state", "CA")	
 *           .writeTextElement("postalCode", "11111")	
 *         .endElement() // Adds a closing tag for the "address" element.	
 *         .startElement("phoneNumber")	
 *           .writeTextElement("type","home")	
 *           .writeTextElement("number","212 555-1234")	
 *           .writeTextElement("type","fax")	
 *           .writeTextElement("number","646 555-4567")	
 *         .endElement()	
 *       .endDocument() // Stops generating the XML document.	
 *           	
 *       gs.log(builder.getAttachmentId()); // Returns the sys_id of the attachment.	
 *     } catch (err) {	
 *       gs.log(err);	
 *     } finally {	
 *       builder.close();	
 *     }	
 * 	
 * Alternatively, this example shows how to use the API in the Script step and create the payload as an XML string. You can use this option to create payloads under 5 MB.	
 * 	
 *     (function execute(inputs, outputs) {	
 *     	
 *       var builder = new sn_ih.XMLStreamingBuilder().build();	
 *       	
 *       builder.startDocument()	
 *         .enablePrettyPrint()	
 *         .writeTextElement("firstName","John")	
 *         .writeTextElement("lastName","Smith")	
 *         .writeTextElement("age","25")	
 *         .startElement("address")	
 *           .writeTextElement("streetAddress", "21 2nd Street")	
 *           .writeTextElement("city", "Santa Clara")	
 *           .writeTextElement("state", "CA")	
 *           .writeTextElement("postalCode", "11111")	
 *         .endElement()	
 *         .startElement("phoneNumber")	
 *           .writeTextElement("type","home")	
 *           .writeTextElement("number","212 555-1234")	
 *           .writeTextElement("type","fax")	
 *           .writeTextElement("number","646 555-4567")	
 *         .endElement()	
 *       .endDocument()	
 *     	
 *       outputs.payload = builder.getXMLString();	
 *       	
 *     })(inputs, outputs);	
 * 	
 * Output:	
 * 	
 *     <?xml version="1.0" encoding="UTF-8"?>	
 *     <firstName>John</firstName>	
 *     <lastName>Smith</lastName>	
 *     <age>25</age>	
 *     <address>	
 *       <streetAddress>21 2nd Street</streetAddress>	
 *       <city>Santa Clara</city>	
 *       <state>CA</state>	
 *       <postalCode>11111</postalCode>	
 *     </address>	
 *     <phoneNumber>	
 *       <type>home</type>	
 *       <number>212 555-1234</number>	
 *       <type>fax</type>	
 *       <number>646 555-4567</number>	
 *     </phoneNumber>
	 * 
	 */
	declare class XMLStreamingBuilder {
	/**
	 * @description Returns an XMLStreamingAPI object.
	 * @example
	 * //The following example shows how to create an XML document and store it in the Streaming Attachments \[streaming\_attachment\] table with a defined expiration date.
	 * 
	 * try {
	 *   var ttl = new GlideDateTime("2011-01-01 12:00:00");
	 *   var builder = new sn_ih.XMLStreamingBuilder()
	 *     .withAttachment() // Creates the XML document in streaming mode within an attachment.
	 *     .expiresAt(ttl) // Sets an expiration date for the attachment.
	 *     .build(); // Creates the XMLStreamingAPI object.
	 * 
	 *   builder.startDocument() // Begins generating the XML document.
	 *     .writeTextElement("firstName","John") // Writes a "firstName" element and value.
	 *     .writeTextElement("lastName","Smith")
	 *     .writeTextElement("age","25")
	 *     .startElement("address") // Adds an "address" parent element.
	 *       .writeTextElement("streetAddress", "21 2nd Street") // Writes a child element and value.
	 *       .writeTextElement("city", "Santa Clara")
	 *       .writeTextElement("state", "CA")
	 *       .writeTextElement("postalCode", "11111")
	 *     .endElement() // Adds a closing tag for the "address" element.
	 *     .startElement("phoneNumber")
	 *       .writeTextElement("type","home")
	 *       .writeTextElement("number","212 555-1234")
	 *       .writeTextElement("type","fax")
	 *       .writeTextElement("number","646 555-4567")
	 *     .endElement()
	 *   .endDocument() // Stops generating the XML document.
	 *       
	 *   gs.log(builder.getAttachmentId()); // Returns the sys_id of the attachment.
	 * } catch (err) {
	 *   gs.log(err);
	 * } finally {
	 *   builder.close();
	 * }
	 * 
	 * @returns XMLStreamingAPI Streaming XML object for constructing the payload.
	 * 
	 */
	build() : XMLStreamingAPI
	/**
	 * @description Sets a time when the attachment expires. Must also call the withAttachment() method.
	 * @example
	 * //The following example shows how to create an XML document and store it in the Streaming Attachments \[streaming\_attachment\] table with a defined expiration date.
	 * 
	 * try {
	 *   var ttl = new GlideDateTime("2011-01-01 12:00:00");
	 *   var builder = new sn_ih.XMLStreamingBuilder()
	 *     .withAttachment() // Creates the XML document in streaming mode within an attachment.
	 *     .expiresAt(ttl) // Sets an expiration date for the attachment.
	 *     .build(); // Creates the XMLStreamingAPI object.
	 * 
	 *   builder.startDocument() // Begins generating the XML document.
	 *     .writeTextElement("firstName","John") // Writes a "firstName" element and value.
	 *     .writeTextElement("lastName","Smith")
	 *     .writeTextElement("age","25")
	 *     .startElement("address") // Adds an "address" parent element.
	 *       .writeTextElement("streetAddress", "21 2nd Street") // Writes a child element and value.
	 *       .writeTextElement("city", "Santa Clara")
	 *       .writeTextElement("state", "CA")
	 *       .writeTextElement("postalCode", "11111")
	 *     .endElement() // Adds a closing tag for the "address" element.
	 *     .startElement("phoneNumber")
	 *       .writeTextElement("type","home")
	 *       .writeTextElement("number","212 555-1234")
	 *       .writeTextElement("type","fax")
	 *       .writeTextElement("number","646 555-4567")
	 *     .endElement()
	 *   .endDocument() // Stops generating the XML document.
	 *       
	 *   gs.log(builder.getAttachmentId()); // Returns the sys_id of the attachment.
	 * } catch (err) {
	 *   gs.log(err);
	 * } finally {
	 *   builder.close();
	 * }
	 * 
	 * @param expiresAt Object that is set when the attachment expires.  *   Minimum value: 7200 seconds, or two hours, from the time the attachment is created. This is the default value if you don't call the expiresAt() method. *   Maximum value: 172800 seconds, or 48 hours, from the time the attachment is created.
	 * 
	 * @returns XMLStreamingBuilder Builder object used to initiate the XML payload.
	 * 
	 */
	expiresAt(expiresAt: GlideDateTime) : XMLStreamingBuilder
	/**
	 * @description Creates an XML document as an attachment and stores it in the Streaming Attachments \[streaming\_attachment\] table. If you don't call this method, the API creates the XML document as a string.
	 * @returns XMLStreamingBuilder Builder object used to initiate the XML payload.
	 * 
	 */
	withAttachment() : XMLStreamingBuilder
	/**
	 * @description Instantiates the XMLStreamingBuilder object.
	 * @example
	 * //This example shows how to instantiate a builder object.
	 * var builder = new sn_ih.XMLStreamingBuilder()
	 * 
	 */
	constructor() 
	}
declare namespace sn_ih {
	}
/**
	 * @description This API provides methods for parsing comma-separated value (CSV) formatted records into an object or an array.
	 * The CSVParser API is in the sn\_impex namespace.
	 * 
	 */
	declare class CSVParser {
	/**
	 * @description Parses passed in CSV formatted content into an array.
	 * @example
	 * //This example shows simple CSV formatted content parsed into a returned array.
	 * var csvLine = '\"Joe\",\"Smith\",\"1470 W Carmen, Chicago IL, 60640\"';
	 * var delimiter = ',';
	 * var quoteCharacter = '"';
	 * 
	 * var x = new sn_impex.CSVParser().parseLineToArray(csvLine, delimiter, quoteCharacter);
	 * 
	 * gs.log(x[0]);
	 * gs.log(x[1]);
	 * gs.log(x[2]);
	 * 
	 * 
	 * @param csvLine CSV content to parse.
	 * @param delimiter Optional. Character used to delineate the fields in the source CSV content.  Default: Comma ','
	 * @param quoteCharacter Optional. Character used as the quote character in the source CSV content.  Default: Double quote '"'
	 * 
	 * @returns Array Array containing the parsed values for each element in the passed-in CSV content.  For example:      {     Joe,     Smith,     470 W Carmen, Chicago IL, 60640     }
	 * 
	 */
	parseLineToArray(csvLine: string,delimiter: string,quoteCharacter: string) : Array
	/**
	 * @description Parses passed in CSV formatted content into an object.
	 * @example
	 * //This example shows CSV formatted content parsed into a returned object.
	 * var csvLine = '\"Joe\",\"Smith\",\"1470 W Carmen, Chicago IL, 60640\"';
	 * var headers = ['first_name', 'last_name', 'address'];
	 * var delimiter = ',';
	 * var quoteCharacter = '"';
	 * 
	 * var x = new sn_impex.CSVParser().parseLineToObject(csvLine, headers, delimiter, quoteCharacter);
	 * 
	 * gs.log(x.first_name);
	 * gs.log(x.last_name);
	 * gs.log(x.address);
	 * 
	 * 
	 * @example
	 * //This example shows an exception response because of an invalid pass of the header parameter.
	 * var csvLine = '\"Joe\",\"Smith\",\"1470 W Carmen, Chicago IL, 60640\"';
	 * var headers = null;
	 * var delimiter = ',';
	 * var quoteCharacter = '"';
	 * try {
	 * var x = new sn_impex.CSVParser().parseLineToObject(csvLine, headers, delimiter, quoteCharacter);
	 * 
	 * gs.log(x.first_name);
	 * gs.log(x.last_name);
	 * gs.log(x.address);
	 * }
	 * catch(ex) {
	 *       gs.info(ex.message);
	 * }
	 * 
	 * 
	 * @param csvLine CSV content to parse.
	 * @param headers Headers associated with the CSV content. These headers must be specified in the same order as the corresponding content in csvLine. For example, var headers = \['first\_name', 'last\_name', 'address'\];
	 * @param delimiter Optional. Character used to delineate the fields in the source CSV content.  Default: Comma ','
	 * @param quoteCharacter Optional. Character used as the quote character in the source CSV content.  Default: Double quote '"'
	 * 
	 * @returns Object Object containing the header and corresponding value for each element in the passed-in CSV content.  For example:      {     first_name: Joe,     last_name: Smith,     address: 1470 W Carmen, Chicago IL, 60640     }
	 * 
	 */
	parseLineToObject(csvLine: string,headers: string[],delimiter: string,quoteCharacter: string) : Object
	}
/**
	 * @description Parse .xlsx formatted Excel files and access file data in script.
	 * The GlideExcelParser methods can be used in global and scoped scripts. Use the sn\_impex namespace identifier to create a GlideExcelParser object.
	 * 
	 */
	declare class GlideExcelParserScopedGlobal {
	/**
	 * @description Close the connection to the input stream and release the document.
	 * @returns void Method does not return a value
	 * 
	 */
	close() : void
	/**
	 * @description Returns a list of column headers from the parsed document.
	 * @returns Array An array of strings of column headers from the parsed document.
	 * 
	 */
	getColumnHeaders() : Array
	/**
	 * @description Returns the error message when the parse() method fails.
	 * @returns string The error message.
	 * 
	 */
	getErrorMessage() : string
	/**
	 * @description Get the current row values and headers.
	 * @returns Object The row headers are property names and the row values are property values.
	 * 
	 */
	getRow() : Object
	/**
	 * @description Gets table column types and max character length from a spreadsheet or CSV attachment.
	 * Note: This method is restricted to scoped applications.
	 * 
	 * @example
	 * //This example shows how to data from a 7-column spreadsheet attachment including row data such as 1, Meghan, 1/1/85, 1:00 AM, 10.00%, 224-432-8582, ½.
	 * var attachmentSysId = "&lt;sys_id&gt;";
	 * var headerRowNumber = 6;
	 * 
	 * var attachmentStream = new GlideSysAttachment().getContentStream(attachmentSysId);
	 * var parser = new sn_impex.GlideExcelParser();
	 * parser.setHeaderRowNumber(headerRowNumber);
	 * if (!parser.parse(attachmentStream)) {
	 *     throw "Attachment could not be parsed as an Excel Spreadsheet " + attachmentSysId;
	 * }
	 * var tableInfo = parser.getTableInfo();
	 * for (var name in tableInfo) {
	 * gs.info('Column Name : ' + name + ', Type : ' + tableInfo[name].getType() + ', Max Length : ' + tableInfo[name].getLength());
	 * }
	 * 
	 * @returns Object Returns attachment data as a map in which the key is column name. Values contain column type and maximum length of a character string in the column. Access return values using the getType() and getLength() methods.
	 * 
	 */
	getTableInfo() : Object
	/**
	 * @description Creates an instance of GlideExcelParser.
	 * The API name space identifier "sn\_impex" must be used when creating a GlideExcelParser object.
	 * 
	 * @example
	 * //
	 * var parser = new sn_impex.GlideExcelParser(); 
	 * var attachment = new GlideSysAttachment();
	 * // use attachment sys id of an excel file
	 * var attachmentStream = attachment.getContentStream(&lt;attachment sys id&gt;);
	 * 
	 * parser.parse(attachmentStream); 
	 * 
	 * //retrieve the column headers
	 * var headers = parser.getColumnHeaders();  
	 * var header1 = headers[0]; 
	 * var header2 = headers[1]; 
	 * 
	 * //print headers
	 * gs.info(header1 + " " + header2); 
	 * 
	 * while(parser.next()) { 
	 *   var row = parser.getRow(); 
	 *   //print row value for both columns   
	 *   gs.info(row[header1] + ' ' + row[header2]) 
	 * }
	 * 
	 */
	constructor() 
	/**
	 * @description Moves to the next row.
	 * @returns boolean Returns true if there is a next row, otherwise, returns false.
	 * 
	 */
	next() : boolean
	/**
	 * @description Parse an XLSX formatted Excel document.
	 * @example
	 * //from a scripted REST API script where the Excel file is sent in the request payload.
	 * var parser = new sn_impex.GlideExcelParser();
	 * parser.parse(request.body.dataStream); 
	 * 
	 * @param inputStream The Excel document to be parsed.
	 * 
	 * @returns boolean Returns true if the parse was successful, otherwise, returns false.
	 * 
	 */
	parse(inputStream: GlideScriptableInputStream) : boolean
	/**
	 * @description Set the number of the header row to be retrieved.
	 * @param headerRowNumber The header row to be retrieved.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setHeaderRowNumber(headerRowNumber: number) : void
	/**
	 * @description Return an empty value instead of null when an Excel cell is not present.
	 * @param empty When true, cells that are not present return an empty value. When false, cells that are not present return null.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setNullToEmpty(empty: boolean) : void
	/**
	 * @description Set the name of the sheet to be retrieved.
	 * If both setSheetNumber() and setSheetName() are set, setSheetName() is used.
	 * 
	 * @param sheetName The name of the sheet to be retrieved.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setSheetName(sheetName: string) : void
	/**
	 * @description Set the number of the Excel sheet to be retrieved.
	 * If both setSheetNumber() and setSheetName() are set, setSheetNumber() is ignored.
	 * 
	 * @param sheetNumber The Excel sheet number to retrieve.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setSheetNumber(sheetNumber: number) : void
	}
/**
	 * @description The GlideImportSetTable API provides methods to create temporary Import Set tables.
	 * These methods create the Import Set table using a dynamic, standard naming convention. Tables must have at least one defined column. Modification and deletion of existing Import Set tables is not supported.  	
 *   	
 * A scheduled job named Scripted Import Set Deleter runs every seven days by default. Scripted Import Set Deleter deletes all Import Sets, Transform Maps, Transform Entries, and drops the Import Set Tables associated with the tables created by this API.  	
 *   	
 * You can use the GlideImportSetTable methods in global and scoped scripts. Use the sn\_impex namespace identifier to create a GlideImportSetTable object.
	 * 
	 */
	declare class GlideImportSetTableScopedGlobal {
	/**
	 * @description Instantiates a GlideImportSetTable object.
	 * @example
	 * //
	 * var importSetTable = new sn_impex.GlideImportSetTable("temp user table");
	 * 
	 * @param tableLabel Label of the Import Set table created upon calling the create() method.
	 * 
	 */
	constructor(tableLabel: string) 
	/**
	 * @description Creates a GlideDateTime column.
	 * @example
	 * //
	 * var importSetTable = new sn_impex.GlideImportSetTable("temp user table");
	 * importSetTable.addDateTimeColumn('start date');
	 * var tableStructure = importSetTable.create();
	 * 
	 * 
	 * @param columnLabel Label of the GlideDateTime column to create in the Import Set table.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	addDateTimeColumn(columnLabel: string) : void
	/**
	 * @description Creates a string column.
	 * @example
	 * //
	 * var importSetTable = new sn_impex.GlideImportSetTable("temp user table");
	 * importSetTable.addStringColumn('first name', 50);
	 * importSetTable.addStringColumn('last name', 50);
	 * var tableStructure = importSetTable.create();
	 * 
	 * 
	 * @param columnLabel Label of the string column to create in the Import Set table.
	 * @param length Optional. Maximum column length.  Default: 40 characters
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	addStringColumn(columnLabel: string,length: number) : void
	/**
	 * @description Creates the Import Set table.
	 * @example
	 * //
	 * // Create Import Set table
	 * var importSetTable = new sn_impex.GlideImportSetTable("temp user table");
	 * importSetTable.addStringColumn('first name', 40);
	 * importSetTable.addStringColumn('last name', 40);
	 * importSetTable.addDateTimeColumn(‘start date’);
	 * var tableStructure = importSetTable.create();
	 * 
	 * 
	 * 
	 * var importSetTableName = tableStructure["tableName"];
	 * var columns = tableStructure["columns"];
	 * 
	 * 
	 * @returns Object JSON object in the following format:  *   tableName: String. Database name of the table. *   tableLabel: String. User-friendly label of the table (rewriteable). *   columns: Object. Map of table column labels to column names provided by the addDateTimeColumn() and addStringColumn() methods.     *   column\_label: String. Label of the string column in the Import Set table.     *   column\_name: String. Name of the string column in the Import Set table.      {"tableName": "<table_name>", "tableLabel": "<table label>", "columns": StringMap(<column_label>: <column_name>)}
	 * 
	 */
	create() : Object
	}
/**
	 * @description Provides methods to create transform maps and transform entries.
	 * You can use the GlideImportSetTransformMap methods in global and scoped scripts. Use the sn\_impex namespace identifier to create a GlideImportSetTransformMap object.
	 * 
	 */
	declare class GlideImportSetTransformMapScopedGlobal {
	/**
	 * @description Add a GlideDateTime transform entry to a transform map.
	 * @example
	 * //
	 * var transformMap = new sn_impex.GlideImportSetTransformMap("temp user map name", importSetTableName, targetTableName,);
	 * transformMap.addDateTimeTransformEntry("u_start date", "first day", true, "yyyy-MM-dd HH:mm:ss");
	 * var transformMapId = transformMap.create();
	 * 
	 * @param targetColumn Target column from target table to transform to.
	 * @param coalesce Optional. Flag that indicates whether to insert the record into the target table  *   true: If true and target table contains a record with the same value in this field, the record is updated, that is, not inserted. *   false: Default. Record is inserted into the target table.
	 * @param sourceColumn Source column from Import Set table to transform from.
	 * @param dateTimeFormat Optional. GlideDateTime format of the transform, for example, yyyy-MM-dd HH:mm:ss. If empty, the default value is the system date time format.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	addDateTimeTransformEntry(targetColumn: string,coalesce: boolean,sourceColumn: string,dateTimeFormat: string) : void
	/**
	 * @description Adds a string transform entry to a transform map.
	 * @example
	 * //
	 * var transformMap = new sn_impex.GlideImportSetTransformMap("temp user map name", importSetTableName, targetTableName); 
	 * transformMap.addTransformEntry("first_name", "first_name", true);
	 * transformMap.addTransformEntry("last_name", "last_name", false);
	 * transformMap.addTransformEntry("age", "age", false); 
	 * var transformMapId = transformMap.create();
	 * 
	 * 
	 * @param targetColumn Source column from Import Set table to transform from.
	 * @param coalesce Target column from target table to transform to.
	 * @param sourceColumn Optional. Flag that indicates whether to insert the record into the target table  *   true: If true and target table contains a record with the same value in this field, the record is updated, that is, not inserted. *   false: Default. Record is inserted into the target table.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	addTransformEntry(targetColumn: string,coalesce: string,sourceColumn: boolean) : void
	/**
	 * @description Creates a new transform map.
	 * Note: To create a transform map you must have defined at least one transform entry using either addDateTimeTransformEntry() or addTransformEntry().
	 * 
	 * @example
	 * //
	 * var transformMap = new sn_impex.GlideImportSetTransformMap("temp user map name", importSetTableName, targetTableName);
	 * transformMap.addTransformEntry("u_first_name", "first_name");
	 * var transformMapId = transformMap.create();
	 * 
	 * 
	 * @returns string The sys\_id of the created transform map.
	 * 
	 */
	create() : string
	/**
	 * @description Instantiates a GlideImportSetTransformMap object.
	 * @example
	 * //
	 * var transformMap = new sn_impex.GlideImportSetTransformMap("temp user map name", importSetTableName, targetTableName);
	 * 
	 * @param transformMapName Name of the map.
	 * @param importSetTableName Name of the Import Set table.
	 * @param targetTableName Name of the target table.
	 * 
	 */
	constructor(transformMapName: string,importSetTableName: string,targetTableName: string) 
	}
declare namespace sn_impex {
	}
/**
	 * @description Use the Interaction API to define the behavior for interaction records.
	 * Note: This method has been deprecated.	
 * 	
 *   	
 *   	
 * This class requires the Interaction Logging, Routing, and Queueing plugin (com.glide.interaction).  	
 *   	
 * To use this class in a scoped API, use the sn\_interaction namespace identifier.
	 * 
	 */
	declare class Interaction {
	/**
	 * @description Create an interaction.
	 * @example
	 * //
	 * var interactionObj = sn_interaction.Interaction.create({
	 * 	channel: '28a59893873103002ae97e2526cb0b5d',
	 * 	channel_metadata:{},
	 * 	opened_for: '46d44a23a9fe19810012d100cca80666',
	 * 	queue: 'f3a50867b30303002186a72256a8dcb7'
	 * });
	 * 
	 * @param options Field values for an interaction record. The channel field with the channel sys\_id and channel metadata are required.  If a queue is not included in the parameter, the system returns Interaction b2c0a3af202a1300964f959e0488de75 has no queue specified... running queue matching rules.
	 * 
	 * @returns Object Interaction
	 * 
	 */
	create(options: Object) : Object
	/**
	 * @description Get an interaction record.
	 * @example
	 * //
	 * var now_GR = new GlideRecord('interaction');
	 * now_GR.get('608a21bd096a9300964ffbd57ba7dd8d');
	 * var interaction = sn_interaction.Interaction.getInteraction(now_GR);
	 * 
	 * @param interaction Interaction record from the interaction table \[interaction\] that is retrieved from the system.
	 * 
	 * @returns Object Interaction
	 * 
	 */
	getInteraction(interaction: GlideRecord) : Object
	/**
	 * @description Transfer an interaction record to an agent using the sys\_id for the agent.
	 * When an interaction is transferred from one agent to another, the interaction needs to be accepted or rejected using GlideRecord APIs. Use the GlideRecord API to change the state of the interaction and update. For more information, see the GlideRecord - update method.
	 * 
	 * Note: This method has been deprecated.
	 * 
	 * @example
	 * //
	 * var now_GR = new GlideRecord('interaction');
	 * now_GR.get('24b927ef202a1300964f959e0488de2d');
	 * var interaction = sn_interaction.Interaction.getInteraction(GR);
	 * interaction.transferToAgent('6816f79cc0a8016401c5a33be04be441');
	 * 
	 * @param SysID The sys\_id of the user you want to transfer an interaction record to.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	transferToAgent(SysID: string) : void
	/**
	 * @description Transfer an interaction record to an interaction queue.
	 * Transferring an interaction from one queue to another closes the original interaction and creates an interaction in the new queue.
	 * 
	 * Note: This method has been deprecated.
	 * 
	 * @example
	 * //
	 * var now_GR = new GlideRecord('interaction');
	 * now_GR.get('24b927ef202a1300964f959e0488de2d');
	 * var interaction = sn_interaction.Interaction.getInteraction(GR);
	 * interaction.transferToQueue('86fee1933b101300088d832b44efc474');
	 * 
	 * @param SysID The sys\_id of the interaction queue you want to transfer the interaction record to.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	transferToQueue(SysID: string) : void
	/**
	 * @description Accept a new interaction.
	 * Accepting a transfer only works for pending transfers. Find any pending transfers in the Interaction Agent Transfer \[interaction\_agent\_transfer\] table.
	 * 
	 * @example
	 * //
	 * var now_GR = new GlideRecord('interaction');
	 * now_GR.get('b2c0a3af202a1300964f959e0488de75');
	 * var interaction = sn_interaction.Interaction.getInteraction(GR).accept();
	 * 
	 * @returns boolean Returns true if the transfer is accepted.
	 * 
	 */
	accept() : boolean
	}
/**
	 * @description Use the InteractionQueue API to configure the behavior for interaction queues and connectors.
	 * Note: This API has been deprecated, use the Queue and Agent APIs instead.	
 * 	
 *   	
 *   	
 * This class requires the Interaction Logging, Routing, and Queueing plugin (com.glide.interaction).  	
 *   	
 * To use this class in a scoped API, use the sn\_interaction namespace identifier.
	 * 
	 */
	declare class InteractionQueue {
	/**
	 * @description Get an existing interaction queue by sys\_id.
	 * @example
	 * //
	 * var queueGR = new GlideRecord("interaction_queue");
	 * queueGR.get('86fee1933b101300088d832b44efc474');
	 * var queue = sn_interaction.InteractionQueue.getQueue(queueGR);
	 * 
	 * @param queue Queue from the interaction\_queue table.
	 * 
	 * @returns Object Interaction Queue
	 * 
	 */
	get(queue: GlideRecord) : Object
	/**
	 * @description Check if a user is an agent for a queue.
	 * @param queue Sys ID for a queue in the interaction\_queue table.
	 * 
	 * @returns boolean Returns either true or false
	 * 
	 */
	isAgentFor(queue: GlideRecord) : boolean
	/**
	 * @description Assign the next interaction in a queue to the current user.
	 * @example
	 * //
	 * var queueGR = new GlideRecord('interaction_queue');
	 * queueGR.get('86fee1933b101300088d832b44efc474');
	 * var queue = sn_interaction.InteractionQueue.getQueue(queueGR).acceptNext();
	 * 
	 * @returns Object Interaction
	 * 
	 */
	acceptNext() : Object
	/**
	 * @description Find out whether the queue is in schedule.
	 * @example
	 * //
	 * var queueRecord = new GlideRecord('interaction_queue');
	 * queueRecord.get('f3a50867b30303002186a72256a8dcb7');
	 * var queueInSchedule = sn_interaction.InteractionQueue.getQueue(queueRecord);
	 * queueInSchedule.isInSchedule();
	 * 
	 * @returns object InteractionQueue
	 * 
	 */
	isInSchedule() : object
	/**
	 * @description Returns a list of agents who are online and assigned to a particular queue.
	 * Note: This API has been deprecated, use the Agent API instead.
	 * 
	 * @example
	 * //
	 * var queueGR = new GlideRecord('interaction_queue');
	 * queueGR.get('86fee1933b101300088d832b44efc474');
	 * var queue = sn_interaction.InteractionQueue.getQueue(queueGR);
	 * queue.getAvailableAgents();
	 * 
	 * @returns Array List of available agents by sys\_id.
	 * 
	 */
	getAvailableAgents() : Array
	}
declare namespace sn_interaction {
	}
/**
	 * @description The SentimentAnalyser API performs sentiment analysis on a string value.
	 * The Sentiment Analysis API should be used in a script that is treated as an admin-executing script. For example, we should use the Sentiment Analysis API in Script Action or Scheduled Job.  	
 *   	
 * To use this class in a scoped application, use the sn\_nlp\_sentiment namespace identifier. The Sentiment Analysis plugin ( com.snc.sentiment\_analysis) must be enabled to access the SentimentAnalyser API.
	 * 
	 */
	declare class SentimentAnalyser {
	/**
	 * @description Creates an instance of the SentimentAnalyser class with the default connector configuration that is used for sentiment analysis.
	 * @example
	 * //
	 * var sa = new sn_nlp_sentiment.SentimentAnalyser();
	 * 
	 */
	constructor() 
	/**
	 * @description Creates an instance of the SentimentAnalyser class with the specified connector configuration that is used for sentiment analysis.
	 * @example
	 * //
	 * var sa = new sn_nlp_sentiment.SentimentAnalyser(configGR);
	 * 
	 * @param configGR GlideRecord object of a connector configuration
	 * 
	 */
	constructor(configGR: GlideRecord) 
	/**
	 * @description Performs sentiment analysis on the specified text.
	 * @example
	 * //
	 * 
	 *         var sa = new sn_nlp_sentiment.SentimentAnalyser();
	 *         var result = sa.analyze ("Example string");
	 * 
	 * @param inputText Text on which sentiment analysis should be performed.
	 * 
	 * @returns any Result of the sentiment analysis specifying the status, score, normalised score, sys\_id of the relevant connector configuration, and error message.
	 * 
	 */
	analyze(inputText: string) : any
	/**
	 * @description Performs sentiment analysis on a specified text and language.
	 * @example
	 * //
	 * 
	 *         var sa = new sn_nlp_sentiment.SentimentAnalyser();
	 *         var result = sa.analyze ("Example string", "en");
	 * 
	 * @param inputText Text on which sentiment analysis should be performed.
	 * @param language Language for the input text. This can very for different sentiment services.
	 * 
	 * @returns any Result of the sentiment analysis specifying the status, score, normalized score, sys\_id of the relevant connector configuration, and error message.
	 * 
	 */
	analyzeWithLanguage(inputText: string,language: string) : any
	/**
	 * @description Performs sentiment analysis on an array of strings.
	 * @example
	 * //
	 * 
	 *         var sa = new sn_nlp_sentiment.SentimentAnalyser();
	 *         var result = sa.analyzeMultiple (["Example string1","Example string2"]);
	 * 
	 * @param inputTextArray Array of text (string) on which sentiment analysis should be performed.
	 * 
	 * @returns strin[] An array that gives the result of the sentiment analysis performed on multiple texts specifying the status, score, normalized score, sys\_id of the relevant connector configuration, and error message.
	 * 
	 */
	analyzeMultiple(inputTextArray: Array) : strin[]
	/**
	 * @description Performs sentiment analysis on an array of strings in the specified language.
	 * @example
	 * //
	 * 
	 *         var sa = new sn_nlp_sentiment.SentimentAnalyser();
	 *         var result = sa.analyzeMultipleWithLanguage (["Example string1","Example string2"], "en");
	 * 
	 * @param inputTextArray Array of text (string) on which sentiment analysis should be performed.
	 * @param language Language for the input text. This can very for different sentiment services.
	 * 
	 * @returns strin[] An array with the result of the sentiment analysis performed on multiple texts of the mentioned language, specifying the status, score, normalized score, sys\_id of the relevant connector configuration, and error message.
	 * 
	 */
	analyzeMultipleWithLanguage(inputTextArray: Array,language: string) : strin[]
	/**
	 * @description Returns the GlideRecord of the specified connector configuration.
	 * @example
	 * //
	 * 
	 *       var sa = new sn_nlp_sentiment.SentimentAnalyser();
	 *       var connector = sa.getConnectorByName("xxx");
	 * 
	 * @param connectorName Name of the connector configuration.
	 * 
	 * @returns GlideRecord GlideRecord of the specified connector configuration.
	 * 
	 */
	getConnectorByName(connectorName: string) : GlideRecord
	/**
	 * @description Returns the GlideRecord of the default connector configuration.
	 * @example
	 * //
	 * 
	 *         var sa = new sn_nlp_sentiment.SentimentAnalyser();
	 *         var defaultConnector = sa.getDefaultConnector();
	 * 
	 * @returns GlideRecord GlideRecord of the default connector configuration.
	 * 
	 */
	getDefaultConnector() : GlideRecord
	}
declare namespace sn_nlp_sentiment {
	}
/**
	 * @description Perform actions in a third-party messaging application.
	 * This class requires the Messaging Notification plugin (com.glide.notification.messaging) and an integration with a third-party messaging application such as Slack or Teams. Use these methods in an action script in the Message Actions \[messaging\_observer\_handler\] table.  	
 *   	
 * Use the sn\_notification namespace to access the Messaging API.
	 * 
	 */
	declare class Messaging {
	/**
	 * @description Sends a custom message to a third-party application in response to a messaging event. For example, you can send a custom welcome message to a Slack channel when the Now Actions application installs.
	 * Use this method in an action script in the Message Actions \[messaging\_observer\_handler\] table.
	 * 
	 * @example
	 * //
	 * //Send a message to a Teams user
	 * var app = new GlideRecord('messaging_application');
	 * app.get('1f2d26527f4213007f005212bdfa9102');
	 * 
	 * var content = new GlideRecord('messaging_content');
	 * content.get('17f1f9617320130082999cfd7bf6a706');
	 * 
	 * sn_notification.Messaging.send(app, '29:1ojsgDg1xuA_jZ70PDI2_6E7mn7P6Mc0wK7z0n2lblL-SaNXYVI1cR7i6qncllAGvdmhy2-kXh76IEVpUHXdz3w', content, null);
	 * 
	 * //Send a message to a Slack user
	 * var app = new GlideRecord('messaging_application');
	 * app.get('5d2e38c07f6113007f005212bdfa9160');
	 * 
	 * var content = new GlideRecord('messaging_content');
	 * content.get('69c48ba77310130082999cfd7bf6a7af');
	 * 
	 * sn_notification.Messaging.send(app, 'U8P706QFQ', content, null);
	 * 
	 * //Send a message to a Slack channel
	 * var app = new GlideRecord('messaging_application');
	 * app.get('5d2e38c07f6113007f005212bdfa9160');
	 * 
	 * var content = new GlideRecord('messaging_content');
	 * content.get('69c48ba77310130082999cfd7bf6a7af');
	 * 
	 * sn_notification.Messaging.send(app, 'CA6232N65', content, null);
	 * 
	 * @param messagingApplication Third-party application to send a message to from the Messaging Entities \[messaging\_application\] table.
	 * @param recipient Recipient of the message. When the instance receives an inbound message, you can send a response to a Slack channel, Team, or individual user ID found in the inbound payload.
	 * @param messagingContent Message content to send from the Messaging Contents \[messaging\_content\] table.
	 * @param target Record used to define dynamic field values in the message. Table must match the Target table field in the Messaging Contents record. If the Messaging Contents record does not use a target table, set the value to null.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	send(messagingApplication: GlideRecord,recipient: string,messagingContent: GlideRecord,target: GlideRecord) : void
	}
declare namespace sn_notification {
	}
/**
	 * @description The NotifyScoped API allows you to interact with Notify calls and SMS messages using scripts.
	 * Access the scoped Notify class and its associated methods from the sn\_notify namespace.
	 * 
	 */
	declare class Notify {
	/**
	 * @description Calls the specified E.164-compliant telephone number.
	 * @example
	 * //This example illustrates how to initiate a call to another phone number.
	 * var from = '+14048007337';
	 * var to = '+31646810495';
	 * 
	 * // set up call
	 * new sn_notify.NotifyScoped().call(from, to);
	 * 
	 * @example
	 * //This example illustrates how to initiate a call to a list of telephone numbers and automatically join those numbers into a new conference call.
	 * var notify = new sn_notify.NotifyScoped();
	 * var from = '+14041234567';
	 * var participants = ['+31612345678', '+31623456789', '+31687654321'];
	 * 
	 * // set up a conference call
	 * var conferenceCall = notify.conferenceCall();
	 * 
	 * // set up the outbound calls for all conference call participants
	 * for (var i in participants) {
	 *     var to = participants[i];
	 *     notify.call(from, to, conferenceCall);
	 * }
	 * 
	 * 
	 * 
	 * @param notifyPhoneNumber Notify phone number from which to make the call. When you initiate a call, the outgoing call workflow for the number group associated with this number runs. Ensure this workflow includes a join conference call activity to connect the user to the conference call.
	 * @param toPhoneNumber Phone number to call. Called numbers are added to the conference call.
	 * @param conferenceCall Optional. If this parameter is passed in, the callers identified in the toPhoneNumber parameter are automatically joined into the conference call identified by this record.  GlideRecord for the Notify Call \[notify\_call\] table which identifies the conference call record. This record is automatically added to the outgoing call workflow scratchpad as the workflow.scratchpad.conference\_call variable.
	 * @param userSysId Optional. Unique identifier (sys\_id) of the user associated with the call.
	 * @param groupSysId Optional. Unique identifier (sys\_id) of the group associated with the call.
	 * @param sourceRecord Optional. Source record that prompted this call.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	call(notifyPhoneNumber: string,toPhoneNumber: string,conferenceCall: GlideRecord,userSysId: string,groupSysId: string,sourceRecord: GlideRecord) : void
	/**
	 * @description Creates a new conference call GlideRecord.
	 * @example
	 * //
	 * var notify = new sn_notify.NotifyScoped();
	 * var from = '+14041234567';
	 * var participants = ['+31612345678', '+31623456789', '+31687654321'];
	 * 
	 * // set up a conference call
	 * var conferenceCall = notify.conferenceCall();
	 * 
	 * // set up the outbound calls for all conference call participants
	 * for (var i in participants) {
	 *     var to = participants[i];
	 *     notify.call(from, to, conferenceCall);
	 * }
	 * 
	 * @param sourceRecord Optional. Record that initiated the request to create the conference call. Used to populate the source and table fields on notify\_conference\_call record.
	 * 
	 * @returns GlideRecord New Notify conference call \[notify\_conference\_call\] record.
	 * 
	 */
	conferenceCall(sourceRecord: GlideRecord) : GlideRecord
	/**
	 * @description Resumes a call after it was put in a queue (on hold).
	 * Use this method to resume calls that were put in a queue with the queueCall() method.
	 * 
	 * @example
	 * //The following example shows how to reactivate a call that was put on hold.
	 * var notifyCallGr = new GlideRecord('notify_call');
	 * notifyCallGr.get('active participant sys id');
	 *  
	 * if (notifyCallGr.isValid) {
	 *     sn_notify.NotifyScoped.dequeueCall(notifyCallGr);
	 * }
	 * 
	 * @param callRecord GlideRecord object on the Notify Call \[notify\_call\] table with the held call you want to resume.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	dequeueCall(callRecord: GlideRecord) : void
	/**
	 * @description Forwards the specified call to a different call recipient.
	 * @example
	 * //The following example shows how to forward a call to another phone number.
	 * var callID = 'CA92374b5aa561dab476a7001db6026edc'; // Twilio Call ID
	 * var phoneNumber = '+91406xxxxxxx';
	 * var dtmfTones = null;
	 *  
	 * var notifyCallGr = new GlideRecord('notify_call');
	 * notifyCallGr.get('active participant sys id');
	 *  
	 * if (notifyCallGr.isValid) {
	 *     sn_notify.NotifyScoped.forwardCall(notifyCallGr(or) callID, phoneNumber, dtmfTones)
	 * }
	 * 
	 * @param call Notify call record or the telephony provider call ID, of the call to be forwarded.
	 * @param destination Notify phone number record or an E.164-compliant phone number, of the caller to which to forward the call.
	 * @param dtmf Dual Tone - Multi Frequency (DTMF) code to send upon call connection.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	forwardCall(call: GlideRecord|String,destination: GlideRecord|String,dtmf: string) : void
	/**
	 * @description Returns a list of client sessions that are available to receive calls.
	 * @example
	 * //The following example shows how to use the getAvailableClients() method to index into the notify\_client\_session table and then iterate across all available Notify clients.
	 * var clientSessionGr = sn_notify.NotifyScoped.getAvailableClients('+185xxxxxxxx'); 
	 * // Here clientSessionGr is of type GlideRecord on 'notify_client_session' table.
	 *  
	 * var isLoggedInUserAvailable = false;
	 * while (clientSessionGr.next()) {
	 *   if (clientSessionGr.user == gs.getUserID())
	 *     isLoggedInUserAvailable = clientSessionGr.available;
	 * }
	 * gs.info('isLoggedInUserAvailable - ' + isLoggedInUserAvailable);
	 * 
	 * @param notifyNumber Valid Notify phone number.
	 * 
	 * @returns Array GlideRecord from the notify\_client\_session table for the specified phone number.  Returns "0" if there are no available client sessions.
	 * 
	 */
	getAvailableClients(notifyNumber: string) : Array
	/**
	 * @description Returns all phone numbers and short codes available to Notify.
	 * @example
	 * //This example illustrates how to obtain the Notify phone numbers and then iterate over the list.
	 * // instantiate notify
	 * var notify = new sn_notify.NotifyScoped();
	 * 
	 * // get all available phone numbers
	 * var phoneNumbers = notify.getPhoneNumbers();
	 * 
	 * // iterate over phone numbers
	 * for (var i = 0; i &lt; phoneNumbers.size(); i++) {
	 * 
	 *   var number = phoneNumbers.get(i);
	 * 
	 * //perform any actions using each phone number
	 * 
	 * }
	 * 
	 * @returns List List of NotifyPhoneNumber objects, each object representing one phone number available to Notify.
	 * 
	 */
	getPhoneNumbers() : List
	/**
	 * @description Returns all short codes available to Notify.
	 * @example
	 * //This example illustrates how to obtain the Notify short codes and then iterate over the list.
	 * // instantiate notify
	 * var notify = new sn_notify.NotifyScoped();
	 * 
	 * // get all available shortcodes
	 * var shortCodes = notify.getShortCodes();
	 * 
	 * // iterate over phone numbers
	 * for (var i = 0; i &lt; shortCodes.size(); i++) {
	 * 
	 * var shortCode = shortCodes.get(i);
	 * 
	 * gs.log(shortCode.getNumber());
	 * 
	 * //perform any actions using each shortcode
	 * }
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	getShortCodes() : void
	/**
	 * @description Returns client tokens for any active telephony drivers for use in WebRTC or mobile clients.
	 * This method uses the currently logged-in user record as the client.
	 * 
	 * @example
	 * //This example shows how to obtain the client tokens for the currently logged in user.
	 * // get Notify client Tokens per active Notify driver for the currently logged in user
	 * var json = new sn_notify.NotifyScoped().getTokens();
	 *  
	 * // Parse the JSON that was return into a tokens object
	 * var tokens = JSON.parse(json);
	 * 
	 * // Log line
	 * gs.log('Notify client tokens for the currently logged in user');
	 * 
	 *  // iterate over the driver tokens
	 * for (var driver in tokens) {
	 *  	gs.log(driver + ' Driver token: ' + tokens[driver]);
	 * }
	 * 
	 * @example
	 * //This example shows how to obtain the client tokens for every Notify group.
	 * // instantiate Notify
	 * var notify = new sn_notify.NotifyScoped.Notify();
	 *  
	 * // get all Notify Groups
	 * var notifyGroup = new GlideRecord("notify_group");
	 * notifyGroup.query();
	 *  
	 * // iterate over all notify groups
	 * while (notifyGroup.next()) {
	 *   // generate Notify Client tokens per active Notify Driver for this group
	 *   var json = notify.getTokens(notifyGroup);
	 *   var tokens = JSON.parse(json);
	 *  
	 *   for (var driver in tokens) {
	 *     gs.log(gs.getMessage("Notify Client token for {0} driver and Notify Group '{1}': {2}", [driver, notifyGroup.getValue('name'), tokens[driver]]));
	 *   }
	 * }
	 * 
	 * @example
	 * //This example illustrates how to obtain the client tokens for the active telephony drivers.
	 * var notify = new sn_notify.NotifyScoped();
	 * var now_GR = new GlideRecord('sys_user');
	 * if (now_GR.get(gs.getUserID())) {
	 *   gs.info(notify.getTokens(now_GR));
	 * }
	 * 
	 * @param record GlideRecord to use to identify the Notify client, such as a group record or a user record.
	 * 
	 * @returns string Web RTC tokens for the supported drivers, as a JSON string with the following format: {driverName1: “token1”, driverName2: “token2”}, such as "TwilioDirect":"eyJhxxxx.eyJleHAiOiIxxxx.7fejxxx\_mbLxxx"
	 * 
	 */
	getTokens(record: GlideRecord) : string
	/**
	 * @description Returns the maximum amount of time that a client session stays active for a specified telephony driver before automatically timing out.
	 * @example
	 * //The following example shows how to properly call this method and the associated response. It also shows what is returned if an invalid driver is passed.
	 * var owner = "TwilioDirect";  // Valid driver
	 * var ttl = SNC.Notify.getTokenTTL(owner);
	 * gs.info("Token TTL for " + owner + " --&gt; " + ttl);
	 *  
	 * owner = "Abcxyz";  // Invalid driver
	 * ttl = SNC.Notify.getTokenTTL(owner);
	 * // For an invalid driver, we throw NoSuchNotifyDriverException saying that Abcxyzdriver is not available
	 * // and return the default value of TTL
	 * gs.info("Token TTL for " + owner + " --&gt; " + ttl); 
	 * 
	 * @param owner Name of the telephony driver for which to retrieve the session length.  Valid values:  *   Twilio: for the old driver *   TwilioDirect: for the new driver
	 * 
	 * @returns Integer Maximum length of the session (in seconds).  Default: 1800 seconds
	 * 
	 */
	getTokenTTL(owner: string) : Integer
	/**
	 * @description Determines whether the specified phone number has the specified capability.
	 * The telephony driver associated with the phone number contains a list of all of the capabilities of the phone.
	 * 
	 * Note: In the base system, the Notify JS driver only has 'show\_speakers' as a capability; this can be modified.
	 * 
	 * @example
	 * //This example shows how to check if a phone has a specific capability.
	 * // Each driver has a defined set of capabilities.
	 * 
	 * var capability = 'show_speakers';
	 * gs.info(sn_notify.NotifyScoped.hasCapability('+185xxxxxxxx', capability)); // true
	 *  
	 * capability = 'send_sms';
	 * gs.info(sn_notify.NotifyScoped.hasCapability('+185xxxxxxxx', capability)); // false
	 * 
	 * @param notifyPhoneNumber Phone number for which to check for the specified capability.
	 * @param capability Capability to detect. The string text must be an exact match to what is in the phone.
	 * 
	 * @returns boolean Flag that indicates whether the specified phone has the specified capability.  *   true: phone has the capability *   false: phone does not have the capability
	 * 
	 */
	hasCapability(notifyPhoneNumber: string,capability: string) : boolean
	/**
	 * @description Removes the specified caller from the current Notify conference call.
	 * @example
	 * //This example shows how to remove a participant from a call.
	 * var participant = new GlideRecord('notify_participant');
	 * participant.get('&lt;sys_id&gt;');
	 * if (participant.isValid()) {
	 *     new sn_notify.NotifyScoped().kick(participant);
	 * }
	 * 
	 * @param participant GlideRecord object containing the Notify Participant \[notify\_participant\] record of the caller to remove from the conference call.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	kick(participant: GlideRecord) : void
	/**
	 * @description Performs one or more activities on an active Notify phone call.
	 * Use this method to change the behavior of a call. For example, transferring a call, playing audio, or forcing a hangup.
	 * 
	 * Note: The scoped implementation of this method only supports custom Notify activities. Unlike the global implementation, it does not provide a NotifyAction API. For details on how to create a custom Notify activity, see [Notify workflow activities](https://docs.servicenow.com/bundle/paris-servicenow-platform/page/administer/workflow-activities/concept/c_NotifyActivities.html).
	 * 
	 * @param callRecord Notify Call \[notify\_call\] record of the call for which to apply the actions.
	 * @param notifyAction NotifyAction object describing one or more activities to perform on the call.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	modifyCall(callRecord: GlideRecord,notifyAction: NotifyAction) : void
	/**
	 * @description Mutes the specified conference call participant.
	 * @example
	 * //The following example shows how to mute a caller.
	 * var notifyParticipantGr = new GlideRecord('notify_participant');
	 * notifyParticipantGr.get('active participant sys id');
	 *  
	 * if (notifyParticipantGrisValid) {
	 *     sn_notify.NotifyScoped.mute(notifyParticipantGr);
	 * }
	 * 
	 * @param participantRecord GlideRecord from the notify\_participant table for the participant to mute.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	mute(participantRecord: GlideRecord) : void
	/**
	 * @description Puts the specified call into a queue (on hold).
	 * Resume a queued call using the dequeueCall() method.
	 * 
	 * @example
	 * //
	 * var call = new GlideRecord('notify_call');
	 * call.get('&lt;call record sys_id&gt;');
	 * if (call.isValid()) {
	 *     new sn_notify.NotifyScoped().queueCall(call);
	 * }
	 * 
	 * @param callRecord GlideRecord object of the Notify Call record (notify\_call table) to put on hold.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	queueCall(callRecord: GlideRecord) : void
	/**
	 * @description Sends a specified SMS message to the specified list of Notify clients (phone numbers).
	 * @example
	 * //This example shows how to send an SMS message to multiple phone numbers (bulk SMS).
	 * var incidentGr = new GlideRecord('incident');
	 * incidentGr.get(active incident sys_id');
	 * if (incidentGr.isValid()) {
	 *     sn_notify.NotifyScoped.sendBulkSMS('+15413970605', ['+919885XXXXXX', '+919775XXXXXX'], 'Test automation message', incidentGr);
	 * }
	 * 
	 * @param notifyPhoneNumber Phone number from which the SMS message is being sent.
	 * @param toPhoneNumbers Comma separated list phone numbers to which to send the SMS message.  Format: E.164-compliant
	 * @param messageBody SMS text to send.
	 * @param source Source record that prompted this SMS message, such as an incident.
	 * 
	 * @returns string Null
	 * 
	 */
	sendBulkSMS(notifyPhoneNumber: NotifyPhoneNumber,toPhoneNumbers: string,messageBody: string,source: GlideRecord) : string
	/**
	 * @description Sends an SMS text message to an E.164-compliant phone number.
	 * This method creates a new record on the Notify Message \[notify\_message\] table and associates it with the source record.
	 * 
	 * @example
	 * //The following example shows how to send an SMS message.
	 * var incidentGr = new GlideRecord('incident');
	 * incidentGr.get(active incident sys_id');
	 * if (incidentnow_GR.isValid()) {
	 *     sn_notify.NotifyScoped.sendSMS('+15413970605', '+919885XXXXXX', 'Test automation message', incidentGr);
	 * }
	 * 
	 * @param notifyPhoneNumber Notify phone number or short code to which to send this SMS message.
	 * @param toPhoneNumber E.164-compliant phone number to which to send the SMS message.
	 * @param messageBody SMS text message.
	 * @param source Source record that prompted this SMS message, such as an incident.
	 * 
	 * @returns string Unique message SID; stored in the Notify Message \[notify\_message\] record as message\_id.
	 * 
	 */
	sendSMS(notifyPhoneNumber: NotifyPhoneNumber,toPhoneNumber: string,messageBody: string,source: GlideRecord) : string
	/**
	 * @description Unmutes the specified conference call participant.
	 * @example
	 * //This example shows how to unmute a specified call participant.
	 * var notifyParticipantGr = new GlideRecord('notify_participant');
	 * notifyParticipantGr.get('active participant sys id');
	 *  
	 * if (notifyParticipantGrisValid) {
	 *     sn_notify.NotifyScoped.unmute(notifyParticipantGr);
	 * }
	 * 
	 * @param participantRecord GlideRecord from the notify\_participant table for the participant to unmute.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	unmute(participantRecord: GlideRecord) : void
	}
/**
	 * @description The NotifyPhoneNumber API allows you to query information about a Notify phone number.
	 * Access the scoped NotifyPhoneNumber API and its associated methods in the sn\_notify namespace.
	 * 
	 */
	declare class NotifyPhoneNumber {
	/**
	 * @description Returns the international dialing code for a Notify phone number.
	 * @example
	 * //This example shows how to obtain the dial code for a phone number.
	 * var numbers = sn_notify.NotifyScoped.getPhoneNumbers();
	 *  
	 * // Here numbers is of type List
	 * if (numbers.size() &gt; 0) {
	 *    var number = numbers.get(0);
	 *  
	 *    // Here number is of type NotifyPhoneNumber
	 *   gs.info(number.getDialCode());
	 * }
	 * 
	 * @returns string International phone code for a country.
	 * 
	 */
	getDialCode() : string
	/**
	 * @description Returns the ID of this phone number as defined by the telephony provider.
	 * @example
	 * //This example shows how to obtain the unique identifier for a phone number.
	 * var numbers = sn_notify.NotifyScoped.getPhoneNumbers();
	 *  
	 * // Here numbers is of type List
	 * if (numbers.size() &gt; 0) {
	 *    var number = numbers.get(0);
	 *  
	 *    // Here number is of type NotifyPhoneNumber
	 *   gs.info(number.getID());
	 * }
	 * 
	 * @returns string Identifier of the number within the telephony provider.
	 * 
	 */
	getID() : string
	/**
	 * @description Returns the numerical phone number for the current Notify caller.
	 * @example
	 * //This example shows how to obtain a Notify caller's phone number.
	 * var numbers = sn_notify.NotifyScoped.getPhoneNumbers();
	 *  
	 * // Here numbers is of type List
	 * if (numbers.size() &gt; 0) {
	 *    var number = numbers.get(0);
	 *  
	 *    // Here number is of type NotifyPhoneNumber
	 *   gs.info(number.getNumber());
	 * }
	 * 
	 * @returns string E.164-compliant phone number.
	 * 
	 */
	getNumber() : string
	/**
	 * @description Returns the telephony provider associated with this phone number.
	 * @example
	 * //This example shows how to obtain the telephony provide that owns the specified phone number.
	 * var numbers = sn_notify.NotifyScoped.getPhoneNumbers();
	 *  
	 * // Here numbers is of type List
	 * if (numbers.size() &gt; 0) {
	 *    var number = numbers.get(0);
	 *  
	 *    // Here number is of type NotifyPhoneNumber
	 *   gs.info(number.getOwner());
	 * }
	 * 
	 * @returns string Telephony provider associated with the number: Twilio.
	 * 
	 */
	getOwner() : string
	/**
	 * @description Returns the country associated with the phone number.
	 * @example
	 * //This example shows how to obtain the country of a Notify caller.
	 * var numbers = sn_notify.NotifyScoped.getPhoneNumbers();
	 *  
	 * // Here numbers is of type List
	 * if (numbers.size() &gt; 0) {
	 *    var number = numbers.get(0);
	 *  
	 *    // Here number is of type NotifyPhoneNumber
	 *   gs.info(number.getTerritory());
	 * }
	 * 
	 * @returns string Name of the country to which the phone number belongs.
	 * 
	 */
	getTerritory() : string
	/**
	 * @description Determines if the Notify phone number supports conference calls.
	 * @example
	 * //This example shows how to determine if a Notify caller supports conference calls.
	 * var numbers = sn_notify.NotifyScoped.getPhoneNumbers();
	 *  
	 * // Here numbers is of type List
	 * if (numbers.size() &gt; 0) {
	 *    var number = numbers.get(0);
	 *  
	 *    // Here number is of type NotifyPhoneNumber
	 *   gs.info(number.supportsConferenceCall());
	 * }
	 * 
	 * @returns boolean Value that indicates whether the Notify phone number supports conference calling.  *   true: phone number does support conference calling *   false: phone number does not support conference calling
	 * 
	 */
	supportsConferenceCall() : boolean
	/**
	 * @description Determines if the Notify phone number supports receiving phone calls.
	 * @example
	 * //This example shows how to determine if a Notify caller can receive incoming phone calls.
	 * var numbers = sn_notify.NotifyScoped.getPhoneNumbers();
	 *  
	 * // Here numbers is of type List
	 * if (numbers.size() &gt; 0) {
	 *    var number = numbers.get(0);
	 *  
	 *    // Here number is of type NotifyPhoneNumber
	 *   gs.info(number.supportsIncomingPhoneCall());
	 * }
	 * 
	 * @returns boolean Value that indicates whether the Notify phone number supports incoming phone calls.  *   true: phone number does support incoming phone calls *   false: phone number does not support incoming phone calls
	 * 
	 */
	supportsIncomingPhoneCall() : boolean
	/**
	 * @description Determines if the Notify phone number supports receiving SMS messages.
	 * @example
	 * //This example shows how to determine if a Notify caller can receive incoming SMS messages.
	 * var numbers = sn_notify.NotifyScoped.getPhoneNumbers();
	 *  
	 * // Here numbers is of type List
	 * if (numbers.size() &gt; 0) {
	 *    var number = numbers.get(0);
	 *  
	 *    // Here number is of type NotifyPhoneNumber
	 *   gs.info(number.supportsIncomingSMS());
	 * }
	 * 
	 * @returns boolean Value that indicates whether the Notify phone number supports incoming SMS messages.  *   true: phone number does support incoming SMS messages *   false: phone number does not support incoming SMS messages
	 * 
	 */
	supportsIncomingSMS() : boolean
	/**
	 * @description Determines if the Notify phone number supports initiating phone calls.
	 * @example
	 * //This example shows how to determine if a Notify caller can make outgoing phone calls.
	 * var numbers = sn_notfy.Notify.getPhoneNumbers();
	 *  
	 * // Here numbers is of type List
	 * if (numbers.size() &gt; 0) {
	 *    var number = numbers.get(0);
	 *  
	 *    // Here number is of type NotifyPhoneNumber
	 *   gs.info(number.supportsOutgoingPhoneCall());
	 * }
	 * 
	 * @returns boolean Value that indicates whether the Notify phone number supports initiating outgoing phone calls.  *   true: phone number does support initiating outgoing phone calls *   false: phone number does not support initiating outgoing phone calls
	 * 
	 */
	supportsOutgoingPhoneCall() : boolean
	/**
	 * @description Determines if the Notify phone number supports sending SMS messages.
	 * @example
	 * //This example shows how to determine if a Notify caller can initiate outgoing SMS messages.
	 * var numbers = sn_notify.NotifyScoped.getPhoneNumbers();
	 *  
	 * // Here numbers is of type List
	 * if (numbers.size() &gt; 0) {
	 *    var number = numbers.get(0);
	 *  
	 *    // Here number is of type NotifyPhoneNumber
	 *   gs.info(number.supportsOutgoingSMS());
	 * }
	 * 
	 * @returns boolean Value that indicates whether the Notify phone number supports sending SMS messages.  *   true: phone number does support sending SMS messages *   false: phone number does not support sending SMS messages
	 * 
	 */
	supportsOutgoingSMS() : boolean
	/**
	 * @description Determines if the Notify phone number supports recording phone calls.
	 * @example
	 * //This example shows how to determine if a Notify caller can record calls.
	 * var numbers = sn_notify.Notify.getPhoneNumbers();
	 *  
	 * // Here numbers is of type List
	 * if (numbers.size() &gt; 0) {
	 *    var number = numbers.get(0);
	 *  
	 *    // Here number is of type NotifyPhoneNumber
	 *   gs.info(number.supportsRecording());
	 * }
	 * 
	 * @returns boolean Value that indicates whether the Notify phone number supports recording phone calls.  *   true: phone number does support recording phone calls *   false: phone number does not support recording phone calls
	 * 
	 */
	supportsRecording() : boolean
	/**
	 * @description Determines if the Notify phone number supports calls to a browser, such as in a WebRTC implementation.
	 * @example
	 * //This example shows how to determine if a Notify caller can initiate/accept browser-to-browser calls.
	 * var numbers = sn_notify.Notify.getPhoneNumbers();
	 *  
	 * // Here numbers is of type List
	 * if (numbers.size() &gt; 0) {
	 *    var number = numbers.get(0);
	 *  
	 *    // Here number is of type NotifyPhoneNumber
	 *   gs.info(number.supportsWebRTC());
	 * }
	 * 
	 * @returns boolean Value that indicates whether the Notify phone number supports browser-to-browser (WebRTC) calls.  *   true: phone number does support browser-to-browser (WebRTC) calls *   false: phone number does not support browser-to-browser (WebRTC) calls
	 * 
	 */
	supportsWebRTC() : boolean
	}
declare namespace sn_notify {
	}
/**
	 * @description CartJS API enables you to access the shopping cart for a user.
	 * To use this class in a scoped application, use the sn\_sc namespace identifier. The Service Catalog Scoped API plugin (ID: com.glideapp.servicecatalog.scoped.api) that is enabled by default is required to access the CartJS API.
	 * 
	 */
	declare class CartJS {
	/**
	 * @description Adds the request for a catalog item to the current cart.
	 * @example
	 * //
	 * 
	 * var cart = new sn_sc.CartJS();
	 * var item =
	 * {
	 * 'sysparm_id': '0d08837237153000158bbfc8bcbe5d02',
	 * 'sysparm_quantity': '1',
	 * 'variables':{
	 * 'carrier': 'at_and_t_mobility',
	 * 'data_plan': '500MB',
	 * 'duration': 'eighteen_months',
	 * 'color': 'slate',
	 * 'storage': 'sixtyfour' 
	 * }};
	 * var cartDetails = cart.addToCart(item);
	 * gs.info(cartDetails);
	 * 
	 * @param request A JSON object that contains the details of the catalog item to be added to the cart.  The structure of the request object is:  { 'sysparm\_id': item\_id, 'sysparm\_quantity': item\_quantity, 'variables':{ 'var\_name': 'var\_value', ... } }  *   item\_id: sys\_id of the item to be added to the cart *   item\_quantity: Number of items to be added. Default value is 1. *   var\_name: Name of the question. *   var\_value: Value of the answer (Not the display value).
	 * 
	 * @returns JSON Structure of the current cart.      {     'subtotal': value,     'items':[     {     itemName:'',     quantity:'',      price:'',      recurring_price:''     } ...]     }
	 * 
	 */
	addToCart(request: Map) : JSON
	/**
	 * @description Creates an instance of the CartJS class with the name of a defined cart for the user who is currently logged in.
	 * @example
	 * //
	 * var cart = new sn_sc.CartJS(cart1);
	 * 
	 * @param cartName Optional. Name of a defined cart for the user who is currently logged in.
	 * 
	 */
	constructor(cartName: string) 
	/**
	 * @description Performs the cart checkout. If the two-step checkout is enabled, returns the order summary. If the two-step checkout is disabled, the cart is submitted and details of the generated request are returned.
	 * @example
	 * //
	 * var cart = new sn_sc.CartJS();
	 * var checkoutInfo = cart.checkoutCart();
	 * gs.info(checkoutInfo);
	 * 
	 * 
	 * @returns JSON If the two-step checkout is enabled, the summary of the items in the cart is returned.      { "subtotal_price":"",       "subtotal_recurring_frequency":"",       "delivery_address":"",       "special_instructions":"",       "total_title":"",       "requested_for_user":"System Administrator",       "requested_for":"6816f79cc0a8016401c5a33be04be441",       “daily”: ["frequency_subtotal":"", "items":[{}, {}, ...], …],       “monthly”:["frequency_subtotal":"", "items":[{}, {}, ...], …],       “annually”:["frequency_subtotal":"", "items":[{}, {}, ...], …],       "none":["frequency_subtotal":"", "items":[{}, {}, ...], …],     }  If the two-step checkout is disabled:      {       'request_id' : "sys_id of the generated request",       "request_number" : "Number of the generated request"     }
	 * 
	 */
	checkoutCart() : JSON
	/**
	 * @description Deletes the current cart.
	 * @example
	 * //
	 * var cart = new sn_sc.CartJS();
	 *       cart.empty();
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	empty() : void
	/**
	 * @description Returns the cart id of the current cart.
	 * @example
	 * //
	 * 
	 *       var cart = new sn_sc.CartJS();
	 *       cart.getCartID(); 
	 *       gs.info(cartId);
	 * 
	 * 
	 * @returns string sys\_id for the current cart.
	 * 
	 */
	getCartID() : string
	/**
	 * @description Returns the GlideRecord for the cart item (sc\_cart\_item) in the current cart.
	 * @example
	 * //
	 * 
	 *       var cart = new sn_sc.CartJS();
	 *       cart.getCartItems(); 
	 *       gs.info(CartItems)
	 * 
	 * 
	 * @returns GlideRecord GlideRecord pointing to cart items in the current cart.
	 * 
	 */
	getCartItems() : GlideRecord
	/**
	 * @description Gets the delivery address for the current cart.
	 * @example
	 * //
	 * 
	 *       var cart = new sn_sc.CartJS();
	 *       cart.setDeliveryAddress("Brasilia, Brasil");
	 *       cart.getDeliveryAddress(); 
	 *       gs.info(DeliveryAddress);
	 * 
	 * 
	 * @returns string Delivery address for the current cart.
	 * 
	 */
	getDeliveryAddress() : string
	/**
	 * @description Gets the sys\_id from the sys\_user record of the user for whom the cart is requested.
	 * @example
	 * //
	 * 
	 * var cart = new sn_sc.CartJS();
	 * cart.setRequestedFor("039c516237b1300054b6a3549dbe5dfc")
	 * cart.getRequestedFor(); 
	 * gs.info(cartId);
	 * 
	 * 
	 * @returns string sys\_id from the sys\_user record of the user for whom the cart is requested.
	 * 
	 */
	getRequestedFor() : string
	/**
	 * @description Gets the name from the user record of the user for whom the current cart is requested.
	 * @example
	 * //
	 * 
	 *       var cart = new sn_sc.CartJS();
	 *       cart.getRequestedForDisplayName(); 
	 *       gs.info(DisplayName);
	 * 
	 * 
	 * @returns string Name from the user record of the user for whom the current cart is requested.
	 * 
	 */
	getRequestedForDisplayName() : string
	/**
	 * @description Gets the special instructions for the current cart.
	 * @example
	 * //
	 * 
	 *       var cart = new sn_sc.CartJS();
	 *       cart.setSpecialInstructions("Delivery before 8 AM.");
	 *       cart.getSpecialInstructions(); 
	 *       gs.info(SpecialInstructions);
	 * 
	 * 
	 * @returns string Special instructions for the current cart.
	 * 
	 */
	getSpecialInstructions() : string
	/**
	 * @description Orders a single item. If two-step checkout is enabled, the method adds the specified item to the cart and returns the sys\_id of the cart. If two-step checkout is disabled, the method completes the purchase of the specified item and returns the sys\_id of the generated request.
	 * @example
	 * //
	 * 
	 * var cart = new sn_sc.CartJS();
	 * var request =
	 * {
	 *   'sysparm_id': '0d08837237153000158bbfc8bcbe5d02',
	 *   'sysparm_quantity': '1',
	 *   'variables':{
	 *     'carrier': 'at_and_t_mobility',
	 *     'data_plan': '500MB',
	 *     'duration': 'eighteen_months',
	 *     'color': 'slate',
	 *     'storage': 'sixtyfour'
	 *   }
	 * }
	 * var cartDetails = cart.orderNow(request);
	 * gs.info(cartDetails);
	 * 
	 * @param request JSON object that contains details of the catalog item to order.
	 * @param request.delivery_address Address to which to deliver the items.  Default: Address of user
	 * @param request.sysparm_id Required. The sys\_id of the item to purchase.
	 * @param request.special_instructions Instructions to follow when processing the order.
	 * @param request.sysparm_quantity Quantity of the specified item to purchase.  Default: 1
	 * @param request.sysparm_requested_for The sys\_id of the user for whom the item is requested.  Default: Session user
	 * @param request.variables Questions and customer answers associated with the item.
	 * @param request.variables.var_name Name of the question.
	 * @param request.variables.var_value Customer's response to the associated question.
	 * 
	 * @returns any Output if two-step checkout is enabled:      {       'cart_id' : '<sys_id of the cart to which the items were added>'     }  Output if two-step checkout is disabled:      {       'request_id' : '<sys_id of the generated request>',       'request_number' : '<Number of the generated request>'     }
	 * 
	 */
	orderNow(request: Map,requestdelivery_address: string,requestsysparm_id: string,requestspecial_instructions: string,requestsysparm_quantity: string,requestsysparm_requested_for: string,requestvariables: Array,requestvariablesvar_name: string,requestvariablesvar_value: string) : any
	/**
	 * @description Sets the delivery address for the current cart.
	 * @example
	 * //
	 * 
	 *       var cart = new sn_sc.CartJS();
	 *       cart.setDeliveryAddress("Brasilia, Brasil"); 
	 *       
	 * 
	 * @param address Delivery address for the current cart.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setDeliveryAddress(address: string) : void
	/**
	 * @description Sets the special instructions for the current cart.
	 * @example
	 * //
	 * 
	 *       var cart = new sn_sc.CartJS();
	 *       cart.setSpecialInstructions("Delivery before 8 AM."); 
	 *    
	 * 
	 * @param specialInstructions Special instructions for the current cart.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setSpecialInstructions(specialInstructions: string) : void
	/**
	 * @description Updates special instructions, requested for, and delivery address from the request parameter and performs the cart checkout. Use this API to modify the mentioned parameters of the cart and perform the cart checkout simultaneously. Missing parameters in the request object will have their default value.
	 * @example
	 * //
	 * var cart = new sn_sc.CartJS();
	 * var request =
	 * {
	 *   'special_instructions' : 'Delivery only in working hours',
	 *   'requested_for' : '62826bf03710200044e0bfc8bcbe5df1',
	 *   'delivery_address' : "Brasilia, Brasil",
	 * };
	 * var requestDetails = cart.submitOrder(request);
	 * gs.info(requestDetails);
	 * 
	 * @param request A JSON object that contains details of the cart to be submitted.  The structure of the request object is:  {   'special\_instructions' : 'instructions',   'sysparm\_requested\_for' : requested\_for,   'delivery\_address' : 'address' }  *   instructions: Special instructions for the request. *   requested\_for : sys\_id of the requested\_for user. *   address: Delivery address for the request.
	 * 
	 * @returns JSON Structure of the cart.      {       'request_id' : 'sys_id of the generated Request',       'request_number' : 'Number of the generated Request'     }
	 * 
	 */
	submitOrder(request: Map) : JSON
	/**
	 * @description Updates an item in the cart.
	 * @example
	 * //
	 * var cart = new sn_sc.CartJS();
	 * var request =
	 * {
	 *   'sysparm_quantity': '1',
	 *   'variables':{
	 *     'carrier': 'at_and_t_mobility',
	 *     'data_plan': '500MB',
	 *     'duration': 'eighteen_months',
	 *     'color': 'slate',
	 *     'storage': 'sixtyfour'
	 *   }
	 * };
	 * var cart_item_id = "4d69b672c322320076173b0ac3d3ae79";
	 * var cartDetails = cart.updateItem(request, cart_item_id);
	 * gs.info(cartDetails);
	 * 
	 * 
	 * @param request A JSON object that contains details of the catalog item to be updated.  The structure of the request object is:  {     'sysparm\_quantity' : item\_quantity,   'sysparm\_requested\_for' : requested\_for,   'variables' : {     'var\_name' : 'var\_value',     ...   } }  *   item\_quantity: Number of items to be added. Default value is 1. *   var\_name: Name of the question. *   var\_value: Value of the answer (Not the display value).
	 * @param cart_item_id sys\_id of the cart item to be modified.
	 * 
	 * @returns JSON Details of the cart.      {       'subtotal': value,       'items':[         {         itemName:'',         quantity:'',         price:'',         recurring_price:''         }         ...],       ...     }
	 * 
	 */
	updateItem(request: Map,cart_item_id: string) : JSON
	/**
	 * @description Specifies if the current user has the required role to edit the Request for field.
	 * @example
	 * //This example checks if the user has the role needed to edit the requested for field.
	 * var cart=new sn_sc.CartJS();
	 * console.log(cart.canViewRF());
	 * 
	 * @returns boolean Flag that indicates whether the user has the required role to edit the requested for field.  Valid values:  *   true: user has the required role *   false: user does not have the required role
	 * 
	 */
	canViewRF() : boolean
	/**
	 * @description Returns the cart details.
	 * @example
	 * //:
	 * var cart=new sn_sc.CartJS();
	 * 	console.log (cart.getCartDetails());
	 * 
	 * @returns Object Object pointing to the current cart details.
	 * 
	 */
	getCartDetails() : Object
	/**
	 * @description Sets the sys\_id in the sys\_user record of the user for whom the cart is requested.
	 * @example
	 * //
	 * 
	 * var cart = new sn_sc.CartJS();
	 * cart.setRequestedFor("039c516237b1300054b6a3549dbe5dfc")
	 * 
	 * 
	 * @param user sys\_id to be set in the sys\_user record of the user for whom the cart is requested.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setRequestedFor(user: string) : void
	}
/**
	 * @description CatalogClientScript API enables you to create, modify, or delete catalog client script records.
	 * To use this class in a scoped application, use the sn\_sc namespace identifier. The Service Catalog Scoped API plugin (ID: com.glideapp.servicecatalog.scoped.api) that is enabled by default is required to access the CatalogClientScript API.
	 * 
	 */
	declare class CatalogClientScript {
	/**
	 * @description Creates an instance of the CatalogClientScript class.
	 * @example
	 * //
	 * var catalogClientScript = new sn_sc.CatalogClientScript();
	 * 
	 */
	constructor() 
	/**
	 * @description Adds a script to the catalog client script.
	 * @example
	 * //
	 * var catalogClientScript = new sn_sc.CatalogClientScript();
	 * catalogClientScript.addScript("function onLoad(){Enter the script}");
	 * 
	 * @param script Script to be added to the catalog client script.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	addScript(script: string) : void
	/**
	 * @description Specifies if the catalog client script runs on a catalog item.
	 * @example
	 * //
	 * var catalogClientScript = new sn_sc.CatalogClientScript();
	 * catalogClientScript.appliesToCatalogItem(true);
	 * 
	 * @param flag If true, the catalog client script runs on the catalog item. If false, the catalog client script does not run on the catalog item.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	appliesToCatalogItem(flag: boolean) : void
	/**
	 * @description Specifies if the catalog client script runs on a catalog task.
	 * @example
	 * //
	 * var catalogClientScript = new sn_sc.CatalogClientScript();
	 * catalogClientScript.appliesToCatalogTask(true);
	 * 
	 * @param flag If true, the catalog client script runs on the catalog task. If false, the catalog client script does not run on the catalog task.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	appliesToCatalogTask(flag: boolean) : void
	/**
	 * @description Specifies if the catalog client script runs on a requested item.
	 * @example
	 * //
	 * var catalogClientScript = new sn_sc.CatalogClientScript();
	 * catalogClientScript.appliesToRequestedItem(true);
	 * 
	 * @param flag If true, the catalog client script runs on the requested item. If false, the catalog client script does not run on the requested item.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	appliesToRequestedItem(flag: boolean) : void
	/**
	 * @description Specifies if the catalog client script runs on a requested item.
	 * @example
	 * //
	 * var catalogClientScript = new sn_sc.CatalogClientScript();
	 * catalogClientScript.appliesToTargetRecord(true);
	 * 
	 * @param flag If true, the catalog client script runs on the target record. If false, the catalog client script does not run on the target record.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	appliesToTargetRecord(flag: boolean) : void
	/**
	 * @description Inserts the defined catalog client script in the catalog\_script\_client table.
	 * @example
	 * //
	 * 
	 *         var catalogClientScript = new sn_sc.CatalogClientScript();
	 *         catalogClientScript.setAttributes({"name": "My Catalog Item", "applies_to": "item", "ui_type": "desktop", "type": "onLoad"});
	 *         catalogClientScript.appliesToCatalogItem(true);
	 *         catalogClientScript.appliesToRequestedItem(true);
	 *         catalogClientScript.appliesToCatalogTask(true);
	 *         catalogClientScript.appliesToTargetRecord(true);
	 *         var catalogClientScriptId = catalogClientScript.create();
	 *         gs.info(catalogClientScriptId);
	 *       
	 *       
	 *       
	 *       
	 * 
	 * @param standardUpdate Set to true to enable the running of engines and workflow.
	 * 
	 * @returns string sys\_id of the catalog client script.
	 * 
	 */
	create(standardUpdate: boolean) : string
	/**
	 * @description Deletes the defined catalog client script.
	 * @example
	 * //
	 * 
	 *         var sys_id = "039c516237b1300054b6a3549dbe5dfc"; 
	 *         var catalogClientScript = new sn_sc.CatalogClientScript();
	 *         catalogClientScript.deleteRecord("039c516237b1300054b6a3549dbe5dfc");
	 * 
	 * @param sys_id sys\_id of the catalog client script.
	 * @param standardUpdate Set to true to enable the running of engines and workflow.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	deleteRecord(sys_id: string,standardUpdate: boolean) : void
	/**
	 * @description Defines attribute values for the catalog client script.
	 * @example
	 * //
	 * var catalogClientScript = new sn_sc.CatalogClientScript();
	 * catalogClientScript.setAttributes({"name": "My Catalog Item", "applies_to": "catalog_item", "ui_type": "desktop", "type": "onLoad"});
	 * 
	 * @param attributes A JSON object that has mapping for the field and value pairs.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setAttributes(attributes: Map) : void
	/**
	 * @description Associates a catalog item with the catalog client script.
	 * @example
	 * //
	 * var catalogClientScript = new sn_sc.CatalogClientScript();
	 * catalogClientScript.setCatalogItem("039c516237b1300054b6a3549dbe5dfc");
	 * 
	 * @param sys_id sys\_id of the catalog item.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setCatalogItem(sys_id: string) : void
	/**
	 * @description Runs the catalog client script when a variable value is updated.
	 * @example
	 * //
	 * var catalogClientScript = new sn_sc.CatalogClientScript();
	 * catalogClientScript.setOnChangeVariable("039c516237b1300054b6a3549dbe5dfc");
	 * 
	 * @param sys_id sys\_id of the variable.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setOnChangeVariable(sys_id: string) : void
	/**
	 * @description Associates a variable set with the catalog client script.
	 * @example
	 * //
	 * var catalogClientScript = new sn_sc.CatalogClientScript();
	 * catalogClientScript.setVariableSet("039c516237b1300054b6a3549dbe5dfc");
	 * 
	 * @param sys_id sys\_id of the variable set.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setVariableSet(sys_id: string) : void
	}
/**
	 * @description CatalogItemVariable API enables you to create and modify service catalog item variables using scripts.
	 * 
	 */
	declare class CatalogItemVariable {
	/**
	 * @description Insert the defined catalog item variable.
	 * @param standardUpdate Set to true to enable the running of engines and workflow.
	 * 
	 * @returns string Return the sys\_id of the inserted variable record.
	 * 
	 */
	create(standardUpdate: boolean) : string
	/**
	 * @description Define attribute values for this catalog item variable.
	 * @param attributes An object mapping column names to values.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setAttributes(attributes: Object) : void
	/**
	 * @description Use to update current catalog item variable with set values.
	 * @param columnValues An object mapping column names to values.
	 * @param standardUpdate Set to true to enable the running of engines and workflow.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	update(columnValues: Object,standardUpdate: boolean) : void
	/**
	 * @description Delete the defined catalog item variable.
	 * @param standardUpdate Set to true to enable the running of engines and workflow.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	deleteRecord(standardUpdate: boolean) : void
	/**
	 * @description Get a mapping of catalog item variable attribute values.
	 * @param columns Specify the set of columns that you would like the values for.
	 * @param standardUpdate Set to true to enable the running of engines and workflow.
	 * 
	 * @returns Object An object mapping column names to values.
	 * 
	 */
	read(columns: Object,standardUpdate: boolean) : Object
	}
/**
	 * @description CatalogItemVariableSet API enables you to create and modify service catalog item variable sets using scripts.
	 * 
	 */
	declare class CatalogItemVariableSet {
	/**
	 * @description Inserts the defined catalog item variable set.
	 * @example
	 * //
	 * // Given an existing catalog item
	 * var catItemSysId = "e0d08b13c3330100c8b837659bba8fb4";
	 * addVariableSets(catItemSysId);
	 * 
	 * function addVariableSets(catItemSysId) {
	 *   // List of all variable sets to attach
	 *   var myVarSets = [];
	 * 
	 *   // Create variable set
	 *   var myVarSetAttrs = {"name": "Requester details", "order": "100"};
	 *   var myVarSet = new sn_sc.CatalogItemVariableSet();
	 *   myVarSet.setAttributes(myVarSetAttrs);
	 *   var myVarSetId = myVarSet.create(true);
	 *   myVarSets.push(myVarSetId);
	 * }
	 * 
	 * @param standardUpdate Flag indicating whether to enable the running of engines and workflow.  Valid values:  *   true: Enable the running of engines and workflow. *   false: Do not enable the running of engines and workflow.
	 * 
	 * @returns string Sys\_id of the inserted variable record.
	 * 
	 */
	create(standardUpdate: boolean) : string
	/**
	 * @description Define attribute values for this catalog item variable set.
	 * @param attributes An object mapping column names to values.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setAttributes(attributes: Object) : void
	/**
	 * @description Get a mapping of catalog item variable set attribute values.
	 * @param columns Specify the set of columns that you would like the values for.
	 * @param standardUpdate Set to true to enable the running of engines and workflow.
	 * 
	 * @returns Object An object mapping column names to values.
	 * 
	 */
	read(columns: Object,standardUpdate: boolean) : Object
	/**
	 * @description Delete the defined catalog item variable.
	 * @param standardUpdate Set to true to enable the running of engines and workflow.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	deleteRecord(standardUpdate: boolean) : void
	/**
	 * @description Use to update current catalog item variable set with set values.
	 * @param columnValues An object mapping column names to values.
	 * @param standardUpdate Set to true to enable the running of engines and workflow.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	update(columnValues: Object,standardUpdate: boolean) : void
	}
/**
	 * @description CatalogItemVariableSetM2M API enables you to create and modify service catalog item variable set many-to-many (M2Ms) using scripts.
	 * 
	 */
	declare class CatalogItemVariableSetM2M {
	/**
	 * @description Insert the defined catalog item variable set M2M.
	 * @param standardUpdate Set to true to enable the running of engines and workflow.
	 * 
	 * @returns string Return the sys\_id of the inserted variable record.
	 * 
	 */
	create(standardUpdate: boolean) : string
	/**
	 * @description Delete the defined catalog item variable set M2M.
	 * @param standardUpdate Set to true to enable the running of engines and workflow.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	deleteRecord(standardUpdate: boolean) : void
	/**
	 * @description Get a mapping of catalog item variable set M2M attribute values.
	 * @param columns Specify the set of columns that you would like the values for.
	 * @param standardUpdate Set to true to enable the running of engines and workflow.
	 * 
	 * @returns Object An object mapping column names to values.
	 * 
	 */
	read(columns: Object,standardUpdate: boolean) : Object
	/**
	 * @description Updates current catalog item variable set M2M with set values.
	 * Consistency across all API ref topics is critical. Follow the template exactly or the importer script will fail.
	 * 
	 * @param columnValues An object mapping column names to values.
	 * @param standardUpdate Set to true to enable the running of engines and workflow.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	update(columnValues: Object,standardUpdate: boolean) : void
	/**
	 * @description Define attribute values for this catalog item variable set M2M.
	 * @param attributes An object mapping column names to values.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setAttributes(attributes: Object) : void
	}
/**
	 * @description The CatalogJS API enables you to use methods to check and retrieve catalog-specific properties.
	 * To use this class in a scoped application, use the sn\_sc namespace identifier. The Service Catalog Scoped API plugin (com.glideapp.servicecatalog.scoped.api) that is enabled by default is required to access the CatalogJS API.
	 * 
	 */
	declare class CatalogJS {
	/**
	 * @description Creates an instance of the catalog class for the specified glide record object.
	 * @example
	 * //:
	 * var gr = new GlideRecord('sc_catalog');
	 *  now_GR.addQuery('sys_id','e0d08b13c3330100c8b837659bba8fb4');
	 * now_GR.query();
	 * var Catalog = new sn_sc.Catalog(now_GR);
	 * 
	 * @param gr Glide Record pointing to the sc\_catalog table.
	 * 
	 */
	constructor(gr: Object) 
	/**
	 * @description Creates an instance of the Catalog class with the specified sys\_id.
	 * @example
	 * //:
	 * new sn_sc.Catalog(catalog_sys_id);
	 * var Catalog = new sn_sc.Catalog("31bea3d53790200044e0bfc8bcbe5dec");
	 * 
	 * 
	 * 
	 * @param sys_id sys\_id of the Catalog.
	 * 
	 */
	constructor(sys_id: string) 
	/**
	 * @description Specifies if the catalog is viewable for the user.
	 * @example
	 * //:
	 * var catalog=new sn_sc.Catalog("e0d08b13c3330100c8b837659bba8fb4");;	
	 * 	         console.log (catalog.canView(true));
	 * 
	 * @param mobile True if the view is mobile view. Else, false.
	 * 
	 * @returns boolean Returns true if the catalog is viewable for the user.
	 * 
	 */
	canView(mobile: boolean) : boolean
	/**
	 * @description If only one active catalog exists, that catalog is returned. Else, the earliest catalog created is returned, from the list of the catalogs that the user can view. If no catalog is available, null is returned.
	 * @example
	 * //:
	 * var catalog = sn_sc.Catalog. getAvailableCatalog()
	 * 
	 * @returns Object Object pointing to the earliest catalog that the user can view.
	 * 
	 */
	getAvailableCatalog() : Object
	/**
	 * @description Returns the catalog background color.
	 * @example
	 * //:
	 * var catalog=new sn_sc.Catalog("e0d08b13c3330100c8b837659bba8fb4");
	 * console.log(catalog.getBackgroundColor());
	 * 
	 * @returns string Background color of the catalog.
	 * 
	 */
	getBackgroundColor() : string
	/**
	 * @description Specifies the number of catalogs active in the catalog table.
	 * @example
	 * //:
	 * console.log (sn_sc.Catalog.getCatalogCount());
	 * 
	 * @returns Integer Number of catalogs available in the catalog table.
	 * 
	 */
	getCatalogCount() : Integer
	/**
	 * @description Returns the categories for the specified catalog.
	 * @example
	 * //:
	 * var catalog=new sn_sc.Catalog("e0d08b13c3330100c8b837659bba8fb4");	
	 * 	         console.log(catalog.getCategories());
	 * 
	 * @returns ArrayList Returns the categories for the specified catalog.
	 * 
	 */
	getCategories() : ArrayList
	/**
	 * @description Specifies the sys\_ids of the categories in the specified catalog.
	 * @example
	 * //:
	 * var catalog=new sn_sc.Catalog("e0d08b13c3330100c8b837659bba8fb4");
	 * 	console.log(catalog.getCategoryIds());
	 * 
	 * @returns ArrayList Returns the sys\_ids of the categories in the specified catalog.
	 * 
	 */
	getCategoryIds() : ArrayList
	/**
	 * @description Specifies the catalog description.
	 * @example
	 * //:
	 * var catalog=new sn_sc.Catalog("e0d08b13c3330100c8b837659bba8fb4");
	 * 	console.log(catalog.getDescription());
	 * 
	 * @returns string Catalog description.
	 * 
	 */
	getDescription() : string
	/**
	 * @description Returns the catalog desktop image value.
	 * @example
	 * //:
	 * var catalog=new sn_sc.Catalog("e0d08b13c3330100c8b837659bba8fb4");
	 * 	console.log(catalog.getDesktopImageSRC());
	 * 
	 * @returns string Catalog desktop image value.
	 * 
	 */
	getDesktopImageSRC() : string
	/**
	 * @description Returns the catalog gliderecord.
	 * @example
	 * //:
	 * var catalog=new sn_sc.Catalog("e0d08b13c3330100c8b837659bba8fb4");	
	 * 	data.history=catalog.getGr();
	 * 
	 * @returns GlideRecord GlideRecord of the catalog.
	 * 
	 */
	getGr() : GlideRecord
	/**
	 * @description Returns the catalog header icon.
	 * @example
	 * //:
	 * var catalog=new sn_sc.Catalog("e0d08b13c3330100c8b837659bba8fb4");
	 * console.log(catalog.getHeaderIconSRC());
	 * 
	 * @returns string Catalog header icon.
	 * 
	 */
	getHeaderIconSRC() : string
	/**
	 * @description Specifies the sys\_id of the catalog.
	 * @example
	 * //:
	 * var catalog=new sn_sc.Catalog("e0d08b13c3330100c8b837659bba8fb4");
	 * 	console.log(catalog.getId());
	 * 
	 * @returns string sys\_id of the catalog.
	 * 
	 */
	getID() : string
	/**
	 * @description Returns the title of the catalog.
	 * @example
	 * //:
	 * var catalog=new sn_sc.Catalog("e0d08b13c3330100c8b837659bba8fb4");
	 * 	console.log(catalog.getTitle());
	 * 
	 * @returns string Title of the catalog
	 * 
	 */
	getTitle() : string
	/**
	 * @description Specifies if the catalog has categories.
	 * @example
	 * //:
	 * var catalog=new sn_sc.Catalog("e0d08b13c3330100c8b837659bba8fb4");
	 * 	console.log(catalog.hasCategories());
	 * 
	 * @returns boolean Returns true if the catalog has categories. Else returns false.
	 * 
	 */
	hasCategories() : boolean
	/**
	 * @description Specifies if the catalog has catalog items.
	 * @example
	 * //:
	 * var catalog=new sn_sc.Catalog("e0d08b13c3330100c8b837659bba8fb4");
	 * 	console.log(catalog.hasItems());
	 * 
	 * 
	 * @returns boolean Returns true if the catalog has catalog items. Else returns false.
	 * 
	 */
	hasItems() : boolean
	/**
	 * @description Specifies if the wish list is enabled for a catalog.
	 * @example
	 * //:
	 * var catalog=new sn_sc.Catalog("e0d08b13c3330100c8b837659bba8fb4");	
	 * 	console.log(catalog.isWishlistEnabled());
	 * 
	 * 
	 * @returns boolean Returns true if wish list is enabled for a catalog. Else returns false.
	 * 
	 */
	isWishlistEnabled() : boolean
	}
/**
	 * @description CatalogSearch API enables you to search catalog item.
	 * To use this class in a scoped application, use the sn\_sc namespace identifier. The Service Catalog Scoped API plugin (ID: com.glideapp.servicecatalog.scoped.api) that is enabled by default is required to access the CatalogSearch API.
	 * 
	 */
	declare class CatalogSearch {
	/**
	 * @description Creates an instance of the CatalogSearch class.
	 * @example
	 * //
	 * var catSearchGR = new sn_sc.CatalogSearch().search('', '', 'Apple', false, true);
	 * catSearchGR.query();
	 * while(catSearchGR.next()) {
	 *   gs.info(catSearchGR.getValue('name'));
	 * }
	 * 
	 */
	constructor() 
	/**
	 * @description Searches a catalog item based on a search term. The search can be narrowed down to a catalog category level.
	 * @example
	 * //This example shows how to search all catalogs and all categories for term: ServiceNow.
	 * var now_GR = new sn_sc.CatalogSearch().search('', '', 'ServiceNow', false, true);
	 * now_GR.query();
	 * while(now_GR.next()) {
	 *   gs.log(now_GR.name);
	 * }
	 * 
	 * @param catalogID Identifier of the catalog that is searched.
	 * @param categoryID Identifier of the catalog category that is searched.
	 * @param depthSearch If true, subcategories are also searched.
	 * @param mobile If true, only catalog items exposed for mobile are searched.
	 * @param term Search term.
	 * 
	 * @returns GlideRecord Returns the GlideRecord on sc\_cat\_item matching the search result.
	 * 
	 */
	search(catalogID: string,categoryID: string,depthSearch: boolean,mobile: boolean,term: string) : GlideRecord
	}
/**
	 * @description CatCategory API enables you to create and modify service catalog categories using scripts.
	 * 
	 */
	declare class CatCategory {
	/**
	 * @description Determines whether a specified user can view a specified category on a mobile device or desktop.
	 * @example
	 * //
	 * var scopedCategoryObj = new sn_sc.CatCategory('7b1262b9530033007444ddeeff7b12ae');
	 * scopedCategoryObj.canView(false, '62826bf03710200044e0bfc8bcbe5df1');
	 * 
	 * @param isMobile Flag that indicates whether to verify the user for access on a mobile device or desktop.  *   true: validate for mobile. *   false: validate for desktop.
	 * @param userSysId Unique identifier of the user to validate.
	 * 
	 * @returns boolean Flag that indicates whether the user can view the associated category.  *   true: user can view the category. *   false: user cannot view the category.
	 * 
	 */
	canView(isMobile: boolean,userSysId: string) : boolean
	/**
	 * @description Insert the defined category.
	 * @example
	 * //
	 * var categoryCreate = new sn_sc.CatCategory();
	 * categoryCreate.setAttributes({"title" : "test a scoped category", "sc_catalog" : "e0d08b13c3330100c8b837659bba8fb4"});
	 * var categorySysId = categoryCreate.create();
	 * var isValidSysId = categorySysId.match(/^[0-9a-fA-F]{32}$/) == null ? false : true;
	 * global.Assert.assertEquals(true, isValidSysId,"CategorySysId: ["+ categorySysId +"] is not valid", true, isValidSysId);
	 * 
	 * @param standardUpdate Set to true to enable the running of engines and workflow.
	 * 
	 * @returns string Return the sys\_id of the inserted variable record.
	 * 
	 */
	create(standardUpdate: boolean) : string
	/**
	 * @description Define the table name for this category.
	 * @example
	 * //
	 * var categoryRead = new sn_sc.CatCategory(categorySysId);
	 * categoryRead.setTableName("test_category");
	 * var values = categoryRead.read({"title" : "", "sc_catalog":"", "test": ""}, false);
	 * gs.info(categorySysId);
	 * gs.info(values.title);
	 * gs.info(values.test);
	 * global.Assert.assertEquals("testValue", values.test,"Category extends sc_category and stores its extended value");
	 * 
	 * @param tableName Specify the name of the table that extends sc\_category.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setTableName(tableName: string) : void
	/**
	 * @description Use to update current category.
	 * @example
	 * //
	 * var categoryUpdate = new sn_sc.CatCategory(categorySysId);
	 * categoryUpdate.update({"title" : "test changed scoped category"}, true);
	 * values = categoryUpdate.read({"title" : "", "sc_catalog":""}, false);
	 * global.Assert.assertEquals("test changed scoped category", values.title,"Category should title");
	 * 
	 * @param columnValues Object mapping column names to values.
	 * @param standardUpdate Set to true to enable the running of engines and workflow.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	update(columnValues: Object,standardUpdate: boolean) : void
	/**
	 * @description Define attribute values for this category.
	 * @example
	 * //
	 * var categoryCreate = new sn_sc.CatCategory();
	 * categoryCreate.setAttributes({"title" : "test a scoped category", "sc_catalog" : "e0d08b13c3330100c8b837659bba8fb4"});
	 * var categorySysId = categoryCreate.create();
	 * var isValidSysId = categorySysId.match(/^[0-9a-fA-F]{32}$/) == null ? false : true;
	 * global.Assert.assertEquals(true, isValidSysId,"CategorySysId: ["+ categorySysId +"] is not valid", true, isValidSysId);
	 * 
	 * @param attributes Set the attributes for new field and value pairs.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setAttributes(attributes: Object) : void
	/**
	 * @description Get a mapping of the category.
	 * @example
	 * //
	 * var category = new sn_sc.CatCategory("a96277509f300200b407b89a442e704e");
	 * var values = category.read({"title" : ""}, true);
	 * gs.log(values.title);
	 * 
	 * @param columns Specify the set of columns that you would like the values for.
	 * @param standardUpdate Set to true to enable the running of engines and workflow.
	 * 
	 * @returns Object An object mapping column names to values.
	 * 
	 */
	read(columns: Object,standardUpdate: boolean) : Object
	/**
	 * @description Deletes the category record on which the CatCategory class was initially instantiated.
	 * @example
	 * //
	 * var categoryDelete = new sn_sc.CatCategory(categorySysId);
	 * categoryDelete.deleteRecord();
	 * var category = new sn_sc.CatCategory(categorySysId);
	 * values = category.read({"title" : "", "sc_catalog":""}, false);
	 * global.Assert.assertEquals("", values.title,"Category should title");
	 * 
	 * @param standardUpdate Set to true to enable the running of engines and workflow.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	deleteRecord(standardUpdate: boolean) : void
	/**
	 * @description Adds the Available For user criteria to a catalog category.
	 * @example
	 * //
	 * 
	 * var item = new sn_sc.CatCategory("31bea3d53790200044e0bfc8bcbe5dec");
	 * item. availableForUserCriteria("add", ["0c441abbc6112275000025157c651c89"]);
	 * 
	 * 
	 * @param action Specify add to add the user criteria to the Available For list.  Specify delete to delete the user criteria from the Available For list.
	 * @param criteriaIDs Array of the user criteria sys\_ids.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	availableForUserCriteria(action: string,criteriaIDs: Array) : void
	/**
	 * @description Adds the Not Available For user criteria to a catalog category.
	 * @example
	 * //
	 * 
	 * var item = new sn_sc.CatCategory("31bea3d53790200044e0bfc8bcbe5dec");
	 * item. notAvailableForUserCriteria("add", ["0c441abbc6112275000025157c651c89"]);
	 * 
	 * 
	 * @param action Specify add to add the user criteria to the Not Available For list.  Specify delete to delete the user criteria from the Not Available For list.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	notAvailableForUserCriteria(action: string) : void
	/**
	 * @description Returns the sys\_id of the category.
	 * @example
	 * //:
	 * var cart = new sn_sc.CatCategory("2809952237b1300054b6a3549dbe5dd4");
	 * var categoryID = cart.getID();
	 * gs.info(categoryID);
	 * 
	 * @returns string sys\_id of the category.
	 * 
	 */
	getID() : string
	}
/**
	 * @description CatItem API enables you to create and modify service catalog items using scripts.
	 * 
	 */
	declare class CatItem {
	/**
	 * @description Adds the Available For user criteria to a catalog item.
	 * @example
	 * //
	 * 
	 * var item = new sn_sc.CatItem("31bea3d53790200044e0bfc8bcbe5dec");
	 * item. availableForUserCriteria("add", ["0c441abbc6112275000025157c651c89"]);
	 * 
	 * 
	 * @param action Specify add to add the user criteria to the Available For list.  Specify delete to delete the user criteria from the Available For list.
	 * @param criteriaIDs Array of the user criteria sys\_ids.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	availableForUserCriteria(action: string,criteriaIDs: Array) : void
	/**
	 * @description Verifies whether the current catalog item is viewable in the selected domain (domain selected in the domain picker).
	 * Catalog items in the global domain are available across all domains.
	 * 
	 * @example
	 * //This example shows how to verify whether a catalog item is viewable in the currently selected domain.
	 * var catItem = new sn_sc.CatItem("060f3afa3731300054b6a3549dbe5d3e");
	 * gs.info(catItem.canViewInDomain());
	 * 
	 * @returns boolean Flag that validates whether the current catalog item is viewable in the selected domain.  Valid values:  *   true: Catalog item is viewable in the domain *   false: Catalog item is not viewable in the domain
	 * 
	 */
	canViewInDomain() : boolean
	/**
	 * @description Specifies if the user has access to view the catalog item on global search.
	 * @example
	 * //:
	 * var cart=new sn_sc.CatItem("04b7e94b4f7b4200086eeed18110c7fd");	
	 * 	data.history=cart.canViewOnSearch('false');
	 * 
	 * @param isMobile True if the search is in mobile view. Else, false.
	 * 
	 * @returns boolean Returns true if the user has access to view the catalog item on global search. Else, returns false.
	 * 
	 */
	canViewOnSearch(isMobile: boolean) : boolean
	/**
	 * @description Inserts the defined catalog item.
	 * @example
	 * //
	 * var catalogItem = new sn_sc.CatItem();
	 * catalogItem.setAttributes({"name":"My FirstCatItem"});
	 * catalogItem.setCatalogs(catalogSysId); // Service catalog
	 * catalogItem.setCategories(categorySysId); // Use scoped category
	 * 
	 * var catItemSysId = catalogItem.create(true); // Returns sys_id of created item
	 * 
	 * @param standardUpdate Flag that indicates whether to enable the running of engines and workflow.  Valid values:  *   true: Enable the running of engines and workflow. *   false: Do not enable the running of engines and workflow. Note that the created and updated system date columns on the table are not updated.
	 * 
	 * @returns string Sys\_id of the newly created catalog item.
	 * 
	 */
	create(standardUpdate: boolean) : string
	/**
	 * @description Delete the defined catalog item.
	 * @param standardUpdate Set to true to enable the running of engines and workflow.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	deleteRecord(standardUpdate: boolean) : void
	/**
	 * @description Specifies the first category that the user can view in a catalog.
	 * @example
	 * //:
	 * var CatItem=new sn_sc.CatItem("04b7e94b4f7b4200086eeed18110c7fd");	
	 * 	console.log(CatItem.getFirstAccessibleCategoryForSearch("e0d08b13c3330100c8b837659bba8fb4”));
	 * 
	 * @param catalogId sys\_id of the catalog.
	 * 
	 * @returns string sys\_id of the first category that the user can view in a catalog.
	 * 
	 */
	getFirstAccessibleCategoryForSearch(catalogId: string) : string
	/**
	 * @description Returns an array of users for whom the associated item cannot be delegated (requested on behalf of).
	 * The method verifies each of the users passed in the array.
	 * 
	 * @example
	 * //
	 * function getInvalidDelegatedUsers(itemId, userIds) {
	 * var catItem = new sn_sc.CatItem(itemId);
	 * var invalidUsers = catItem.getInvalidDelegatedUsers(userIds);
	 * return invalidUsers;
	 * }
	 * 
	 * 
	 * @param requestForUsers Array of user sys\_ids to check whether the associated user can acquire the current item and that the item can be requested on behalf of them. User sys\_ids are located in the Users \[sys\_user\] table.
	 * 
	 * @returns Array List of user names (Name column from Users \[sys\_user\] table) for whom the item cannot be requested for by a delegate.
	 * 
	 */
	getInvalidDelegatedUsers(requestForUsers: Object) : Array
	/**
	 * @description Returns the class name for the current catalog item record.
	 * @example
	 * //:
	 * var CatItem=new sn_sc.CatItem("04b7e94b4f7b4200086eeed18110c7fd");	
	 * 	console.log(CatItem.getRecordClass());
	 * 
	 * @returns string Class name for the current catalog item record.
	 * 
	 */
	getRecordClass() : string
	/**
	 * @description Verifies whether the specified delegated user has acquisition rights to the current service catalog item.
	 * @example
	 * //
	 * function canRequestFor(itemId, user) {
	 *   var catItem = new sn_sc.CatItem(itemId);
	 *   var result = catItem.isDelegationAllowed(user);
	 *   return result;
	 * }
	 * 
	 * 
	 * @param delegatedUser Optional. Sys\_id of the user to request the service catalog item for (delegate). The method verifies whether the user has acquisition rights to the item.  Default: Checks whether the calling user has acquisition rights to the item.
	 * 
	 * @returns boolean Flag that indicates whether the user has acquisition rights to the current service catalog item.  Valid values:  *   true: User has acquisition rights to the item. *   false: User does not have acquisition rights to the item.
	 * 
	 */
	isDelegationAllowed(delegatedUser: string) : boolean
	/**
	 * @description Specifies if the catalog item is available in service portal.
	 * @example
	 * //:
	 * var CatItem=new sn_sc.CatItem("04b7e94b4f7b4200086eeed18110c7fd");	
	 * 	data.history=CatItem.isVisibleServicePortal();
	 * 
	 * @returns boolean Returns true if the catalog item is available in service portal. Else, returns false.
	 * 
	 */
	isVisibleServicePortal() : boolean
	/**
	 * @description Adds the Not Available For user criteria to a catalog item.
	 * @example
	 * //
	 * 
	 * var item = new sn_sc.CatItem("31bea3d53790200044e0bfc8bcbe5dec");
	 * item. notAvailableForUserCriteria("add", ["0c441abbc6112275000025157c651c89"]);
	 * 
	 * 
	 * @param action Specify add to add the user criteria to the Not Available For list.  Specify delete to delete the user criteria from the Not Available For list.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	notAvailableForUserCriteria(action: string) : void
	/**
	 * @description Get a mapping of catalog item attribute values.
	 * @param standardUpdate Set to true to enable the running of engines and workflow.
	 * @param columns Specify the set of columns that you would like the values for.
	 * 
	 * @returns Object An object mapping column names to values.
	 * 
	 */
	read(standardUpdate: boolean,columns: Object) : Object
	/**
	 * @description Define attribute values for this catalog item.
	 * @param attributes An object mapping column names to values.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setAttributes(attributes: Object) : void
	/**
	 * @description Define the catalogs that this catalog item is associated with.
	 * @param catalogs Specify comma-separated list of catalogs that you would like the item to be associated with.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setCatalogs(catalogs: string) : void
	/**
	 * @description Define the categories that this catalog item is associated with.
	 * @param categories Specify comma-separated list of categories that you would like the item to be associated with.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setCategories(categories: string) : void
	/**
	 * @description Set the image of a catalog item to a database image record.
	 * @param dbImageSysId sys\_id of an attachment referencing the db\_image.
	 * @param type Type can be picture or an icon.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setImage(dbImageSysId: string,type: string) : void
	/**
	 * @description Define the table name for this catalog item.
	 * @param tableName Specify the name of the table that extends sc\_cat\_item.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setTableName(tableName: string) : void
	/**
	 * @description Use to update current catalog item with set values.
	 * @param columnValues An object mapping column names to values.
	 * @param standardUpdate Set to true to enable the running of engines and workflow.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	update(columnValues: Object,standardUpdate: boolean) : void
	}
/**
	 * @description The OrderGuide API enables you to initialize and view order guide details.
	 * To use this class in a scoped application, use the sn\_sc namespace identifier. The Service Catalog Scoped API plugin (com.glideapp.servicecatalog.scoped.api) that is enabled by default is required to access the OrderGuide API.
	 * 
	 */
	declare class OrderGuide {
	/**
	 * @description Creates an instance of the OrderGuide class with the specified sys\_id.
	 * @example
	 * //:
	 * var cart=new sn_sc.OrderGuide("6690750f4f7b4200086eeed18110c761");
	 * 
	 * @param sys_id sys\_id of the OrderGuide.
	 * 
	 */
	constructor(sys_id: string) 
	/**
	 * @description Returns the sys\_id of the order guide.
	 * @example
	 * //:
	 * var cart=new sn_sc.OrderGuide("6690750f4f7b4200086eeed18110c761");	
	 * 	console.log(cart.getID());
	 * 
	 * 
	 * @returns string sys\_id of the order guide.
	 * 
	 */
	getID() : string
	/**
	 * @description Initialises the order guide with the specified catalog items and the variables, and returns the order guide.
	 * @example
	 * //:
	 * var guide = new sn_sc.OrderGuide('6690750f4f7b4200086eeed18110c761');
	 *  
	 * var map = {};
	 * map.variables = {};
	 * //map.sysparm_id = '6690750f4f7b4200086eeed18110c761';
	 * map.variables['IOce433d0f4f7b4200086eeed18110c74d'] = '221f3db5c6112284009f4becd3039cc9'; //Here ce433d0f4f7b4200086eeed18110c74d is the sys_id of the variable and 221f3db5c6112284009f4becd3039cc9 is its value
	 * var includedItems = guide.init(map)
	 * 
	 * @param request A JSON object with the Catalog item and variable details.
	 * 
	 * @returns Map A JSON object with the initialised order guide details.
	 * 
	 */
	init(request: Map) : Map
	/**
	 * @description Specifies if the Show Include Toggle (include\_items) check box is selected for the specified order guide.
	 * Note: The Show Include Toggle field does not appear on the Order guide form by default.
	 * 
	 * @example
	 * //
	 * var orderGuide=new sn_sc.OrderGuide("6690750f4f7b4200086eeed18110c761");	
	 * 	console.log(orderGuide.isIncludeItems());
	 * 
	 * @returns boolean Returns true if the Show Include Toggle check box is selected for the specified order guide. Else, returns false.
	 * 
	 */
	isIncludeItems() : boolean
	/**
	 * @description Specifies if the two-step checkout is enabled.
	 * @example
	 * //:
	 * var orderGuide=new sn_sc.OrderGuide("6690750f4f7b4200086eeed18110c761");	
	 * 	console.log(orderGuide.isTwoStep());
	 * 
	 * @returns boolean Returns true if the two-step checkout is enabled. Else returns false.
	 * 
	 */
	isTwoStep() : boolean
	/**
	 * @description Specifies if a separate cart (different from that for catalog items) usage is enabled for a two-step order guide.
	 * @example
	 * //:
	 * var orderGuide=new sn_sc.OrderGuide("6690750f4f7b4200086eeed18110c761");	
	 * 	console.log (orderGuide.isUseCustomCart());
	 * 
	 * @returns boolean Returns true if a separate cart usage is enabled for a two-step order guide. Else, returns false.
	 * 
	 */
	isUseCustomCart() : boolean
	/**
	 * @description Navigates to the catalog items of an order guide.
	 * @example
	 * //:
	 * var orderGuide=new sn_sc.OrderGuide.navigateFromMap(itemdetails);
	 * 
	 * @param itemDetails A JSON object with details of catalog items in the order guide.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	navigateFromMap(itemDetails: Map) : void
	}
declare namespace sn_sc {
	}
/**
	 * @description Provides utility methods to get or set work item skill data.
	 * The SkillDeterminationUtils API requires the Skill Determination (com.snc.skill\_determination) plugin and is provided within the sn\_skill\_rule namespace.
	 * 
	 */
	declare class SkillDeterminationUtils {
	/**
	 * @description Assigns an array of active skill objects to a work item.
	 * @example
	 * //The examples below create an Interaction record using the table name (interaction) and show how to assign skills to the interaction work item, creating a record in the Interaction Skills \[interaction\_m2m\_skill\] table.
	 * // Create an interaction record
	 * var now_GR = new GlideRecord('interaction');
	 * now_GR.insert();
	 * 
	 * var util = new sn_skill_rule.SkillDeterminationUtils();
	 * 
	 * // Get interaction skills interaction 
	 * // and specify if any are mandatory
	 * var result = util.determineWorkItemSkills(now_GR);
	 * 
	 * // Assign skills determined by result and 
	 * // assign them to the interaction work item
	 * util.assignSkillsToWorkItem(result, gr);
	 * 
	 * @example
	 * //Use case 2: Manually insert skills array. In this case, assign IT skills to the Interaction work item.
	 * var now_GR = new GlideRecord('interaction');
	 * now_GR.insert();
	 * 
	 * var util = new sn_skill_rule.SkillDeterminationUtils();
	 * 
	 * var skills = [{"skillSysId":"2eb1c2029f100200a3bc1471367fcfe4", "skillName":"IT", "mandatory":true, "skillLevelName":"", "skillLevelSysId":null}];
	 * 
	 * util.assignSkillsToWorkItem(skills, gr);
	 * 
	 * @param skills Array of active skill objects to be assigned.
	 * @param skill.skillName Name of the skill.
	 * @param skill.skillSysId Sys ID of the skill.
	 * @param skill.mandatory True if the skill is mandatory, false otherwise.
	 * @param skill.skillLevelName Optional skill level name.
	 * @param skill.skillLevelSysId Optional skill level Sys ID.
	 * @param gr GlideRecord of the work item on which to assign skills.
	 * 
	 * @returns None 
	 * 
	 */
	assignSkillsToWorkItem(skills: Array,skillskillName: string,skillskillSysId: string,skillmandatory: boolean,skillskillLevelName: string,skillskillLevelSysId: string,gr: GlideRecord) : None
	/**
	 * @description Gets skills for a specified work item, indicates if the skills are mandatory, and lists any skill levels.
	 * @example
	 * //The following script creates an interaction record, gets skills for the interaction work item, and indicates if the skills are mandatory.
	 * // Create an interaction record
	 * var now_GR = new GlideRecord('interaction');
	 * now_GR.insert();
	 * 
	 * var util = new sn_skill_rule.SkillDeterminationUtils();
	 * 
	 * var result = util.determineWorkItemSkills(now_GR);
	 * gs.info(JSON.stringify(result));
	 * 
	 * @param gr GlideRecord of a work item from any interaction or task table extension.
	 * 
	 * @returns Array One or more skill objects.  *   skillSysId: String. Sys ID of the skill from the Skills \[cmn\_skill\] table. *   skillName: String. Name of the skill. *   mandatory: Boolean. True if mandatory, false otherwise. *   skillLevelName: If skill exists, name of the skill level. *   skillLevelSysId: If skill exists, Sys ID of the skill level from the Skill Levels \[cmn\_skill\_level\] table.
	 * 
	 */
	determineWorkItemSkills(gr: GlideRecord) : Array
	/**
	 * @description Constructor to create an instance of SkillDeterminationUtils.
	 * @example
	 * //
	 * var util = new sn_skill_rule.SkillDeterminationUtils();
	 * 
	 */
	constructor() 
	}
declare namespace sn_skill_rule {
	}
/**
	 * @description The SMSPreferenceHandler API provides methods to manage SMS configurations.
	 * This API is implemented as the script include SMSPreferenceHandlerSNC and resides in the sn\_sms\_pref namespace. To use this API you must install the Notify plugin (com.snc.notify) which requires a separate subscription. You can activate this plugin if you have the admin role.
	 * 
	 */
	declare class SMSPreferenceHandlerScopedGlobal {
	/**
	 * @description Returns the preferences configuration record for the current telephony service provider.
	 * The method queries all preference configuration records from the SMS Preference Configuration \[sn\_sms\_pref\_configuration\] table for the current telephony service provider, sorts the results by the Order field (lowest to highest), and then returns the first record.
	 * 
	 * @example
	 * //
	 * var handler = new sn_sms_pref.SMSPreferenceHandler('TwilioDirect'); // Pass the provider name
	 * var config = handler.getConfig();
	 * 
	 * @returns GlideRecord Preference configuration record for the current telephony service provider. If no record exists, then null.
	 * 
	 */
	getConfig() : GlideRecord
	/**
	 * @description Instantiates the SMSPreferenceHandler script include object.
	 * @example
	 * //
	 * var handler = new sn_sms_pref.SMSPreferenceHandler('TwilioDirect'); // Pass the provider name
	 * var config = handler.getConfig();
	 * 
	 * @param provider Name of the telephony service provider.
	 * 
	 */
	constructor(provider: string) 
	}
declare namespace sn_sms_pref {
	}
/**
	 * @description Provides methods for managing response templates.
	 * Response templates are reusable messages that agents can copy to case or task forms. They provide quick and consistent messages to users and display standard chat response messages to requesters in Agent Chat. This API requires the Templated Responses plugin (com.sn\_templated\_snip), which is activated by default. This API is provided within the sn\_templated\_snip namespace.  	
 *   	
 * For additional information on response templates, see [Response templates](https://docs.servicenow.com/bundle/paris-servicenow-platform/page/product/human-resources/concept/response-templates-templated-snippets.html).
	 * 
	 */
	declare class ResponseTemplateScopedGlobal {
	/**
	 * @description Instantiates a new ResponseTemplate object.
	 * @example
	 * //
	 * new sn_templated_snip.ResponseTemplate().query("incident","ef4225a40a0a0b5700d0b8a790747812", "", 0, 0, true, ""); 
	 * 
	 */
	constructor() 
	/**
	 * @description Returns all response templates from a specified table that match the passed in query criteria.
	 * @example
	 * //This example shows how to query for response templates associated with the incident table.
	 * query("incident","ef4225a40a0a0b5700d0b8a790747812", "", 0, 0, false, "");
	 * 
	 * @example
	 * //Same query with an error response.
	 * query("incident","fe4225a40a0a0b5700d0b8a790747812", "", 0, 0, false, "");
	 * 
	 * @param tableName Name of the table to use to search the sn\_templated\_snip\_note\_template table to locate corresponding response templates. For example, incident or sn\_hr\_core\_case.
	 * @param recordId Sys ID of the record to use to render the variables in the response template.
	 * @param searchTerm Optional. Text to use to filter the list of matching response templates.  The method performs a CONTAINS search of this text on the name and body fields and a STARTS WITH search on the short name field. For example, if the search term is "crash", the method returns any response template that matches the query criteria and has crash in the name or body or the short name starts with crash.  Response templates with exact matches on short name appear first in the return results. All other returned response templates are sorted by name.  Default: Return all matching response templates.
	 * @param limit Optional. Maximum number of response templates to return.  Default: 50
	 * @param offset Optional. For pagination, the index at which to start the search.  Default: 0
	 * @param includeEvaluatedBody Optional. Flag that indicates whether to render the template variables.  Valid values:  *   false: Do not render the template variables. The response contains the message variables.          For example:          Please note that your case ${number} has been escalated to ${assignment\_group}.      *   true: Renders the template variables and returns evaluated\_response in the return results.          For example:          Please note that your case INC100001 has been escalated to Facilities.       Default: false
	 * @param errorFormat Optional. HTML formatting to use for errors.  For example:  "<span style='color:#ffff00'>${%s}</span>"  Default: "<span style='color:#ff0000'>${%s}</span>"
	 * @param opts Optional. Parameters to pass to the sn\_templated\_snip.response\_template extension point. The format and content of these parameters are dependent on the implementation of the extension point. For additional information on extension points, see [Using extension points to extend application functionality](https://docs.servicenow.com/bundle/newyork-application-development/page/build/applications/concept/extension-points.html).
	 * 
	 * @returns Object Array of all templates that match the specified search criteria. Response templates with exact matches on short name appear first in the return results. All other returned response templates are sorted by name.  Each node in the Array may contain the following parameters:  *   sys\_id: String. Unique identifier of the response template. *   name: String. Name of the response template. *   short\_name: String. Short name of the response template. *   body: HTML. Body of the response template. *   short\_name\_match: Boolean. Flag that indicates whether an exact match occurred on the short name of the response template. *   evaluated\_response: Array. Results of the template evaluation.     *   success: Boolean. Flag that indicates whether all variables rendered properly.     *   evaluated\_body: HTML. Rendered response template body.     *   error: Array. Entry for each evaluation error that occurred.         *   inAccessibleVariables: String. Variables in the response template body that could not be resolved.         *   unEvaluatedVariables: String. Variablesin the response template body that were not evaluated.         *   message: String. Error message.
	 * 
	 */
	query(tableName: string,recordId: string,searchTerm: string,limit: number,offset: number,includeEvaluatedBody: boolean,errorFormat: string,opts: Object) : Object
	/**
	 * @description Renders the HTML body of a specified response template.
	 * During rendering, all variables are resolved using the information from the specified table and record. If variables cannot be resolved, or any other problem occurs during rendering, the method returns an error message in the results.
	 * 
	 * @example
	 * //This code example shows how to request a rendered response template for the incident table.
	 * render("5fc1d65993003300a9bc1d1e867ffb9c","incident","ef4225a40a0a0b5700d0b8a790747812", "")
	 * 
	 * @example
	 * //Same render request but returning an error response.
	 * render("5fc1d65993003300a9bc1d1e867ffb9c","incident","ef4225a40a0a0b5700d0b8a790747812", "")
	 * 
	 * @param templateId Sys ID of the response template to render.
	 * @param tableName Name of the table to use when rendering the variables on the response template.
	 * @param recordId Sys ID of the record to use when rendering the variables on the response template. This record must be in the table specified by tableName.
	 * @param errorFormat Optional. HTML formatting to use for errors.  For example:  "<span style='color:#ffff00'>${%s}</span>"  Default: "<span style='color:#ff0000'>${%s}</span>"
	 * @param opts Optional. Parameters to pass to the sn\_templated\_snip.response\_template extension point. The format and content of these parameters are dependent on the implementation of the extension point. For additional information on extension points, see [Using extension points to extend application functionality](https://docs.servicenow.com/bundle/newyork-application-development/page/build/applications/concept/extension-points.html).
	 * 
	 * @returns Object Results of the render.  *   success: Flag that indicates whether the render was successful. *   evaluated\_body: String. For success, rendered response template body. For error, response template body which includes both rendered and non-renderable variables. *   error: Object. Error message if render was unsuccessful.     *   unEvaluatedVariables: Variables that could not be rendered.     *   message: Error message.
	 * 
	 */
	render(templateId: string,tableName: string,recordId: string,errorFormat: string,opts: Object) : Object
	}
declare namespace sn_templated_snip {
	}
/**
	 * @description Parses and transforms structured JSON or XML source content into structured key/value pair output, using a defined set of rules.
	 * The scripted Transformer API works along with the TransformerDefinition and TransformerRuleList APIs. Together, these APIs transform XML nodes or any entity in a structured JSON document into an output of name-value pairs. Supported JSON entities including objects and elements within an array, such as strings, numbers, and other arrays.  	
 *   	
 * 	
 * *   The TransformerRuleList API enables you to create transformation rule lists that define what data in the source document to include in the output and how to transform the source data.	
 *     	
 * *   The TransformerDefinition API associates a transformation rule list with a JSON/XML record path to define reusable transform definition objects. You can use a transform definition object to transform one or more source documents.	
 *     	
 * *   The Transformer API performs the actual data transformation, one data entity at a time, using the specified transformation rule list to create the desired output data.	
 *     	
 * 	
 *   	
 *   	
 * You can use the Transformer class in both scoped and global server scripts. When using this class, use the sn\_tfrm namespace identifier. Before this API is available in an instance, you must activate the Transformation Service plugin (com.glide.transform).  	
 *   	
 * The following example illustrates how to use the TransformerRuleList API to define the transformation rules, the TransformerDefinition API to define the transformation criteria, and the Transformer API to actually perform the transformation.  	
 *   	
 * This code example retrieves an external JSON-based stock details document, creates rules for transforming that data into a tabular table, and then transforms the source document, one row at a time. The following is a snippet of the JSON source document being transformed:  	
 *   	
 * 	
 *     {	
 *       "NOW": {	
 *         "quote": {	
 *           "symbol": "NOW",	
 *           "companyName": "ServiceNow Inc.",	
 *           "primaryExchange": "New York Stock Exchange",	
 *           "sector": "Technology",	
 *           "open": 166.78,	
 *           "openTime": 1522935000556,	
 *           "close": 165.77,	
 *           "changePercent": 0.00656,	
 *            ...	
 *          },	
 *      ...}	
 * 	
 *   	
 *   	
 * 	
 *     var stockAPI = new sn_ws.RESTMessageV2('Stock Details', 'Default GET'); 	
 *     var response = stockAPI.execute(); 	
 *     var responseBody = response.getBody(); // obtain the source JSON document	
 *     	
 *     	
 *     	
 *     var transformerRuleList = new sn_tfrm.TransformerRuleList() // instantiate the rule list object	
 *       .fromJSON() // indicate that the source document is JSON	
 *       .addRule('ticker', '$.quote.symbol') // add a rule to copy the value in the "symbol" field of the source document to the ticker field in the output document (no changes)	
 *       .addRule('change_percentage', '$.quote.changePercent') // copy the "changePercent" field from source into the change_percentage field of output document	
 *       .thenMultiply('100') // multiply the change_percentage value by 100	
 *       .thenRoundDown('0') // addthen round it down to a whole number 	
 *       .addRule('close_price', '$.quote.close') // copy the "close" field to the close_price field in the 21=-[';output	
 *       .thenAdaptCurrency('USD', false) // attach the US dollar code to the close_price field, but do not display the symbol	
 *       .addRule('summary') // add a blank "summary" field to the output (no corresponding source field)	
 *       .thenConcat('Shares of ') // in the summary field concatenate the string "Shares of "	
 *       .thenConcatSymbol('ticker') // then concatenate the "ticker" field from the source document	
 *       .thenConcat(' closed at ') // then concatenate the string " closed at "	
 *       .thenConcatSymbol('close_price'); // then concatenate the "close_price" field from the source document	
 *     	
 *     // Create a transformer definition that associates the rule list to use and the record path of the set of records in the source document to transform.  	
 *     var path = '$.*'; 	
 *     var transformerDefinition = new sn_tfrm.TransformerDefinition(transformerRuleList, path);	
 *      	
 *     // Instantiate the transformer object.	
 *     var transformer = new sn_tfrm.Transformer(transformerDefinition, responseBody); 	
 *     	
 *     // Transform the source data, one row at a time, until all rows are processed.	
 *     var results = []; 	
 *     while (transformer.transform()) { 	
 *       results.push(transformer.getRow());	
 *     } 	
 * 	
 * Output:	
 * 	
 *      {ticker: "Now", change_percentage: "0", close_price: "165.77 USD", summary: "Shares of Now closed at 165.77" }
	 * 
	 */
	declare class TransformerScopedGlobal {
	/**
	 * @description Returns the row resulting from the last transformation (or null if no row exists).
	 * @example
	 * //
	 * var results = []; 
	 * while (transformer.transform()) { 
	 *   results.push(transformer.getRow());
	 * 
	 * 
	 * @returns Object Object containing one transformed row/node of data.
	 * 
	 */
	getRow() : Object
	/**
	 * @description Transforms the next available row/node in the source document.
	 * @example
	 * //
	 * var results = []; 
	 * while (transformer.transform()) { 
	 *   results.push(transformer.getRow());
	 * 
	 * 
	 * @returns boolean Flag that indicates whether there is a valid next row to transform.  *   true: Valid next row *   false: No additional rows
	 * 
	 */
	transform() : boolean
	/**
	 * @description Instantiates a Transformer object (constructor).
	 * @example
	 * //
	 * var stockAPI = new sn_ws.RESTMessageV2('Stock Details', 'Default GET'); 
	 * var response = stockAPI.execute(); 
	 * var responseBody = response.getBody(); 
	 * 
	 * var transformerRuleList = new sn_tfrm.TransformerRuleList()
	 *   .fromJSON()
	 *   .addRule('ticker', 'quote.symbol') 
	 *   .addRule('change_percentage', 'quote.change') 
	 *   .thenMultiply('100') 
	 *   .thenRoundDown('0') 
	 *   .addRule('close_price', 'quote.close') 
	 *   .thenAdaptCurrency('USD', false) 
	 *   .addRule('summary') 
	 *   .thenConcat('Shares of ') 
	 *   .thenConcatSymbol('ticker') 
	 *   .thenConcat(' closed at ') 
	 *   .thenConcatSymbol('close') 
	 * 
	 *  
	 * var path = '$.*'; 
	 * var transformerDefinition = new sn_tfrm.TransformerDefinition(transformerRuleList, path); 
	 * var transformer = new sn_tfrm.Transformer(transformerDefinition, responseBody); 
	 * 
	 * var results = []; 
	 * while (transformer.transform()) { 
	 *   results.push(transformer.getRow());
	 * }
	 * 
	 * @param transformerDefinition Object that describes the content transformation; includes rule list and JSONPath/XPath record path.  Use the TransformerRuleList() and TransformerDefinition() APIs to generate this object.
	 * @param document Source document to translate.
	 * 
	 */
	constructor(transformerDefinition: Object,document: string) 
	}
/**
	 * @description Provides methods to instantiate and manage the TransformerDefinition object, which associates a transformation rules list and a record path.
	 * The TransformerDefinition API works along with the Transformer and TransformerRuleList APIs. Together, these APIs transform XML nodes or any entity in a structured JSON document into an output of name-value pairs. Supported JSON entities including objects and elements within an array, such as strings, numbers, and other arrays.  	
 *   	
 * 	
 * *   The TransformerRuleList API enables you to create transformation rule lists that define what data in the source document to include in the output and how to transform the source data.	
 *     	
 * *   The TransformerDefinition API associates a transformation rule list with a JSON/XML record path to define reusable transform definition objects. You can use a transform definition object to transform one or more source documents.	
 *     	
 * 	
 *   	
 *   	
 * In addition, this object provides methods that enable you to obtain the record path of the TransformerDefinition object. It can also validate whether the definition has a valid TransformerRuleList associated with it.  	
 *   	
 * The Transformer API performs the actual data transformation, one data entity at a time, using the specified transformation rule list to create the desired output data.  	
 *   	
 * You can use the TransformerDefinition class in both scoped and global server scripts. When using this class, use the sn\_tfrm namespace identifier. Also, before this API is available in an instance, you must activate the Transformation Service plugin (com.glide.transform).
	 * 
	 */
	declare class TransformerDefinitionScopedGlobal {
	/**
	 * @description If set when the TransformerDefinition object was instantiated, returns the record path for the source data file associated with the TransformerDefinition object.
	 * A record path (JSONPath for JSON, XPath for XML) identifies the container (parent) of nodes to parse as records in the source document.
	 * 
	 * For JSON documents, these nodes can be any object, array, or JSON primitive (string, number, boolean). For XML documents, these nodes are the child elements of the container.
	 * 
	 * If recordPath is unspecified, the entire document is inferred as a single record. For JSON documents, if the top node is an array and recordPath is unspecified, then the top array is the record's container, and each of its entries is a record.
	 * 
	 * @example
	 * //
	 * var path = '$.records'; 
	 * var transformerDefinition = new sn_tfrm.TransformerDefinition(transformerRuleList, recordPath); 
	 * var transformer = new sn_tfrm.Transformer(transformerDefinition, responseBody);  
	 * .
	 * .
	 * .
	 * 
	 * var recordPath = transformerDefinition.recordfPath();
	 * 
	 * var results = []; 
	 * while (transformer.transform()) { 
	 *   results.push(transformer.getRow());
	 * }
	 * 
	 * @returns string If set, the record path associated with the transformer definition. If not set, returns null.
	 * 
	 */
	recordPath() : string
	/**
	 * @description Instantiates a TransformerDefinition object.
	 * @example
	 * //
	 * var stockAPI = new sn_ws.RESTMessageV2('Stock Details', 'Default GET'); 
	 * var response = stockAPI.execute(); 
	 * var responseBody = response.getBody(); 
	 * 
	 * var transformerRuleList = new sn_tfrm.TransformerRuleList()
	 *   .fromJSON()
	 *   .addSymbol('ticker', 'quote.symbol') 
	 *   .addSymbol('change_percentage', 'quote.change_change') 
	 *   .thenMultiply('100') 
	 *   .thenRoundDown('0') 
	 *   .addSymbol('close_price', 'quote.close') 
	 *   .thenAdaptCurrency('USD', false) 
	 *   .addSymbol('summary') 
	 *   .thenConcat('Shares of ') 
	 *   .thenConcatSymbol('ticker') 
	 *   .thenConcat(' closed at ') 
	 *   .thenConcatSymbol('close'); 
	 * 
	 *  
	 * var path = '$.*'; // Transform all objects in the JSON document
	 * var transformerDefinition = new sn_tfrm.TransformerDefinition(transformerRuleList, recordPath); 
	 * var transformer = new sn_tfrm.Transformer(transformerDefinition, responseBody); 
	 * 
	 * var results = []; 
	 * while (transformer.transform()) { 
	 *   results.push(transformer.getRow());
	 * }
	 * 
	 * @param transformerRuleList TransformerRuleList to associate with this transformer definition.
	 * @param recordPath Optional. The path (JSONPath for JSON, XPath for XML) that identifies the container (parent) of nodes to parse as records in the source document.  For JSON documents, these nodes can be any object, array, or JSON primitive (string, number, boolean). For XML documents, these nodes are the child elements of the container.  If recordPath is unspecified, the entire document is inferred as a single record. For JSON documents, if the top node is an array and recordPath is unspecified, then the top array is the record's container, and each of its entries is a record.
	 * 
	 */
	constructor(transformerRuleList: Object,recordPath: string) 
	/**
	 * @description Validates whether a valid TransformerRuleList is associated with the TransformerDefintion object.
	 * @example
	 * //
	 * var transformerDefinition = new sn_tfrm.TransformerDefinition(transformerRuleList, recordPath);
	 * var transformer = new sn_tfrm.Transformer(transformerDefinition, responseBody); 
	 * .
	 * .
	 * .
	 * 
	 * if (transformerDefinition.validate()) {
	 * 
	 *   var results = []; 
	 *   while (transformer.transform()) { 
	 *     results.push(transformer.getRow());
	 *   }
	 * }
	 * 
	 * @returns boolean Flag that indicates whether a valid TransformerRuleList is associated with the specified TransformerDefintion object.  Valid values:  *   true: Valid TransformerRuleList associated *   false: Invalid or no TransformerRulList associated
	 * 
	 */
	validate() : boolean
	}
/**
	 * @description Enables you to create a list of rules for transforming various types of JSON and XML data into name-value pair output.
	 * The TransformerRuleList API works along with the Transformer and TransformerDefinition APIs. Together, these APIs transform XML nodes or any entity in a structured JSON document into an output of name-value pairs. Supported JSON entities including objects and elements within an array, such as strings, numbers, and other arrays.  	
 *   	
 * 	
 * *   The TransformerRuleList API enables you to create transformation rule lists that define what data in the source document to include in the output and how to transform the source data.	
 *     	
 * *   The TransformerDefinition API associates a transformation rule list with a JSON/XML record path to define reusable transform definition objects. You can use a transform definition object to transform one or more source documents.	
 *     	
 * *   The Transformer API performs the actual data transformation, one data entity at a time, using the specified transformation rule list to create the desired output data.	
 *     	
 * 	
 *   	
 *   	
 * When you instantiate the TransformRuleList object, you must define whether it describes a JSON or XML source document using the .fromJSON() or .fromXML() methods. For example:  	
 *   	
 * var trl = sn\_tfrm.TransformerRuleList().fromJSON(); or var trl = sn\_tfrm.TransformerRuleList().fromXML();  	
 *   	
 * Then use the addRule() method to define a transformation rule for each element in the source document that you want to include as a name-value pair in the output.  	
 *   	
 * Use "adapter methods", such as setName() or thenAdd(), to define how to manipulate data elements when the transformation is performed. Adapter methods work along with the addRule() method. They define adaptations to apply to the output field defined by the addRule() method such as formatting, rounding, and applying patterns. You can apply one or more adapter methods to each data transformation. Adapter methods enable you to do things such as:	
 * 	
 * *   Concatenate text.	
 * *   Perform mathematical functions, such as add, subtract, divide, and multiply.	
 * *   Round values up or down (round up/down, ceiling/floor).	
 * *   Define whether to use the minimum or maximum value when comparing a source data element to a specified value.	
 * *   Apply a currency code.	
 * *   Convert between different units of measure.	
 * *   Format data elements.	
 * *   Apply patterns.	
 * *   Replace specified data elements with a specified value.	
 * *   Split and rearrange strings.	
 * 	
 *   	
 *   	
 * You can use the TransformerRuleList class in both scoped and global server scripts. When using this class, use the sn\_tfrm namespace identifier. Also, before this API is available in an instance, you must activate the Transformation Service plugin (com.glide.transform).
	 * 
	 */
	declare class TransformerRuleListScopedGlobal {
	/**
	 * @description Creates an entry in the associated transformation rules list which defines a field to create in the output.
	 * You can create rules for any element in a source document. For example, .addRule('ticker', '$.quote.symbol') creates the field "ticker" in the output and copies over the value in quote.symbol of the source.
	 * 
	 * Once you define a rule using addRule(), you then use adaptor methods, such as thenAdd(), thenReplace(), and thenFloor() to manipulate the rule's output data. You can define as many adaptor methods as needed for a single rule. All adapter methods directly after an addRule() call, until the next addRule() call, apply to that rule. Adapter methods are cumulative with the result of all adapter methods being the final value saved in the output field.
	 * 
	 * For example, in the following code snippet, thenMultiply() and thenRoundDown() apply to addRule('change\_percentage', '$.quote.changePercent'); addRule('close\_price', '$.quote.close') starts a new rule. If the value in $.quote.changePercent is .011, then the final output value is "1" ( .011 \* 100 rounded down to the ones position).
	 * 
	 *   .addRule('change\_percentage', '$.quote.changePercent') 
	 *   .thenMultiply('100') 
	 *   .thenRoundDown('0') 
	 *   .addRule('close\_price', '$.quote.close') 
	 * 
	 * The addRule() method also supports the parameter summary; .addRule('summary'). This implementation creates the name field "summary:" in the output, but does not correlate it to any field in the source. You can then use the adaptor methods thenConcat() and thenConcatSymbol() to modify the contents of the summary field.
	 * 
	 * @example
	 * //
	 * var transformerRuleList = new sn_tfrm.TransformerRuleList()
	 *   .fromJSON()
	 *   .setName('Stock Report 05022019 JSON')
	 *   .addRule('ticker', '$.quote.symbol') 
	 *   .addRule('change_percentage', '$.quote.changePercent') 
	 *   .thenMultiply('100') 
	 *   .thenRoundDown('0') 
	 *   .addRule('close_price', '$.quote.close') 
	 *   .thenAdaptCurrency('USD', false) 
	 *   .addRule('summary') 
	 *   .thenConcat('Shares of ') 
	 *   .thenConcatSymbol('ticker') 
	 *   .thenConcat(' closed at ') 
	 *   .thenConcatSymbol('close_price'); 
	 * 
	 * 
	 * @param rule Name of the element in the destination output.
	 * @param path Optional. JSONPath or XPath to the data element in the source document.  The adapter methods thenConcat() and thenConcatSymbol() do not require you to define this parameter if no other adapter methods are defined for the rule. All other adapter methods require this parameter.
	 * 
	 * @returns Object Current TransformerRuleList object.
	 * 
	 */
	addRule(rule: string,path: string) : Object
	/**
	 * @description Defines a name for the associated TransformerRuleList object for logging purposes.
	 * @example
	 * //
	 * var transformerRuleList = new sn_tfrm.TransformerRuleList()
	 *   .fromJSON()
	 *   .setName('Stock Report 05022019 JSON')
	 *   .addRule('ticker', '$.quote.symbol') 
	 *   .addRule('change_percentage', '$.quote.changePercent') 
	 *   .thenMultiply('100') 
	 *   .thenRoundDown('0') 
	 *   .addRule('close_price', '$.quote.close') 
	 *   .thenAdaptCurrency('USD', false) 
	 *   .addRule('summary') 
	 *   .thenConcat('Shares of ') 
	 *   .thenConcatSymbol('ticker') 
	 *   .thenConcat(' closed at ') 
	 *   .thenConcatSymbol('close_price'); 
	 * 
	 * 
	 * @param name Name to use to identify the associated TransformerRuleList object.  Although the API does not force this name to be unique, it is helpful if they are unique within an instance.
	 * 
	 * @returns Object Current TransformerRuleList object.
	 * 
	 */
	setName(name: string) : Object
	/**
	 * @description Adds an adapter to the current rule that ties the specified currency code to the output field defined in the associated addRule() call.
	 * Note: This is an adapter method and cannot be used on its own. Adapter methods work in conjunction with theaddRule() method. They define adaptations to apply to the output field defined by the addRule() method such as formatting, rounding, and applying patterns.
	 * 
	 * @example
	 * //
	 * var transformerRuleList = new sn_tfrm.TransformerRuleList()
	 *   .fromJSON()
	 *   .setName('Stock Report 05022019 JSON')
	 *   .addRule('ticker', '$.quote.symbol') 
	 *   .addRule('change_percentage', '$.quote.changePercent') 
	 *   .thenMultiply('100') 
	 *   .thenRoundDown('0') 
	 *   .addRule('close_price', '$.quote.close') 
	 *   .thenAdaptCurrency('USD', false) 
	 *   .addRule('summary') 
	 *   .thenConcat('Shares of ') 
	 *   .thenConcatSymbol('ticker') 
	 *   .thenConcat(' closed at ') 
	 *   .thenConcatSymbol('close_price'); 
	 * 
	 * 
	 * @param currencyCode Currency code to tie to the destination data element, such as USD, EUR, and GBP.
	 * @param outputNumericCurrencyValue Optional. Flag that indicates whether to display the currency code.  Valid values:  *   true: do not display the country code; numeric value only *   false: display the country code  Default: false
	 * 
	 * @returns Object Current TransformerRuleList object.
	 * 
	 */
	thenAdaptCurrency(currencyCode: string,outputNumericCurrencyValue: boolean) : Object
	/**
	 * @description Adds an adapter to the current rule that converts the source field from one unit of measure to another, such as from minutes to seconds or weeks to days.
	 * Note: This is an adapter method and cannot be used on its own. Adapter methods work in conjunction with theaddRule() method. They define adaptations to apply to the output field defined by the addRule() method such as formatting, rounding, and applying patterns.
	 * 
	 * @example
	 * //
	 * var transformerRuleList = new sn_tfrm.TransformerRuleList()
	 *   .fromJSON()
	 *   .setName('Stock Report 05022019 JSON')
	 *   .addRule('ticker', '$.quote.symbol') 
	 *   .addRule('change_percentage', '$.quote.changePercent') 
	 *   .thenMultiply('100') 
	 *   .thenRoundDown('0') 
	 *   .addRule('close_price', '$.quote.close') 
	 *   .thenAdaptCurrency('USD', false) 
	 *   .addRule('daily', '$.quote.weekly') 
	 *   .thenAdaptDuration('WEEK', 'DAY'); 
	 * 
	 * 
	 * @param inputDuration Current unit of measure of the source field.  Valid values:  *   NANOSECOND *   MICROSECOND *   MILLISECOND *   SECOND *   MINUTE *   HOUR *   DAY *   WEEK
	 * @param outputDuration Unit of measure to convert the source field to in the output.  Valid values:  *   NANOSECOND *   MICROSECOND *   MILLISECOND *   SECOND *   MINUTE *   HOUR *   DAY *   WEEK
	 * 
	 * @returns Object Current TransformerRuleList object.
	 * 
	 */
	thenAdaptDuration(inputDuration: string,outputDuration: string) : Object
	/**
	 * @description Adds an adapter to the current rule that adds the passed in value to the source field.
	 * Note: This is an adapter method and cannot be used on its own. Adapter methods work in conjunction with theaddRule() method. They define adaptations to apply to the output field defined by the addRule() method such as formatting, rounding, and applying patterns.
	 * 
	 * @example
	 * //
	 * var transformerRuleList = new sn_tfrm.TransformerRuleList.fromJSON()
	 *   .setName('Stock Report 05182019 JSON')
	 *   .addSymbol('ticker', '$.symbol') 
	 *   .addSymbol('change_percentage', '$.changePercent') 
	 *   .thenMultiply('100') 
	 *   .thenRoundDown('0') 
	 *   .addSymbol('trade_price', '$.current_price')
	 *   .thenAdaptCurrency('USD', false) 
	 *   .addMultiply('$.trade_quantity')
	 *   .thenAdd('4.5'); 
	 * 
	 * 
	 * @param operand Value to add to the source field.
	 * 
	 * @returns Object Current TransformerRuleList object.
	 * 
	 */
	thenAdd(operand: number) : Object
	/**
	 * @description Adds an adapter to the current rule that searches the associated source field for a list of strings and replaces them in the output with the specified replacement values.
	 * Note: This is an adapter method and cannot be used on its own. Adapter methods work in conjunction with theaddRule() method. They define adaptations to apply to the output field defined by the addRule() method such as formatting, rounding, and applying patterns.
	 * 
	 * @example
	 * //In this example, the thenApplyMap() call searches the source text in the company\_info field for Inc. and St. and replaces them with Incorporated and Street in the company\_info field in the output.
	 * var transformerRuleList = new sn_tfrm.TransformerRuleList()
	 *   .fromJSON()
	 *   .setName('Stock Report 05022019 JSON')
	 *   .addRule('ticker', '$.quote.symbol') 
	 *   .addRule('change_percentage', '$.quote.changePercent') 
	 *   .thenMultiply('100') 
	 *   .thenRoundDown('0') 
	 *   .addRule('close_price', '$.quote.close') 
	 *   .thenAdaptCurrency('USD', false) 
	 *   .addRule('company_info', '$.quote.company_info') 
	 *   .thenApplyMap({'Inc.': 'Incorporated', 'St.': 'Street'});
	 * 
	 * 
	 * @param map Name/value pairs.  *   name: text to locate in the source data element *   value: text to replace it with in the output
	 * 
	 * @returns Object Current TransformerRuleList object.
	 * 
	 */
	thenApplyMap(map: Object) : Object
	/**
	 * @description Adds an adapter to the current rule that matches a specified regex pattern to content in the source field and then replaces/reformats that content with a second regex pattern and stores that value in the output.
	 * Note: This is an adapter method and cannot be used on its own. Adapter methods work in conjunction with theaddRule() method. They define adaptations to apply to the output field defined by the addRule() method such as formatting, rounding, and applying patterns.
	 * 
	 * @example
	 * //In this example, any company name that ends with "Inc." is transformed to "Incorporated", such as Company Inc. to Company Incorporated.
	 * var transformerRuleList = new sn_tfrm.TransformerRuleList()
	 *   .fromJSON()
	 *   .setName('Stock Report 05022019 JSON')
	 *   .addRule('ticker', '$.quote.symbol') 
	 *   .addRule('change_percentage', '$.quote.changePercent') 
	 *   .thenMultiply('100') 
	 *   .thenRoundDown('0') 
	 *   .addRule('close_price', '$.quote.close') 
	 *   .thenAdaptCurrency('USD', false) 
	 *   .addRule('company', '$.quote.company') 
	 *   .thenApplyPattern('(.+)(\\w{3}\\.)', '$1Incorporated');
	 * 
	 * 
	 * @param matchPattern Regex pattern to use to locate the text to replace/reformat.
	 * @param outputPattern Regex pattern to use to update the located text.
	 * 
	 * @returns Object Current TransformerRuleList object.
	 * 
	 */
	thenApplyPattern(matchPattern: string,outputPattern: string) : Object
	/**
	 * @description Adds an action to the current rule to round the source field up at the decimal position specified by the passed in value.
	 * Unlike straight rounding where the number is rounded based on the value of the digit in the specified decimal position (0-4 round down, 5-9 round up), ceiling always rounds up. For example, the ceiling value for 2.156 and 2.152 is always 2.16 for the passed in decimal position of 2; whereas for straight rounding the values would be 2.16 and 2.15 respectively. For negative numbers, the ceiling operation makes the number more positive, as in the ceiling value of -2.156 is -2.15; whereas the same number rounded up makes the value more negative, -2.16.
	 * 
	 * Note: This is an adapter method and cannot be used on its own. Adapter methods work in conjunction with theaddRule() method. They define adaptations to apply to the output field defined by the addRule() method such as formatting, rounding, and applying patterns.
	 * 
	 * @example
	 * //
	 * var transformerRuleList = new sn_tfrm.TransformerRuleList()
	 *   .fromJSON()
	 *   .setName('Mortgage Rates 05022019 JSON')
	 *   .addRule('interest_rate', '$.quote.interest_rate') 
	 *   .thenCeiling('2') // Always round the interest rate up to the hundredths place 
	 *   .addRule('monthly_payment', '$.quote.total_loan_amount') 
	 *   .thenDivideBy('180'); 
	 * 
	 * 
	 * @param operand Decimal position to the right of the decimal point at which to round the number up (apply ceiling).  For example, if this value is 2 and the source data element is 6.421, the resulting value is 6.43.
	 * 
	 * @returns Object Current TransformerRuleList object.
	 * 
	 */
	thenCeiling(operand: number) : Object
	/**
	 * @description Adds an adapter to the current rule that concatenates the passed in string to the output field.
	 * Unlike other adapter methods, this method does not have to be applied to a source field. You can use this method to create completely new data strings in the output.
	 * 
	 * Note: This is an adapter method and cannot be used on its own. Adapter methods work in conjunction with theaddRule() method. They define adaptations to apply to the output field defined by the addRule() method such as formatting, rounding, and applying patterns.
	 * 
	 * @example
	 * //
	 * var transformerRuleList = new sn_tfrm.TransformerRuleList()
	 *   .fromJSON()
	 *   .setName('Stock Report 05022019 JSON')
	 *   .addRule('ticker', '$.quote.symbol') 
	 *   .addRule('change_percentage', '$.quote.changePercent') 
	 *   .thenMultiply('100') 
	 *   .thenRoundDown('0') 
	 *   .addRule('close_price', '$.quote.close') 
	 *   .thenAdaptCurrency('USD', false) 
	 *   .addRule('summary') 
	 *   .thenConcat('Shares of ') 
	 *   .thenConcatSymbol('ticker') 
	 *   .thenConcat(' closed at ') 
	 *   .thenConcatSymbol('close_price'); 
	 * 
	 * 
	 * @param value Text to concatenate to the end of the current data element.
	 * 
	 * @returns Object Current TransformerRuleList object.
	 * 
	 */
	thenConcat(value: string) : Object
	/**
	 * @description Adds an adapter to the current rule that concatenates the value of a field previously defined in the rules list to the current output field.
	 * Note: This is an adapter method and cannot be used on its own. Adapter methods work in conjunction with theaddRule() method. They define adaptations to apply to the output field defined by the addRule() method such as formatting, rounding, and applying patterns.
	 * 
	 * @example
	 * //
	 * var transformerRuleList = new sn_tfrm.TransformerRuleList()
	 *   .fromJSON()
	 *   .setName('Stock Report 05022019 JSON')
	 *   .addRule('ticker', '$.quote.symbol') 
	 *   .addRule('change_percentage', '$.quote.changePercent') 
	 *   .thenMultiply('100') 
	 *   .thenRoundDown('0') 
	 *   .addRule('close_price', '$.quote.close') 
	 *   .thenAdaptCurrency('USD', false) 
	 *   .addRule('summary') 
	 *   .thenConcat('Shares of ') 
	 *   .thenConcatSymbol('ticker') 
	 *   .thenConcat(' closed at ') 
	 *   .thenConcatSymbol('close_price'); 
	 * 
	 * 
	 * @param symbol Name of the rules list element to append to the output field.
	 * 
	 * @returns Object Current TransformerRuleList object.
	 * 
	 */
	thenConcatSymbol(symbol: string) : Object
	/**
	 * @description Adds an adapter to the current rule that divides the source field by the passed in value.
	 * Note: This is an adapter method and cannot be used on its own. Adapter methods work in conjunction with theaddRule() method. They define adaptations to apply to the output field defined by the addRule() method such as formatting, rounding, and applying patterns.
	 * 
	 * @example
	 * //
	 * var transformerRuleList = new sn_tfrm.TransformerRuleList()
	 *   .fromJSON()
	 *   .setName('Stock Report 05022019 JSON')
	 *   .addRule('ticker', '$.quote.symbol') 
	 *   .addRule('change_percentage', '$.quote.changePercent') 
	 *   .thenMultiply('100') 
	 *   .thenRoundDown('0') 
	 *   .addRule('dividend_per_share', '$.quote.total_dividend') 
	 *   .thenDivideBy('$.quote.total_shares'); 
	 * 
	 * 
	 * @param operand Value by which to divide the source field.
	 * 
	 * @returns Object Current TransformerRuleList object.
	 * 
	 */
	thenDivideBy(operand: number) : Object
	/**
	 * @description Adds an adapter to the current rule that divides the passed in value by the source field.
	 * Note: This is an adapter method and cannot be used on its own. Adapter methods work in conjunction with theaddRule() method. They define adaptations to apply to the output field defined by the addRule() method such as formatting, rounding, and applying patterns.
	 * 
	 * @example
	 * //
	 * var transformerRuleList = new sn_tfrm.TransformerRuleList()
	 *   .fromJSON()
	 *   .setName('Stock Report 05022019 JSON')
	 *   .addRule('ticker', '$.quote.symbol') 
	 *   .addRule('change_percentage', '$.quote.changePercent') 
	 *   .thenMultiply('100') 
	 *   .thenRoundDown('0') 
	 *   .addRule('dividend_per_share', '$.quote.total_shares') 
	 *   .thenDivideInto('$.quote.total_dividends'); 
	 * 
	 * 
	 * @param operand Value into which to divide the source field.
	 * 
	 * @returns Object Current TransformerRuleList object.
	 * 
	 */
	thenDivideInto(operand: number) : Object
	/**
	 * @description Adds an adapter to the current rule that rounds the source field down at the decimal position specified by the passed in value and stores it in the output.
	 * Unlike straight rounding where the number is rounded based on the value of the digit in the specified decimal position (0-4 round down, 5-9 round up), floor always rounds down. For example, the floor value for 2.156 and 2.152 is always 2.15 for the passed in decimal position of 2; whereas for straight rounding the values would be 2.16 and 2.15 respectively. For negative numbers, the floor operation makes the number more negative, as in the floor value of -2.156 is -2.16; whereas the same number rounded down makes the value more positive, -2.15.
	 * 
	 * Note: This is an adapter method and cannot be used on its own. Adapter methods work in conjunction with theaddRule() method. They define adaptations to apply to the output field defined by the addRule() method such as formatting, rounding, and applying patterns.
	 * 
	 * @example
	 * //
	 * var transformerRuleList = new sn_tfrm.TransformerRuleList()
	 *   .fromJSON()
	 *   .setName('Mortgage Rates 05022019 JSON')
	 *   .addRule('interest_rate', '$.quote.interest_rate') 
	 *   .thenFloor('2') // Always round the interest rate down to the hundreths place 
	 *   .addRule('monthly_payment', '$.quote.total_loan_amount') 
	 *   .thenDivideBy('180'); 
	 * 
	 * 
	 * @param operand Decimal position to the right of the decimal point at which to round the number down (apply floor).  For example, if this value is 2 and the source data element is 6.427, the resulting value is 6.42.
	 * 
	 * @returns Object Current TransformerRuleList object.
	 * 
	 */
	thenFloor(operand: number) : Object
	/**
	 * @description Adds an adapter to the current rule that reformats the content in the source field that matches the specified match pattern, with the specified output pattern.
	 * Note: This is an adapter method and cannot be used on its own. Adapter methods work in conjunction with theaddRule() method. They define adaptations to apply to the output field defined by the addRule() method such as formatting, rounding, and applying patterns.
	 * 
	 * @example
	 * //This example reformats the quote date from YYYY/MM/DD to YYYY MM-DD.
	 * var transformerRuleList = new sn_tfrm.TransformerRuleList()
	 *   .fromJSON()
	 *   .setName('Stock Report 05022019 JSON')
	 *   .addRule('ticker', '$.quote.symbol') 
	 *   .addRule('change_percentage', '$.quote.changePercent') 
	 *   .thenMultiply('100') 
	 *   .thenRoundDown('0') 
	 *   .addRule('close_price', '$.quote.close') 
	 *   .thenAdaptCurrency('USD', false) 
	 *   .addRule('date', '$.quote.date') 
	 *   .thenFormat('####/##/##', '#### ##-##'); 
	 * 
	 * 
	 * @param matchPattern Pattern to match against the source field.  Valid values:  *   @: any character *   #: decimal digit *   \\: literal escape (\\@ for the @ symbol)
	 * @param outputPattern Pattern to replace the content with in the output.  Valid values:  *   @: any character *   #: decimal digit *   \\: literal escape (\\@ for the @ symbol)
	 * 
	 * @returns Object Current TransformerRuleList object.
	 * 
	 */
	thenFormat(matchPattern: string,outputPattern: string) : Object
	/**
	 * @description Adds an adapter to the current rule that compares the passed in value against the source field and copies the greater of the two values to the output field.
	 * Note: This is an adapter method and cannot be used on its own. Adapter methods work in conjunction with theaddRule() method. They define adaptations to apply to the output field defined by the addRule() method such as formatting, rounding, and applying patterns.
	 * 
	 * @example
	 * //
	 * var transformerRuleList = new sn_tfrm.TransformerRuleList()
	 *   .fromJSON()
	 *   .setName('Mortgage Rates 05022019 JSON')
	 *   .addRule('lowest_interest_rate', '$.quote.interest_rate') 
	 *   .thenMax('3.5') // Interest rate cannot be less than 3.5%
	 *   .addRule('dividend_per_share', '$.quote.total_shares') 
	 *   .thenDivideInto('$.quote.total_dividends'); 
	 * 
	 * 
	 * @param operand Value to compare to the source field.
	 * 
	 * @returns Object Current TransformerRuleList object.
	 * 
	 */
	thenMax(operand: number) : Object
	/**
	 * @description Adds an adapter to the current rule that compares the passed in value against the source field and copies the lower of the two values to the output field.
	 * Note: This is an adapter method and cannot be used on its own. Adapter methods work in conjunction with theaddRule() method. They define adaptations to apply to the output field defined by the addRule() method such as formatting, rounding, and applying patterns.
	 * 
	 * @example
	 * //
	 * var transformerRuleList = new sn_tfrm.TransformerRuleList()
	 *   .fromJSON()
	 *   .setName('Stock Report 05022019 JSON')
	 *   .addSymbol('broker_fee_percentage', '$.quote.broker_fee') 
	 *   .thenMin('10') // Maximum of 10% broker fee
	 *   .addSymbol('dividend_per_share', '$.quote.total_shares') 
	 *   .thenDivideInto('$.quote.total_dividends'); 
	 * 
	 * 
	 * @param operand Value to compare to the source field.
	 * 
	 * @returns Object Current TransformerRuleList object.
	 * 
	 */
	thenMin(operand: number) : Object
	/**
	 * @description Adds an adapter to the current rule that multiplies the source field by the passed in value.
	 * Note: This is an adapter method and cannot be used on its own. Adapter methods work in conjunction with theaddRule() method. They define adaptations to apply to the output field defined by the addRule() method such as formatting, rounding, and applying patterns.
	 * 
	 * @example
	 * //
	 * var transformerRuleList = new sn_tfrm.TransformerRuleList()
	 *   .fromJSON()
	 *   .setName('Stock Report 05022019 JSON')
	 *   .addRule('ticker', '$.quote.symbol') 
	 *   .addRule('change_percentage', '$.quote.changePercent') 
	 *   .thenMultiply('100') 
	 *   .thenRoundDown('0') 
	 *   .addRule('close_price', '$.quote.close') 
	 *   .thenAdaptCurrency('USD', false) 
	 *   .addRule('summary') 
	 *   .thenConcat('Shares of ') 
	 *   .thenConcatSymbol('ticker') 
	 *   .thenConcat(' closed at ') 
	 *   .thenConcatSymbol('close_price'); 
	 * 
	 * 
	 * @param operand Value by which to multiply the source field.
	 * 
	 * @returns Object Current TransformerRuleList object.
	 * 
	 */
	thenMultiply(operand: number) : Object
	/**
	 * @description Adds an adapter to the current rule that finds all text within the source field that matches a specified string and replaces it with an updated string.
	 * Note: This is an adapter method and cannot be used on its own. Adapter methods work in conjunction with theaddRule() method. They define adaptations to apply to the output field defined by the addRule() method such as formatting, rounding, and applying patterns.
	 * 
	 * @example
	 * //In this example, any company name that ends with "Inc." is transformed to "Incorporated", such as Company Inc. to Company Incorporated.
	 * var transformerRuleList = new sn_tfrm.TransformerRuleList()
	 *   .fromJSON()
	 *   .setName('Stock Report 05022019 JSON')
	 *   .addRule('ticker', '$.quote.symbol') 
	 *   .addRule('change_percentage', '$.quote.changePercent') 
	 *   .thenMultiply('100') 
	 *   .thenRoundDown('0') 
	 *   .addRule('close_price', '$.quote.close') 
	 *   .thenAdaptCurrency('USD', false) 
	 *   .addRule('company', '$.quote.company') 
	 *   .thenReplace('Inc.', 'Incorporated');
	 * 
	 * 
	 * @param matchString String to match against the source field to identify the text to replace.
	 * @param replaceString String with which to replace the matching text.
	 * 
	 * @returns Object Current TransformerRuleList object.
	 * 
	 */
	thenReplace(matchString: string,replaceString: string) : Object
	/**
	 * @description Adds an adapter to the current rule that rounds the source field down at the decimal position specified by the passed in value.
	 * For negative numbers, the thenRoundDown() method makes the number more positive; the round down value of -2.156 is -2.15. The thenFloor() method makes the same number more negative, -2.16.
	 * 
	 * Note: This is an adapter method and cannot be used on its own. Adapter methods work in conjunction with theaddRule() method. They define adaptations to apply to the output field defined by the addRule() method such as formatting, rounding, and applying patterns.
	 * 
	 * @example
	 * //
	 * var transformerRuleList = new sn_tfrm.TransformerRuleList90
	 *   .fromJSON()
	 *   .setName('Mortgage Rates 05022019 JSON')
	 *   .addRule('interest_rate', '$.quote.interest_rate') 
	 *   .thenRoundDown('2') // Always round the interest rate down to the hundredths place 
	 *   .addRule('monthly_payment', '$.quote.total_loan_amount') 
	 *   .thenDivideBy('180'); 
	 * 
	 * 
	 * @param operand Decimal position to the right of the decimal point at which to round the number down.  For example, if this value is 2 and the source data element is 6.427, the resulting value is 6.42.
	 * 
	 * @returns Object Current TransformerRuleList object.
	 * 
	 */
	thenRoundDown(operand: number) : Object
	/**
	 * @description Adds an adapter to the current rule that rounds the source data element up at the decimal position specified by the passed in value.
	 * For negative numbers, the thenRoundUp() method makes the number more negative; the round up value of -2.156 is -2.16. The thenCeiling() method makes the same number more positive, -2.15.
	 * 
	 * Note: This is an adapter method and cannot be used on its own. Adapter methods work in conjunction with theaddRule() method. They define adaptations to apply to the output field defined by the addRule() method such as formatting, rounding, and applying patterns.
	 * 
	 * @example
	 * //
	 * var transformerRuleList = new sn_tfrm.TransformerRuleList()
	 *   .fromJSON()
	 *   .setName('Mortgage Rates 05022019 JSON')
	 *   .addRule('interest_rate', '$.quote.interest_rate') 
	 *   .thenRoundUp('2') // Always round the interest rate up to the hundredths place 
	 *   .addRule('monthly_payment', '$.quote.total_loan_amount') 
	 *   .thenDivideBy('180'); 
	 * 
	 * 
	 * @param operand Decimal position to the right of the decimal point at which to round the number up.  For example, if this value is 2 and the source data element is 6.422, the resulting value is 6.43.
	 * 
	 * @returns Object Current TransformerRuleList object.
	 * 
	 */
	thenRoundUp(operand: number) : Object
	/**
	 * @description Adds an adapter to the current rule that splits, reorganizes, and replaces strings within the source field and saves them in the output field.
	 * The splitPattern parameter denotes how to divide the source text string into segments. This parameter can be a typical word separator such as a space (' '), comma (','), or semicolon (';'), and can also be any string, such as 'name'. For example, if the source text is "Smith John Michael" and the splitPattern is a space, then the available segments are "Smith", "John", and "Michael". To reference a segment, use $#, where # is the number of the order of the segment in the source text string. For example, if the method call is thenSplit(' ', '$2 $3 $1'), then the output is "John Michael Smith". In addition, you can add constants within the output pattern, such as thenSplit(' ', 'First name: $2 Middle name: $3 Last name: $1').
	 * 
	 * Note: This is an adapter method and cannot be used on its own. Adapter methods work in conjunction with theaddRule() method. They define adaptations to apply to the output field defined by the addRule() method such as formatting, rounding, and applying patterns.
	 * 
	 * @example
	 * //In this example, the CEO name is last name, first name in the source data and in the output it will be transformed to first name last name.
	 * var transformerRuleList = new sn_tfrm.TransformerRuleList()
	 *   .fromJSON()
	 *   .setName('Stock Report 05022019 JSON')
	 *   .addRule('ticker', '$.quote.symbol') 
	 *   .addRule('change_percentage', '$.quote.changePercent') 
	 *   .thenMultiply('100') 
	 *   .thenRoundDown('0') 
	 *   .addRule('close_price', '$.quote.close') 
	 *   .thenAdaptCurrency('USD', false) 
	 *   .addRule('CEO', '$.quote.CEO') 
	 *   .thenSplit(',', '$2 $1');
	 * 
	 * 
	 * @param splitPattern String that denotes how to split the text into segments.
	 * @param replaceString String that defines the output string, including segment references and constants. Not all segments need to be referenced.  Reference the segments defined by the splitPattern using $#, where # is the number of the order of the segment in the source data element. Reference the entire source data element using $0.
	 * 
	 * @returns Object Current TransformerRuleList object.
	 * 
	 */
	thenSplit(splitPattern: string,replaceString: string) : Object
	/**
	 * @description Adds an adapter to the current rule that subtracts the passed in value from the source field and stores it in the output field.
	 * Note: This is an adapter method and cannot be used on its own. Adapter methods work in conjunction with theaddRule() method. They define adaptations to apply to the output field defined by the addRule() method such as formatting, rounding, and applying patterns.
	 * 
	 * @example
	 * //
	 * var transformerRuleList = new sn_tfrm.TransformerRuleList()
	 *   .fromJSON()
	 *   .setName('Stock 05182019 JSON')
	 *   .addRule('ticker', '$.quote.symbol') 
	 *   .addRule('change_percentage', '$.quote.changePercent') 
	 *   .thenMultiply('100') 
	 *   .thenRoundDown('0') 
	 *   .addRule('close_price', '$.quote.close') 
	 *   .thenAdaptCurrency('USD', false) 
	 *   .addRule('trade_price', '$.quote.current_price') 
	 *   .addMultiply('$.quote.trade_quantity')
	 *   .thenSubtract('$.quote.discount_dollars'); 
	 * 
	 * 
	 * @param operand Value to subtract from the source data element.
	 * 
	 * @returns Object Current TransformerRuleList object.
	 * 
	 */
	thenSubtract(operand: number) : Object
	}
declare namespace sn_tfrm {
	}
/**
	 * @description The UserCriteria API enables you to create, modify, or delete user criteria records using scripts.
	 * To use this class in a scoped application, use the sn\_uc namespace identifier. The User Criteria Scoped API plugin (ID: com.glideapp.user\_criteria.scoped.api) should be enabled to access the UserCriteria API.
	 * 
	 */
	declare class UserCriteria {
	/**
	 * @description Creates a user criteria with specified values in the user\_criteria table. Values specified in columnValues override the values provided via setters.
	 * @example
	 * //
	 * 
	 * var uc = new sn_uc.UserCriteria(); 
	 * uc.setCompanies("31bea3d53790200044e0bfc8bcbe5dec,0c441abbc6112275000025157c651c89”);
	 * uc.setActive(true); 
	 * uc.setUsers("31bea3d53790200044e0bfc8bcbe5dec,0c441abbc6112275000025157c651c89");
	 * var UserCriteriaId = UserCriteria.create();
	 * gs.info(UserCriteriaId);
	 * 
	 * 
	 * @param columnValues Key and value pairs for a column and its value.
	 * @param standardUpdate Set to true to enable the running of engines and workflow.
	 * 
	 * @returns string sys\_id of the created user criteria.
	 * 
	 */
	create(columnValues: Object,standardUpdate: boolean) : string
	/**
	 * @description Deletes the current user criteria.
	 * @example
	 * //
	 * var uc = new sn_uc.UserCriteria("31bea3d53790200044e0bfc8bcbe5dec");
	 * uc.deleteRecord();
	 * 
	 * @returns boolean If true, the user criteria is deleted.  If false, no user criteria is found to delete.
	 * 
	 */
	deleteRecord() : boolean
	/**
	 * @description Displays the mapping for the attribute and value pairs of the catalog item.
	 * @example
	 * //
	 * var uc = new sn_uc.UserCriteria("7b8a6927ef732100438236caa5c0fb89");
	 * var obj = uc.read(["company","name"]);
	 * gs.info(JSON.stringify(obj));
	 * 
	 * @param columns Array of catalog item attributes.
	 * 
	 * @returns Object Mapping for the attribute and value pairs of the catalog item.
	 * 
	 */
	read(columns: string) : Object
	/**
	 * @description Specifies if the user criteria is active.
	 * @example
	 * //
	 * var uc = new sn_uc.UserCriteria();
	 * uc.setActive(true); 
	 * 
	 * 
	 * @param active If true, the user criteria is active.  If false, the user criteria is inactive.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setActive(active: boolean) : void
	/**
	 * @description Specifies if the user criteria has an advanced script.
	 * @example
	 * //
	 * var uc = new sn_uc.UserCriteria();
	 * uc.setAdvanced(true); 
	 * 
	 * 
	 * @param advanced If true, the user criteria has an advanced script.  If false, the user criteria does not have an advanced script.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setAdvanced(advanced: boolean) : void
	/**
	 * @description Sets the company property for the user criteria.
	 * @example
	 * //
	 * var uc = new sn_uc.UserCriteria();
	 * uc.setCompanies("31bea3d53790200044e0bfc8bcbe5dec,0c441abbc6112275000025157c651c89"); 
	 * 
	 * 
	 * @param companies Comma-separated list of the company sys\_ids to be set for the user criteria.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setCompanies(companies: string) : void
	/**
	 * @description Sets the department property for the user criteria.
	 * @example
	 * //
	 * var uc = new sn_uc.UserCriteria();
	 * uc.setDepartments("31bea3d53790200044e0bfc8bcbe5dec,0c441abbc6112275000025157c651c89"); 
	 * 
	 * 
	 * @param departments Comma-separated list of the department sys\_ids to be set for the user criteria.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setDepartments(departments: string) : void
	/**
	 * @description Sets the group property for the user criteria.
	 * @example
	 * //
	 * var uc = new sn_uc.UserCriteria();
	 * uc.setGroups("31bea3d53790200044e0bfc8bcbe5dec,0c441abbc6112275000025157c651c89"); 
	 * 
	 * 
	 * @param groups Comma-separated list of the group sys\_ids to be set for the user criteria.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setGroups(groups: string) : void
	/**
	 * @description Sets the location property for the user criteria.
	 * @example
	 * //
	 * var uc = new sn_uc.UserCriteria();
	 * uc.setLocations("31bea3d53790200044e0bfc8bcbe5dec,0c441abbc6112275000025157c651c89"); 
	 * 
	 * 
	 * @param locations Comma-separated list of the location sys\_ids to be set for the user criteria.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setLocations(locations: string) : void
	/**
	 * @description Sets the match\_all property for the user criteria.
	 * @example
	 * //
	 * var uc = new sn_uc.UserCriteria();
	 * uc.setMatchAll(true); 
	 * 
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setMatchAll() : void
	/**
	 * @description Sets the name property for the user criteria.
	 * @example
	 * //
	 * var uc = new sn_uc.UserCriteria();
	 * uc.setName("Property1"); 
	 * 
	 * 
	 * @param name Name of the user criteria.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setName(name: string) : void
	/**
	 * @description Sets the role property for the user criteria.
	 * @example
	 * //
	 * var uc = new sn_uc.UserCriteria();
	 * uc.setRoles("31bea3d53790200044e0bfc8bcbe5dec,0c441abbc6112275000025157c651c89"); 
	 * 
	 * 
	 * @param roles Comma-separated list of the role sys\_ids to be set for the user criteria.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setRoles(roles: string) : void
	/**
	 * @description Sets the script for the user criteria.
	 * @example
	 * //
	 * var uc = new sn_uc.UserCriteria();
	 * uc.setScript("function scriptTest() {
	 *   var retVal;
	 *   if (gs.getUser().getRecord().getDisplayValue('department') == 'Product Management') {
	 *       retVal = true;
	 *   } else {
	 *       retVal = false;
	 *   }
	 *   return retVal;
	 * }"); 
	 * 
	 * 
	 * @param script Script to be set for the advanced user criteria.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setScript(script: string) : void
	/**
	 * @description Sets the user property for the user criteria.
	 * @example
	 * //
	 * var uc = new sn_uc.UserCriteria();
	 * uc.setUsers("31bea3d53790200044e0bfc8bcbe5dec,0c441abbc6112275000025157c651c89"); 
	 * 
	 * 
	 * @param users Comma-separated list of the user sys\_ids to be set for the user criteria.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setUsers(users: string) : void
	/**
	 * @description Updates the current catalog item with the specified values.
	 * @example
	 * //
	 * var uc = new sn_uc.UserCriteria();
	 * uc.update("name": "Updated name", "The existing name is not relevant. Setting a relevant name"); 
	 * 
	 * 
	 * @param columnValues Mapping for the column name and the value pairs.
	 * @param reason Reason for updating the catalog item.
	 * 
	 * @returns string Returns the sys\_id of the created user criteria.
	 * 
	 */
	update(columnValues: Object,reason: string) : string
	/**
	 * @description Creates an instance of the UserCriteria class.
	 * @example
	 * //
	 * var uc = new sn_uc.UserCriteria();
	 * 
	 */
	constructor() 
	/**
	 * @description Creates an instance of the UserCriteria class with the specified sys\_id.
	 * @example
	 * //
	 * var uc = new sn_uc.UserCriteria("31bea3d53790200044e0bfc8bcbe5dec");
	 * 
	 * @param sys_id sys\_id of the user criteria.
	 * 
	 */
	constructor(sys_id: string) 
	}
/**
	 * @description The UserCriteriaLoader API enables you to get the user criteria associated with a specific user, or a user associated with a specific linkTable.
	 * To use this class in a scoped application, use the sn\_uc namespace identifier. The User Criteria Scoped API plugin (ID: com.glideapp.user\_criteria.scoped.api) should be enabled to access the UserCriteriaLoader API.
	 * 
	 */
	declare class UserCriteriaLoader {
	/**
	 * @description Returns all user criteria associated with the logged in user.
	 * @example
	 * //
	 * var result = new sn_uc.UserCriteriaLoader.getAllUserCriteria();
	 * gs.info(result);
	 * 
	 * @returns ArrayList<String> An array list containing the sys\_ids of the user criteria associated with the user.
	 * 
	 */
	getAllUserCriteria() : ArrayList<String>
	/**
	 * @description Returns all user criteria associated with the specified user.
	 * @example
	 * //
	 * var result = new sn_uc.UserCriteriaLoader.getAllUserCriteria('62826bf03710200044e0bfc8bcbe5df1');
	 * gs.log(result);
	 * 
	 * @param userId sys\_id of the user.
	 * 
	 * @returns ArrayList<String> An array list containing the sys\_ids of the user criteria associated with the specified user.
	 * 
	 */
	getAllUserCriteria(userId: string) : ArrayList<String>
	/**
	 * @description Returns the user criteria associated with the specified linkTable for the logged in user.
	 * @example
	 * //
	 * var result = new sn_uc.UserCriteriaLoader.getUserCriteria('sc_cat_item_user_criteria_mtom');
	 * gs.log(result);
	 * 
	 * @param linkTable Mtom link table between the record and the Available For or Not Available For User Criteria.
	 * 
	 * @returns ArrayList<String> An array list containing the sys\_id of the user criteria associated with the logged in user for the specified link table.
	 * 
	 */
	getUserCriteria(linkTable: string) : ArrayList<String>
	/**
	 * @description Returns the user criteria of the specified user and the linkTable.
	 * @example
	 * //
	 * var result = new sn_uc.UserCriteriaLoader.getUserCriteria('62826bf03710200044e0bfc8bcbe5df1',             
	 * 'sc_cat_item_user_criteria_mtom');
	 * gs.log(result);
	 * 
	 * @param userId sys\_id of the user.
	 * @param linkTable Mtom link table between the record and the Available For or Not Available For User Criteria.
	 * 
	 * @returns ArrayList<String> An array list containing the sys\_id of the user criteria associated with the specified user and link table.
	 * 
	 */
	getUserCriteria(userId: string,linkTable: string) : ArrayList<String>
	}
declare namespace sn_uc {
	}
/**
	 * @description A RESTAPIRequest object allows you to access scripted REST API request details in scripts.
	 * Note: You cannot instantiate objects of this type. Objects of this type are created automatically and are accessible only in scripted REST API resource scripts.
	 * 
	 */
	declare class RESTAPIRequestScopedGlobal {
	/**
	 * @description The body of the request.
	 * @example
	 * //
	 * var requestBody = request.body // Returns instance of RESTAPIRequestBody
	 * 
	 * @param body The body of the request. You can access data from the body object using the RESTAPIRequestBody API.
	 * 
	 */
	body(body: RESTAPIRequestBody) 
	/**
	 * @description All headers from the request.
	 * @example
	 * //
	 * var headers = request.headers; 
	 * var acceptHeader = headers.Accept;
	 * var myCustomHeader = headers.myCustom; 
	 * var specialHeader = headers['special - header'];
	 * 
	 * @param headers All headers from the request, and their values.
	 * 
	 */
	headers(headers: object) 
	/**
	 * @description The path parameters passed in the request URI.
	 * @example
	 * //In this example, the scripted REST API endpoint follows this format: https://instance.service-now.com/api/now/myservice/{tableName}/{id}. The request being processed uses this URL: https://instance.service-now.com/api/now/myservice/myApp\_table/1234.
	 * var pathParams = request.pathParams; 
	 * var tableName = pathParams.tableName; //‘myApp_table’ 
	 * var id = pathParams.id; //‘1234’
	 * 
	 * @param pathParams The path parameters as a script object. Available path parameters depend on the web service configuration.
	 * 
	 */
	pathParams(pathParams: Object) 
	/**
	 * @description Returns the value of a specific header from the web service request.
	 * @example
	 * //
	 * var acceptHeader = request.getHeader('accept');
	 * 
	 * @param header The name of the header, such as accept or content-type.
	 * 
	 * @returns string The value of the specified header.
	 * 
	 */
	getHeader(header: string) : string
	/**
	 * @description The query parameters from the web service request.
	 * @example
	 * //In this example, the request being processed uses this URL: https://<instance\_rest\_endpoint>?active=false&name=now. Note the active and name parameters.
	 * var queryParams = request.queryParams; 
	 * var isActiveQuery = queryParams.active; //false 
	 * var nameQueryVal = queryParams.name; //‘now’
	 * 
	 * @param queryParams The query parameters from the web service request.
	 * 
	 */
	queryParams(queryParams: Object) 
	/**
	 * @description Get the content types specified in the request Accept header.
	 * @returns Array An array of string values where each string is a content type, such as application/json.
	 * 
	 */
	getSupportedResponseContentTypes() : Array
	/**
	 * @description The entire query added to the endpoint URI.
	 * @example
	 * //In this example, the request being processed uses this URL: https://<instance\_rest\_endpoint>?active=false&name=now. Note the query active=false&name=now.
	 * var query = request.queryString; //"active=false&amp;name=now"
	 * 
	 * @param queryString The entire query for the request.
	 * 
	 */
	queryString(queryString: string) 
	/**
	 * @description The request URI, excluding domain information.
	 * @example
	 * //In this example, the request being processed uses this URL: https://instance.service-now.com/api/now/table/myTable?active=false&name=now.
	 * var query = request.uri; //"api/now/table/myTable"
	 * 
	 * @param uri The request URI, excluding domain information.
	 * 
	 */
	uri(uri: string) 
	/**
	 * @description The entire request URL.
	 * @example
	 * //In this example, the request being processed uses this URL: https://instance.service-now.com/api/now/table/myTable?active=false&name=now.
	 * var query = request.url; //"https://instance.service-now.com/api/now/table/myTable?active=false&amp;name=now"
	 * 
	 * @param url The entire request URL.
	 * 
	 */
	url(url: string) 
	}
/**
	 * @description A RESTAPIRequestBody object allows you to access the body content of a scripted REST API request in scripts.
	 * The format of a RESTAPIRequestBody object may be JSON or XML, depending on the content-type header value from the request.	
 * 	
 * Note: You cannot instantiate objects of this type. Objects of this type are created automatically and are accessible only in scripted REST API resource scripts.	
 * 	
 *   	
 *   	
 * Single entry example-request-body in JSON format.	
 * 	
 *     {	
 *      "name": "user1",	
 *      "id": 1234,	
 *      "roles": [	
 *       {	
 *        "name": "admin"	
 *       },	
 *       {	
 *        "name": "itil"	
 *       }	
 *      ]	
 *     }	
 * 	
 *   	
 *   	
 * Multiple entry example-request-body in JSON format.	
 * 	
 *     [{	
 *      "name": "user1",	
 *      "id": 1234,	
 *      "roles": [	
 *       {	
 *        "name": "admin"	
 *       },	
 *       {	
 *        "name": "itil"	
 *       }	
 *      ]	
 *     },{	
 *      "name": "user2",	
 *      "id":9876,	
 *      "roles": [	
 *       {	
 *        "name":"admin"	
 *       }	
 *      ]	
 *     }]	
 * 	
 *   	
 *   	
 * Important: If the request body format is not of a json or xml subtype, use only the request body dataStream field to access the request body. Using request body data, dataString, nextEntry(), or hasNext() with a non-json or non-xml format results in a 500 error response.
	 * 
	 */
	declare class RESTAPIRequestBodyScopedGlobal {
	/**
	 * @description The content of the request body.
	 * Note: REST web services consume data, datastream, and dataString via stream. Because streams are only consumed once, only one can be called. For example, if calling both data and dataString, the second call will return empty.
	 * 
	 * @example
	 * //
	 * var entry;
	 * var id;
	 * var requestBody = request.body;
	 * var requestData = requestBody.data; //May be an array or a single object
	 * if (requestData instanceof Array) { 
	 *  entry = requestData[0].name; // 'user1'
	 *  id = requestData[0].id; // '1234'
	 * } else {
	 *  entry = requestData.name; // 'user1'
	 *  id = requestData.id; // '1234'
	 * }
	 * 
	 * @param data The request content. This can be a single object or an array of objects depending on the request.
	 * 
	 */
	data(data: Object|Array) 
	/**
	 * @description The content of the request body, as a stream.
	 * Note: REST web services consume data, datastream, and dataString via stream. Because streams are only consumed once, only one can be called. For example, if calling both data and dataString, the second call will return empty.
	 * 
	 * @example
	 * //
	 * var requestBody = request.body; 
	 * var requestStream = requestBody.dataStream;
	 * 
	 * @param dataStream The content of the request body. You can pass the stream to a separate API, such as to create an attachment from the request or forward the request to a different endpoint.
	 * 
	 */
	dataStream(dataStream: Object) 
	/**
	 * @description The content of the request body, as a String.
	 * Note: REST web services consume data, datastream, and dataString via stream. Because streams are only consumed once, only one can be called. For example, if calling both data and dataString, the second call will return empty.
	 * 
	 * @example
	 * //
	 * var requestBody = request.body; 
	 * var requestString = requestBody.dataString;
	 * 
	 * @param dataString The content of the request body.
	 * 
	 */
	dataString(dataString: string) 
	/**
	 * @description Determines if there are additional entries in the request body.
	 * Use this method with the nextEntry() method to iterate over multiple request body entries.
	 * 
	 * @example
	 * //
	 * var requestBody = request.body;
	 * requestBody.hasNext(); // returns true if the request contains a single entry or multiple entries
	 * requestBody. nextEntry(); // returns next available entry
	 * 
	 * //calling second time
	 * requestBody.hasNext(); // returns false if the request contains a single entry, or true if the request contains multiple entries
	 * 
	 * @returns boolean Flag indicating whether there are additional entries in the request body.  Possible values:  *   true: Additional entries are available. As nextEntry() is called, hasNext() continues to be true until the last matching record is loaded. *   false: No additional entries.
	 * 
	 */
	hasNext() : boolean
	/**
	 * @description Retrieve one entry from the request body as a script object.
	 * Use this method with the hasNext() method to iterate over multiple request body entries.
	 * 
	 * @example
	 * //
	 * var requestBody = request.body;
	 * var requestEntry = requestBody.nextEntry(); // returns available entry if there is only one entry, or the first entry if there are multiple.
	 * var name = requestEntry.name; // ‘user1’
	 * 
	 * // Calling second time
	 * requestEntry = requestBody.nextEntry(); // returns undefined if there is only one entry, or the second entry if there are multiple.
	 * 
	 * @example
	 * //This example demonstrates using hasNext() with nextEntry().
	 * var requestBody = request.body;
	 * while(requestBody.hasNext()){
	 * var entry = requestBody.nextEntry();
	 * }
	 * 
	 * @returns Object A single entry from the request body.
	 * 
	 */
	nextEntry() : Object
	}
/**
	 * @description A RESTAPIResponse object allows you to build a RESTful response to a scripted REST API request.
	 * Note: You cannot instantiate objects of this type. Objects of this type are created automatically and are accessible only in scripted REST API resource scripts.
	 * 
	 */
	declare class RESTAPIResponseScopedGlobal {
	/**
	 * @description Returns the ResponseStreamWriter for this response, allowing you to write directly to the response stream.
	 * Set the content type and status code using the setHeaders and setStatus functions prior to calling the getStreamWriter function.
	 * 
	 * @example
	 * //
	 * response.setContentType('application/json');
	 * response.setStatus(200);
	 * var writer = response.getStreamWriter();
	 * 
	 * @returns RESTAPIResponseStream The ResponseStreamWriter for this response. You can use this object to write directly to the response stream.
	 * 
	 */
	getStreamWriter() : RESTAPIResponseStream
	/**
	 * @description Sets the body content to send in the web service response.
	 * @example
	 * //
	 * var body = {};
	 * body.name = "incident";
	 * body.number = "1234";
	 * body.caller = {"id": "user1"};
	 * response.setBody(body);
	 * 
	 * 
	 * @example
	 * //
	 * var bodyArray = [];
	 * var body = {};
	 * body.name = "incident";
	 * body.number = "1234";
	 * body.caller = {"id":"user1"};
	 * bodyArray.push(body);
	 * response.setBody(bodyArray);
	 * 
	 * @param body The response body, as a JavaScript object.  The body content is automatically serialized to JSON or XML depending on the value of the Accept header passed in the request.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setBody(body: Object) : void
	/**
	 * @description Sets the headers for the web service response.
	 * @example
	 * //
	 * var headers = {};
	 * headers.X-Total-Count=100;
	 * headers.Location=‘https://instance.service-now.com/&lt;endpoint_to_resource&gt;';
	 * response.setHeaders(headers);
	 * 
	 * @param headers A JavaScript object listing each header and the value to assign that header.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setHeaders(headers: Object) : void
	/**
	 * @description Assigns a value to the Location header in the web service response.
	 * See the [W3 Location header documentation](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.30) for more information about this header.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setLocation() : void
	/**
	 * @description Sets the status code number for the web service response.
	 * @example
	 * //
	 * response.setStatus(200);
	 * 
	 * @param status The status code to send in the response, such as 200 to indicate success. Passing a non-numerical value, such as a string, causes the status code to default to 0.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setStatus(status: number) : void
	/**
	 * @description Assign a value to a REST service response header.
	 * @example
	 * //
	 * response.setHeader("Location","&lt;URI&gt;");
	 * 
	 * @param header The header you want to set.
	 * @param value The value to assign the specified header.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setHeader(header: string,value: string) : void
	/**
	 * @description Assigns a value to the Content-Type header in the web service response.
	 * You must set a response content type before writing the response. The content type is set automatically for string responses, based on the request Accept header value.
	 * 
	 * Setting an invalid content type causes the response to default to JSON. Failing to set a content type results in a status code 500 error when sending a binary response.
	 * 
	 * See the [W3 Content-Type header documentation](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17) for more information about this header.
	 * 
	 * @example
	 * //
	 * response.setContentType('application/json');
	 * 
	 * @param contentType The content type of the response body, such as application/json.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setContentType(contentType: string) : void
	/**
	 * @description Configures the REST response to return an error.
	 * @example
	 * //The following example shows how to return an error from within a scripted REST resource.
	 * var queryParams = request.queryParams;
	 * var userId = String(queryParams.user_id || '');
	 * var fileId = String(queryParams.file_id || '');
	 * if (!userId || !fileId){
	 *   response.setError(new sn_ws_err.BadRequestError('Missing required parameters.'));
	 *   return;
	 * }
	 * 
	 * @param error Error object.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setError(error: Object) : void
	}
/**
	 * @description A RESTAPIResponseStream object allows you to write directly to the scripted REST API response stream.
	 * Use RESTAPIResponseStream methods to build web service APIs in the [Scripted REST API](https://docs.servicenow.com/bundle/paris-application-development/page/integrate/custom-web-services/concept/c_CustomWebServices.html) feature.	
 * 	
 * Note: You cannot instantiate objects of this type. Objects of this type are created automatically and are accessible only in scripted REST API resource scripts.
	 * 
	 */
	declare class RESTAPIResponseStreamScopedGlobal {
	/**
	 * @description Write an input stream to the response stream.
	 * You must set the content type and status code before calling the writeStream() method or the response will fail. You cannot modify these values after calling the writeStream() method.
	 * 
	 * Note:
	 * 
	 * It is the responsibility of the script author to obtain the stream from a third-party service.
	 * 
	 * @example
	 * //The following example is for scoped applications:
	 * (function process( response) {
	 * 
	 *     response.setContentType('application/json');
	 *     response.setStatus(200);
	 * 
	 *     var gsa = new GlideSysAttachment();
	 *     var attachmentStream = new gsa.getContentStream(&lt;sys_id of attachment&gt;); 
	 *     var writer = response.getStreamWriter();
	 *     writer.writeStream(attachmentStream);
	 * 
	 * })(request, response);
	 * 
	 * @example
	 * //The following example is for global applications:
	 * (function process( response) {
	 * 
	 *     response.setContentType('application/json');
	 *     response.setStatus(200);
	 * 
	 *     var attachmentStream = new GlideSysAttachmentInputStream(&lt;sys_id of attachment&gt;);
	 *     var writer = response.getStreamWriter();
	 *     writer.writeStream(attachmentStream);
	 * 
	 * })(request, response);
	 * 
	 * @param stream An attachment or a response stream from a third-party service.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	writeStream(stream: Object) : void
	/**
	 * @description Write string data to the response stream.
	 * You must set the content type and status code before calling the writeString() method or the response will fail. You cannot modify these values after calling the writeString() method.
	 * 
	 * @example
	 * //
	 * response.setContentType('application/json');
	 * response.setStatus(200);
	 * var writer = response.getStreamWriter();
	 * var body ={
	 *   name:user1,
	 *   id: 1234,
	 *   roles: [
	 *     {
	 *       name: admin
	 *     },
	 *     {
	 *       name: itil
	 *     }
	 *   ]
	 * }
	 * writer.writeString("{'name':'user','id':'1234'}");
	 * writer.writeString(JSON.stringify(body));
	 * 
	 * @param data The string to add to the response data.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	writeString(data: string) : void
	}
/**
	 * @description The RESTMessageV2 API allows you to send outbound REST messages using JavaScript.
	 * Use the RESTResponseV2 API to manage the response returned by the REST provider.  	
 *   	
 * You can use this API in scoped applications, or within the global scope.
	 * 
	 */
	declare class RESTMessageV2ScopedGlobal {
	/**
	 * @description Send the REST message to the endpoint.
	 * In the following example, replace REST\_message\_record with the name of the REST message record from your instance.
	 * 
	 * @example
	 * //
	 * var sm = new sn_ws.RESTMessageV2("&lt;REST_message_record&gt;","get"); //Might throw exception if message doesn't exist or not visible due to scope.
	 * var response = sm.execute(); //Might throw exception if http connection timed out or some issue with sending request itself because of encryption/decryption of password.
	 * 
	 * @returns RESTResponse The response returned by the REST provider.
	 * 
	 */
	execute() : RESTResponse
	/**
	 * @description Send the REST message to the endpoint asynchronously. The instance does not wait for a response from the web service provider when making asynchronous calls.
	 * In the following example, replace REST\_message\_record with the name of the REST message record from your instance. When using executeAsync, consider processing the response body in a separate business rule to take advantage of the asynchronous call.
	 * 
	 * @example
	 * //
	 * var sm = new sn_ws.RESTMessageV2("&lt;REST_message_record&gt;","get"); //Might throw exception if message doesn't exist or not visible due to scope.
	 * var response = sm.executeAsync(); //Might throw exception if http connection timed out or some issue with sending request itself because of encryption/decryption of password.
	 * 
	 * 
	 * @returns RESTResponse The response returned by the REST provider.
	 * 
	 */
	executeAsync() : RESTResponse
	/**
	 * @description Get the URL of the endpoint for the REST message.
	 * In the following example, replace REST\_message\_record with the name of the REST message record from your instance.
	 * 
	 * @example
	 * //
	 * var sm = new sn_ws.RESTMessageV2("&lt;REST_message_record&gt;","get"); //Might throw exception if message doesn't exist or not visible due to scope.
	 * var endpoint = sm.getEndpoint();
	 * 
	 * @returns string The URL of the REST web service provider.
	 * 
	 */
	getEndpoint() : string
	/**
	 * @description Get the content of the REST message body.
	 * In the following example, replace REST\_message\_record with the name of the REST message record from your instance.
	 * 
	 * @example
	 * //
	 * var sm = new sn_ws.RESTMessageV2("&lt;REST_message_record&gt;","get"); //Might throw exception if message doesn't exist or not visible due to scope.
	 * var body = sm.getRequestBody();
	 * 
	 * @returns string the REST message body.
	 * 
	 */
	getRequestBody() : string
	/**
	 * @description Get the value for an HTTP header specified in the REST message.
	 * By default, this method cannot return the value for a header set automatically by the system. To grant this method access to all headers, set the property glide.http.log\_debug to true.
	 * 
	 * In the following example, replace REST\_message\_record with the name of the REST message record from your instance.
	 * 
	 * @example
	 * //
	 * var sm = new sn_ws.RESTMessageV2("&lt;REST_message_record&gt;","get"); //Might throw exception if message doesn't exist or not visible due to scope.
	 * var header = sm.getRequestHeader("Accept");
	 * 
	 * @param headerName The request header you want to get the value for.
	 * 
	 * @returns string The value of the specified header.
	 * 
	 */
	getRequestHeader(headerName: string) : string
	/**
	 * @description Get HTTP headers that were set by the REST client and the associated values.
	 * This method does not return headers set automatically by the system. To configure this method to return all headers, set the property glide.http.log\_debug to true.
	 * 
	 * In the following example, replace REST\_message\_record with the name of the REST message record from your instance.
	 * 
	 * @example
	 * //
	 * var sm = new sn_ws.RESTMessageV2("&lt;REST_message_record&gt;","get"); //Might throw exception if message doesn't exist or not visible due to scope.
	 * var headers = sm.getRequestHeaders();
	 * 
	 * @returns Object An Object that maps the name of each header to the associated value.
	 * 
	 */
	getRequestHeaders() : Object
	/**
	 * @description Instantiates an empty RESTMessageV2 object.
	 * When using an object instantiated this way, you must manually specify an HTTP method and endpoint.
	 * 
	 * @example
	 * //
	 * var sm = new sn_ws.RESTMessageV2();
	 * 
	 */
	constructor() 
	/**
	 * @description Instantiates a RESTMessageV2 object using information from a REST message record.
	 * You must have a REST message record defined before you can use this constructor.
	 * 
	 * In the following example, replace REST\_message\_record with the name of the REST message record from your instance.
	 * 
	 * @example
	 * //
	 * var sm = new sn_ws.RESTMessageV2("&lt;REST_message_record&gt;","get"); //Might throw exception if message doesn't exist or not visible due to scope.
	 * 
	 * @param name The name of the REST message record.
	 * @param methodName The name of the HTTP method to use, such as GET/get or PUT/put - case insensitive.
	 * 
	 */
	constructor(name: string,methodName: string) 
	/**
	 * @description Sets basic authentication headers for the REST message.
	 * Setting security values using this method overrides basic authentication values defined for the REST message record.
	 * 
	 * In the following example, replace REST\_message\_record with the name of the REST message record from your instance.
	 * 
	 * @example
	 * //
	 * var sm = new sn_ws.RESTMessageV2("&lt;REST_message_record&gt;","get"); //Might throw exception if message doesn't exist or not visible due to scope.
	 * sm.setBasicAuth("username","password");
	 * 
	 * @param userName The username you want to use to authenticate the REST message.
	 * @param userPass The password for the specified user.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setBasicAuth(userName: string,userPass: string) : void
	/**
	 * @description Associate outbound requests and the resulting response record in the ECC queue. This method only applies to REST messages sent through a MID Server.
	 * The correlator provided populates the Agent correlator field on the ECC queue record for the response. Provide a unique correlator for each outbound request to associate the correct results in the ECC queue with the request when designing asynchronous automation through a MID Server.
	 * 
	 * In the following example, replace REST\_message\_record with the name of the REST message record from your instance.
	 * 
	 * @example
	 * //
	 * var sm = new sn_ws.RESTMessageV2("&lt;REST_message_record&gt;","get"); //Might throw exception if message doesn't exist or not visible due to scope.
	 * sm.setEccCorrelator("unique_identifier");
	 * 
	 * @param correlator A unique identifier
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setEccCorrelator(correlator: string) : void
	/**
	 * @description Override a value from the database by writing to the REST message payload. This method only applies to REST messages sent through a MID Server.
	 * Use this method when a value from the REST message in the database is invalid, such as when the endpoint URL is longer than the maximum REST endpoint field length. You can set only the endpoint URL using this method by passing source as the name parameter.
	 * 
	 * In the following example, replace REST\_message\_record with the name of the REST message record from your instance.
	 * 
	 * @example
	 * //
	 * var sm = new sn_ws.RESTMessageV2("&lt;REST_message_record&gt;","get"); //Might throw exception if message doesn't exist or not visible due to scope.
	 * sm.setEccParameter("source","http://very.long.endpoint.url");
	 * 
	 * @param name The name of the parameter, such as source.
	 * @param value The value to assign to the specified parameter.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setEccParameter(name: string,value: string) : void
	/**
	 * @description Set the endpoint for the REST message.
	 * By default, the REST message uses the endpoint specified in the REST message record. Use this method to override this default. You must call this method when using the [RESTMessageV2 - RESTMessageV2()](dev.do#!/reference/api/paris/server/sn_ws-namespace/c_RESTMessageV2API#r_RMV2-RESTMessageV2 "Instantiates an empty RESTMessageV2 object.") constructor with no parameters.
	 * 
	 * @example
	 * //
	 * var sm = new sn_ws.RESTMessageV2();
	 * sm.setEndpoint("http://web.service.endpoint");
	 * 
	 * @param endpoint The URL of the REST provider you want to interface with.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setEndpoint(endpoint: string) : void
	/**
	 * @description The HTTP method this REST message performs, such as GET or PUT.
	 * You must set an HTTP method when using the [RESTMessageV2 - RESTMessageV2()](dev.do#!/reference/api/paris/server/sn_ws-namespace/c_RESTMessageV2API#r_RMV2-RESTMessageV2 "Instantiates an empty RESTMessageV2 object.") constructor with no parameters.
	 * 
	 * @example
	 * //
	 * var sm = new sn_ws.RESTMessageV2();
	 * sm.setHttpMethod("post");
	 * 
	 * @param method The HTTP method to perform.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setHttpMethod(method: string) : void
	/**
	 * @description Set the amount of time the REST message waits for a response from the web service provider before the request times out.
	 * In the following example, replace REST\_message\_record with the name of the REST message record from your instance.
	 * 
	 * @example
	 * //
	 * var sm = new sn_ws.RESTMessageV2("&lt;REST_message_record&gt;","get"); //Might throw exception if message doesn't exist or not visible due to scope.
	 * sm.setHttpTimeout(6000);
	 * 
	 * @param timeoutMs The amount of time, in milliseconds, before the call to the REST provider times out.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setHttpTimeout(timeoutMs: number) : void
	/**
	 * @description Configure the REST message to communicate through a MID Server.
	 * In the following example, replace REST\_message\_record with the name of the REST message record from your instance.
	 * 
	 * @example
	 * //
	 * var sm = new sn_ws.RESTMessageV2("&lt;REST_message_record&gt;","get"); //Might throw exception if message doesn't exist or not visible due to scope.
	 * sm.setMIDServer("mid_server_name");
	 * 
	 * @param midServer The name of the MID Server to use. Your instance must have an active MID Server with the specified name.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setMIDServer(midServer: string) : void
	/**
	 * @description Set the mutual authentication protocol profile for the REST message.
	 * Setting a protocol profile using this method overrides the protocol profile selected for the REST message record.
	 * 
	 * In the following example, replace REST\_message\_record with the name of the REST message record from your instance.
	 * 
	 * @example
	 * //
	 * var sm = new sn_ws.RESTMessageV2("&lt;REST_message_record&gt;","get"); //Might throw exception if message doesn't exist or not visible due to scope.
	 * sm.setMutualAuth("mutual_auth_profile_name");
	 * 
	 * @param profileName The Name of the protocol profile to use for mutual authentication.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setMutualAuth(profileName: string) : void
	/**
	 * @description Set the log level for this message and the corresponding response.
	 * Setting a log level using the RESTMessageV2 API overrides the log level configured on the REST message record. This log level may not apply if the endpoint domain is blacklisted, or if the property glide.outbound\_http\_log.override is true. To view outbound web service logs, navigate to System Logs > Outbound HTTP Requests.
	 * 
	 * @example
	 * //
	 * var rm = new sn_ws.RESTMessageV2();
	 * rm.setLogLevel(‘all’);
	 * 
	 * @param level The log level. Valid values are basic, elevated, and all.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setLogLevel(level: string) : void
	/**
	 * @description Append a parameter to the end of the request URL with the form name=value.
	 * For example, the code setQueryParameter("sysparm\_query","active=true^ORDERBYnumber^ORDERBYDESCcategory"); appends the text sysparm\_query=active=true^ORDERBYnumber^ORDERBYDESCcategory to the request URL.
	 * 
	 * @example
	 * //
	 * var sm = new sn_ws.RESTMessageV2();
	 * //Set up message, including endpoint and authentication
	 * sm.setQueryParameter("sysparm_query","active=true^ORDERBYnumber^ORDERBYDESCcategory");
	 * 
	 * @param name The name of the URL parameter to pass.
	 * @param value The value to assign the URL parameter.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setQueryParameter(name: string,value: string) : void
	/**
	 * @description Set the body content to send to the web service provider when using PUT or POST HTTP methods.
	 * When you set the body content using this method, variables in the body are not substituted for parameters from the REST message function record. You must explicitly define all values within the REST message body.
	 * 
	 * @example
	 * //
	 * var sm = new sn_ws.RESTMessageV2("Update user","post"); //Might throw exception if message doesn't exist or not visible due to scope.
	 * var body = "&lt;Message body content&gt;";
	 * sm.setRequestBody(body);
	 * 
	 * @param body The request body to send.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setRequestBody(body: string) : void
	/**
	 * @description Set an HTTP header in the REST message to the specified value.
	 * In the following example, replace REST\_message\_record with the name of the REST message record from your instance.
	 * 
	 * @example
	 * //
	 * var sm = new sn_ws.RESTMessageV2("&lt;REST_message_record&gt;","get"); //Might throw exception if message doesn't exist or not visible due to scope.
	 * sm.setRequestHeader("Accept","Application/json");
	 * 
	 * @param name The name of the header.
	 * @param value The value to assign to the specified header.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setRequestHeader(name: string,value: string) : void
	/**
	 * @description Set a REST message function variable with the specified name from the REST message record to the specified value.
	 * XML reserved characters in the value are converted to the equivalent escaped characters. Use setStringParameterNoEscape to set a variable without escaping XML reserved characters.
	 * 
	 * In the following example, replace REST\_message\_record with the name of the REST message record from your instance.
	 * 
	 * @example
	 * //
	 * var sm = new sn_ws.RESTMessageV2("&lt;REST_message_record&gt;","get"); //Might throw exception if message doesn't exist or not visible due to scope.
	 * sm.setStringParameter("s","NOW");
	 * 
	 * @param name The name of the REST message variable. This parameter must be defined in the REST message record before you can assign a value to it.
	 * @param value The value to assign the variable.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setStringParameter(name: string,value: string) : void
	/**
	 * @description Set a REST message function variable with the specified name from the REST message record to the specified value.
	 * This method is equivalent to setStringParameter but does not escape XML reserved characters.
	 * 
	 * In the following example, replace REST\_message\_record with the name of the REST message record from your instance.
	 * 
	 * @example
	 * //
	 * var sm = new sn_ws.RESTMessageV2("&lt;REST_message_record&gt;","get"); //Might throw exception if message doesn't exist or not visible due to scope.
	 * sm.setStringParameterNoEscape("s","NOW");
	 * 
	 * @param name The name of the REST message variable. This parameter must be defined in the REST message record before you can assign a value to it.
	 * @param value The value to assign the variable.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setStringParameterNoEscape(name: string,value: string) : void
	/**
	 * @description Override the default requestor profile for the REST message in order to retrieve an OAuth access token associated with a different requestor.
	 * This method applies only to REST messages configured to use OAuth 2.0 authentication. This method is optional and is unnecessary in most configurations.
	 * 
	 * @param requestorContext 
	 * @param requestorId 
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setRequestorProfile(requestorContext: string,requestorId: string) : void
	/**
	 * @description Set the credentials for the REST message using an existing basic auth or OAuth 2.0 profile.
	 * In the following example, replace REST\_message\_record with the name of the REST message record from your instance.
	 * 
	 * @example
	 * //
	 * var requestBody;
	 * var responseBody;
	 * var status;
	 * var sm;
	 * try{
	 *        // Might throw exception if message doesn't exist or not visible due to scope.
	 * 	sm = new sn_ws.RESTMessageV2("&lt;REST_message_record&gt;", "get");  
	 * 
	 *        //set auth profile to an OAuth 2.0 profile record.
	 * 	sm.setAuthenticationProfile('oauth2', '1234adsf123212131123qasdsf'); 
	 * 
	 * 	sm.setStringParameter("symbol", "NOW");
	 * 	sm.setStringParameterNoEscape("xml_data","&lt;data&gt;test&lt;/data&gt;");
	 * 
	 *        //In milliseconds. Wait at most 10 seconds for response from http request.
	 * 	sm.setHttpTimeout(10000); 
	 *        //Might throw exception if http connection timed out or some issue 
	 *        //with sending request itself because of encryption/decryption of password.
	 * 	response = sm.execute();	
	 *        responseBody = response.haveError() ? response.getErrorMessage() : response.getBody();
	 * 	status = response.getStatusCode();
	 * } catch(ex) {
	 * 	responseBody = ex.getMessage();
	 * 	status = '500';
	 * } finally {
	 * 	requestBody = sm ? sm.getRequestBody():null;
	 * }
	 * 
	 * @param type The type of authentication profile to use. Valid values are 'basic' to use basic authentication, or 'oauth2' to use OAuth 2.0.
	 * @param profileId The sys\_id of an authentication profile record. When using basic auth, specify the sys\_id of a Basic Auth Configuration \[sys\_auth\_profile\_basic\] record. When using OAuth 2.0, specify the sys\_id of a OAuth Entity Profile \[oauth\_entity\_profile\] record.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setAuthenticationProfile(type: string,profileId: string) : void
	/**
	 * @description Configures the REST message to save the returned response body as an attachment record.
	 * When you use this function with a REST message that is sent through a MID server, the MID server user must have any roles required to read and write attachment records, as well as any roles required to read and write records on the table specified in the tableName parameter.
	 * 
	 * The response body does not need to be a binary file to be saved as an attachment. Response bodies using text formats, such as JSON or XML can also be saved. If the instance fails to save the attachment, call getErrorMessage() on the related RESTResponseV2 object for error details.
	 * 
	 * @example
	 * //
	 * (function sampleRESTMessageV2() {
	 *   try{
	 *     var request  = new sn_ws.RESTMessageV2();        
	 *     request.setHttpMethod('get');
	 * 
	 *     var attachment_sys_id  = '&lt;attachment_record_sys_id&gt;', 
	 *       tablename = 'incident',
	 *       recordSysId = '&lt;incident_sys_id&gt;',            
	 *       response,            
	 *       httpResponseStatus,             
	 *       filename ='&lt;filename&gt;';
	 * 
	 *     //endpoint - ServiceNow REST Attachment API        
	 *     request.setEndpoint('https://&lt;instance_name&gt;.service-now.com/api/now/attachment/' + attachment_sys_id  +'/file');        
	 *     request.setBasicAuth('&lt;username&gt;', '&lt;password&gt;');
	 * 
	 *     //RESTMessageV2 - saveResponseBodyAsAttachment(String tableName, String recordSysId, String fileName)        
	 *     request.saveResponseBodyAsAttachment(tablename, recordSysId, filename);        
	 * 
	 *     response = request.execute();        
	 *     httpResponseStatus = response.getStatusCode();  
	 *       
	 *     gs.info(" http response status_code:  " + httpResponseStatus);    
	 *   }
	 *   catch(ex){
	 *     var message  = ex.getMessage();        
	 *     gs.info(message);    
	 *   }
	 * })();
	 * 
	 * @param tableName Specify the table that contains the record you want to attach the saved file to.
	 * @param recordSysId Specify the sys\_id of the record you want to attach the saved file to.
	 * @param fileName Specify the file name to give to the saved file.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	saveResponseBodyAsAttachment(tableName: string,recordSysId: string,fileName: string) : void
	/**
	 * @description Configure the REST message to save the returned response body as an encrypted attachment record.
	 * When you use this function with a REST message that is sent through a MID server, the MID server user must have any roles required to read and write attachment records, as well as any roles required to read and write records on the table specified in the tableName parameter.
	 * 
	 * The response body does not need to be a binary file to be saved as an attachment. Response bodies using text formats, such as JSON or XML can also be saved. If the instance fails to save the attachment, call getErrorMessage() on the related RESTResponseV2 object for error details.
	 * 
	 * @param tableName Specify the table that contains the record you want to attach the saved file to.
	 * @param recordSysId Specify the sys\_id of the record you want to attach the saved file to.
	 * @param fileName Specify the file name to give to the saved file.
	 * @param encryptContext Specify the sys\_id of an encryption context. The saved file is encrypted using this context.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	saveResponseBodyAsAttachment(tableName: string,recordSysId: string,fileName: string,encryptContext: string) : void
	/**
	 * @description Sets the request body using an existing attachment record.
	 * When you use this function with a REST message that is sent through a MID server, the MID server user must have any roles required to read attachment records.
	 * 
	 * @example
	 * //
	 * (function sampleRESTMessageV2() {
	 *     try {
	 *         var request = new sn_ws.RESTMessageV2();
	 *         request.setHttpMethod('post');
	 *         request.setEndpoint('&lt;web service endpoint URL&gt;');
	 *         request.setRequestBodyFromAttachment('&lt;attachment sys_id&gt;');
	 *         
	 *         var response = request.execute();
	 *         var httpResponseStatus = response.getStatusCode();
	 *       
	 *         gs.info("http response status_code: " + httpResponseStatus);        
	 *     }
	 *     catch (ex) {
	 *         var message = ex.getMessage();
	 *         gs.info(message);
	 *     }
	 * })();
	 * 
	 * @param attachmentSysId The sys\_id of the Attachment \[sys\_attachment\] record you want to send in this REST message.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setRequestBodyFromAttachment(attachmentSysId: string) : void
	}
/**
	 * @description The RESTResponseV2 API allows you to use the data returned by an outbound REST message in JavaScript code.
	 * A RESTResponseV2 object is returned by the RESTMessageV2 methods execute() and executeAsync().  	
 *   	
 * You can use this API in scoped applications, or within the global scope.
	 * 
	 */
	declare class RESTResponseV2ScopedGlobal {
	/**
	 * @description Get the content of the REST response body.
	 * Use this function when you want to get the request body as text content. Do not use this method when saving the response as a binary attachment. If a RESTMessageV2 object called the saveResponseBodyAsAttachment(...) function, using getBody() on the associated RESTResponseV2 object will cause an error. When saving the response as an attachment, if the outbound REST message fails, call getErrorMessage() on the response to retrieve the body content.
	 * 
	 * @example
	 * //
	 * var sm = new sn_ws.RESTMessageV2("Yahoo Finance","get"); //Might throw exception if message doesn't exist or not visible due to scope.
	 * var response = sm.execute();
	 * var responseBody = response.getBody();
	 * 
	 * @returns string The REST response body.
	 * 
	 */
	getBody() : string
	/**
	 * @description Returns all cookies included in the response.
	 * @example
	 * //
	 * var cookies = response.getCookies();
	 * var i;
	 * for(i=0;i&lt;cookies.size();i++) {
	 *    gs.info(‘cookie: ‘ + cookies.get(i));
	 * }
	 * 
	 * 
	 * @returns Object The list of cookies. Iterate through the list to perform operations on each cookie.
	 * 
	 */
	getCookies() : Object
	/**
	 * @description Get the numeric error code if there was an error during the REST transaction.
	 * This error code is specific to the Now Platform, it is not an HTTP error code. Provide this error code if you require assistance from ServiceNow Customer Support
	 * 
	 * @example
	 * //
	 * var sm = new sn_ws.RESTMessageV2("Yahoo Finance","get"); //Might throw exception if message doesn't exist or not visible due to scope.
	 * var response = sm.execute();
	 * var errorCode = response.getErrorCode();
	 * 
	 * @returns number The numeric error code, such as 1 for socket timeout.
	 * 
	 */
	getErrorCode() : number
	/**
	 * @description Get the error message if there was an error during the REST transaction.
	 * @example
	 * //
	 * var sm = new sn_ws.RESTMessageV2("Yahoo Finance","get"); //Might throw exception if message doesn't exist or not visible due to scope.
	 * var response = sm.execute();
	 * var errorMsg = response.getErrorMessage();
	 * 
	 * @returns string The error message.
	 * 
	 */
	getErrorMessage() : string
	/**
	 * @description Get the value for a specified header.
	 * @example
	 * //
	 * var sm = new sn_ws.RESTMessageV2("Yahoo Finance","get"); //Might throw exception if message doesn't exist or not visible due to scope.
	 * var response = sm.execute();
	 * var headerVal = response.getHeader("Content-Type");
	 * 
	 * @param name The name of the header that you want the value for, such as Set-Cookie.
	 * 
	 * @returns string The value of the specified header.
	 * 
	 */
	getHeader(name: string) : string
	/**
	 * @description Get all headers returned in the REST response and the associated values.
	 * Note: If a header is present more than once in the response, such as a Set-Cookie header, this function returns only the last of the duplicate headers. To return all headers including duplicates, use the getAllHeaders() function.
	 * 
	 * @example
	 * //
	 * var sm = new sn_ws.RESTMessageV2("Yahoo Finance","get"); //Might throw exception if message doesn't exist or not visible due to scope.
	 * var response = sm.execute();
	 * var headers = response.getHeaders();
	 * 
	 * @returns Object An Object that maps the name of each header to the associated value.
	 * 
	 */
	getHeaders() : Object
	/**
	 * @description Return all headers contained in the response, including any duplicate headers.
	 * @example
	 * //
	 * var r = new sn_ws.RESTMessageV2('&lt;A REST message&gt;', 'get');
	 * var response = r.execute();
	 * var headers = response.getAllHeaders();
	 * for(var i in headers){
	 *   gs.info(headers[i].name + ': ' + headers[i].value);
	 * }
	 * 
	 * @returns List<GlideHTTPHeader> The list of headers contained in the response. Each header is represented as a GlideHTTPHeader object which contains the header name and value.
	 * 
	 */
	getAllHeaders() : List<GlideHTTPHeader>
	/**
	 * @description Get the fully-resolved query sent to the REST endpoint..
	 * This query contains the endpoint URL as well as any values assigned to variables in the REST message. Use this method only with responses to direct requests. This method is not supported for requests sent asynchronously, or requests sent using a MID server.
	 * 
	 * @example
	 * //
	 * var sm = new sn_ws.RESTMessageV2("Yahoo Finance","get"); //Might throw exception if message doesn't exist or not visible due to scope.
	 * var response = sm.execute();
	 * var queryString = response.getQueryString();
	 * 
	 * @returns string The fully-resolved query.
	 * 
	 */
	getQueryString() : string
	/**
	 * @description Get the sys\_id value of the attachment created from the response body content.
	 * If the RESTMessageV2 object associated with this response called the saveResponseBodyAsAttachment(...) function, use getResponseAttachmentSysid() to get the sys\_id of the created attachment record. Use this function when you want to perform additional operations with the new attachment record.
	 * 
	 * @returns string The sys\_id of the new attachment record.
	 * 
	 */
	getResponseAttachmentSysid() : string
	/**
	 * @description Get the numeric HTTP status code returned by the REST provider.
	 * @example
	 * //
	 * var sm = new sn_ws.RESTMessageV2("Yahoo Finance","get"); //Might throw exception if message doesn't exist or not visible due to scope.
	 * var response = sm.execute();
	 * var statusCode = response.getStatusCode();
	 * 
	 * @returns number The numeric status code returned by the REST provider, such as 200 for a successful response.
	 * 
	 */
	getStatusCode() : number
	/**
	 * @description Indicate if there was an error during the REST transaction.
	 * @example
	 * //
	 * var sm = new sn_ws.RESTMessageV2("Yahoo Finance","get"); //Might throw exception if message doesn't exist or not visible due to scope.
	 * var response = sm.execute();
	 * var error = response.haveError();
	 * 
	 * @returns boolean Returns true if there was an error, false if there was no error.
	 * 
	 */
	haveError() : boolean
	/**
	 * @description Set the amount of time the instance waits for a response from the web service provider.
	 * This method overrides the property glide.rest.outbound.ecc\_response.timeout for this REST response.
	 * 
	 * @example
	 * //
	 * var sm = new sn_ws.RESTMessageV2("Yahoo Finance","get"); //Might throw exception if message doesn't exist or not visible due to scope.
	 * var response = sm.executeAsync();
	 * response.waitForResponse(60);
	 * 
	 * @param timeoutSecs The amount of time, in seconds, to wait for this response.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	waitForResponse(timeoutSecs: number) : void
	}
/**
	 * @description The SOAPMessageV2 API allows you to send an outbound SOAP message using JavaScript.
	 * Use the SOAPResponseV2 API to manage the response returned by the SOAP provider.  	
 *   	
 * You can use this API in scoped applications, or within the global scope.
	 * 
	 */
	declare class SOAPMessageV2ScopedGlobal {
	/**
	 * @description Send the SOAP message to the endpoint.
	 * @example
	 * //
	 * var sm = new sn_ws.SOAPMessageV2("StockQuote","GetQuote"); //Might throw exception if message doesn't exist or not visible due to scope.
	 * var response = sm.execute(); //Might throw exception if http connection timed out or some issue with sending request itself because of encryption/decryption of password.
	 * 
	 * @returns SOAPResponseV2 The response returned by the SOAP provider.
	 * 
	 */
	execute() : SOAPResponseV2
	/**
	 * @description Send the SOAP message to the ECC queue.
	 * SOAP messages in the ECC queue are processed by the SOAPClient business rule.
	 * 
	 * By default, this business rule does not run asynchronously. To configure this business rule to run asynchronously, set the When value to Async and add current.update() to the end of the Script. The instance does not wait for a response from the web service provider when sending a message through the ECC queue.
	 * 
	 * @example
	 * //
	 * var sm = new sn_ws.SOAPMessageV2("StockQuote","GetQuote"); //Might throw exception if message doesn't exist or not visible due to scope.
	 * var response = sm.executeAsync();
	 * 
	 * @returns SOAPResponseV2 The response returned by the SOAP provider.  Note: Attempting to use the SOAP response object before the response has been processed may result in a timeout error.
	 * 
	 */
	executeAsync() : SOAPResponseV2
	/**
	 * @description Get the endpoint for the SOAP message.
	 * @example
	 * //
	 * var sm = new sn_ws.SOAPMessageV2("StockQuote","GetQuote"); //Might throw exception if message doesn't exist or not visible due to scope.
	 * var endpoint = sm.getEndpoint();
	 * 
	 * @returns string The URL of the SOAP web service provider.
	 * 
	 */
	getEndpoint() : string
	/**
	 * @description Returns the content of the SOAP message body.
	 * Note: Before calling the getRequestBody() method, you must call the [execute()](dev.do#!/reference/api/paris/server/sn_ws-namespace/c_SOAPMessageV2API#r_SMV2-execute "Send the SOAP message to the endpoint.") method to obtain the response object.
	 * 
	 * @example
	 * //
	 * var sm = new sn_ws.SOAPMessageV2("StockQuote","StockQuoteSoap.GetQuote"); //Might throw exception if message doesn't exist or not visible due to scope.
	 * var response = sm.execute();
	 * var requestBody = response.getRequestBody();
	 * 
	 * @returns string SOAP message body.
	 * 
	 */
	getRequestBody() : string
	/**
	 * @description Get the value for an HTTP header specified by the SOAP client.
	 * By default, this method cannot return the value for a header set automatically by the system. To grant this method access to all headers, set the property glide.http.log\_debug to true.
	 * 
	 * @example
	 * //
	 * var sm = new sn_ws.SOAPMessageV2("StockQuote","GetQuote"); //Might throw exception if message doesn't exist or not visible due to scope.
	 * var header = sm.getRequestHeader("Accept");
	 * 
	 * @param headerName The request header you want to get the value for.
	 * 
	 * @returns string The value of the specified header.
	 * 
	 */
	getRequestHeader(headerName: string) : string
	/**
	 * @description Get HTTP headers that were set by the SOAP client and the associated values.
	 * This method does not return headers set automatically by the system. To configure this method to return all headers, set the property glide.http.log\_debug to true.
	 * 
	 * @example
	 * //
	 * var sm = new sn_ws.SOAPMessageV2("StockQuote","GetQuote"); //Might throw exception if message doesn't exist or not visible due to scope.
	 * var requestHeaders = sm.getRequestHeaders();
	 * 
	 * @returns Object An Object that maps the name of each header to the associated value.
	 * 
	 */
	getRequestHeaders() : Object
	/**
	 * @description Set basic authentication headers for the SOAP message.
	 * Setting basic authentication headers using this method overrides basic authentication values defined in the SOAP message record.
	 * 
	 * @example
	 * //
	 * var sm = new sn_ws.SOAPMessageV2("StockQuote","GetQuote"); //Might throw exception if message doesn't exist or not visible due to scope.
	 * sm.setBasicAuth("username","password");
	 * 
	 * @param userName The username to use when authenticating the SOAP message.
	 * @param userPass The password for the specified user.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setBasicAuth(userName: string,userPass: string) : void
	/**
	 * @description Associate outbound requests and the resulting response record in the ECC queue.
	 * This method only applies to SOAP messages sent through a MID Server. The correlator provided populates the Agent correlator field on the ECC queue record for the response. Provide a unique correlator for each outbound request to associate the correct results in the ECC queue with the request when designing asynchronous automation through a MID Server.
	 * 
	 * @example
	 * //
	 * var sm = new sn_ws.SOAPMessageV2("StockQuote","GetQuote"); //Might throw exception if message doesn't exist or not visible due to scope.
	 * sm.setEccCorrelator("unique_id");
	 * 
	 * @param correlator A unique identifier.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setEccCorrelator(correlator: string) : void
	/**
	 * @description Override a value from the database by writing to the SOAP message payload.
	 * This method only applies to SOAP messages sent through a MID Server. Use this method when a value from the SOAP message in the database is invalid, such as when the endpoint URL is longer than the maximum SOAP endpoint field length.
	 * 
	 * These are valid values for the name parameter.
	 * 
	 * *   source: the endpoint URL.
	 * *   name: the SOAP message function to run.
	 * 
	 * @example
	 * //
	 * var sm = new sn_ws.SOAPMessageV2("StockQuote","GetQuote"); //Might throw exception if message doesn't exist or not visible due to scope.
	 * sm.setEccParameter("source","http://very.long.endpoint");
	 * 
	 * @param name The name of the ECC parameter.
	 * @param value The value to assign to the specified ECC parameter.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setEccParameter(name: string,value: string) : void
	/**
	 * @description Set the endpoint for the SOAP message.
	 * By default, the SOAP message uses the endpoint specified in the SOAP message record. Use this method to override the default. You must call this method when using the [SOAPMessageV2()](dev.do#!/reference/api/paris/server/sn_ws-namespace/c_SOAPMessageV2API#r_SMV2-SOAPMessageV2 "Instantiates an empty SOAPMessageV2 object.") constructor with no parameters.
	 * 
	 * @example
	 * //
	 * var sm = new sn_ws.SOAPMessageV2();
	 * sm.setEndpoint("http://web.service.endpoint");
	 * 
	 * @param endpoint The URL of the SOAP web service provider you want to interface with.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setEndpoint(endpoint: string) : void
	/**
	 * @description Set the amount of time the SOAP message waits for a response from the web service provider before the request times out.
	 * @example
	 * //
	 * var sm = new sn_ws.SOAPMessageV2("StockQuote","GetQuote"); //Might throw exception if message doesn't exist or not visible due to scope.
	 * sm.setHttpTimeout(6000);
	 * 
	 * @param timeoutMs The amount of time to wait for a response from the web service provider, in milliseconds.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setHttpTimeout(timeoutMs: number) : void
	/**
	 * @description Sets the log level for this message and the corresponding response.
	 * Setting a log level using the SOAPMessageV2 API overrides the log level configured on the SOAP message record. This log level may not apply if the endpoint domain is blacklisted, or if the property glide.outbound\_http\_log.override is true. To view outbound web service logs, navigate to System Logs > Outbound HTTP Requests.
	 * 
	 * @param level The log level. Valid values are basic, elevated, and all.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setLogLevel(level: string) : void
	/**
	 * @description Configure the SOAP message to be sent through a MID Server.
	 * By default, the SOAP message uses the MID Server specified in the SOAP message function record. Use this method to override the default.
	 * 
	 * @param midServerName The name of the MID Server you want to send the SOAP message through. Your instance must have an active MID Server with the specified name.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setMIDServer(midServerName: string) : void
	/**
	 * @description Set the mutual authentication protocol profile for the SOAP message.
	 * Setting a protocol profile using this method overrides the protocol profile selected for the SOAP message record.
	 * 
	 * @example
	 * //
	 * var sm = new sn_ws.SOAPMessageV2("StockQuote","GetQuote"); //Might throw exception if message doesn't exist or not visible due to scope.
	 * sm.setMutualAuth("auth_profile_name");
	 * 
	 * @param profileName The name of the protocol profile to use for mutual authentication.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setMutualAuth(profileName: string) : void
	/**
	 * @description Set the body content to send to the web service provider.
	 * When you set the body content using this method, variables in the body are not substituted for parameters from the SOAP message function record. You must explicitly define all values within the SOAP message body.
	 * 
	 * @example
	 * //
	 * var sm = new sn_ws.SOAPMessageV2("StockQuote","GetQuote"); //Might throw exception if message doesn't exist or not visible due to scope.
	 * var body = "&lt;SOAP message body&gt;";
	 * sm.setRequestBody(body);
	 * 
	 * @param requestBody The body of the SOAP message.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setRequestBody(requestBody: string) : void
	/**
	 * @description Set an HTTP header in the SOAP message to the specified value.
	 * @example
	 * //
	 * var sm = new sn_ws.SOAPMessageV2("StockQuote","GetQuote"); //Might throw exception if message doesn't exist or not visible due to scope.
	 * sm.setRequestHeader("Accept","Application/json");
	 * 
	 * @param headerName The name of the header.
	 * @param headerValue The value to assign to the specified header.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setRequestHeader(headerName: string,headerValue: string) : void
	/**
	 * @description Define the SOAP action this SOAP message performs.
	 * The WSDL for your web service provider lists SOAP actions you can perform. You must call this method when using the [SOAPMessageV2()](dev.do#!/reference/api/paris/server/sn_ws-namespace/c_SOAPMessageV2API#r_SMV2-SOAPMessageV2 "Instantiates an empty SOAPMessageV2 object.") constructor with no parameters.
	 * 
	 * @example
	 * //
	 * var sm = new sn_ws.SOAPMessageV2();
	 * sm.setSOAPAction("GetQuote");
	 * //construct SOAP message by specifying endpoint and auth
	 * sm.execute();
	 * 
	 * @param soapAction The SOAP action this SOAP message performs.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setSOAPAction(soapAction: string) : void
	/**
	 * @description Set a variable with the specified name from the SOAP message record to the specified value.
	 * XML reserved characters in the value are converted to the equivalent escaped characters.
	 * 
	 * @example
	 * //
	 * var sm = new sn_ws.SOAPMessageV2("StockQuote","GetQuote"); //Might throw exception if message doesn't exist or not visible due to scope.
	 * sm.setStringParameter("symbol","NOW");
	 * 
	 * @param name The name of the SOAP message variable.
	 * @param value The value to assign to the specified variable.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setStringParameter(name: string,value: string) : void
	/**
	 * @description Set a variable with the specified name from the SOAP message record to the specified value.
	 * This method is equivalent to setStringParameter but does not escape XML reserved characters.
	 * 
	 * @example
	 * //
	 * var sm = new sn_ws.SOAPMessageV2("StockQuote","GetQuote"); //Might throw exception if message doesn't exist or not visible due to scope.
	 * sm.setStringParameterNoEscape("symbol","NOW");
	 * 
	 * @param name The name of the SOAP message variable.
	 * @param value The value to assign to the specified variable.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setStringParameterNoEscape(name: string,value: string) : void
	/**
	 * @description Sets web service security values for the SOAP message.
	 * Setting security values using this method overwrites web service security values defined for the SOAP message record.
	 * 
	 * @example
	 * //
	 * var sm = new sn_ws.SOAPMessageV2("StockQuote","GetQuote"); //Might throw exception if message doesn't exist or not visible due to scope.
	 * sm.setWSSecurity("70d65e074f3812001f6eac118110c71a","Quote keys","UXr82cqX75Z7MaSa+EyjGA==","ba969a074f3812001f6eac118110c76d");
	 * 
	 * @param keystoreId The sys\_id of the Java or PKCS12 key store to use.
	 * @param keystoreAlias The alias that identifies the public and private keys.
	 * @param keystorePassword The password assigned to the key store record.
	 * @param certificateId The sys\_id of the trusted server certificate.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	setWSSecurity(keystoreId: string,keystoreAlias: string,keystorePassword: string,certificateId: string) : void
	/**
	 * @description Instantiates an empty SOAPMessageV2 object.
	 * When using an object instantiated this way, you must manually specify a SOAP action and endpoint.
	 * 
	 * @example
	 * //
	 * var sm = new sn_ws.SOAPMessageV2();
	 * 
	 */
	constructor() 
	/**
	 * @description Instantiate a SOAPMessageV2 object from a SOAP message record and a function associated with that record.
	 * Values such as the endpoint, authentication, or MID Server settings from the SOAP message record apply to this object.
	 * 
	 * @example
	 * //
	 * var sm = new sn_ws.SOAPMessageV2("StockQuote","GetQuote"); //Might throw exception if message doesn't exist or not visible due to scope.
	 * 
	 * @param soapMessage The SOAP message record you want to use as the base for this object.
	 * @param soapFunction The SOAP function you want to execute. Available SOAP functions depend on the WSDL supplied by the web service provider.
	 * 
	 */
	constructor(soapMessage: string,soapFunction: string) 
	}
/**
	 * @description The SOAPResponseV2 API allows you to use the data returned by an outbound SOAP message in JavaScript code.
	 * A SOAPResponseV2 object is returned by the SOAPMessageV2 methods execute() and executeAsync().  	
 *   	
 * You can use this API in scoped applications, or within the global scope.
	 * 
	 */
	declare class SOAPResponseV2ScopedGlobal {
	/**
	 * @description Get the content of the SOAP response body.
	 * @example
	 * //
	 * var body = response.getBody();
	 * 
	 * @returns string The SOAP response body.
	 * 
	 */
	getBody() : string
	/**
	 * @description Get the numeric error code if there was an error during the SOAP transaction.
	 * This error code is specific to the Now Platform, it is not an HTTP error code. Provide this error code if you require assistance from ServiceNow Technical Support.
	 * 
	 * @example
	 * //
	 * var errorCode = response.getErrorCode();
	 * 
	 * @returns number The numeric error code, such as 1 for a socket timeout.
	 * 
	 */
	getErrorCode() : number
	/**
	 * @description Get the error message if there was an error during the SOAP transaction.
	 * @example
	 * //
	 * var errorMsg = response.getErrorMessage();
	 * 
	 * @returns string The error message.
	 * 
	 */
	getErrorMessage() : string
	/**
	 * @description Get the value for a specified HTTP header.
	 * @example
	 * //
	 * var headerVal = response.getHeader("Accept");
	 * 
	 * @param name The name of the header that you want the value for, such as Set-Cookie.
	 * 
	 * @returns string The value of the specified header.
	 * 
	 */
	getHeader(name: string) : string
	/**
	 * @description Get all HTTP headers returned in the SOAP response and the associated values.
	 * Note: If a header is present more than once in the response, such as a Set-Cookie header, this function returns only the last of the duplicate headers. To return all headers including duplicates, use the getAllHeaders() function.
	 * 
	 * @example
	 * //
	 * var headers = response.getHeaders();
	 * 
	 * @returns Object An Object that maps the name of each header to the associated value.
	 * 
	 */
	getHeaders() : Object
	/**
	 * @description Return all headers contained in the response, including any duplicate headers.
	 * @example
	 * //
	 * var r = new sn_ws.SOAPMessageV2('&lt;A SOAP message&gt;', 'get');
	 * var response = r.execute();
	 * var headers = response.getAllHeaders();
	 * for(var i in headers){
	 *   gs.info(headers[i].name + ': ' + headers[i].value);
	 * }
	 * 
	 * @returns List<GlideHTTPHeader> The list of headers contained in the response. Each header is represented as a GlideHTTPHeader object which contains the header name and value.
	 * 
	 */
	getAllHeaders() : List<GlideHTTPHeader>
	/**
	 * @description Get the numeric HTTP status code returned by the SOAP provider.
	 * @example
	 * //
	 * var statusCode = response.getStatusCode();
	 * 
	 * @returns number The numeric status code returned by the SOAP provider, such as 200 for a successful response.
	 * 
	 */
	getStatusCode() : number
	/**
	 * @description Indicate if there was an error during the SOAP transaction.
	 * @example
	 * //
	 * var error = response.haveError();
	 * 
	 * @returns boolean Returns true if there was an error, false if there was no error.
	 * 
	 */
	haveError() : boolean
	/**
	 * @description Set the amount of time the instance waits for a response from the web service provider.
	 * This method overrides the property glide.soap.outbound.ecc\_response.timeout for this SOAP response.
	 * 
	 * @example
	 * //
	 * response.waitForResponse(60);
	 * 
	 * @param timeoutSecs The amount of time, in seconds, to wait for this response.
	 * 
	 * @returns void Method does not return a value
	 * 
	 */
	waitForResponse(timeoutSecs: number) : void
	/**
	 * @description Returns all cookies included in the response.
	 * @example
	 * //
	 * var cookies = response.getCookies();
	 * var i;
	 * for(i=0;i&lt;cookies.size();i++) {
	 *    gs.info(‘cookie: ‘ + cookies.get(i));
	 * }
	 * 
	 * @returns Object The list of cookies. Iterate through the list to perform operations on each cookie.
	 * 
	 */
	getCookies() : Object
	}
declare namespace sn_ws {
	}