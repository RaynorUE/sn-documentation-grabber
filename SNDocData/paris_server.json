[
    {
        "identifier": "no-namespace",
        "namespace": "",
        "classes": [
            {
                "description": "<p class=\"p\">Use the <span class=\"keyword apiname\">action</span> API to configure UI actions with which users can\n        interact. Use these scripts in the UI Action [sys_ui_action] table. For information, see\n          <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/list-administration/task/t_EditingAUIAction.html\" target=\"_blank\">UI actions</a>.</p>\n\n      <p class=\"p\">Action methods are referred to by the variable name 'action' in any server-side JavaScript.\n        To learn more, see <a class=\"extRef\" href=\"https://developer.servicenow.com/blog.do?p=/post/training-ui-action-101/\" target=\"_blank\">Creating interactions with UI actions</a>.</p>",
                "short_description": "Enables handling data for URLs in a UI action script.",
                "identifier": "ActionAPIBoth",
                "name": "action - Scoped, Global",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "Action_getGlideURI",
                        "short_description": "Gets a GlideURI object to determine the user view.",
                        "description": "",
                        "name": "getGlideURI()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var uri = action.getGlideURI();\nvar path = 'catalog_home.do';\n\nuri.set('sysparm_view', 'catalog_default');\naction.setRedirectURL(uri.toString(path));",
                                "description": "The following example shows how to get the user view and set the redirect URL to the\n        service catalog home page."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Object",
                            "description": "GlideURI object representing the URI parameter of the user view.<ul class=\"ul\" id=\"Action_getGlideURI__ul_f4h_5lj_5mb\">\n                  <li class=\"li\"><a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/c_GlideURIScopedAPI\" title=\"Enables handling the URI parameter in scoped applications.\">GlideURI</a></li>\n\n                  <li class=\"li\"><a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=GlideURIGlobalAPI;v=paris\" target=\"_blank\">GlideURI - Global</a>\n                    </li>\n\n                </ul>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "Action_getReturnURL",
                        "short_description": "Gets the URL of the return page in view after a UI action is complete.",
                        "description": "",
                        "name": "getReturnURL()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "action.getReturnURL();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "URL of the return page in view after a UI action is complete."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "Action_getURLParameter_S",
                        "short_description": "Gets the value of a URL parameter.",
                        "description": "",
                        "name": "getURLParameter(String parameterName)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "action.getURLParameter('sysparm_query');",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "parameterName",
                                "type": "String",
                                "description": "Name of the URL parameter name to be queried for the URL parameter\n                value."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "URL parameter value."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "Action_openGlideRecord_O",
                        "short_description": "Opens a page with a GlideRecord in the user view.",
                        "description": "",
                        "name": "openGlideRecord(Object gr)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "if(current.update()){\n  var inc = new GlideRecord(\"incident\");\n  inc.newRecord();\n  inc.caller_id = current.opened_for;\n  inc.short_description = current.short_description;\n  action.openGlideRecord(inc);\n}",
                                "description": "The following example shows how to include the caller name and incident description created\n        from an interaction record. For more details, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-servicenow-platform/page/administer/workspace/task/configure-agent-workspace-ui-actions.html\" target=\"_blank\">Set up custom UI actions in\n          Workspace</a>."
                            }
                        ],
                        "params": [
                            {
                                "name": "gr",
                                "type": "<a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/c_GlideRecordScopedAPI\" title=\"Scoped GlideRecord is used for database operations.\">GlideRecord</a>",
                                "description": "GlideRecord of the page to be opened in the user view."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "Action_setNoPop_B",
                        "short_description": "Indicates whether to enable or disable pop-up windows on the page in the current\n    view.",
                        "description": "",
                        "name": "setNoPop(Boolean noPop)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "\naction.setNoPop(true);",
                                "description": "The following example shows how to disable pop-up windows for a UI action."
                            }
                        ],
                        "params": [
                            {
                                "name": "noPop",
                                "type": "Boolean",
                                "description": "Flag indicating whether to enable or disable pop-up windows on the page:<ul class=\"ul\" id=\"Action_setNoPop_B__ul_qmz_fwj_nkb\">\n                  <li class=\"li\">true: Disables pop-up windows.</li>\n\n                  <li class=\"li\">false: Default. Enables pop-up windows.</li>\n\n                </ul>"
                            }
                        ],
                        "return": {
                            "type": "None",
                            "description": "Â "
                        },
                        "extras": []
                    },
                    {
                        "identifier": "Action_setRedirectURL_O",
                        "short_description": "Sets the redirect URI for this transaction, which determines the next page the user\n    sees.",
                        "description": "<p>For use cases: <ul class=\"ul\" id=\"Action_setRedirectURL_O__ul_i1s_2qk_lmb\">\n          <li class=\"li\"><a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-application-development/page/script/useful-scripts/task/t_CreateAUIRoutingAction.html\" target=\"_blank\">Create a UI routing\n            action</a></li>\n\n          <li class=\"li\"><a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-servicenow-platform/page/product/knowledge-management/task/ui-action-hrcase-article.html\" target=\"_blank\">Create knowledge articles from HR\n              cases</a></li>\n\n          <li class=\"li\"><a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/task-table/reference/r_UIActions.html\" target=\"_blank\">Define task relationships with UI\n              actions</a></li>\n\n        </ul></p>",
                        "name": "setRedirectURL(Object URL)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var fixchg = new GlideRecord(\"change_request\");\nfixchg.short_description= current.short_description;\nfixchg.comments= current.comments.getHTMLValue();\n// fixchg.parent = current.sys_id;\nfixchg.insert();\nFixChange();\n \ngs.addInfoMessage(\"Change \"+ fixchg.number+\" created\");\naction.setRedirectURL(current);\naction.setReturnURL(fixchg);\n \nfunction FixChange(){\nvar m2m = new GlideRecord('task_rel_task');\nm2m.initialize();\nm2m.child= current.sys_id;\nm2m.parent= fixchg.sys_id;\nm2m.type.setDisplayValue(\"Fixes::Fixed by\");\nm2m.insert();}",
                                "description": "The following example shows how to redirect a user to a URL from a UI action using the\n          <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-application-development/page/script/server-scripting/concept/c_ScriptableServiceCatalogVariables.html\" target=\"_blank\">current</a> variable."
                            }
                        ],
                        "params": [
                            {
                                "name": "URL",
                                "type": "Object",
                                "description": "URL to set as the redirect. You can provide the URL as a string or a <a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/c_GlideRecordScopedAPI\" title=\"Scoped GlideRecord is used for database operations.\">GlideRecord</a>. If you pass the URL as a GlideRecord, this value takes the\n                focus to that record's form."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "Action_setReturnURL_S",
                        "short_description": "Sets the return URI for this transaction after a UI action is complete. You can use\n    this method to determine what page the user has in view when they return from\n    submit.",
                        "description": "",
                        "name": "setReturnURL(Object URL)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var change = new GlideRecord(\"change_request\");\nchange.initialize();\nchange.short_description = current.short_description;\nchange.description = current.u_details;\nchange.cmdb_ci = current.u_service;\nchange.priority = current.priority;\nchange.requested_by = current.caller_id;\nchange.assignment_group.setDisplayValue('Change &amp; Release');\nchange.u_status = 'New';\nchange.parent = current.number;\nchange.applyTemplate(\"standard_rfc\");\ncurrent.rfc = change.insert();\ncurrent.comments = 'Change ' + change.number + ' created.';\n\nvar mySysID = current.update();\n\ngs.addInfoMessage(\"Change \" + change.number + \" created\");\naction.setRedirectURL(change);\naction.setReturnURL(current);",
                                "description": "The following example enables the user to select the UI action to create a change record\n        using information from the problem record and the change template. After the change, the\n        user returns to <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-application-development/page/script/server-scripting/concept/c_ScriptableServiceCatalogVariables.html\" target=\"_blank\">current</a> view. For more\n        information, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/form-administration/reference/r_ScriptedTemplates.html\" target=\"_blank\">Scripted templates</a>. For more\n        use cases, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/task-table/reference/r_UIActions.html\" target=\"_blank\">Define task relationships with UI\n          actions</a>."
                            }
                        ],
                        "params": [
                            {
                                "name": "URL",
                                "type": "Object",
                                "description": "URI to set as the return location after a UI action is complete. You can\n                provide the URL as a string or a <a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/c_GlideRecordScopedAPI\" title=\"Scoped GlideRecord is used for database operations.\">GlideRecord</a>."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "Action_setURLParameter_S_S",
                        "short_description": "Sets a URL parameter name and value.",
                        "description": "",
                        "name": "setURLParameter(String parameterName, String parameterValue)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "action.setURLParameter('sysparm_query', 'priority=2^active=true');",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "parameterName",
                                "type": "String",
                                "description": "Name of the URL parameter."
                            },
                            {
                                "name": "parameterValue",
                                "type": "String",
                                "description": "Value of the parameter."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "Use these methods to generate a hash for the certificate, sign data using a private key, and\n   generate a message authentication code.",
                "short_description": "APIs available for encrypting certificates in scoped applications.",
                "identifier": "c_CertificateEncryptionScopedAPI",
                "name": "CertificateEncryption",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "r-SCE-CE",
                        "short_description": "Instantiates a CertificateEncryption object in a scoped application.",
                        "description": "",
                        "name": "CertificateEncryption()",
                        "type": "Constructor",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SCE-generateMac_S_S_S",
                        "short_description": "Generates the Message Authentication Code (MAC), which is used to authenticate a\n    message.",
                        "description": "",
                        "name": "generateMac(String key, String algorithm, String data)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var mac = new CertificateEncryption;\nvar key = \"sample_key\"; \nkey = gs.base64Encode(key);\nmac.generateMac(key, \"HmacSHA256\", \"sample_data\");",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "key",
                                "type": "String",
                                "description": "Key to use to sign the message. Must be Base64 encoded."
                            },
                            {
                                "name": "algorithm",
                                "type": "String",
                                "description": "Algorithm to use to generate the MAC: HmacSHA256, HmacSHA1, HmacMD5, and so\n                on."
                            },
                            {
                                "name": "data",
                                "type": "String",
                                "description": "Data to process."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "MAC in base64 format."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SCE-getThumbPrint_S_S",
                        "short_description": "Generates a hash (SHA-1, SHA-256, and so on) for the certificate from Trust Store\n    Cert.",
                        "description": "",
                        "name": "getThumbPrint(String certificateID, String algorithm)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "certificateID",
                                "type": "String",
                                "description": "sys_id of the certificate record in the X.509 Certificate [sys_certificate]\n                table."
                            },
                            {
                                "name": "algorithm",
                                "type": "String",
                                "description": "SHA-1, SHA-256, and so on"
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "Thumbprint in base64 format."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SCE-getThumbPrintFromKeyStore_S_S_S",
                        "short_description": "Generates a hash (SHA-1, SHA-256, and so on) for the certificate from the keystore\n    entry.",
                        "description": "",
                        "name": "getThumbPrintFromKeystore(String certificateID, String alias, String algorithm)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "certificateID",
                                "type": "String",
                                "description": "sys_id of the certificate record in the X.509 Certificate [sys_certificate]\n                table."
                            },
                            {
                                "name": "alias",
                                "type": "String",
                                "description": "Alias name for the certificate."
                            },
                            {
                                "name": "algorithm",
                                "type": "String",
                                "description": "SHA-1, SHA-256, and so on."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "Thumbprint in base64 format."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SCE-sign_certificateID_S_S_S_S",
                        "short_description": "Signs the data using the private key and the specified algorithm.",
                        "description": "",
                        "name": "sign(String certificateID, String alias, String aliaspassword, String algorithm, String datatosign)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var ce = new CertificateEncryption;\nce.sign(\"recordID\", \"alias\", \"password\", \"SHA1withRSA\", \"sign this data\");",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "certificateID",
                                "type": "String",
                                "description": "sys_id of the certificate record in the X.509 Certificate [sys_certificate]\n                table."
                            },
                            {
                                "name": "alias",
                                "type": "String",
                                "description": "Private key name."
                            },
                            {
                                "name": "aliaspassword",
                                "type": "String",
                                "description": "Password for the private key."
                            },
                            {
                                "name": "algorithm",
                                "type": "String",
                                "description": "Algorithm to use. Must be one of the following values:<ul class=\"ul\" id=\"r_SCE-sign_certificateID_S_S_S_S__ul_pr3_nvv_pkb\">\n                  <li class=\"li\">NONEwithRSA</li>\n\n                  <li class=\"li\">MD2withRSA</li>\n\n                  <li class=\"li\">MD5withRSA</li>\n\n                  <li class=\"li\">SHA1withRSA</li>\n\n                  <li class=\"li\">SHA224withRSA</li>\n\n                  <li class=\"li\">SHA256withRSA</li>\n\n                  <li class=\"li\">SHA384withRSA</li>\n\n                  <li class=\"li\">SHA512withRSA</li>\n\n                  <li class=\"li\">NONEwithDSA</li>\n\n                  <li class=\"li\">SHA1withDSA</li>\n\n                  <li class=\"li\">SHA224withDSA</li>\n\n                  <li class=\"li\">SHA256withDSA</li>\n\n                  <li class=\"li\">NONEwithECDSA</li>\n\n                  <li class=\"li\">SHA1withECDSA</li>\n\n                  <li class=\"li\">SHA224withECDSA</li>\n\n                  <li class=\"li\">SHA256withECDSA</li>\n\n                  <li class=\"li\">SHA384withECDSA</li>\n\n                  <li class=\"li\">SHA512withECDSA</li>\n\n                </ul>"
                            },
                            {
                                "name": "datatosign",
                                "type": "String",
                                "description": "Data to sign."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "Signed data in base64 format."
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "You cannot instantiate objects of this type. Objects of this type are created automatically\n      and are accessible only in  script steps and inline scripts.",
                "short_description": "A FlowScriptAPI object allows you to access <span class=\"ph\">Flow Designer</span> context\n    details from script steps and inline scripts.",
                "identifier": "FlowScriptAPI",
                "name": "FlowScriptAPI - Scoped",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "FlowScript-getContextID",
                        "short_description": "Returns the context ID of the running flow.",
                        "description": "",
                        "name": "getContextID()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var contextId = FlowScriptAPI.getContextID();\nreturn contextId;",
                                "description": "This example assumes you have created a flow containing a <span class=\"ph uicontrol\">Log</span>\n        action. This inline script generates the content of the Log message."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The sys_id of the running flow."
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "The scoped <span class=\"keyword apiname\">GlideAggregate</span> class is an extension of <span class=\"keyword apiname\">GlideRecord</span>\n   and provides database aggregation (COUNT, SUM, MIN, MAX, AVG) queries. This functionality can be\n   helpful when creating customized reports or in calculations for calculated fields. The\n    <span class=\"keyword apiname\">GlideAggregate</span> class works only on number fields.<br/><br/>When you use <span class=\"keyword apiname\">GlideAggregate</span> on currency or price fields, you are working\n   with the reference currency value. Be sure to convert the aggregate values to the user's session\n   currency for display. Because the conversion rate between the currency or price value (displayed\n   value) and its reference <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/currency/concept/currency.html\" target=\"_blank\">currency</a>\n   \n    value (aggregation value)\n   might change, the result may not be what the user expects.<br/><br/><div class=\"note note\"><span class=\"notetitle\">Note:</span> When using an on-premise system, the database server time zone must be set to GMT/UTC for\n    this class to work properly.</div>",
                "short_description": "<span class=\"keyword apiname\">GlideAggregate</span> enables you to easily create database aggregation\n  queries.",
                "identifier": "c_GlideAggregateScopedAPI",
                "name": "GlideAggregate",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "r_ScopedGlideAggregateGlideAggregate_String",
                        "short_description": "Creates a GlideAggregate object on the specified table.",
                        "description": "",
                        "name": "GlideAggregate(String tableName)",
                        "type": "Constructor",
                        "examples": [
                            {
                                "script": "var count = new GlideAggregate('incident');",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "tableName",
                                "type": "String",
                                "description": "Name of the table."
                            }
                        ],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideAggregateAddAggregate_String_String",
                        "short_description": "Adds an aggregate to a database query.",
                        "description": "",
                        "name": "addAggregate(String agg, String name)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var incidentGA = new GlideAggregate('incident');\n\nincidentGA.addQuery('category', 'software');\n\nincidentGA.setGroup(false);\n\nincidentGA.addAggregate('COUNT', 'sys_mod_count');\nincidentGA.addAggregate('SUM', 'sys_mod_count');\nincidentGA.addAggregate('AVG', 'sys_mod_count');\nincidentGA.addAggregate('MIN', 'sys_mod_count');\nincidentGA.addAggregate('MAX', 'sys_mod_count');\nincidentGA.addAggregate('STDDEV', 'sys_mod_count');\n\nincidentGA.query();\n\nif (incidentGA.next()) {\n  gs.info('COUNT: ' + incidentGA.getAggregate('COUNT', 'sys_mod_count'));\n  gs.info('SUM: ' + incidentGA.getAggregate('SUM', 'sys_mod_count'));\n  gs.info('AVG: ' + incidentGA.getAggregate('AVG', 'sys_mod_count'));\n  gs.info('MIN: ' + incidentGA.getAggregate('MIN', 'sys_mod_count'));\n  gs.info('MAX: ' + incidentGA.getAggregate('MAX', 'sys_mod_count'));\n  gs.info('STDDEV: ' + incidentGA.getAggregate('STDDEV', 'sys_mod_count'));\n}",
                                "description": "The following example shows how to add aggregates to a query on the category and software\n        fields in the Incident [incident] table."
                            }
                        ],
                        "params": [
                            {
                                "name": "agg",
                                "type": "String",
                                "description": "Name of an aggregate to include in a database query.<div class=\"p\">Valid values:<ul class=\"ul\" id=\"r_ScopedGlideAggregateAddAggregate_String_String__d96396e438\">\n                  <li class=\"li\">AVG</li>\n\n                  <li class=\"li\">COUNT</li>\n\n                  <li class=\"li\">MIN</li>\n\n                  <li class=\"li\">MAX</li>\n\n                  <li class=\"li\">STDDEV</li>\n\n                  <li class=\"li\">SUM</li>\n\n                </ul>\n</div>"
                            },
                            {
                                "name": "name",
                                "type": "String",
                                "description": "Optional. Name of the field to group the results of the aggregation\n                by.<p class=\"p\">Default: Null</p>"
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideAggregateAddEncodedQuery_String",
                        "short_description": "Adds an encoded query to the other queries that may have been set for this\n    aggregate.",
                        "description": "",
                        "name": "addEncodedQuery(String query)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "//Number of incidents varies depending on the current state\n//of the incident table\nvar count = new GlideAggregate('incident');\ncount.addEncodedQuery('active=true');\ncount.addAggregate('COUNT');\ncount.query();\nvar incidents = 0;\nif (count.next())\n   incidents = count.getAggregate('COUNT');\ngs.info(incidents);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "query",
                                "type": "String",
                                "description": "An encoded query to add to the aggregate."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideAggregateAddNotNullQuery_String",
                        "short_description": "Adds a not null query to the aggregate.",
                        "description": "",
                        "name": "addNotNullQuery(String fieldName)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var count = new GlideAggregate('incident');\n  count.addNotNullQuery('short_description');\n  count.query();   // Issue the query to the database to get all records\n  while (count.next()) {   \n     // add code here to process the aggregate\n  }",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "fieldname",
                                "type": "String",
                                "description": "The name of the field."
                            }
                        ],
                        "return": {
                            "type": "GlideQueryCondition",
                            "description": "The scoped query condition."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideAggregateAddNullQuery_String",
                        "short_description": "Adds a null query to the aggregate.",
                        "description": "",
                        "name": "addNullQuery(String fieldName)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var count = new GlideAggregate('incident');\n  count.addNullQuery('short_description');\n  count.query();   // Issue the query to the database to get all records\n  while (count.next()) {   \n     // add code here to process the aggregate\n  }",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "fieldName",
                                "type": "String",
                                "description": "The name of the field."
                            }
                        ],
                        "return": {
                            "type": "GlideQueryCondition",
                            "description": "The scoped query condition."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideAggregateAddQuery_String_String_String",
                        "short_description": "Adds a query to the aggregate.",
                        "description": "",
                        "name": "addQuery(String name, String operator, String value)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "//Number of incidents varies depending on the current state\n//of the incident table\nvar count = new GlideAggregate('incident');\ncount.addQuery('active', '=','true');\ncount.addAggregate('COUNT', 'category');\ncount.query();  \nwhile (count.next()) {\n   var category = count.category;\n   var categoryCount = count.getAggregate('COUNT', 'category');\n   gs.info(\"There are currently \" + categoryCount + \" incidents with a category of \" + category);\n}",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "name",
                                "type": "String",
                                "description": "The query to add."
                            },
                            {
                                "name": "operator",
                                "type": "String",
                                "description": "The operator for the query."
                            },
                            {
                                "name": "value",
                                "type": "String",
                                "description": "The list of values to include in the query."
                            }
                        ],
                        "return": {
                            "type": "GlideQueryCondition",
                            "description": "The query condition."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideAggAddTrend_S_S",
                        "short_description": "Adds a trend for a specified field.",
                        "description": "",
                        "name": "addTrend(String fieldName, String timeInterval)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var ga = new GlideAggregate('incident');\nga.addAggregate('COUNT'); // Count all incidents opened each quarter\nga.addTrend('opened_at', 'quarter');\nga.query();\nwhile(ga.next()) {\ngs.info([ga.getValue('timeref'), ga.getAggregate('COUNT')]);\n}",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "fieldName",
                                "type": "String",
                                "description": "Name of the field for which trending should occur."
                            },
                            {
                                "name": "timeInterval",
                                "type": "String",
                                "description": "Time interval for the trend. <div class=\"p\">Valid values: <ul class=\"ul\" id=\"r_ScopedGlideAggAddTrend_S_S__ul_rm5_xqq_gnb\">\n                    <li class=\"li\">date</li>\n\n                    <li class=\"li\">dayofweek</li>\n\n                    <li class=\"li\">hour</li>\n\n                    <li class=\"li\">quarter</li>\n\n                    <li class=\"li\">value</li>\n\n                    <li class=\"li\">week</li>\n\n                    <li class=\"li\">year</li>\n\n                  </ul>\n</div>"
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideAggregateGetAggregate_String_String",
                        "short_description": "Returns the value of an aggregate from the current record.",
                        "description": "",
                        "name": "getAggregate(String agg, String name)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var count = new GlideAggregate('incident');\ncount.addAggregate('COUNT');\ncount.query();\nvar incidents = 0;\nif (count.next()) {\n  incidents = count.getAggregate('COUNT');\n}\n//Number of incidents varies depending on the current state\n//of the incident table\ngs.info('Number of incidents: ' + incidents);",
                                "description": "Shows an aggregation that returns the number of records in the Incident table."
                            },
                            {
                                "script": "var ga = new GlideAggregate('laptop_tracker');\nga.addAggregate('SUM', 'cost');\nga.groupBy('name');\nga.query();\nwhile (ga.next()) {\n  gs.info('Aggregate results ' + ga.getValue('name') + ' =&gt; ' + ga.getAggregate('SUM', 'cost'));\n}",
                                "description": "Shows the aggregation of an FX Currency field."
                            }
                        ],
                        "params": [
                            {
                                "name": "agg",
                                "type": "String",
                                "description": "The type of the aggregate. For example, <samp class=\"ph codeph\">SUM</samp> or\n                  <samp class=\"ph codeph\">COUNT</samp>."
                            },
                            {
                                "name": "name",
                                "type": "String",
                                "description": "Name of the field on which to perform the aggregation."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "The value of the aggregation.<div class=\"p\">If the values being aggregated are FX Currency\n                  values, the returned value is in the format\n                    <samp class=\"ph codeph\">&lt;currency_code;currency_value&gt;</samp>, such as:\n                    <samp class=\"ph systemoutput\">USD;134.980000</samp>. <div class=\"note note\"><span class=\"notetitle\">Note:</span> If the specified field\n                    contains FX Currency values of mixed currency types, the method is not able to\n                    aggregate the values and returns a semicolon (;).</div>\n</div>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideAggregateGetAggregateEncodedQuery",
                        "short_description": "Gets the query necessary to return the current aggregate.",
                        "description": "",
                        "name": "getAggregateEncodedQuery()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var count = new GlideAggregate('incident');\ncount.addAggregate('MIN', 'sys_mod_count');\ncount.groupBy('category');\ncount.query();  \nwhile (count.next()) {\n    gs.info(count.getAggregateEncodedQuery());\n}",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The encoded query to get the aggregate."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideAggregateGetEncodedQuery",
                        "short_description": "Retrieves the encoded query.",
                        "description": "",
                        "name": "getEncodedQuery()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var count = new GlideAggregate('incident');\ncount.addAggregate('MIN', 'sys_mod_count');\ncount.addAggregate('MAX', 'sys_mod_count');\ncount.addAggregate('AVG', 'sys_mod_count');\ncount.groupBy('category');\ncount.query();\ngs.info(count.getEncodedQuery());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The encoded query."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideAggregateGetRowCount",
                        "short_description": "Retrieves the number of rows in the GlideAggregate object.",
                        "description": "",
                        "name": "getRowCount()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var count = new GlideAggregate('incident');\n  count.addAggregate('MIN', 'sys_mod_count');\n  count.addAggregate('MAX', 'sys_mod_count');\n  count.addAggregate('AVG', 'sys_mod_count');\n  count.groupBy('category');\n  count.query();\n  gs.info(count.getRowCount());\n  while (count.next()) {  \n     var min = count.getAggregate('MIN', 'sys_mod_count');\n     var max = count.getAggregate('MAX', 'sys_mod_count');\n     var avg = count.getAggregate('AVG', 'sys_mod_count');\n     var category = count.category.getDisplayValue();\n     gs.info(category + \" Update counts: MIN = \" + min + \" MAX = \" + max + \" AVG = \" + avg);\n  }",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Number",
                            "description": "The number of rows in the GlideAggregate object."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideAggregateGetTableName",
                        "short_description": "Retrieves the table name associated with this GlideAggregate object.",
                        "description": "",
                        "name": "getTableName()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var count = new GlideAggregate('incident');\ncount.addAggregate('MIN', 'sys_mod_count');\ncount.addAggregate('MAX', 'sys_mod_count');\ncount.addAggregate('AVG', 'sys_mod_count');\ncount.groupBy('category');\ncount.query();\ngs.info(count.getTableName());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The table name."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideAggregateGetValue_String",
                        "short_description": "Gets the value of a field.",
                        "description": "",
                        "name": "getValue(String name)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var count = new GlideAggregate('incident');\n  count.addAggregate('MIN', 'sys_mod_count');\n  count.addAggregate('MAX', 'sys_mod_count');\n  count.addAggregate('AVG', 'sys_mod_count');\n  count.groupBy('category');\n  count.query();   \n  while (count.next()) {  \n     var min = count.getAggregate('MIN', 'sys_mod_count');\n     var max = count.getAggregate('MAX', 'sys_mod_count');\n     var avg = count.getAggregate('AVG', 'sys_mod_count');\n     var category = count.category.getDisplayValue();\n  }\ngs.info(\"Current category is: \" + count.getValue('category'));",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "name",
                                "type": "String",
                                "description": "The name of the field."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "The value of the field."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideAggregateGroupBy_String",
                        "short_description": "Provides the name of a field to use in grouping the aggregates.",
                        "description": "<p>May be called numerous times to set multiple group fields.</p>",
                        "name": "groupBy(String name)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var count = new GlideAggregate('incident');\ncount.addAggregate('MIN', 'sys_mod_count');\ncount.addAggregate('MAX', 'sys_mod_count');\ncount.addAggregate('AVG', 'sys_mod_count');\ncount.groupBy('category');\ncount.query();   \nwhile (count.next()) {  \n     var min = count.getAggregate('MIN', 'sys_mod_count');\n     var max = count.getAggregate('MAX', 'sys_mod_count');\n     var avg = count.getAggregate('AVG', 'sys_mod_count');\n     var category = count.category.getDisplayValue();\n     gs.info(category + \" Update counts: MIN = \" + min + \" MAX = \" + max + \" AVG = \" + avg);\n}",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "name",
                                "type": "String",
                                "description": "Name of the field."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideAggregateHasNext",
                        "short_description": "Determines if there are any more records in the GlideAggregate object.",
                        "description": "",
                        "name": "hasNext()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var agg = new GlideAggregate('incident');\nagg.addAggregate('AVG', 'sys_mod_count');\nagg.groupBy('category');\nagg.query();\nwhile (agg.hasNext()) {\n    agg.next();\n    var avg = agg.getAggregate('AVG', 'sys_mod_count');\n    var category = agg.category.getDisplayValue();\n    gs.info(category + ': AVG = ' + avg);\n}",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "True if there are more results in the query set."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideAggregateNext",
                        "short_description": "Moves to the next record in the GlideAggregate.",
                        "description": "",
                        "name": "next()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var count = new GlideAggregate('incident');\ncount.addAggregate('COUNT');\ncount.query();\nvar incidents = 0;\nif (count.next()) {\n   incidents = count.getAggregate('COUNT');\n   gs.info(incidents);\n}",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "True if there are more records in the query set; otherwise, false."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideAggregateOrderBy_String",
                        "short_description": "Orders the aggregates using the value of the specified field. The field will also be\n    added to the group-by list.",
                        "description": "",
                        "name": "orderBy(String name)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var agg = new GlideAggregate('incident');\nagg.addAggregate('count', 'category'); \nagg.orderBy('category'); \nagg.query(); \nwhile (agg.next()) { \n  var category = agg.category;\n  var count = agg.getAggregate('count', 'category');\n  var agg2 = new GlideAggregate('incident');   \n  agg2.addAggregate('count', 'category');\n  agg2.orderBy('category');\n  gs.info(category + \": Current number of incidents:\" + count);\n}",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "name",
                                "type": "String",
                                "description": "Name of the field to order the aggregates by."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideAggregateOrderByAggregate_String_String",
                        "short_description": "Orders the aggregates based on the specified aggregate and field.",
                        "description": "",
                        "name": "orderByAggregate(String agg, String fieldName)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "ga.addAggregate(âCOUNTâ, âcategoryâ);\n \nga.orderByAggregate('count', 'category');\n \nga.query();\n \nwhile(ga.next()) {\n  gs.info(âCategory â + ga.category + â â + ga.getAggregate(âCOUNTâ, âcategoryâ));\n  }",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "agg",
                                "type": "String",
                                "description": "Type of aggregation."
                            },
                            {
                                "name": "fieldName",
                                "type": "String",
                                "description": "Name of the field to aggregate."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideAggregateOrderByDesc_String",
                        "short_description": "Sorts the aggregates in descending order based on the specified field. The field will\n    also be added to the group-by list.",
                        "description": "",
                        "name": "orderByDesc(String name)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var agg = new GlideAggregate('incident');\nagg.addAggregate('count', 'category'); \nagg.orderByDesc('category'); \nagg.query(); \nwhile (agg.next()) { \n  var category = agg.category;\n  var count = agg.getAggregate('count', 'category');\n  var agg2 = new GlideAggregate('incident');   \n  agg2.addAggregate('count', 'category');\n  agg2.orderBy('category');\n  gs.info(category + \": Current number of incidents:\" + count);\n}",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "name",
                                "type": "String",
                                "description": "Name of the field."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideAggregateQuery",
                        "short_description": "Issues the query and gets the results.",
                        "description": "",
                        "name": "query()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var count = new GlideAggregate('incident');\ncount.addAggregate('COUNT');\ncount.query();\nvar incidents = 0;\nif (count.next()) {\n   incidents = count.getAggregate('COUNT');\n}\ngs.info('Number of incidents: ' + incidents);",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideAggregateSetGroup_Boolean",
                        "short_description": "Sets whether the results are to be grouped.",
                        "description": "",
                        "name": "setGroup(Boolean b)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var ga = new GlideAggregate('incident');\nga.addAggregate('COUNT', 'category');\n \nga.setGroup(true);\nga.groupBy(\"category\");\n \nga.query();\n \nwhile(ga.next()) {\n  gs.info('Category ' + ga.category + ' ' + ga.getAggregate('COUNT', 'category'));\n  }",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "b",
                                "type": "Boolean",
                                "description": "When true the results are grouped."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "Application properties enable service providers to customize application functionality based\n      on the domain. Instead of only having a single system property (System Property\n      [sys_properties] table) that defines the functionality for all domains and users, application\n      properties can be implemented to define functionality for specific domains.<br/><br/>To access this API you must activate the Domain Support - Domain Extensions Installer\n      (com.glide.domain.msp_extensions.installer) plugin.<br/><br/>For additional information on domain-specific application properties, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/company-and-domain-separation/concept/ds-application-properties.html\" target=\"_blank\">Domain-separated application\n        properties</a>.",
                "short_description": "The <span class=\"keyword apiname\">GlideApplicationProperty</span> API provides the ability to get and set\n    application property values for a specific domain.",
                "identifier": "GlideApplicationProperty",
                "name": "GlideApplicationProperty - Scoped, Global",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "GlideAppProp-getValue_S_S",
                        "short_description": "Returns the value for the specified application property and domain sys_id.",
                        "description": "<p>The list of available application properties is located in the Application Properties\n        [sys_application_property] and Application Property Values [sys_application_property_value]\n        tables.</p><p><div class=\"note note\"><span class=\"notetitle\">Note:</span> If the specified domain is a child domain, and there is not an application property\n          for the child domain, the method returns the parent domain application property, if\n          available.</div></p>",
                        "name": "getValue(String name, String domainSysId)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var MY_APP_PROP_NAME = 'my-app-prop';\nvar ACME_DOMAIN_ID = 'c90d4b084a362312013398f051272c0d';\nvar CISCO_DOMAIN_ID = 'c90f91924a362312001bdefae0f35d68';\n\n// create a new app_config entry:\nvar now_GR = new GlideRecord('sys_application_property');\nnow_GR.name = MY_APP_PROP_NAME; \nnow_GR.default_value = 'my-app-prop-default_value'; \nnow_GR.insert();\n\n// Override the value for ACME domain, catch exception if user can't access the specified domain\ntry {\n  GlideApplicationProperty.setValue(MY_APP_PROP_NAME, 'prop-value-ACME', ACME_DOMAIN_ID);\n  gs.info('Value for ACME domain: ' + GlideApplicationProperty.getValue(MY_APP_PROP_NAME, ACME_DOMAIN_ID));\n} catch (ex) {\n  gs.info('Exception: ' + ex);\n}\n\n// Override the value for Cisco domain -- assuming that the current session domain is Cisco. Notice that we don't pass domain-id explicitly\nsession.setDomainID(CISCO_DOMAIN_ID); // NOTE: this API is not available from non-global scope (use domain-picker to switch to Cisco)\ngs.info('Domain: ' + session.getCurrentDomainID());\nGlideApplicationProperty.setValue(MY_APP_PROP_NAME, 'prop-value-Cisco');\ngs.info('Value for current session (Cisco) domain: ' + GlideApplicationProperty.getValue(MY_APP_PROP_NAME));\n",
                                "description": "This example shows how to create a new application property and override its value for ACME\n        and Cisco domains."
                            }
                        ],
                        "params": [
                            {
                                "name": "name",
                                "type": "String",
                                "description": "Name of the application property to return.<div class=\"note note\"><span class=\"notetitle\">Note:</span> If the application is not\n                  global, you must prefix the name of the sys_application_property with the\n                  application's scope.</div>"
                            },
                            {
                                "name": "domainSysId",
                                "type": "String",
                                "description": "Optional. Sys_id of the domain associated with the application\n                  property.<p class=\"p\">Default: Session domain</p>"
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "Value of the specified application property for the specified domain. If\n                  <span class=\"keyword parmname\">domainSysId</span> is not passed in the call, then returns the\n                session domain.<p class=\"p\">If the specified application property doesnât exist, returns the\n                  same-name system property value. </p>\n<p class=\"p\">If the user does not have access rights to\n                  the specified domain, throws an exception and no value is returned. </p>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GlideAppProp-setValue_S_S_S",
                        "short_description": "Stores the specified value in the specified application property for the specified\n    domain, or the current session domain if not specified.",
                        "description": "<p>The following are guidelines for using this method:<ul class=\"ul\" id=\"GlideAppProp-setValue_S_S_S__ul_m5x_2pc_llb\">\n          <li class=\"li\">The application property is not created if its name contains one of the following\n            strings: <ul class=\"ul\" id=\"GlideAppProp-setValue_S_S_S__ul_znl_rrc_llb\">\n              <li class=\"li\">glide.properties.blacklist</li>\n\n              <li class=\"li\">glide.properties.no_db_override</li>\n\n              <li class=\"li\">glide.properties.safe_overrides</li>\n\n              <li class=\"li\">glide.properties.maint_write_roles</li>\n\n            </ul>\n</li>\n\n          <li class=\"li\">The application property is not created if there is an existing system property with\n            the same name, and the system property is marked as private.</li>\n\n          <li class=\"li\">The application property is not created if there is an existing system property and\n            the application property does not reference it.</li>\n\n          <li class=\"li\">The name of the application property in the sys_application_property table is prefixed\n            with the application's scope if it is not global.</li>\n\n          <li class=\"li\">This method cannot be called from a different scope.</li>\n\n        </ul></p>",
                        "name": "setValue(String name, String value, String domainSysId)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var MY_APP_PROP_NAME = 'my-app-prop';\nvar ACME_DOMAIN_ID = 'c90d4b084a362312013398f051272c0d';\nvar CISCO_DOMAIN_ID = 'c90f91924a362312001bdefae0f35d68';\n\n// create a new app_config entry:\nvar now_GR = new GlideRecord('sys_application_property');\nnow_GR.name = MY_APP_PROP_NAME; \nnow_GR.default_value = 'my-app-prop-default_value'; \nnow_GR.insert();\n\n// Override the value for ACME domain, catch exception if user can't access the specified domain\ntry {\n  GlideApplicationProperty.setValue(MY_APP_PROP_NAME, 'prop-value-ACME', ACME_DOMAIN_ID);\n  gs.info('Value for ACME domain: ' + GlideApplicationProperty.getValue(MY_APP_PROP_NAME, ACME_DOMAIN_ID));\n} catch (ex) {\n  gs.info('Exception: ' + ex);\n}\n\n// Override the value for Cisco domain -- assuming that the current session domain is Cisco. Notice that we don't pass domain-id explicitly\nsession.setDomainID(CISCO_DOMAIN_ID); // NOTE: this API is not available from non-global scope (use domain-picker to switch to Cisco)\ngs.info('Domain: ' + session.getCurrentDomainID());\nGlideApplicationProperty.setValue(MY_APP_PROP_NAME, 'prop-value-Cisco');\ngs.info('Value for current session (Cisco) domain: ' + GlideApplicationProperty.getValue(MY_APP_PROP_NAME));\n",
                                "description": "This example shows how to create a new application property and override its value for ACME\n        and Cisco domains."
                            }
                        ],
                        "params": [
                            {
                                "name": "name",
                                "type": "String",
                                "description": "Name of the application property to save.<div class=\"note note\"><span class=\"notetitle\">Note:</span> If the application is not\n                  global, you must prefix the name of the sys_application_property with the\n                  application's scope.</div>"
                            },
                            {
                                "name": "value",
                                "type": "String",
                                "description": "Value to store in the specified application property."
                            },
                            {
                                "name": "domainSysId",
                                "type": "String",
                                "description": "Optional. Sys_id of the domain associated with the application\n                  property.<p class=\"p\">Default: Current session domain</p>"
                            }
                        ],
                        "return": {
                            "type": "Boolean",
                            "description": "Flag that indicates whether the save operation was successful.<div class=\"p\">Valid\n                    values:<ul class=\"ul\" id=\"GlideAppProp-setValue_S_S_S__ul_s11_ylc_llb\">\n                    <li class=\"li\">true: Value was successfully saved.</li>\n\n                    <li class=\"li\">false: An error occurred and the application property was not\n                      created/updated.</li>\n\n                  </ul>\n</div>\n<p class=\"p\">If the user does not have access rights to the specified domain,\n                  throws an exception and no value is returned. </p>"
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "Use the <span class=\"keyword apiname\">GlideCalendarDateTime</span> methods to perform date-time operations, such\n   as instantiating a GlideCalendarDateTime object, performing date-time calculations, formatting a\n   date-time, or converting between date-time formats.",
                "short_description": "The <span class=\"keyword apiname\">GlideCalendarDateTime</span> class provides methods for performing\n  operations on GlideCalendarDateTime objects, such as instantiating GlideCalendarDateTime objects\n  or working with glide_date_time fields.",
                "identifier": "GlideCalendarDateTimeAPI",
                "name": "GlideCalendarDateTime",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "GCDT-GlideCalendarDateTime",
                        "short_description": "Instantiates a new GlideCalendarDateTime object with the current date and time in GMT\n    format.",
                        "description": "",
                        "name": "GlideCalendarDateTime()",
                        "type": "Constructor",
                        "examples": [
                            {
                                "script": "var gcdt = new GlideCalendarDateTime();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GCDT-GlideCalendarDateTime_GCDT",
                        "short_description": "Instantiates a new GlideCalendarDateTime object set to the time of a specified\n    GlideCalendarDateTime object in GMT format.",
                        "description": "",
                        "name": "GlideCalendarDateTime(GlideCalendarDateTime gcDT)",
                        "type": "Constructor",
                        "examples": [
                            {
                                "script": "var start = new GlideCalendarDateTime(\"2011-01-01 12:00:00\");\nvar end = new GlideCalendarDateTime(start);\ngs.info(end);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "gcDT",
                                "type": "GlideCalendarDateTime",
                                "description": "Object used to set the time of the new object."
                            }
                        ],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GCDT-GlideCalendarDateTime_S",
                        "short_description": "Instantiates a new GlideCalendarDateTime object from a date and time value in the UTC\n    time zone specified with the format yyyy-MM-dd HH:mm:ss.",
                        "description": "",
                        "name": "GlideCalendarDateTime(String dateTime)",
                        "type": "Constructor",
                        "examples": [
                            {
                                "script": "var gcdt = new GlideCalendarDateTime(\"2011-01-01 12:00:00\");",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "dateTime",
                                "type": "String",
                                "description": "UTC date and time using the format yyyy-MM-dd HH:mm:ss."
                            }
                        ],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GCDT-add_GT",
                        "short_description": "Adds a GlideTime object to the current GlideCalendarDateTime object.",
                        "description": "",
                        "name": "add(GlideTime time)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gcdt = new GlideCalendarDateTime(\"2011-08-31 08:00:00\");\nvar gtime1 = new GlideTime();\ngtime1.setValue(\"00:00:20\");\ngcdt.add(gtime1);\ngs.info(gcdt.getTime());",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "time",
                                "type": "GlideTime",
                                "description": "Time to add."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GCDT-add_N",
                        "short_description": "Adds a specified number of milliseconds to the GlideCalendarDateTime\n    object.",
                        "description": "",
                        "name": "add(Number milliseconds)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gcdt = new GlideCalendarDateTime(\"2011-08-31 08:00:00\");\ngs.info(gcdt.getNumericValue());\ngcdt.add(10);\ngs.info(gcdt.getNumericValue());",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "milliseconds",
                                "type": "Number",
                                "description": "Number of milliseconds to add"
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GCDT-addDaysLocalTime_N",
                        "short_description": "Adds a specified number of days to the current GlideCalendarDateTime object. A negative\n    parameter subtracts days.",
                        "description": "<p>The method determines the local date and time equivalent to the value stored by the\n        GlideCalendarDateTime object, then adds or subtracts days using the local date and time\n        values.</p>",
                        "name": "addDaysLocalTime(Number days)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gcdt = new GlideCalendarDateTime(\"2011-08-31 08:00:00\");\ngcdt.addDaysLocalTime(-1);\ngs.info(gcdt.getLocalDate());",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "days",
                                "type": "Number",
                                "description": "Number of days to add. Use a negative value to subtract."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GCDT-addDaysUTC_N",
                        "short_description": "Adds a specified number of days to the current GlideCalendarDateTime object. A negative\n    parameter subtracts days.",
                        "description": "<p>The method determines the UTC date and time equivalent to the value stored by the\n        GlideCalendarDateTime object, then adds or subtracts days using the UTC date and time\n        values.</p>",
                        "name": "addDaysUTC(Number days)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gcdt = new GlideCalendarDateTime(\"2011-08-31 08:00:00\");\ngcdt.addDaysUTC(-1);\ngs.info(gcdt.getDate());",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "days",
                                "type": "Number",
                                "description": "Number of days to add. Use a negative value to subtract."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GCDT-addMonthsLocalTime_N",
                        "short_description": "Adds a specified number of months to the current GlideCalendarDateTime object. A\n    negative parameter subtracts months.",
                        "description": "<p>The method determines the local date and time equivalent to the value stored by the\n        GlideCalendarDateTime object, then adds or subtracts months using the local date and time\n        values.</p>",
                        "name": "addMonthsLocalTime(Number months)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gcdt = new GlideCalendarDateTime(\"2011-08-31 08:00:00\");\ngcdt.addMonthsLocalTime(2);\ngs.info(gcdt.getDate());",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "months",
                                "type": "Number",
                                "description": "Number of months to add. Use a negative value to subtract."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GCDT-addMonthsUTC_N",
                        "short_description": "Adds a specified number of months to the current GlideCalendarDateTime object. A\n    negative parameter subtracts months.",
                        "description": "<p>The method determines the UTC date and time equivalent to the value stored by the\n        GlideCalendarDateTime object, then adds or subtracts months using the UTC date and time\n        values.</p>",
                        "name": "addMonthsUTC(Number months)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gcdt = new GlideCalendarDateTime(\"2011-08-31 08:00:00\");\ngcdt.addMonthsUTC(2);\ngs.info(gcdt.getDate());",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "months",
                                "type": "Number",
                                "description": "Number of months to add. Use a negative number to subtract."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GCDT-addSeconds_N",
                        "short_description": "Adds a specified number of seconds to the GlideCalendarDateTime object.",
                        "description": "",
                        "name": "addSeconds(Number seconds)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gcdt = new GlideCalendarDateTime(\"2011-12-07 08:00:00\");\ngcdt.addSeconds(1000);\ngs.info(gcdt.getValue());",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "seconds",
                                "type": "Number",
                                "description": "Number of seconds to add"
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GCDT-addWeeksLocalTime_N",
                        "short_description": "Adds a specified number of weeks to the current GlideCalendarDateTime object. A\n    negative parameter subtracts weeks.",
                        "description": "<p>The method determines the local date and time equivalent to the value stored by the\n        GlideCalendarDateTime object, then adds or subtracts weeks using the local date and time\n        values.</p>",
                        "name": "addWeeksLocalTime(Number weeks)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gcdt = new GlideCalendarDateTime(\"2011-08-31 08:00:00\");\ngcdt.addWeeksLocalTime(-1);\ngs.info(gcdt.getDate());",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "weeks",
                                "type": "Number",
                                "description": "Number of weeks to add. Use a negative number to subtract."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GCDT-addWeeksUTC_N",
                        "short_description": "Adds a specified number of weeks to the current GlideCalendarDateTime object. A\n    negative parameter subtracts weeks.",
                        "description": "<p>The method determines the UTC date and time equivalent to the value stored by the\n        GlideCalendarDateTime object, then adds or subtracts weeks using the UTC date and time\n        values.</p>",
                        "name": "addWeeksUTC(Number weeks)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gcdt = new GlideCalendarDateTime(\"2011-08-31 08:00:00\");\ngcdt.addWeeksUTC(-1);\ngs.info(gcdt.getDate());",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "weeks",
                                "type": "Number",
                                "description": "Number of weeks to add. Use a negative number to subtract."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GCDT-addYearsLocalTime_N",
                        "short_description": "Adds a specified number of years to the current GlideCalendarDateTime object. A\n    negative parameter subtracts years.",
                        "description": "<p>The method determines the local date and time equivalent to the value stored by the\n        GlideCalendarDateTime object, then adds or subtracts years using the local date and time\n        values.</p>",
                        "name": "addYearsLocalTime(Number years)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gcdt = new GlideCalendarDateTime(\"2010-08-31 08:00:00\");\ngcdt.addYearsLocalTime(1);\ngs.info(gcdt.getDate());",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "years",
                                "type": "Number",
                                "description": "Number of years to add. To subtract use a negative value."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GCDT-addYearsUTC_N",
                        "short_description": "Adds a specified number of years to the current GlideCalendarDateTime object. A\n    negative parameter subtracts years.",
                        "description": "<p>The date and time value stored by GlideCalendarDateTime object is interpreted as being in\n        the UTC time zone.</p>",
                        "name": "addYearsUTC(Number years)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gcdt = new GlideCalendarDateTime(\"2010-08-31 08:00:00\");\ngcdt.addYearsUTC(1);\ngs.info(gcdt.getDate());",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "years",
                                "type": "Number",
                                "description": "Number of years to add. Use a negative value to subtract."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GCDT-compareTo_O",
                        "short_description": "Compares two date and time objects to determine whether one occurs before the other or\n    if they are equivalent.",
                        "description": "",
                        "name": "compareTo(Object dateTime)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var initDate = new GlideCalendarDateTime(\"2011-08-01 12:00:00\");\nvar compDate1 = new GlideCalendarDateTime(\"2011-08-01 12:00:00\");\nvar compDate2 = new GlideCalendarDateTime(\"2011-07-31 12:00:00\");\nvar compDate3 = new GlideCalendarDateTime(\"2011-08-04 16:00:00\");\n \ngs.info(initDate.compareTo(compDate1)); // Equals (0)\ngs.info(initDate.compareTo(compDate2)); // initDate is after compDate2 (1)\ngs.info(initDate.compareTo(compDate3)); // initDate is before compDate3 (-1)",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "dateTime",
                                "type": "Object",
                                "description": "Date time in a GlideCalendarDateTime object"
                            }
                        ],
                        "return": {
                            "type": "Number",
                            "description": "<ul class=\"ul\" id=\"GCDT-compareTo_O__ul_tb3_mjg_sz\">\n                  <li class=\"li\">0 = Dates are equal</li>\n\n                  <li class=\"li\">1 = Object's date is after the date specified in the parameter</li>\n\n                  <li class=\"li\">-1 = Object's date is before the date specified in the parameter</li>\n\n                </ul>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GCDT_equals_O",
                        "short_description": "Compares an object with an existing value for equality.",
                        "description": "",
                        "name": "equals(Object GCDT)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gcdt = new GlideCalendarDateTime(\"2011-08-31 00:00:00\");\ngs.info(gcdt.equals(\"2011-09-30 00:12:01\"));",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "GCDT",
                                "type": "Object",
                                "description": "Object to compare. Can be a GlideCalendarDateTime object or a valid date time\n                string."
                            }
                        ],
                        "return": {
                            "type": "Boolean",
                            "description": "True if they are equal, false otherwise."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GCDT-getDate",
                        "short_description": "Returns the date stored by the GlideCalendarDateTime object, expressed in the standard\n    format, yyyy-MM-dd, and the system time zone, UTC by default.",
                        "description": "",
                        "name": "getDate()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gcdt = new GlideCalendarDateTime(\"2011-08-31 08:00:00\");\ngs.info(gcdt.getDate());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "GlideDate",
                            "description": "Date in the system time zone."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GCDT-getDayOfMonthLocalTime",
                        "short_description": "Returns the day of the month stored by the GlideCalendarDateTime object, expressed in\n    the current user's time zone.",
                        "description": "",
                        "name": "getDayOfMonthLocalTime()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gcdt = new GlideCalendarDateTime(\"2011-12-02 12:00:00\");\ngs.info(gcdt.getDayOfMonthLocalTime());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Number",
                            "description": "Day of the month in the user's time zone, from 1 to 31."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GCDT-getDayOfMonthUTC",
                        "short_description": "Gets the day of the month stored by the GlideCalendarDateTime object, expressed in the\n    UTC time zone.",
                        "description": "",
                        "name": "getDayOfMonthUTC()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gcdt = new GlideCalendarDateTime(\"2011-12-02 12:00:00\");\ngs.info(gcdt.getDayOfMonthUTC());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Number",
                            "description": "Day of the month in the UTC time zone, from 1 to 31."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GCDT-getDayOfWeekLocalTime",
                        "short_description": "Returns the day of the week stored by the GlideCalendarDateTime object, expressed in\n    the user's time zone.",
                        "description": "",
                        "name": "getDayOfWeekLocalTime()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gcdt = new GlideCalendarDateTime(\"2011-12-01 12:00:00\");\ngs.info(gcdt.getDayOfWeekLocalTime());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Number",
                            "description": "Day of the week value - Monday = 1, ... Sunday = 7"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GCDT-getDayOfWeekUTC",
                        "short_description": "Returns the day of the week stored by the GlideCalendarDateTime object, expressed in\n    the UTC time zone.",
                        "description": "",
                        "name": "getDayOfWeekUTC()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gcdt = new GlideCalendarDateTime(\"2011-12-01 12:00:00\");\ngs.info(gcdt.getDayOfWeekUTC());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Number",
                            "description": "Day of the week value - Monday = 1, ... Sunday = 7"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GCDT-getDaysInMonthLocalTime",
                        "short_description": "Returns the number of days in the month stored by the GlideCalendarDateTime object,\n    expressed in the current user's time zone.",
                        "description": "",
                        "name": "getDaysInMonthLocalTime()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gcdt = new GlideCalendarDateTime(); //December\ngs.info(gcdt.getDaysInMonthLocalTime());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Number",
                            "description": "Number of days in the current month in the user's time zone."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GCDT-getDaysInMonthUTC",
                        "short_description": "Returns the number of days in the month stored by the GlideCalendarDateTime object,\n    expressed in the UTC time zone.",
                        "description": "",
                        "name": "getDaysInMonthUTC()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gcdt = new GlideCalendarDateTime(); //December\ngs.info(gcdt.getDaysInMonthUTC());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Number",
                            "description": "Number of days in the month stored by the GlideCalendarDateTime object,\n                expressed in the UTC time zone."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GCDT-getDisplayValue",
                        "short_description": "Returns the date and time value in the current user's display format and time zone.\n    Referring to the GlideCalendarDateTime object directly returns the date and time value in the\n    GMT time zone.",
                        "description": "",
                        "name": "getDisplayValue()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gcdt = new GlideCalendarDateTime(\"2011-08-31 08:00:00\");\ngs.info(gcdt.getDisplayValue());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "Date and time in the user's format and time zone. Keep in mind when designing\n                business rules or script includes that this method may return values in different\n                formats for different users."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GCDT-getDisplayValueInternal",
                        "short_description": "Returns the display value in the internal format (yyyy-MM-dd HH:mm:ss).",
                        "description": "<p>This method is useful for date/time fields, but not for date fields.</p>",
                        "name": "getDisplayValueInternal()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "// Wednesday\nvar gcdt = new GlideCalendarDateTime(\"2011-08-31 08:00:00\");\ngs.info(gcdt.getDisplayValueInternal());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "Date and time values for the GlideCalendarDateTime object in the current user's\n                time zone and the internal date and time format of yyyy-MM-dd HH:mm:ss."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GCDT-getDSTOffset",
                        "short_description": "Returns the amount of time that daylight saving time is offset.",
                        "description": "",
                        "name": "getDSTOffset()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gcdt = new GlideCalendarDateTime(\"2011-08-31 08:00:00\");\ngs.info(gcdt.getDSTOffset());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Number",
                            "description": "Amount of time, in milliseconds, that daylight saving is offset. Returns 0 if\n                there is no offset or if the time is not during daylight saving time."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GCDT-getErrorMsg",
                        "short_description": "Returns the current error message.",
                        "description": "",
                        "name": "getErrorMsg()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gcdt = new GlideCalendarDateTime(\"2011-08-31 aa:00:00\"); //bad\ngs.info(gcdt.isValid()); //false\ngs.info(gcdt.getErrorMsg()); //reason",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "Error message"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GCDT-getFloatingValue",
                        "short_description": "Returns the calendar date/time value in the user or system time zone based on the value\n    specified in the <span class=\"ph uicontrol\">Time zone</span> field of the corresponding Business Calendar\n    record.",
                        "description": "<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> The Start and End fields in the Business Calendar Entry\n          [business_calendar_span] table contain an attribute time_zone_field that is set to the\n          value in the <span class=\"ph uicontrol\">Time zone</span> field (calendar.time_zone). </div>\nFor\n        details on creating a business calendar and setting the time zone value, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/time/task/create-business-calendar.html\" target=\"_blank\">Create a business calendar</a>.</p>",
                        "name": "getFloatingValue()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gcdt = new GlideCalendarDateTime(\"2018-08-31 08:00:00\");\ngs.info(gcdt.getFloatingValue());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "Date and time in the internal format and time zone based on the <span class=\"ph uicontrol\">Time\n                  zone</span> field of the corresponding Business Calendar record.<ul class=\"ul\" id=\"GCDT-getFloatingValue__ul_n1v_y5w_23b\">\n                  <li class=\"li\">Floating: User time zone</li>\n\n                  <li class=\"li\">Any other value: System time zone</li>\n\n                </ul>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GCDT-getInternalFormatedLocalTime",
                        "short_description": "Returns the object's time in the local time zone and in the internal\n    format.",
                        "description": "",
                        "name": "getInternalFormattedLocalTime()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gcdt = new GlideCalendarDateTime(\"2011-08-31 08:00:00\");\ngs.info(gcdt.getInternalFormatedLocalTime());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "Object's time in the local time zone and the internal format."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GCDT-getLocalDate",
                        "short_description": "Returns the date stored by the GlideCalendarDateTime object, expressed in the standard\n    format, yyyy-MM-dd, and the current user's time zone.",
                        "description": "",
                        "name": "getLocalDate()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gcdt = new GlideCalendarDateTime(\"2011-08-31 08:00:00\");\ngs.info(gcdt.getLocalDate());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "GlideDate",
                            "description": "Date in the user's time zone."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GCDT-getLocalTime",
                        "short_description": "Returns the time in the user's time zone.",
                        "description": "",
                        "name": "getLocalTime()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gcdt = new GlideCalendarDateTime(\"2011-08-31 08:00:00\");\ngs.info(gcdt.getLocalTime());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "GlideTime",
                            "description": "Time in the user's time zone."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GCDT-getMonthLocalTime",
                        "short_description": "Returns the month stored by the GlideCalendarDateTime object, expressed in the current\n    user's time zone.",
                        "description": "",
                        "name": "getMonthLocalTime()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gcdt = new GlideCalendarDateTime(); //December\ngs.info(gcdt.getMonthLocalTime());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Number",
                            "description": "Numerical value of the month, Jan=1, Dec=12."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GCDT-getMonthUTC",
                        "short_description": "Returns the month stored by the GlideCalendarDateTime object, expressed in the UTC time\n    zone.",
                        "description": "",
                        "name": "getMonthUTC()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gcdt = new GlideCalendarDateTime(); //December\ngs.info(gcdt.getMonthUTC());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Number",
                            "description": "Numerical value of the month, Jan=1, Dec=12."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GCDT-getNumericValue",
                        "short_description": "Returns the number of milliseconds since January 1, 1970, 00:00:00 GMT.",
                        "description": "",
                        "name": "getNumericValue()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gcdt = new GlideCalendarDateTime(\"2011-08-31 08:00:00\");\ngs.info(gcdt.getNumericValue());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Number",
                            "description": "Number of milliseconds since January 1, 1970, 00:00:00 GMT."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GCDT-getTime",
                        "short_description": "Returns the Unix duration stamp.",
                        "description": "",
                        "name": "getTime()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gcdt = new GlideCalendarDateTime(\"2011-08-31 08:00:00\");\ngs.info(gcdt.getTime());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "GlideTime",
                            "description": "Unix duration stamp in system format based on GMT time."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GCDT-getTZOffset",
                        "short_description": "Returns the time zone offset in milliseconds.",
                        "description": "",
                        "name": "getTZOffset()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gcdt = new GlideCalendarDateTime();\ngcdt.getLocalTime(); // PST local time\ngs.info(gcdt.getTZOffset());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Number",
                            "description": "Number of milliseconds of the time zone offset"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GCDT-getUserFormattedLocalTime",
                        "short_description": "Returns the object's time in local time zone in the user's format.",
                        "description": "",
                        "name": "getUserFormattedLocalTime()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gcdt = new GlideCalendarDateTime(\"2011-08-31 08:00:00\");\ngs.info(gcdt.getUserFormatedLocalTime());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "Object's time in local time and the user's format."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GCDT-getValue",
                        "short_description": "Returns the date and time value stored by the GlideCalendarDateTime object in the\n    internal format, yyyy-MM-dd HH:mm:ss, and the system time zone; UTC by default.",
                        "description": "",
                        "name": "getValue()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gcdt = new GlideCalendarDateTime(\"2011-08-31 08:00:00\");\ngs.info(gcdt.getValue());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "Date and time in the internal format and system time zone."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GCDT-getWeekOfYearLocalTime",
                        "short_description": "Returns the number of the week stored by the GlideCalendarDateTime object, expressed in\n    the current user's time zone.",
                        "description": "<p>All weeks begin on Sunday. The first week of the year is the week that contains at least\n        one day of the new year. The week beginning Sunday 2015-12-27 is considered the first week\n        of 2016 as that week contains January 1 and 2.</p>",
                        "name": "getWeekOfYearLocalTime()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gcdt = new GlideCalendarDateTime(\"2011-12-01 12:00:00\");\ngs.info(gcdt.getWeekOfYearUTC());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Number",
                            "description": "Number of the current week. The highest week number in a year is either 52 or\n                53."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GCDT-getWeekOfYearUTC",
                        "short_description": "Returns the number of the week stored by the GlideCalendarDateTime object, expressed in\n    the UTC time zone.",
                        "description": "<p>All weeks begin on Sunday. The first week of the year is the week that contains at least\n        one day of the new year. The week beginning Sunday 2015-12-27 is considered the first week\n        of 2016 as that week contains January 1 and 2.</p>",
                        "name": "getWeekOfYearUTC()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gcdt = new GlideCalendarDateTime(\"2011-12-01 12:00:00\");\ngs.info(gcdt.getWeekOfYearUTC());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Number",
                            "description": "Number of the current week in UTC time. The highest week number in a year is\n                either 52 or 53."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GCDT-getYearLocalTime",
                        "short_description": "Returns the year stored by the GlideCalendarDateTime object, expressed in the current\n    user's time zone.",
                        "description": "",
                        "name": "getYearLocalTime()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gcdt = new GlideCalendarDateTime(); //2011\ngs.info(gcdt.getYearLocalTime());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Number",
                            "description": "Four-digit year value in the user's time zone."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GCDT-getYearUTC",
                        "short_description": "Returns the year stored by the GlideCalendarDateTime object, expressed in the UTC time\n    zone.",
                        "description": "",
                        "name": "getYearUTC()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gcdt = new GlideCalendarDateTime(); //2011\ngs.info(gcdt.getYearUTC());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "number",
                            "description": "Four-digit year value in the UTC time zone."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GCDT-hasDate",
                        "short_description": "Determines if an object's date is set.",
                        "description": "",
                        "name": "hasDate()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gcdt = new GlideCalendarDateTime(\"2011-08-31 08:00:00\");\ngs.info(gcdt.hasDate());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "True if the object's date is set, false otherwise."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GCDT-isDST",
                        "short_description": "Determines if the object's time uses a daylight saving offset",
                        "description": "",
                        "name": "isDST()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gcdt = new GlideCalendarDateTime(\"2011-08-31 00:00:00\");\ngs.info(gcdt.isDST()); //true",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "True if the time is daylight saving time, false otherwise."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GCDT-isValid",
                        "short_description": "Determines if a value is a valid date and time.",
                        "description": "",
                        "name": "isValid()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gcdt = new GlideCalendarDateTime(\"2011-08-31 aa:00:00\"); //bad\ngs.info(gcdt.isValid()); //false",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "True if value is valid, false otherwise."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GCDT-setDayOfMonthLocalTime_N",
                        "short_description": "Sets the day of the month to a specified value in the current user's time zone.",
                        "description": "",
                        "name": "setDayOfMonthLocalTime(Number day)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gcdt = new GlideCalendarDateTime();\ngcdt.setDayOfMonthLocalTime(9);\ngs.info(gcdt.getDayOfMonthLocalTime());",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "day",
                                "type": "Number",
                                "description": "Day of month to change to, from 1 to 31. If this value is greater than the\n                maximum number of days in the month, the value is set to the last day of the\n                month."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GCDT-setDayOfMonthUTC_N",
                        "short_description": "Sets the day of the month to a specified value in the UTC time zone.",
                        "description": "",
                        "name": "setDayOfMonthUTC(Number day)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gcdt = new GlideCalendarDateTime();\ngcdt.setDayOfMonthUTC(9);\ngs.info(gcdt.getDayOfMonthUTC());",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "day",
                                "type": "Number",
                                "description": "Day of month to change to, from 1 to 31. If this value is greater than the\n                maximum number of days in the month, the value is set to the last day of the\n                month."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GCDT-setDisplayValue_S",
                        "short_description": "Sets a date and time value using the current user's display format and time\n    zone.",
                        "description": "",
                        "name": "setDisplayValue(String asDisplayed)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gcdt = new GlideCalendarDateTime(\"2011-02-02 12:00:00\");\ngcdt.setDisplayValue(\"2011-01-01 12:00:00\");\ngs.info(gcdt.getValue());",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "asDisplayed",
                                "type": "String",
                                "description": "Date and time in the current user's display format and time zone. <p class=\"p\">The\n                  parameter must be formatted using the current user's preferred display format,\n                  such as MM-dd-yyyy HH:mm:ss.</p>\n<p class=\"p\">To assign the current date and time to a\n                  variable in a workflow script, use\n                    <samp class=\"ph codeph\">&lt;variable&gt;.setDisplayValue(gs.nowDateTime);</samp>.</p>"
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GCDT-setDisplayValue_S_S",
                        "short_description": "Sets a date and time value using the current user's time zone and the specified date\n    and time format.",
                        "description": "<p>This method throws a runtime exception if the date and time format in the dateTime\n        parameter does not match the format parameter. You can retrieve the error message by calling\n          <span class=\"keyword apiname\">getErrorMsg()</span> on the GlideCalendarDateTime object after the exception\n        is caught.</p>",
                        "name": "setDisplayValue(String dateTime, String format)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gcdt = new GlideCalendarDateTime(\"2011-02-02 12:00:00\");\ngcdt.setDisplayValue(\"20-5-2011 12:00:00\", \"dd-MM-yyyy HH:mm:ss\");\ngs.info(gcdt.getValue());",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "dateTime",
                                "type": "String",
                                "description": "Date and time in the current user's time zone."
                            },
                            {
                                "name": "format",
                                "type": "String",
                                "description": "Format to use to parse the dateTime parameter."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GCDT-setDisplayValueInternal_S",
                        "short_description": "Sets a date and time value using the internal format (yyyy-MM-dd HH:mm:ss) and the\n    current user's time zone.",
                        "description": "",
                        "name": "setDisplayValueInternal(String dateTime)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gcdt = new GlideCalendarDateTime(\"2011-02-02 12:00:00\");\ngcdt.setDisplayValueInternal(\"2011-01-01 12:00:00\");\ngs.info(gcdt.getValue());",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "dateTime",
                                "type": "String",
                                "description": "Date and time in internal format"
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GCDT-setGlideCalendarDateTime_GCDT",
                        "short_description": "Sets the date and time of the current object using an existing GlideCalendarDateTime\n    object.",
                        "description": "<p>This method is equivalent to instantiating a new object with a GlideCalendarDateTime\n        parameter.</p>",
                        "name": "setGlideCalendarDateTime(GlideCalendarDateTime gcDT)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var dt1 = new GlideCalendarDateTime(\"2011-01-01 12:00:00\");\nvar dt2 = new GlideCalendarDateTime(\"2011-02-02 08:00:00\");\ndt1.setGlideCalendarDateTime(dt2);\ngs.info(dt1.getValue());",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "gcDT",
                                "type": "GlideCalendarDateTime",
                                "description": "GlideCalendarDateTime object"
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GCDT-setMonthLocalTime_N",
                        "short_description": "Sets the month stored by the GlideCalendarDateTime object to a specified value using\n    the current user's time zone.",
                        "description": "",
                        "name": "setMonthLocalTime(Number month)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gcdt = new GlideCalendarDateTime();\ngcdt.setMonthLocalTime(1);\ngs.info(gcdt.getMonthLocalTime());",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "month",
                                "type": "Number",
                                "description": "Month to change to."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GCDT-setMonthUTC_N",
                        "short_description": "Sets the month stored by the GlideCalendarDateTime object to a specified value using\n    the UTC time zone.",
                        "description": "",
                        "name": "setMonthUTC(Number month)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gcdt = new GlideCalendarDateTime();\ngcdt.setMonthUTC(1);\ngs.info(gcdt.getMonthUTC());",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "month",
                                "type": "Number",
                                "description": "Month to change to."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GCDT-setTZ_TZ",
                        "short_description": "Sets the time zone of the GlideCalendarDateTime object to be the specified time\n    zone.",
                        "description": "",
                        "name": "setTZ(TimeZone timeZone)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var tz = gs.getSession().getTimeZone();\nvar gcdt = new GlideCalendarDateTime(); \ngcdt.setTZ(tz);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "timeZone",
                                "type": "TimeZone",
                                "description": "Time zone object"
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GCDT-setValue_O",
                        "short_description": "Sets the date and time of the GlideCalendarDateTime object.",
                        "description": "<p>This method is equivalent to <span class=\"keyword apiname\">setInitialValue()</span>.</p>",
                        "name": "setValue(Object dateTime)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gcdt = new GlideCalendarDateTime(\"2011-01-01 12:00:00\");\ngcdt.setValue(\"2011-02-02 08:00:00\");\ngs.info(gcdt.getValue());",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "dateTime",
                                "type": "Object",
                                "description": "Date and time to use. This parameter may be one of several types. <ul class=\"ul\" id=\"GCDT-setValue_O__ul_j3h_4pc_nt\">\n                  <li class=\"li\">A string in the UTC time zone and the internal format of yyyy-MM-dd HH:mm:ss:\n                    sets the value of the object to the specified date and time. <p class=\"p\">Using the method\n                      this way is equivalent to instantiating a new GlideCalendarDateTime object using the\n                      <samp class=\"ph codeph\">GlideCalendarDateTime(value)</samp> constructor.</p>\n<p class=\"p\"> If the date and\n                      time format used does not match the internal format, the method attempts to\n                      set the date and time using other available formats. Resolving the date and\n                      time this way can lead to inaccurate data due to ambiguity in the day and\n                      month values. When using a non-standard date and time format, use\n                        <samp class=\"ph codeph\">setValue(dt, format)</samp> instead.</p>\n</li>\n\n                  <li class=\"li\">A GlideCalendarDateTime object: sets the value of the object to the date and\n                    time stored by the GlideCalendarDateTime passed in the parameter. <p class=\"p\">Using the\n                      method this way is equivalent to instantiating a new GlideCalendarDateTime\n                      object using the <samp class=\"ph codeph\">GlideCalendarDateTime(g)</samp>\n                    constructor.</p>\n</li>\n\n                  <li class=\"li\">A Java Date object: sets the value of the object using the value stored by the\n                    Java Date object. <p class=\"p\">Using the method this way is equivalent to passing the\n                      value returned by the Java Date object <span class=\"keyword apiname\">getTime() </span>to the\n                      GlideCalendarDateTime <span class=\"keyword apiname\">setNumericValue()</span> method. This method\n                      does not accept JavaScript Date objects.</p>\n</li>\n\n                  <li class=\"li\">A JavaScript Number: sets the value of the object using the Number value as\n                    milliseconds past January 1, 1970 00:00:00 GMT. <p class=\"p\">Using the method this way is\n                      equivalent to the <samp class=\"ph codeph\">setNumericValue(milliseconds)\n                    </samp>method.</p>\n</li>\n\n                  <li class=\"li\">A Java Integer or Long: sets the value of the object using the Integer or Long\n                    value as milliseconds past January 1, 1970 00:00:00 GMT. <p class=\"p\">Using the method\n                      this way is equivalent to the <samp class=\"ph codeph\">setNumericValue(milliseconds)\n                      </samp>method.</p>\n</li>\n\n                </ul>"
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GCDT-setValueUTC_S_S",
                        "short_description": "Sets a date and time value using the UTC time zone and the specified date and time\n    format.",
                        "description": "<p>This method throws a runtime exception if the date and time format used in the dateTime\n        parameter does not match the format parameter. You can retrieve the error message by calling\n          <span class=\"keyword apiname\">getErrorMsg()</span> on the GlideCalendarDateTime object after the exception\n        is caught.</p>",
                        "name": "setValueUTC(String dateTime, String format)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gcdt = new GlideCalendarDateTime(\"2011-01-01 12:00:00\");\ngcdt.setValueUTC(\"15-02-2011 08:00:00\", \"dd-MM-yyyy HH:mm:ss\");\ngs.info(gcdt.getValue());",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "dateTime",
                                "type": "String",
                                "description": "Date and time to use"
                            },
                            {
                                "name": "format",
                                "type": "String",
                                "description": "Format to use"
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GCDT-setYearLocalTime_N",
                        "short_description": "Sets the year stored by the GlideCalendarDateTime object to a specified value using the\n    current user's time zone.",
                        "description": "",
                        "name": "setYearLocalTime(Number year)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gcdt = new GlideCalendarDateTime();\ngcdt.setYearLocalTime(2013);\ngs.info(gcdt.getYearLocalTime());",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "year",
                                "type": "Number",
                                "description": "Year to change to."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GCDT-setYearUTC_N",
                        "short_description": "Sets the year stored by the GlideCalendarDateTime object to a specified value using the\n    UTC time zone.",
                        "description": "",
                        "name": "setYearUTC(Number year)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gcdt = new GlideCalendarDateTime();\ngcdt.setYearUTC(2013);\ngs.info(gcdt.getYearUTC());",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "year",
                                "type": "Number",
                                "description": "Year to change to."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GCDT-subtract_GCDT_GCDT",
                        "short_description": "Returns the duration difference between two GlideCalendarDateTime values.",
                        "description": "",
                        "name": "subtract(GlideCalendarDateTime start, GlideCalendarDateTime end)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gcdt1 = new GlideCalendarDateTime(\"2011-08-28 09:00:00\");\nvar gcdt2 = new GlideCalendarDateTime(\"2011-08-31 08:00:00\");\nvar dur = new GlideDuration();\n \nvar dur = GlideCalendarDateTime.subtract(gcdt1, gcdt2); //the difference between gcdt1 and gcdt2\ngs.info(dur.getDisplayValue());",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "start",
                                "type": "GlideCalendarDateTime",
                                "description": "Start value"
                            },
                            {
                                "name": "end",
                                "type": "GlideCalendarDateTime",
                                "description": "End value"
                            }
                        ],
                        "return": {
                            "type": "GlideDuration",
                            "description": "Time between the two values"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GCDT-subtract_GT",
                        "short_description": "Subtracts a specified amount of time.",
                        "description": "",
                        "name": "subtract(GlideTime time)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gcdt = new GlideCalendarDateTime(\"2011-08-31 08:00:00\");\nvar gtime1 = new GlideTime();\ngtime1.setValue(\"00:00:20\");\ngcdt.subtract(gtime1);\ngs.info(gcdt.getTime());",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "time",
                                "type": "GlideTime",
                                "description": "Time to subtract"
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GCDT-subtract_N",
                        "short_description": "Subtracts a specified number of milliseconds from the GlideCalendarDateTime\n    object.",
                        "description": "",
                        "name": "subtract(Number milliseconds)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gcdt = new GlideCalendarDateTime(\"2011-12-07 08:00:00\");\ngcdt.subtract(1000);\ngs.info(gcdt.getValue());",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "milliseconds",
                                "type": "Number",
                                "description": "Number of milliseconds to subtract"
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GCDT-toString",
                        "short_description": "Returns the date and time value stored by the GlideCalendarDateTime object in the\n    internal format, yyyy-MM-dd HH:mm:ss, and the system time zone; UTC by default.",
                        "description": "<p>This method is equivalent to <span class=\"keyword apiname\">getValue()</span>.</p>",
                        "name": "toString()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gcdt = new GlideCalendarDateTime(\"2011-08-31 08:00:00\");\ngs.info(gcdt.toString());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "Date and time stored by the GlideCalendarDateTime object in the system time\n                zone and format."
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "",
                "short_description": "The scoped GlideDate class provides methods for performing operations on GlideDate\n    objects, such as instantiating GlideDate objects or working with GlideDate fields.",
                "identifier": "c_GlideDateScopedAPI",
                "name": "GlideDate",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "r_ScopedGlideDateGlideDate",
                        "short_description": "Creates a GlideDate object with the current date time.",
                        "description": "",
                        "name": "GlideDate()",
                        "type": "Constructor",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideDateGetByFormat_String",
                        "short_description": "Gets the date in the specified date format.",
                        "description": "",
                        "name": "getByFormat(String format)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gd = new GlideDate(); \ngd.setValue('2015-01-01');\ngs.info(gd.getByFormat(\"dd-MM-yyyy\"));",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "format",
                                "type": "String",
                                "description": "the desired date format"
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "the date in the specified format"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SGD_getDayOfMonthNoTZ",
                        "short_description": "Gets the day of the month stored by the GlideDate object, expressed in the UTC time\n    zone.",
                        "description": "",
                        "name": "getDayOfMonthNoTZ()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "//Today's date is 2016-05-13 \nvar gd =new GlideDate();\ngs.info(gd.getDayOfMonthNoTZ());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Number",
                            "description": "The day of the month in the UTC time zone, from 1 to 31."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideDateGetDisplayValue",
                        "short_description": "Gets the date in the current user's display format and time zone.",
                        "description": "",
                        "name": "getDisplayValue()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gd =new GlideDate(); \ngd.setValue('2015-01-01');\ngs.info(gd.getDisplayValue());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The date in the user's format and time zone. Keep in mind when designing\n                business rules or script includes that this method may return values in different\n                formats for different users."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideDateGetDisplayValueInternal",
                        "short_description": "Gets the display value in the internal format (yyyy-MM-dd).",
                        "description": "",
                        "name": "getDisplayValueInternal()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gd =new GlideDate(); \ngs.info(gd.getDisplayValueInternal());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The date values for the GlideDate object in the current user's time zone and\n                the internal time format of yyyy-MM-dd."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SGD-getMonthNoTZ",
                        "short_description": "Gets the month stored by the GlideDate object, expressed in the UTC time zone.",
                        "description": "",
                        "name": "getMonthNoTZ()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "//Today's date is 2016-05-13\nvar gd =new GlideDate();\ngs.info(gd.getMonthNoTZ());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Number",
                            "description": "The numerical value of the month from 1 to 12."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideDateGetValue",
                        "short_description": "Gets the date value stored in the database by the GlideDate object in the internal\n    format, yyyy-MM-dd, and the system time zone, UTC by default.",
                        "description": "",
                        "name": "getValue()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gd =new GlideDate();\ngd.setValue('2015-01-01');\ngs.info(gd.getValue());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The date value in the internal format and system time zone."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SGD-getYearNoTZ",
                        "short_description": "Gets the year stored by the GlideDate object, expressed in the UTC time zone.",
                        "description": "",
                        "name": "getYearNoTZ()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "//Today's date is 2016-05-13\nvar gd =new GlideDate();\ngs.info(gd.getYearNoTZ());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Number",
                            "description": "The numerical value of the year."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideDateSetDisplayValue_String",
                        "short_description": "Sets a date value using the current user's display format and time zone.",
                        "description": "",
                        "name": "setDisplayValue(String asDisplayed)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gd =new GlideDate();\ngd.setDisplayValue(\"2011-01-01\");\ngs.info(gd.getValue());",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "asDisplayed",
                                "type": "String",
                                "description": "The date in the current user's display format and time zone. The parameter must\n                be formatted using the current user's preferred display format, such as yyyy-MM-dd."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideDateSetValue_String",
                        "short_description": "Sets the date of the GlideDate object.",
                        "description": "",
                        "name": "setValue(String o)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gd = new GlideDate(); \ngd.setValue('2015-01-01');\ngs.info(gd.getValue());",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "o",
                                "type": "String",
                                "description": "The date and time to use."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideDateSubtract_GlideDate_GlideDate",
                        "short_description": "Gets the duration difference between two GlideDate values.",
                        "description": "",
                        "name": "subtract(GlideDate start, GlideDate end)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var sgd1 = new GlideDate(); \nsgd1.setDisplayValue('2014-07-18'); \nvar sgd2 = new GlideDate(); \nsgd2.setDisplayValue('2014-07-19'); \n \nduration= GlideDate.subtract(sgd1, sgd2); \ngs.info(duration.getDisplayValue());",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "start",
                                "type": "GlideDate",
                                "description": "The start value."
                            },
                            {
                                "name": "end",
                                "type": "GlideDate",
                                "description": "The end value."
                            }
                        ],
                        "return": {
                            "type": "GlideDuration",
                            "description": "The duration between the two values."
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "Use the GlideDateTime methods to perform date-time operations, such as instantiating a\n      GlideDateTime object, performing date-time calculations, formatting a date-time, or converting\n      between date-time formats.",
                "short_description": "The scoped GlideDateTime class provides methods for performing operations on\n    GlideDateTime objects, such as instantiating GlideDateTime objects or working with\n    glide_date_time fields.",
                "identifier": "c_APIRef",
                "name": "GlideDateTime",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "r_ScopedGlideDateTimeGlideDateTime",
                        "short_description": "Instantiates a new GlideDateTime object with the current date and time in Greenwich\n    Mean Time (GMT).",
                        "description": "",
                        "name": "GlideDateTime()",
                        "type": "Constructor",
                        "examples": [
                            {
                                "script": "var gdt = new GlideDateTime();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideDateTimeGlideDateTime_GlideDateTime_g",
                        "short_description": "Instantiates a new GlideDateTime object set to the time of the GlideDateTime object\n    passed in the parameter.",
                        "description": "",
                        "name": "GlideDateTime(GlideDateTime g)",
                        "type": "Constructor",
                        "examples": [
                            {
                                "script": "var start = new GlideDateTime(\"2011-01-01 12:00:00\");\nvar end = new GlideDateTime(start);\ngs.info(end);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "g",
                                "type": "GlideDateTime",
                                "description": "The GlideDateTime object to use for setting the time of the new object."
                            }
                        ],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideDateTimeGlideDateTime_String_value",
                        "short_description": "Instantiates a new GlideDateTime object from a date and time value in the UTC time zone\n    specified with the format yyyy-MM-dd HH:mm:ss.",
                        "description": "",
                        "name": "GlideDateTime(String value)",
                        "type": "Constructor",
                        "examples": [
                            {
                                "script": "var gdt = new GlideDateTime(\"2011-01-01 12:00:00\");",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "value",
                                "type": "String",
                                "description": "A UTC date and time using the internal format yyyy-MM-dd HH:mm:ss."
                            }
                        ],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideDateTimeAdd_GlideTime_gd",
                        "short_description": "Adds a GlideTime object to the current GlideDateTime object.",
                        "description": "",
                        "name": "add(GlideTime gd)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gdt = new GlideDateTime(\"2011-08-31 08:00:00\");\nvar gtime1 = new GlideTime();\ngtime1.setValue(\"00:00:20\");\ngdt.add(gtime1);\nvar gtime2 = gdt.getTime();\ngs.info(gtime2.getByFormat('hh:mm:ss'));",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "gd",
                                "type": "GlideTime",
                                "description": "The GlideTime object to add."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideDateTimeAdd_Number",
                        "short_description": "Adds the specified number of milliseconds to the current GlideDateTime object.",
                        "description": "",
                        "name": "add(Number milliseconds)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gdt = new GlideDateTime(\"2011-08-31 08:00:00\");\ngs.info(gdt.getNumericValue());\ngdt.add(10);\ngs.info(gdt.getNumericValue());",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "milliseconds",
                                "type": "Number",
                                "description": "The number of milliseconds to add."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideDateTimeAddDaysLocalTime_Number",
                        "short_description": "Adds a specified number of days to the current GlideDateTime object. A negative\n    parameter subtracts days. The method determines the local date and time equivalent to the value\n    stored by the GlideDateTime object, then adds or subtracts days using the local date and time\n    values.",
                        "description": "",
                        "name": "addDaysLocalTime(Number days)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gdt = new GlideDateTime(\"2011-08-31 08:00:00\");\ngdt.addDaysLocalTime(-1);\ngs.info(gdt.getLocalDate());",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "days",
                                "type": "Number",
                                "description": "The number of days to add. Use a negative value to subtract."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideDateTimeAddDaysUTC_Number",
                        "short_description": "Adds a specified number of days to the current GlideDateTime object. A negative\n    parameter subtracts days. The method determines the UTC date and time equivalent to the value\n    stored by the GlideDateTime object, then adds or subtracts days using the UTC date and time\n    values.",
                        "description": "",
                        "name": "addDaysUTC(Number days)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gdt = new GlideDateTime(\"2011-08-31 08:00:00\");\ngdt.addDaysUTC(-1);\ngs.info(gdt.getDate());",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "days",
                                "type": "Number",
                                "description": "The number of days to add. Use a negative number to subtract."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideDateTimeAddMonthsLocalTime_Number",
                        "short_description": "Adds a specified number of months to the current GlideDateTime object. A negative\n    parameter subtracts months. The method determines the local date and time equivalent to the\n    value stored by the GlideDateTime object, then adds or subtracts months using the local date and\n    time values.",
                        "description": "",
                        "name": "addMonthsLocalTime(Number months)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gdt = new GlideDateTime(\"2011-08-31 08:00:00\");\ngdt.addMonthsLocalTime(2);\ngs.info(gdt.getDate());",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "months",
                                "type": "Number",
                                "description": "The number of months to add. use a negative value to subtract."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideDateTimeAddMonthsUTC_Number",
                        "short_description": "Adds a specified number of months to the current GlideDateTime object. A negative\n    parameter subtracts months. The method determines the UTC date and time equivalent to the value\n    stored by the GlideDateTime object, then adds or subtracts months using the UTC date and time\n    values.",
                        "description": "",
                        "name": "addMonthsUTC(Number months)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gdt = new GlideDateTime(\"2011-08-31 08:00:00\");\ngdt.addMonthsUTC(2);\ngs.info(gdt.getDate());",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "months",
                                "type": "Number",
                                "description": "The number of months to add. Use a negative value to subtract."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideDateTimeAddSeconds_Number",
                        "short_description": "Adds the specified number of seconds to the current GlideDateTime object.",
                        "description": "",
                        "name": "addSeconds(Number seconds)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gdt = new GlideDateTime(\"2011-12-07 08:00:00\");\ngdt.addSeconds(1000);\ngs.info(gdt.getValue());",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "seconds",
                                "type": "Number",
                                "description": "The number of seconds to add."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideDateTimeAddWeeksLocalTime_Number",
                        "short_description": "Adds a specified number of weeks to the current GlideDateTime object. A negative\n    parameter subtracts weeks. The method determines the local date and time equivalent to the value\n    stored by the GlideDateTime object, then adds or subtracts weeks using the local date and time\n    values.",
                        "description": "",
                        "name": "addWeeksLocalTime(Number weeks)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gdt = new GlideDateTime(\"2011-08-31 08:00:00\");\ngdt.addWeeksLocalTime(-1);\ngs.info(gdt.getDate());",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "weeks",
                                "type": "Number",
                                "description": "The number of weeks to add. Use a negative value to subtract."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideDateTimeAddWeeksUTC_Number",
                        "short_description": "Adds a specified number of weeks to the current GlideDateTime object. A negative\n    parameter subtracts weeks. The method determines the UTC date and time equivalent to the value\n    stored by the GlideDateTime object, then adds or subtracts weeks using the UTC date and time\n    values.",
                        "description": "",
                        "name": "addWeeksUTC(Number weeks)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gdt = new GlideDateTime(\"2011-08-31 08:00:00\");\ngdt.addWeeksUTC(-1);\ngs.info(gdt.getDate());",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "weeks",
                                "type": "Number",
                                "description": "The number of weeks to add. Use a negative value to subtract."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideDateTimeAddYearsLocalTime_Number",
                        "short_description": "Adds a specified number of years to the current GlideDateTime object. A negative\n    parameter subtracts years. The method determines the local date and time equivalent to the value\n    stored by the GlideDateTime object, then adds or subtracts years using the local date and time\n    values.",
                        "description": "",
                        "name": "addYearsLocalTime(Number years)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gdt = new GlideDateTime(\"2010-08-31 08:00:00\");\ngdt.addYearsLocalTime(1);\ngs.info(gdt.getDate());",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "years",
                                "type": "Number",
                                "description": "The number of years to add.  Use a negative value to subtract."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideDateTimeAddYearsUTC_Number",
                        "short_description": "Adds a specified number of years to the current GlideDateTime object. A negative\n    parameter subtracts years. The date and time value stored by GlideDateTime object is interpreted\n    as being in the UTC time zone.",
                        "description": "",
                        "name": "addYearsUTC(Number years)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gdt = new GlideDateTime(\"2010-08-31 08:00:00\");\ngdt.addYearsUTC(1);\ngs.info(gdt.getDate());",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "years",
                                "type": "Number",
                                "description": "The number of years to add. Use a negative value to subtract."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SGDT-after_GDT",
                        "short_description": "Determines if the GlideDateTime object occurs after the specified\n    GlideDateTime.",
                        "description": "",
                        "name": "after(GlideDateTime gdt)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gdt1 = new GlideDateTime(\"2016-05-09 10:11:12\");\nvar gdt2 = new GlideDateTime(\"2017-06-12 15:11:12\");\ngs.info(gdt1.after(gdt2)); ",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "gdt",
                                "type": "GlideDateTime",
                                "description": "The time to check against."
                            }
                        ],
                        "return": {
                            "type": "Boolean",
                            "description": "Returns true if the GlideDateTime object's time is after the time specified by\n                the parameter."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SGDT-before_GDT",
                        "short_description": "Determines if the GlideDateTime object occurs before the specified\n    GlideDateTime.",
                        "description": "",
                        "name": "before(GlideDateTime gdt)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gdt1 = new GlideDateTime(\"2016-05-09 10:11:12\");\nvar gdt2 = new GlideDateTime(\"2017-06-12 15:11:12\");\ngs.info(gdt1.before(gdt2));  ",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "gdt",
                                "type": "GlideDateTime",
                                "description": "The time to check against."
                            }
                        ],
                        "return": {
                            "type": "Boolean",
                            "description": "Returns true if the GlideDateTime object's time is before the time specified by\n                the parameter."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideDateTimeCompareTo_Object_o",
                        "short_description": "Compares two date and time objects to determine whether they are equivalent or one\n    occurs before or after the other.",
                        "description": "",
                        "name": "compareTo(Object o)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var initDate = new GlideDateTime(\"2011-08-01 12:00:00\");\nvar compDate1 = new GlideDateTime(\"2011-08-01 12:00:00\");\nvar compDate2 = new GlideDateTime(\"2011-07-31 12:00:00\");\nvar compDate3 = new GlideDateTime(\"2011-08-04 16:00:00\");\n \ngs.info(initDate.compareTo(compDate1)); // Equals (0)\ngs.info(initDate.compareTo(compDate2)); // initDate is after compDate2 (1)\ngs.info(initDate.compareTo(compDate3)); // initDate is before compDate3 (-1)",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "o",
                                "type": "Object",
                                "description": "Date and time object in GlideDateTime format"
                            }
                        ],
                        "return": {
                            "type": "Number",
                            "description": "<ul class=\"ul\" id=\"r_ScopedGlideDateTimeCompareTo_Object_o__ul_tb3_mjg_sz\">\n                  <li class=\"li\">0 = Dates are equal</li>\n\n                  <li class=\"li\">1 = The object's date is after the date specified in the parameter</li>\n\n                  <li class=\"li\">-1 = The object's date is before the date specified in the parameter</li>\n\n                </ul>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideDateTimeEquals_Object",
                        "short_description": "Compares a datetime with an existing value for equality.",
                        "description": "",
                        "name": "equals(Object dateTime)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gdt = new GlideDateTime(\"2011-08-31 00:00:00\");\ngs.info(gdt.equals(\"2011-09-30 00:12:01\"));",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "dateTime",
                                "type": "GlideDateTime object or String",
                                "description": "The datetime to compare."
                            }
                        ],
                        "return": {
                            "type": "Boolean",
                            "description": "Returns true if they are equal; otherwise, false."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideDateTimeGetDate",
                        "short_description": "Gets the date stored by the GlideDateTime object, expressed in the standard format,\n    yyyy-MM-dd, and the system time zone, UTC by default.",
                        "description": "",
                        "name": "getDate()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gdt = new GlideDateTime(\"2011-08-31 08:00:00\");\ngs.info(gdt.getDate());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "GlideDate",
                            "description": "The date in the system time zone."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideDateTimeGetDayOfMonthLocalTime",
                        "short_description": "Gets the day of the month stored by the GlideDateTime object, expressed in the current\n    user's time zone.",
                        "description": "",
                        "name": "getDayOfMonthLocalTime()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gdt = new GlideDateTime(\"2011-12-02 12:00:00\");\ngs.info(gdt.getDayOfMonthLocalTime());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Number",
                            "description": "The day of the month in the user's time zone, from 1 to 31."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideDateTimeGetDayOfMonthUTC",
                        "short_description": "Gets the day of the month stored by the GlideDateTime object, expressed in the UTC time\n    zone.",
                        "description": "",
                        "name": "getDayOfMonthUTC()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gdt = new GlideDateTime(\"2011-12-02 12:00:00\");\ngs.info(gdt.getDayOfMonthUTC());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Number",
                            "description": "The day of the month in the UTC time zone, from 1 to 31."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideDateTimeGetDayOfWeekLocalTime",
                        "short_description": "Gets the day of the week stored by the GlideDateTime object, expressed in the user's\n    time zone.",
                        "description": "",
                        "name": "getDayOfWeekLocalTime()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gdt = new GlideDateTime(\"2011-12-01 12:00:00\");//Thursday\ngs.info(gdt.getDayOfWeekLocalTime());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Number",
                            "description": "The day of week value, in the user's time zone, from 1 to 7. Monday equals 1,\n                Sunday equals 7."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideDateTimeGetDayOfWeekUTC",
                        "short_description": "Gets the day of the week stored by the GlideDateTime object, expressed in the UTC time\n    zone.",
                        "description": "",
                        "name": "getDayOfWeekUTC()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gdt = new GlideDateTime(\"2011-12-01 12:00:00\");//Thursday\ngs.info(gdt.getDayOfWeekLocalTime());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Number",
                            "description": "The day of week value from 1 to 7. Monday equals 1, Sunday equals 7."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideDateTimeGetDaysInMonthLocalTime",
                        "short_description": "Gets the number of days in the month stored by the GlideDateTime object, expressed in\n    the current user's time zone.",
                        "description": "",
                        "name": "getDaysInMonthLocalTime()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gdt = new GlideDateTime(\"2011-12-02 12:00:00\"); //December\ngs.info(gdt.getDaysInMonthLocalTime());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Number",
                            "description": "The number of days in the current month in the user's time zone."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideDateTimeGetDaysInMonthUTC",
                        "short_description": "Gets the number of days in the month stored by the GlideDateTime object, expressed in\n    the UTC time zone.",
                        "description": "",
                        "name": "getDaysInMonthUTC()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gdt = new GlideDateTime(\"2011-11-02 12:00:00\"); //November\ngs.info(gdt.getDaysInMonthUTC());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Number",
                            "description": "The number of days in the month stored by the GlideDateTime object, expressed\n                in the UTC time zone."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideDateTimeGetDisplayValue",
                        "short_description": "Gets the date and time value in the current user's display format and time\n    zone.",
                        "description": "",
                        "name": "getDisplayValue()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gdt = new GlideDateTime(\"2011-08-31 08:00:00\");\ngs.info(gdt.getDisplayValue()); //uses current user session time zone (US/Pacific)",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The date and time in the user's format and time zone. Keep in mind\n                when designing business rules or script includes that this method may return values\n                in different formats for different users."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideDateTimeGetDisplayValueInternal",
                        "short_description": "Gets the display value in the internal format (yyyy-MM-dd HH:mm:ss).",
                        "description": "",
                        "name": "getDisplayValueInternal()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gdt = new GlideDateTime(\"2011-08-31 08:00:00\"); \ngs.info(gdt.getDisplayValueInternal()); //uses current user session time zone (US/Pacific)",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The date and time values for the GlideDateTime object in the current user's\n                time zone and the internal date and time format of <samp class=\"ph codeph\">yyyy-MM-dd\n                  HH:mm:ss</samp>."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideDateTimeGetDSTOffset",
                        "short_description": "Gets the amount of time that daylight saving time is offset.",
                        "description": "",
                        "name": "getDSTOffset()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gdt = new GlideDateTime(\"2014-08-31 08:00:00\"); \ngs.info(gdt.getDSTOffset()); //uses current user session time zone (US/Pacific)",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Number",
                            "description": "Amount of time, in milliseconds, that daylight saving is offset. Returns 0 if\n                there is no offset or if the time is not during daylight saving time."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideDateTimeGetErrorMsg",
                        "short_description": "Gets the current error message.",
                        "description": "",
                        "name": "getErrorMsg()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gdt = new GlideDateTime(); \ngdt.setDisplayValue(\"2011-aa-01 00:00:00\"); \ngs.info(gdt.getErrorMsg());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The error message."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SGDT-getInternalFormatedLocalTime",
                        "short_description": "Returns the object's time in the local time zone and in the internal\n    format.",
                        "description": "",
                        "name": "getInternalFormattedLocalTime()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The object's time in the local time zone and the internal format."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideDateTimeGetLocalDate",
                        "short_description": "Gets the date stored by the GlideDateTime object, expressed in the standard format,\n    yyyy-MM-dd, and the current user's time zone.",
                        "description": "",
                        "name": "getLocalDate()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gdt = new GlideDateTime(\"2011-08-31 08:00:00\");\ngs.info(gdt.getLocalDate());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "GlideDate",
                            "description": "The date in the user's time zone."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideDateTimeGetLocalTime",
                        "short_description": "Returns a GlideTime object that represents the time portion of the GlideDateTime object\n    in the user's time zone.",
                        "description": "",
                        "name": "getLocalTime()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gdt = new GlideDateTime(\"2014-08-31 08:00:00\");\ngt = gdt.getLocalTime();\ngs.info(\"local time is \" + gt.getByFormat('hh:mm:ss'));",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "GlideTime",
                            "description": "The time in the user's time zone."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideDateTimeGetMonthLocalTime",
                        "short_description": "Gets the month stored by the GlideDateTime object, expressed in the current user's time\n    zone.",
                        "description": "",
                        "name": "getMonthLocalTime()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gdt = new GlideDateTime(\"2011-11-02 12:00:00\"); //November\ngs.info(gdt.getMonthLocalTime());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Number",
                            "description": "The numerical value of the month."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideDateTimeGetMonthUTC",
                        "short_description": "Gets the month stored by the GlideDateTime object, expressed in the UTC time zone.",
                        "description": "",
                        "name": "getMonthUTC()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gdt = new GlideDateTime(\"2011-11-02 12:00:00\"); //November\ngs.info(gdt.getMonthUTC());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Number",
                            "description": "The numerical value of the month."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideDateTimeGetNumericValue",
                        "short_description": "Gets the number of milliseconds since January 1, 1970, 00:00:00 GMT.",
                        "description": "",
                        "name": "getNumericValue()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gdt = new GlideDateTime(\"2011-08-31 08:00:00\");\ngs.info(gdt.getNumericValue());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Number",
                            "description": "The number of milliseconds since January 1, 1970, 00:00:00 GMT."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideDateTimeGetTime",
                        "short_description": "Returns a GlideTime object that represents the time portion of the GlideDateTime\n    object.",
                        "description": "",
                        "name": "getTime()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gdt = new GlideDateTime(\"2014-08-31 08:00:00\");\ngt = gdt.getTime();\ngs.info(gt.getByFormat('hh:mm:ss'));",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "GlideTime",
                            "description": "The Unix duration stamp in system format based on GMT time."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideDateTimeGetTZOffset",
                        "short_description": "Gets the time zone offset in milliseconds.",
                        "description": "",
                        "name": "getTZOffset()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gdt = new GlideDateTime();\ngdt.getLocalTime(); // PST local time\ngs.info(gdt.getTZOffset());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Number",
                            "description": "The number of milliseconds of time zone offset."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SGDT-getUserFormattedLocalTime",
                        "short_description": "Returns the object's time in the local time zone and in the user's format.",
                        "description": "",
                        "name": "getUserFormattedLocalTime()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The object's time in the local time zone and in the user's format."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideDateTimeGetValue",
                        "short_description": "Gets the date and time value stored by the GlideDateTime object in the internal format,\n    yyyy-MM-dd HH:mm:ss, and the system time zone, UTC by default.",
                        "description": "",
                        "name": "getValue()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gdt = new GlideDateTime(\"2014-08-31 08:00:00\");\ngs.info(gdt.getValue());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The date and time value in the internal format and system time zone."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideDateTimeGetWeekOfYearLocalTime",
                        "short_description": "Gets the number of the week stored by the GlideDateTime object, expressed in the\n    current user's time zone. All weeks begin on Sunday. The first week of the year is the week that\n    contains at least one day of the new year. The week beginning Sunday 2015-12-27 is considered\n    the first week of 2016 as that week contains January 1 and 2.",
                        "description": "",
                        "name": "getWeekOfYearLocalTime()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gdt = new GlideDateTime(\"2011-12-01 12:00:00\");//49th week, 1st week in december \ngs.info(gdt.getWeekOfYearLocalTime());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Number",
                            "description": "The number of the current week in local time. The highest week number\n                in a year is either 52 or 53."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideDateTimeGetWeekOfYearUTC",
                        "short_description": "Gets the number of the week stored by the GlideDateTime object, expressed in the UTC\n    time zone. All weeks begin on Sunday. The first week of the year is the week that contains at\n    least one day of the new year. The week beginning Sunday 2015-12-27 is considered the first week\n    of 2016 as that week contains January 1 and 2.",
                        "description": "",
                        "name": "getWeekOfYearUTC()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gdt = new GlideDateTime(\"2011-12-01 12:00:00\");//49th week, 1st week in december \ngs.info(gdt.getWeekOfYearUTC());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Number",
                            "description": "The number of the current week in UTC time. The highest week number in\n                a year is either 52 or 53."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideDateTimeGetYearLocalTime",
                        "short_description": "Gets the year stored by the GlideDateTime object, expressed in the current user's time\n    zone.",
                        "description": "",
                        "name": "getYearLocalTime()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gdt = new GlideDateTime(\"2011-11-02 12:00:00\");\ngs.info(gdt.getYearLocalTime());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Number",
                            "description": "Four-digit year value in the user's time zone."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideDateTimeGetYearUTC",
                        "short_description": "Gets the year stored by the GlideDateTime object, expressed in the UTC time zone.",
                        "description": "",
                        "name": "getYearUTC()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gdt = new GlideDateTime(\"2011-11-02 12:00:00\"); \ngs.info(gdt.getYearUTC());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Number",
                            "description": "4-digit year value in the UTC time zone."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideDateTimeHasDate",
                        "short_description": "Determines if an object's date is set.",
                        "description": "",
                        "name": "hasDate()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gdt = new GlideDateTime(\"2011-08-31 08:00:00\");\ngs.info(gdt.hasDate());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "True if the object date is set; otherwise, returns false."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideDateTimeIsDST",
                        "short_description": "Determines if an object's time uses a daylight saving offset.",
                        "description": "",
                        "name": "isDST()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gdt = new GlideDateTime(\"2014-08-31 00:00:00\");\ngs.info(gdt.isDST()); //true",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "True if the time is daylight saving; otherwise, returns false."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideDateTimeIsValid",
                        "short_description": "Determines if a value is a valid date and time.",
                        "description": "",
                        "name": "isValid()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gdt = new GlideDateTime(); \ngdt.setDisplayValue(\"2011-aa-01 00:00:00\"); \ngs.info(gdt.isValid());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "True if value is valid; otherwise, returns false."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SGDT-onOrAfter_GDT",
                        "short_description": "Determines if the GlideDateTime object occurs on or after the specified\n    GlideDateTime.",
                        "description": "",
                        "name": "onOrAfter(GlideDateTime gdt)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gdt1 = new GlideDateTime(\"2016-05-09 10:11:12\");\nvar gdt2 = new GlideDateTime(\"2017-06-12 15:11:12\");\ngs.info(gdt1.onOrAfter(gdt2));   ",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "gdt",
                                "type": "GlideDateTime",
                                "description": "The time to check against."
                            }
                        ],
                        "return": {
                            "type": "Boolean",
                            "description": "Returns true if the GlideDateTime object's time is on or after the time\n                specified by the parameter."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SGDT-onOrBefore_GDT",
                        "short_description": "Determines if the GlideDateTime object occurs on or before the specified\n    GlideDateTime.",
                        "description": "",
                        "name": "onOrBefore(GlideDateTime gdt)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gdt1 = new GlideDateTime(\"2016-05-09 10:11:12\");\nvar gdt2 = new GlideDateTime(\"2017-06-12 15:11:12\");\ngs.info(gdt1.onOrBefore(gdt2));   ",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "gdt",
                                "type": "GlideDateTime",
                                "description": "The time to check against."
                            }
                        ],
                        "return": {
                            "type": "Boolean",
                            "description": "Returns true if the GlideDateTime object's time is on or before the time\n                specified by the parameter."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideDateTimeSetDayOfMonthLocalTime_Number_day",
                        "short_description": "Sets the day of the month to a specified value in the current user's time\n    zone.",
                        "description": "",
                        "name": "setDayOfMonthLocalTime(Number day)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gdt = new GlideDateTime();\ngdt.setDayOfMonthLocalTime(9);\ngs.info(gdt.getDayOfMonthLocalTime());",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "day",
                                "type": "Number",
                                "description": "The day of month to change to, from 1 to 31. If this value is greater than the\n                maximum number of days in the month, the value is set to the last day of the month."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideDateTimeSetDayOfMonthUTC_Number_day",
                        "short_description": "Sets the day of the month to a specified value in the UTC time zone.",
                        "description": "",
                        "name": "setDayOfMonthUTC(Number day)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gdt = new GlideDateTime();\ngdt.setDayOfMonthUTC(9);\ngs.info(gdt.getDayOfMonthUTC());",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "day",
                                "type": "Number",
                                "description": "The day of month to change to, from 1 to 31. If this value is greater than the\n                maximum number of days in the month, the value is set to the last day of the month."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideDateTimeSetDisplayValue_String_asDisplayed",
                        "short_description": "Sets a date and time value using the current user's display format and time\n    zone.",
                        "description": "",
                        "name": "setDisplayValue(String asDisplayed)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gdt = new GlideDateTime(\"2014-02-02 12:00:00\");\ngdt.setDisplayValue(\"2014-01-01 12:00:00\");//uses current user session time zone (US/Pacific) \ngs.info(gdt.getValue());",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "asDisplayed",
                                "type": "String",
                                "description": "The date and time in the current user's display format and time zone. The\n                parameter must be formatted using the current user's preferred display format, such\n                as MM-dd-yyyy HH:mm:ss. To assign the current date and time to a variable in a\n                workflow script, use\n                  <var class=\"keyword varname\">variable</var><samp class=\"ph codeph\">.setDisplayValue(gs.nowDateTime);</samp>."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideDateTimeSetDisplayValue_String_value_String_format",
                        "short_description": "Sets a date and time value using the current user's time zone and the specified date\n    and time format.",
                        "description": "<p>This method throws a runtime exception if the date and time format used in the\n          <span class=\"keyword parmname\">value</span> parameter does not match the <span class=\"keyword parmname\">format</span>\n        parameter. You can retrieve the error message by calling <span class=\"keyword apiname\">getErrorMsg()</span> on\n        the GlideDateTime object after the exception is caught.</p>",
                        "name": "setDisplayValue(String value, String format)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gdt = new GlideDateTime(\"2011-02-02 12:00:00\");\ngdt.setDisplayValue(\"20-5-2011 12:00:00\", \"dd-MM-yyyy HH:mm:ss\"); //uses current user session time zone (US/Pacific)\ngs.info(gdt.getValue());",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "value",
                                "type": "String",
                                "description": "Date and time in the current user's time zone."
                            },
                            {
                                "name": "format",
                                "type": "String",
                                "description": "Date and time format to use to parse the <span class=\"keyword parmname\">value</span> parameter.\n                  <div class=\"p\">Use the following values to describe the <span class=\"keyword parmname\">value</span>\n                    parameter:<ul class=\"ul\" id=\"r_ScopedGlideDateTimeSetDisplayValue_String_value_String_format__ul_h13_nvr_ckb\">\n                    <li class=\"li\">dd: Day of the month</li>\n\n                    <li class=\"li\">MM: Month of the year</li>\n\n                    <li class=\"li\">yyyy: Year</li>\n\n                    <li class=\"li\">HH: Hour</li>\n\n                    <li class=\"li\">mm: Minutes</li>\n\n                    <li class=\"li\">ss: Seconds</li>\n\n                  </ul>\n</div>\n<p class=\"p\">For example: \"dd-MM-yyyy HH:mm:ss\" or \"MM-dd-yyyy HH:mm\".</p>"
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideDateTimeSetDisplayValueInternal_String_value",
                        "short_description": "Sets a date and time value using the internal format (yyyy-MM-dd HH:mm:ss) and the\n    current user's time zone.",
                        "description": "",
                        "name": "setDisplayValueInternal(String value)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gdt = new GlideDateTime(\"2014-02-02 12:00:00\");\ngdt.setDisplayValueInternal(\"2014-01-01 12:00:00\"); //uses current user session time zone (US/Pacific)\ngs.info(gdt.getValue());",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "value",
                                "type": "String",
                                "description": "The date and time in internal format."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideDateTime_GlideDateTime_g",
                        "short_description": "Sets the date and time of the current object using an existing GlideDateTime object.\n    This method is equivalent to instantiating a new object with a GlideDateTime\n    parameter.",
                        "description": "",
                        "name": "setGlideDateTime(GlideDateTime g)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var dt1 = new GlideDateTime(\"2011-01-01 12:00:00\");\nvar dt2 = new GlideDateTime(\"2011-02-02 08:00:00\");\ndt1.setGlideDateTime(dt2);\ngs.info(dt1.getValue());",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "g",
                                "type": "GlideDateTime",
                                "description": "The object to use for setting the datetime value."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideDateTimeSetMonthLocalTime_Number",
                        "short_description": "Sets the month stored by the GlideDateTime object to the specified value using the\n    current user's time zone.",
                        "description": "",
                        "name": "setMonthLocalTime(Number month)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gdt = new GlideDateTime();\ngdt.setMonthLocalTime(1);\ngs.info(gdt.getMonthLocalTime());",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "month",
                                "type": "Number",
                                "description": "The month to change to."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideDateTimeSetMonthUTC_Number",
                        "short_description": "Sets the month stored by the GlideDateTime object to the specified value using the UTC\n    time zone.",
                        "description": "",
                        "name": "setMonthUTC(Number month)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gdt = new GlideDateTime();\ngdt.setMonthUTC(1);\ngs.info(gdt.getMonthUTC());",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "month",
                                "type": "Number",
                                "description": "The month to change to."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideDateTimeHasDateMethod",
                        "short_description": "Sets the date and time of the GlideDateTime object.",
                        "description": "",
                        "name": "setValue(String o)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gdt = new GlideDateTime(\"2011-01-01 12:00:00\");\ngdt.setValue(\"2011-02-02 08:00:00\");  // value set =  2011-02-02 08:00:00\ngs.info(gdt.getValue());",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "o",
                                "type": "String",
                                "description": "The date and time to use. This parameter may be one of several types: <ul class=\"ul\" id=\"r_ScopedGlideDateTimeHasDateMethod__ul_jp2_mhc_fr\">\n                  <li class=\"li\">A string in the UTC time zone and the internal format of yyyy-MM-dd HH:mm:ss.\n                    Sets the value of the object to the specified date and time. Using the method\n                    this way is equivalent to instantiating a new GlideDateTime object using the\n                    GlideDateTime(String value) constructor. If the date and time\n                    format used does not match the internal format, the method attempts to set the\n                    date and time using other available formats. Resolving the date and time this\n                    way can lead to inaccurate data due to ambiguity in the day and month values.\n                    When using a non-standard date and time format, use\n                    setValueUTC(String dt, String format) instead.</li>\n\n                  <li class=\"li\">A GlideDateTime object. Sets the value of the object to the date and time\n                    stored by the GlideDateTime passed in the parameter. Using the method this way\n                    is equivalent to instantiating a new GlideDateTime object using the\n                    GlideDateTime(GlideDateTime g) constructor.</li>\n\n                  <li class=\"li\">A JavaScript Number. Sets the value of the object using the Number value as\n                    milliseconds past January 1, 1970 00:00:00 GMT.</li>\n\n                </ul>"
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideDateTimeSetValueUTC_String_dt_String_format",
                        "short_description": "Sets a date and time value using the UTC time zone and the specified date and time\n    format. This method throws a runtime exception if the date and time format used in the\n      <span class=\"keyword parmname\">dt</span> parameter does not match the <span class=\"keyword parmname\">format</span> parameter.\n    You can retrieve the error message by calling <samp class=\"ph codeph\">getErrorMsg()</samp> on the\n    GlideDateTime object after the exception is caught.",
                        "description": "",
                        "name": "setValueUTC(String dt, String format)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gdt = new GlideDateTime(\"2011-01-01 12:00:00\");\ngdt.setValueUTC(\"15-02-2011 08:00:00\", \"dd-MM-yyyy HH:mm:ss\");\ngs.info(gdt.getValue());",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "dt",
                                "type": "String",
                                "description": "The date and time to use."
                            },
                            {
                                "name": "format",
                                "type": "String",
                                "description": "The date and time format to use."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideDateTimeSetYearLocalTime_Number",
                        "short_description": "Sets the year stored by the GlideDateTime object to the specified value using the\n    current user's time zone.",
                        "description": "",
                        "name": "setYearLocalTime(Number year)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gdt = new GlideDateTime();\ngdt.setYearLocalTime(2013);\ngs.info(gdt.getYearLocalTime());",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "year",
                                "type": "Number",
                                "description": "The year to change to."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideDateTimeSetYearUTC_Number",
                        "short_description": "Sets the year stored by the GlideDateTime object to the specified value using the UTC\n    time zone.",
                        "description": "",
                        "name": "setYearUTC(Number year)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gdt = new GlideDateTime();\ngdt.setYearUTC(2013);\ngs.info(gdt.getYearUTC());",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "year",
                                "type": "Number",
                                "description": "The year to change to."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideDateTimeSubtract_GlideDateTime_GlideDate_Time",
                        "short_description": "Gets the duration difference between two GlideDateTime values.",
                        "description": "",
                        "name": "subtract(GlideDateTime start, GlideDateTime end)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gdt1 = new GlideDateTime(\"2011-08-28 09:00:00\");\nvar gdt2 = new GlideDateTime(\"2011-08-31 08:00:00\");\n \nvar dur = GlideDateTime.subtract(gdt1, gdt2); //the difference between gdt1 and gdt2\ngs.info(dur.getDisplayValue());",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "Start",
                                "type": "GlideDateTime",
                                "description": "The start value."
                            },
                            {
                                "name": "End",
                                "type": "GlideDateTime",
                                "description": "The end value."
                            }
                        ],
                        "return": {
                            "type": "GlideDuration",
                            "description": "The duration between the two values."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideDateTimeSubtract_GlideTime",
                        "short_description": "Subtracts a specified amount of time from the current GlideDateTime object.",
                        "description": "",
                        "name": "subtract(GlideTime time)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gdt = new GlideDateTime(\"2011-08-31 08:00:00\");\nvar gtime1 = new GlideTime();\ngtime1.setValue(\"00:00:20\");\ngdt.subtract(gtime1);\nvar gtime2 = gdt.getTime();\ngs.info(gtime2.getByFormat('hh:mm:ss'));",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "time",
                                "type": "GlideTime",
                                "description": "The time value to subtract."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideDateTimeSubtract_Number",
                        "short_description": "Subtracts the specified number of milliseconds from the GlideDateTime object.",
                        "description": "",
                        "name": "subtract(Number milliseconds)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gdt = new GlideDateTime(\"2011-12-07 08:00:00\");\ngdt.subtract(1000);\ngs.info(gdt.getValue());",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "milliseconds",
                                "type": "Number",
                                "description": "The number of milliseconds to subtract."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideDateTimeToString",
                        "short_description": "Gets the date and time value stored by the GlideDateTime object in the internal format,\n    yyyy-MM-dd HH:mm:ss, and the system time zone, UTC by default. This method is equivalent to\n    getValue().",
                        "description": "",
                        "name": "toString()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gdt = new GlideDateTime(\"2011-08-31 08:00:00\");\ngs.info(gdt.toString());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The date and time stored by the GlideDateTime object in the system time zone\n                and format."
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "The <span class=\"keyword apiname\">GlideDBFunctionBuilder</span> methods provide a way to build Relational\n      Database Management System (RDBMS) functions to perform SQL operations on record data. These\n      methods can be used in both scoped and global server scripts.<br/><br/>To use platform functions: <ul class=\"ul\" id=\"GlideDBFunctionBuilderScopedAPI__ul_bmr_mqg_jbb\">\n        <li class=\"li\">Construct a function using the GlideDBFunctionBuilder constructor and associated\n          methods. </li>\n\n        <li class=\"li\">After building a function, you can apply the function to the current record using the\n            <span class=\"keyword apiname\">addFunction()</span> method of the <span class=\"keyword apiname\">GlideRecord</span> class. </li>\n\n        <li class=\"li\">Add the function to a query using the <span class=\"keyword apiname\">addQuery()</span> method of the\n            <span class=\"keyword apiname\">GlideRecord</span> class.</li>\n\n        <li class=\"li\">Retrieve the results of the function using the existing <span class=\"keyword apiname\">GlideRecord</span>\n          API methods such as <span class=\"keyword apiname\">getValue()</span> and\n          <span class=\"keyword apiname\">getElement()</span>.</li>\n\n      </ul>",
                "short_description": "Build functions to perform SQL operations in the database.",
                "identifier": "GlideDBFunctionBuilderScopedAPI",
                "name": "GlideDBFunctionBuilder - Scoped, Global",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "GlideDBFBScoped-GlideDBFB",
                        "short_description": "Instantiates a GlideDBFunctionBuilder object.",
                        "description": "",
                        "name": "GlideDBFunctionBuilder()",
                        "type": "Constructor",
                        "examples": [
                            {
                                "script": "var builder = new GlideDBFunctionBuilder();\n",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GlideDBFBScoped-add",
                        "short_description": "Adds the values of two or more integer fields.",
                        "description": "<p>Use the <span class=\"keyword apiname\">field(String field)</span> method to define fields on which the\n        operation is performed.</p>",
                        "name": "add()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var functionBuilder = new GlideDBFunctionBuilder();\nvar myAddingFunction = functionBuilder.add();\nmyAddingFunction = functionBuilder.field('order');\nmyAddingFunction = functionBuilder.field('priority');\nmyAddingFunction = functionBuilder.build();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GlideDBFBScoped-build",
                        "short_description": "Builds the database function defined by the GlideDBFunctionBuilder object.",
                        "description": "",
                        "name": "build()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var functionBuilder = new GlideDBFunctionBuilder();\nvar myAddingFunction = functionBuilder.add();\nmyAddingFunction = functionBuilder.field('order');\nmyAddingFunction = functionBuilder.field('priority');\nmyAddingFunction = functionBuilder.build();\ngs.info(myAddingFunction);",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GlideDBFBScoped-concat",
                        "short_description": "Concatenates the values of two or more fields.",
                        "description": "<p>Use the <span class=\"keyword apiname\">field(String field)</span> method to define fields on which the\n        operation is performed.</p>",
                        "name": "concat()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var functionBuilder = new GlideDBFunctionBuilder();\nvar myConcatFunction = functionBuilder.concat();\nmyConcatFunction = functionBuilder.field('short_description');\nmyConcatFunction = functionBuilder.field('caller_id.name');\nmyConcatFunction = functionBuilder.build();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GlideDBFBScoped-constant_S",
                        "short_description": "Defines a constant value to use in the function. If used with the\n      <span class=\"keyword apiname\">dayofweek()</span> method, the string defines whether to use Sunday or Monday as\n    the first day of the week.",
                        "description": "",
                        "name": "constant(String constant)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "constant",
                                "type": "String",
                                "description": "A constant value used in a function. <p class=\"p\">When used with the\n                    <span class=\"keyword apiname\">dayofweek()</span> method, the value defines whether the week starts\n                  on a Sunday or Monday. </p>\n<div class=\"p\">\n                  <ul class=\"ul\" id=\"GlideDBFBScoped-constant_S__ul_wz5_5bk_kbb\">\n                    <li class=\"li\"><span class=\"ph uicontrol\">1</span>: Week begins on Sunday. </li>\n\n                    <li class=\"li\"><span class=\"ph uicontrol\">2</span>: Week begins on Monday. </li>\n\n                  </ul>\n\n                </div>\n<p class=\"p\">This definition enables the <span class=\"keyword apiname\">dayofweek()</span> method to return\n                  the correct day of the week from a given date. If a value other than 1 or 2 is\n                  provided, the <span class=\"keyword apiname\">dayofweek()</span> method uses Sunday as the first day\n                  of the week.</p>"
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GlideDBFBScoped-datediff",
                        "short_description": "Determines the duration using a given start date/time and end date/time.",
                        "description": "<p>Use the <span class=\"keyword apiname\">field(String field)</span> method to define start and end date/time\n        fields.</p>",
                        "name": "datediff()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var functionBuilder = new GlideDBFunctionBuilder();\nvar myDateDiffFunction = functionBuilder.datediff();\nmyDateDiffFunction = functionBuilder.field('sys_updated_on');\nmyDateDiffFunction = functionBuilder.field('opened_at');\nmyDateDiffFunction = functionBuilder.build();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GlideDBFBScoped-dayofweek",
                        "short_description": "Returns an integer representing the day of the week for a given date.",
                        "description": "<p>Use the <span class=\"keyword apiname\">field(String field)</span> method to define the given date/time. Use\n        the <span class=\"keyword apiname\">constant(String constant)</span> method to define whether the week starts on\n        a Sunday or Monday.</p><p>This method can be used with MySQL, Oracle, and Microsoft SQL Server databases only. If\n        using an Oracle database, the NLS_TERRITORY setting must be set to a territory with Sunday\n        as the first day of the week.</p>",
                        "name": "dayofweek()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var functionBuilder = new GlideDBFunctionBuilder();\nvar dayOfWeekFunction = functionBuilder.dayofweek();\ndayOfWeekFunction = functionBuilder.field('opened_at');\ndayOfWeekFunction = functionBuilder.constant('2');\ndayOfWeekFunction = functionBuilder.build();\n\nvar now_GR = new GlideRecord('incident');\nnow_GR.addFunction(dayOfWeekFunction);\nnow_GR.query();\nwhile(now_GR.next())\ngs.log(now_GR.getValue(dayOfWeekFunction));\n",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Integer",
                            "description": "<p class=\"p\">If the first day of the week is set to Sunday in the <span class=\"keyword apiname\">constant(String\n                    constant)</span> method, return values are associated with the following days\n                  of the week:</p>\n\n                <div class=\"p\">\n                  <ul class=\"ul\" id=\"GlideDBFBScoped-dayofweek__ul_ufc_yck_kbb\">\n                    <li class=\"li\"><span class=\"ph uicontrol\">1</span>: Sunday</li>\n\n                    <li class=\"li\"><span class=\"ph uicontrol\">2</span>: Monday</li>\n\n                    <li class=\"li\"><span class=\"ph uicontrol\">3</span>: Tuesday</li>\n\n                    <li class=\"li\"><span class=\"ph uicontrol\">4</span>: Wednesday</li>\n\n                    <li class=\"li\"><span class=\"ph uicontrol\">5</span>: Thursday</li>\n\n                    <li class=\"li\"><span class=\"ph uicontrol\">6</span>: Friday</li>\n\n                    <li class=\"li\"><span class=\"ph uicontrol\">7</span>: Saturday</li>\n\n                  </ul>\n\n                </div>\n\n                <p class=\"p\">If the first day of the week is set to Monday:</p>\n\n                <div class=\"p\">\n                  <ul class=\"ul\" id=\"GlideDBFBScoped-dayofweek__ul_at2_gdk_kbb\">\n                    <li class=\"li\"><span class=\"ph uicontrol\">1</span>: Monday</li>\n\n                    <li class=\"li\"><span class=\"ph uicontrol\">2</span>: Tuesday</li>\n\n                    <li class=\"li\"><span class=\"ph uicontrol\">3</span>: Wednesday</li>\n\n                    <li class=\"li\"><span class=\"ph uicontrol\">4</span>: Thursday</li>\n\n                    <li class=\"li\"><span class=\"ph uicontrol\">5</span>: Friday</li>\n\n                    <li class=\"li\"><span class=\"ph uicontrol\">6</span>: Saturday</li>\n\n                    <li class=\"li\"><span class=\"ph uicontrol\">7</span>: Sunday</li>\n\n                  </ul>\n\n                </div>\n\n                <p class=\"p\">If a value other than 1 or 2 is provided in the <span class=\"keyword apiname\">constant(String\n                    constant)</span> method, the <span class=\"keyword apiname\">dayofweek()</span> method uses\n                  Sunday as the first day of the week.</p>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GlideDBFBScoped-divide",
                        "short_description": "Divides the value of one integer field by another.",
                        "description": "<p>Use the <span class=\"keyword apiname\">field(String field)</span> method to define fields on which the\n        operation is performed.</p>",
                        "name": "divide()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var functionBuilder = new GlideDBFunctionBuilder();\nvar myDivideFunction = functionBuilder.divide();\nmyDivideFunction = functionBuilder.field('order');\nmyDivideFunction = functionBuilder.field('priority');\nmyDivideFunction = functionBuilder.build();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GlideDBFBScoped-field_S",
                        "short_description": "Defines a field on which a SQL operation is performed.",
                        "description": "",
                        "name": "field(String field)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var functionBuilder = new GlideDBFunctionBuilder();\nvar myAddingFunction = functionBuilder.add();\nmyAddingFunction = functionBuilder.field('order');\nmyAddingFunction = functionBuilder.field('priority');\nmyAddingFunction = functionBuilder.build();",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "field",
                                "type": "String",
                                "description": "The field on which you are performing the SQL operation."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GlideDBFBScoped-length",
                        "short_description": "Determines the number of code units in a field.",
                        "description": "<p>Use the <span class=\"keyword apiname\">field(String field)</span> method to define fields on which the\n        operation is performed.</p>",
                        "name": "length()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var functionBuilder = new GlideDBFunctionBuilder();\nvar myLengthFunction = functionBuilder.length();\nmyLengthFunction = functionBuilder.field('short_description');\nmyLengthFunction = functionBuilder.build();\n",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GlideDBFBScoped-multiply",
                        "short_description": "Multiplies the values of two integer fields.",
                        "description": "<p>Use the <span class=\"keyword apiname\">field(String field)</span> method to define fields on which the\n        operation is performed.</p>",
                        "name": "multiply()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var functionBuilder = new GlideDBFunctionBuilder();\nvar myMultiplyFunction = functionBuilder.multiply();\nmyMultiplyFunction = functionBuilder.field('order');\nmyMultiplyFunction = functionBuilder.field('priority');\nmyMultiplyFunction = functionBuilder.build();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GlideDBFBScoped-subtract",
                        "short_description": "Subtracts the value of one integer field from another.",
                        "description": "<p>Use the <span class=\"keyword apiname\">field(String field)</span> method to define fields on which the\n        operation is performed.</p>",
                        "name": "subtract()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var functionBuilder = new GlideDBFunctionBuilder();\nvar mySubtractFunction = functionBuilder.subtract();\nmySubtractFunction = functionBuilder.field('order');\nmySubtractFunction = functionBuilder.field('priority');\nmySubtractFunction = functionBuilder.build();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "",
                "short_description": "The scoped GlideDigest class provides methods for creating a message digest from strings\n  or input streams using MD5, SHA1, or SHA256 hash algorithms.",
                "identifier": "c_GlideDigestScopedAPI",
                "name": "GlideDigest",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "r_SGDigest-GlideDigest",
                        "short_description": "Creates an instance of scoped GlideDigest.",
                        "description": "",
                        "name": "GlideDigest()",
                        "type": "Constructor",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SGDigest-getMD5Base64_S",
                        "short_description": "Create a message digest from a string using the MD5 algorithm. The output string is in\n    Base64.",
                        "description": "",
                        "name": "getMD5Base64(String source)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var inputString = \"Her molasses flowed slowly down the hill.\";\nvar digest = new GlideDigest();\ngs.info(digest.getMD5Base64(inputString));",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "source",
                                "type": "String",
                                "description": "The source string."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "The message digest."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SGDigest-getMD5Base64FrStrm_GSIS",
                        "short_description": "Create a message digest from an input stream using the MD5 algorithm. The output string\n    is in Base64.",
                        "description": "",
                        "name": "getMD5Base64FromInputStream( GlideScriptableInputStream inputStream)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var inputStream = new GlideSysAttachment().getContentStream(attachmentSysID);\nvar digest = new GlideDigest();\ngs.info(digest.getMD5Base64FromInputStream(inputStream));",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "inputStream",
                                "type": "GlideScriptableInputStream",
                                "description": "The source input stream."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "The message digest."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SGDigest-getMD5Hex_S",
                        "short_description": "Create a message digest from a string using the MD5 algorithm. The output string is in\n    hexadecimal.",
                        "description": "",
                        "name": "getMD5Hex(String source)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var inputString = \"Her molasses flowed slowly down the hill.\";\nvar digest = new GlideDigest();\ngs.info(digest.getMD5Hex(inputString));",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "source",
                                "type": "String",
                                "description": "The source string."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "The message digest."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SGDigest-getMD5HexStrm_GSIS",
                        "short_description": "Create a message digest from an input stream using the MD5 algorithm. The output string\n    is in hexadecimal.",
                        "description": "",
                        "name": "getMD5HexFromInputStream( GlideScriptableInputStream inputStream)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var inputStream = new GlideSysAttachment().getContentStream(attachmentSysID);\nvar digest = new GlideDigest();\ngs.info(digest.getMD5HexFromInputStream(inputStream));",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "inputStream",
                                "type": "GlideScriptableInputStream",
                                "description": "The source input stream."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "The message digest."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SGDigest-getSHA1Base64_S",
                        "short_description": "Create a message digest from a string using the SHA1 algorithm. The output string is in\n    Base64.",
                        "description": "",
                        "name": "getSHA1Base64(String source)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var inputString = \"Her molasses flowed slowly down the hill.\";\nvar digest = new GlideDigest();\ngs.info(digest.getSHA1Base64(inputString));",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "source",
                                "type": "String",
                                "description": "The source string."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "The message digest."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SGDigest-getSHA1Base64FrStrm_GSIS",
                        "short_description": "Create a message digest from an input stream using the SHA1 algorithm. The output\n    string is in Base64.",
                        "description": "",
                        "name": "getSHA1Base64FromInputStream( GlideScriptableInputStream inputStream)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var inputStream = new GlideSysAttachment().getContentStream(attachmentSysID);\nvar digest = new GlideDigest();\ngs.info(digest.getSHA1Base64FromInputStream(inputStream));",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "inputStream",
                                "type": "GlideScriptableInputStream",
                                "description": "The source input stream."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "The message digest."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SGDigest-getSHA1Hex_S",
                        "short_description": "Create a message digest from a string using the SHA1 algorithm. The output string is in\n    hexadecimal.",
                        "description": "",
                        "name": "getSHA1Hex(String source)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var inputString = \"Her molasses flowed slowly down the hill.\";\nvar digest = new GlideDigest();\ngs.info(digest.getSHA1Hex(inputString));",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "source",
                                "type": "String",
                                "description": "The source string."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "The message digest."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SGDigest-getSHA1HexStrm-GSIS",
                        "short_description": "Create a message digest from an input stream using the SHA1 algorithm. The output\n    string is in hexadecimal.",
                        "description": "",
                        "name": "getSHA1HexFromInputStream( GlideScriptableInputStream inputStream)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var inputStream = new GlideSysAttachment().getContentStream(attachmentSysID);\nvar digest = new GlideDigest();\ngs.info(digest.getSHA1HexFromInputStream(inputStream));",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "inputStream",
                                "type": "GlideScriptableInputStream",
                                "description": "The source input stream."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "The message digest."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SGDigest-getSHA256Base64_S",
                        "short_description": "Create a message digest from a string using the SHA256 algorithm. The output string is\n    in Base64.",
                        "description": "",
                        "name": "getSHA256Base64(String source)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var inputString = \"Her molasses flowed slowly down the hill.\";\nvar digest = new GlideDigest();\ngs.info(digest.getSHA256Base64(inputString));",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "source",
                                "type": "String",
                                "description": "The source string."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "The message digest."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SGDigest-getSHA256B64S_GSIS",
                        "short_description": "Create a message digest from an input stream using the SHA256 algorithm. The output\n    string is in Base64.",
                        "description": "",
                        "name": "getSHA256Base64FromInputStream( GlideScriptableInputStream inputStream)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var inputStream = new GlideSysAttachment().getContentStream(attachmentSysID);\nvar digest = new GlideDigest();\ngs.info(digest.getSHA256Base64FromInputStream(inputStream));",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "inputStream",
                                "type": "GlideScriptableInputStream",
                                "description": "The source input stream."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "The message digest."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SGDigest-getSHA256Hex_S",
                        "short_description": "Create a message digest from a string using the SHA256 algorithm. The output string is\n    in hexadecimal.",
                        "description": "",
                        "name": "getSHA256Hex(String source)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var inputString = \"Her molasses flowed slowly down the hill.\";\nvar digest = new GlideDigest();\ngs.info(digest.getSHA256Hex(inputString));",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "source",
                                "type": "String",
                                "description": "The source string."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "The message digest."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SGDigest-getSHA256HexStrm_GSIS",
                        "short_description": "Create a message digest from an input stream using the SHA256 algorithm. The output\n    string is in hexadecimal.",
                        "description": "",
                        "name": "getSHA256HexFromInputStream( GlideScriptableInputStream inputStream)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var inputStream = new GlideSysAttachment().getContentStream(attachmentSysID);\nvar digest = new GlideDigest();\ngs.info(digest.getSHA256HexFromInputStream(inputStream));",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "inputStream",
                                "type": "GlideScriptableInputStream",
                                "description": "The source input stream."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "The message digest."
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "GlideDuration objects store the duration as a date and time from January 1, 1970, 00:00:00. As\n   a result, setValue() and getValue() use the scoped GlideDateTime object for parameters and return\n   values.",
                "short_description": "The scoped GlideDuration class provides methods for working with spans of time or\n  durations.",
                "identifier": "c_GlideDurationScopedAPI",
                "name": "GlideDuration",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "r_ScopedGlideDurationGlideDuration",
                        "short_description": "Instantiates a GlideDuration object.",
                        "description": "",
                        "name": "GlideDuration()",
                        "type": "Constructor",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideDurationGlideDuration_GlideDuration",
                        "short_description": "Instantiates a GlideDuration object by cloning the values of the passed in\n    GlideDuration object.",
                        "description": "",
                        "name": "GlideDuration(GlideDuration another)",
                        "type": "Constructor",
                        "examples": [
                            {
                                "script": "var duration = new GlideDuration('3 12:00:00');\nvar duration2 = new GlideDuration(duration);\ngs.info(duration2.getDisplayValue());",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "another",
                                "type": "GlideDuration",
                                "description": "GlideDuration object."
                            }
                        ],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideDurationGlideDuration_Number",
                        "short_description": "Instantiates a GlideDuration object with the specified duration in milliseconds.",
                        "description": "",
                        "name": "GlideDuration(Number milliseconds)",
                        "type": "Constructor",
                        "examples": [
                            {
                                "script": "var dur = new GlideDuration(60000);\ngs.info(dur.getDurationValue());",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "milliseconds",
                                "type": "Number",
                                "description": "Duration value.<p class=\"p\">Unit: Milliseconds</p>"
                            }
                        ],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideDurationGlideDuration_String",
                        "short_description": "Instantiates a GlideDuration object with the specified duration display\n    value.",
                        "description": "",
                        "name": "GlideDuration(String displayValue)",
                        "type": "Constructor",
                        "examples": [
                            {
                                "script": "var duration = new GlideDuration('3 12:00:00');\nvar duration2 = new GlideDuration('3:00:00');\nvar answer = duration.add(duration2);\ngs.info(answer.getDisplayValue());",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "displayValue",
                                "type": "String",
                                "description": "Duration value.<p class=\"p\">Format: d HH:mm:ss</p>"
                            }
                        ],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideDurationAdd_GlideDuration",
                        "short_description": "Adds the duration of the specified GlideDuration object to the current GlideDuration\n    object.",
                        "description": "",
                        "name": "add(GlideDuration duration)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var duration = new GlideDuration('3 12:00:00');\nvar duration2 = new GlideDuration('3:00:00');\nvar answer = duration.add(duration2);\ngs.info(answer.getDisplayValue());",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "duration",
                                "type": "GlideDuration",
                                "description": "GlideDuration object that contains the duration value to add to the current\n                GlideDuration object."
                            }
                        ],
                        "return": {
                            "type": "GlideDuration",
                            "description": "New GlideDuration object whose duration is the sum of the durations of the two\n                GlideDuration objects."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideDurationGetByFormat_String",
                        "short_description": "Returns the duration value in the specified format.",
                        "description": "",
                        "name": "getByFormat(String format)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var dur = new GlideDuration('3 22:00:00');\ngs.info(dur.getByFormat('HH:mm'));",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "format",
                                "type": "String",
                                "description": "Duration format."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "Current duration in the specified format."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideDurationGetDayPart",
                        "short_description": "Returns the number of days.",
                        "description": "",
                        "name": "getDayPart()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var dur = new GlideDuration('3 12:00:00');\ngs.info(dur.getDayPart());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Number",
                            "description": "Number of days in the duration."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideDurationGetDisplayValue",
                        "short_description": "Returns the display value of the duration in number of days, hours, and\n    minutes.",
                        "description": "",
                        "name": "getDisplayValue()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var dur = new GlideDuration('3 12:00:00');\ngs.info(dur.getDisplayValue());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "Number of days, hours, and minutes, such as 2 Days 10 Hours 36\n                  Minutes.<p class=\"p\">Format: Display value: \"n\" Days \"n\" Hours \"n\" Minutes</p>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideDurationGetDurationValue",
                        "short_description": "Returns the duration value in \"d HH:mm:ss\" format.",
                        "description": "",
                        "name": "getDurationValue()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var dur = new GlideDuration(60000);\ngs.info(dur.getDurationValue());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "Duration value. <p class=\"p\">Format: d HH:mm:ss</p>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideDurationGetRoundedDayPart",
                        "short_description": "Returns the rounded number of days. If the time part is more than 12 hours, the return\n    value is rounded up. Otherwise, it is rounded down.",
                        "description": "",
                        "name": "getRoundedDayPart()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var dur = new GlideDuration('3 11:00:00');\ngs.info(dur.getRoundedDayPart());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Number",
                            "description": "Day value of the display value rounded."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideDurationGetValue",
                        "short_description": "Returns the internal date/time value of the current GlideDuration object.",
                        "description": "<p>GlideDuration objects store the duration as a date and time from January 1, 1970, 00:00:00.</p>",
                        "name": "getValue()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var dur = new GlideDuration('3 12:00:00');\ngs.info(dur.getValue());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "Current duration within the GlideDuration object.<p class=\"p\">Format: YYYY-MM-DD\n                  HH:mm:ss</p>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideDurationSetDisplayValue_String",
                        "short_description": "Sets the duration display value.",
                        "description": "",
                        "name": "setDisplayValue(String asDisplayed)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var dur = new GlideDuration(); \ndur.setDisplayValue('3 08:00:00');\ngs.info(dur.getDisplayValue());",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "asDisplayed",
                                "type": "String",
                                "description": "Display duration value to set.<p class=\"p\">Format: d HH:mm:ss</p>"
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideDurationSetValue_Object",
                        "short_description": "Sets the internal date/time value of the GlideDuration object.",
                        "description": "<p>The method sets the duration value to the difference of the passed in date/time the base\n        date/time value of January 1, 1970, 00:00:00. The passed in date/time object (string) is\n        parsed into a GlideDateTime object.</p>",
                        "name": "setValue(Object o)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var dur = new GlideDuration();\ndur.setValue('1970-01-05 08:00:00'); // sets internal DateTime value. The String is parsed into a GlideDateTime object.\ngs.info(dur.getDisplayValue());",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "o",
                                "type": "Object",
                                "description": "Date and time to use as the endpoint for the calculated duration time.\n                  <p class=\"p\">Format: YYYY-MM-DD HH:mm:ss</p>"
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideDurationSubtract_GlideDuration",
                        "short_description": "Subtracts the duration of the specified GlideDuration object to the current\n    GlideDuration object.",
                        "description": "",
                        "name": "subtract(GlideDuration duration)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var duration = new GlideDuration('3 12:00:00');\nvar duration2 = new GlideDuration('3:00:00');\nvar answer = duration.subtract(duration2);\ngs.info(answer.getDisplayValue());",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "duration",
                                "type": "GlideDuration",
                                "description": "GlideDuration object that contains the duration value to subtract from the\n                current GlideDuration object."
                            }
                        ],
                        "return": {
                            "type": "GlideDuration",
                            "description": "New GlideDuration object whose duration contains the result of the subtraction\n                of the duration of the two GlideDuration objects."
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "",
                "short_description": "The Scoped GlideElement API provides a number of convenient script methods for dealing\n    with fields and their values. Scoped GlideElement methods are available for the fields of the\n    current GlideRecord.",
                "identifier": "c_GlideElementScopedAPI",
                "name": "GlideElement",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "SGE-canCreate",
                        "short_description": "Determines if the user's role permits the creation of new records in this\n    field.",
                        "description": "",
                        "name": "canCreate()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "True if the field can be created, false otherwise."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SGE-canRead",
                        "short_description": "Indicates whether the user's role permits them to read the associated\n    GlideRecord.",
                        "description": "",
                        "name": "canRead()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "True if the field can be read, false otherwise."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SGE-canWrite",
                        "short_description": "Determines whether the user's role permits them to write to the associated\n    GlideRecord.",
                        "description": "",
                        "name": "canWrite()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "True if the user can write to the field, false otherwise."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideElementChanges",
                        "short_description": "Determines if the current field has been modified. This functionality is available for\n    all available data types, except Journal fields.",
                        "description": "<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> The <span class=\"keyword apiname\">changes()</span> method is not supported within ACL scripts.</div></p><p><div class=\"note note\"><span class=\"notetitle\">Note:</span> If the GlideRecord on which you are performing this method has only been initialized\n          and read, and has not been written, the underlying before-and-after values are the same.\n          In this case, the method returns \"false\", as there has been no change to the data\n          store.</div></p>",
                        "name": "changes()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "// This method is often used in business rules. The following example shows is from a business rule, \n// if \"assigned_to\" field value is changed, create a event in the EventQueue. \nif (!current.assigned_to.nil() &amp;&amp; current.assigned_to.changes()) {\n  gs.eventQueue('incident.assigned', current, current.assigned_to.getDisplayValue() , previous.assigned_to.getDisplayValue());\n  }",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "True if the fields have been changed, false if the field has not."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideElementChangesFrom_Object_o",
                        "short_description": "Determines if the previous value of the current field matches the specified\n    object.",
                        "description": "<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> If the GlideRecord on which you are performing this method has only been initialized\n          and read, and has not been written, the underlying before-and-after values are the same.\n          In this case, the method returns \"false\", as there has been no change to the data\n          store.</div></p>",
                        "name": "changesFrom(Object o)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "// The following example shows that in a business rule, if \"active\" field is changed from true, \n// insert a event in the EventQueue.\nif (current.active.changesFrom(true)) {\n  gs.eventQueue(\"incident.inactive\", current, current.incident_state, previous.incident_state);\n}",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "o",
                                "type": "Object",
                                "description": "An object value to check against the previous value of the current\n                field."
                            }
                        ],
                        "return": {
                            "type": "Boolean",
                            "description": "True if the previous value matches, false if it does not."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideElementChangesTo_Object_o",
                        "short_description": "Determines if the new value of a field, after a change, matches the specified\n    object.",
                        "description": "<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> The <span class=\"keyword apiname\">changesTo()</span> method is not supported within ACL scripts.</div></p><p><div class=\"note note\"><span class=\"notetitle\">Note:</span> If the GlideRecord on which you are performing this method has only been initialized\n          and read, and has not been written, the underlying before-and-after values are the same.\n          In this case, the method returns \"false\", as there has been no change to the data\n          store.</div></p>",
                        "name": "changesTo(Object o)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "// The following example shows that in a business rule, if \"active\" field is changed to false, \n// insert a event in the EventQueue.\nif (current.active.changesTo(false)) {\n  gs.eventQueue(\"incident.inactive\", current, current.incident_state, previous.incident_state);\n}",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "o",
                                "type": "Object",
                                "description": "An object value to check against the new value of the current field."
                            }
                        ],
                        "return": {
                            "type": "Boolean",
                            "description": "True if the previous value matches, false if it does not."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SGE-dateNumericValue",
                        "short_description": "Returns the number of milliseconds since January 1, 1970, 00:00:00 GMT for a duration\n    field. Does not require the creation of a GlideDateTime object because the duration field is\n    already a GlideDateTime object.",
                        "description": "",
                        "name": "dateNumericValue()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var inc = new GlideRecord('incident');\ninc.get('17c90efb13418700cc36b1422244b05d');\ngs.info(inc.calendar_duration.dateNumericValue());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Number",
                            "description": "Number of milliseconds since January 1, 1970, 00:00:00 GMT."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SGE-getAttribute_String",
                        "short_description": "Returns the value of the specified attribute from the dictionary.",
                        "description": "<p>If the attribute is a boolean attribute, use <span class=\"keyword apiname\">getBooleanAttribute(String)</span>\n        to get the value as a boolean rather than as a string.</p>",
                        "name": "getAttribute(String attributeName)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "doit();\nfunction doit() {\n  var now_GR = new GlideRecord('sys_user');\n  now_GR.query(\"user_name\",\"admin\");\n  if (now_GR.next()) {\n    gs.info(\"we got one\");\n    gs.info(now_GR.location.getAttribute(\"tree_picker\"));\n  }\n \n}",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "attributeName",
                                "type": "String",
                                "description": "Attribute name"
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "Attribute value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SGE-getBooleanAttribute_String",
                        "short_description": "Returns the Boolean value of the specified attribute from the dictionary.",
                        "description": "<p>To get the value as a string, use <span class=\"keyword apiname\">getAttribute(string)</span>.</p>",
                        "name": "getBooleanAttribute(String attributeName)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "attributeName",
                                "type": "String",
                                "description": "Attribute name"
                            }
                        ],
                        "return": {
                            "type": "Boolean",
                            "description": "Boolean value of the attribute. Returns false if the attribute does not\n                exist."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideElementGetChoices_String_dependent",
                        "short_description": "Returns the choice list for a specified field.",
                        "description": "<p>The field for which to return the choice list is specified in the method call. For example:\n          <samp class=\"ph codeph\">var choices = glideRecord.urgency.getChoices();</samp>. For information on\n        choice list field types and their associated capabilities, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/field-administration/concept/c_ChoiceLists.html\" target=\"_blank\">Choice list field type</a>.</p>",
                        "name": "getChoices(String dependent)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var glideRecord = new GlideRecord('incident'); \nglideRecord.query('priority','1'); \nglideRecord.next(); \n \n// urgency has choice list: 1 - High, 2 - Medium, 3 - Low, with value: 1, 2, 3\nvar choices = glideRecord.urgency.getChoices();",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "dependent",
                                "type": "String",
                                "description": "Optional. Field within the associated record on which the choice list field\n                depends."
                            }
                        ],
                        "return": {
                            "type": "Array",
                            "description": "List of possible values for the choice list, which are the values in the Choice\n                [sys_choice] table. If the <span class=\"keyword parmname\">dependent</span> parameter is passed, the\n                return results reflect only those choices available for the specified dependent\n                field."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideElementGetChoiceValue",
                        "short_description": "Returns the choice label for the current choice.",
                        "description": "<p>A choice has a value (number) and a label (string). This method returns the label.</p>",
                        "name": "getChoiceValue()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var glideRecord = new GlideRecord('incident'); \nglideRecord.query('priority','1'); \nglideRecord.next(); \nÂ \n// urgency has choice list: 1 - High, 2 - Medium, 3 - Low, with value: 1, 2, 3\nvar choiceLabel = glideRecord.urgency.getChoiceValue(); \ngs.info(choiceLabel);",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The selected choice's label."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SGE-getDecryptedValue",
                        "short_description": "Returns the clear text value for Password (2 way encrypted) fields in scoped\n    applications.",
                        "description": "",
                        "name": "getDecryptedValue()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var tablename = 'x_scoped_app_table'\nvar CI = new GlideRecord(tablename);  \nCI.addQuery('number', '0001002'); \nCI.query(); \nCI.next(); \n\nvar password = CI.password_field\nvar decrypted = password.getDecryptedValue(); \ngs.info(decrypted);",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The clear text password."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideElementGetDisplayValue_Number_maxCharacters",
                        "short_description": "Gets the formatted display value of the field.",
                        "description": "",
                        "name": "getDisplayValue(Number maxCharacters)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var glideRecord = new GlideRecord('incident');\nglideRecord.query('priority','1');\nglideRecord.next();\ngs.info(glideRecord.priority.getDisplayValue());",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "maxCharacters",
                                "type": "Number",
                                "description": "Optional: Maximum characters desired"
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "The display value of the field"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideElementGetED",
                        "short_description": "Returns the field's element descriptor.",
                        "description": "",
                        "name": "getED()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var grInc = new GlideRecord('incident');\ngrInc.query('priority', '1');\n \nvar field = grInc.getElement('priority');\nvar ed = field.getED();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Scoped GlideElementDescriptor",
                            "description": "The field's element descriptor."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SGE-getGlobalDisplayValue",
                        "short_description": "Returns the phone number in international format.",
                        "description": "",
                        "name": "getGlobalDisplayValue()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The phone number in international format."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SGE-getHTMLValue_Number",
                        "short_description": "Returns the HTML value of a field.",
                        "description": "",
                        "name": "getHTMLValue(Number maxChars)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var inccause = new GlideRecord(\"incident\");\ninccause.short_description = current.short_description;\ninccause.comments = current.comments.getHTMLValue();\ninccause.insert();",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "maxChars",
                                "type": "Number",
                                "description": "Optional. Maximum number of characters to return."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "HTML value for the field."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SGE-getJournalEntry_N",
                        "short_description": "Returns either the most recent journal entry or all journal entries.",
                        "description": "",
                        "name": "getJournalEntry(Number mostRecent)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "//gets all journal entries as a string where each entry is delimited by '\\n\\n'\nvar notes = current.work_notes.getJournalEntry(-1); \n//stores each entry into an array of strings\nvar na = notes.split(\"\\n\\n\");  \n                      \nfor (var i = 0; i &lt; na.length; i++)                 \n  gs.info(na[i]);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "mostRecent",
                                "type": "Number",
                                "description": "If 1, returns the most recent entry. If -1, returns all journal\n                entries."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "<p class=\"p\">For the most recent entry, returns a string that contains the field label,\n                  timestamp, and user display name of the journal entry.</p>\n\n                <p class=\"p\">For all journal entries, returns the same information for all journal entries\n                  ever entered as a single string with each entry delimited by \"\\n\\n\".</p>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SGE-getLabel",
                        "short_description": "Returns the object label.",
                        "description": "",
                        "name": "getLabel()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var now_GR = new GlideRecord(\"sc_req_item\");\nnow_GR.addQuery(\"request\", current.sysapproval);\nnow_GR.query();\nwhile(now_GR.next()) {\n    var nicePrice = now_GR.price.toString();\n    if (nicePrice != ) {\n        nicePrice = parseFloat(nicePrice);\n        nicePrice = nicePrice.toFixed(2);\n    }\n    template.print(now_GR.number + \":  \" + now_GR.quantity + \" X \" + now_GR.cat_item.getDisplayValue() + \" at $\" + nicePrice + \" each \\n\");\n    template.print(\"    Options:\\n\");\n    var variables = now_GR.variables.getElements();    \n    for (var key in variables) {\n      var now_V = variables[key];\n      if(now_V.getQuestion().getLabel() != ) {\n         template.space(4);\n         template.print('     ' +  now_V.getQuestion().getLabel() + \" = \" + now_V.getDisplayValue() + \"\\n\");  \n      }\n    }\n}",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "Object label"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SGE-getName",
                        "short_description": "Returns the name of the field.",
                        "description": "",
                        "name": "getName()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "Field name"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideElementGetReferenceTable",
                        "short_description": "Gets the table name for a reference element.",
                        "description": "",
                        "name": "getReferenceTable()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var grINC = new GlideRecord('incident');\ngrINC.query('number','INC0010041'); // record assignment group assigned to \"CAB Approval\"\nif (grINC.next()) { \n  // Get the table name \n  var tableName = grINC.assignment_group.getReferenceTable();\n  gs.info( tableName ); \n}",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The table name of the reference"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideElementGetRefRecord",
                        "short_description": "Returns a GlideRecord object for a given reference element.",
                        "description": "<p><div class=\"note warning\"><span class=\"warningtitle\">Warning:</span> If the reference element does not contain a value, it returns an empty\n          GlideRecord object, not a NULL object. </div></p>",
                        "name": "getRefRecord()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "\nvar grINC = new GlideRecord('incident'); \ngrINC.addNotNullQuery('caller_id'); \ngrINC.query(); \nif (grINC.next()) { \n\n// Get a GlideRecord object for the referenced sys_user record \nvar grUSER = grINC.caller_id.getRefRecord(); \nif (grUSER.isValidRecord()) \n  gs.info(grUSER.getValue('name')); \n\n} ",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "GlideRecord",
                            "description": "A GlideRecord object"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SGE-getTableName",
                        "short_description": "Returns the name of the table on which the field resides.",
                        "description": "",
                        "name": "getTableName()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "if (current.approver.getTableName() == \"sysapproval_approver\") {\n  if (current.approver == email.from_sys_id)  {\n     current.comments = \"reply from: \" + email.from + \"\\n\\n\" + email.body_text;\n \n   // if it's been cancelled, it's cancelled.\n  var doit = true;\n  if (current.state=='cancelled')\n      doit = false;\n \n  if (email.body.state != undefined)\n     current.state= email.body.state;\n \n   if (doit)\n      current.update();\n} else {\n   gs.log(\"Approval for task (\"+current.sysapproval.getDisplayValue()+\") rejected because user sending \n           email( \"+email.from+\") does not match the approver (\"+current.approver.getDisplayValue()+\")\");\n}\n \n}",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "Name of the table. The returned value may be different from the table Class\n                that the record is in. See Tables and Classes in the product documentation."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideElementNil",
                        "short_description": "Determines if a field is null.",
                        "description": "",
                        "name": "nil()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var glideRecord = new GlideRecord('incident'); \nglideRecord.query('priority','1'); \nglideRecord.next(); \ngs.info(glideRecord.state.nil());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "True if the field is null or an empty string, false if not."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SGE-setDateNumericValue_N",
                        "short_description": "Sets the value of a date/time element to the specified number of milliseconds since\n    January 1, 1970 00:00:00 GMT.",
                        "description": "<p>When called, <span class=\"keyword apiname\">setDateNumericValue()</span> automatically creates the necessary\n        GlideDateTime/GlideDate/GlideDuration object, and then sets the element to the specified\n        value.</p><p><div class=\"note note\"><span class=\"notetitle\">Note:</span> Before calling this method, the element must already exist by querying an existing\n          record or by using the <span class=\"keyword apiname\">now_GR.initialize()</span> method to initialize a new\n          record.</div></p>",
                        "name": "setDateNumericValue(Number milliseconds)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var now_GR = new GlideRecord(\"incident\");\nnow_GR.initialize();\nnow_GR.opened_at.setDateNumericValue(10000);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "milliseconds",
                                "type": "Number",
                                "description": "Number of milliseconds since 1/1/1970"
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideElementSetDisplayValue_Object_value",
                        "short_description": "Sets the display value of the field.",
                        "description": "",
                        "name": "setDisplayValue(Object value)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var glideRecord = new GlideRecord('incident'); \nglideRecord.query('priority','1'); \nglideRecord.next();\n \n//change the urgency to 3 \nglideRecord.urgency.setDisplayValue('3 - Low');\ngs.info(glideRecord.urgency);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "value",
                                "type": "Object",
                                "description": "The value to set for the field."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideElementSetError_String",
                        "short_description": "Adds an error message. Available in Fuji patch 3.",
                        "description": "",
                        "name": "setError(String errorMessage)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var glideRecord = new GlideRecord('incident');\nglideRecord.query('priority','1');\nglideRecord.next();\n \nglideRecord.short_description.setError('Error text');",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "errorMessage",
                                "type": "String",
                                "description": "The error message."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SGE-setPhoneNumber_O_B",
                        "short_description": "Sets the field to the specified phone number.",
                        "description": "<p>This method is only available on a phone number GlideElement.</p>",
                        "name": "setPhoneNumber(Object phoneNumber, Boolean strict)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "phoneNumber",
                                "type": "Object",
                                "description": "The phone number to set. This can be in either the international or local\n                format."
                            },
                            {
                                "name": "strict",
                                "type": "Boolean",
                                "description": "When true, specifies that the number specified must match the correct format.\n                When false, the system attempts to correct an improperly formatted phone\n                number."
                            }
                        ],
                        "return": {
                            "type": "Boolean",
                            "description": "True if the value was set."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideElementSetValue_Object_value",
                        "short_description": "Sets the value of a field.",
                        "description": "<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> Before calling this method, the element must already exist by querying an existing\n          record or by using the <span class=\"keyword apiname\">now_GR.initialize()</span> method to initialize a new\n          record.</div></p>",
                        "name": "setValue(Object value)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var glideRecord = new GlideRecord('incident');\nglideRecord.query('priority','1');\nglideRecord.next();\nglideRecord.short_description.setValue('Network failure');",
                                "description": "Set the value passing a string."
                            },
                            {
                                "script": "var now_GR  = new GlideRecord(âstudentâ);\nnow_GR.initialize();\nnow_GR.setValue('first_name', 'Joe');\nnow_GR.setValue('last_name', 'Smith');\nnow_GR.insert();",
                                "description": "Set the value passing an object."
                            }
                        ],
                        "params": [
                            {
                                "name": "value",
                                "type": "Object",
                                "description": "Object value to set the field to."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideElementToString",
                        "short_description": "Converts the value of a GlideRecord field to a string.",
                        "description": "",
                        "name": "toString()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var glideRecord = new GlideRecord('incident');\nglideRecord.query('priority','1');\nglideRecord.next();\ngs.info(glideRecord.opened_at.toString());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "Value as a string."
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "This API provides methods that enable you to perform the following:<ul class=\"ul\" id=\"GlideElementCurrency2API__ul_dvb_b14_yjb\">\n        <li class=\"li\">Obtain the FX Currency field display string, as entered by the user.</li>\n\n        <li class=\"li\">Obtain the display value of an FX Currency field.</li>\n\n        <li class=\"li\">Obtain the reference currency value of an FX Currency field.</li>\n\n        <li class=\"li\">Obtain the session currency value of an FX Currency field.</li>\n\n        <li class=\"li\">Set the display value of an FX Currency field.</li>\n\n      </ul><br/><br/>The <span class=\"keyword apiname\">GlideElementCurrency2</span> class has no constructor.",
                "short_description": "The <span class=\"keyword apiname\">GlideElementCurrency2</span> API provides methods to perform operations\n    on Foreign Exchange (FX) Currency fields (also known as Currency2) within the current\n    GlideRecord.",
                "identifier": "GlideElementCurrency2API",
                "name": "GlideElementCurrency2",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "Scoped-GEC-GetAsEntDispVal",
                        "short_description": "Returns the currency value as entered by the user.",
                        "description": "",
                        "name": "getAsEnteredDisplayValue()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var tablename = 'my_currency2_table';\nvar setcur2 = new GlideRecord(tablename);\nsetcur2.initialize();\nsetcur2.currency_2_field.setDisplayValue('JPY;999999.1234');\nsetcur2.insert();\ngs.info('As entered display value: ' + setcur2.currency_2_field.getAsEnteredDisplayValue());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The display value as entered by the user."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "Scoped-GEC-GetDisplayVal",
                        "short_description": "Returns the formatted currency string.",
                        "description": "",
                        "name": "getDisplayValue()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var tablename = 'my_currency2_table';\nvar setcur2 = new GlideRecord(tablename);\nsetcur2.initialize();\nsetcur2.currency_2_field.setDisplayValue('JPY;999999.1234');\nsetcur2.insert();\ngs.info('Display Value: ' + setcur2.currency_2_field.getDisplayValue());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "Formatted currency string defined by the\n                  <span class=\"keyword parmname\">currency_display_value</span> and\n                  <span class=\"keyword parmname\">currency_display_digits</span> dictionary attributes."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "Scoped-GEC-GetRefDispVal",
                        "short_description": "Returns the reference currency value.",
                        "description": "",
                        "name": "getReferenceDisplayValue()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var tablename = 'my_currency2_table';\nvar setcur2 = new GlideRecord(tablename);\nsetcur2.initialize();\nsetcur2.currency_2_field.setDisplayValue('JPY;999999.1234');\nsetcur2.insert();\ngs.info('Reference display value: ' + setcur2.currency_2_field.getReferenceDisplayValue());",
                                "description": "Output will change based on locale."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The reference currency value. If the reference currency value is not computed,\n                the system converts the currency value to the reference currency."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "Scoped-GEC-GetSesDispVal",
                        "short_description": "Returns the currency value converted to the session currency.",
                        "description": "",
                        "name": "getSessionDisplayValue()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var tablename = 'my_currency2_table';\nvar setcur2 = new GlideRecord(tablename);\nsetcur2.initialize();\nsetcur2.currency_2_field.setDisplayValue('JPY;999999.1234');\nsetcur2.insert();\ngs.info('Session display value: ' + setcur2.currency_2_field.getSessionDisplayValue());",
                                "description": "Output will change based on locale."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "Currency value converted to the session currency."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "Scoped-GEC-SetDisplayVal_S",
                        "short_description": "Sets the display value of a Currency2 field by parsing the displayValue\n    string.",
                        "description": "",
                        "name": "setDisplayValue(String displayValue)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var tablename = 'my_currency2_table';\nvar setcur2 = new GlideRecord(tablename);\nsetcur2.initialize();\nsetcur2.currency_2_field.setDisplayValue('JPY;999,999.1234');\nsetcur2.insert();",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "displayValue",
                                "type": "String",
                                "description": "The display value in the format <samp class=\"ph codeph\">\"&lt;currency type&gt;;&lt;currency\n                  amount&gt;\"</samp> where the amount is formatted in the user's locale."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "There is no constructor for this class. Use the GlideElement or GlideRecord\n    <span class=\"keyword apiname\">getED()</span> method to obtain a GlideElementDescriptor object.",
                "short_description": "The <span class=\"keyword apiname\">GlideElementDescriptor</span> API provides information about individual\n  fields in a record.",
                "identifier": "c_GlideElementDescriptorScopedAPI",
                "name": "GlideElementDescriptor",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "r_ScopedGlideElementDescriptorGetAttachmentEncyrptionType",
                        "short_description": "Returns the encryption type used for attachments on the element's table.",
                        "description": "<p>This method is for use with the <span class=\"ph\">Edge Encryption</span> plugin.</p>",
                        "name": "getAttachmentEncryptionType()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var grInc = new GlideRecord('incident');\ngrInc.query('priority', '1');\n\nvar field = grInc.getElement('priority');\nvar ed = field.getED();\n\nvar isEdge = ed.getAttachmentEncryptionType();\ngs.info(isEdge);\n",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The encryption type used on attachments. Returns null if attachments on the\n                element's table are not being encrypted."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideElementDescriptorGetEncryptionType",
                        "short_description": "Returns the element's encryption type.",
                        "description": "<p>This method is for use with the <span class=\"ph\">Edge Encryption</span> plugin.</p>",
                        "name": "getEncryptionType()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var grInc = new GlideRecord('incident');\ngrInc.query('priority', '1');\n\nvar field = grInc.getElement('priority');\nvar ed = field.getED();\n\nsEdge = ed.getEncryptionType();\ngs.info(isEdge);",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The element's encryption type. Returns null if the element is not\n                encrypted."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideElementDescriptorGetInternalType",
                        "short_description": "Returns the element's internal data type.",
                        "description": "",
                        "name": "getInternalType()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var grInc = new GlideRecord('incident');\ngrInc.query('priority', '1');\n \nvar field = grInc.getElement('priority');\nvar ed = field.getED();\n \nvar isEdge = ed.getInternalType();\ngs.info(isEdge);",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The element's internal data type.<div class=\"p\">Possible values:<ul class=\"ul\" id=\"r_ScopedGlideElementDescriptorGetInternalType__ul_g4m_znv_bkb\">\n                    <li class=\"li\">boolean</li>\n\n                    <li class=\"li\">char</li>\n\n                    <li class=\"li\">collection</li>\n\n                    <li class=\"li\">conditions</li>\n\n                    <li class=\"li\">date</li>\n\n                    <li class=\"li\">decimal</li>\n\n                    <li class=\"li\">documentation_field</li>\n\n                    <li class=\"li\">domain_id</li>\n\n                    <li class=\"li\">due_date</li>\n\n                    <li class=\"li\">email</li>\n\n                    <li class=\"li\">field_name</li>\n\n                    <li class=\"li\">file_attachment</li>\n\n                    <li class=\"li\">float</li>\n\n                    <li class=\"li\">glide_date</li>\n\n                    <li class=\"li\">glide_date_time</li>\n\n                    <li class=\"li\">glide_duration</li>\n\n                    <li class=\"li\">glide_list</li>\n\n                    <li class=\"li\">GUID</li>\n\n                    <li class=\"li\">html</li>\n\n                    <li class=\"li\">image</li>\n\n                    <li class=\"li\">integer</li>\n\n                    <li class=\"li\">long</li>\n\n                    <li class=\"li\">longint</li>\n\n                    <li class=\"li\">multi_two_lines</li>\n\n                    <li class=\"li\">journal</li>\n\n                    <li class=\"li\">journal_input</li>\n\n                    <li class=\"li\">numeric</li>\n\n                    <li class=\"li\">order_index</li>\n\n                    <li class=\"li\">password</li>\n\n                    <li class=\"li\">ph_number</li>\n\n                    <li class=\"li\">reference</li>\n\n                    <li class=\"li\">script</li>\n\n                    <li class=\"li\">script_plain</li>\n\n                    <li class=\"li\">string</li>\n\n                    <li class=\"li\">sys_class_name</li>\n\n                    <li class=\"li\">table_name</li>\n\n                    <li class=\"li\">template_value</li>\n\n                    <li class=\"li\">timer</li>\n\n                    <li class=\"li\">translated_field</li>\n\n                    <li class=\"li\">url</li>\n\n                    <li class=\"li\">user_image</li>\n\n                    <li class=\"li\">user_input</li>\n\n                    <li class=\"li\">user_roles</li>\n\n                    <li class=\"li\">video</li>\n\n                    <li class=\"li\">workflow</li>\n\n                  </ul>\n</div>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideElementDescriptorGetLabel",
                        "short_description": "Returns the element's label.",
                        "description": "",
                        "name": "getLabel()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var grInc = new GlideRecord('incident');\ngrInc.query('priority', '1');\n \nvar field = grInc.getElement('priority');\nvar ed = field.getED();\n \nvar isEdge = ed.getLabel();\ngs.info(isEdge);",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The element's label."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideElementDescriptorGetLength",
                        "short_description": "Returns the element's length.",
                        "description": "",
                        "name": "getLength()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var grInc = new GlideRecord('incident');\ngrInc.query('priority', '1');\n \nvar field = grInc.getElement('priority');\nvar ed = field.getED();\n \nvar isEdge = ed.getLength();\ngs.info(isEdge);",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Number",
                            "description": "The element's size."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideElementDescriptorGetName",
                        "short_description": "Returns the element's name.",
                        "description": "",
                        "name": "getName()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var grInc = new GlideRecord('incident');\ngrInc.query('priority', '1');\n \nvar field = grInc.getElement('priority');\nvar ed = field.getED();\n \nvar isEdge = ed.getName();\ngs.info(isEdge);",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The element's name."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SGED-getPlural",
                        "short_description": "Returns the element's plural label.",
                        "description": "",
                        "name": "getPlural()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var now_GR = new GlideRecord('incident');\nnow_GR.query();\nvar ed = now_GR.getED();\ngs.info(ed.getPlural());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The element's plural label."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideElementDescriptorHasAttachmentsEncrypted",
                        "short_description": "Returns true if an encrypted attachment has been added to the table.",
                        "description": "<p>This method is for use with the <span class=\"ph\">Edge Encryption</span> plugin.</p>",
                        "name": "hasAttachmentsEncrypted()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var grInc = new GlideRecord('incident');\ngrInc.query('priority', '1');\n\nvar field = grInc.getElement('priority');\nvar ed = field.getED();\n\nvar isEdge = ed.hasAttachmentsEncrypted();\ngs.info(isEdge);",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "Returns true if an encrypted attachment has been added to the table."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideElementDescriptorIsAutoOrSysID",
                        "short_description": "Returns true if the element is an automatically generated or system field.",
                        "description": "<p>Automatically generated and system fields cannot be encrypted. This method is for use with\n        the <span class=\"ph\">Edge Encryption</span> plugin.</p>",
                        "name": "isAutoOrSysID()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var grInc = new GlideRecord('incident');\ngrInc.query('priority', '1');\nvar field = grInc.getElement('priority');\nvar ed = field.getED();\n\nisEdge = ed.isAutoOrSysID();\ngs.info(isEdge);\n",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "True if the element is automatically generated or a system field."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideElementDescriptorIsChoiceTable",
                        "short_description": "Returns true if the element is defined as a dropdown choice in its dictionary\n    definition.",
                        "description": "<p>Choice fields cannnot  be encrypted.</p>",
                        "name": "isChoiceTable()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var grInc = new GlideRecord('incident');\ngrInc.query('priority', '1');\n\nvar field = grInc.getElement('priority');\nvar ed = field.getED();\n\nvar isChoiceTable = ed.isChoiceTable();\ngs.info(isChoiceTable);",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "Returns true if the element is defined as a dropdown choice. Returns true even\n                if there are no entries defined in the choice table. The last choice type,\n                suggestion, does not return true."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideElementDescriptorIsEdgeEncrypted",
                        "short_description": "Returns true if an element is encrypted.",
                        "description": "<p>This method is for use with the <span class=\"ph\">Edge Encryption</span> plugin.</p>",
                        "name": "isEdgeEncrypted()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var grInc = new GlideRecord('incident');\ngrInc.query('priority', '1');\n\nvar field = grInc.getElement('priority');\nvar ed = field.getED();\n\nvar isEdge = ed.isEdgeEncrypted();\ngs.info(isEdge)",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "Returns true if the element is encrypted, false otherwise."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SGED-isMandatory",
                        "short_description": "Determines whether the element is mandatory and must contain a value before the record\n    can be saved.",
                        "description": "",
                        "name": "isMandatory()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var isRecordValid;\nvar now_GR = new GlideRecord('my_table');\nvar field = now_GR.getElement('name');\nvar elementDescriptor = field.getED();\nnow_GR.query();\nwhile (now_GR.next()) {\n  if (elementDescriptor.isMandatory() &amp;&amp; !now_GR.name) {\n       isRecordValid = false;\n  }\n}",
                                "description": "This example shows how to check whether the name field is mandatory."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "Flag that indicates whether the associated element is mandatory and must\n                contain a value before the record containing the element can be saved.<p class=\"p\">Valid\n                  values:</p>\n<ul class=\"ul\" id=\"SGED-isMandatory__ul_l1h_kxv_shb\">\n                  <li class=\"li\">true: element must contain a value; mandatory field</li>\n\n                  <li class=\"li\">false: element does not have to contain a value</li>\n\n                </ul>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideElementDescriptorIsVirtual",
                        "short_description": "Returns true if the element is a virtual element.",
                        "description": "<p>A virtual element is a calculated field as set by the dictionary definition of the field.\n        Virtual fields cannot be encrypted.</p>",
                        "name": "isVirtual()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var grInc = new GlideRecord('incident');\ngrInc.query('priority', '1');\n\nvar field = grInc.getElement('priority');\nvar ed = field.getED();\n\nvar isVirtual = ed.isVirtual();\ngs.info(isVirtual);",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "Returns true if the element is a virtual element."
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "",
                "short_description": "The scoped GlideEmailOutbound class implements the email object for scoped applications.\n  You can use the GlideEmailOutbound methods with the email global object available in mail scripts.\n  The email object behaves identically for global and scoped applications.",
                "identifier": "c_GlideEmailOutboundScopedAPI",
                "name": "GlideEmailOutbound",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "r_ScopedGlideEmailOutbound-GlideEmailOutbound",
                        "short_description": "Instantiates a scoped GlideEmailOutbound object.",
                        "description": "",
                        "name": "GlideEmailOutbound()",
                        "type": "Constructor",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideEmailOutbound-addAddress_String_String",
                        "short_description": "Adds the address to either the cc or bcc list.",
                        "description": "",
                        "name": "addAddress( String type, String address)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "email.addAddress('cc', 'joe.employee@something.com');",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "type",
                                "type": "String",
                                "description": "Either cc or bcc, determines the list to which the address is added."
                            },
                            {
                                "name": "address",
                                "type": "String",
                                "description": "The recipient's email address."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideEmailOutbound-addAddress_String_String_String",
                        "short_description": "Adds the recipient to either the cc or bcc list, but uses the display name instead of\n    the address when showing the recipient.",
                        "description": "",
                        "name": "addAddress(String type, String address, String displayName)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "email.addAddress('bcc', 'joe.employee@something.com', 'dudley rocks');",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "type",
                                "type": "String",
                                "description": "Either cc or bcc, determines the list to which the address is added."
                            },
                            {
                                "name": "address",
                                "type": "String",
                                "description": "The recipient's email address."
                            },
                            {
                                "name": "displayName",
                                "type": "String",
                                "description": "The name to be shown instead of the email address."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideEmailOutbound-getSubject",
                        "short_description": "Returns the email's subject line.",
                        "description": "",
                        "name": "getSubject()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The email's subject line."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SGEO-getWatermark",
                        "short_description": "Returns the email's watermark.",
                        "description": "",
                        "name": "getWatermark()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var watermark = email.getWatermark();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The email's watermark."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideEmailOutbound-setBody_String",
                        "short_description": "Sets the body of the email.",
                        "description": "",
                        "name": "setBody(String bodyText)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "email.setBody('Dear Sir, ...');",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "bodyText",
                                "type": "String",
                                "description": "The body of the email."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideEmailOutbound-setFrom_String",
                        "short_description": "Sets the sender's address.",
                        "description": "",
                        "name": "setFrom(String address)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "email.setFrom('joe.employee@something.com');",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "address",
                                "type": "String",
                                "description": "The sender's email address."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideEmailOutbound-setReplyTo_String",
                        "short_description": "Sets the reply to address.",
                        "description": "",
                        "name": "setReplyTo(String address)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "email.setReplyTo('joe.employee@something.com');",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "address",
                                "type": "String",
                                "description": "The reply to email address."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideEmailOutbound-setSubject_String",
                        "short_description": "Sets the email's subject line.",
                        "description": "",
                        "name": "setSubject(String subject)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "email.setSubject('Important Issues to discuss');",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "subject",
                                "type": "String",
                                "description": "Text for the subject line."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "There is no constructor for Scoped GlideFilter. It is accessed by using the global object\n   \"GlideFilter\".",
                "short_description": "The Scoped GlideFilter API provides a method to determine if a record meets a specified\n  set of requirements.",
                "identifier": "c_GlideFilterScopedAPI",
                "name": "GlideFilter",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "r_ScopedGlideFilterCheckRecord_GlideRecord_String_Object",
                        "short_description": "Compares a specified filter to the contents of a specified GlideRecord.",
                        "description": "<p>If the specified filter contains one condition, the method returns true if the record meets\n        the condition of the filter.</p><p>If the specified filter contains more than one condition, for example\n          <samp class=\"ph codeph\">\"active=true^number=abc^category=request\"</samp>, you can use the\n          <span class=\"keyword parmname\">match</span> parameter to define whether all conditions must be met to\n        determine a match or just a single condition.</p>",
                        "name": "checkRecord(GlideRecord gr, String filter, Boolean match)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var rec = new GlideRecord('incident');\nrec.query();\nvar bool = true;\n \nwhile(rec.next())\n{\n   bool = GlideFilter.checkRecord(rec, \"active=true\");\n   gs.info(\"number \"+ rec. number + \" is \" + bool);\n}",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "gr",
                                "type": "GlideRecord",
                                "description": "GlideRecord to evaluate."
                            },
                            {
                                "name": "filter",
                                "type": "String",
                                "description": "Encoded query string (case-sensitive)."
                            },
                            {
                                "name": "match",
                                "type": "Boolean",
                                "description": "Optional. Flag that indicates whether all conditions must be met if\n                  the<span class=\"keyword parmname\"> filter</span> parameter contains multiple conditions. <p class=\"p\">Valid\n                  values:</p>\n<ul class=\"ul\" id=\"r_ScopedGlideFilterCheckRecord_GlideRecord_String_Object__ul_uwb_pd3_bhb\">\n                  <li class=\"li\">true: all conditions must be met for the method to return true</li>\n\n                  <li class=\"li\">false: only one of the conditions must be met for the method to return\n                    true</li>\n\n                </ul>\n<p class=\"p\">Default: true</p>"
                            }
                        ],
                        "return": {
                            "type": "Boolean",
                            "description": "Results of the filter comparison.<ul class=\"ul\" id=\"r_ScopedGlideFilterCheckRecord_GlideRecord_String_Object__ul_xzf_2fj_bhb\">\n                  <li class=\"li\">true: filter conditions were met</li>\n\n                  <li class=\"li\">false: filer conditions were not met</li>\n\n                </ul>"
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "The scoped <span class=\"keyword apiname\">GlideFormScratchpad</span> class has no constructor and no methods. The\n   g_scratchpad object behaves identically for global and scoped applications.<br/><br/>The g_scratchpad object provides a mechanism for passing information from the server to the\n   client when the client requires information not available on a form. This can be accomplished by\n   creating a business rule to put the information in the g_scratchpad object and accessing the\n   information in a client script.<br/><br/>For an example on using this class, <a class=\"extRef\" href=\"https://developer.servicenow.com/dev.do#!/guides/paris/now-platform/tpb-guide/client_scripting_technical_best_practices%23%23example-g-scratchpad\" target=\"_blank\">Example: g_scratchpad</a> on the Developer Site.",
                "short_description": "The scoped <span class=\"keyword apiname\">GlideFormScratchpad</span> class implements the g_scratchpad\n  object for scoped applications.",
                "identifier": "c_GlideFormScratchpadScopedAPI",
                "name": "GlideFormScratchpad",
                "type": "Class",
                "methods": []
            },
            {
                "description": "A GlideImportLog object consumable by the <span class=\"keyword apiname\">GlideImportSetTransformer</span> API.\n      This object is not required for the <span class=\"keyword apiname\">GlideImportSetTransformer</span> API, it\n      enables you to associate import logs with a specific Import Set transformation.",
                "short_description": "Writes log entries directly to the Import Log [import_log] table.",
                "identifier": "GlideImportLogAPI",
                "name": "GlideImportLog - Scoped, Global",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "GImportLog-GlideImportLog",
                        "short_description": "Instantiates a GlideImportLog object.",
                        "description": "",
                        "name": "GlideImportLog(GlideImportSetRun importSetRun, String source)",
                        "type": "Constructor",
                        "examples": [
                            {
                                "script": "var importSetRun = new GlideImportSetRun();\nvar importLog = new GlideImportLog(importSetRun);\n",
                                "description": " without optional source parameter."
                            },
                            {
                                "script": "var importSetRun = new GlideImportSetRun();\nvar importLog = new GlideImportLog(importSetRun, 'Scripted ImportSetTransformer');\n",
                                "description": " using optional source parameter."
                            }
                        ],
                        "params": [
                            {
                                "name": "importSetRun",
                                "type": "GlideImportSetRun",
                                "description": "Optional. Import Set Run record on which all logs are to be associated\n                with."
                            },
                            {
                                "name": "source",
                                "type": "String",
                                "description": "Optional. Source field value attached to the Import Log\n                record that defines where in the Import Set process this message was logged from.\n                For example, Loading could represent loading step, Cleanup could represent during\n                the cleanup after the transform, and so on."
                            }
                        ],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GImportLog-error_S_S",
                        "short_description": "Logs a message of type Error to the Import Log [import_log] table.",
                        "description": "",
                        "name": "error(String message, String source)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var importLog = new GlideImportLog();\nimportLog.error(âError executing transformâ);\n",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "message",
                                "type": "String",
                                "description": "Log message. Maximum length 4000 characters."
                            },
                            {
                                "name": "source",
                                "type": "String",
                                "description": "Optional. Source field value attached to the Import Log\n                record that defines where in the Import Set process this message was logged from.\n                For example, Loading could represent loading step, Cleanup could represent during\n                the cleanup after the transform, and so on."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GImportLog-getImportRunHistory",
                        "short_description": "Returns a sys_id of the Import Run record associated with this Import Log.",
                        "description": "",
                        "name": "getImportRunHistory()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var importSet = new GlideRecord('sys_import_set');\nimportSet.name = 'Scripted Import Set';\nimportSet.short_description = 'Import set from scripted rest api';\nimportSet.table_name = importSetTableName;\nvar importSetID = importSet.insert();\nvar importLog = new GlideImportLog();\nvar transformer = new GlideImportSetTransformer();\ntransformer.setLogger(importLog);\ntransformer.transformAllMaps(importSet);\nvar importRunSysId = importLog.getImportRunHistory();\n",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "Sys_id of an Import Set Run record from the Transform History\n                [sys_import_set_run] table."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GImportLog-info_S_S",
                        "short_description": "Logs a message of type Info to the Import Log [import_log] table.",
                        "description": "",
                        "name": "info(String message, String source)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var importLog = new GlideImportLog();\nimportLog.info(âSuccessfully executed transformâ);\n",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "message",
                                "type": "String",
                                "description": "Log message. Maximum length 4000 characters."
                            },
                            {
                                "name": "source",
                                "type": "String",
                                "description": "Optional. Source field value attached to the Import Log\n                record that defines where in the Import Set process this message was logged from.\n                For example, Loading could represent loading step, Cleanup could represent during\n                the cleanup after the transform, and so on."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GImportLog-setImportRunHistory_S",
                        "short_description": "Associates the GlideImportLog object with a specific Import Set Run record.",
                        "description": "",
                        "name": "setImportRunHistory(String importRunHistory)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var importRunSysId = â4aa3a8d55ba10010953330ad5981c79fâ;\nvar importLog = new GlideImportLog();\nimportLog.setImportRunHistory(importRunSysId);\n",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "importRunHistory",
                                "type": "String",
                                "description": "The sys_id of a record from the Transform History [sys_import_set_run]\n                table."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GImportLog-warn_S_S",
                        "short_description": "Logs a message of type Warn to the Import Log [import_log] table.",
                        "description": "",
                        "name": "warn(String message, String source)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var importLog = new GlideImportLog();\nimportLog.warn(âTransform taking longer than expected.â);\n",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "message",
                                "type": "String",
                                "description": "Log message. Maximum length 4000 characters."
                            },
                            {
                                "name": "source",
                                "type": "String",
                                "description": "Optional. Source field value attached to the Import Log\n                record that defines where in the Import Set process this message was logged from.\n                For example, Loading could represent loading step, Cleanup could represent during\n                the cleanup after the transform, and so on."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "",
                "short_description": "Creates an Import Set Run record which can be consumed by the\n      <span class=\"keyword apiname\">GlideImportSetTransformer</span> API.",
                "identifier": "GlideImportSetRunAPI",
                "name": "GlideImportSetRun - Scoped, Global",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "GImpSetRun-GlideImportSetRun_S",
                        "short_description": "Instantiates a GlideImportSetRun object.",
                        "description": "",
                        "name": "GlideImportSetRun(String importSetID)",
                        "type": "Constructor",
                        "examples": [
                            {
                                "script": "var importSetRun = new GlideImportSetRun();",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "importSetID",
                                "type": "String",
                                "description": "Optional. The sys_id of the import set record listed in the Import Sets\n                [sys_import_set] table. If not set, a new [sys_import_set] record is created and the\n                GlideImportSetRun object represents this record."
                            }
                        ],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GImpSetRun-getImportSetRunSysID",
                        "short_description": "Gets the sys_id of the Import Set Run associated with the transformation.",
                        "description": "",
                        "name": "getImportSetRunSysID()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var importSetRun = new GlideImportSetRun();\nvar importSetRunSysId = importSetRun.getImportSetRunSysID();\n",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The sys_id of the Transform Histories [sys_import_set_run] record associated\n                with the transform."
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "To execute an Import Set transform:<ol class=\"ol\" id=\"GlideImportSetTransformerAPI__ol_wnr_brf_ckb\">\n        <li class=\"li\">Create an Import Set table using the <span class=\"keyword apiname\">GlideImportSetTable</span> API.</li>\n\n        <li class=\"li\">Create a Transform Map using the <span class=\"keyword apiname\">GlideImportSetTransformMap</span> API.</li>\n\n        <li class=\"li\">Create or use an existing Import Set using the <span class=\"keyword apiname\">GlideRecord</span> API.</li>\n\n        <li class=\"li\">Execute an Import Set Transform using the <span class=\"keyword apiname\">GlideImportSetTransformer</span>\n          API.</li>\n\n      </ol>\nOnce you have created the Import Set record it must be consumed by the\n      GlideImportSetTransformer API in order to trigger the transform.<br/><br/>var transformer = new GlideImportSetTransformer();\ntransformer.transformAllMaps(importSetGr);",
                "short_description": "Creates an Import Set Transformer object used to execute an Import Set Transform.",
                "identifier": "GlideImportSetTransformerAPI",
                "name": "GlideImportSetTransformer - Scoped, Global",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "GImpSetTrans-GlideImportSetTrans",
                        "short_description": "Instantiates a GlideImportSetTransformer object.",
                        "description": "",
                        "name": "GlideImportSetTransformer()",
                        "type": "Constructor",
                        "examples": [
                            {
                                "script": "var transformer = new GlideImportSetTransformer();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GImpSetTrans-getImportSetRun",
                        "short_description": "Gets the Import Set Run object associated with a GlideImportSetTransformer\n    object.",
                        "description": "",
                        "name": "getImportSetRun()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var importSet = new GlideRecord('sys_import_set');\nimportSet.name = 'Scripted Import Set';\nimportSet.short_description = 'Import set from scripted rest api';\nimportSet.table_name = importSetTableName;\nvar importSetID = importSet.insert();\nvar transformer = new GlideImportSetTransformer();\ntransformer.transformAllMaps(importSet);\nvar importSetRun = transformer.getImportSetRun();\n",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "GlideImportSetRun",
                            "description": "GlideImportSetRun object created by running a transformation or the argument\n                supplied to the <span class=\"keyword apiname\">setImportSetRun()</span> method."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GImpSetTrans-isError",
                        "short_description": "Returns a Boolean value specifying whether or not there was an error during a\n    transformation.",
                        "description": "",
                        "name": "isError()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var importSet = new GlideRecord('sys_import_set');\nimportSet.name = 'Scripted Import Set';\nimportSet.short_description = 'Import set from scripted rest api';\nimportSet.table_name = importSetTableName;\nvar importSetID = importSet.insert();\nvar transformer = new GlideImportSetTransformer();\ntransformer.transformAllMaps(importSet);\nif(transformer.isError()) {\n\tgs.error(âError executing the transformâ);\n}",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "Flag that indicates whether there is an error.<ul class=\"ul\" id=\"GImpSetTrans-isError__ul_ec3_j1y_bkb\">\n                  <li class=\"li\">true: Error.</li>\n\n                  <li class=\"li\">false: Success.</li>\n\n                </ul>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GImpSetTrans-setImportSetID_S",
                        "short_description": "Associates an Import Set record with a specific GlideImportSetTransformer\n    object.",
                        "description": "",
                        "name": "setImportSetID(String id)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var importSet = new GlideRecord('sys_import_set');\nimportSet.name = 'Scripted Import Set';\nimportSet.short_description = 'Import set from scripted rest api';\nimportSet.table_name = importSetTableName;\nvar importSetID = importSet.insert();\nvar transformer = new GlideImportSetTransformer();\ntransformer.setImportSetID(importSetID);\ntransformer.transformAllMaps(importSet);\n",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "id",
                                "type": "String",
                                "description": "The sys_id of an Import Set record from the Import Sets [sys_import_set]\n                table."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GImpSetTrans-setImportSetRun_O",
                        "short_description": "Associates an Import Set Run object with a specific GlideImportSetTransformer\n    object.",
                        "description": "",
                        "name": "setImportSetRun(GlideImportSetRun importSetRun)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var importSet = new GlideRecord('sys_import_set');\nimportSet.name = 'Scripted Import Set';\nimportSet.short_description = 'Import set from scripted rest api';\nimportSet.table_name = importSetTableName;\nvar importSetID = importSet.insert();\nvar importSetRun = new GlideImportSetRun(importSetID);\nvar transformer = new GlideImportSetTransformer();\ntransformer.setImportSetRun(importSetRun);\ntransformer.transformAllMaps(importSet);\n",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "importSetRun",
                                "type": "GlideImportSetRun",
                                "description": "GlideImportSetRun object representing the ImportSetRun record to track the\n                transformation history."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GImpSetTrans-setLogger_O",
                        "short_description": "Associates a GlideImportLog object with a specific GlideImportSetTransformer\n    object.",
                        "description": "<p>If this method is not called prior to calling the <span class=\"keyword apiname\">transformAllMaps()</span>\n        method, a GlideImportLog object is created internally on the server side.</p>",
                        "name": "setLogger(GlideImportLog log)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var importSet = new GlideRecord('sys_import_set');\nimportSet.name = 'Scripted Import Set';\nimportSet.short_description = 'Import set from scripted rest api';\nimportSet.table_name = importSetTableName;\nvar importSetID = importSet.insert();\nvar importLog = new GlideImportLog();\nvar transformer = new GlideImportSetTransformer();\ntransformer.setLogger(importLog);\ntransformer.transformAllMaps(importSet);\n",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "log",
                                "type": "GlideImportLog",
                                "description": "GlideImportLog object to link to the Import Set history. Once set, any call\n                from the GlideImportLog object is associated with the Import Set run history for\n                that specific transform."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GImpSetTrans-setMapID_S",
                        "short_description": "Associates a Transform Map with a specific GlideImportSetTransformer\n    object.",
                        "description": "",
                        "name": "setMapID(String mapID)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var importSet = new GlideRecord('sys_import_set');\nimportSet.name = 'Scripted Import Set';\nimportSet.short_description = 'Import set from scripted rest api';\nimportSet.table_name = importSetTableName;\nvar importSetID = importSet.insert();\nvar transformMapId =  â&lt;sys id of transform map&gt;';\nvar transformer = new GlideImportSetTransformer();\ntransformer.setMapID(transformMapId);\ntransformer.transformAllMaps(importSet);\n",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "mapID",
                                "type": "String",
                                "description": "A sys_id from the Table Transform Maps [sys_transform_map] table."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "There is no constructor for a GlideLocale object. Use the <span class=\"keyword apiname\">get()</span> method to\n   get a GlideLocale object.",
                "short_description": "GlideLocale provides information about display information for the local\n  instance.",
                "identifier": "c_GlideLocaleScopedAPI",
                "name": "GlideLocale",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "r_ScopedGlideLocaleGet",
                        "short_description": "Returns the GlideLocale object.",
                        "description": "",
                        "name": "get()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var locale = GlideLocale.get();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "GlideLocale",
                            "description": "The GlideLocale object."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideLocaleGetDecimalSeparator",
                        "short_description": "Returns the decimal separator.",
                        "description": "",
                        "name": "getDecimalSeparator()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var locale = GlideLocale.get();\nvar decimalSeparator = locale.getDecimalSeparator();\ngs.info( \"The decimal separator is \" + decimalSeparator);",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The decimal separator."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideLocaleGetGroupingSeparator",
                        "short_description": "Returns the grouping separator.",
                        "description": "",
                        "name": "getGroupingSeparator()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var locale = GlideLocale.get();var groupingSeparator = locale.getGroupingSeparator();\ngs.info( \"The grouping separator is \" + groupingSeparator);",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The grouping separator."
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "",
                "short_description": "The scoped GlidePluginManager API provides a method for determining if a plugin has been\n  activated.",
                "identifier": "c_GlidePluginManagerScopedAPI",
                "name": "GlidePluginManager",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "r_ScopedGlidePluginManager-isActive_String",
                        "short_description": "Determines if the specified plugin has been activated.",
                        "description": "",
                        "name": "isActive(String pluginID)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var now_GR = new GlideRecord('sys_plugins');\nvar queryString = \"active=0^ORactive=1\";\nnow_GR.addEncodedQuery(queryString);\nnow_GR.query();\nvar pMgr = new GlidePluginManager();\n \nwhile (now_GR.next()) {\n   var name = now_GR.getValue('name');\n   var pID = now_GR.getValue('source');\n   var isActive = pMgr.isActive(pID);\n   if (isActive) \n       gs.info('The plugin ' + name + ' is active');\n}",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "pluginID",
                                "type": "String",
                                "description": "Unique plugin identifier."
                            }
                        ],
                        "return": {
                            "type": "Boolean",
                            "description": "<p class=\"p\">Flag that indicates if the plugin is active.</p>\n\n                <div class=\"p\">Valid values:<ul class=\"ul\" id=\"r_ScopedGlidePluginManager-isActive_String__ul_lxk_vp2_rmb\">\n                    <li class=\"li\">true: Plugin is active.</li>\n\n                    <li class=\"li\">false: Plugin is inactive.</li>\n\n                  </ul>\n</div>"
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "The <span class=\"keyword apiname\">GlideQuery</span> API lets you:<br/><br/><ul class=\"ul\" id=\"GlideQueryAPI__ul_mkt_thc_nmb\">\n        <li class=\"li\">Use standard JavaScript objects and types for queries and results.</li>\n\n        <li class=\"li\">Quickly diagnose query errors with additional checks and clear error messages.</li>\n\n        <li class=\"li\">Simplify your code by avoiding boiler-plate query patterns.</li>\n\n        <li class=\"li\">Avoid common performance issues without needing deeper knowledge of GlideRecord.</li>\n\n      </ul><br/><br/>Use the <span class=\"keyword apiname\">GlideQuery</span> API in scoped or global server-side scripts. This API\n      requires the GlideQuery [com.sn_glidequery] plugin.<br/><br/><h2 class=\"title sectiontitle\">Implementation</h2>\n      \n      <p class=\"p\">This API works together with the <a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/StreamGlobalAPI\" title=\"The Stream API interacts with a stream of items such as records. For example, you can use the forEach() method to update the state of each record in a stream returned by the GlideQuery API.\"><span class=\"keyword apiname\">Stream</span></a> and <a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/OptionalGlobalAPI\" title=\"The Optional API interacts with a single record returned by the GlideQuery, Stream, or GlideRecord APIs, even when it does not exist. Write scripts that are less likely to result in an error by handling null or undefined query results.\"><span class=\"keyword apiname\">Optional</span></a>\n        APIs in a <span class=\"ph\">builder pattern where the method calls chain together, each method\n          building on the returned result of the previous method. Use methods to define the\n          attributes of the query. The methods do not execute until you call a terminal method, a\n          method that returns a query result, allowing you to define the requirements of the query\n          before executing it.</span></p>\n\n      <p class=\"p\"><span class=\"ph\">If the query returns a single record, the system wraps the result\n          in an Optional object. If the query returns a stream of records, the system wraps the\n          result in a Stream object. These objects let you manage the result using a set of methods\n          in each API.</span></p>\n\n      <p class=\"p\"><span class=\"ph\">For example, here's a script that performs a query on the\n          Task table and groups the records by priority and returns groups with total reassignments\n          greater than four.</span></p>\n\n      <div class=\"p\">\n        <pre><code class='language-javascript'>var query = new global.GlideQuery('task')\n    .where('active', true) //Returns new GlideQuery object with a \"where\" clause.\n    .groupBy('priority') //Returns new GlideQuery object with a \"group by\" clause.\n    .aggregate('sum', 'reassignment_count') //Returns new GlideQuery object with a \"sum(reassignment_count)\" clause.\n    .having('sum', 'reassignment_count', '&gt;', 4) //Returns new GlideQuery object with a \"having reassignment_count &gt; 4\" clause.\n    .select() //Returns a stream of records wrapped in a Stream object.  \n    .toArray(10); //Terminal method in the Stream class that executes the query and returns the result. </code></pre>\n\n      </div><br/><br/><h2 class=\"title sectiontitle\">Error handling</h2>\n      \n      <p class=\"p\">The <span class=\"keyword apiname\">GlideQuery</span> API throws an error when your query has a problem, and\n        includes a clear explanation to help guide you. <span class=\"keyword apiname\">GlideQuery</span> checks\n        for:</p>\n\n      <div class=\"p\">\n        <ul class=\"ul\" id=\"GlideQueryAPI__ul_kpn_wwb_nmb\">\n          <li class=\"li\">Invalid fields</li>\n\n          <li class=\"li\">Invalid value types for a field</li>\n\n          <li class=\"li\">Invalid values for choice fields</li>\n\n          <li class=\"li\">Invalid query operators</li>\n\n        </ul>\n\n      </div>\n\n      <p class=\"p\">For example, this code sample would throw an error because the queried field does not exist\n        in the table.</p>\n\n      <div class=\"p\">\n        <pre><code class='language-javascript'>new global.GlideQuery('task')\n    .where('id', '4717dfe5a9fe198100450448b2404c16') // should be 'sys_id'\n    .select('description', 'severity')\n    .toArray(100);\n  // Error: Unable to find field 'id' in table 'task'. Known fields: active, activity_due, ...</code></pre>\n\n      </div>\n\n      <p class=\"p\">This code sample would throw an error because the data type of one of the arguments is\n        incorrect.</p>\n\n      <div class=\"p\">\n        <pre><code class='language-javascript'>new global.GlideQuery('task')\n    .where('priority', 'one') // priority is an integer (should be 1)\n    .select('description', 'severity')\n    .toArray(100);\n  // Error: Unable to match value ['one'] with field 'priority' in table 'task'. Expecting type 'integer'</code></pre>\n\n      </div><br/><br/><h2 class=\"title sectiontitle\">Reuse</h2>\n      \n      <p class=\"p\">Because <span class=\"keyword apiname\">GlideQuery</span> objects are immutable, you can reuse them later in\n        other parts of your code. For example, this script creates a query and then uses the\n        GlideQuery object later to generate a report. </p>\n\n      <div class=\"p\">\n        <pre><code class='language-javascript'>var highPriorityTasks = new global.GlideQuery('task')\n    .where('active', true)\n    .where('priority', 1);\n\ngenerateReport(highPriorityTasks);\nnotifyOwners(highPriorityTasks);\nvar avgReassignmentCount = highPriorityTasks\n    .avg('reassignment_count')\n    .orElse(0)\n</code></pre>\n\n      </div><br/><br/><h2 class=\"title sectiontitle\">Limitations</h2>\n      \n      <p class=\"p\">The <span class=\"keyword apiname\">GlideQuery</span> API does not support:</p>\n\n      <div class=\"p\">\n        <ul class=\"ul\" id=\"GlideQueryAPI__ul_ctl_mzb_nmb\">\n          <li class=\"li\">Reading or writing to tables that do not allow access from other scopes.</li>\n\n          <li class=\"li\">Reading encoded queries.</li>\n\n          <li class=\"li\">GlideDate or GlideDateTime objects, which are read as JavaScript strings.</li>\n\n          <li class=\"li\">FX Currency fields.</li>\n\n          <li class=\"li\">Queries with ambiguous conditional logic. For example, the following query is unclear\n            because the system does not know whether to execute <samp class=\"ph codeph\">(active = true AND name !=\n              null) OR last_name = Luddy</samp> or <samp class=\"ph codeph\">active = true AND (name != null OR\n              last_name = Luddy)</samp>.\n              <pre><code class='language-javascript'>var user = new global.GlideQuery('sys_user')\n  .where('active', true)\n  .whereNotNull('name')\n  .orWhere('last_name', 'Luddy')\n  .selectOne()\n  .get()</code></pre>\n<p class=\"p\">See\n              the <a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/GlideQueryAPI#GQ-where_S_S\" title=\"Adds a Where clause to the query that returns values based on a given condition.\"><span class=\"keyword apiname\">where()</span></a>\n              method to understand how to nest a child query instead.</p>\n</li>\n\n        </ul>\n\n      </div>\n\n      <div class=\"p\">\n        <div class=\"note note\"><span class=\"notetitle\">Note:</span> Because the <span class=\"keyword apiname\">GlideQuery</span> API converts GlideRecord objects into\n          standard JavaScript objects, it may take longer to execute queries. To reduce performance\n          issues, avoid creating loops that iterate over large numbers or records. </div>\n\n      </div>",
                "short_description": "The <span class=\"keyword apiname\">GlideQuery</span> API is an alternative to\n      <span class=\"keyword apiname\">GlideRecord</span> to perform CRUD operations on record data from server-side\n    scripts.",
                "identifier": "GlideQueryAPI",
                "name": "GlideQuery",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "GQ-GlideQuery_S_O",
                        "short_description": "Instantiates a GlideQuery object used to build and execute record queries.",
                        "description": "",
                        "name": "GlideQuery(String table)",
                        "type": "Constructor",
                        "examples": [
                            {
                                "script": "var query = new global.GlideQuery('sys_user');",
                                "description": "This example instantiates a query of the User table."
                            }
                        ],
                        "params": [
                            {
                                "name": "table",
                                "type": "String",
                                "description": "Table to query."
                            }
                        ],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GQ-aggregate_S_S",
                        "short_description": "Aggregates a field using a specified aggregation function.",
                        "description": "<p>Use this method to build queries that aggregate against multiple fields or use multiple\n        aggregate functions, or if you must use the <span class=\"keyword apiname\">groupBy()</span> method. If you only\n        want to aggregate against one field with one function, and you don't need to use\n          <span class=\"keyword apiname\">groupBy()</span>, then use one of these methods instead:</p><p><ul class=\"ul\" id=\"GQ-aggregate_S_S__ul_fxl_wyl_4mb\">\n          <li class=\"li\"><span class=\"keyword apiname\">avg()</span></li>\n\n          <li class=\"li\"><span class=\"keyword apiname\">min()</span>\n          </li>\n\n          <li class=\"li\"><span class=\"keyword apiname\">max()</span>\n          </li>\n\n          <li class=\"li\"><span class=\"keyword apiname\">count()</span></li>\n\n        </ul></p>",
                        "name": "aggregate(String aggregateType, String field)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var query = newÂ global.GlideQuery('task')\nÂ Â Â Â .where('active',Â true) //Returns the GlideQuery object to add more attributes to the query.\nÂ Â Â Â .groupBy('priority') //Returns the GlideQuery object to add more attributes to the query.\nÂ Â Â Â .aggregate('sum',Â 'reassignment_count') //Returns the GlideQuery object to add more attributes to the query.\nÂ Â Â Â .having('sum',Â 'reassignment_count',Â '&gt;',Â 4) //Returns the GlideQuery object to add more attributes to the query.\nÂ Â Â Â .select() //Returns a stream of records wrapped in a Stream object.  \nÂ Â Â Â .toArray(10); //Terminal method in the Stream class that executes the query and returns the result.\n\ngs.info(JSON.stringify(query));",
                                "description": "This example performs a query on the Task table that groups the records\n        by priority, adds the numbers in the reassignment count field for each group, and returns\n        groups with total reassignments greater than four."
                            }
                        ],
                        "params": [
                            {
                                "name": "aggregateType",
                                "type": "String",
                                "description": "The type of aggregation function to perform. Options include:<div class=\"p\">\n                    <ul class=\"ul\" id=\"GQ-aggregate_S_S__d85243e938\">\n                      <li class=\"li\"><samp class=\"ph codeph\">min</samp>: Returns the smallest value of all matching\n                        records.</li>\n\n                      <li class=\"li\"><samp class=\"ph codeph\">max</samp>: Returns the largest value of all matching\n                        records.</li>\n\n                      <li class=\"li\"><samp class=\"ph codeph\">sum</samp>: Returns the sum of all matching records.</li>\n\n                      <li class=\"li\"><samp class=\"ph codeph\">avg</samp>: Returns the average of all matching records.</li>\n\n                      <li class=\"li\"><samp class=\"ph codeph\">count</samp>: Returns the number of number of matching\n                        records.</li>\n\n                    </ul>\n\n                  </div>"
                            },
                            {
                                "name": "field",
                                "type": "String",
                                "description": "Field on which to perform the operation."
                            }
                        ],
                        "return": {
                            "type": "<a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/GlideQueryAPI\" title=\"The GlideQuery API is an alternative to GlideRecord to perform CRUD operations on record data from server-side scripts.\">GlideQuery</a>",
                            "description": "The query object being built."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GQ-avg_S",
                        "short_description": "Returns the aggregate average of a given numeric field.",
                        "description": "<p>You can only use this method on fields of the following types:<ul class=\"ul\" id=\"GQ-avg_S__d85243e1111\">\n          <li class=\"li\">Integer </li>\n\n          <li class=\"li\">Long</li>\n\n          <li class=\"li\">Floating Point Number </li>\n\n          <li class=\"li\">Double</li>\n\n          <li class=\"li\">Currency</li>\n\n        </ul></p>",
                        "name": "avg(String field)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var faults = new global.GlideQuery('cmdb_ci')\n    .avg('fault_count')\n    .orElse(0);\n\ngs.info(JSON.stringify(faults));",
                                "description": "This example shows how to return the average number of faults in the cmdb_ci table."
                            }
                        ],
                        "params": [
                            {
                                "name": "field",
                                "type": "String",
                                "description": "Field on which to perform the operation."
                            }
                        ],
                        "return": {
                            "type": "<a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/OptionalGlobalAPI\" title=\"The Optional API interacts with a single record returned by the GlideQuery, Stream, or GlideRecord APIs, even when it does not exist. Write scripts that are less likely to result in an error by handling null or undefined query results.\">Optional</a>",
                            "description": "Object that contains the aggregate average of the given field."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GQ-count",
                        "short_description": "Returns the number of records that match the query.",
                        "description": "",
                        "name": "count()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var userCount = new global.GlideQuery('sys_user')\n    .where('active', true)\n    .count();",
                                "description": "This example returns the number of active records in the User table."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Number",
                            "description": "Number of records that match the query."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GQ-deleteMultiple",
                        "short_description": "Deletes all records in the table specified by the preceding Where clauses.",
                        "description": "",
                        "name": "deleteMultiple()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var query = new global.GlideQuery('sys_user')\n    .where('active', true)\n    .where('last_name', 'Jeter')\n    .deleteMultiple();",
                                "description": "This example deletes all active records in the User table where the last name is Jeter."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "None",
                            "description": "Â "
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GQ-disableAutoSysFields",
                        "short_description": "Disables updating system fields, or fields with a name that starts with the\n      <samp class=\"ph codeph\">sys</samp> prefix, such as sys_created_on, sys_updated_on, and sys_mod_count. Only\n    applies to the specified query.",
                        "description": "",
                        "name": "disableAutoSysFields()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var query = new global.GlideQuery('task')\n    .disableAutoSysFields()\n    .insert({ description: 'example', priority: 1 });",
                                "description": "This example adds a record to the task table, but does not set system fields. Without\n        calling this method, the below example would update sys_updated_on, sys_mod_count, and so\n        on."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "<a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/GlideQueryAPI\" title=\"The GlideQuery API is an alternative to GlideRecord to perform CRUD operations on record data from server-side scripts.\">GlideQuery</a>",
                            "description": "The query object being built."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GQ-disableWorkflow",
                        "short_description": "Disables any business rules, flows, workflows, or audit records that would run or be\n    created as the result of the query.",
                        "description": "",
                        "name": "disableWorkflow()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var query = new global.GlideQuery('task')\n    .disableWorkflow()\n    .where('active', true)\n    .updateMultiple({ priority: 1 });",
                                "description": "This example updates multiple records in the Task table without triggering any automatic\n        business processes."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "<a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/GlideQueryAPI\" title=\"The GlideQuery API is an alternative to GlideRecord to perform CRUD operations on record data from server-side scripts.\">GlideQuery</a>",
                            "description": "The query object being built."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GQ-forceUpdate",
                        "short_description": "Forces a database update even when no record changes are made. For example, you can use\n    this method to force a business rule to execute.",
                        "description": "",
                        "name": "forceUpdate()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var forceUpdate = new global.GlideQuery('task')\n    .forceUpdate()\n    .where('sys_id', taskId)\n    .update()",
                                "description": "This example force updates Task records with a certain sys_id."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "<a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/GlideQueryAPI\" title=\"The GlideQuery API is an alternative to GlideRecord to perform CRUD operations on record data from server-side scripts.\">GlideQuery</a>",
                            "description": "The query object being built."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GQ-get_S_O",
                        "short_description": "Returns a single record from the query.",
                        "description": "",
                        "name": "get(String key, Array selectedFields)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var user = new global.GlideQuery('sys_user')\n    .get('5137153cc611227c000bbd1bd8cd2005', ['first_name', 'last_name']) //Returns an Optional object.\n    .orElse({ first_name: 'Default', last_name: 'User' }); //Method in the Optional class to return a default value.\n\ngs.info(JSON.stringify(user))",
                                "description": " that returns a record based on sys_id."
                            }
                        ],
                        "params": [
                            {
                                "name": "key",
                                "type": "String",
                                "description": "Sys_id of the record to return."
                            },
                            {
                                "name": "selectedFields",
                                "type": "Array",
                                "description": "Optional. Additional fields to return in the result. <p class=\"p\">Default: The system\n                    always returns the sys_id.</p>"
                            }
                        ],
                        "return": {
                            "type": "<a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/OptionalGlobalAPI\" title=\"The Optional API interacts with a single record returned by the GlideQuery, Stream, or GlideRecord APIs, even when it does not exist. Write scripts that are less likely to result in an error by handling null or undefined query results.\">Optional</a>",
                            "description": "Object used to interact with a single record."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GQ-getBy_O_O",
                        "short_description": "Returns an Optional object containing a single record based on a set of name-value\n    pairs to query by. Assumes the '=' operator for each name-value pair.",
                        "description": "",
                        "name": "getBy(Object keyValues, Array selectedFields)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var user = new global.GlideQuery('sys_user')\n    .getBy({\n        first_name: 'Fred',\n        last_name: 'Luddy'\n    }, ['first_name', 'last_name', 'city', 'active']) // select first_name, last_name, city, active\n    .orElse({\n        first_name: 'Nobody',\n        last_name: 'Found',\n        city: 'Nowhere',\n        active: false\n    });",
                                "description": " that returns a record by querying for a user's name."
                            }
                        ],
                        "params": [
                            {
                                "name": "keyValues",
                                "type": "Object",
                                "description": "Object where the keys are the name of the fields, and the values are the values\n                to query for."
                            },
                            {
                                "name": "selectedFields",
                                "type": "Array",
                                "description": "Optional. Additional fields to return in the result. <p class=\"p\">Default: The system\n                    always returns the sys_id.</p>"
                            }
                        ],
                        "return": {
                            "type": "<a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/OptionalGlobalAPI\" title=\"The Optional API interacts with a single record returned by the GlideQuery, Stream, or GlideRecord APIs, even when it does not exist. Write scripts that are less likely to result in an error by handling null or undefined query results.\">Optional</a>",
                            "description": "Object used to interact with a single record."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GQ-groupBy_S",
                        "short_description": "Groups the query results by a designated field or fields.",
                        "description": "<p>You must use this method with the <span class=\"keyword apiname\">aggregate()</span> method.</p>",
                        "name": "groupBy(String fields)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var query = newÂ global.GlideQuery('task')\nÂ Â Â Â .where('active',Â true) //Returns the GlideQuery object to add more attributes to the query.\nÂ Â Â Â .groupBy('priority') //Returns the GlideQuery object to add more attributes to the query.\nÂ Â Â Â .aggregate('sum',Â 'reassignment_count') //Returns the GlideQuery object to add more attributes to the query.\nÂ Â Â Â .having('sum',Â 'reassignment_count',Â '&gt;',Â 4) //Returns the GlideQuery object to add more attributes to the query.\nÂ Â Â Â .select() //Returns a stream of records wrapped in a Stream object.  \nÂ Â Â Â .toArray(10); //Terminal method in the Stream class that executes the query and returns the result.\n\ngs.info(JSON.stringify(query));",
                                "description": "This example performs a query on the Task table that groups the records\n        by priority, adds the numbers in the reassignment count field for each group, and returns\n        groups with total reassignments greater than four."
                            }
                        ],
                        "params": [
                            {
                                "name": "fields",
                                "type": "String",
                                "description": "The field or fields to group the results by."
                            }
                        ],
                        "return": {
                            "type": "<a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/GlideQueryAPI\" title=\"The GlideQuery API is an alternative to GlideRecord to perform CRUD operations on record data from server-side scripts.\">GlideQuery</a>",
                            "description": "The query object being built."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GQ-having_S_S_S_N",
                        "short_description": "Filters aggregate groups so that you can display only groups of results that match a\n    specified condition.",
                        "description": "<p>Must use this method with the <span class=\"keyword apiname\">aggregate()</span> or\n          <span class=\"keyword apiname\">groupBy()</span> methods.</p>",
                        "name": "having(String aggregateType, String field, String operator, Number value)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var query = newÂ global.GlideQuery('task')\nÂ Â Â Â .where('active',Â true) //Returns the GlideQuery object to add more attributes to the query.\nÂ Â Â Â .groupBy('priority') //Returns the GlideQuery object to add more attributes to the query.\nÂ Â Â Â .aggregate('sum',Â 'reassignment_count') //Returns the GlideQuery object to add more attributes to the query.\nÂ Â Â Â .having('sum',Â 'reassignment_count',Â '&gt;',Â 4) //Returns the GlideQuery object to add more attributes to the query.\nÂ Â Â Â .select() //Returns a stream of records wrapped in a Stream object.  \nÂ Â Â Â .toArray(10); //Terminal method in the Stream class that executes the query and returns the result.\n\ngs.info(JSON.stringify(query));",
                                "description": "This example performs a query on the Task table that groups the records\n        by priority, adds the numbers in the reassignment count field for each group, and returns\n        groups with total reassignments greater than four."
                            }
                        ],
                        "params": [
                            {
                                "name": "aggregateType",
                                "type": "String",
                                "description": "The type of aggregation function to perform. Options include:<div class=\"p\">\n                    <ul class=\"ul\" id=\"GQ-having_S_S_S_N__d85243e938\">\n                      <li class=\"li\"><samp class=\"ph codeph\">min</samp>: Returns the smallest value of all matching\n                        records.</li>\n\n                      <li class=\"li\"><samp class=\"ph codeph\">max</samp>: Returns the largest value of all matching\n                        records.</li>\n\n                      <li class=\"li\"><samp class=\"ph codeph\">sum</samp>: Returns the sum of all matching records.</li>\n\n                      <li class=\"li\"><samp class=\"ph codeph\">avg</samp>: Returns the average of all matching records.</li>\n\n                      <li class=\"li\"><samp class=\"ph codeph\">count</samp>: Returns the number of number of matching\n                        records.</li>\n\n                    </ul>\n\n                  </div>"
                            },
                            {
                                "name": "field",
                                "type": "String",
                                "description": "Field on which to perform the operation."
                            },
                            {
                                "name": "operator",
                                "type": "String",
                                "description": "Numeric operator to use in the operation. <div class=\"p\">Options include:<ul class=\"ul\">\n                    <li class=\"li\"><samp class=\"ph codeph\">&gt;</samp>: Greater than.</li>\n\n                    <li class=\"li\"><samp class=\"ph codeph\">&lt;</samp>: Less than.</li>\n\n                    <li class=\"li\"><samp class=\"ph codeph\">&gt;=</samp>: Greater than or equal to.</li>\n\n                    <li class=\"li\"><samp class=\"ph codeph\">&lt;=</samp>: Less than or equal to.</li>\n\n                    <li class=\"li\"><samp class=\"ph codeph\">=</samp>: Equal to.</li>\n\n                    <li class=\"li\"><samp class=\"ph codeph\">!=</samp>: Not equal to.</li>\n\n                  </ul>\n</div>"
                            },
                            {
                                "name": "value",
                                "type": "Number",
                                "description": "Number value to use in the operation."
                            }
                        ],
                        "return": {
                            "type": "<a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/GlideQueryAPI\" title=\"The GlideQuery API is an alternative to GlideRecord to perform CRUD operations on record data from server-side scripts.\">GlideQuery</a>",
                            "description": "The query object being built."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GQ-insert_O_O",
                        "short_description": "Inserts a record and returns an Optional object containing the record.",
                        "description": "",
                        "name": "insert(Object keyValues, Object selectedFields)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var fred = new global.GlideQuery('sys_user')\n    .insert({ first_name: 'Fred', last_name: 'Luddy' })\n    .get();\n\ngs.info(JSON.stringify(fred));",
                                "description": "This example shows how to insert a record based on a user's first and last name."
                            }
                        ],
                        "params": [
                            {
                                "name": "keyValues",
                                "type": "Object",
                                "description": "Object containing name-value pairs to insert into the record. Unspecified\n                fields will be null."
                            },
                            {
                                "name": "selectedFields",
                                "type": "Array",
                                "description": "Optional. Additional fields to return in the result. <p class=\"p\">Default: The system\n                    always returns the sys_id.</p>"
                            }
                        ],
                        "return": {
                            "type": "<a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/OptionalGlobalAPI\" title=\"The Optional API interacts with a single record returned by the GlideQuery, Stream, or GlideRecord APIs, even when it does not exist. Write scripts that are less likely to result in an error by handling null or undefined query results.\">Optional</a>",
                            "description": "Object used to interact with a single record."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GQ-insertOrUpdate_O_O",
                        "short_description": "Updates an existing record, or inserts a new record if one does not already exist.",
                        "description": "",
                        "name": "insertOrUpdate(Object changes, Object selectedFields)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "// insert a new record\nvar user = new GlideQuery('sys_user')\n    .insertOrUpdate({\n        first_name: 'George',\n        last_name: 'Griffey'\n    })\n    .orElse(null);",
                                "description": "This example shows how to insert a new record that does not already exist in the\n        system."
                            },
                            {
                                "script": "// update existing record\nvar user = new global.GlideQuery('sys_user')\n    .insertOrUpdate({\n        sys_id: '2d0efd6c73662300bb513198caf6a72e',\n        first_name: 'George',\n        last_name: 'Griffey' })\n    .orElse(null);",
                                "description": "This example shows how to update an existing record."
                            }
                        ],
                        "params": [
                            {
                                "name": "changes",
                                "type": "Object",
                                "description": "Object containing name-value pairs to update or insert into the record."
                            },
                            {
                                "name": "selectedFields",
                                "type": "Array",
                                "description": "Optional. Additional fields to return in the result. <p class=\"p\">Default: The system\n                    always returns the sys_id.</p>"
                            }
                        ],
                        "return": {
                            "type": "<a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/OptionalGlobalAPI\" title=\"The Optional API interacts with a single record returned by the GlideQuery, Stream, or GlideRecord APIs, even when it does not exist. Write scripts that are less likely to result in an error by handling null or undefined query results.\">Optional</a>",
                            "description": "Object used to interact with a single record."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GQ-limit_N",
                        "short_description": "Limits the number of records returned in a query.",
                        "description": "",
                        "name": "limit(Number limit)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var incidents = new global.GlideQuery('incident')\n    .limit(5)\n    .select('priority', 'description')\n    .toArray(100);\n\ngs.info(JSON.stringify(incidents));",
                                "description": "This example shows how to limit the results returned to five records."
                            }
                        ],
                        "params": [
                            {
                                "name": "limit",
                                "type": "Number",
                                "description": "Number of records to return."
                            }
                        ],
                        "return": {
                            "type": "<a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/GlideQueryAPI\" title=\"The GlideQuery API is an alternative to GlideRecord to perform CRUD operations on record data from server-side scripts.\">GlideQuery</a>",
                            "description": "The query object being built."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GQ-max_S",
                        "short_description": "Returns the aggregate maximum of a given field.",
                        "description": "",
                        "name": "max(String field)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var name = new global.GlideQuery('sys_user')\n    .max('last_name')\n    .orElse('');\n\ngs.info(JSON.stringify(name));",
                                "description": "This example shows how to return the maximum value, or highest alphanumeric value, of a\n        given field."
                            }
                        ],
                        "params": [
                            {
                                "name": "field",
                                "type": "String",
                                "description": "Field on which to perform the operation."
                            }
                        ],
                        "return": {
                            "type": "<a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/OptionalGlobalAPI\" title=\"The Optional API interacts with a single record returned by the GlideQuery, Stream, or GlideRecord APIs, even when it does not exist. Write scripts that are less likely to result in an error by handling null or undefined query results.\">Optional</a>",
                            "description": "Object used to interact with a single record."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GQ-min_S",
                        "short_description": "Returns the aggregate minimum of a given field.",
                        "description": "",
                        "name": "min(String field)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var name = new global.GlideQuery('sys_user')\n    .min('last_name')\n    .orElse('');\n\ngs.info(JSON.stringify(name));",
                                "description": "This example shows how to return the minimum value, or lowest alphanumeric value, of a\n        given field."
                            }
                        ],
                        "params": [
                            {
                                "name": "field",
                                "type": "String",
                                "description": "Field on which to perform the operation."
                            }
                        ],
                        "return": {
                            "type": "<a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/OptionalGlobalAPI\" title=\"The Optional API interacts with a single record returned by the GlideQuery, Stream, or GlideRecord APIs, even when it does not exist. Write scripts that are less likely to result in an error by handling null or undefined query results.\">Optional</a>",
                            "description": "Object used to interact with a single record."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GQ-orderBy_S",
                        "short_description": "Orders the returned result in ascending order by a given field.",
                        "description": "",
                        "name": "orderBy(String fields)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var query = new global.GlideQuery('incident')\n    .orderBy('number')\n    .limit(5)\n    .select('priority', 'description') //Returns a stream of records wrapped in a Stream object.  \n    .toArray(100); //Terminal method in the Stream class that executes the query and returns the result.\n\ngs.info(JSON.stringify(query));",
                                "description": "This example shows how to order results in ascending order by record number."
                            }
                        ],
                        "params": [
                            {
                                "name": "fields",
                                "type": "String",
                                "description": "Comma-delimited fields to order the result by in ascending order."
                            }
                        ],
                        "return": {
                            "type": "<a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/GlideQueryAPI\" title=\"The GlideQuery API is an alternative to GlideRecord to perform CRUD operations on record data from server-side scripts.\">GlideQuery</a>",
                            "description": "The query object being built."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GQ-orderByDesc_S_S",
                        "short_description": "Orders the returned result in descending order by a given field.",
                        "description": "",
                        "name": "orderByDesc(String fieldOrAggregate, String field)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var query = new global.GlideQuery('incident')\n    .orderByDesc('number')\n    .select('number', 'description')\n    .limit(5)\n    .toArray(100);\n\ngs.info(JSON.stringify(query));",
                                "description": "This example shows how to order the result in descending order by number."
                            },
                            {
                                "script": "var aggQuery = new GlideQuery('incident')\n    .aggregate('sum', 'child_incidents')\n    .groupBy('category')\n    .orderByDesc('sum', 'child_incidents')\n    .select()\n    .toArray(100);\n\ngs.info(JSON.stringify(aggQuery));",
                                "description": "This example shows how to order an aggregate result by the sum of child incidents."
                            }
                        ],
                        "params": [
                            {
                                "name": "fieldOrAggregate",
                                "type": "String",
                                "description": "If the query does not use the <span class=\"keyword apiname\">aggregate()</span> method, pass the\n                field to order the results by. <p class=\"p\">If the query uses the\n                    <span class=\"keyword apiname\">aggregate()</span> method, pass the type of aggregation function to\n                  perform. </p>\n<div class=\"p\">Options include:<ul class=\"ul\" id=\"GQ-orderByDesc_S_S__ul_lzt_ggh_pmb\">\n                      <li class=\"li\"><samp class=\"ph codeph\">min</samp>: Returns the smallest value of all matching\n                        records.</li>\n\n                      <li class=\"li\"><samp class=\"ph codeph\">max</samp>: Returns the largest value of all matching\n                        records.</li>\n\n                      <li class=\"li\"><samp class=\"ph codeph\">sum</samp>: Returns the sum of all matching records.</li>\n\n                      <li class=\"li\"><samp class=\"ph codeph\">avg</samp>: Returns the average of all matching records.</li>\n\n                      <li class=\"li\"><samp class=\"ph codeph\">count</samp>: Returns the number of number of matching\n                        records.</li>\n\n                    </ul>\n</div>"
                            },
                            {
                                "name": "field",
                                "type": "String",
                                "description": "Optional. Field to order the result by in descending order. Required for\n                queries using the <span class=\"keyword apiname\">aggregate()</span> method."
                            }
                        ],
                        "return": {
                            "type": "<a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/GlideQueryAPI\" title=\"The GlideQuery API is an alternative to GlideRecord to perform CRUD operations on record data from server-side scripts.\">GlideQuery</a>",
                            "description": "The query object being built."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GQ-orWhere_S_S",
                        "short_description": "Adds an OR clause to a query that returns values based on a given condition.",
                        "description": "<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> Precede this method with the <span class=\"keyword apiname\">where()</span>,\n            <span class=\"keyword apiname\">whereNull()</span>, or <span class=\"keyword apiname\">whereNotNull()</span> methods. </div></p>",
                        "name": "orWhere(String fieldOrQuery, String operator, Any value)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var query = new global.GlideQuery('sys_user')\n   .where('failed_attempts', '&gt;', 0)\n   .orWhere('last_login', '&lt;', '2019-04-15')\n   .select()\n   .toArray(100)\n\ngs.info(JSON.stringify(query));",
                                "description": "This example shows how to add a simple OR clause to a query."
                            },
                            {
                                "script": "// active = true OR (title = 'Vice President' AND state = 'CA')\nvar query = new GlideQuery('sys_user')\n   .where('active', true)\n   .orWhere(new GlideQuery()\n       .where('title', 'Vice President')\n       .where('state', 'CA'))\n   .select('name')\n   .limit(5)\n   .toArray(100)\n\ngs.info(JSON.stringify(query));",
                                "description": "This example shows how to add a <samp class=\"ph codeph\">orWhere</samp> clause that contains a separate\n        query."
                            }
                        ],
                        "params": [
                            {
                                "name": "fieldOrQuery",
                                "type": "String or <a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/GlideQueryAPI\" title=\"The GlideQuery API is an alternative to GlideRecord to perform CRUD operations on record data from server-side scripts.\">GlideQuery</a>",
                                "description": "Field or another GlideQuery object used in the where clause. If passing a\n                  field, you can dot-walk to a desired value. For example,\n                    <samp class=\"ph codeph\">'company.name'</samp>."
                            },
                            {
                                "name": "operator",
                                "type": "String",
                                "description": "Optional. Operator used in the OR clause. If you do not pass an argument, the\n                system uses the = operator. You do not need to include a placeholder value."
                            },
                            {
                                "name": "value",
                                "type": "Any",
                                "description": "Value used in the OR clause."
                            }
                        ],
                        "return": {
                            "type": "<a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/GlideQueryAPI\" title=\"The GlideQuery API is an alternative to GlideRecord to perform CRUD operations on record data from server-side scripts.\">GlideQuery</a>",
                            "description": "The query object being built."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GQ-orWhereNotNull_S",
                        "short_description": "Adds an OR clause that returns records that do not contain a null value in a given\n    field.",
                        "description": "<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> Precede this method with the <span class=\"keyword apiname\">where()</span>,\n            <span class=\"keyword apiname\">whereNull()</span>, or <span class=\"keyword apiname\">whereNotNull()</span> methods. </div></p>",
                        "name": "orWhereNotNull(String field)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var query = new global.GlideQuery('sys_user')\n   .whereNotNull('first_name')\n   .orWhereNotNull('last_name')\n   .select()\n   .limit(5)\n   .toArray(100)\n\ngs.info(JSON.stringify(query));",
                                "description": "This example shows how to query the User table and return results where the first and last\n        names are not null."
                            }
                        ],
                        "params": [
                            {
                                "name": "field",
                                "type": "String",
                                "description": "Field used in the query."
                            }
                        ],
                        "return": {
                            "type": "<a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/GlideQueryAPI\" title=\"The GlideQuery API is an alternative to GlideRecord to perform CRUD operations on record data from server-side scripts.\">GlideQuery</a>",
                            "description": "The query object being built."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GQ-orWhereNull_S",
                        "short_description": "Adds an OR clause to a query that returns records that contain a null value in a given\n    field.",
                        "description": "<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> Precede this method with the <span class=\"keyword apiname\">where()</span>,\n            <span class=\"keyword apiname\">whereNull()</span>, or <span class=\"keyword apiname\">whereNotNull()</span> methods. </div></p>",
                        "name": "orWhereNull(String field)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var query = new global.GlideQuery('sys_user')\n   .whereNull('last_name')\n   .orWhereNull('first_name')\n   .select()\n   .toArray(100)\n\ngs.info(JSON.stringify(query));",
                                "description": "This example shows how to query the User table and return records where the first or last\n        names are null."
                            }
                        ],
                        "params": [
                            {
                                "name": "field",
                                "type": "String",
                                "description": "Field used in the query."
                            }
                        ],
                        "return": {
                            "type": "<a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/GlideQueryAPI\" title=\"The GlideQuery API is an alternative to GlideRecord to perform CRUD operations on record data from server-side scripts.\">GlideQuery</a>",
                            "description": "The query object being built."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GQ-select_S",
                        "short_description": "Returns the results of the query as a Stream object containing specified fields.",
                        "description": "<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> Use a terminal method in the <span class=\"keyword apiname\">Stream</span> class to get the result of the\n          query. For more information, see <a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/StreamGlobalAPI\" title=\"The Stream API interacts with a stream of items such as records. For example, you can use the forEach() method to update the state of each record in a stream returned by the GlideQuery API.\">Stream</a>.</div></p><p>You can append a flag to a field name to return the field's metadata\n        instead of the field's value. For example, using the field name\n          <samp class=\"ph codeph\">company$DISPLAY</samp> returns the display value of a company field. Possible\n        flags include:</p><p><ul class=\"ul\" id=\"GQ-select_S__d85243e1070\">\n          <li class=\"li\"><samp class=\"ph codeph\">DISPLAY</samp>: Returns the display value of a field.</li>\n\n          <li class=\"li\"><samp class=\"ph codeph\">CURRENCY_CODE</samp>: Returns the currency code of a currency field. For\n            example, <samp class=\"ph codeph\">USD</samp>.</li>\n\n          <li class=\"li\"><samp class=\"ph codeph\">CURRENCY_DISPLAY</samp>: Returns the currency display value of a currency\n            field. For example, <samp class=\"ph codeph\">Â¥123.45</samp>.</li>\n\n          <li class=\"li\"><samp class=\"ph codeph\">CURRENCY_STRING</samp>: Returns the currency string of a currency field. For\n            example, <samp class=\"ph codeph\">JPY;123.45</samp>.</li>\n\n        </ul></p>",
                        "name": "select(String fields)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var stream = new global.GlideQuery('sys_user')\n   .select('first_name', 'last_name', 'company$DISPLAY')\n   .toArray(5);\n\ngs.info(JSON.stringify(stream));",
                                "description": "This example shows how to select fields to display from the query and use\n          <samp class=\"ph codeph\">$DISPLAY</samp> to return the display value of a field."
                            }
                        ],
                        "params": [
                            {
                                "name": "fields",
                                "type": "String",
                                "description": "Optional. Fields to display in the result. You can provide any number of\n                  fields as arguments, dot-walk to a desired value, or use a flag. For example:\n                    <pre class=\"pre codeblock\">select('first_name', 'location.city', 'company$DISPLAY');</pre>\n<p class=\"p\">Default:\n                    The system always returns the sys_id.</p>"
                            }
                        ],
                        "return": {
                            "type": "<a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/StreamGlobalAPI\" title=\"The Stream API interacts with a stream of items such as records. For example, you can use the forEach() method to update the state of each record in a stream returned by the GlideQuery API.\">Stream</a>",
                            "description": "Object used to interact with a stream of items such as records."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GQ-selectOne_S",
                        "short_description": "Returns the result of the query as an Optional object containing specified fields.",
                        "description": "<p>Use this method when returning a single record, or to test if a record exists. If returning\n        multiple records, use the <span class=\"keyword apiname\">select()</span> method to return a Stream object.</p><p>You can append a flag to a field name to return the field's metadata\n        instead of the field's value. For example, using the field name\n          <samp class=\"ph codeph\">company$DISPLAY</samp> returns the display value of a company field. Possible\n        flags include:</p><p><ul class=\"ul\" id=\"GQ-selectOne_S__d85243e1070\">\n          <li class=\"li\"><samp class=\"ph codeph\">DISPLAY</samp>: Returns the display value of a field.</li>\n\n          <li class=\"li\"><samp class=\"ph codeph\">CURRENCY_CODE</samp>: Returns the currency code of a currency field. For\n            example, <samp class=\"ph codeph\">USD</samp>.</li>\n\n          <li class=\"li\"><samp class=\"ph codeph\">CURRENCY_DISPLAY</samp>: Returns the currency display value of a currency\n            field. For example, <samp class=\"ph codeph\">Â¥123.45</samp>.</li>\n\n          <li class=\"li\"><samp class=\"ph codeph\">CURRENCY_STRING</samp>: Returns the currency string of a currency field. For\n            example, <samp class=\"ph codeph\">JPY;123.45</samp>.</li>\n\n        </ul></p>",
                        "name": "selectOne(String fields)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var user = new global.GlideQuery('sys_user')\n    .where('zip', '12345')\n    .whereNotNull('last_name')\n    .selectOne('first_name', 'last_name', 'company$DISPLAY')\n    .get();\n\ngs.info(JSON.stringify(user));",
                                "description": "This example shows how to return a single record as an Optional object and display\n        specified fields."
                            }
                        ],
                        "params": [
                            {
                                "name": "fields",
                                "type": "String",
                                "description": "Optional. Fields to display in the result. You can provide any number of\n                  fields as arguments, dot-walk to a desired value, or use a flag. For example:\n                    <pre class=\"pre codeblock\">select('first_name', 'location.city', 'company$DISPLAY');</pre>\n<p class=\"p\">Default:\n                    The system always returns the sys_id.</p>"
                            }
                        ],
                        "return": {
                            "type": "<a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/OptionalGlobalAPI\" title=\"The Optional API interacts with a single record returned by the GlideQuery, Stream, or GlideRecord APIs, even when it does not exist. Write scripts that are less likely to result in an error by handling null or undefined query results.\">Optional</a>",
                            "description": "Object used to interact with a single record."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GQ-sum_S",
                        "short_description": "Returns the aggregate sum of a given numeric field.",
                        "description": "<p>You can only use this method on fields of the following types:<ul class=\"ul\" id=\"GQ-sum_S__d85243e1111\">\n          <li class=\"li\">Integer </li>\n\n          <li class=\"li\">Long</li>\n\n          <li class=\"li\">Floating Point Number </li>\n\n          <li class=\"li\">Double</li>\n\n          <li class=\"li\">Currency</li>\n\n        </ul></p>",
                        "name": "sum(String field)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var totalFaults = new global.GlideQuery('cmdb_ci')\n    .sum('fault_count')\n    .orElse(0);\n\ngs.info(JSON.stringify(totalFaults));",
                                "description": "This example shows how to return the sum of all faults in the cmdb_ci table."
                            }
                        ],
                        "params": [
                            {
                                "name": "field",
                                "type": "String",
                                "description": "Field on which to perform the operation."
                            }
                        ],
                        "return": {
                            "type": "<a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/OptionalGlobalAPI\" title=\"The Optional API interacts with a single record returned by the GlideQuery, Stream, or GlideRecord APIs, even when it does not exist. Write scripts that are less likely to result in an error by handling null or undefined query results.\">Optional</a>",
                            "description": "Object used to interact with a single record."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GQ-toGlideRecord",
                        "short_description": "Returns a GlideRecord object that represents the current query. Returns a\n    GlideAggregrate object if the query uses the <span class=\"keyword apiname\">GlideQuery.aggregate()</span> method.",
                        "description": "<p>After transforming the query, use the <span class=\"keyword apiname\">query()</span> method in the <a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/c_GlideRecordAPI\" title=\"GlideRecord is used for database operations.\">GlideRecord</a> or <a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/c_GlideAggregateAPI\" title=\"GlideAggregate enables you to easily create database aggregation queries.\">GlideAggregate</a> classes\n        to query the database.</p>",
                        "name": "toGlideRecord()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var userGr = new global.GlideQuery('sys_user')\n    .where('active', true)\n    .whereNotNull('first_name')\n    .limit(10)\n    .toGlideRecord();\nuserGr.query();",
                                "description": "This example shows how to transform a GlideQuery object into a GlideRecord."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "or",
                            "description": "GlideRecord object that contains the query. If you used the\n                  <span class=\"keyword apiname\">GlideQuery.aggregate()</span> method, then the method returns a\n                GlideAggregrate object instead."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GQ-update_O_O",
                        "short_description": "Updates an existing record that matches the defined conditions.",
                        "description": "<p>Before using this method, call the <span class=\"keyword apiname\">where()</span> method to specify the\n        conditions that a record must meet to be updated.</p>",
                        "name": "update(Object changes, Object selectedFields)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var updateRecord = new global.GlideQuery('sys_user')\n    .where('sys_id', '0a826bf03710200044e0bfc8bcbe5d7a')\n    .update({ city: 'Los Angeles' });",
                                "description": "This example shows how to update a record with new values."
                            }
                        ],
                        "params": [
                            {
                                "name": "changes",
                                "type": "Object",
                                "description": "Object containing name-value pairs to update in the record. Names must match\n                  fields in the table."
                            },
                            {
                                "name": "selectedFields",
                                "type": "Array",
                                "description": "Optional. Additional fields to return in the result. <p class=\"p\">Default: The system\n                    always returns the sys_id.</p>"
                            }
                        ],
                        "return": {
                            "type": "<a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/OptionalGlobalAPI\" title=\"The Optional API interacts with a single record returned by the GlideQuery, Stream, or GlideRecord APIs, even when it does not exist. Write scripts that are less likely to result in an error by handling null or undefined query results.\">Optional</a>",
                            "description": "Object used to interact with a single record."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GQ-updateMultiple_O",
                        "short_description": "Updates all existing records that match the defined conditions. Returns the number of\n    records updated.",
                        "description": "<p>Before using this method, call the <span class=\"keyword apiname\">where()</span> method to specify the\n        conditions that the records must meet to be updated.</p>",
                        "name": "updateMultiple(Object changes)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var update = new global.GlideQuery('sys_user')\n    .where('active', false)\n    .where('last_name', 'Griffey')\n    .updateMultiple({ active: true });\n\ngs.info(JSON.stringify(update));",
                                "description": "This example shows how to update any records that fit a defined criteria."
                            }
                        ],
                        "params": [
                            {
                                "name": "changes",
                                "type": "Object",
                                "description": "Object containing name-value pairs to update in the record. Names must match\n                  fields in the table."
                            }
                        ],
                        "return": {
                            "type": "Object",
                            "description": "Object containing the number of records that were updated. Keys include: <ul class=\"ul\" id=\"GQ-updateMultiple_O__ul_epc_mxw_wmb\">\n                  <li class=\"li\"><samp class=\"ph codeph\">rowCount</samp>: Number of rows updated in the table. </li>\n\n                </ul>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GQ-where_S_S",
                        "short_description": "Adds a Where clause to the query that returns values based on a given\n    condition.",
                        "description": "<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> Do not precede this method with the <span class=\"keyword apiname\">orWhere()</span>,\n            <span class=\"keyword apiname\">orWhereNull()</span>, or <span class=\"keyword apiname\">orWhereNotNull()</span> methods.</div></p>",
                        "name": "where(String fieldOrQuery, String operator, Any value)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var query = new global.GlideQuery('sys_user')\n   .where('active', true)\n   .where('last_login', '&gt;', '2016-04-15')\n   .limit(5)\n   .select()\n   .toArray(100)\n\ngs.info(JSON.stringify(query));",
                                "description": "This example shows how to return records from the User table where active is true and the\n        user last logged on after a specified date."
                            },
                            {
                                "script": "// active = true AND (priority = 1 OR severity = 1)\nvar query = new GlideQuery('incident')\n    .where('active', true)\n    .where(new GlideQuery()\n        .where('priority', 1)\n        .orWhere('severity', 1))\n   .limit(5)\n   .select()\n   .toArray(100)\n\ngs.info(JSON.stringify(query));",
                                "description": "This example shows how to return records from the Incident table where active is true and\n        where either the priority or the severity is 1."
                            }
                        ],
                        "params": [
                            {
                                "name": "fieldOrQuery",
                                "type": "String or <a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/GlideQueryAPI\" title=\"The GlideQuery API is an alternative to GlideRecord to perform CRUD operations on record data from server-side scripts.\">GlideQuery</a>",
                                "description": "Field or another GlideQuery object used in the where clause. If passing a\n                  field, you can dot-walk to a desired value. For example,\n                    <samp class=\"ph codeph\">'company.name'</samp>."
                            },
                            {
                                "name": "operator",
                                "type": "String",
                                "description": "Optional. Operator used in the where clause. If you do not pass an argument,\n                the system uses the = operator."
                            },
                            {
                                "name": "value",
                                "type": "Any",
                                "description": "Value used in the where clause."
                            }
                        ],
                        "return": {
                            "type": "<a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/GlideQueryAPI\" title=\"The GlideQuery API is an alternative to GlideRecord to perform CRUD operations on record data from server-side scripts.\">GlideQuery</a>",
                            "description": "The query object being built."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GQ-whereNotNull_S",
                        "short_description": "Returns records that do not contain a null value in a given field.",
                        "description": "<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> Do not precede this method with the <span class=\"keyword apiname\">orWhere()</span>,\n            <span class=\"keyword apiname\">orWhereNull()</span>, or <span class=\"keyword apiname\">orWhereNotNull()</span> methods.</div></p>",
                        "name": "whereNotNull(String field)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var query = new global.GlideQuery('sys_user')\n   .whereNotNull('first_name')\n   .select()\n   .limit(5)\n   .toArray(100)\n\ngs.info(JSON.stringify(query));",
                                "description": "This example shows how to query the User table and return results where the first_name\n        field is not null."
                            }
                        ],
                        "params": [
                            {
                                "name": "field",
                                "type": "String",
                                "description": "Field used in the query."
                            }
                        ],
                        "return": {
                            "type": "<a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/GlideQueryAPI\" title=\"The GlideQuery API is an alternative to GlideRecord to perform CRUD operations on record data from server-side scripts.\">GlideQuery</a>",
                            "description": "The query object being built."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GQ-whereNull_S",
                        "short_description": "Returns records that contain a null value in a given field.",
                        "description": "<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> Do not precede this method with the <span class=\"keyword apiname\">orWhere()</span>,\n            <span class=\"keyword apiname\">orWhereNull()</span>, or <span class=\"keyword apiname\">orWhereNotNull()</span> methods.</div></p>",
                        "name": "whereNull(String field)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var query = new global.GlideQuery('sys_user')\n   .whereNull('last_name')\n   .orWhereNull('first_name')\n   .select()\n   .toArray(100)\n\ngs.info(JSON.stringify(query));",
                                "description": "This example shows how to query the User table and return records where the first or last\n        names are null."
                            }
                        ],
                        "params": [
                            {
                                "name": "field",
                                "type": "String",
                                "description": "Field used in the query."
                            }
                        ],
                        "return": {
                            "type": "<a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/GlideQueryAPI\" title=\"The GlideQuery API is an alternative to GlideRecord to perform CRUD operations on record data from server-side scripts.\">GlideQuery</a>",
                            "description": "The query object being built."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GQ-withAcls",
                        "short_description": "Executes the query using the <span class=\"keyword apiname\">GlideRecordSecure</span> API to securely query\n    the database while honoring ACLs.",
                        "description": "",
                        "name": "withAcls()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var users = new global.GlideQuery('sys_user')\n    .withAcls()\n    .limit(20)\n    .orderByDesc('first_name')\n    .select('first_name')\n    .toArray(100);",
                                "description": "This example shows how to execute a secure query using ACLs."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "<a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/GlideQueryAPI\" title=\"The GlideQuery API is an alternative to GlideRecord to perform CRUD operations on record data from server-side scripts.\">GlideQuery</a>",
                            "description": "The query object being built."
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "Build complex queries such\n      as:<pre><code class='language-javascript'>category='hardware' OR category='software' AND priority='2' AND priority='1'</code></pre><br/><br/>In the case of addCondition(), an implied AND is added.<br/><br/>This class has no constructor. A GlideQueryCondition object is returned by the following\n        methods:<ul class=\"ul\" id=\"c_GlideQueryConditionScopedAPI__ul_xyz_nsg_qz\">\n        <li class=\"li\"><span class=\"keyword apiname\">addActiveQuery()</span></li>\n\n        <li class=\"li\"><span class=\"keyword apiname\">addInactiveQuery()</span></li>\n\n        <li class=\"li\"><span class=\"keyword apiname\">addJoinQuery()</span></li>\n\n        <li class=\"li\"><span class=\"keyword apiname\">addNotNullQuery()</span></li>\n\n        <li class=\"li\"><span class=\"keyword apiname\">addNullQuery()</span></li>\n\n        <li class=\"li\"><span class=\"keyword apiname\">addQuery()</span></li>\n\n      </ul><br/><br/>If there is a complicated set of AND and OR queries, a single encoded query containing all\n      conditions simplifies the query creation. To simplify the query creation, create a query in a\n      list view, right-click the query, and select <span class=\"ph uicontrol\">Copy query</span>. It creates a\n      single encoded query string to return your result set. Use that string as a parameter in an\n        <span class=\"keyword apiname\">addEncodedQuery()</span> call.<br/><br/>Always test queries on a\n        sub-production instance prior to deploying them on a production instance. An incorrectly\n        constructed encoded query, such as including an invalid field name, produces an invalid\n        query. When the invalid query is run, the invalid part of the query condition is dropped,\n        and the results are based on the valid part of the query, which may return all records from\n        the table. Using an <span class=\"keyword apiname\">insert()</span>, <span class=\"keyword apiname\">update()</span>,\n          <span class=\"keyword apiname\">deleteRecord()</span>, or <span class=\"keyword apiname\">deleteMultiple()</span> method on bad\n        query results can result in data loss.<br/><br/>You can set the\n          <span class=\"keyword parmname\">glide.invalid_query.returns_no_rows</span> system property to true to have\n        queries with invalid encoded queries return no records.",
                "short_description": "The scoped GlideQueryCondition API provides additional AND or OR conditions that can be\n    added to the current condition, allowing you to build complex queries.",
                "identifier": "c_GlideQueryConditionScopedAPI",
                "name": "GlideQueryCondition",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "r_ScopedGlideQueryConditionAddCondition_String_name_String_oper_Object_value",
                        "short_description": "Adds an AND condition to the current condition.",
                        "description": "<p><div class=\"api-table\"><table  cellpadding=\"4\" cellspacing=\"0\" class=\"table returns\" frame=\"border\" id=\"r_ScopedGlideQueryConditionAddCondition_String_name_String_oper_Object_value__table_mxx_f5b_2r\"  summary=\"\"><div><span class=\"tablecap\">Returns</span></div>\n            \n            \n            <thead align=\"left\" class=\"thead\">\n              <tr >\n                <th class=\"entry\" id=\"d1538414e126\" valign=\"top\">Type</th>\n\n                <th class=\"entry\" id=\"d1538414e129\" valign=\"top\">Description</th>\n\n              </tr>\n\n            </thead>\n\n            <tbody class=\"tbody\">\n              <tr >\n                <td class=\"entry\" headers=\"d1538414e126\" valign=\"top\">GlideQueryCondition</td>\n\n                <td class=\"entry\" headers=\"d1538414e129\" valign=\"top\">A reference to a GlideQueryConditon that was added to the\n                  GlideRecord.</td>\n\n              </tr>\n\n            </tbody>\n\n          </table>\n</div></p>",
                        "name": "addCondition(String name, String oper, Object value)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var now_GR = new GlideRecord('incident');\nvar qc = now_GR.addQuery('category', 'Hardware');\nqc.addCondition('category', 'Network');\nnow_GR.addQuery('number','INC0000003');\nnow_GR.next();\nnow_GR.number;\ngs.info(now_GR.getEncodedQuery());",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "name",
                                "type": "String",
                                "description": "The name of a field."
                            },
                            {
                                "name": "oper",
                                "type": "String",
                                "description": "(Optional) The operator for the query. If you do not specify an operator, the\n                condition uses an equals operator."
                            },
                            {
                                "name": "value",
                                "type": "Object",
                                "description": "The value to query on."
                            }
                        ],
                        "return": {
                            "type": "GlideQueryCondition",
                            "description": "A reference to a GlideQueryConditon that was added to the\n                  GlideRecord."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideQueryConditionOrAddCondition_String_name_String_oper_Object_value",
                        "short_description": "Appends a two-or-three parameter OR condition to an existing\n    GlideQueryCondition.",
                        "description": "<p><span class=\"keyword apiname\">addOrCondition()</span> works in conjunction with any of the <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=r_ScopedGlideRecordAddQuery_String_String_Object&amp;v=paris\" target=\"_blank\">addQuery()</a> methods to <samp class=\"ph codeph\">OR</samp> the specified query parameters to the query previously\n        constructed using <span class=\"keyword apiname\">addQuery()</span>.</p><p><span class=\"keyword apiname\">addOrCondition()</span> is typically called with three parameters; table field,\n        operator, and comparison value. It can be called with only two parameters, table field and\n        comparison value, such as <samp class=\"ph codeph\">qc.addOrCondition('category', 'software');</samp>. The\n        operator in this case is assumed to be \"equal to\".</p><p><div class=\"api-table\"><table  cellpadding=\"4\" cellspacing=\"0\" class=\"table parameters\" frame=\"border\" id=\"r_ScopedGlideQueryConditionOrAddCondition_String_name_String_oper_Object_value__table_vy2_525_jq\"  summary=\"\"><div><span class=\"tablecap\">Parameters</span></div>\n            \n            \n            \n            <thead align=\"left\" class=\"thead\">\n              <tr >\n                <th class=\"entry\" id=\"d1538688e82\" valign=\"top\">Name</th>\n\n                <th class=\"entry\" id=\"d1538688e85\" valign=\"top\">Type</th>\n\n                <th class=\"entry\" id=\"d1538688e88\" valign=\"top\">Description</th>\n\n              </tr>\n\n            </thead>\n\n            <tbody class=\"tbody\">\n              <tr >\n                <td class=\"entry\" headers=\"d1538688e82\" valign=\"top\">name </td>\n\n                <td class=\"entry\" headers=\"d1538688e85\" valign=\"top\">String</td>\n\n                <td class=\"entry\" headers=\"d1538688e88\" valign=\"top\">Field name</td>\n\n              </tr>\n\n              <tr >\n                <td class=\"entry\" headers=\"d1538688e82\" valign=\"top\">oper</td>\n\n                <td class=\"entry\" headers=\"d1538688e85\" valign=\"top\">String </td>\n\n                <td class=\"entry\" headers=\"d1538688e88\" valign=\"top\">(Optional) Query operator. The available values are dependent on the data\n                  type of the <var class=\"keyword varname\">value</var> parameter.<div class=\"p\">Numbers:<ul class=\"ul\" id=\"r_ScopedGlideQueryConditionOrAddCondition_String_name_String_oper_Object_value__ul_qyb_rbt_3y\">\n                      <li class=\"li\">=</li>\n\n                      <li class=\"li\">!=</li>\n\n                      <li class=\"li\">&gt;</li>\n\n                      <li class=\"li\">&gt;=</li>\n\n                      <li class=\"li\">&lt;</li>\n\n                      <li class=\"li\">&lt;=</li>\n\n                    </ul>\n</div>\n<div class=\"p\">Strings (must be in upper case):<ul class=\"ul\" id=\"r_ScopedGlideQueryConditionOrAddCondition_String_name_String_oper_Object_value__ul_egz_vbt_3y\">\n                      <li class=\"li\">=</li>\n\n                      <li class=\"li\">!=</li>\n\n                      <li class=\"li\">IN</li>\n\n                      <li class=\"li\">STARTSWITH</li>\n\n                      <li class=\"li\">ENDSWITH</li>\n\n                      <li class=\"li\">CONTAINS</li>\n\n                      <li class=\"li\">DOESNOTCONTAIN</li>\n\n                    </ul>\n</div>\n</td>\n\n              </tr>\n\n              <tr >\n                <td class=\"entry\" headers=\"d1538688e82\" valign=\"top\">value</td>\n\n                <td class=\"entry\" headers=\"d1538688e85\" valign=\"top\">Object</td>\n\n                <td class=\"entry\" headers=\"d1538688e88\" valign=\"top\">Value on which to query (not case-sensitive).<div class=\"note note\"><span class=\"notetitle\">Note:</span> All passed in arrays must\n                    contain a minimum of two elements. Single element arrays are not\n                    supported.</div>\n</td>\n\n              </tr>\n\n            </tbody>\n\n          </table>\n</div></p><p><div class=\"api-table\"><table  cellpadding=\"4\" cellspacing=\"0\" class=\"table returns\" frame=\"border\" id=\"r_ScopedGlideQueryConditionOrAddCondition_String_name_String_oper_Object_value__table_w2h_w2c_2r\"  summary=\"\"><div><span class=\"tablecap\">Returns</span></div>\n            \n            \n            <thead align=\"left\" class=\"thead\">\n              <tr >\n                <th class=\"entry\" id=\"d1538688e206\" valign=\"top\">Type</th>\n\n                <th class=\"entry\" id=\"d1538688e209\" valign=\"top\">Description</th>\n\n              </tr>\n\n            </thead>\n\n            <tbody class=\"tbody\">\n              <tr >\n                <td class=\"entry\" headers=\"d1538688e206\" valign=\"top\">GlideQueryCondition</td>\n\n                <td class=\"entry\" headers=\"d1538688e209\" valign=\"top\">A reference to a GlideQueryConditon that was added to the\n                  GlideRecord.</td>\n\n              </tr>\n\n            </tbody>\n\n          </table>\n</div></p>",
                        "name": "addOrCondition(String name, String oper, Object value)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var now_GR = new GlideRecord('incident');\nvar qc = now_GR.addQuery('category', 'Hardware');\nqc.addOrCondition('category', 'Network');\nnow_GR.addQuery('number','INC0000003');\nnow_GR.next();\nnow_GR.number;\ngs.info(now_GR.getEncodedQuery());\n",
                                "description": ""
                            },
                            {
                                "script": "var myObj = new GlideRecord('incident');\nvar q1 = myObj.addQuery('state', '&lt;', 3);\nq1.addOrCondition('state', '&gt;', 5);\nvar q2 = myObj.addQuery('priority', 1);\nq2.addOrCondition('priority', 5);\nmyObj.query();",
                                "description": "To group AND/OR statements to make complex queries, such as \"All incidents with a (state\n        less than 3 OR greater than 5) AND (priority is 1 OR priority is 5)"
                            }
                        ],
                        "params": [
                            {
                                "name": "name",
                                "type": "String",
                                "description": "Field name"
                            },
                            {
                                "name": "oper",
                                "type": "String",
                                "description": "(Optional) Query operator. The available values are dependent on the data\n                  type of the <var class=\"keyword varname\">value</var> parameter.<div class=\"p\">Numbers:<ul class=\"ul\" id=\"r_ScopedGlideQueryConditionOrAddCondition_String_name_String_oper_Object_value__ul_qyb_rbt_3y\">\n                      <li class=\"li\">=</li>\n\n                      <li class=\"li\">!=</li>\n\n                      <li class=\"li\">&gt;</li>\n\n                      <li class=\"li\">&gt;=</li>\n\n                      <li class=\"li\">&lt;</li>\n\n                      <li class=\"li\">&lt;=</li>\n\n                    </ul>\n</div>\n<div class=\"p\">Strings (must be in upper case):<ul class=\"ul\" id=\"r_ScopedGlideQueryConditionOrAddCondition_String_name_String_oper_Object_value__ul_egz_vbt_3y\">\n                      <li class=\"li\">=</li>\n\n                      <li class=\"li\">!=</li>\n\n                      <li class=\"li\">IN</li>\n\n                      <li class=\"li\">STARTSWITH</li>\n\n                      <li class=\"li\">ENDSWITH</li>\n\n                      <li class=\"li\">CONTAINS</li>\n\n                      <li class=\"li\">DOESNOTCONTAIN</li>\n\n                    </ul>\n</div>"
                            },
                            {
                                "name": "value",
                                "type": "Object",
                                "description": "Value on which to query (not case-sensitive).<div class=\"note note\"><span class=\"notetitle\">Note:</span> All passed in arrays must\n                    contain a minimum of two elements. Single element arrays are not\n                    supported.</div>"
                            }
                        ],
                        "return": {
                            "type": "GlideQueryCondition",
                            "description": "A reference to a GlideQueryConditon that was added to the\n                  GlideRecord."
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "A GlideRecord contains both records and fields.<br/><br/>For information on a class that performs the same functions as <span class=\"keyword apiname\">GlideRecord</span>\n      and enforces ACLs, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-application-development/page/script/glide-server-apis/topic/p_GlideServerAPIs.html#concepthrq5bcgp\" target=\"_blank\">Using GlideRecordSecure</a>.<br/><br/>Always test queries on a\n        sub-production instance prior to deploying them on a production instance. An incorrectly\n        constructed encoded query, such as including an invalid field name, produces an invalid\n        query. When the invalid query is run, the invalid part of the query condition is dropped,\n        and the results are based on the valid part of the query, which may return all records from\n        the table. Using an <span class=\"keyword apiname\">insert()</span>, <span class=\"keyword apiname\">update()</span>,\n          <span class=\"keyword apiname\">deleteRecord()</span>, or <span class=\"keyword apiname\">deleteMultiple()</span> method on bad\n        query results can result in data loss.<br/><br/>You can set the\n          <span class=\"keyword parmname\">glide.invalid_query.returns_no_rows</span> system property to true to have\n        queries with invalid encoded queries return no records.",
                "short_description": "Scoped <span class=\"keyword apiname\">GlideRecord</span> is used for database operations.",
                "identifier": "c_GlideRecordScopedAPI",
                "name": "GlideRecord",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "r_ScopedGlideRecordGlideRecord_S",
                        "short_description": "Creates an instance of the GlideRecord class for the specified table.",
                        "description": "",
                        "name": "GlideRecord(String tableName)",
                        "type": "Constructor",
                        "examples": [
                            {
                                "script": "var now_GR = new GlideRecord('incident');",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "tableName",
                                "type": "String",
                                "description": "The table to be used."
                            }
                        ],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SGR-addActiveQuery",
                        "short_description": "Adds a filter to return active records.",
                        "description": "",
                        "name": "addActiveQuery()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var inc = new GlideRecord('incident');\ninc.addActiveQuery();\ninc.query();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "QueryCondition",
                            "description": "Filter to return active records."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideRecordAddEncodedQuery_String",
                        "short_description": "Adds an encoded query to other queries that may have been set.",
                        "description": "<p>Always test queries on a\n        sub-production instance prior to deploying them on a production instance. An incorrectly\n        constructed encoded query, such as including an invalid field name, produces an invalid\n        query. When the invalid query is run, the invalid part of the query condition is dropped,\n        and the results are based on the valid part of the query, which may return all records from\n        the table. Using an <span class=\"keyword apiname\">insert()</span>, <span class=\"keyword apiname\">update()</span>,\n          <span class=\"keyword apiname\">deleteRecord()</span>, or <span class=\"keyword apiname\">deleteMultiple()</span> method on bad\n        query results can result in data loss.</p><p>You can set the\n          <span class=\"keyword parmname\">glide.invalid_query.returns_no_rows</span> system property to true to have\n        queries with invalid encoded queries return no records.</p>",
                        "name": "addEncodedQuery(String query)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var queryString = \"priority=1^ORpriority=2\";\nvar now_GR = new GlideRecord('incident');\nnow_GR.addEncodedQuery(queryString);\nnow_GR.query();\nwhile (now_GR.next()) {\n  gs.addInfoMessage(now_GR.getValue('number'));\n}",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "query",
                                "type": "String",
                                "description": "An <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-platform-user-interface/page/use/using-lists/concept/c_EncodedQueryStrings.html\" target=\"_blank\">encoded query\n                  string</a>."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideRecordAddFunction_O",
                        "short_description": "Applies a pre-defined GlideDBFunctionBuilder object to a record.",
                        "description": "<p>Use the <span class=\"keyword apiname\">GlideDBFunctionBuilder</span> scoped class to define a function. After\n        the function is defined, use the <span class=\"keyword apiname\">addFunction(Object function)</span> method to\n        apply the function to a record.</p>",
                        "name": "addFunction(Object function)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var functionBuilder = new GlideDBFunctionBuilder();\nvar myAddingFunction = functionBuilder.add();\nmyAddingFunction = functionBuilder.field('order');\nmyAddingFunction = functionBuilder.field('priority');\nmyAddingFunction = functionBuilder.build();\n\n// Query incidents in which order + priority is less than 5 and display that added value\nvar now_GR = new GlideRecord('incident');\nnow_GR.addFunction(myAddingFunction);\nnow_GR.addQuery(myAddingFunction, '&lt;', 5);\nnow_GR.query();\nwhile(now_GR.next())\n  gs.info(now_GR.getValue(myAddingFunction));",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "function",
                                "type": "Object",
                                "description": "GlideDBFunctionBuilder object that defines a SQL operation."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideRecordAddJoinQuery_String_Object_Object",
                        "short_description": "Adds a filter to return records based on a relationship in a table related to the\n    current GlideRecord.",
                        "description": "<p>You can use this method to find all the users that are in the database group via the Group\n        Member [sys_user_grmember] table, or to find all problems that have an assigned incident via\n        the incident.problem_id relationship.</p><p>This is not a true database join; rather, <span class=\"keyword apiname\">addJoinQuery()</span> adds a\n        subquery. So, while the result set is limited based on the join, the only fields that you\n        have access to are those on the base table (those which are in the table with which the\n        GlideRecord was initialized.)</p><p>Always test queries on a\n        sub-production instance prior to deploying them on a production instance. An incorrectly\n        constructed encoded query, such as including an invalid field name, produces an invalid\n        query. When the invalid query is run, the invalid part of the query condition is dropped,\n        and the results are based on the valid part of the query, which may return all records from\n        the table. Using an <span class=\"keyword apiname\">insert()</span>, <span class=\"keyword apiname\">update()</span>,\n          <span class=\"keyword apiname\">deleteRecord()</span>, or <span class=\"keyword apiname\">deleteMultiple()</span> method on bad\n        query results can result in data loss.</p><p>You can set the\n          <span class=\"keyword parmname\">glide.invalid_query.returns_no_rows</span> system property to true to have\n        queries with invalid encoded queries return no records.</p>",
                        "name": "addJoinQuery(String joinTable, String primaryField, String joinTableField)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var prob = new GlideRecord('problem');\nprob.addJoinQuery('incident');\nprob.query();",
                                "description": "Find problems that have an incident attached. This example returns problems that have\n        associated incidents. However, it won't pull values from the incidents that are returned as\n        a part of the query."
                            },
                            {
                                "script": "// Look for Problem records that have associated Incident records\nvar now_GR = new GlideRecord('problem');\nvar grSQ = now_GR.addJoinQuery('incident');\n \n// Where the Problem records are \"active=false\"\nnow_GR.addQuery('active', 'false');\n \n// And the Incident records are \"active=true\"\ngrSQ.addCondition('active', 'true');\n \n// Query\nnow_GR.query();\n \n// Iterate and output results\nwhile (now_GR.next()) {\n    gs.info(now_GR.getValue('number'));\n}",
                                "description": "Find inactive problems with associated incidents."
                            },
                            {
                                "script": "var now_GR = new GlideRecord('problem'); \nnow_GR.addJoinQuery('incident', 'opened_by', 'caller_id'); \nnow_GR.query();",
                                "description": "Find problems that have incidents associated where the incident\n          <span class=\"keyword parmname\">caller_id</span> field value matches that of the problem\n          <span class=\"keyword parmname\">opened_by</span> field."
                            }
                        ],
                        "params": [
                            {
                                "name": "joinTable",
                                "type": "String",
                                "description": "Name of table to use in the join, such as\n                <span class=\"keyword parmname\">'incident'</span>."
                            },
                            {
                                "name": "primaryField",
                                "type": "String",
                                "description": "Optional. Name of the field in the GlideRecord to use to join the field\n                specified in the <span class=\"keyword parmname\">joinTableField</span> parameter.<p class=\"p\">Default:\n                  sys_id</p>"
                            },
                            {
                                "name": "joinTableField",
                                "type": "String",
                                "description": "Optional. Name of the field in the table specified in\n                  <span class=\"keyword parmname\">joinTable</span> to use to join the tables.<p class=\"p\">Default: First field\n                  in the table specified in <span class=\"keyword parmname\">joinTable</span> that is a reference field\n                  to the current GlideRecord table.</p>"
                            }
                        ],
                        "return": {
                            "type": "GlideQueryCondition",
                            "description": "Filter that lists records where the relationships match."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideRecordAddNotNullQuery_String",
                        "short_description": "A filter that specifies records where the value of the field passed in the parameter is\n    not null.",
                        "description": "<p>Always test queries on a\n        sub-production instance prior to deploying them on a production instance. An incorrectly\n        constructed encoded query, such as including an invalid field name, produces an invalid\n        query. When the invalid query is run, the invalid part of the query condition is dropped,\n        and the results are based on the valid part of the query, which may return all records from\n        the table. Using an <span class=\"keyword apiname\">insert()</span>, <span class=\"keyword apiname\">update()</span>,\n          <span class=\"keyword apiname\">deleteRecord()</span>, or <span class=\"keyword apiname\">deleteMultiple()</span> method on bad\n        query results can result in data loss.</p><p>You can set the\n          <span class=\"keyword parmname\">glide.invalid_query.returns_no_rows</span> system property to true to have\n        queries with invalid encoded queries return no records.</p>",
                        "name": "addNotNullQuery(String fieldName)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var target = new GlideRecord('incident'); \ntarget.addNotNullQuery('short_description');\ntarget.query();   // Issue the query to the database to get all records where short_description is not null\nwhile (target.next()) {   \n     // add code here to process the incident record\n}",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "fieldName",
                                "type": "String",
                                "description": "The name of the field to be checked."
                            }
                        ],
                        "return": {
                            "type": "GlideQueryCondition",
                            "description": "A filter that specifies records where the value of the field passed in the\n                parameter is not null."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideRecordAddNullQuery_String",
                        "short_description": "Adds a filter to return records where the value of the specified field is\n    null.",
                        "description": "<p>Always test queries on a\n        sub-production instance prior to deploying them on a production instance. An incorrectly\n        constructed encoded query, such as including an invalid field name, produces an invalid\n        query. When the invalid query is run, the invalid part of the query condition is dropped,\n        and the results are based on the valid part of the query, which may return all records from\n        the table. Using an <span class=\"keyword apiname\">insert()</span>, <span class=\"keyword apiname\">update()</span>,\n          <span class=\"keyword apiname\">deleteRecord()</span>, or <span class=\"keyword apiname\">deleteMultiple()</span> method on bad\n        query results can result in data loss.</p><p>You can set the\n          <span class=\"keyword parmname\">glide.invalid_query.returns_no_rows</span> system property to true to have\n        queries with invalid encoded queries return no records.</p>",
                        "name": "addNullQuery(String fieldName)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var target = new GlideRecord('incident'); \ntarget.addNullQuery('short_description');\ntarget.query();   // Issue the query to the database to get all records where short_description is null\nwhile (target.next()) {   \n   // add code here to process the incident record\n}",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "fieldName",
                                "type": "String",
                                "description": "The name of the field to be checked."
                            }
                        ],
                        "return": {
                            "type": "GlideQueryCondition",
                            "description": "The query condition added to the GlideRecord."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideRecordAddQuery_String_Object",
                        "short_description": "Build a search query and return the rows that match the request.",
                        "description": "<p>If you are familiar with SQL, this method is similar to the \"where\" clause. One or more\n          <span class=\"keyword apiname\">addQuery()</span> calls can be made in a single query; in this case the\n        queries are AND'ed. If any of the query statements need to be OR'ed, use the\n          <span class=\"keyword apiname\">GlideQueryCondition</span> method <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=r_ScopedGlideQueryConditionOrAddCondition_String_name_String_oper_Object_value&amp;v=quebec\" target=\"_blank\">addOrCondition()</a>.</p><p>When <span class=\"keyword apiname\">addQuery()</span> is called with only two parameters, table field and\n        comparison value, such as <samp class=\"ph codeph\">myObj.addQuery('category','Hardware');</samp>, the\n        operator in this case is assumed to be \"equal to\".</p><p>Always test queries on a\n        sub-production instance prior to deploying them on a production instance. An incorrectly\n        constructed encoded query, such as including an invalid field name, produces an invalid\n        query. When the invalid query is run, the invalid part of the query condition is dropped,\n        and the results are based on the valid part of the query, which may return all records from\n        the table. Using an <span class=\"keyword apiname\">insert()</span>, <span class=\"keyword apiname\">update()</span>,\n          <span class=\"keyword apiname\">deleteRecord()</span>, or <span class=\"keyword apiname\">deleteMultiple()</span> method on bad\n        query results can result in data loss.</p><p>You can set the\n          <span class=\"keyword parmname\">glide.invalid_query.returns_no_rows</span> system property to true to have\n        queries with invalid encoded queries return no records.</p>",
                        "name": "addQuery(String name, Object value)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var rec = new GlideRecord('incident');\nrec.addQuery('active', true);\nrec.query();\nwhile (rec.next()) {\n  rec.setValue('active', false);\n  gs.info('Active incident ' + rec.getValue('number') + ' closed');\n  rec.update();\n}",
                                "description": "Adds a query for active records in the Incident table."
                            },
                            {
                                "script": "var now_GR = new GlideRecord(\"kb_knowledge);\nnow_GR.addQuery(\"123TEXTQUERY321\", \"email server\");\nnow_GR.addQuery(\"123TEXTINDEXGROUP321\", \"portal\");\nnow_GR.query();",
                                "description": "Adds a query for records in the kb_knowledge table and portal text index group."
                            }
                        ],
                        "params": [
                            {
                                "name": "name",
                                "type": "String",
                                "description": "Table field name. If you are not querying a table field, use these reserved\n                  variables:<ul class=\"ul\" id=\"r_ScopedGlideRecordAddQuery_String_Object__ul_e5c_slk_xhb\">\n                  <li class=\"li\">123TEXTQUERY321: Adds a search term to the query. Use this option to return\n                    matching values from any field in the table. Use the term you want to query as\n                    the value.</li>\n\n                  <li class=\"li\">123TEXTINDEXGROUP321: Adds a text index group to the query. Use the name of\n                    the text index group from the Text Index Groups [ts_index_group] table you want\n                    to query as the value. For more information about text index groups, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/search-administration/task/index-multiple-tables.html\" target=\"_blank\">Configure multiple tables\n                      for indexing and searching</a>.</li>\n\n                </ul>"
                            },
                            {
                                "name": "value",
                                "type": "Object",
                                "description": "Value on which to query (not case-sensitive)."
                            }
                        ],
                        "return": {
                            "type": "GlideQueryCondition",
                            "description": "The query condition added to the GlideRecord."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideRecordAddQuery_String_String_Object",
                        "short_description": "Provides the ability to build a request, which when executed, returns the rows from the\n    specified table, that match the request.",
                        "description": "<p>If you are familiar with SQL, this method is similar to the \"where\" clause. One or more\n          <span class=\"keyword apiname\">addQuery()</span> calls can be made in a single query; in this case the\n        queries are AND'ed. If any of the query statements need to be OR'ed, use the\n          <span class=\"keyword apiname\">GlideQueryCondition</span> method <a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/c_GlideQueryConditionScopedAPI#r_ScopedGlideQueryConditionOrAddCondition_String_name_String_oper_Object_value\" title=\"Appends a two-or-three parameter OR condition to an existing GlideQueryCondition.\">addOrCondition()</a>.</p><p>Always test queries on a\n        sub-production instance prior to deploying them on a production instance. An incorrectly\n        constructed encoded query, such as including an invalid field name, produces an invalid\n        query. When the invalid query is run, the invalid part of the query condition is dropped,\n        and the results are based on the valid part of the query, which may return all records from\n        the table. Using an <span class=\"keyword apiname\">insert()</span>, <span class=\"keyword apiname\">update()</span>,\n          <span class=\"keyword apiname\">deleteRecord()</span>, or <span class=\"keyword apiname\">deleteMultiple()</span> method on bad\n        query results can result in data loss.</p><p>You can set the\n          <span class=\"keyword parmname\">glide.invalid_query.returns_no_rows</span> system property to true to have\n        queries with invalid encoded queries return no records.</p>",
                        "name": "addQuery(String name, String operator, Object value)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var rec = new GlideRecord('incident');\nrec.addQuery('active',true);\nrec.addQuery('sys_created_on', \"&gt;\", \"2010-01-19 04:05:00\");\nrec.query();\nwhile (rec.next()) {\n  rec.setValue('active', false);\n  gs.info('Active incident ' + rec.getValue('number') + ' closed');\n  rec.update();\n}",
                                "description": ""
                            },
                            {
                                "script": "var now_GR = new GlideRecord('incident');\nnow_GR.addQuery('number','IN','INC00001,INC00002');\nnow_GR.query();\nwhile(now_GR.next()) {\n  //do something....\n}",
                                "description": "Using the IN operator."
                            }
                        ],
                        "params": [
                            {
                                "name": "name",
                                "type": "String",
                                "description": "Table field name."
                            },
                            {
                                "name": "operator",
                                "type": "String",
                                "description": "Query operator. The available values are dependent on the data type of the\n                  <var class=\"keyword varname\">value</var> parameter.<div class=\"p\">Numbers:<ul class=\"ul\" id=\"r_ScopedGlideRecordAddQuery_String_String_Object__ul_qyb_rbt_3y\">\n                    <li class=\"li\">=</li>\n\n                    <li class=\"li\">!=</li>\n\n                    <li class=\"li\">&gt;</li>\n\n                    <li class=\"li\">&gt;=</li>\n\n                    <li class=\"li\">&lt;</li>\n\n                    <li class=\"li\">&lt;=</li>\n\n                  </ul>\n</div>\n<div class=\"p\">Strings (must be in upper case):<ul class=\"ul\" id=\"r_ScopedGlideRecordAddQuery_String_String_Object__ul_egz_vbt_3y\">\n                    <li class=\"li\">=</li>\n\n                    <li class=\"li\">!=</li>\n\n                    <li class=\"li\">IN</li>\n\n                    <li class=\"li\">NOT IN</li>\n\n                    <li class=\"li\">STARTSWITH</li>\n\n                    <li class=\"li\">ENDSWITH</li>\n\n                    <li class=\"li\">CONTAINS</li>\n\n                    <li class=\"li\">DOES NOT CONTAIN</li>\n\n                    <li class=\"li\">INSTANCEOF</li>\n\n                  </ul>\n</div>"
                            },
                            {
                                "name": "value",
                                "type": "Object",
                                "description": "Value on which to query (not case-sensitive)."
                            }
                        ],
                        "return": {
                            "type": "GlideQueryCondition",
                            "description": "The query condition that was added to the GlideRecord."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideRecordAddQuery_String",
                        "short_description": "Adds a filter to return records using an encoded query string.",
                        "description": "<p>Always test queries on a\n        sub-production instance prior to deploying them on a production instance. An incorrectly\n        constructed encoded query, such as including an invalid field name, produces an invalid\n        query. When the invalid query is run, the invalid part of the query condition is dropped,\n        and the results are based on the valid part of the query, which may return all records from\n        the table. Using an <span class=\"keyword apiname\">insert()</span>, <span class=\"keyword apiname\">update()</span>,\n          <span class=\"keyword apiname\">deleteRecord()</span>, or <span class=\"keyword apiname\">deleteMultiple()</span> method on bad\n        query results can result in data loss.</p><p>You can set the\n          <span class=\"keyword parmname\">glide.invalid_query.returns_no_rows</span> system property to true to have\n        queries with invalid encoded queries return no records.</p>",
                        "name": "addQuery(String query)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var rec = new GlideRecord('incident');\nrec.addQuery('active=true');\nrec.query();\nwhile (rec.next()) {\n  rec.setValue('active', false);\n  gs.info('Active incident ' + rec.getValue('number') + ' closed');\n  rec.update();\n}",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "query",
                                "type": "String",
                                "description": "An <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/quebec-platform-administration/page/use/using-lists/concept/c_EncodedQueryStrings.html\" target=\"_blank\">encoded query string</a>\n                \n                ."
                            }
                        ],
                        "return": {
                            "type": "GlideQueryCondition",
                            "description": "The query condition added to the GlideRecord."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SGR-addValue_S_N",
                        "short_description": "Provides atomic add and subtract operations on a specified number field at the database\n    level for the current GlideRecord object.",
                        "description": "<p>Typically, a GlideRecord object is written as one record in a database. Individual field\n        values are stored as defined. For code that adds a value to a GlideRecord field, it simply\n        saves the field to the database with the new value, rather than atomically incrementing it.</p><p>For example, when the following code is executed, the value of the\n          <var class=\"keyword varname\">u_count</var>\n        field in the database is\n        2.<pre class=\"pre codeblock\">gs.info(now_GR.u_count); // â1â \nnow_GR.u_count += 1; \nnow_GR.update(); \nnow_GR.get(now_GR.sys_id); \ngs.info(now_GR.u_count); // â2â   </pre>\nIf\n        another user concurrently runs identical code, instead of the two operations each adding 1\n        to\n          <var class=\"keyword varname\">u_count</var>,\n        the net effect is that\n          <var class=\"keyword varname\">u_count</var>\n        only contains 2, with one operation's update actually being lost.</p><p>Conversely, the <span class=\"keyword apiname\">addValue()</span> method performs the addition/subtraction in\n        the database when the record is updated as an atomic operation. Two operations running\n        concurrently each properly update the field.\n        <pre class=\"pre codeblock\">gs.info(now_GR.u_count); // â1â \nnow_GR.addValue(âu_countâ, 1); \nnow_GR.update(); \nnow_GR.get(now_GR.sys_id); // The record must be reloaded from the database to observe the result\ngs.info(now_GR.u_count); // â3â, if executed concurrently with another user </pre></p><p><div class=\"note note\"><span class=\"notetitle\">Note:</span> The new value is not read back from the database unless explicitly done so. </div></p><p>Like\n          <span class=\"keyword apiname\">setValue()</span>,\n          <span class=\"keyword apiname\">addValue()</span> changes only take effect in the database after a subsequent\n        call to <span class=\"keyword apiname\">update()</span> or <span class=\"keyword apiname\">insert()</span>. If\n          <span class=\"keyword apiname\">insert()</span> is called, the specified field is initialized with the\n          <span class=\"keyword parmname\">value</span> parameter passed into <span class=\"keyword apiname\">addValue()</span>.</p><p><div class=\"note note\"><span class=\"notetitle\">Note:</span>  If <span class=\"keyword apiname\">setValue()</span> is called for the specified field prior to calling\n            <span class=\"keyword apiname\">addValue()</span>, the <span class=\"keyword apiname\">addValue()</span> method is not processed\n          and an error message is logged.</div></p>",
                        "name": "addValue(String field, Number value)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "gs.info(now_GR.u_count); // â1â \nnow_GR.addValue(âu_countâ, 1); \nnow_GR.update(); \nnow_GR.get(now_GR.sys_id); // The record must be reloaded from the database to observe the result\ngs.info(now_GR.u_count);",
                                "description": "Shows a value being added."
                            },
                            {
                                "script": "gs.info(now_GR.u_count); // â4â \nnow_GR.addValue(âu_countâ, -1); \nnow_GR.update(); \nnow_GR.get(now_GR.sys_id); // The record must be reloaded from the database to observe the result\ngs.info(now_GR.u_count);",
                                "description": "Shows a value being subtracted."
                            }
                        ],
                        "params": [
                            {
                                "name": "field",
                                "type": "String",
                                "description": "The name of the field in this GlideRecord to modify. <p class=\"p\">If the associated field\n                  is not a numeric type, the operation is ignored.</p>"
                            },
                            {
                                "name": "value",
                                "type": "Number",
                                "description": "The amount to add to the value when the record is saved. To perform a\n                subtraction operation, simply pass a negative value."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SGR-applyEncodedQuery_S",
                        "short_description": "Sets the values of the specified encoded query terms and applies them to the current\n    GlideRecord.",
                        "description": "",
                        "name": "applyEncodedQuery(String queryString)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "function createAcl(table, role) {\n  gs.info(\"Checking security on table \" + table);\n  var now_GR = new GlideRecord(\"sys_security_acl\");\n  now_GR.addQuery(\"name\", table);\n  now_GR.addQuery(\"operation\", \"read\");\n  now_GR.query();\n  var encQuery = now_GR.getEncodedQuery();\n  if (now_GR.next()) {\n  // existing acl found so use it\n    createAclRole(now_GR.getValue('sys_id'), role);\n    return;\n  } else {\n    now_GR.initialize();\n    now_GR.applyEncodedQuery(encQuery);\n    var acl = now_GR.insert();\n    gs.info(\"Added read access control on \" + table);\n    createAclRole(acl, role);\n  }\n}",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "queryString",
                                "type": "String",
                                "description": "Encoded query to apply to the current GlideRecord."
                            }
                        ],
                        "return": {
                            "type": "None",
                            "description": "Â "
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideRecordCanCreate",
                        "short_description": "Determines if the Access Control Rules, which include the user's roles, permit\n    inserting new records in this table.",
                        "description": "",
                        "name": "canCreate()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var now_GR = new GlideRecord('incident');\ngs.info(now_GR.canCreate());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "Flag that indicates whether the user's roles permit creating of records in this\n                  table.<div class=\"p\">Valid values:<ul class=\"ul\" id=\"r_ScopedGlideRecordCanCreate__ul_vtm_pf2_t3b\">\n                    <li class=\"li\">true: Creating permitted</li>\n\n                    <li class=\"li\">false: Creating is not permitted</li>\n\n                  </ul>\n</div>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideRecordCanDelete",
                        "short_description": "Determines if the Access Control Rules, which include the user's roles, permit deleting\n    records in this table.",
                        "description": "",
                        "name": "canDelete()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var att = new GlideRecord('sys_attachment');\ngs.info(att.canDelete());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "Flag that indicates whether the user's roles permit deleting of records in this\n                  table.<div class=\"p\">Valid values:<ul class=\"ul\" id=\"r_ScopedGlideRecordCanDelete__ul_vtm_pf2_t3b\">\n                    <li class=\"li\">true: Deleting permitted</li>\n\n                    <li class=\"li\">false: Deleting is not permitted</li>\n\n                  </ul>\n</div>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideRecordCanRead",
                        "short_description": "Determines if the Access Control Rules, which include the user's roles, permit reading\n    records in this table.",
                        "description": "",
                        "name": "canRead()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var now_GR = new GlideRecord('incident');\ngs.info(now_GR.canRead());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "Flag that indicates whether the user's roles permit reading of records in this\n                  table.<div class=\"p\">Valid values:<ul class=\"ul\" id=\"r_ScopedGlideRecordCanRead__ul_vtm_pf2_t3b\">\n                    <li class=\"li\">true: Reading permitted</li>\n\n                    <li class=\"li\">false: Reading is not permitted</li>\n\n                  </ul>\n</div>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideRecordCanWrite",
                        "short_description": "Determines if the Access Control Rules, which include the user's roles, permit editing\n    records in this table.",
                        "description": "",
                        "name": "canWrite()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var now_GR = new GlideRecord('incident');\ngs.info(now_GR.canWrite());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "Flag that indicates whether the user's roles permit writing of records in this\n                  table.<div class=\"p\">Valid values:<ul class=\"ul\" id=\"r_ScopedGlideRecordCanWrite__ul_vtm_pf2_t3b\">\n                    <li class=\"li\">true: Writing permitted</li>\n\n                    <li class=\"li\">false: Writing is not permitted</li>\n\n                  </ul>\n</div>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideRecordChooseWindow_Number_Number_Boolean",
                        "short_description": "Sets a range of rows to be returned by subsequent queries.",
                        "description": "",
                        "name": "chooseWindow(Number firstRow, Number lastRow, Boolean forceCount)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var now_GR = new GlideRecord('incident');\nnow_GR.orderBy('number');\nnow_GR.chooseWindow(2, 4);\nnow_GR.query();\nif (now_GR.next()) {\n  gs.info(now_GR.getValue('number') + ' is within window');\n//when forceCount = true now_GR.getRowCount() will be 3\n//when forceCount = false now_GR.getRowCount() will not be limited by window\n}",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "firstRow",
                                "type": "Number",
                                "description": "First row to include. Because the index starts at 0, a value of 0 returns the\n                first row."
                            },
                            {
                                "name": "lastRow",
                                "type": "Number",
                                "description": "Last row to include in the range. Because the index starts at 0, use the value\n                  <em class=\"ph i\">n</em> - 1, in which <em class=\"ph i\">n</em> equals the actual row number."
                            },
                            {
                                "name": "forceCount",
                                "type": "Boolean",
                                "description": "Optional. Flag that indicates whether to force the  <a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/c_GlideRecordScopedAPI#r_ScopedGlideRecordGetRowCount\" title=\"Retrieves the number of rows in the query result.\">getRowCount()</a> method to\n                calculate based on the window.<div class=\"p\">Possible values:<ul class=\"ul\" id=\"r_ScopedGlideRecordChooseWindow_Number_Number_Boolean__ul_og5_fzv_bkb\">\n                    <li class=\"li\">true: <span class=\"keyword apiname\">getRowCount()</span> returns the record count for the\n                      provided window.</li>\n\n                    <li class=\"li\">false: <span class=\"keyword apiname\">getRowCount()</span> returns all possible records.</li>\n\n                  </ul>\n</div>\n<p class=\"p\">Default: false</p>"
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideRecordDeleteMultiple",
                        "short_description": "Deletes multiple records that satisfy the query condition.",
                        "description": "<p>This method does not delete attachments.</p><p>Do not use <span class=\"keyword apiname\">deleteMultiple()</span> on tables with currency fields. Always\n        delete each record individually. Also, do not use this method with the\n          <span class=\"keyword apiname\">chooseWindow()</span> or <span class=\"keyword apiname\">setLimit()</span> methods when working\n        with large tables.</p>",
                        "name": "deleteMultiple()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var now_GR = new GlideRecord('incident');\nnow_GR.addQuery('active','false'); //to delete all inactive incidents\nnow_GR.query();\nnow_GR.deleteMultiple();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideRecordDeleteRecord",
                        "short_description": "Deletes the current record.",
                        "description": "",
                        "name": "deleteRecord()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var now_GR = new GlideRecord('incident');\n//to delete one record\nif (now_GR.get('99ebb4156fa831005be8883e6b3ee4b9'))\n    now_GR.deleteRecord();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "Flag that indicates whether the record was successfully deleted.<div class=\"p\">Valid\n                    values:<ul class=\"ul\" id=\"r_ScopedGlideRecordDeleteRecord__ul_hkn_5bj_s3b\">\n                    <li class=\"li\">true: Record was deleted.</li>\n\n                    <li class=\"li\">false: No record was found to delete.</li>\n\n                  </ul>\n</div>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideRecordGet_Object_Object",
                        "short_description": "Returns the specified record in an instantiated GlideRecord object.",
                        "description": "<p>This method accepts either one or two parameters. If only a single parameter is passed in,\n        the method first assumes it is the sys_id of the desired record. If not found, it then tries\n        match the value against the display value. If two parameters are passed in, the first is the\n        name of the column within the instantiated GlideRecord to search. The second is the value to\n        search for.</p><p>If multiple records are found, use <span class=\"keyword apiname\">next()</span> to access the additional\n        records.</p>",
                        "name": "get(Object name, Object value)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var grIncident = new GlideRecord('incident');\nvar returnValue = grIncident.get('99ebb4156fa831005be8883e6b3ee4b9');\ngs.info(returnValue); // logs true or false\ngs.info(grIncident.short_description); // logs Incident Short description",
                                "description": "This example shows how to obtain an incident record by passing in the sys_id."
                            },
                            {
                                "script": "var grIncident = new GlideRecord('incident');\nvar returnValue = grIncident.get('caller_id.name','Sylivia Wayland');\ngs.info(returnValue); // logs true or false\ngs.info(grIncident.getValue('number')); // logs Incident Number",
                                "description": "This example shows how to obtain an incident record by passing the field to search\n        (caller_id.name) and the value to match within that field."
                            }
                        ],
                        "params": [
                            {
                                "name": "name",
                                "type": "Object",
                                "description": "Optional. Name of the instantiated GlideRecord column to search for the\n                specified <span class=\"keyword parmname\">value</span> parameter. If only a single parameter is passed\n                in, the method assumes that this parameter is the sys_id or display value."
                            },
                            {
                                "name": "value",
                                "type": "Object",
                                "description": "Value to match."
                            }
                        ],
                        "return": {
                            "type": "Boolean",
                            "description": "Indicates whether the requested record was located:<ul class=\"ul\" id=\"r_ScopedGlideRecordGet_Object_Object__ul_ngs_clw_qfb\">\n                  <li class=\"li\">true: record was found</li>\n\n                  <li class=\"li\">false: record was not found</li>\n\n                </ul>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SGR-getAttribute_S",
                        "short_description": "Returns the dictionary attributes for the specified field.",
                        "description": "",
                        "name": "getAttribute(String fieldName)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "doit();\nfunction doit() {\n  var now_GR = new GlideRecord('sys_user');\n  now_GR.query(\"user_name\",\"admin\");\n  if (now_GR.next()) {\n    gs.info(\"we got one\");\n    gs.info(now_GR.location.getAttribute(\"tree_picker\"));\n  }\n}",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "fieldName",
                                "type": "String",
                                "description": "Field name for which to return the dictionary attributes"
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "Dictionary attributes"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SGR-getClassDisplayValue",
                        "short_description": "Returns the table's label.",
                        "description": "",
                        "name": "getClassDisplayValue()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "Table's label"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideRecordGetDisplayValue",
                        "short_description": "Retrieves the display value for the current record.",
                        "description": "",
                        "name": "getDisplayValue()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var now_GR = new GlideRecord('incident');\nnow_GR.get('sys_id','ef43c6d40a0a0b5700c77f9bf387afe3');\ngs.info(now_GR.getDisplayValue());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The display value for the current record."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SGR-getED",
                        "short_description": "Returns the element's descriptor.",
                        "description": "",
                        "name": "getED()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var grInc = new GlideRecord('incident');\ngrInc.get('sys_id','ef43c6d40a0a0b5700c77f9bf387afe3');\n\nvar field = grInc.getElement('priority');\nvar ed = field.getED();\n\nvar isEdge = ed.getLabel();\ngs.info(\"Label is - \" + isEdge);",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "GlideElementDescriptor",
                            "description": "Element's descriptor"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideRecordGetElement_String",
                        "short_description": "Retrieves the GlideElement object for the specified field.",
                        "description": "",
                        "name": "getElement(String columnName)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var elementName = 'short_description'; \nvar now_GR = new GlideRecord('incident'); \nnow_GR.initialize(); \nnow_GR.setValue(elementName, \"My DB is not working\");\nnow_GR.insert();\ngs.info(now_GR.getElement('short_description'));",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "columnName",
                                "type": "String",
                                "description": "Name of the column to get the element from."
                            }
                        ],
                        "return": {
                            "type": "GlideElement",
                            "description": "The GlideElement for the specified column of the current record."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SGR-getElements",
                        "short_description": "Returns an array of GlideElement objects. Each object describes a field in the current\n    GlideRecord.",
                        "description": "",
                        "name": "getElements()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var now_GR = new GlideRecord(\"question\");\nnow_GR.setLimit(1);\nnow_GR.query();\nif (now_GR.next()) {\n  var list = now_GR.getElements();\n  for (var i = 0; i &lt; list.length; ++i) {\n  gs.info(list[i].getName());\n  }\n}",
                                "description": "This example retrieves a record from the question table and shows the names of the elements\n        (fields) in the record."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Array",
                            "description": "Array of GlideElement objects. Each object describes a field in the current\n                GlideRecord."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideRecordGetEncodedQuery",
                        "short_description": "<span class=\"ph\">Retrieves the query condition of the current result set\n                  as an encoded query string. </span>",
                        "description": "<p>For details, see <span class=\"ph\" id=\"r_ScopedGlideRecordGetEncodedQuery__d96560e104\"><a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-platform-user-interface/page/use/using-lists/concept/c_EncodedQueryStrings.html\" target=\"_blank\">Encoded query\n                      strings</a></span>.</p>",
                        "name": "getEncodedQuery()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var now_GR = new GlideRecord('incident'); \nnow_GR.addQuery('active', true);\nnow_GR.addQuery('priority', 1); \nnow_GR.query(); \nvar encodedQuery = now_GR.getEncodedQuery(); \ngs.info(encodedQuery);",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "Â "
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SGR-getLabel",
                        "short_description": "Returns the field's label.",
                        "description": "",
                        "name": "getLabel()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "template.print(\"Summary of Requested items:\\n\");  \nvar now_GR = new GlideRecord(\"sc_req_item\");\nnow_GR.addQuery(\"request\", current.sysapproval);\nnow_GR.query();\nwhile(now_GR.next()) {\nvar nicePrice = now_GR.price.toString();\n  if (nicePrice != '') {\n    nicePrice = parseFloat(nicePrice);\n    nicePrice = nicePrice.toFixed(2);\n  }\n  template.print(now_GR.number + \":  \" + now_GR.quantity + \" X \" + now_GR.cat_item.getDisplayValue() \n    + \" at $\" + nicePrice + \" each \\n\");\n  template.print(\"    Options:\\n\");\n  for (key in now_GR.variables) {\n  var now_V = now_GR.variables[key];\n    if(now_V.getGlideObject().getQuestion().getLabel() != '') {\n      template.space(4);\n      template.print('     ' +  now_V.getGlideObject().getQuestion().getLabel() + \" = \" \n        + now_V.getDisplayValue() + \"\\n\");  \n    }\n  }\n}",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "Field's label"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideRecordGetLastErrorMessage",
                        "short_description": "Retrieves the last error message. If there is no last error message, null is returned.",
                        "description": "",
                        "name": "getLastErrorMessage()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "// Setup a data policy where short_description field in incident is mandatory\nvar now_GR = new GlideRecord('incident');\nnow_GR.insert(); // insert without data in mandatory field\nvar errormessage = now_GR.getLastErrorMessage(); \ngs.info(errormessage);",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The last error message as a string."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideRecordGetLink_Boolean",
                        "short_description": "Retrieves the link to the current record.",
                        "description": "",
                        "name": "getLink(Boolean noStack)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var now_GR = new GlideRecord('incident');\nnow_GR.addActiveQuery();\nnow_GR.addQuery(\"priority\", 1);\nnow_GR.query();\nnow_GR.next();\ngs.info(gs.getProperty('glide.servlet.uri') + now_GR.getLink(false));",
                                "description": "This example queries all Incident records with a priority of \"1\" and writes the servlet URI\n        and the current record's link to the system log."
                            }
                        ],
                        "params": [
                            {
                                "name": "noStack",
                                "type": "Boolean",
                                "description": "Flag indicating whether to append the sysparm_stack parameter to the returned\n                link. This parameter specifies the page to visit after closing the current link.\n                  <div class=\"p\">Valid values: <ul class=\"ul\" id=\"r_ScopedGlideRecordGetLink_Boolean__ul_fsf_wpz_1nb\">\n                    <li class=\"li\">true: Do not attach the sysparm_stack parameter.</li>\n\n                    <li class=\"li\">false: Attach the sysparm_stack parameter.</li>\n\n                  </ul>\n</div>\nIf true, the sysparm_stack parameter is not appended to the link."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "Link to the current record."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideRecordGetRecordClassName",
                        "short_description": "Retrieves the class name for the current record.",
                        "description": "",
                        "name": "getRecordClassName()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var now_GR = new GlideRecord('incident'); \nvar recordClassName = now_GR.getRecordClassName(); \ngs.info(recordClassName);",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The class name."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideRecordGetRowCount",
                        "short_description": "Retrieves the number of rows in the query result.",
                        "description": "",
                        "name": "getRowCount()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var now_GR = new GlideRecord('incident');\nnow_GR.query();\ngs.info(\"Records in incident table: \" + now_GR.getRowCount());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Number",
                            "description": "Number of rows."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideRecordGetTableName",
                        "short_description": "Retrieves the name of the table associated with the GlideRecord.",
                        "description": "",
                        "name": "getTableName()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var now_GR = new GlideRecord('incident');\ngs.info(now_GR.getTableName());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The table name"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideRecordGetUniqueValue",
                        "short_description": "Gets the primary key of the record, which is usually the sys_id unless otherwise\n    specified.",
                        "description": "",
                        "name": "getUniqueValue()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var now_GR = new GlideRecord('kb_knowledge');\nnow_GR.query();\nnow_GR.next();\nvar uniqueid = now_GR.getUniqueValue();\ngs.info(uniqueid);",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The unique primary key as a String, or null if the key is null."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideRecordGetValue_String",
                        "short_description": "Retrieves the string value of an underlying element in a field.",
                        "description": "",
                        "name": "getValue(String name)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var now_GR = new GlideRecord('incident'); \nnow_GR.orderBy('number');\nnow_GR.query('active','true'); \nnow_GR.next() ; \ngs.info(now_GR.getValue('number'));",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "name",
                                "type": "String",
                                "description": "The name of the field to get the value from."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "The string value of the underlying element. Returns null if the field is empty\n                or the field does not exist. Boolean values return as <kbd class=\"ph userinput\">\"0\"</kbd> and\n                  <kbd class=\"ph userinput\">\"1\"</kbd> string values instead of false and true."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideRecordHasNext",
                        "short_description": "Determines if there are any more records in the GlideRecord object.",
                        "description": "",
                        "name": "hasNext()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var rec = new GlideRecord('incident'); \nrec.query(); \nif (rec.hasNext()) { \n  gs.info(\"Table is not empty\"); \n}",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "True if there are more records in the query result set."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideRecordInitialize",
                        "short_description": "Creates an empty record suitable for population before an insert.",
                        "description": "",
                        "name": "initialize()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var grIncident = new GlideRecord('incident');\ngrIncident.initialize();\ngrIncident.setValue('short_description', 'New Incident');\ngrIncident.setValue('description', 'Incident description');\ngrIncident.insert();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideRecordInsert",
                        "short_description": "Inserts a new record using the field values that have been set for the current record.",
                        "description": "",
                        "name": "insert()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var now_GR = new GlideRecord('incident');\nnow_GR.initialize();\nnow_GR.setValue('name', 'New Incident');\nnow_GR.setValue('description', 'Incident description');\nnow_GR.insert();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "Unique ID of the inserted record, or null if the record is not\n                inserted."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideRecordIsActionAborted",
                        "short_description": "Checks to see if the current database action is to be aborted.",
                        "description": "<p><span class=\"keyword apiname\">isActionAborted()</span> is initialized (set to false) for new threads and by\n        the <span class=\"keyword apiname\">next()</span> method.</p>",
                        "name": "isActionAborted()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var now_GR = new GlideRecord('incident');\n \ngs.info(now_GR.isActionAborted());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "True if the current database action is to be aborted"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SGR-isEncodedQueryValid_S",
                        "short_description": "Verifies whether the specified encoded query is valid.",
                        "description": "",
                        "name": "isEncodedQueryValid(String query)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var now_GR = new GlideRecord('incident_sla');\nvar isValidQuery = now_GR.isEncodedQueryValid('inc_impact=1^taskslatable_active=true');\nif (isValidQuery) {\n       now_GR.addEncodedQuery('inc_impact=1^taskslatable_active=true');\n       now_GR.query();\n       .\n       .\n       .\n}",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "query",
                                "type": "String",
                                "description": "Encoded query to validate."
                            }
                        ],
                        "return": {
                            "type": "Boolean",
                            "description": "Indicates whether the specified encoded query is valid.<ul class=\"ul\" id=\"SGR-isEncodedQueryValid_S__ul_lsw_qw4_2gb\">\n                  <li class=\"li\">true: passed-in encoded query is valid</li>\n\n                  <li class=\"li\">false: passed-in encoded query is not valid</li>\n\n                </ul>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideRecordIsNewRecord",
                        "short_description": "Checks if the current record is a new record that has not yet been inserted into the\n    database.",
                        "description": "",
                        "name": "isNewRecord()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var now_GR = new GlideRecord(\"x_app_table\"); \nnow_GR.newRecord(); // create a new record and populate it with default values\ngs.info(now_GR.isNewRecord());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "True if the record is new and has not been inserted into the database."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideRecordIsValid",
                        "short_description": "Determines if the current table is valid or if the record was successfully\n    retrieved.",
                        "description": "",
                        "name": "isValid()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var comment_GR = new GlideRecord('cf_comment');\nvar commentId = '99ebb4156fa831005be8883e6b3ee4b9';\ncomment_GR.get(commentId);\ngs.info(comment_GR.isValid());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "Flag that indicates if the table is valid or if the record was successfully\n                  retrieved.<div class=\"p\">Possible values:<ul class=\"ul\" id=\"r_ScopedGlideRecordIsValid__ul_rr1_3m4_pnb\">\n                    <li class=\"li\">true: Table is valid or the record was successfully retrieved.</li>\n\n                    <li class=\"li\">false: Table is invalid or the record was not successfully retrieved.</li>\n\n                  </ul>\n</div>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideRecordIsValidField",
                        "short_description": "Determines if the specified field is defined in the current table.",
                        "description": "",
                        "name": "isValidField(String columnName)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var now_GR = new GlideRecord('incident'); \nnow_GR.initialize(); \ngs.info(now_GR.isValidField(\"short_description\"));",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "columnName",
                                "type": "String",
                                "description": "The name of the field."
                            }
                        ],
                        "return": {
                            "type": "Boolean",
                            "description": "True if the field is defined for the current table."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideRecordIsValidRecord",
                        "short_description": "Determines if a record was actually returned by the query/get record\n    operation.",
                        "description": "",
                        "name": "isValidRecord()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var rec = new GlideRecord('incident');\nrec.query();\nwhile (rec.next()) { \n  gs.info(rec.number + ' exists');\n}\ngs.info(rec.isValidRecord());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "Flag that indicates whether a record was actually returned by the query/get\n                  operation.<div class=\"p\">Valid values:<ul class=\"ul\" id=\"r_ScopedGlideRecordIsValidRecord__ul_xzx_jnh_s3b\">\n                    <li class=\"li\">true: Record returned by query/get operation.</li>\n\n                    <li class=\"li\">false: End of record set, no record returned. </li>\n\n                  </ul>\n</div>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideRecordNewRecord",
                        "short_description": "Creates a new GlideRecord record, sets the default values for the fields, and assigns a\n    unique ID to the record.",
                        "description": "",
                        "name": "newRecord()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var now_GR = new GlideRecord(\"x_app_table\"); \nnow_GR.newRecord(); \ngs.info(now_GR.isNewRecord());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideRecordNext",
                        "short_description": "Moves to the next record in the GlideRecord object.",
                        "description": "<p><span class=\"notetitle\">Note:</span> This method fails if there is a field in the table called \"next\". If that is the case,\n        use the method <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=SGR-_next&amp;v=quebec\" target=\"_blank\">_next()</a>.</p>",
                        "name": "next()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var rec = new GlideRecord('incident');\nrec.query();\nwhile (rec.next()) {\n gs.info(rec.getValue('number') + ' exists');\n}",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "Flag that indicates if there is a \"next\" record in the GlideRecord. <div class=\"p\">Valid\n                    values:<ul class=\"ul\" id=\"r_ScopedGlideRecordNext__ul_anq_km4_s3b\">\n                    <li class=\"li\">true: Move to the next record was successful.</li>\n\n                    <li class=\"li\">false: No more records in the result set.</li>\n\n                  </ul>\n</div>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideRecordOperation",
                        "short_description": "Retrieves the current operation being performed, such as insert, update, or delete.",
                        "description": "",
                        "name": "operation()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "//Commonly used in a business rule, returns insert if the current operation is insert\ngs.info(\"current operation \" + current.operation());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The current operation."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideRecordOrderBy_String",
                        "short_description": "Specifies an orderBy column.",
                        "description": "<p>Call this method more than once to order by multiple columns. Results are arranged in\n        ascending order. To arrange records in descending order, see <a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/c_GlideRecordScopedAPI#r_ScopedGlideRecordOrderByDesc_String\" title=\"Specifies a descending orderBy column.\">Scoped GlideRecord - orderByDesc(String name)</a>.</p>",
                        "name": "orderBy(String name)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var queryString = \"priority=2\";\nvar now_GR = new GlideRecord('incident');\nnow_GR.orderBy('short_description'); // Ascending Order\nnow_GR.addEncodedQuery(queryString);\nnow_GR.query();\nwhile (now_GR.next()) {\n  gs.info(now_GR.getValue('short_description'));\n}",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "name",
                                "type": "String",
                                "description": "Column name to use to order the records in this GlideRecord object."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideRecordOrderByDesc_String",
                        "short_description": "Specifies a descending orderBy column.",
                        "description": "<p>Call this method more than once to order by multiple columns. Results are arranged in\n        descending order. To arrange records in ascending order, see <a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/c_GlideRecordScopedAPI#r_ScopedGlideRecordOrderBy_String\" title=\"Specifies an orderBy column.\">Scoped GlideRecord - orderBy(String name)</a>.</p>",
                        "name": "orderByDesc(String name)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var queryString = \"priority=2\";\nvar now_GR = new GlideRecord('incident');\nnow_GR.orderByDesc('short_description'); //Descending Order\nnow_GR.addEncodedQuery(queryString);\nnow_GR.query();\nwhile (now_GR.next()) {\n  gs.info(now_GR.getValue('short_description'));\n}",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "name",
                                "type": "String",
                                "description": "Column name to use to order the records in a GlideRecord object."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideRecordQuery_Object_Object",
                        "short_description": "Runs the query against the table based on the filters specified by various query\n    methods such as <span class=\"keyword apiname\">addQuery</span>, <span class=\"keyword apiname\">addEncodedQuery</span>, and so on.",
                        "description": "<p>This method queries the GlideRecord table as well as any references of the table. Usually\n        this is performed without arguments. If name/value pair is specified, \"name=value\" condition\n        is added to the query. <div class=\"note note\"><span class=\"notetitle\">Note:</span> This method fails if there is a field in the table called\n          \"query\". If that is the case, use the method <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=SGR-_query_O_O&amp;v=quebec\" target=\"_blank\">_query()</a>.</div></p>",
                        "name": "query(Object field, Object value)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var rec = new GlideRecord('incident');\nrec.query();\nwhile (rec.next()) {\n  gs.info(rec.getValue('number') + ' exists');\n}",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "field",
                                "type": "Object",
                                "description": "Column name to query on."
                            },
                            {
                                "name": "value",
                                "type": "Object",
                                "description": "Value to query for."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideRecordSetAbortAction_Boolean",
                        "short_description": "Sets a flag to indicate if the next database action (insert, update, delete) is to be\n    aborted. This is often used in business rules.",
                        "description": "<p>Use in an onBefore business rule\n        to prevent the database action from being done. The business rule continues to run after\n          <span class=\"keyword apiname\">setAbortAction()</span> is called. Calling <span class=\"keyword apiname\">setAbortAction()</span>\n        does not stop subsequent business rules from executing. Calling this method only prevents\n        the database action from occurring.</p>",
                        "name": "setAbortAction(Boolean b)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "// Often used in business rule to check whether the current operation should be aborted.\nif (current.size &gt; 16) {\n  current.setAbortAction(true);\n}",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "b",
                                "type": "Boolean",
                                "description": "True to abort the next action. False if the action is to be allowed."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideRecordSetLimit_Number",
                        "short_description": "Sets the limit for number of records are fetched by the GlideRecord query.",
                        "description": "",
                        "name": "setLimit(Number maxNumRecords)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var now_GR = new GlideRecord('incident');\nnow_GR.orderByDesc('sys_created_on');\nnow_GR.setLimit(10);\nnow_GR.query(); // this retrieves latest 10 incident records created",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "maxNumRecords",
                                "type": "Number",
                                "description": "The maximum number of records to fetch."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideRecordSetNewGuidValue_String",
                        "short_description": "Sets the sys_id value for the current record.",
                        "description": "",
                        "name": "setNewGuidValue(String guid)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var now_GR = new GlideRecord('incident');\nnow_GR.setValue('short_description', 'The third floor printer is broken');\nnow_GR.setNewGuidValue('eb4636ca6f6d31005be8883e6b3ee333');\nnow_GR.insert();\ngs.info(now_GR.getValue('sys_id'));",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "guid",
                                "type": "String",
                                "description": "GUID to assign to the current record."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideRecordSetValue_String_Object",
                        "short_description": "Sets the value of the field with the specified name to the specified value.",
                        "description": "<p>Normally the script does a now_GR.category = value. However, if the element name is itself a\n        variable then now_GR.setValue(elementName, value) can be used. When setting a value, ensure the\n        data type of the field matches the data type of the value you enter.</p>",
                        "name": "setValue(String name, Object value)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var elementName = 'short_description'; \nvar now_GR = new GlideRecord('incident'); \nnow_GR.initialize(); \nnow_GR.setValue(elementName, \"My DB is not working\");\nnow_GR.insert();",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "name",
                                "type": "String",
                                "description": "Name of the field."
                            },
                            {
                                "name": "value",
                                "type": "Object",
                                "description": "The value to assign to the field."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideRecordSetWorkflow_Boolean",
                        "short_description": "Enables or disables the running of business rules, script engines, and\n    audit.",
                        "description": "",
                        "name": "setWorkflow(Boolean enable)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "//Enable business rules, scripts engines for x_app_table\nvar now_GR = new GlideRecord(\"x_app_table\"); \nnow_GR.setWorkflow(true);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "enable",
                                "type": "Boolean",
                                "description": "If true (default), enables business rules. If false, disables business\n                rules."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideRecordUpdate_String",
                        "short_description": "Updates the GlideRecord with any changes that have been made. If the record does not\n    already exist, it is inserted.",
                        "description": "",
                        "name": "update(String reason)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var now_GR = new GlideRecord('incident');\nnow_GR.get('99ebb4156fa831005be8883e6b3ee4b9');\nnow_GR.setValue('short_description', 'Update the short description');\nnow_GR.update();\ngs.info(now_GR.getElement('short_description'));",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "reason",
                                "type": "String",
                                "description": "Optional. Reason for the update. The reason appears in the audit\n                record."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "Sys_id of the new or updated record. Returns null if the update fails."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideRecordUpdateMultiple",
                        "short_description": "<span class=\"ph\">Updates each GlideRecord in a stated query with a specified\n          set of changes.</span>",
                        "description": "<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> When using <span class=\"keyword apiname\">updateMultiple()</span> before calling the GlideRecord.next()\n          method, directly setting the field (<samp class=\"ph codeph\">gr.&lt;field_name&gt; = 4</samp>) results in\n          all records in the table being updated instead of just the records returned by the query.\n          When changing field values, use <span class=\"keyword apiname\">setValue()</span> instead of directly setting\n          the field (<samp class=\"ph codeph\">field = something</samp>). </div></p><p><div class=\"note note\"><span class=\"notetitle\">Note:</span> Do not use this method with the <span class=\"keyword apiname\">chooseWindow()</span> or\n            <span class=\"keyword apiname\">setLimit()</span> methods when working with large tables.</div></p><p>This method sets new values and does not clear existing values.</p>",
                        "name": "updateMultiple()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var now_GR = new GlideRecord('incident');\nnow_GR.addQuery('active', true);\nnow_GR.setValue('state',  4);\nnow_GR.updateMultiple();",
                                "description": "This example shows how to update the state of all active incidents to 4 - \"Awaiting User\n        Info\"."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SGR-_next",
                        "short_description": "Moves to the next record in the GlideRecord. Provides the same functionality as\n      <span class=\"keyword apiname\">next()</span>, use this method if the GlideRecord has a column named\n    next.",
                        "description": "",
                        "name": "_next()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var rec = new GlideRecord('sys_template');\nrec.query();\nwhile (rec._next()) {\n  gs.info(rec.getValue('number') + ' exists');\n}",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "Flag that indicates whether there are more records in the query set.<div class=\"p\">Possible\n                    values:<ul class=\"ul\" id=\"SGR-_next__ul_nzg_xkm_knb\">\n                    <li class=\"li\">true: More records in the query set.</li>\n\n                    <li class=\"li\">false: No more records in the query set.</li>\n\n                  </ul>\n</div>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SGR-_query_O_O",
                        "short_description": "Runs the query against the table based on the filters specified by the various query\n    methods such as <span class=\"keyword apiname\">addQuery()</span> and <span class=\"keyword apiname\">addEncodedQuery()</span>. Use this\n    method on tables where there is a column named query.",
                        "description": "<p>This method queries the GlideRecord table as well as any references of the table.\n        Typically this method is called without arguments. If a name/value pair is specified, the\n        \"name=value\" condition is added to the query.</p>",
                        "name": "_query(Object field, Object value)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var rec = new GlideRecord('sys_app_module');\nrec._query();\nwhile (rec.next()) {\n  gs.info(rec.getValue('number') + ' exists');\n}",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "name",
                                "type": "Object",
                                "description": "Column name on which to query."
                            },
                            {
                                "name": "value",
                                "type": "Object",
                                "description": "Value for which to query."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "",
                "short_description": "The scoped GlideSchedule API provides methods for performing operations on GlideSchedule\n  objects, such as adding new schedule segments to a schedule, determining if a datetime is within\n  the schedule, or setting the schedule timezone.",
                "identifier": "c_GlideScheduleScopedAPI",
                "name": "GlideSchedule",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "r_ScopedGlideSchedule",
                        "short_description": "Instantiates an empty GlideSchedule object.",
                        "description": "",
                        "name": "GlideSchedule()",
                        "type": "Constructor",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideScheduleGlideSchedule_String_String",
                        "short_description": "Instantiates a GlideSchedule object and loads the schedule information. If a timezone\n    is not specified or is nil, the current session timezone is used.",
                        "description": "",
                        "name": "GlideSchedule(String sysID, String timeZone)",
                        "type": "Constructor",
                        "examples": [
                            {
                                "script": "var schedule = new GlideSchedule('090eecae0a0a0b260077e1dfa71da828', 'US/Pacific');",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "sysID",
                                "type": "String",
                                "description": "The system ID for the schedule."
                            },
                            {
                                "name": "timeZone",
                                "type": "String",
                                "description": "The time zone. (Optional)"
                            }
                        ],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideScheduleAdd_GlideDateTime_GlideDuration",
                        "short_description": "Adds a new schedule segment to the current schedule.",
                        "description": "",
                        "name": "add(GlideDateTime startDate, GlideDuration offSet)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var startDate = new GlideDateTime('2014-01-02');\nvar days = 2;\nvar dur = new GlideDuration(60 * 60 * 24 * 1000 * days);\nvar schedule = new GlideSchedule();\nvar end = schedule.add(startDate, dur);\ngs.info(end);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "startDate",
                                "type": "GlideDateTime",
                                "description": "The starting date of the new schedule segment."
                            },
                            {
                                "name": "offSet",
                                "type": "GlideDuration",
                                "description": "The time offset of the new schedule segment."
                            }
                        ],
                        "return": {
                            "type": "GlideDateTime",
                            "description": "The schedule updated with the new schedule segment."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideScheduleDuration_GlideDateTime_GlideDateTime",
                        "short_description": "Determines the elapsed time in the schedule between two date time values using the\n    timezone of the schedule or, if that is not specified, the timezone of the session.",
                        "description": "",
                        "name": "duration(GlideDateTime startDate, GlideDateTime endDate)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var startDate = new GlideDateTime('2014-10-16 02:00:00');\nvar endDate = new GlideDateTime('2014-10-18 04:00:00');\nvar schedule = new GlideSchedule();\n \nschedule.load('090eecae0a0a0b260077e1dfa71da828'); // loads \"8-5 weekdays excluding holidays\" schedule\nvar duration = schedule.duration(startDate, endDate);\ngs.info(duration.getDurationValue()); // gets the elapsed time in schedule",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "startDate",
                                "type": "GlideDateTime",
                                "description": "The starting datetime."
                            },
                            {
                                "name": "endDate",
                                "type": "GlideDateTime",
                                "description": "The ending datetime."
                            }
                        ],
                        "return": {
                            "type": "GlideDuration",
                            "description": "The difference between the starting and ending datetime."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideScheduleGetName",
                        "short_description": "Retrieves the schedule name.",
                        "description": "",
                        "name": "getName()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "sys_id ='04e664654a36232701a2247dcd8fc4cf'; // sys_id for \"Application\" schedule record\nvar sched = new GlideSchedule(sys_id);\ngs.info(sched.getName());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The name of the current schedule."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideScheduleIsInSchedule_GlideDateTime",
                        "short_description": "Determines if the specified date and time is within the current schedule.",
                        "description": "",
                        "name": "isInSchedule(GlideDateTime time)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var glide = new GlideRecord('cmn_schedule');\nglide.addQuery('type', 'blackout');\nglide.query();\nif (glide.next()) {\n   var sched = new GlideSchedule(glide.sys_id);\n   var date = new GlideDateTime();\n   date.setDisplayValue(\"2007-09-18 12:00:00\");\n   if (sched.isInSchedule(date)) \n      gs.info(\"Is in the schedule\");\n   else\n      gs.info(\"Is NOT in the schedule\");\n}",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "time",
                                "type": "GlideDateTime",
                                "description": "Date and time value to check."
                            }
                        ],
                        "return": {
                            "type": "Boolean",
                            "description": "Flag that indicates whether the specified date and time is within the\n                  schedule.<div class=\"p\">Valid values:<ul class=\"ul\" id=\"r_ScopedGlideScheduleIsInSchedule_GlideDateTime__ul_ujh_rxv_p4b\">\n                    <li class=\"li\">true: Date and time is within the schedule.</li>\n\n                    <li class=\"li\">false: Date and time are outside of the schedule.</li>\n\n                  </ul>\n</div>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideScheduleIsValid",
                        "short_description": "Determines if the current schedule is valid. A schedule is valid if it has at least one\n    schedule span.",
                        "description": "",
                        "name": "isValid()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var glide = new GlideRecord('cmn_schedule');\nglide.addQuery('type', 'blackout');\nglide.query();\nif (glide.next()) {\n   var sched = new GlideSchedule(glide.sys_id);\n   var date = new GlideDateTime();\n   date.setDisplayValue(\"2007-09-18 12:00:00\");\n   if (sched.isValid()) \n      gs.info(\"Is valid\");\n \n   else\n      gs.info(\"Is not valid\");\n}",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "True if the schedule is valid."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideScheduleLoad_String_String_String",
                        "short_description": "Loads a schedule with the schedule information.",
                        "description": "",
                        "name": "load(String sysID, String timeZone, String excludeSpanID)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var x = new GlideSchedule();\nx.load('08fcd0830a0a0b2600079f56b1adb9ae');",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "sysID",
                                "type": "String",
                                "description": "The system ID of the schedule."
                            },
                            {
                                "name": "timeZone",
                                "type": "String",
                                "description": "(Optional) The timezone. If a timezone is not specified, or is nil, the current\n                session timezone is used for the schedule."
                            },
                            {
                                "name": "excludeSpanID",
                                "type": "String",
                                "description": "Any span to exclude."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideScheduleSetTimeZone_String",
                        "short_description": "Sets the timezone for the current schedule.",
                        "description": "",
                        "name": "setTimeZone(String timeZone)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var schedule = new GlideSchedule();\nschedule.setTimeZone('US/Pacific');",
                                "description": "This example sets the timezone for the schedule to US/Pacific."
                            }
                        ],
                        "params": [
                            {
                                "name": "timeZone",
                                "type": "String",
                                "description": "The timezone."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideScheduleWhenNext_GlideDateTime_String",
                        "short_description": "Determines how much time (in milliseconds) until start time of the next schedule\n    item.",
                        "description": "<p>This function is intended to be called when the GlideSchedule object (cmn_schedule table)\n        is not currently in the schedule window. The whenNext() call returns duration (in ms) until\n        the GlideSchedule object is within the schedule. This function does not return a meaningful\n        value if called when the GlideSchedule object is within the schedule.</p>",
                        "name": "whenNext(GlideDateTime time, String timeZone)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var startDate = new GlideDateTime('2014-10-25 08:00:00');\nvar glideSchedule = new GlideSchedule('08fcd0830a0a0b2600079f56b1adb9ae', 'UTC');\ngs.info(glideSchedule.whenNext(startDate));",
                                "description": ""
                            },
                            {
                                "script": "testScript(); \nfunction testScript() { \nvar now = new GlideDateTime(); //current date and time\nvar sched = new GlideSchedule(\"&lt;sys_id&gt;\"); // Use a cmn_schedule sys_id \nif (sched.isInSchedule(now)){ \ngs.info('We are in an active schedule window so whenNext() is not helpful'); \n} else{  \ngs.info('Not currently in schedule so call whenNext()'); \nvar msUntilNext = sched.whenNext(new GlideDateTime(), 'US/Pacific'); \ngs.info('Next schedule starts in '+msUntilNext+' milliseconds'); \n} \n}\n\\\\ Output [schedule inactive)]:\n\\\\ *** Script: Not currently in schedule so call whenNext() \n\\\\ *** Script: Next schedule starts in -1 milliseconds",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "time",
                                "type": "GlideDateTime",
                                "description": "Time to be evaluated"
                            },
                            {
                                "name": "timeZone",
                                "type": "String",
                                "description": "Timezone"
                            }
                        ],
                        "return": {
                            "type": "Number",
                            "description": "Number of milliseconds until the start time of the next schedule item. Returns\n                -1 if never."
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "The GlideScopedEvaluator API evaluates records with script fields defined. The scope of the\n   script is defined by the scope of the record.",
                "short_description": "The GlideScopedEvaluator API allows you to evaluate scripts in a GlideRecord field from\n  both scoped and global server scripts.",
                "identifier": "c_GlideEvaluatorScopedAPI",
                "name": "GlideScopedEvaluator",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "r_ScopedGlideEvaluatorGlideScopedEvaluator",
                        "short_description": "Instantiates a GlideScopedEvaluator object.",
                        "description": "",
                        "name": "GlideScopedEvaluator()",
                        "type": "Constructor",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideEvaluatorEvaluateScript_GlideRecord_String_Object",
                        "short_description": "Evaluates a script from a GlideRecord field.",
                        "description": "",
                        "name": "evaluateScript(GlideRecord grObj, String scriptField, Object variables)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "///For this example, we created a table: \"x_app_table\" with two columns: \"short_description\", \"test_script\"\n// \"test_script\" will store the script to be evaluated by GlideScopedEvaluator.\nvar now_GR = new GlideRecord('x_app_table');\nnow_GR.short_description = 'Testing GlideScopedEvaluator';\nnow_GR.test_script = \"gs.getUser().getName() + ' says ' + greeting; \";\nnow_GR.insert();\n\n//setup variables to be used by the script\nvar vars = {'greeting' : 'hello'};\n\n//Evaluate the script from the field\nvar evaluator = new GlideScopedEvaluator();\ngs.info(evaluator.evaluateScript(now_GR, 'test_script', vars));\n\n// Now retrieve the result\nevaluator.evaluateScript(gr, 'u_test_script', null);\ngs.info(evaluator.getVariable('result'));",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "grObj",
                                "type": "GlideRecord",
                                "description": "The GlideRecord containing a script expression."
                            },
                            {
                                "name": "scriptField",
                                "type": "String",
                                "description": "(Optional) The name of the field containing the script expression."
                            },
                            {
                                "name": "variables",
                                "type": "Object",
                                "description": "(Optional) A map of variables with name-value pairs. These variables are\n                available to the script during execution of this method."
                            }
                        ],
                        "return": {
                            "type": "Object",
                            "description": "The result of the script execution."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideEvaluatorGetVariable_String",
                        "short_description": "Returns a variable from a GlideScopedEvaluator object.",
                        "description": "",
                        "name": "getVariable(String name)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "//setting up a record that contains the script to be executed.\nvar now_GR = new GlideRecord('u_global_table'); \nnow_GR.u_short_description = 'Calculate Addition';  \nnow_GR.u_test_script = \"result = x + y\"; \nnow_GR.insert(); \n \nvar evaluator = new GlideScopedEvaluator();\nevaluator.putVariable('x', 100);\nevaluator.putVariable('y', 200);\nevaluator.putVariable('result', null);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "name",
                                "type": "String",
                                "description": "The name of the variable."
                            }
                        ],
                        "return": {
                            "type": "Object",
                            "description": "The value of the specified variable."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideEvaluatorPutVariable_String_Object",
                        "short_description": "Puts a variable into the GlideScopedEvaluator object. These variables are available to\n    the script that this GlideScopedEvaluator object runs.",
                        "description": "",
                        "name": "putVariable(String name, Object value)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "//setting up a record that contains the script to be executed.\nvar now_GR = new GlideRecord('u_global_table'); \nnow_GR.u_short_description = 'Calculate Addition';  \nnow_GR.u_test_script = \"result = x + y\"; \nnow_GR.insert(); \n \nvar evaluator = new GlideScopedEvaluator();\nevaluator.putVariable('x', 100);\nevaluator.putVariable('y', 200);\nevaluator.putVariable('result', null);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "name",
                                "type": "String",
                                "description": "The name of the variable."
                            },
                            {
                                "name": "value",
                                "type": "Object",
                                "description": "The value of the variable."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "See the scoped GlideSysAttachment API for methods that return a GlideScriptableInputStream\n   object. The scoped GlideTextReader constructor requires a GlideScriptableInputStream object as an\n   input parameter.",
                "short_description": "A GlideScriptableInputStream object cannot be instantiated directly, but is used as an\n  opaque object which is used to connect an input stream from\n   <span class=\"keyword apiname\">GlideSysAttachment.getContentStream()</span> with other streaming APIs, such as\n  GlideTextReader, GlideDigest, and XMLDocument2.",
                "identifier": "c_GlideScriptableInpStrmScopedAPI",
                "name": "GlideScriptableInputStream",
                "type": "Class",
                "methods": []
            },
            {
                "description": "Processors provide a customizable URL endpoint that can execute arbitrary server-side\n   JavaScript code and produce output such as TEXT, JSON, or HTML. The\n    <span class=\"keyword apiname\">ScopedGlideScriptedProcessor</span> APIs are used in processor scripts to access the\n   the processor (servlet) capabilities. There are no constructors for the\n    <span class=\"keyword apiname\">ScopedGlideScriptedProcessor</span> APIs. The methods are called using the global\n    variable<span class=\"keyword apiname\"> g_processor</span>.<br/><br/>A useful global variable, <span class=\"keyword apiname\">g_target</span>, is available in processor scripts. It\n   contains the table name extracted from the URL.<br/><br/>The URL to a processor has the format: <span class=\"ph filepath\">https://&lt;instance\n    name.servicenow.com&gt;/&lt;path endpoint&gt;.do?&lt;parameter endpoint&gt;=&lt;value&gt;</span> where\n   the path endpoint and parameter endpoint are defined on the processor form.",
                "short_description": "<span class=\"ph\">ServiceNow</span>\n  processors are equivalent to Java servlets.",
                "identifier": "c_GlideScriptedProcessorScopedAPI",
                "name": "GlideScriptedProcessor",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "r_ScopedGlideScriptedProcessorRedirect_String",
                        "short_description": "Redirects to the specified URL.",
                        "description": "",
                        "name": "redirect(String url)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "//Do whatever processing you need and redirect to the homepage\ng_processor.redirect(\"/navpage.do\")",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "url",
                                "type": "String",
                                "description": "Destination URL"
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideScriptedProcessorWriteJSON_Object",
                        "short_description": "Encodes an object as a JSON string and writes it to the current URL.",
                        "description": "",
                        "name": "writeJSON(Object o)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var map = {\"key1\":\"value1\",\"key2\":\"value2\"};\ng_processor.writeJSON(map);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "o",
                                "type": "Object",
                                "description": "The object to encode to a JSON string."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideScriptedProcessorWriteOutput_String_String",
                        "short_description": "Writes the specified string to the current URL in the specified\n    character-encoding.",
                        "description": "",
                        "name": "writeOutput(String contentType, String s)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var name = g_request.getParameter(\"name\");\ng_processor.writeOutput(\"text/plain\", \"Hello \" + name);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "contentType",
                                "type": "String",
                                "description": "Sets the content type of the response sent to the client, if the response has\n                not been committed, and may include a character-encoding specification."
                            },
                            {
                                "name": "s",
                                "type": "String",
                                "description": "The string to write."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideScriptedProcessorWriteOutput_String",
                        "short_description": "Writes the specified string to the current URL.",
                        "description": "",
                        "name": "writeOutput(String s)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var name = g_request.getParameter(\"name\");\ng_processor.writeOutput(\"Hello \" + name);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "s",
                                "type": "String",
                                "description": "The string to write."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "There is no constructor for this class. Methods are accessed through the static object\n   GlideSecureRandomUtil. The GlideSecureRandomUtil class is available in both global and scoped\n   applications.",
                "short_description": "The scoped GlideSecureRandomUtil API provides methods for generating integers, long\n  values, and strings.",
                "identifier": "c_GlideSecurityUtilsScopedAPIs",
                "name": "GlideSecureRandomUtil",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "r_getSecureRandomInt",
                        "short_description": "Generates a pseudo-random integer.",
                        "description": "",
                        "name": "getSecureRandomInt()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "gs.info(GlideSecureRandomUtil.getSecureRandomInt());\n",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Number",
                            "description": "The pseudo-randomly generated integer."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_GlideSecureRandomUtilgetSecureRandomIntBound",
                        "short_description": "Generates a pseudo-random integer between 0 (inclusive) and the bound (exclusive) value\n    that you pass into the method.",
                        "description": "",
                        "name": "getSecureRandomIntBound(Number bound)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "gs.info(GlideSecureRandomUtil.getSecureRandomIntBound(100));",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "bound",
                                "type": "Number",
                                "description": "The bound value."
                            }
                        ],
                        "return": {
                            "type": "Number",
                            "description": "The pseudo-randomly generated integer."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_GlideSecureRandomUtilGetSecureRandomLong",
                        "short_description": "Generates pseudo-random long value.",
                        "description": "",
                        "name": "getSecureRandomLong()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "gs.info(GlideSecureRandomUtil.getSecureRandomLong());\n",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Number",
                            "description": "The pseudo-randomly generated 64-bit integer."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_GlideSecureRandomUtilGetSecureRandomString",
                        "short_description": "Generates a random alpha-numeric String with the specified length.",
                        "description": "",
                        "name": "getSecureRandomString(Number length)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "gs.info(GlideSecureRandomUtil.getSecureRandomString(12));",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "length",
                                "type": "Number",
                                "description": "The length of the string in number of characters."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "The randomly generated string."
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "Access these methods using the static object <span class=\"keyword apiname\">GlideSecurityUtils</span>. This\n      class is available in scoped and global scripts.",
                "short_description": "Provides methods to work with URLs.",
                "identifier": "GlideSecurityUtilsScopedAPI",
                "name": "GlideSecurityUtils- Scoped, Global",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "GSU-cleanURL_S",
                        "short_description": "Removes suspicious encoding to prevent reflected or DOM based cross site\n    scripting.",
                        "description": "",
                        "name": "cleanURL(String url)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "myurl='javascript%3Aalert(1)';\nvar clean=GlideSecurityUtils.cleanURL(myurl);\ngs.info(clean);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "url",
                                "type": "String",
                                "description": "The URL to be checked."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "The URL stripped of problem elements."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GSU-enforceRelativeURL_S",
                        "short_description": "Removes the domain address from the URL, which leaves the page name and\n    parameters.",
                        "description": "",
                        "name": "enforceRelativeURL(String url)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "myurl='http://evildomain.com/test.do';\nrelativeURL=GlideSecurityUtils.enforceRelativeURL(myurl);\ngs.info(relativeURL);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "url",
                                "type": "String",
                                "description": "The URL to be turned into a relative URL."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "A relative URL."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GSU-escapeScript_S",
                        "short_description": "Add escape characters to a script.",
                        "description": "<p>Adding escape characters to a script helps prevent cross-site scripting.</p>",
                        "name": "escapeScript(String script)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "theScript=\"&lt;script&gt; alert(1)&lt;/script&gt;\";\nvar escapedScript=GlideSecurityUtils.escapeScript(theScript);\ngs.info(escapedScript);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "script",
                                "type": "String",
                                "description": "The script to have escape characters added."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "The script with escape characters added."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GSU-isURLWhiteListed_S",
                        "short_description": "Check the specified URL against the system defined white list.",
                        "description": "",
                        "name": "isURLWhiteListed(String url)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "myURL=\"http://evil.com/badscript.do\";\nisWhitelisted=GlideSecurityUtils.isURLWhiteListed(myURL);\ngs.info(isWhitelisted);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "url",
                                "type": "String",
                                "description": "The URL to be checked against the URL white list."
                            }
                        ],
                        "return": {
                            "type": "Boolean",
                            "description": "Returns true if the specified URL is in the white list."
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "ServiceNow processors are equivalent to Java servlets. Processors provide a customizable URL\n   endpoint that can execute arbitrary server-side JavaScript code and produce output such as TEXT,\n   JSON, or HTML. The <span class=\"keyword apiname\">GlideServletRequest</span> API is used in processor scripts to\n   access the <a class=\"extRef\" href=\"http://docs.oracle.com/javaee/1.4/api/javax/servlet/http/HttpServletRequest.html\" target=\"_blank\">HttpServletRequest</a> object. The\n    <span class=\"keyword apiname\">GlideServletRequest</span> object provides a subset of the HttpServletRequest APIs.\n   The methods are called using the global variable <span class=\"keyword apiname\">g_request</span>.<br/><br/>A useful global variable, <span class=\"keyword apiname\">g_target</span>, is available in processor scripts. It\n   contains the table name extracted from the URL.<br/><br/>The URL to a processor has the format: <span class=\"ph filepath\">https://&lt;instance\n    name.servicenow.com&gt;/&lt;path endpoint&gt;.do?&lt;parameter endpoint&gt;=&lt;value&gt;</span> where\n   the path endpoint and parameter endpoint are defined on the processor form.",
                "short_description": "The GlideServletRequest API is used in processor scripts.",
                "identifier": "c_GlideServletRequestScopedAPI",
                "name": "GlideServletRequest",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "ScopedGlideServletRequestGetContentType",
                        "short_description": "Returns the MIME type of the body of the request.",
                        "description": "",
                        "name": "getContentType()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var contentType = g_request.getContentType();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The content type, returns null if the content type is not known."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideServletRequestGetHeader_String",
                        "short_description": "Returns the header value.",
                        "description": "",
                        "name": "getHeader(String name)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var headerValue = g_request.getHeader(\"host\");",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "name",
                                "type": "String",
                                "description": "The name of the header to be retrieved."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "The header."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideServletRequestGetHeaderNames",
                        "short_description": "Returns a comma-separated list of header names.",
                        "description": "",
                        "name": "getHeaderNames()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var headerList = g_request.getHeaderNames();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "A comma-separated list of header names."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideServletRequestGetHeaders_String",
                        "short_description": "Returns the header values.",
                        "description": "",
                        "name": "getHeaders(String name)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var headerValue = g_request.getHeaders(\"host\");",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "name",
                                "type": "String",
                                "description": "Names of the headers to be retrieved."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "The header values."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideServletRequestGetParameter_String",
                        "short_description": "Returns the value of the parameter contained in the request URL.",
                        "description": "",
                        "name": "getParameter(String name)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var name = g_request.getParameter(\"x_snc_custom_x_snc_name\");",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "name",
                                "type": "String",
                                "description": "The name of the parameter to be retrieved. This can be the parameter endpoint\n                from the processor form."
                            }
                        ],
                        "return": {
                            "type": "Strings",
                            "description": "The parameter value. Returns null if the parameter is not found."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideServletRequestGetParameterNames",
                        "short_description": "Returns an enumeration list of URL parameters that were used in the request\n    URI.",
                        "description": "",
                        "name": "getParameterNames()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var paramList = g_request.getParameterNames();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Enumeration",
                            "description": "Java enumerator object list of URL parameters used in the HTTP request URI."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideServletRequestGetQueryString",
                        "short_description": "Returns the query string from the request.",
                        "description": "",
                        "name": "getQueryString()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var daString = g_request.getQueryString();\ng_processor.writeOutput(\"The query string is: \" + daString);",
                                "description": "The code snippet is:"
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The query string."
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "ServiceNow processors are equivalent to Java servlets. Processors provide a customizable URL\n   endpoint that can execute arbitrary server-side JavaScript code and produce output such as TEXT,\n   JSON, or HTML. The <span class=\"keyword apiname\">ScopedGlideServletResponse</span> API is used in processor scripts\n   to access the <a class=\"extRef\" href=\"http://docs.oracle.com/javaee/1.4/api/javax/servlet/http/HttpServletResponse.html\" target=\"_blank\">HttpServletResponse</a> object. The\n    <span class=\"keyword apiname\">ScopedGlideServletResponse</span> object provides a subset of the\n   HttpServletResponse APIs. The methods are called using the global variable\n    <span class=\"keyword apiname\">g_response</span>.<br/><br/>A useful global variable, <span class=\"keyword apiname\">g_target</span>, is available in processor scripts. It\n   contains the table name extracted from the URL.<br/><br/>The URL to a processor has the format: <span class=\"ph filepath\">https://&lt;instance\n    name.servicenow.com&gt;/&lt;path endpoint&gt;.do?&lt;parameter endpoint&gt;=&lt;value&gt;</span> where\n   the path endpoint and parameter endpoint are defined on the processor form.",
                "short_description": "The <span class=\"keyword apiname\">ScopedGlideServletResponse</span> API is used in processor\n  scripts.",
                "identifier": "c_GlideServletResponseScopedAPI",
                "name": "GlideServletResponse",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "r_ScopedGlideServletResponseSendRedirect_String",
                        "short_description": "Sends a temporary redirect to the client.",
                        "description": "",
                        "name": "sendRedirect(String location)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "location",
                                "type": "String",
                                "description": "The URL to receive the response."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideServletResponseSetContentType_String",
                        "short_description": "Sets the MIME type of the response",
                        "description": "",
                        "name": "setContentType(String type)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "g_response.setContentType('text/html;charset=UTF-8');",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "type",
                                "type": "String",
                                "description": "The MIME type."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideServletResponseSetHeader_String_String",
                        "short_description": "Sets a response header to the specified value.",
                        "description": "",
                        "name": "setHeader(String key, String value)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "g_response.setHeader(\"host\", \"instance.service-now.com\");",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "key",
                                "type": "String",
                                "description": "Specifies the header."
                            },
                            {
                                "name": "value",
                                "type": "String",
                                "description": "The value to be assigned to the header. If the header exists, it is\n                overwritten."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideServletResponseSetStatus_Number",
                        "short_description": "Sets the status code for the response.",
                        "description": "",
                        "name": "setStatus(Number status)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "// set the status to okay\ng_response.setStatus(200);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "status",
                                "type": "Number",
                                "description": "The status to be set."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "There are no constructors for creating an instance of a scoped GlideSession object. Instead,\n   use the <span class=\"keyword apiname\">getSession()</span> method of the scoped <span class=\"keyword apiname\">GlideSystem</span>\n   API.",
                "short_description": "The scoped <span class=\"keyword apiname\">GlideSession</span> API provides a way to find information about\n  the current session.",
                "identifier": "c_GlideSessionScopedAPI",
                "name": "GlideSession",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "r_ScopedGlideSessionGetClientData_String",
                        "short_description": "Retrieves a session client value previously set with\n    <span class=\"keyword apiname\">putClientData()</span>.",
                        "description": "<p>Use this method to retrieve data values that were set using the\n          <span class=\"keyword apiname\">putClientData()</span> method.</p>",
                        "name": "getClientData(String paramName)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var session = gs.getSession();\nsession.putClientData('test1', 'Harry');\nvar clientData = session.getClientData('test1');\ngs.info(clientData);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "paramName",
                                "type": "String",
                                "description": "Name of the client data to retrieve."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "The client data as a string."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideSessionGetClientIP",
                        "short_description": "Returns the client IP address.",
                        "description": "",
                        "name": "getClientIP()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var session = gs.getSession();\nvar addr = session.getClientIP();\ngs.info(addr);",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The IP address."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideSessionGetCurrentApplicationId",
                        "short_description": "Returns the application currently selected in the application picker.",
                        "description": "<p>This method requires admin privileges.</p>",
                        "name": "getCurrentApplicationId()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var session = gs.getSession();\nvar appID = session.getCurrentApplicationId();\ngs.info(appID);",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The currently selected application."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideSessionGetLanguage",
                        "short_description": "Returns the session's language code.",
                        "description": "",
                        "name": "getLanguage()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var session = gs.getSession();\nvar language = session.getLanguage();\ngs.info(language);",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The session's language code."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideSessionGetSessionToken",
                        "short_description": "Returns the session token.",
                        "description": "",
                        "name": "getSessionToken()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var session = gs.getSession();\nvar token = session.getSessionToken();\ngs.info(token);",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The session token."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideSessionGetTimeZoneName",
                        "short_description": "Returns the name of the session's time zone.",
                        "description": "",
                        "name": "getTimeZoneName()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var session = gs.getSession();\nvar zoneName = session.getTimeZoneName();\ngs.info(zoneName);",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The name of the session's time zone."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideSessionGetUrlOnStack",
                        "short_description": "Returns the URL on the stack. Returns null if the stack is empty.",
                        "description": "",
                        "name": "getUrlOnStack()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var session = gs.getSession();\nvar URL = session.getUrlOnStack();\ngs.info(URL);",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The URL. Returns null if the stack is empty."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SGSSN-isImpersonating",
                        "short_description": "Returns true if the user is impersonating another user.",
                        "description": "",
                        "name": "isImpersonating()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var isImpersonator = gs.getSession().isImpersonating();\ngs.info(isImpersonator);",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "Returns true if the user is impersonating another user; otherwise, returns\n                false."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideSessionIsInteractive",
                        "short_description": "Returns true if the session is interactive.",
                        "description": "<p>An interactive session is one that involves an end-user interacting with a user interface\n        that then retrieves information from a server. An example of this type of session is when a\n        user logs in using the log-in screen or uses a form to query a data store. A non-interactive\n        session is one that only involves programmatic interaction with a server such as a SOAP\n        request to retrieve data.</p>",
                        "name": "isInteractive()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var interActive = gs.getSession().isInteractive();\ngs.info(interActive);",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "True if the session is interactive."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideSessionIsLoggedIn",
                        "short_description": "Returns true if the user is logged in.",
                        "description": "",
                        "name": "isLoggedIn()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var session = gs.getSession();\nvar loggedIn = session.isLoggedIn();\ngs.info(loggedIn);",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "True if the user is logged in."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideSessionPutClientData_String_String",
                        "short_description": "Sets a session client value that can be retrieved with\n      <span class=\"keyword apiname\">getClientData()</span>. This method is used in a server side script that runs when\n    a form is created.",
                        "description": "",
                        "name": "putClientData(String paramName, String paramValue)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var session = gs.getSession();\nsession.putClientData('test1', 'Harry');\nvar clientData = session.getClientData('test1');\ngs.info(clientData);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "paramName",
                                "type": "String",
                                "description": "Name of the client data to set."
                            },
                            {
                                "name": "paramValue",
                                "type": "String",
                                "description": "Value of the client data."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "You access GlideSPScriptable methods by using the global <samp class=\"ph codeph\">$sp</samp> object.",
                "short_description": "<span class=\"ph\">Interact with data and perform record\n                operations in <span class=\"ph\">Service Portal</span>\n                widgets.</span>",
                "identifier": "c_GlideSPScriptableScopedAPI",
                "name": "GlideSPScriptable",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "r_GSPS-canReadRecord_GR",
                        "short_description": "Returns true if the user can read the specified GlideRecord.",
                        "description": "<p>If the record type is <samp class=\"ph codeph\">kb_knowledge</samp>, <samp class=\"ph codeph\">sc_cat_item</samp>, or\n          <samp class=\"ph codeph\">sc_category</samp>, the method checks if the user can view the item.</p>",
                        "name": "canReadRecord(GlideRecord gr)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "//Server script\ndata.items = [];\ndata.userName = gs.getUserDisplayName();\nvar now_GR = new GlideRecord(\"sc_cat_item\");\nnow_GR.query();\nwhile(now_GR.next() &amp;&amp; data.items.length &lt; 10) {\n    if ($sp.canReadRecord(now_GR)) {\n        data.items.push(now_GR.getDisplayValue(\"name\"));\n    }\n}\n\n//HTML template\n&lt;div class=\"panel panel-default\"&gt;\n    &lt;div class=\"panel-heading\"&gt;Hi, {{c.data.userName}}!&lt;/div&gt;\n    &lt;div class=\"panel-body\"&gt;\n        Here are some things you can order:\n        &lt;ul&gt;&lt;li ng-repeat=\"item in c.data.items\"&gt;{{item}}&lt;/li&gt;&lt;/ul&gt;\n    &lt;/div&gt;\n&lt;/div&gt;",
                                "description": "Server script"
                            }
                        ],
                        "params": [
                            {
                                "name": "gr",
                                "type": "GlideRecord",
                                "description": "The GlideRecord to check."
                            }
                        ],
                        "return": {
                            "type": "Boolean",
                            "description": "True if the record is valid and readable."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_GSPS-canReadRecord_S_S",
                        "short_description": "Returns true if the user can read the specified GlideRecord.",
                        "description": "<p>If the record type is <samp class=\"ph codeph\">kb_knowledge</samp>, <samp class=\"ph codeph\">sc_cat_item</samp>, or\n          <samp class=\"ph codeph\">sc_category</samp>, the method checks if the user can view the item.</p>",
                        "name": "canReadRecord(String table, String sysId)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "table",
                                "type": "String",
                                "description": "Name of the table to query."
                            },
                            {
                                "name": "sysId",
                                "type": "String",
                                "description": "Sys_id of the record to query."
                            }
                        ],
                        "return": {
                            "type": "Boolean",
                            "description": "True if the record is valid and readable."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GSPS-canSeePage_S",
                        "short_description": "Returns true if the currently logged in user has permission to view the specified\n    page.",
                        "description": "<p>The system determines permission using roles and user criteria. For more information, see\n        <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-servicenow-platform/page/build/service-portal/task/configure-page-security.html\" target=\"_blank\">Configure page security by role</a>\n        and <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-servicenow-platform/page/build/service-portal/concept/user-criteria.html\" target=\"_blank\">User criteria for Service\n          Portal</a>.</p>",
                        "name": "canSeePage(String pageID)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "GlideSPScriptable.canSeePage(\"kb_view2\")",
                                "description": "This example adds a condition to the Knowledge menu item in the SP Header Menu to only show\n        the menu item to users who have permission to view the kb_view2 page."
                            }
                        ],
                        "params": [
                            {
                                "name": "pageID",
                                "type": "String",
                                "description": "Page ID from the Pages [sp_page] table."
                            }
                        ],
                        "return": {
                            "type": "Boolean",
                            "description": "Flag that indicates whether the currently logged in user has permissions to\n                view the specified page. Values include:<ul class=\"ul\" id=\"GSPS-canSeePage_S__ul_r2f_dyq_s3b\">\n                  <li class=\"li\">true: User can view the page.</li>\n\n                  <li class=\"li\">false: Either the user cannot view the page, the given\n                      <span class=\"keyword parmname\">pageID</span> is not valid, or the user is not logged in.</li>\n\n                </ul>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_GSPS-getCatalogItem_S",
                        "short_description": "Returns a model and view model for a <samp class=\"ph codeph\">sc_cat_item</samp> or\n      <samp class=\"ph codeph\">sc_cat_item_guide</samp>.",
                        "description": "<p>This method is deprecated. Use the <span class=\"keyword apiname\">getCatalogItem(String sysId, Boolean\n          isOrdering)</span> method instead. This method calls the <span class=\"keyword apiname\">getCatalogItem(String\n          sysId, Boolean isOrdering)</span> method with the <span class=\"keyword parmname\">isOrdering</span>\n        parameter set to false, which means that write roles security checking is done.</p><p>This method is a quick way to get the data necessary to render and order a catalog item\n        using <samp class=\"ph codeph\">&lt;sp-model /&gt;</samp>. If you just need to get a catalog item to show its\n        picture or name, use GlideRecord to query the <samp class=\"ph codeph\">sc_cat_item</samp> table.</p>",
                        "name": "getCatalogItem(String sysId)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "// Server script\n(function() {\n    var sys_id = $sp.getParameter(\"sys_id\")\n    data.catItem = $sp.getCatalogItem(sys_id);\n})();\n\n// Client script\nfunction($http, spUtil) {\n    var c = this;\n    var submitting = false;\n    c.getIt = function() {\n        if (submitting) return;\n        $http.post(spUtil.getURL('sc_cat_item'), c.data.catItem).success(function(response) {\n            if (response.answer) {\n                c.req = response.answer;\n                c.req.page = c.req.table == 'sc_request' ? 'sc_request' : 'ticket';\n            }\n        });\n    }\n}\n\n//SCSS\n.img-bg {\n    padding: 5px;\n    background-color: $brand-primary;\n}\n\n.img-responsive {\n    margin: 0 auto;\n}\n\n.cat-icon {\n    display: block;\n    margin: -40px auto 0;\n}\n\n// HTML template\n&lt;div class=\"col-sm-4\"&gt;\n  &lt;div class=\"panel panel-default\"&gt;\n    &lt;div class=\"img-bg\"&gt;\n      &lt;img ng-src=\"{{::data.catItem.picture}}\" class=\"img-responsive\" /&gt;\n    &lt;/div&gt;\n    &lt;span class=\"cat-icon fa fa-stack fa-lg fa-3x hidden-xs\"&gt;\n      &lt;i class=\"fa fa-circle fa-stack-2x text-success\"&gt;&lt;/i&gt;\n      &lt;i class=\"fa fa-desktop fa-stack-1x fa-inverse\"&gt;&lt;/i&gt;\n    &lt;/span&gt;\n    &lt;div class=\"panel-body\"&gt;\n      &lt;p class=\"lead text-center\"&gt;{{::data.catItem.name}}&lt;/p&gt;\n      &lt;ul class=\"list-unstyled\"&gt;\n        &lt;li class=\"text-center\" ng-if=\"::data.catItem.price\"&gt;${Price}: {{::data.catItem.price}}&lt;/li&gt;\n      &lt;/ul&gt;\n      &lt;sp-model form-model=\"::data.catItem\" mandatory=\"mandatory\"&gt;&lt;/sp-model&gt;\n      &lt;p ng-if=\"c.req\" class=\"text-center text-success\"&gt;\n        ${Request created!} &lt;a href=\"?id={{c.req.page}}&amp;table={{c.req.table}}&amp;sys_id={{c.req.sys_id}}\"&gt;{{c.req.number}}&lt;/a&gt;\n      &lt;/p&gt;\n      &lt;button ng-if=\"!c.req\" class=\"btn btn-default btn-block\" ng-click=\"c.getIt()\"&gt;${Get it}&lt;/button&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "sysId",
                                "type": "String",
                                "description": "The sys_id of the catalog item (<samp class=\"ph codeph\">sc_cat_item</samp>) or order guide\n                  (<samp class=\"ph codeph\">sc_cat_item_guide</samp>)."
                            }
                        ],
                        "return": {
                            "type": "Object",
                            "description": "An object containing the catalog item variable model, view, sections, pricing,\n                and client scripts."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_GSPS-getCatalogItem_S_B",
                        "short_description": "Returns a model and view model for a <samp class=\"ph codeph\">sc_cat_item</samp> or\n      <samp class=\"ph codeph\">sc_cat_item_guide</samp>.",
                        "description": "",
                        "name": "getCatalogItem(String sysId, Boolean isOrdering)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "sysId",
                                "type": "String",
                                "description": "The sys_id of the catalog item (<samp class=\"ph codeph\">sc_cat_item</samp>) or order guide\n                  (<samp class=\"ph codeph\">sc_cat_item_guide</samp>)."
                            },
                            {
                                "name": "isOrdering",
                                "type": "Boolean",
                                "description": "When true, uses create roles security check. When false, uses write roles\n                security check.<p class=\"p\">When users are ordering an item or have it in their cart,  check\n                  using the create roles.</p>\n<p class=\"p\">If users are not ordering, for example, somebody is\n                  looking at a requested item to see the variables associated with that item, then\n                  check using the write roles.</p>"
                            }
                        ],
                        "return": {
                            "type": "Object",
                            "description": "An object containing the catalog item variable model, view, sections, pricing,\n                and client scripts."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_GSPS-getDisplayValue_S",
                        "short_description": "Returns the display value of the specified field (if it exists and has a value) from\n    either the widget's <samp class=\"ph codeph\">sp_instance</samp> or the <samp class=\"ph codeph\">sp_portal</samp>\n    record.",
                        "description": "",
                        "name": "getDisplayValue(String fieldName)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "//Server script\n(function() {\n    data.title = $sp.getDisplayValue(\"title\");\n    data.catalog = $sp.getDisplayValue(\"sc_catalog\");\n})();\n\n//HTML template\n&lt;div&gt;\n    &lt;h1&gt;sp_instance.title: {{::data.title}}&lt;/h1&gt;\n    &lt;h1&gt;sp_portal.sc_catalog: {{::data.catalog}}&lt;/h1&gt;\n&lt;/div&gt;",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "fieldName",
                                "type": "String",
                                "description": "Name of the field"
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "The display value from either the <samp class=\"ph codeph\">sp_instance</samp> or\n                  <samp class=\"ph codeph\">sp_portal</samp> record."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_GSPS-getField_GR_S",
                        "short_description": "Returns information about the specified field in the specified GlideRecord.",
                        "description": "",
                        "name": "getField(GlideRecord gr, String fieldName)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "gr",
                                "type": "GlideRecord",
                                "description": "The GlideRecord to check"
                            },
                            {
                                "name": "fieldName",
                                "type": "String",
                                "description": "The field to find information for"
                            }
                        ],
                        "return": {
                            "type": "Object",
                            "description": "An object containing the field's label, value,  displayValue,  and type.\n                Returns null if the GlideRecord of field name are not valid, or if the field is not\n                readable."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_GSPS-getFields_GR_S",
                        "short_description": "Checks the specified list of field names, and returns an array of valid field\n    names.",
                        "description": "",
                        "name": "getFields(GlideRecord gr, String fieldNames)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "gr",
                                "type": "GlideRecord",
                                "description": "The GlideRecord to check"
                            },
                            {
                                "name": "field Names",
                                "type": "String",
                                "description": "A comma separated list of field names."
                            }
                        ],
                        "return": {
                            "type": "Array",
                            "description": "An array of valid fields."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_GSPS-getFieldsObject_GR_S",
                        "short_description": "Checks the specified list of field names and returns an object of valid field\n    names.",
                        "description": "",
                        "name": "getFieldsObject(GlideRecord gr, String fieldNames)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "gr",
                                "type": "GlideRecord",
                                "description": "The GlideRecord to check"
                            },
                            {
                                "name": "field Names",
                                "type": "String",
                                "description": "A comma separated list of field names."
                            }
                        ],
                        "return": {
                            "type": "Object",
                            "description": "An object containing valid field names."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_GSPS-getForm_S_S",
                        "short_description": "Return the form.",
                        "description": "",
                        "name": "getForm(String tableName, String sysId)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "tableName",
                                "type": "String",
                                "description": "The name of the table"
                            },
                            {
                                "name": "sysId",
                                "type": "String",
                                "description": "The form's sys_id"
                            }
                        ],
                        "return": {
                            "type": "Object",
                            "description": "The form"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GSPS-getKBCategoryArticles_S_N",
                        "short_description": "Returns KB articles in the specified category and its subcategories.",
                        "description": "<p>To avoid performance issues, do not use this method to return articles in large categories\n        or articles with inline images. Instead, use <span class=\"keyword apiname\">getKBArticleSummaries()</span>.</p>",
                        "name": "getKBCategoryArticles(String sys_id, Number limit)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "//Server script \n(function() {\n    data.kbs = $sp.getKBCategoryArticles(\"0ac1bf8bff0221009b20ffffffffffec\", 5);\n})();\n\n//HTML template\n&lt;div&gt;\narticles: {{::data.kbs}}\n&lt;/div&gt;\n",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "sys_id",
                                "type": "String",
                                "description": "Sys_id of the KB article category."
                            },
                            {
                                "name": "limit",
                                "type": "Number",
                                "description": "Maximum number of KB articles returned."
                            }
                        ],
                        "return": {
                            "type": "Array",
                            "description": "The articles within the category and its subcategories with: <ul class=\"ul\" id=\"GSPS-getKBCategoryArticles_S_N__ul_qxn_1hh_xbb\">\n                  <li class=\"li\">A <span class=\"ph uicontrol\">workflow_state</span> of\n                    <span class=\"ph uicontrol\">published</span>.</li>\n\n                  <li class=\"li\">A <span class=\"ph uicontrol\">valid_to</span> date greater than or equal to the current\n                    date. </li>\n\n                </ul>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GSPS-getKBCategoryArticleSummaries_S_N_N",
                        "short_description": "Returns Knowledge Base article summaries in the specified category and its\n    subcategories.",
                        "description": "",
                        "name": "getKBCategoryArticleSummaries(String sys_id, Number limit, Number maxChars)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "//Server script \n(function() {\n    data.summary = $sp.getKBCategoryArticleSummaries(\"0ac1bf8bff0221009b20ffffffffffec\", 5, 200);\n})();\n\n//HTML template\n&lt;div&gt;\narticles: {{::data.summary}}\n&lt;/div&gt;\n",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "sys_id",
                                "type": "String",
                                "description": "Sys_id of the KB article category."
                            },
                            {
                                "name": "limit",
                                "type": "Number",
                                "description": "Maximum number of KB articles returned."
                            },
                            {
                                "name": "maxChars",
                                "type": "Number",
                                "description": "Maximum number of characters to return from the article text. For full article\n                text, set the value to <samp class=\"ph codeph\">-1</samp>."
                            }
                        ],
                        "return": {
                            "type": "Array",
                            "description": "The articles within the category and its subcategories with: <ul class=\"ul\" id=\"GSPS-getKBCategoryArticleSummaries_S_N_N__ul_qxn_1hh_xbb\">\n                  <li class=\"li\">A <span class=\"ph uicontrol\">workflow_state</span> of\n                    <span class=\"ph uicontrol\">published</span>.</li>\n\n                  <li class=\"li\">A <span class=\"ph uicontrol\">valid_to</span> date greater than or equal to the current\n                    date. </li>\n\n                </ul>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GSPS-getKBCount_S",
                        "short_description": "Returns the number of articles in the defined Knowledge Base.",
                        "description": "",
                        "name": "getKBCount(String sys_id)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "//Server script \n(function() {\n    data.count = $sp.getKBCount(\"a7e8a78bff0221009b20ffffffffff17\");\n})();\n\n//HTML template\n&lt;div&gt;\narticles: {{::data.count}}\n&lt;/div&gt;\n",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "sys_id",
                                "type": "String",
                                "description": "Sys_id of a Knowledge Base record."
                            }
                        ],
                        "return": {
                            "type": "Number",
                            "description": "Number of knowledge articles in the defined Knowledge Base with: <ul class=\"ul\" id=\"GSPS-getKBCount_S__ul_kfs_bhh_xbb\">\n                  <li class=\"li\">A <span class=\"ph uicontrol\">workflow_state</span> of\n                    <span class=\"ph uicontrol\">published</span>.</li>\n\n                  <li class=\"li\">A <span class=\"ph uicontrol\">valid_to</span> date greater than or equal to the current\n                    date. </li>\n\n                </ul>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_GSPS-getListColumns_S_S",
                        "short_description": "Returns a list of the specified table's columns in the specified view.",
                        "description": "",
                        "name": "getListColumns(String tableName, String view)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "tableName",
                                "type": "String",
                                "description": "Name of the table"
                            },
                            {
                                "name": "view",
                                "type": "String",
                                "description": "The view by which to filter the columns"
                            }
                        ],
                        "return": {
                            "type": "Object",
                            "description": "An object containing the column names."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_GSPS-getMenuHREF_GR",
                        "short_description": "Returns the (?id=) portion of the URL based on the sp_menu type.",
                        "description": "",
                        "name": "getMenuHREF(GlideRecord page)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "page",
                                "type": "GlideRecord",
                                "description": "The page"
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "The href portion of the URL."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_GSPS-getMenuItems_S",
                        "short_description": "Returns an array of menu items for the specified instance.",
                        "description": "",
                        "name": "getMenuItems(String sysId)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "sysId",
                                "type": "String",
                                "description": "sysId of the instance"
                            }
                        ],
                        "return": {
                            "type": "Array",
                            "description": "Menu items for the specified instance"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_GSPS-getParameter_S",
                        "short_description": "Returns the value of the specified parameter.",
                        "description": "",
                        "name": "getParameter(String name)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "name",
                                "type": "String",
                                "description": "The name of the key from the query string or post body."
                            }
                        ],
                        "return": {
                            "type": "Object",
                            "description": "Returns the specified parameter as an object. Returns null if there is no\n                request, JSON request, or widget."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_GSPS-getPortalRecord",
                        "short_description": "Returns the portal record from the Service Portals [sp_portal] table.",
                        "description": "",
                        "name": "getPortalRecord()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "//Server script\n(function() {\n    var portalGr = $sp.getPortalRecord();\n    data.logo = portalGr.getDisplayValue(\"logo\");\n    data.homepage = portalGr.getDisplayValue(\"homepage.id\");\n})();\n\n//HTML template\n&lt;div&gt;\n    &lt;img ng-src=\"{{::c.data.logo}}\" /&gt;\n    &lt;a href=\"?id={{::c.data.homepage}}\"&gt;Click here to go home&lt;/a&gt;\n&lt;/div&gt;",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "GlideRecord",
                            "description": "The portal record for the current portal from the Service Portals [sp_portal]\n                table."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_GSPS-getRecord",
                        "short_description": "If parameters are provided, returns the GlideRecord identified by the provided table\n    and Sys ID. If no parameters are provided, returns the record identified by the current URL.",
                        "description": "",
                        "name": "getRecord(String table, String sys_id)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "//Server script \n(function(){ \nvar now_GR = $sp.getRecord(); \ndata.tableLabel = now_GR.getLabel(); \n})(); \n\n//HTML template \n&lt;div class=\"panel-heading\"&gt; \n&lt;h4 class=\"panel-title\"&gt;${{{data.tableLabel}} details}&lt;/h4&gt; \n&lt;/div&gt;",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "table",
                                "type": "String",
                                "description": "Optional. The table of the record to return. If no parameters are included,\n                returns the table and Sys ID identified by the current URL."
                            },
                            {
                                "name": "sys_id",
                                "type": "String",
                                "description": "Optional. The Sys ID of the record to return. If no parameters are included,\n                returns the record identified by the current URL."
                            }
                        ],
                        "return": {
                            "type": "GlideRecord",
                            "description": "If parameters are provided, returns the record identified by the provided table\n                and Sys ID. <p class=\"p\">If no parameters are provided, returns the record identified by the\n                  current URL. </p>\n<p class=\"p\">Returns null if the widget is embedded by another widget, or\n                  if the record for the provided parameters is not found.</p>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_GSPS-getRecordDispValues_O_GR_S",
                        "short_description": "Copies display values for the specified fields into the data parameter.",
                        "description": "",
                        "name": "getRecordDisplayValues(Object data, GlideRecord from, String names)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "data",
                                "type": "Object",
                                "description": "The display values for the specified fields are copied to this object."
                            },
                            {
                                "name": "from",
                                "type": "GlideRecord",
                                "description": "The GlideRecord to process."
                            },
                            {
                                "name": "names",
                                "type": "String",
                                "description": "A comma-separated list of field names."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_GSPS-getRecordElements_O_GR_S",
                        "short_description": "For the specified fields, copies the element's name, display value, and value into the\n    data parameter.",
                        "description": "",
                        "name": "getRecordElements(Object data, GlideRecord from, String names)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "data",
                                "type": "Object",
                                "description": "The element's name, display value, and value for the specified fields are\n                copied to this object."
                            },
                            {
                                "name": "from",
                                "type": "GlideRecord",
                                "description": "The GlideRecord to process."
                            },
                            {
                                "name": "names",
                                "type": "String",
                                "description": "A comma-separated list of field names."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_GSPS-getRecordValues_O_GR_S",
                        "short_description": "Copies values for the specified field names from the GlideRecord into the data\n    parameter.",
                        "description": "",
                        "name": "getRecordValues(Object data, GlideRecord from, String names)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "data",
                                "type": "Object",
                                "description": "The value for the specified fields are copied to this object."
                            },
                            {
                                "name": "from",
                                "type": "GlideRecord",
                                "description": "The GlideRecord to process."
                            },
                            {
                                "name": "names",
                                "type": "String",
                                "description": "A comma-separated list of field names."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GSPS-getRecordVars_GR_B",
                        "short_description": "Returns <span class=\"ph\">Service Catalog</span>\n    variables associated with a record in String format.",
                        "description": "",
                        "name": "getRecordVariables(GlideRecord gr, Boolean includeNilResponses)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "//Server script \n(function() {\nvar itemsGR = new GlideRecord(\"sc_req_item\");\nitemsGR.get('585d1bc44f4f13008a959a211310c77d');\n\t\ndata.scVars = $sp.getRecordVariables(itemsGR);\n\n})();\n\n//HTML template\n&lt;div&gt;\nRequested item variables: {{::data.scVars}}\n&lt;/div&gt;",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "gr",
                                "type": "GlideRecord",
                                "description": "The record to retrieve <span class=\"ph\">Service Catalog</span> variables\n                for. Must be a record with <span class=\"ph\">Service Catalog</span> variables\n                defined, such as a requested item [sc_req_item] record or an incident submitted\n                through a record producer."
                            },
                            {
                                "name": "includeNilResponses",
                                "type": "Boolean",
                                "description": "Optional. If true, the API includes variables with no user-defined value."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "<span class=\"ph\">Service Catalog</span>\n                variables associated with the record."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GSPS-getRecVarArray_GR",
                        "short_description": "Returns an array of <span class=\"ph\">Service Catalog</span> variables associated\n    with a record.",
                        "description": "",
                        "name": "getRecordVariablesArray(GlideRecord gr, Boolean includeNilResponses)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "//Server script \n(function() {\nvar itemsGR = new GlideRecord(\"sc_req_item\");\nitemsGR.get('585d1bc44f4f13008a959a211310c77d');\n\t\ndata.scVars = $sp.getRecordVariablesArray(itemsGR);\n\n})();\n\n//HTML template\n&lt;div&gt;\nRequested item variables: {{::data.scVars}}\n&lt;/div&gt;",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "gr",
                                "type": "GlideRecord",
                                "description": "The record to retrieve <span class=\"ph\">Service Catalog</span> variables\n                for. Must be a record with <span class=\"ph\">Service Catalog</span> variables\n                defined, such as a requested item [sc_req_item] record or an incident submitted\n                through a record producer."
                            },
                            {
                                "name": "includeNilResponses",
                                "type": "Boolean",
                                "description": "Optional. If true, the API includes variables with no user-defined value."
                            }
                        ],
                        "return": {
                            "type": "Object",
                            "description": "Array of <span class=\"ph\">Service Catalog</span> variables\n                associated with the record."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_GSPS-getStream_S_S",
                        "short_description": "Gets the activity stream for the specified record. This method works on tables that\n    extend the task table.",
                        "description": "",
                        "name": "getStream(String table, String sysId)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "table",
                                "type": "String",
                                "description": "The table name"
                            },
                            {
                                "name": "sysID",
                                "type": "String",
                                "description": "The sys_id of the record"
                            }
                        ],
                        "return": {
                            "type": "Object",
                            "description": "If a table extending the task table is specified, contains the display_value,\n                sys_id, short_description,number, entries, user_sys_id, user_full_name, user_login,\n                label, table, and journal_fields properties; otherwise contains the table and sys_id\n                  properties.<div class=\"note note\"><span class=\"notetitle\">Note:</span> The user_login property contains the User ID of the current user.\n                  The user_sys_id and iser_full_name properties reference the creator of the queried\n                  record.</div>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_GSPS-getUserInitials",
                        "short_description": "Returns the user's initials.",
                        "description": "",
                        "name": "getUserInitials()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The user's initials"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_GSPS-getValue_S",
                        "short_description": "Returns the named value of the JSON request, instance, or portal.",
                        "description": "",
                        "name": "getValue(String name)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "//Server script\n(function() {\n    data.title = $sp.getValue(\"title\");\n    data.catalog = $sp.getValue(\"sc_catalog\");\n})();\n\n//HTML templage\n&lt;div&gt;\n    &lt;h1&gt;sp_instance.title: {{::data.title}}&lt;/h1&gt;\n    &lt;h1&gt;sp_portal.sc_catalog: {{::data.catalog}}&lt;/h1&gt;\n&lt;/div&gt;",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "name",
                                "type": "String",
                                "description": "Name of the JSON request, instance, or portal."
                            }
                        ],
                        "return": {
                            "type": "Object",
                            "description": "Value of the specified parameter. Null if the specified entity does not exist\n                or has no such parameter."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_GSPS-getValues_O_S",
                        "short_description": "Copies values from the request or instance to the data parameter.",
                        "description": "",
                        "name": "getValues(Object data, String names)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "data",
                                "type": "Object",
                                "description": "Receives the parameter values."
                            },
                            {
                                "name": "names",
                                "type": "String",
                                "description": "Comma-separated string of field names."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GSPS-getVariablesArray_S_S_B",
                        "short_description": "Returns an array of <span class=\"ph\">Service Catalog</span> variables associated\n    with the record in the URL.",
                        "description": "<p>For example, if the URL includes the parameters\n          <samp class=\"ph codeph\">id=form&amp;table=sc_req_item&amp;sys_id=832e9620db4f330083766b984b9619cf</samp>,\n        the API returns the variables associated with the given record in the Requested item\n        [sc_req_item] table. Must be a record with <span class=\"ph\">Service Catalog</span> variables\n        defined, such as a requested item [sc_req_item] record or an incident submitted through a\n        record producer.</p>",
                        "name": "getVariablesArray(Boolean includeNilResponses)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "//Server script \n(function() {\t\ndata.scVars = $sp.getVariablesArray();\n})();\n\n//HTML template\n&lt;div\nCurrent record variables: {{::data.scVars}}\n&lt;/div&gt;",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "includeNilResponses",
                                "type": "Boolean",
                                "description": "Optional. If true, the API includes variables with no user-defined value."
                            }
                        ],
                        "return": {
                            "type": "Object",
                            "description": "Array of variables associated with the table."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_GSPS-getWidget_S__O",
                        "short_description": "Gets a widget by id or sys_id, executes that widget's server script using the provided\n    options, then returns the widget model.",
                        "description": "",
                        "name": "getWidget(String sysID, Object options)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "//Server script\ndata.myWidget = $sp.getWidget('widget_id', {p1: param1, p2: param2});\n\n//HTML\n&lt;sp-widget widget=\"c.data.myWidget\"&gt;&lt;/sp-widget&gt;",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "sysID",
                                "type": "String",
                                "description": "The widget sys_id or widget_id"
                            },
                            {
                                "name": "options",
                                "type": "Object",
                                "description": "An object to pass to the widget's server script. Refer to this object as\n                  <samp class=\"ph codeph\">options</samp> in your server script.<div class=\"note note\"><span class=\"notetitle\">Note:</span> Any options passed into this\n                  function will only be available in the embedded widget's server script on the\n                    <span class=\"ph uicontrol\">first execution</span> of that script. Any subsequent calls into\n                  the server script from the embedded widget will not contain the object properties\n                  passed in.</div>"
                            }
                        ],
                        "return": {
                            "type": "Object",
                            "description": "A widget model to be used with sp-widget."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GSPS-mapUrlToSPUrl_S",
                        "short_description": "Transforms a URL requesting a list or form in the platform UI into the URL of the\n    corresponding <samp class=\"ph codeph\">id=list</samp> or <samp class=\"ph codeph\">id=form</samp> Service Portal\n    page.",
                        "description": "<p>Use this method to perform tasks such as redirecting a user after login to the correct\n        Service Portal page when they request a platform UI form or list URL. Note that the\n          <samp class=\"ph codeph\">id=list</samp> and <samp class=\"ph codeph\">id=form</samp> page targets are not\n          customizable.<div class=\"note note\"><span class=\"notetitle\">Note:</span> Table, sys_id, and sysparm_query values are preserved from the original\n          URL; sysparm_view is not.</div></p>",
                        "name": "mapUrlToSPUrl(String url)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "GlideSPScriptable().mapUrlToSPUrl(\"http://demo.service-now.com/task_list.do?sysparm_userpref_module=1523b8d4c611227b00be8216ec331b9a&amp;sysparm_query=assigned_to=javascript:getMyAssignments()&amp;sysparm_clear_stack=true\"))",
                                "description": "List example"
                            },
                            {
                                "script": "GlideSPScriptable().mapUrlToSPUrl(\"incident.do?sys_id=12bc12bc12bc12bc12bc12bc12bc12bc\")",
                                "description": "Form example"
                            }
                        ],
                        "params": [
                            {
                                "name": "url",
                                "type": "String",
                                "description": "Platform UI URL"
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "Transformed Service Portal URL.<p class=\"p\">If the passed-in URL does not request a list\n                  or a form in the platform UI, a null value is returned.</p>"
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "<span class=\"ph\">By default, the Search Events [sys_search_event] and\n                    Search Source Events [sys_search_source_event] tables collect search data from\n                    base system search widgets.</span> However, custom search widgets do not benefit from this feature. Use this API in the server\n      script of custom search widgets (in scoped or global environments) to send search data to the\n      suggestions and analytics tables. Generate <span class=\"ph\">relevant search suggestions for your users and\n                    monitor search analytics to understand what your users are searching for and\n                    whether they're finding what they need.</span><br/><br/>This API collects the following search data:<ul class=\"ul\" id=\"GlideSPSearchAnalyticsAPI__ul_yr4_cxd_mhb\">\n        <li class=\"li\">Searched terms</li>\n\n        <li class=\"li\">Rank of clicked items</li>\n\n        <li class=\"li\">Filters used to refine search results</li>\n\n        \n        <li class=\"li\">Table names and record identifiers from the first page of search results</li>\n\n        <li class=\"li\">Search results clicked, including browser and location</li>\n\n      </ul><br/><br/><span class=\"ph\">Search analytics and suggestions is a <span class=\"ph\">Now Platform</span> feature. For\n                    more information, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/newyork-platform-administration/page/administer/search-administration/concept/search-suggestions.html\" target=\"_blank\">Search analytics and\n                      suggestions</a>.</span>",
                "short_description": "<span class=\"ph\">Generates search analytics from custom\n                  <span class=\"ph\">ServiceNow</span> search widgets.</span>",
                "identifier": "GlideSPSearchAnalyticsAPI",
                "name": "GlideSPSearchAnalytics - Scoped, Global",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "GlideSPSearchAnalytics-publish_S",
                        "short_description": "Sends search data to the Search Events [sys_search_event] and Search Source Events\n    [sys_search_source_event] tables for search results, or to the Search Result Clicked\n    [sys_search_result_clicked] table when a user clicks a search result.",
                        "description": "",
                        "name": "publish(String payload)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var searchObject = new GlideSPSearchAnalytics();\nvar payload = {  \n  'query':'how do i get a new computer',\n  'portal_id':'81b75d3147032100ba13a5554ee4902b',\n  'page_id':'87466b63c3223100c8b837659bba8feb',\n  'results_per_source':[  \n    {  \n      'source_id':'bf2c4c15b3a31300e64be12b86a8dcb7',\n      'number_of_results':2,\n    },{  \n      'source_id':'c96eb1686721220023c82e08f585efff',\n      'number_of_results':1\n    }\n  ],\n  'refinement':false,\n  'search_results': [\n    {\n      'record_id': 'KB Article 1',\n      'table_name': 'knowledge'\n    },{\n      'record_id': 'KB Article 2',\n      'table_name': 'knowledge'\n    },{\n      'record_id': 'Employee Help',\n      'table_name': 'userportal'\n    }\n  ]\n};\nvar directSearchData = searchObject.publish(JSON.stringify(payload));",
                                "description": "This example passes direct search data to the search analytics tables."
                            },
                            {
                                "script": "//client script\nvar payload = {\n  query: this.data.query,\n  portal_id: this.data.portalID,\n  page_id: this.data.pageID,\n  results_per_source: getSearchSources(),\n  refinement_occurred: false,\n};\nvar payloadObject = {\n  action: \"TestAction\",\n  payload: payload,\n};\nc.server.get(payloadObject);\n",
                                "description": "This example dynamically collects direct search data from a custom search widget and passes\n        it to the search analytics tables."
                            },
                            {
                                "script": "//client script\nfunction setUserLocationCoords(cb) {\n  var onSuccess = function (pos) {\n    return cb({\n      latitude: pos.coords.latitude,\n      longitude: pos.coords.longitude,\n    });\n  };\n\n  var onError = function () {\n    return cb({\n      latitude: null,\n      longitude: null,\n    });\n  };\n\n  return window.navigator.geolocation.getCurrentPosition(onSuccess, onError, {\n    enableHighAccuracy: true,\n  });\n}\n\nfunction trackSearchResultClicked(resultClicked, rank) {\n  if (!rank || rank &lt; 1) return;\n  var c = $scope;\n  var query = _.get(c.data, \"q\");\n  var results = _.get(c.data, \"results\", []);\n\n  var result = results.find(function (e) {\n    return e.primary.trim() === resultClicked.trim();\n  });\n\n  var description = result.name != null ? result.name : result.primary;\n  var sourceTable = result.table != null ? result.table : null;\n\n  var payloadObject = {\n    action: \"TestAction\",\n    payload: {\n      query: query,\n      portal_id: c.portal.sys_id,\n      page_id: $scope.page &amp;&amp; $scope.page.id,\n      results_per_source: getSearchSources(c),\n      refinement_occurred: false,\n      click_rank: rank,\n      browser_info: $window.navigator.userAgent,\n      location: {},\n      result_clicked_sys_id: result.sys_id,\n      label_description: description,\n      source_table: sourceTable,\n    },\n  };\n\n  setUserLocationCoords(function (coords) {\n    payloadObject.payload.location.latitude = coords.latitude;\n    payloadObject.payload.location.longitude = coords.longitude;\n\n    $window.spSearchAnalytics = {\n      query: query,\n      refinement_occurred: false,\n    };\n    c.server.get(payloadObject);\n  });\n}\n\n// Event delegation for Updating click rank\n$(\".panel\").on(\"click\", \".result-item a\", function (e) {\n  var index = $(e.currentTarget).parent().parent().data(\"index\");\n  var resultClicked = e.currentTarget.innerText;\n  trackSearchResultClicked(resultClicked, index + 1);\n});",
                                "description": "This example collects direct search-results-clicked data from a custom search widget and\n        passes it to the search analytics [sys_search_result_clicked] table."
                            }
                        ],
                        "params": [
                            {
                                "name": "payload",
                                "type": "String",
                                "description": "JSON payload in String format containing the search data to send to the Search\n                Events [sys_search_event] and Search Source Events [sys_search_source_event] tables\n                for search results, or the Search Result Clicked [sys_search_result_clicked] table\n                when a user clicks a search result. Structure the payload as key-value pairs\n                according to the type of search data you would like to collect. <ul class=\"ul\" id=\"GlideSPSearchAnalytics-publish_S__ul_smd_smf_mhb\">\n                  <li class=\"li\">Collect data when the user searches for a term:<ul class=\"ul\" id=\"GlideSPSearchAnalytics-publish_S__ul_kcw_2qz_mhb\">\n                      <li class=\"li\"><span class=\"ph\"><samp class=\"ph codeph\">query</samp>: String. The query being\n              searched.</span></li>\n\n                      <li class=\"li\"><span class=\"ph\"><samp class=\"ph codeph\">portal_id</samp>: String. Sys_id of the portal\n                record from the Service Portals [sp_portal] table.</span></li>\n\n                      <li class=\"li\"><span class=\"ph\"><samp class=\"ph codeph\">page_id</samp>: String. Sys_id of the page record from\n                the Pages [sp_page] table.</span></li>\n\n                      <li class=\"li\"><samp class=\"ph codeph\">results_per_source</samp>: Array. Number of results returned\n                        from each search source.<ul class=\"ul\" id=\"GlideSPSearchAnalytics-publish_S__ul_hd2_crz_mhb\">\n                          <li class=\"li\"><samp class=\"ph codeph\">source_id</samp>: String. Sys_id of the search source record\n                            from the Search Sources [sp_search_source] table.</li>\n\n                          <li class=\"li\"><samp class=\"ph codeph\">number_of_results</samp>: Number. Number of results returned\n                            from the query for the specific search source.</li>\n\n                        </ul>\n</li>\n\n                      \n                      \n                      <li class=\"li\"><samp class=\"ph codeph\">search_results</samp>: Array. Results returned in the first page\n                        of search results.<ul class=\"ul\" id=\"GlideSPSearchAnalytics-publish_S__ul_um1_wgr_llb\">\n                          <li class=\"li\"><samp class=\"ph codeph\">record_id</samp>: String. Sys_id of the search result\n                            record.</li>\n\n                          <li class=\"li\"><samp class=\"ph codeph\">table_name</samp>: String. Name of the table in which the\n                            search result record was found.</li>\n\n                        </ul>\n</li>\n\n                      <li class=\"li\"><span class=\"ph\"><samp class=\"ph codeph\">refinement_occurred</samp>: Boolean. True if the\n                user filtered the search results; otherwise false. </span></li>\n\n                    </ul>\n\n                  </li>\n\n                  <li class=\"li\">Collect data when a user refines their search results:<ul class=\"ul\" id=\"GlideSPSearchAnalytics-publish_S__ul_oqs_yrz_mhb\">\n                      <li class=\"li\"><span class=\"ph\"><samp class=\"ph codeph\">query</samp>: String. The query being\n              searched.</span></li>\n\n                      <li class=\"li\"><span class=\"ph\"><samp class=\"ph codeph\">portal_id</samp>: String. Sys_id of the portal\n                record from the Service Portals [sp_portal] table.</span></li>\n\n                      <li class=\"li\"><span class=\"ph\"><samp class=\"ph codeph\">page_id</samp>: String. Sys_id of the page record from\n                the Pages [sp_page] table.</span></li>\n\n                      <li class=\"li\"><span class=\"ph\"><samp class=\"ph codeph\">refinement_occurred</samp>: Boolean. True if the\n                user filtered the search results; otherwise false. </span></li>\n\n                    </ul>\n</li>\n\n                  <li class=\"li\">Collect the rank of the search result that the user selected.<ul class=\"ul\" id=\"GlideSPSearchAnalytics-publish_S__ul_ckt_2sz_mhb\">\n                      <li class=\"li\"><span class=\"ph\"><samp class=\"ph codeph\">query</samp>: String. The query being\n              searched.</span></li>\n\n                      <li class=\"li\"><span class=\"ph\"><samp class=\"ph codeph\">portal_id</samp>: String. Sys_id of the portal\n                record from the Service Portals [sp_portal] table.</span></li>\n\n                      <li class=\"li\"><span class=\"ph\"><samp class=\"ph codeph\">click_rank</samp>: Number. Rank of the item the\n                user selected. For example, if the user clicked the third item in a list of search\n                results, the value is <samp class=\"ph codeph\">3</samp>.</span></li>\n\n                    </ul>\n</li>\n\n                  <li class=\"li\">Collect information on the search result that the user clicks. Data logs to\n                    the Search Result Clicked [sys_search_result_clicked] table.<ul class=\"ul\" id=\"GlideSPSearchAnalytics-publish_S__ul_xlt_brz_xjb\">\n                      <li class=\"li\"><span class=\"ph\"><samp class=\"ph codeph\">query</samp>: String. The query being\n              searched.</span></li>\n\n                      <li class=\"li\"><span class=\"ph\"><samp class=\"ph codeph\">portal_id</samp>: String. Sys_id of the portal\n                record from the Service Portals [sp_portal] table.</span></li>\n\n                      <li class=\"li\"><span class=\"ph\"><samp class=\"ph codeph\">page_id</samp>: String. Sys_id of the page record from\n                the Pages [sp_page] table.</span></li>\n\n                      <li class=\"li\"><samp class=\"ph codeph\">results_per_source</samp>: Array. Number of results returned\n                        from each search source.<ul class=\"ul\" id=\"GlideSPSearchAnalytics-publish_S__ul_i4s_vgr_zjb\">\n                          <li class=\"li\"><samp class=\"ph codeph\">source_id</samp>: String. Sys_id of the search source record\n                            from the Search Sources [sp_search_source] table.</li>\n\n                          <li class=\"li\"><samp class=\"ph codeph\">number_of_results</samp>: Number. Number of results returned\n                            from the query for the specific search source.</li>\n\n                        </ul>\n</li>\n\n                      <li class=\"li\"><span class=\"ph\"><samp class=\"ph codeph\">refinement_occurred</samp>: Boolean. True if the\n                user filtered the search results; otherwise false. </span></li>\n\n                      <li class=\"li\"><span class=\"ph\"><samp class=\"ph codeph\">click_rank</samp>: Number. Rank of the item the\n                user selected. For example, if the user clicked the third item in a list of search\n                results, the value is <samp class=\"ph codeph\">3</samp>.</span></li>\n\n                      <li class=\"li\"><samp class=\"ph codeph\">browser_info</samp>: String. Logs browser name, version, and\n                        platform.</li>\n\n                      <li class=\"li\"><samp class=\"ph codeph\">location</samp>: Float. Logs latitude and longitude coordinates\n                        of the user location.</li>\n\n                      <li class=\"li\"><samp class=\"ph codeph\">result_clicked_sys_id</samp>: String. Sys_id of the result the\n                        user selected.</li>\n\n                      <li class=\"li\"><samp class=\"ph codeph\">label_description</samp>: String. Description of the result that\n                        the user selected.</li>\n\n                      <li class=\"li\"><samp class=\"ph codeph\">source_table</samp>: String. Name of the source table containing\n                        the selected result.</li>\n\n                    </ul>\n</li>\n\n                  <li class=\"li\">Collect data when a user searches for a term and collect the rank of the\n                    search result that the user clicked:<ul class=\"ul\" id=\"GlideSPSearchAnalytics-publish_S__ul_m3k_vyl_rhb\">\n                      <li class=\"li\"><span class=\"ph\"><samp class=\"ph codeph\">query</samp>: String. The query being\n              searched.</span></li>\n\n                      <li class=\"li\"><span class=\"ph\"><samp class=\"ph codeph\">portal_id</samp>: String. Sys_id of the portal\n                record from the Service Portals [sp_portal] table.</span></li>\n\n                      <li class=\"li\"><span class=\"ph\"><samp class=\"ph codeph\">page_id</samp>: String. Sys_id of the page record from\n                the Pages [sp_page] table.</span></li>\n\n                      <li class=\"li\"><samp class=\"ph codeph\">results_per_source</samp>: Array. Number of results returned\n                        from each search source.<ul class=\"ul\" id=\"GlideSPSearchAnalytics-publish_S__ul_n3k_vyl_rhb\">\n                          <li class=\"li\"><samp class=\"ph codeph\">source_id</samp>: String. Sys_id of the search source record\n                            from the Search Sources [sp_search_source] table.</li>\n\n                          <li class=\"li\"><samp class=\"ph codeph\">number_of_results</samp>: Number. Number of results returned\n                            from the query for the specific search source.</li>\n\n                        </ul>\n</li>\n\n                      \n                      \n                      <li class=\"li\"><samp class=\"ph codeph\">search_results</samp>: Array. Summary of records returned in the\n                        first page of search results.<ul class=\"ul\" id=\"GlideSPSearchAnalytics-publish_S__ul_zw4_bdq_nlb\">\n                          <li class=\"li\"><samp class=\"ph codeph\">record_id</samp>: String. Sys_id of the search result\n                            record.</li>\n\n                          <li class=\"li\"><samp class=\"ph codeph\">table_name</samp>: String. Name of the table in which the\n                            search result record was found.</li>\n\n                        </ul>\n</li>\n\n                      <li class=\"li\"><span class=\"ph\"><samp class=\"ph codeph\">click_rank</samp>: Number. Rank of the item the\n                user selected. For example, if the user clicked the third item in a list of search\n                results, the value is <samp class=\"ph codeph\">3</samp>.</span></li>\n\n                    </ul>\n\n                  </li>\n\n                </ul>"
                            }
                        ],
                        "return": {
                            "type": "None",
                            "description": "Â "
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "Access these methods using the static object <span class=\"keyword apiname\">GlideStringUtil</span>. This class\n      is available in scoped and global scripts.",
                "short_description": "Provides string handling methods.",
                "identifier": "GlideStringUtilScopedAPI",
                "name": "GlideStringUtil - Scoped, Global",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "GSUS-dotToUnderBar_S",
                        "short_description": "Replaces periods with underscore characters.",
                        "description": "",
                        "name": "dotToUnderBar(String sourceString)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var filename=\"../../../../../../etc/passwd\";\ncleanFilename=GlideStringUtil.dotToUnderBar(filename);\ngs.info(cleanFilename);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "sourceString",
                                "type": "String",
                                "description": "The string to be processed."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "The string with periods replaced with underscores."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GSUS-escapeAllQuotes_S",
                        "short_description": "Remove quotes from a string.",
                        "description": "",
                        "name": "escapeAllQuotes(String sourceString)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "mystring=\"let's escape some quotes\";\nescapeQuote=GlideStringUtil.escapeAllQuotes(mystring);\ngs.info(escapeQuote);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "sourceString",
                                "type": "String",
                                "description": "The string to be processed."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "The string with quotes removed."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GSUS-escapeForHomePage_S",
                        "short_description": "Use for home pages to replace problem characters with escape characters.",
                        "description": "",
                        "name": "escapeForHomePage(String sourceString)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "mystring=\"&lt;test&gt; string \\n to escape\";\nescapedString=GlideStringUtil.escapeForHomePage(mystring);\ngs.info(escapedString);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "sourceString",
                                "type": "String",
                                "description": "The string to be processed."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "A string with problem characters replaced with escape characters."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GSUS-escapeHTML_S",
                        "short_description": "Use to replace illegal characters with their escape codes.",
                        "description": "<p>Using this method removes illegal characters that might cause the UI to render improperly,\n        or trigger a client side attack such as JavaScript or HTML injection.</p>",
                        "name": "escapeHTML(String htmlString)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "mydata='\"&lt;&gt;&amp;';\nmydata=GlideStringUtil.escapeHTML(mydata);\ngs.info(mydata);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "htmlString",
                                "type": "String",
                                "description": "The string to be processed."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "The string with illegal characters replaced with their escape codes."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GSUS-escapeNonPrintable_S",
                        "short_description": "Replaces non-printable characters with their printable notation.",
                        "description": "",
                        "name": "escapeNonPrintable(String sourceString)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "mystring=\"test \\x09 non \\x00 printable \\x07 chars\";\nescapedString=GlideStringUtil.escapeNonPrintable(mystring);\ngs.info(escapedString);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "sourceString",
                                "type": "String",
                                "description": "The string to be processed."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "The string with non-printable characters replaced with printable\n                notation."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GSUS-escapeQTermSeparator_S",
                        "short_description": "Replaces query term separators \"^\" with their escape sequence \"^^\".",
                        "description": "",
                        "name": "escapeQueryTermSeparator(String sourceString)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "myquery=\"test^Test\";\nescapedQuery=GlideStringUtil.escapeQueryTermSeparator(myquery);\ngs.info(escapedQuery);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "sourceString",
                                "type": "String",
                                "description": "The string to be processed."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "A string with query term separators replaced with the escape\n                characters."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GSUS-escapeTicks_S",
                        "short_description": "Replace quotes with escape characters by adding a backslash before each\n    quote.",
                        "description": "",
                        "name": "escapeTicks(String sourceString)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "mystring=\"let's try escapeTicks\";\nescaped=GlideStringUtil.escapeTicks(mystring);\ngs.info(escaped); ",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "sourceString",
                                "type": "String",
                                "description": "The string to be processed."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "The string with backslashes added before quotes."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GSUS-getHTMLValue_S",
                        "short_description": "Use to replace illegal HTML characters into HTML notation.",
                        "description": "<p>Using this method removes illegal characters that might cause the UI to render improperly,\n        or trigger a client side attack such as JavaScript or HTML injection.</p>",
                        "name": "getHTMLValue(String sourceString)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "mydata='&amp;';\nhtmlvalue=GlideStringUtil.getHTMLValue(mydata);\ngs.info(htmlvalue);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "sourceString",
                                "type": "String",
                                "description": "The string to be processed."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "The string with illegal characters replaced with HTML notation."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GSUS-getNumeric_S",
                        "short_description": "Extract numeric characters from a string.",
                        "description": "",
                        "name": "getNumeric(String sourceString)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "mystring='123 test 456 String 789 cleaning';\nonlyNumeric=GlideStringUtil.getNumeric(mystring);\ngs.info(onlyNumeric); ",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "sourceString",
                                "type": "String",
                                "description": "The string to be processed."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "A string containing only numeric characters."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GSUS-isBase64_S",
                        "short_description": "Returns true if the specified string is a valid base64 string.",
                        "description": "",
                        "name": "isBase64(String sourceString)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "//(adding a \"*\" to corrupt the base64 format)\nbase64=\"GethdTYehdtshetB*\";\nisValid=GlideStringUtil.isBase64(base64);\ngs.info(isValid);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "sourceString",
                                "type": "String",
                                "description": "The string to be processed."
                            }
                        ],
                        "return": {
                            "type": "Boolean",
                            "description": "True if the specified string is in valid base64 format."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GSUS-isEligibleSysID_S",
                        "short_description": "Returns true if the specified string is in valid sys ID format.",
                        "description": "<p>The sys ID format is a sequence of 32 hexadecimal characters where all the characters are\n        in the range [0-9, a-f, A-F].</p>",
                        "name": "isEligibleSysID(String sourceString)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "sysID=\"62826bf03710200044e0bfc8bcbe5df1\";\nisElig=GlideStringUtil.isEligibleSysID(sysID);\ngs.info(isElig);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "sourceString",
                                "type": "String",
                                "description": "The string to be processed."
                            }
                        ],
                        "return": {
                            "type": "Boolean",
                            "description": "True when the specified string is in the valid sys ID format."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GSUS-newLinesToBreaks_S",
                        "short_description": "Replaces the new line character, \"/n\", with a break code \"<br/>\".",
                        "description": "",
                        "name": "newLinesToBreaks(String sourceString)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "mystring=\"new line break \\n, this is after the break\";\nreplaceNewLine=GlideStringUtil.newLinesToBreaks(mystring);\ngs.info(replaceNewLine); ",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "sourceString",
                                "type": "String",
                                "description": "The string to be processed."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "The string with new line characters replaced with HTML break code."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GSUS-normalizeWhitespace_S",
                        "short_description": "Replaces carriage returns, line feeds, and tabs with spaces, and then removes leading,\n    trailing, and duplicate spaces.",
                        "description": "",
                        "name": "normalizeWhitespace(String sourceString)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "mystring=\"test with \\n (new line) and \\t (tabulation)\";\nnormalizedString=GlideStringUtil.normalizeWhitespace(mystring);\ngs.info(normalizedString);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "sourceString",
                                "type": "String",
                                "description": "The string to be processed."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "The string with carriage returns, line feeds, and tabs replaced with spaces,\n                and then  leading, trailing, and duplicate spaces removed."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GSUS-unescapeHTML_S",
                        "short_description": "Replaces escape characters with their respective character.",
                        "description": "<p>This method replaces these escape characters: <samp class=\"ph codeph\">&amp;lt; &amp;gt: &amp;nbsp;\n          &amp;amp; &amp;quote;</samp>.</p><p><div class=\"note note\"><span class=\"notetitle\">Note:</span> In scoped applications call this method as <span class=\"keyword apiname\">unescapeHTML(String)</span>. In\n          global applications call this method as <span class=\"keyword apiname\">unEscapeHTML(String)</span>.</div></p>",
                        "name": "unEscapeHTML(String htmlString)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "mydata='&amp;quot;&amp;lt;&amp;gt;&amp;amp;';\nunescaped=GlideStringUtil.unEscapeHTML(mydata);\ngs.info(unescaped);",
                                "description": "This code example shows the method being called in a global application."
                            },
                            {
                                "script": "mydata='&amp;quot;&amp;lt;&amp;gt;&amp;amp;';\nunescaped=GlideStringUtil.unescapeHTML(mydata);\ngs.info(unescaped);",
                                "description": "This code example shows the method being called in a scoped application."
                            }
                        ],
                        "params": [
                            {
                                "name": "htmlString",
                                "type": "String",
                                "description": "String to process."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "String with the escape characters replaced."
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "Content is returned as a string, not as a byte array when <span class=\"keyword apiname\">getContent()</span> is\n   called.<br/><br/>Content is returned as a GlideScriptableInputStream object when\n    <span class=\"keyword apiname\">getContentStream()</span> is called. The GlideScriptableInputStream contains the\n   actual bytes not converted into a String.",
                "short_description": "The GlideSysAttachment API provides a way to handle attachments.",
                "identifier": "c_GlideSysAttachmentScopedAPI",
                "name": "GlideSysAttachment",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "r_SGSA-GlideSysAttachment",
                        "short_description": "Creates an instance of the GlideSysAttachment class.",
                        "description": "",
                        "name": "GlideSysAttachment()",
                        "type": "Constructor",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SGSA-copy_S_S_S_S",
                        "short_description": "Copies attachments from the source record to the target record.",
                        "description": "",
                        "name": "copy(String sourceTable, String sourceID, String targetTable, String targetID)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var attachment = new GlideSysAttachment();\nvar incidentSysID = 'ab1b30031b04ec101363ff37dc4bcbfc';\nvar incGR = new GlideRecord('incident');\nincGR.get(incidentSysID);\n\nvar copiedAttachments = attachment.copy('incident', incidentSysID, 'problem', incGR.getValue('problem_id'));\ngs.info('Copied attachments: ' + copiedAttachments);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "sourceTable",
                                "type": "String",
                                "description": "Name of the table with the attachments to be copied."
                            },
                            {
                                "name": "sourceID",
                                "type": "String",
                                "description": "Source table's sys_id."
                            },
                            {
                                "name": "targetTable",
                                "type": "String",
                                "description": "Name of the table on which to add the attachments."
                            },
                            {
                                "name": "targetID",
                                "type": "String",
                                "description": "Target table's sys_id."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "Array of sys_ids of the attachments that were copied."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SGSA-deleteAttachment_S",
                        "short_description": "Deletes the specified attachment.",
                        "description": "",
                        "name": "deleteAttachment(String attachmentID)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var attachment = new GlideSysAttachment();\nvar attachmentSysID = 'a87769531b0820501363ff37dc4bcba2';\nattachment.deleteAttachment(attachmentSysID);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "attachmentID",
                                "type": "String",
                                "description": "Attachment's sys_id."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SGSA-getAttachments_S_S",
                        "short_description": "Returns a GlideRecord containing the matching attachment metadata such as name, type,\n    or size.",
                        "description": "",
                        "name": "getAttachments(String tableName, String sys_id)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var attachment = new GlideSysAttachment();\n\nvar agr = attachment.getAttachments('&lt;table_name&gt;', '&lt;record_sys_id&gt;');\n\nwhile(agr.next())\ngs.info(agr.getValue('file_name'));",
                                "description": "The following script lists attachment file names for a record with two attachments."
                            }
                        ],
                        "params": [
                            {
                                "name": "tableName",
                                "type": "String",
                                "description": "Name of the table to which the attachment belongs; for example,\n                incident."
                            },
                            {
                                "name": "sys_id",
                                "type": "String",
                                "description": "The sys_id of record to which the attachment belongs."
                            }
                        ],
                        "return": {
                            "type": "GlideRecord",
                            "description": "GlideRecord object containing the matching attachment metadata such as name,\n                type, or size."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SGSA-getContent_GR",
                        "short_description": "Returns the attachment content as a string.",
                        "description": "",
                        "name": "getContent(GlideRecord sysAttachment)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var attachment = new GlideSysAttachment();\nvar incidentSysID = 'ab1b30031b04ec101363ff37dc4bcbfc';\n\nvar agr = attachment.getAttachments('incident', incidentSysID);\n\nif (agr.next()) {\n  var attachmentContent = attachment.getContent(agr);\n  gs.info('Attachment content: ' + attachmentContent);\n}",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "sysAttachment",
                                "type": "GlideRecord",
                                "description": "Attachment record."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "Attachment contents as a string. Returns up to 5MB of data."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SGSA-getContentBase64_GR",
                        "short_description": "Returns the attachment content as a string with base64 encoding.",
                        "description": "",
                        "name": "getContentBase64(GlideRecord sysAttachment)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var attachment = new GlideSysAttachment();\nvar incidentSysID = 'ab1b30031b04ec101363ff37dc4bcbfc';\n\nvar agr = attachment.getAttachments('incident', incidentSysID);\n\nif (agr.next()) {\n  var attachmentContent = attachment.getContentBase64(agr);\n  gs.info('Attachment content base64 encoded: ' + attachmentContent);\n}",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "sysAttachment",
                                "type": "GlideRecord",
                                "description": "Attachment record."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "Attachment contents as a string with base64 encoding. Returns up to 5MB of\n                data."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SGSA-getContentStream_S",
                        "short_description": "Returns a GlideScriptableInputStream object given the sys_id of an\n    attachment.",
                        "description": "<p>You can use the <a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/c_GlideTextReaderScopedAPI\" title=\"Provides the ability to read single lines from an input stream. Because an input stream is used, it is not subject to the 5MB attachment size limit.\">GlideTextReader</a> API to read the content stream.</p>",
                        "name": "getContentStream(String sysID)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var attachment = new GlideSysAttachment();\nvar attachmentSysID = '6e4621df1bc420501363ff37dc4bcbb0';\nvar attachmentContentStream = attachment.getContentStream(attachmentSysID);\ngs.info('Attachment content stream: ' + attachmentContentStream);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "sysID",
                                "type": "String",
                                "description": "Attachment sys_id."
                            }
                        ],
                        "return": {
                            "type": "GlideScriptableInputStream",
                            "description": "Stream that contains the attachment content."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SGSA-write_GR_S_S_S",
                        "short_description": "Attaches a specified attachment to the specified record.",
                        "description": "",
                        "name": "write(GlideRecord record, String fileName, String contentType, String content)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var attachment = new GlideSysAttachment();\n\n//setup inputs\nvar rec = new GlideRecord('incident');\nrec.get('78271e1347c12200e0ef563dbb9a7109');\nvar fileName = 'example.txt';\nvar contentType = 'text/csv';\nvar content = 'The text that is stored inside my file';\n\nvar agr = attachment.write(rec, fileName, contentType, content);\n\ngs.info('The attachment sys_id is: ' + agr);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "content",
                                "type": "String",
                                "description": "Attachment content."
                            },
                            {
                                "name": "contentType",
                                "type": "String",
                                "description": "Attachment content type."
                            },
                            {
                                "name": "fileName",
                                "type": "String",
                                "description": "Attachment file name."
                            },
                            {
                                "name": "record",
                                "type": "GlideRecord",
                                "description": "Record to which to attach the attachment."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "Attachment sys_id. Returns null if the attachment was not added."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SGSA-writeBase64_GR_S_S_S",
                        "short_description": "Inserts an attachment for the specified record using base64 encoded\n    content.",
                        "description": "",
                        "name": "writeBase64(GlideRecord now_GR, String fileName, String contentType, String content_base64Encoded)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var attachment = new GlideSysAttachment();\n\nvar rec = new GlideRecord('incident');\nvar incidentSysID = 'ab1b30031b04ec101363ff37dc4bcbfc';\nrec.get(incidentSysID);\nvar fileName = 'example.txt';\nvar contentType = 'text/csv';\nvar base64Encodedcontent = 'SSBhbSB0ZXh0Lg==';\n\nvar agr = attachment.writeBase64(rec, fileName, contentType, base64Encodedcontent);\n\ngs.info('The attachment sys_id is: ' + agr);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "now_GR",
                                "type": "GlideRecord",
                                "description": "Record to which the attachment is to be attached."
                            },
                            {
                                "name": "fileName",
                                "type": "String",
                                "description": "Attachment's file name."
                            },
                            {
                                "name": "contentType",
                                "type": "String",
                                "description": "Attachment's content type."
                            },
                            {
                                "name": "content",
                                "type": "String",
                                "description": "Attachment content in base64 format."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "Sys_id of the attachment created."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SGS-writeContentStrm_GR_S_S_GSIS",
                        "short_description": "Inserts an attachment using the input stream.",
                        "description": "",
                        "name": "writeContentStream(GlideRecord gr, String fileName, String contentType, GlideScriptableInputStream inputStream)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "function copyAttachmentToGlideRecord(conceptSysId) {\n  var targetGlideRecord = new GlideRecord(\"test_table\");\n  if (!targetGlideRecord.get(conceptSysId)) {\n     throw (\"Cannot find record created by test with sys_id: \" + conceptSysId);\n  }\n\n  var sourceAttachmentGlideRecord = new GlideRecord('sys_attachment');    \n  var fileName = sourceAttachmentGlideRecord.getValue('file_name');\n  var contentType = sourceAttachmentGlideRecord.getValue('content_type');\n  var sourceAttachmentSysId = sourceAttachmentGlideRecord.getValue('sys_id');\n\n  var gsa = new GlideSysAttachment();\n  gsa.writeContentStream(\n    targetGlideRecord,\n    filename,\n    contentType,\n    gsa.getContentStream(sourceAttachmentSysId));\n  gs.info(\"Attachment created\");\n}",
                                "description": "Attaches a content stream from the sys_attachment table to a test_table record."
                            }
                        ],
                        "params": [
                            {
                                "name": "now_GR",
                                "type": "GlideRecord",
                                "description": "The record to which the attachment is to be attached."
                            },
                            {
                                "name": "fileName",
                                "type": "String",
                                "description": "The attachment's file name."
                            },
                            {
                                "name": "contentType",
                                "type": "String",
                                "description": "The attachment's content type."
                            },
                            {
                                "name": "content",
                                "type": "GlideScriptableInputStream",
                                "description": "The attachment content."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "The sysID of the attachment created."
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "",
                "short_description": "The scoped GlideSysListControl class allows you to determine if the New or Edit buttons\n  are displayed.",
                "identifier": "c_GlideSysListControlScoped",
                "name": "GlideSysListControl",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "r_ScopedGlideSysListControl-GlideSysListControl_String",
                        "short_description": "Instantiates a GlideSysListControl object.",
                        "description": "",
                        "name": "GlideSysListControl(String tableName)",
                        "type": "Constructor",
                        "examples": [],
                        "params": [
                            {
                                "name": "tableName",
                                "type": "String",
                                "description": "Name of the table"
                            }
                        ],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideSysListControl-getControlID",
                        "short_description": "Returns the sys_id for the control.",
                        "description": "",
                        "name": "getControlID()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var sysListCtrl = new GlideSysListControl(\"incident\");\nvar controlID = sysListCtrl.getControlID();\ngs.info(controlID);",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "sys_id of the control"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideSysListControl-isOmitEditButton",
                        "short_description": "Returns true if the edit button is not displayed.",
                        "description": "",
                        "name": "isOmitEditButton()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var sysListCtrl = new GlideSysListControl(\"incident\");\nvar isOmitted = sysListCtrl.isOmitEditButton();\ngs.info(isOmitted);",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "True when the edit button is not displayed."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideSysListControl-isOmitNewButton",
                        "short_description": "Returns true when the New button is not displayed.",
                        "description": "",
                        "name": "isOmitNewButton()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var sysListCtrl = new GlideSysListControl(\"incident\");\nvar isOmitted = sysListCtrl.isOmitNewButton();\ngs.info(isOmitted);",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "True when the new button is not displayed."
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "Many of the GlideSystem methods facilitate the easy inclusion of dates in query ranges, and are\n   most often used in filters and reporting.",
                "short_description": "The scoped GlideSystem (referred to by the variable name 'gs' in any server-side\n  JavaScript) API provides a number of convenient methods to get information about the system, the\n  current logged in user, etc.",
                "identifier": "c_GlideSystemScopedAPI",
                "name": "GlideSystem",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "r_ScopedGlideSystemAddErrorMessage_Object",
                        "short_description": "Adds an error message for the current session.",
                        "description": "",
                        "name": "addErrorMessage(String message)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "gs.include(\"PrototypeServer\");\n  var ValidatePasswordStronger = Class.create();\n  ValidatePasswordStronger.prototype = {\n       process : function() {\n          var user_password = request.getParameter(\"user_password\");\n          var min_len = 8;\n          var rules = \"Password must be at least \" + min_len + \n             \" characters long and contain a digit, an uppercase letter, and a lowercase letter.\";\n          if (user_password.length() &lt; min_len) {\n             gs.addErrorMessage(\"TOO SHORT: \" + rules);\n             return false;\n          }\n          var digit_pattern = new RegExp(\"[0-9]\", \"g\");\n          if (!digit_pattern.test(user_password)) {\n             gs.addErrorMessage(\"DIGIT MISSING: \" + rules);\n             return false;\n          }\n          var upper_pattern = new RegExp(\"[A-Z]\", \"g\");\n          if (!upper_pattern.test(user_password)) {\n             gs.addErrorMessage(\"UPPERCASE MISSING: \" + rules);\n             return false;\n          }\n          var lower_pattern = new RegExp(\"[a-z]\", \"g\");\n          if (!lower_pattern.test(user_password)) {\n             gs.addErrorMessage(\"LOWERCASE MISSING: \" + rules);\n             return false;\n          }\n          return true; // password is OK\n       }\n  }",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "message",
                                "type": "String",
                                "description": "Message to add."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideSystemAddInfoMessage_Object",
                        "short_description": "Adds an info message for the current session. This method is not supported for\n    asynchronous business rules.",
                        "description": "",
                        "name": "addInfoMessage(String message)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "if ((!current.u_date1.nil()) &amp;&amp; (!current.u_date2.nil())) {\n  var start = current.u_date1.getGlideObject().getNumericValue();\n  var end = current.u_date2.getGlideObject().getNumericValue();\n  if (start &gt; end) {\n    gs.addInfoMessage('start must be before end');\n    current.u_date1.setError('start must be before end');\n    current.setAbortAction(true);\n  }\n}",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "message",
                                "type": "String",
                                "description": "Info message to add."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SGSYS-base64Decode_S",
                        "short_description": "Returns an ASCII string from the specified base64 string.",
                        "description": "",
                        "name": "base64Decode(String source)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "source",
                                "type": "String",
                                "description": "A base64 encoded string."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "The decoded string."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SGSYS-base64Encode_S",
                        "short_description": "Creates a base64 string from the specified string.",
                        "description": "",
                        "name": "base64Encode(String source)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var mac = new CertificateEncryption;\nvar key = \"sample_key\"; \nkey = gs.base64Encode(key);\nmac.generateMac(key, \"HmacSHA256\", \"sample_data\");",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "source",
                                "type": "String",
                                "description": "String to encode."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "Encoded base64 string."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SGSYS-beginningOfLastMonth",
                        "short_description": "Returns the date and time for the beginning of last month in GMT.",
                        "description": "",
                        "name": "beginningOfLastMonth()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "GMT beginning of last month, in the format yyyy-mm-dd hh:mm:ss"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SGSYS-beginningOfLastWeek",
                        "short_description": "Returns the date and time for the beginning of last week in GMT.",
                        "description": "",
                        "name": "beginningOfLastWeek()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "GMT beginning of last week, in the format yyyy-mm-dd hh:mm:ss"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SGSYS-beginningOfNextMonth",
                        "short_description": "Returns the date and time for the beginning of next month in GMT.",
                        "description": "",
                        "name": "beginningOfNextMonth()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "GMT beginning of next month, in the format yyyy-mm-dd hh:mm:ss"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideSystemBeginNxtWk",
                        "short_description": "Returns the date and time for the beginning of next week in GMT.",
                        "description": "",
                        "name": "beginningOfNextWeek()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The GMT beginning of next week, in the format yyyy-mm-dd hh:mm:ss."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SGSYS-beginningOfNextYear",
                        "short_description": "Returns the date and time for the beginning of next year in GMT.",
                        "description": "",
                        "name": "beginningOfNextYear()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "GMT beginning of next year, in the format yyyy-mm-dd hh:mm:ss"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SGSYS-beginningOfThisMonth",
                        "short_description": "Returns the date and time for the beginning of this month in GMT.",
                        "description": "",
                        "name": "beginningOfThisMonth()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "GMT beginning of this month, in the format yyyy-mm-dd hh:mm:ss"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SGSYS-beginningOfThisQuarter",
                        "short_description": "Returns the date and time for the beginning of this quarter in GMT.",
                        "description": "",
                        "name": "beginningOfThisQuarter()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "GMT beginning of this quarter, in the format yyyy-mm-dd hh:mm:ss"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SGSYS-beginningOfThisWeek",
                        "short_description": "Returns the date and time for the beginning of this week in GMT.",
                        "description": "",
                        "name": "beginningOfThisWeek()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "GMT beginning of this week, in the format yyyy-mm-dd hh:mm:ss"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SGSYS-beginningOfThisYear",
                        "short_description": "Returns the date and time for the beginning of this year in GMT.",
                        "description": "",
                        "name": "beginningOfThisYear()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "GMT beginning of this year, in the format yyyy-mm-dd hh:mm:ss"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SGSYS-dateGenerate_S_S",
                        "short_description": "Generates a date and time for the specified date in GMT.",
                        "description": "",
                        "name": "dateGenerate(String date, String range)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "date",
                                "type": "String",
                                "description": "Format: yyyy-mm-dd"
                            },
                            {
                                "name": "range",
                                "type": "String",
                                "description": "Start, end, or a time in the 24 hour format hh:mm:ss."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "A date and time in the format yyyy-mm-dd hh:mm:ss. If range is start, the\n                returned value is yyyy-mm-dd 00:00:00; If range is end the return value is\n                yyyy-mm-dd 23:59:59."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SGSYS-daysAgo_N",
                        "short_description": "Returns the date and time for a specified number of days ago.",
                        "description": "",
                        "name": "daysAgo(Number days)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "function contractNoticeDue() {\n    var now_GR = new GlideRecord(\"contract\");\n    now_GR.addQuery(\"u_contract_status\", \"Active\");\n    now_GR.query();\n    while (now_GR.next()) {\n        if ((now_GR.u_termination_date &lt;= gs.daysAgo(-90)) &amp;&amp; (now_GR.u_contract_duration == \"Long\")) {\n            now_GR.u_contract_status = \"In review\";\n        } \n        else if ((now_GR.u_termination_date &lt;= gs.daysAgo(-50)) &amp;&amp; (now_GR.u_contract_duration == \"Medium\")) {\n            now_GR.u_contract_status = \"In review\";\n        } \n        else if ((now_GR.u_termination_date &lt;= gs.daysAgo(-10)) &amp;&amp; (now_GR.u_contract_duration == \"Short\")) {\n            now_GR.u_contract_status = \"In review\";\n        }\n    }\n    now_GR.update();\n}",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "days",
                                "type": "Number",
                                "description": "Integer number of days"
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "GMT in the format yyyy-mm-dd hh:mm:ss"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SGSYS-daysAgoEnd_N",
                        "short_description": "Returns the date and time for the end of the day a specified number of days\n    ago.",
                        "description": "",
                        "name": "daysAgoEnd(Number days)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "days",
                                "type": "Number",
                                "description": "Integer number of days"
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "GMT end of the day in the format yyyy-mm-dd hh:mm:ss"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SGSYS-daysAgoStart_N",
                        "short_description": "Returns the date and time for the beginning of the day a specified number of days\n    ago.",
                        "description": "",
                        "name": "daysAgoStart(Number days)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var now_GR = new GlideRecord('sysapproval_approver');\nnow_GR.addQuery('state', 'requested');\nnow_GR.addQuery('sys_updated_on', '&lt;', gs.daysAgoStart(5));\nnow_GR.query();",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "days",
                                "type": "String",
                                "description": "Integer number of days"
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "GMT start of the day in the format yyyy-mm-dd hh:mm:ss"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideSystemDebug_String_Object_Object_Object_Object_Object",
                        "short_description": "Writes a debug message to the system log.",
                        "description": "",
                        "name": "debug(String message, Object parm1, Object parm2, Object parm3, Object parm4, Object parm5)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "gs.debug(\"This is a debug message\");\nvar myFirstName = \"Abel\";\nvar myLastName = \"Tuter\";\ngs.debug(\"This is a debug message from {0}.{1}\", myFirstName, myLastName);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "message",
                                "type": "String",
                                "description": "The log message with place holders for any variable arguments."
                            },
                            {
                                "name": "param1",
                                "type": "Object",
                                "description": "(Optional) First variable argument."
                            },
                            {
                                "name": "param2",
                                "type": "Object",
                                "description": "(Optional) Second variable argument."
                            },
                            {
                                "name": "param3",
                                "type": "Object",
                                "description": "(Optional) Third variable argument."
                            },
                            {
                                "name": "param4",
                                "type": "Object",
                                "description": "(Optional) Fourth variable argument."
                            },
                            {
                                "name": "param5",
                                "type": "Object",
                                "description": "(Optional) Fifth variable argument."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SGSYS-endOfLastMonth",
                        "short_description": "Returns the date and time for the end of last month in GMT.",
                        "description": "",
                        "name": "endOfLastMonth()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "GMT end of last month, in the format yyyy-mm-dd hh:mm:ss"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SGSYS-endOfLastWeek",
                        "short_description": "Returns the date and time for the end of last week in GMT.",
                        "description": "",
                        "name": "endOfLastWeek()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "GMT end of last week, in the format yyyy-mm-dd hh:mm:ss"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SGSYS-endOfLastYear",
                        "short_description": "Returns the date and time for the end of last year in GMT.",
                        "description": "",
                        "name": "endOfLastYear()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "GMT in format yyyy-mm-dd hh:mm:ss"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SGSYS-endOfNextMonth",
                        "short_description": "Returns the date and time for the end of next month in GMT.",
                        "description": "",
                        "name": "endOfNextMonth()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "GMT in the format yyyy-mm-dd hh:mm:ss"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideSystemEofNW",
                        "short_description": "Returns the date and time for the end of next week in GMT.",
                        "description": "",
                        "name": "endOfNextWeek()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "GMT in the format yyyy-mm-dd hh:mm:ss"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SGSYS-endOfNextYear",
                        "short_description": "Returns the date and time for the end of next year in GMT.",
                        "description": "",
                        "name": "endOfNextYear()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "GMT in the format yyyy-mm-dd hh:mm:ss"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SGSYS-endOfThisMonth",
                        "short_description": "Returns the date and time for the end of this month in GMT.",
                        "description": "",
                        "name": "endOfThisMonth()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "GMT in the format yyyy-mm-dd hh:mm:ss"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SGSYS-endOfThisQuarter",
                        "short_description": "Returns the date and time for the end of this quarter in GMT.",
                        "description": "",
                        "name": "endOfThisQuarter()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "GMT in the format yyyy-mm-dd hh:mm:ss"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SGSYS-endOfThisWeek",
                        "short_description": "Returns the date and time for the end of this week in GMT.",
                        "description": "",
                        "name": "endOfThisWeek()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "GMT in the format yyyy-mm-dd hh:mm:ss"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SGSYS-endOfThisYear",
                        "short_description": "Returns the date and time for the end of this year in GMT.",
                        "description": "",
                        "name": "endOfThisYear()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "GMT in the format yyyy-mm-dd hh:mm:ss"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideSystemError_String_Object_Object_Object_Object_Object",
                        "short_description": "Writes an error message to the system log.",
                        "description": "<p>This method accepts up to five variable arguments (varargs) in the message using the Java\n        MessageFormat placeholder replacement pattern.</p><p><div class=\"note note\"><span class=\"notetitle\">Note:</span> Variables must contain valid values for this method to provide correct output.</div></p>",
                        "name": "error(String message, Object parm1, Object parm2, Object parm3, Object parm4, Object parm5)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "gs.error(\"This is an error message\");\nvar myFirstName = \"Abel\";\nvar myLastName = \"Tuter\";\ngs.error(\"This is an error message from {0}.{1}\", myFirstName, myLastName);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "message",
                                "type": "String",
                                "description": "The log message with place holders for any variable arguments."
                            },
                            {
                                "name": "param1",
                                "type": "Object",
                                "description": "(Optional) First variable argument."
                            },
                            {
                                "name": "param2",
                                "type": "Object",
                                "description": "(Optional) Second variable argument."
                            },
                            {
                                "name": "param3",
                                "type": "Object",
                                "description": "(Optional) Third variable argument."
                            },
                            {
                                "name": "param4",
                                "type": "Object",
                                "description": "(Optional) Fourth variable argument."
                            },
                            {
                                "name": "param5",
                                "type": "Object",
                                "description": "(Optional) Fifth variable argument."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideSystemEventQueue_String_Object_String_String_String",
                        "short_description": "Queues an event for the event manager.",
                        "description": "",
                        "name": "eventQueue(String name, Object instance, String parm1, String parm2, String queue)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "if (current.operation() != 'insert' &amp;&amp; current.comments.changes()) {\n    gs.eventQueue('incident.commented', current, gs.getUserID(), gs.getUserName());\n}",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "name",
                                "type": "String",
                                "description": "Name of the event being queued."
                            },
                            {
                                "name": "instance",
                                "type": "Object",
                                "description": "GlideRecord object, such as \"current\"."
                            },
                            {
                                "name": "parm1",
                                "type": "String",
                                "description": "Optional. Saved with the instance if specified."
                            },
                            {
                                "name": "parm2",
                                "type": "String",
                                "description": "Optional. Saved with the instance if specified."
                            },
                            {
                                "name": "queue",
                                "type": "String",
                                "description": "Optional. Name of the queue."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SGSYS-eventQSched_S_O_S_S_O",
                        "short_description": "Queues an event in the event manager.",
                        "description": "<p>The passed in event schedule information is stored in the Events [sysevent] table. For\n        additional information on events, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/platform-events/concept/events.html\" target=\"_blank\">Events</a>.</p>",
                        "name": "eventQueueScheduled(String name, Object instance, String parm1, String parm2, Object expiration)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var requestXml = requestBody.dataString;\nvar processTime = new GlideDateTime();\nprocessTime.addDaysLocalTime(7);\ngs.eventQueueScheduled(âsn_app.user.deactivateâ, gr, requestXML, gs.getUserID(), processTime);",
                                "description": "This example shows how to call the method using a GlideRecord, two parameters that are\n        passed to the event script, and a specified time to schedule the event."
                            },
                            {
                                "script": "gs.eventQueueScheduled(âevent.testâ, â0e29421383101000dada83ec37d9292dâ, ââ, ââ, ââ);",
                                "description": "This example shows how to call the method using a sys_id and the default values for the\n        optional parameters."
                            }
                        ],
                        "params": [
                            {
                                "name": "name",
                                "type": "String",
                                "description": "Name of the event to queue."
                            },
                            {
                                "name": "instance",
                                "type": "Object/String",
                                "description": "GlideRecord object or the sys_id of the record to which this event\n                applies."
                            },
                            {
                                "name": "parm1",
                                "type": "String",
                                "description": "Optional. String to pass into the event script. This parameter is free-form and\n                depends on the implementation of the event script.<p class=\"p\">Default: If the\n                    <span class=\"keyword parmname\">instance</span> parameter is a GlideRecord object, then the\n                  default is the display value for that GlideRecord (now_GR.getDisplayValue) otherwise\n                  it is <samp class=\"ph codeph\">null</samp>. </p>"
                            },
                            {
                                "name": "parm2",
                                "type": "String",
                                "description": "Optional. String to pass into the event script. This parameter is free-form and\n                depends on the implementation of the event script. <p class=\"p\">Default:\n                  <samp class=\"ph codeph\">null</samp></p>"
                            },
                            {
                                "name": "expiration",
                                "type": "Object",
                                "description": "Optional. GlideDateTime object or a date/time type element that specifies the\n                date and time to process the event.<p class=\"p\">Default: Current date/time</p>"
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SGSYS-executeGr",
                        "short_description": "Executes a job for a scoped application.",
                        "description": "<p>You can only use this method on a job in the same application as the script calling this\n        method.</p>",
                        "name": "executeNow(GlideRecord job)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "scheduleImportJob: function () {\n  var jobId = '61847fe04c603300fa9bb64c2b491dac';\n  var now_GR = new GlideRecord('sysauto_script');\n  if (!now_GR.get(jobId)) {\n    throw new Error('Unable to find import job');\n  }\n  gs.executeNow(now_GR);\n}",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "job",
                                "type": "GlideRecord",
                                "description": "Job to run."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "Returns the sys_id of the scheduled job. Returns null if the job is global."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideSystemGenerateGUID",
                        "short_description": "Generates a GUID that can be used when a unique identifier is required.",
                        "description": "",
                        "name": "generateGUID()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "personalId = gs.generateGUID();\ngs.info(personalId);",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "A 32-character hexadecimal GUID."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideSystemGetCallerScopeName",
                        "short_description": "Gets the caller scope name; returns null if there is no caller.",
                        "description": "",
                        "name": "getCallerScopeName()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var Scopea = Class.create(); \n \nScopea.prototype = { \n    initialize: function() { \n    }, \n \n    callerScope: function() { \n        var scopeb = new app_scope_b.Scopeb(); \n        return scopeb.callerscope(); \n    }, \n \n    type: 'Scopea' \n}",
                                "description": "This example shows two script includes that are set to Accessible from all application\n        scopes. One script include is created within app_scope_a."
                            },
                            {
                                "script": "var Scopeb = Class.create(); \n \nScopeb.prototype = { \n    initialize: function() { \n        this._constructorCallerScope = gs.getCallerScopeName(); \n    }, \n \n    callerscope: function() { \n        return gs.getCallerScopeName(); \n    }, \n \n    getConstructorCallerScope: function() { \n        return this._constructorCallerScope; \n    }, \n \n    type: 'Scopeb' \n}",
                                "description": "This example shows another script include created within app_scope_b."
                            },
                            {
                                "script": "gs.info(new Scopea().getCallerScopeName());",
                                "description": "This script can be used within scope app_scope_a to get the scope name of the callerâin\n        this case app_scope_b."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The caller's scope name, or null if there is no caller."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideSystemGetCssCacheVersionString",
                        "short_description": "Gets a string representing the cache version for a CSS file.",
                        "description": "",
                        "name": "getCssCacheVersionString()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var verStr = gs.getCssCacheVersionString();\ngs.info(verStr);",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The CSS cache version."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideSystemGetCurrentApplicationId",
                        "short_description": "Gets the ID of the current application as set using the Application Picker.",
                        "description": "",
                        "name": "getCurrentApplicationId()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var currentId = gs.getCurrentApplicationId();\ngs.info(currentId);",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The current application's sys_id, or global in none is set."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideSystemGetCurrentScopeName",
                        "short_description": "Gets the name of the current scope.",
                        "description": "",
                        "name": "getCurrentScopeName()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var currentScope = gs.getCurrentScopeName();\ngs.info(currentScope);",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The current scope name."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SGSYS-getErrorMessages",
                        "short_description": "Returns the list of error messages for the session that were added by\n      <span class=\"keyword apiname\">addErrorMessage()</span>.",
                        "description": "",
                        "name": "getErrorMessages()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "List of error messages"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SGSYS-getEscapedMessage_S_O",
                        "short_description": "Retrieves the specified message from the Message [sys_ui_message] table. If the message\n    has HTML special characters, replaces them with the corresponding HTML name codes. For example,\n      <samp class=\"ph codeph\">&amp;</samp> becomes <samp class=\"ph codeph\">&amp;amp;</samp>.",
                        "description": "<p>If the specified message identifier (Key)\n                  exists in the Message [sys_ui_message] table for the current language, the method\n                  returns the translated message with all special characters returned as escape\n                  sequences. If the specified message identifier does not exist for the current\n                  language, then the method returns the English version of the message with all\n                  special characters returned as escape sequences. If the message identifier does\n                  not exist in the table, then it returns the message ID.</p><p>For additional information about the Message\n                  table, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/localization/reference/r_MessageTable.html\" target=\"_blank\">Message table</a>.</p><p><div class=\"note note\"><span class=\"notetitle\">Note:</span> If the UI message has a tick ('), there may be issues with the message in\n                    the script; to escape the ticks ('), use <span class=\"keyword apiname\">getMessageS(String,\n                      Object)</span>.</div></p>",
                        "name": "getEscapedMessage(String id, Array args)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var my_message = gs.getEscapedMessage(\"Is the summary &amp; details accurate?\");\nalert(my_message);",
                                "description": "This example shows the ampersand character being replaced with the equivalent ampersand\n        HTML name code."
                            },
                            {
                                "script": "// current.action.name is \"update record\"\nvar my_message = gs.getEscapedMessage(\"Abort adding action '{0}', same &lt;subflow&gt; can't be added twice in this subflow.\", current.action.name);\nalert(my_message);",
                                "description": "This example shows how to replace a single variable within a message and how the < and >\n        symbols in the message are transposed to the corresponding HTML name codes of &lt and\n        &gt."
                            }
                        ],
                        "params": [
                            {
                                "name": "id",
                                "type": "String",
                                "description": "Message identifier. You can locate\n                this value in the Key field of the Message [sys_ui_message] table. Note the Key\n                field may look exactly like the actual message string."
                            },
                            {
                                "name": "args",
                                "type": "Array",
                                "description": "Optional. List of strings or other values defined by java.text.MessageFormat\n                that replace the variables within the specified message. <p class=\"p\">For example:\n                    <samp class=\"ph codeph\">gs.getMessage(\"Abort adding action '{0}', same subflow can't be added\n                    twice in this subflow.\", current.action.name);</samp></p>\n<p class=\"p\">In this example\n                    <var class=\"keyword varname\">'{0}'</var> is replaced with the content of\n                    <var class=\"keyword varname\">current.action.name</var>.</p>\n<div class=\"note note\"><span class=\"notetitle\">Note:</span> The passed in values are not\n                  translated. They are inserted verbatim in the message.</div>"
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "UI message with HTML special characters replaced with HTML name codes."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideSystemGetMessage_String_Object",
                        "short_description": "Retrieves translated messages from the Message [sys_ui_message] table to display in a\n    UI.",
                        "description": "<p>If the specified message identifier (key) exists in the Message [sys_ui_message] table for\n        the current language, then the method returns the translated message. If the specified\n        message identifier does not exist for the current language, then the method returns the\n        English version of the message. If the message identifier does not exist in the table, then\n        it returns the message ID.</p><p>For additional information about the Message table, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/localization/reference/r_MessageTable.html\" target=\"_blank\">Message table</a></p><p><div class=\"note note\"><span class=\"notetitle\">Note:</span> If the UI message has a tick ('), there may be issues with the message in the script;\n          to escape the ticks ('), use <span class=\"keyword apiname\">getMessageS(String, Object)</span>.</div></p>",
                        "name": "getMessage(String id, Array args)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var my_message = gs.getMessage(\"rows will not be updated\");\nalert(my_message);",
                                "description": "This example shows the message returned for the current user when Spanish is the current\n        language."
                            },
                            {
                                "script": "// current.action.name is \"update record\"\nvar my_message = gs.getMessage(\"Abort adding action '{0}', same subflow can't be added twice in this subflow.\", current.action.name);\nalert(my_message);",
                                "description": "This example shows how to replace a single variable within a message."
                            },
                            {
                                "script": "// current.sub_flow.name is 'schedule users'\n// current.action.name is \"update record\"\nvar my_message = gs.getEscapedMessage(\"Abort adding action '{0}', same subflow can't be added twice in {1} subflow.\", [current.action.name, current.sub_flow.name]);\nalert(my_message);",
                                "description": "This example shows how to replace multiple variables within a message."
                            }
                        ],
                        "params": [
                            {
                                "name": "id",
                                "type": "String",
                                "description": "Message identifier. You can locate this value in the Key field of the Message\n                [sys_ui_message] table. Note the Key field may look exactly like the actual\n                message."
                            },
                            {
                                "name": "args",
                                "type": "Array",
                                "description": "Optional. List of strings or other values defined by java.text.MessageFormat\n                that replace the variables within the specified message. <p class=\"p\">For example:\n                    <samp class=\"ph codeph\">gs.getMessage(\"Abort adding action '{0}', same subflow can't be added\n                    twice in this subflow.\", current.action.name);</samp></p>\n<p class=\"p\">In this example\n                    <var class=\"keyword varname\">'{0}'</var> is replaced with the content of\n                    <var class=\"keyword varname\">current.action.name</var>.</p>\n<div class=\"note note\"><span class=\"notetitle\">Note:</span> The passed in values are not\n                  translated. They are inserted verbatim in the message.</div>"
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "UI message."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideSystemGetProperty_String_Object",
                        "short_description": "Gets the value of a Glide property. If the property is not found, returns an alternate\n    value.",
                        "description": "",
                        "name": "getProperty(String key, Object alt)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var attachment_link = gs.getProperty('glide.servlet.uri');\ngs.info(attachment_link);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "key",
                                "type": "String",
                                "description": "The key for the property whose value should be returned."
                            },
                            {
                                "name": "alt",
                                "type": "Object",
                                "description": "(Optional) Alternate object to return if the property is not found."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "The value of the Glide property, or the alternate object defined above."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideSystemGetSession",
                        "short_description": "Gets a reference to the current Glide session.",
                        "description": "",
                        "name": "getSession()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "if (!gs.hasRole(\"admin\") &amp;&amp; !gs.hasRole(\"user_admin\") &amp;&amp; gs.getSession().isInteractive()) {\n  current.addQuery(\"active\", \"true\");\n}",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "A reference for the current session."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideSystemGetSessionID",
                        "short_description": "Retrieves the GlideSession session ID.",
                        "description": "",
                        "name": "getSessionID()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var myUserObject = gs.getSessionID();\ngs.info(myUserObject);",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The session ID."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideSystemGetSessionToken",
                        "short_description": "This method is no longer available. Instead, use\n      <samp class=\"ph codeph\">gs.getSession().getSessionToken()</samp>.",
                        "description": "",
                        "name": "getSessionToken()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The session token."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideSystemGetTimeZoneName",
                        "short_description": "Returns the name of the time zone associated with the current user.",
                        "description": "<p>This method has been deprecated. Instead, use the <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=r_ScopedGlideSessionGetTimeZoneName&amp;v=paris\" target=\"_blank\">getTimeZoneName()</a> method in the <span class=\"keyword apiname\">GlideSession</span> API.</p>",
                        "name": "getTimeZoneName()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "gs.info(gs.getTimeZoneName());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The time zone name."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideSystemGetUrlOnStack",
                        "short_description": "Gets the current URI for the session.",
                        "description": "",
                        "name": "getUrlOnStack()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "gs.info(gs.getUrlOnStack());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The URI."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideSystemGetUser",
                        "short_description": "Returns a reference to the scoped GlideUser object for the current user.",
                        "description": "<p>See <a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/c_GlideUserAPI\" title=\"The GlideUser API provides access to information about the current user and current user roles. Using the GlideUser API avoids the need to use the slower GlideRecord queries to get user information.\">GlideUser</a> for a list of available methods.</p>",
                        "name": "getUser()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var myUserObject = gs.getUser();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "GlideUser",
                            "description": "Reference to a scoped user object."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideSystemGetUserDisplayName",
                        "short_description": "Gets the display name of the current user.",
                        "description": "",
                        "name": "getUserDisplayName()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "gs.info(gs.getUserDisplayName());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The name field of the current user. Returns Abel Tuter, as opposed to\n                abel.tuter."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideSystemGetUserID",
                        "short_description": "Gets the sys_id of the current user.",
                        "description": "",
                        "name": "getUserID()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "gs.info(gs.getUserID());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The sys_id of the current user."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideSystemGetUserName",
                        "short_description": "Gets the user name, or user id, of the current user.",
                        "description": "",
                        "name": "getUserName()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "gs.info(gs.getUserName());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The user name of the current user."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideSystemHasRole_Object",
                        "short_description": "Determines if the current user has the specified role.",
                        "description": "",
                        "name": "hasRole(Object role)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "if (!gs.hasRole(\"admin\") &amp;&amp; !gs.hasRole(\"groups_admin\")  &amp;&amp; gs.getSession().isInteractive()) {\n  var qc = current.addQuery(\"u_hidden\", \"!=\", \"true\"); //cannot see hidden groups... \n  qc.addOrCondition(\"sys_id\", \"javascript:getMyGroups()\"); //...unless in the hidden group\n  gs.info(\"User has admin and groups admin roles\");\n}\nelse {\n  gs.info(\"User does not have both admin and groups admin roles\");\n}",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "role",
                                "type": "Object",
                                "description": "The role to check."
                            }
                        ],
                        "return": {
                            "type": "Boolean",
                            "description": "True if the user had the role. Returns true for users with the administrator\n                role."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SGSYS-hoursAgo_N",
                        "short_description": "Returns the date and time for a specified number of hours ago.",
                        "description": "",
                        "name": "hoursAgo(Number hours)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "if (current.operation() == 'insert') {\n // If no due date was specified, calculate a default\n if (current.due_date == '') {\n \n  if (current.urgency == '1') {\n   // Set due date to 4 hours ahead of current time\n   current.due_date = gs.hoursAgo(-4);\n  }\n \n  if (current.urgency == '2') {\n   // Set due date to 2 days ahead of current time\n   current.due_date = gs.daysAgo(-2);\n  }\n \n  if (current.urgency == '3') {\n   // Set due date to 7 days ahead of current time\n   current.due_date = gs.daysAgo(-7);\n  }\n }\n}",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "hours",
                                "type": "Number",
                                "description": "Integer number of hours"
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "GMT in the format yyyy-mm-dd hh:mm:ss"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SGSYS-hoursAgoEnd_N",
                        "short_description": "Returns the date and time for the end of the hour a specified number of hours\n    ago.",
                        "description": "",
                        "name": "hoursAgoEnd(Number hours)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "hours",
                                "type": "Number",
                                "description": "Integer number of hours"
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "GMT in the format yyyy-mm-dd hh:mm:ss"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SGSYS-hoursAgoStart_N",
                        "short_description": "Returns the date and time for the start of the hour a specified number of hours\n    ago.",
                        "description": "",
                        "name": "hoursAgoStart(Number hours)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "hours",
                                "type": "Number",
                                "description": "Integer number of hours"
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "GMT in the format yyyy-mm-dd hh:mm:ss"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideSystemInclude_String",
                        "short_description": "Provides a safe way to call from the sandbox, allowing only the inclusion of trusted\n    scripts.",
                        "description": "",
                        "name": "include(String name)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "gs.include(\"PrototypeServer\");",
                                "description": "This example gets the PrototypeServer in the current script context."
                            }
                        ],
                        "params": [
                            {
                                "name": "name",
                                "type": "String",
                                "description": "The name of the script to include."
                            }
                        ],
                        "return": {
                            "type": "Boolean",
                            "description": "True if the include worked."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideSystemInf_String_Object_Object_Object_Object_Object",
                        "short_description": "Writes an info message to the system log.",
                        "description": "",
                        "name": "info(String message, Object parm1, Object parm2, Object parm3, Object parm4, Object parm5)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "gs.info(\"This is an info message\");\nvar myFirstName = \"Abel\";\nvar myLastName = \"Tuter\";\ngs.info(\"This is an info message from {0}.{1}\", myFirstName, myLastName);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "message",
                                "type": "String",
                                "description": "The log message with place holders for any variable arguments."
                            },
                            {
                                "name": "param1",
                                "type": "Object",
                                "description": "(Optional) First variable argument."
                            },
                            {
                                "name": "param2",
                                "type": "Object",
                                "description": "(Optional) Second variable argument."
                            },
                            {
                                "name": "param3",
                                "type": "Object",
                                "description": "(Optional) Third variable argument."
                            },
                            {
                                "name": "param4",
                                "type": "Object",
                                "description": "(Optional) Fourth variable argument."
                            },
                            {
                                "name": "param5",
                                "type": "Object",
                                "description": "(Optional) Fifth variable argument."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideSystemIsDebugging",
                        "short_description": "Determines if debugging is active for a specific scope.",
                        "description": "",
                        "name": "isDebugging()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "gs.debug(\"This is a log message\");\nvar myFirstName = \"Abel\";\nvar myLastName = \"Tuter\";\ngs.debug(\"This is a log message from {0}.{1}\", myFirstName, myLastName);\ngs.info(gs.isDebugging());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "True if either session debugging is active or the log level is set to debug for\n                the specified scope."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideSystemIsInteractive",
                        "short_description": "Checks if the current session is interactive. An example of an interactive session is\n    when a user logs in normally. An example of a non-interactive session is using a SOAP request to\n    retrieve data.",
                        "description": "",
                        "name": "isInteractive()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "if (!gs.hasRole(\"admin\") &amp;&amp; gs.getSession().isInteractive()) {\n    var qc1 = current.addQuery('u_group',\"\");\n    var gra = new GlideRecord('sys_user_grmember');\n    gra.addQuery('user', gs.getUserID());\n    gra.query();\n    while (gra.next()) {\n        qc1.addOrCondition('u_group', gra.group);\n    }\n}",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "True if the session is interactive."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideSystemIsLoggedIn",
                        "short_description": "Determines if the current user is currently logged in.",
                        "description": "",
                        "name": "isLoggedIn()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "gs.info(gs.isLoggedIn());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "True if the current user is logged in."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGS-isMobile",
                        "short_description": "You can determine if a request comes from a mobile device.",
                        "description": "<p>This method can be used in UI action conditions and business rules.</p>",
                        "name": "isMobile()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "if (gs.isMobile())\n  gs.info(\"submitted from mobile UI\");\n else \n   gs.info(\"NOT submitted from mobile UI\");",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "True if the request comes from a mobile device; otherwise, false."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SGSYS-minutesAgoEnd_N",
                        "short_description": "Returns the date and time for the end of the minute a specified number of minutes\n    ago.",
                        "description": "",
                        "name": "minutesAgoEnd(Number minutes)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "minutes",
                                "type": "Number",
                                "description": "Integer number of minutes"
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "GMT in the format yyyy-mm-dd hh:mm:ss"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SGSYS-minutesAgoStart_N",
                        "short_description": "Returns the date and time for the start of the minute a specified number of minutes\n    ago.",
                        "description": "",
                        "name": "minutesAgoStart(Number minutes)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "minutes",
                                "type": "Number",
                                "description": "Integer number of minutes"
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "GMT in the format yyyy-mm-dd hh:mm:ss"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SGSYS-monthsAgo_N",
                        "short_description": "Returns the date and time for a specified number of months ago.",
                        "description": "",
                        "name": "monthsAgo(Number months)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "months",
                                "type": "Number",
                                "description": "Integer number of months"
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "GMT on today's date of the specified month, in the format yyyy-mm-dd\n                hh:mm:ss"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SGSYS-monthsAgoStart_N",
                        "short_description": "Returns the date and time for the start of the month a specified number of months\n    ago.",
                        "description": "",
                        "name": "monthsAgoStart(Number months)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "months",
                                "type": "Number",
                                "description": "Integer number of months"
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "GMT start of the month the specified number of months ago, in the format\n                yyyy-mm-dd hh:mm:ss"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideSystemNil_Object",
                        "short_description": "Queries an object and returns true if the object is null, undefined, or contains an\n    empty string.",
                        "description": "",
                        "name": "nil(Object o)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var now_GR = new GlideRecord();\ngs.info(gs.nil(now_GR));",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "o",
                                "type": "Object",
                                "description": "The object to be checked."
                            }
                        ],
                        "return": {
                            "type": "Boolean",
                            "description": "True if the object is null, undefined, or contains an empty string; otherwise,\n                returns false."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SGSYS-quartersAgoEnd_N",
                        "short_description": "Returns the date and time for the last day of the quarter for a specified number of\n    quarters ago.",
                        "description": "",
                        "name": "quartersAgoEnd(Number quarters)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "quarters",
                                "type": "Number",
                                "description": "Integer number of quarters"
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "GMT end of the quarter that was the specified number of quarters ago, in the\n                format yyyy-mm-dd hh:mm:ss"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SGSYS-quartersAgoStart_N",
                        "short_description": "Returns the date and time for the first day of the quarter for a specified number of\n    quarters ago.",
                        "description": "",
                        "name": "quartersAgoStart(Number quarters)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "quarters",
                                "type": "Number",
                                "description": "Integer number of quarters"
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "GMT end of the month that was the specified number of quarters ago, in the\n                format yyyy-mm-dd hh:mm:ss"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SGSYS-setProperty_S_S_S",
                        "short_description": "Sets the specified key to the specified value if the property is within the script's\n    scope.",
                        "description": "<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> Care should be taken when setting system properties (sys_properties) using this method\n          as it causes a system-wide cache flush. Each flush can cause system degradation while the\n          caches rebuild. If a value must be updated often, it should not be stored as a system\n          property. In general, you should only place values in the sys_properties table that do not\n          frequently change.</div></p>",
                        "name": "setProperty(String key, String value, String description)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "gs.setProperty(\"glide.foo\",\"bar\",\"foo\");\ngs.info(gs.getProperty(\"glide.foo\"));",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "key",
                                "type": "String",
                                "description": "The key for the property to be set."
                            },
                            {
                                "name": "value",
                                "type": "String",
                                "description": "The value of the property to be set."
                            },
                            {
                                "name": "description",
                                "type": "String",
                                "description": "A description of the property."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideSystemSetRedirect_Object",
                        "short_description": "Sets the redirect URI for this transaction, which then determines the next page the\n    user will see.",
                        "description": "",
                        "name": "setRedirect(Object o)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "gs.setRedirect(\"com.glideapp.servicecatalog_cat_item_view.do?sysparm_id=d41ce5bac611227a0167f4bf8109bf70&amp;sysparm_user=\" \n+ current.sys_id + \"&amp;sysparm_email=\" + current.email)",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "o",
                                "type": "Object",
                                "description": "URI object or URI string to set as the redirect"
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideSystemTableExists_String",
                        "short_description": "Determines if a database table exists.",
                        "description": "",
                        "name": "tableExists(String name)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "gs.info(gs.tableExists('incident'));",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "name",
                                "type": "String",
                                "description": "Name of the table to check for existence."
                            }
                        ],
                        "return": {
                            "type": "Boolean",
                            "description": "True if the table exists. False if the table was not found."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SGSYS-urlDecode_S",
                        "short_description": "Replaces UTF-8 encoded characters with ASCII characters.",
                        "description": "",
                        "name": "urlDecode(String url)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "url",
                                "type": "String",
                                "description": "A string with UTF-8 percent (%) encoded characters."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "A string with encoded characters replaced with ASCII characters."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SGSYS-URLEncode_S",
                        "short_description": "Encodes non-ASCII characters, unsafe ASCII characters, and spaces so the returned\n    string can be used on the Internet. Uses UTF-8 encoding. Uses percent (%) encoding.",
                        "description": "",
                        "name": "urlEncode(String url)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "url",
                                "type": "String",
                                "description": "The string to be encoded."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "A string with non-ASCII characters, unsafe ASCII characters, and spaces\n                encoded."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideSystemWarn_String_Object_Object_Object_Object_Object",
                        "short_description": "Writes a warning message to the system log.",
                        "description": "",
                        "name": "warn(String message, Object parm1, Object parm2, Object parm3, Object parm4, Object parm5)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "gs.warn(\"This is a warning\");\nvar myFirstName = \"Abel\";\nvar myLastName = \"Tuter\";\ngs.warn(\"This is a warning from {0}.{1}\", myFirstName, myLastName);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "message",
                                "type": "String",
                                "description": "The log message with place holders for any variable arguments."
                            },
                            {
                                "name": "param1",
                                "type": "Object",
                                "description": "(Optional) First variable argument."
                            },
                            {
                                "name": "param2",
                                "type": "Object",
                                "description": "(Optional) Second variable argument."
                            },
                            {
                                "name": "param3",
                                "type": "Object",
                                "description": "(Optional) Third variable argument."
                            },
                            {
                                "name": "param4",
                                "type": "Object",
                                "description": "(Optional) Fourth variable argument."
                            },
                            {
                                "name": "param5",
                                "type": "Object",
                                "description": "(Optional) Fifth variable argument."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SGSYS-xmlToJSON_S",
                        "short_description": "Takes an XML string and returns a JSON object.",
                        "description": "",
                        "name": "xmlToJSON(String xmlString)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var jsonObject = gs.xmlToJSON(xmlString);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "xmlString",
                                "type": "String",
                                "description": "The XML string to be converted."
                            }
                        ],
                        "return": {
                            "type": "Object",
                            "description": "A JSON object representing the XML string. Null if unable to process the XML\n                string."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideSystemYearsAgo_N",
                        "short_description": "Returns a date and time for a certain number of years ago.",
                        "description": "",
                        "name": "yearsAgo(Number years)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "years",
                                "type": "Number",
                                "description": "An integer number of years"
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "GMT beginning of the year that is the specified number of years ago, in the\n                format yyyy-mm-dd hh:mm:ss."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SGSYS-yesterday",
                        "short_description": "Returns yesterday's time (24 hours ago).",
                        "description": "",
                        "name": "yesterday()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "GMT for 24 hours ago, in the format yyyy-mm-dd hh:mm:ss"
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "",
                "short_description": "The Scoped GlideTableHierarchy API provides methods for handling information about table\n  relationships.",
                "identifier": "c_GlideTableHierarchyScopedAPI",
                "name": "GlideTableHierarchy",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "r_ScopedGlideTableHierarchyGlideTableHierarchy_String",
                        "short_description": "Instantiates a GlideTableHierarchy object.",
                        "description": "",
                        "name": "GlideTableHierarchy(String tableName)",
                        "type": "Constructor",
                        "examples": [
                            {
                                "script": "var table = new GlideTableHierarchy(\"incident\"); \ngs.info(table.getTables());",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "tableName",
                                "type": "String",
                                "description": "The name of the table."
                            }
                        ],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideTableHierarchyGetAllExtensions",
                        "short_description": "Returns an array of strings containing all tables that extend the current table and\n    includes the current table.",
                        "description": "",
                        "name": "getAllExtensions()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var table = new GlideTableHierarchy(\"task\"); \ngs.info(table.getAllExtensions());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Array",
                            "description": "An array of strings containing the tables in the hierarchy that includes the\n                current table."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideTableHierarchyGetBase",
                        "short_description": "Returns the parent class.",
                        "description": "",
                        "name": "getBase()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var table = new GlideTableHierarchy(\"cmdb_ci_server\"); \ngs.info(table.getBase());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The parent class."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideTableHierarchyGetHierarchy",
                        "short_description": "Returns an array of strings containing all classes in the hierarchy of the current\n    table.",
                        "description": "",
                        "name": "getHierarchy()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var table = new GlideTableHierarchy(\"incident\"); \ngs.info(table.getHierarchy());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Array",
                            "description": "An array of strings of the classes in the hierarchy."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideTableHierarchyGetName",
                        "short_description": "Returns the table's name.",
                        "description": "",
                        "name": "getName()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var table = new GlideTableHierarchy(\"incident\"); \ngs.info(table.getName());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The table's name."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideTableHierarchyGetRoot",
                        "short_description": "Returns the top level class in the hierarchy.",
                        "description": "",
                        "name": "getRoot()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var table = new GlideTableHierarchy(\"cmdb_ci_server\"); \ngs.info(table.getRoot());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The root class."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideTableHierarchyGetTableExtensions",
                        "short_description": "Returns an array of strings containing all tables that extend the current\n    table.",
                        "description": "",
                        "name": "getTableExtensions()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var table = new GlideTableHierarchy(\"task\"); \ngs.info(table.getTableExtensions());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Array",
                            "description": "An array of strings containing the tables that extend the current\n                table."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideTableHierarchyGetTables",
                        "short_description": "Returns an array of strings of the table names in the hierarchy.",
                        "description": "",
                        "name": "getTables()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var table = new GlideTableHierarchy(\"incident\"); \ngs.info(table.getTables());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Array",
                            "description": "An array of strings containing the names of tables in the hierarchy."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideTableHierarchyHasExtensions",
                        "short_description": "Returns true of this class has been extended.",
                        "description": "",
                        "name": "hasExtensions()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var table = new GlideTableHierarchy(\"incident\"); \ngs.info(table.hasExtensions());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "True if the current table has extensions."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideTableHierarchyIsBaseClass",
                        "short_description": "Returns true if this is a base class.",
                        "description": "",
                        "name": "isBaseClass()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var table = new GlideTableHierarchy(\"incident\"); \ngs.info(table.isBaseClass());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "True if the current table has no parent and has extensions."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideTableHierarchyIsSoloClass",
                        "short_description": "Returns true if this table is not in a hierarchy.",
                        "description": "",
                        "name": "isSoloClass()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var table = new GlideTableHierarchy(\"sys_user\"); \ngs.info(table.isSoloClass());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "True if the current table has no parent and no extensions."
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "",
                "short_description": "Provides the ability to read single lines from an input stream. Because an input stream\n  is used, it is not subject to the 5MB attachment size limit.",
                "identifier": "c_GlideTextReaderScopedAPI",
                "name": "GlideTextReader",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "r_GTRS-GlideTextReader_GSIS",
                        "short_description": "Creates a scoped GlideTextReader object for the specified input stream.",
                        "description": "",
                        "name": "GlideTextReader( GlideScriptableInputStream inputStream)",
                        "type": "Constructor",
                        "examples": [],
                        "params": [
                            {
                                "name": "inputStream",
                                "type": "GlideScriptableInputStream",
                                "description": "The input stream to be read."
                            }
                        ],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_GTRS-getEncoding",
                        "short_description": "Returns the character encoding of the input stream.",
                        "description": "",
                        "name": "getEncoding()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The character encoding of the input stream."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_GTRS-readLine",
                        "short_description": "Returns a single line from the input stream and returns a string. Since this is working\n    off of a stream, it is not subject to the 5MB size limit.",
                        "description": "",
                        "name": "readLine()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var is = new GlideSysAttachment().getContentStream(attachmentSysId);\nvar reader = new GlideTextReader(is);\nvar ln = ' ';\nwhile((ln = reader.readLine()) != null) {\n  gs.info(ln);\n}",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "A single line of input up to the carriage return. Does not include the carriage\n                return. Returns null if there is no content."
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "",
                "short_description": "The scoped GlideTime class provides methods for performing operations on GlideTime\n  objects, such as instantiating GlideTime objects or working with GlideTime fields.",
                "identifier": "c_GlideTimeScoped",
                "name": "GlideTime",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "r_ScopedGlideTimeGlideTime",
                        "short_description": "Instantiates a GlideTime object with the current time.",
                        "description": "",
                        "name": "GlideTime()",
                        "type": "Constructor",
                        "examples": [
                            {
                                "script": "var gt = new GlideTime(); \ngs.info(gt.getDisplayValue());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideTimeGlideTime_Number",
                        "short_description": "Instantiates a GlideTime object with its time starting at midnight UTC plus the passed\n    in value.",
                        "description": "<p>The value is adjusted for the timezone in which the instance resides. For example, if the\n        user's instance is in a time zone that is -8 hours from the UTC, and 1000 is passed in, the\n        time in the GlideTime object is 16:00:10 (00:00:00 - 8 hours +10 seconds.)</p>",
                        "name": "GlideTime(Number milliseconds)",
                        "type": "Constructor",
                        "examples": [
                            {
                                "script": "var gt = new GlideTime(10000); \ngs.info(gt.getDisplayValue());",
                                "description": "This example shows adding 10 seconds to midnight (UTC), which is then adjusted for the time\n        zone in which the instance resides. In this case, -8 hours from UTC."
                            }
                        ],
                        "params": [
                            {
                                "name": "milliseconds",
                                "type": "Number",
                                "description": "Time to add to midnight UTC.<p class=\"p\">Unit: Milliseconds</p>"
                            }
                        ],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideTimeGetByFormat_String",
                        "short_description": "Returns the time in the specified format.",
                        "description": "<p>For information on the time formats that you can pass into this method, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/time/reference/r_FormatDateAndTimeFields.html\" target=\"_blank\">Global date and time field\n          format</a>. You can pass these values in any order and add separators such as a dash,\n        space, backslash, or colon. In addition, you can also pass the character \"a\" to return\n        am/pm.</p>",
                        "name": "getByFormat(String format)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gt = new GlideTime(); \ngt.setValue('12:00:00');\ngs.info(gt.getByFormat(\"HH:mm\"));",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "format",
                                "type": "String",
                                "description": "String to use to format the time.<div class=\"p\">For example, if the current time is\n                  10:30:20 then:<ul class=\"ul\" id=\"r_ScopedGlideTimeGetByFormat_String__ul_cdw_4zy_jkb\">\n                    <li class=\"li\">hh:mm:ss = 10:30:20</li>\n\n                    <li class=\"li\">HH = 10</li>\n\n                    <li class=\"li\">HH â- ss = 10 â- 20</li>\n\n                    <li class=\"li\">hh a = 10 AM</li>\n\n                    <li class=\"li\">s:m:H ss:mm:hh = 20:30:10 20:30:10</li>\n\n                    <li class=\"li\">HH:mm:ss.SSSZ = 10:30:20.000+0000</li>\n\n                    <li class=\"li\">HH/mm/ss = 10/30/20</li>\n\n                  </ul>\n</div>"
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "Time in the specified format."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideTimeGetDisplayValue",
                        "short_description": "Gets the time in the current user's display format and time zone.",
                        "description": "<p>When designing business rules or script includes remember that this method may return\n        values in different formats for different users.</p>",
                        "name": "getDisplayValue()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gt = new GlideTime();\ngt.setDisplayValue(\"12:00:00\"); // User Time Zone\ngs.info(gt.getDisplayValue()); // User Time Zone",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The time in the user's format and time zone."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideTimeGetDisplayValueInternal",
                        "short_description": "Gets the display value in the current user's time zone and the internal format\n    (HH:mm:ss).",
                        "description": "",
                        "name": "getDisplayValueInternal()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gt = new GlideTime();\ngt.setValue(\"01:00:00\"); //Internal Time Zone , UTC\ngs.info(gt.getDisplayValueInternal()); //User Time Zone",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The time value for the GlideTime object in the current user's time zone and the\n                internal time format of HH:mm:ss."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SGT-getHourLocalTime",
                        "short_description": "Returns the hours part of the time using the local time zone.",
                        "description": "",
                        "name": "getHourLocalTime()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "Number",
                            "description": "The hours using the local time zone."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SGT-getHourOfDayLocalTime",
                        "short_description": "Returns the hours part of the time using the local time zone. The number of hours is\n    based on a 24 hour clock.",
                        "description": "",
                        "name": "getHourOfDayLocalTime()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "Number",
                            "description": "The hours using the local time zone. The number of hours is based on a 24 hour\n                clock."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SGT-getHourOfDayUTC",
                        "short_description": "Returns the hours part of the time using the UTC time zone. The number of hours is\n    based on a 24 hour clock.",
                        "description": "",
                        "name": "getHourOfDayUTC()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "Number",
                            "description": "The hours using the UTC time zone. The number of hours is based on a 24 hour\n                clock."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_getHourUTC",
                        "short_description": "Returns the hours part of the time using the UTC time zone. The number of hours is\n    based on a 12 hour clock. Noon and midnight are represented by 0, not 12.",
                        "description": "",
                        "name": "getHourUTC()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "Number",
                            "description": "The hours using the UTC time zone. The number of hours is based on a 12 hour\n                clock. Noon and midnight are represented by 0, not 12."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SGT-getMinutesLocalTime",
                        "short_description": "Returns the number of minutes using the local time zone.",
                        "description": "",
                        "name": "getMinutesLocalTime()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "Number",
                            "description": "The number of minutes using the local time zone."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SGT-getMinutesUTC",
                        "short_description": "Returns the number of minutes in the hour based on the UTC time zone.",
                        "description": "",
                        "name": "getMinutesUTC()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "Number",
                            "description": "The number of minutes in the hour using the UTC time zone."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SGT-getSeconds",
                        "short_description": "Returns the number of seconds in the current minute.",
                        "description": "",
                        "name": "getSeconds()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "Number",
                            "description": "The number of seconds in the minute."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideTimeGetValue",
                        "short_description": "Gets the time value stored in the database by the GlideTime object in the internal\n    format, HH:mm:ss, and the system time zone.",
                        "description": "",
                        "name": "getValue()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gt = new GlideTime();\ngs.info(gt.getValue()); // Internal Time Zone, UTC",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The time value in the internal fomat and system time zone."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideTimeSetDisplayValue_String",
                        "short_description": "Sets a time value using the current user's display format and time zone.",
                        "description": "",
                        "name": "setDisplayValue(String asDisplayed)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gt = new GlideTime();\ngt.setDisplayValue('01:00:00');   // User Time Zone\ngs.info(gt.getDisplayValueInternal()); // User Time Zone",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "asDisplayed",
                                "type": "String",
                                "description": "The time in the current user's display format and time zone. The parameter must\n                be formatted using the current user's preferred display format, such as HH:mm:ss."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideTimeSetValue_String",
                        "short_description": "Sets the time of the GlideTime object in the internal time zone.",
                        "description": "",
                        "name": "setValue(String o)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gt = new GlideTime();\ngt.setValue('01:00:00');  //Internal Time Zone, UTC\ngs.info(\"time is \"+ gt.getByFormat('hh:mm:ss'));",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "o",
                                "type": "String",
                                "description": "The time in hh:mm:ss format."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideTimeSubtract_GlideTime_GlideTime",
                        "short_description": "Gets the duration difference between two GlideTime object values.",
                        "description": "",
                        "name": "subtract(GlideTime startTime, GlideTime endTime)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gd1 = new GlideTime(); \ngd1.setDisplayValue(\"09:00:00\"); \nvar gd2 = new GlideTime(); \ngd2.setDisplayValue(\"09:10:00\"); \n \nvar dur = GlideDate.subtract(gd1, gd2); //the difference between gdt1 and gdt2 \ngs.info(dur.getDisplayValue());",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "startTime",
                                "type": "GlideTime",
                                "description": "The start value."
                            },
                            {
                                "name": "endTime",
                                "type": "GlideTime",
                                "description": "The end value."
                            }
                        ],
                        "return": {
                            "type": "GlideDuration",
                            "description": "The duration between the two values."
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "",
                "short_description": "Creates a GlideTransformLog object to log messages to localhost logs.",
                "identifier": "GlideTransformLogAPI",
                "name": "GlideTransformLog - Scoped, Global",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "GTransLog-GlideTransformLog",
                        "short_description": "Instantiates an GlideTransformLog object.",
                        "description": "",
                        "name": "GlideTransformLog()",
                        "type": "Constructor",
                        "examples": [
                            {
                                "script": "var importLog = new GlideTransformLog();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GTransLog-error_S",
                        "short_description": "Logs a message of type Error to localhost logs.",
                        "description": "",
                        "name": "error(String message)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var importLog = new GlideTransformLog();\nimportLog.error(âError executing transformâ);\n",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "message",
                                "type": "String",
                                "description": "Transform log message."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GTransLog-info_S",
                        "short_description": "Logs a message of type Info to localhost logs.",
                        "description": "",
                        "name": "info(String message)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var importLog = new GlideTransformLog();\nimportLog.info(âSuccessfully executed the transform.â);\n",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "message",
                                "type": "String",
                                "description": "Transform log message."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GTransLog-warn_S",
                        "short_description": "Logs a message of type Warn to localhost logs.",
                        "description": "",
                        "name": "warn(String message)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var importLog = new GlideTransformLog();\nimportLog.warn(âTransform taking longer than expectedâ);\n",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "message",
                                "type": "String",
                                "description": "Transform log message."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "You create the properties using the sys_properties list and assign a version number. When you\n   do this from the scoped application, the <scope-name> prefix is automatically added to the\n   property name. The scoped application UI compatibility properties are:<br/><br/><ul class=\"ul\" id=\"c_GlideUICompatibilityScopedAPI__ul_ebx_y2q_wt\">\n    <li class=\"li\">&lt;scope-name&gt;.ui.ie_minimum </li>\n\n    <li class=\"li\">&lt;scope-name&gt;.ui.chrome_minimum </li>\n\n    <li class=\"li\">&lt;scope-name&gt;.ui.firefox_minimum </li>\n\n    <li class=\"li\">&lt;scope-name&gt;.ui.safari_major_version_minimum </li>\n\n   </ul><br/><br/>You can then use the scoped GlideUICompatibility class to determine if the current browser is\n   supported.",
                "short_description": "The scoped GlideUICompatibility class provides the ability for scoped applications to\n  define their own minimum browser versions. This is done by creating system properties for the\n  scoped application.",
                "identifier": "c_GlideUICompatibilityScopedAPI",
                "name": "GlideUICompatibility",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "r_GUIC-GlideUICompatibility_S",
                        "short_description": "Creates a GlideUICompatibility object.",
                        "description": "",
                        "name": "GlideUICompatibility(String scopeName)",
                        "type": "Constructor",
                        "examples": [],
                        "params": [
                            {
                                "name": "scopeName",
                                "type": "String",
                                "description": "The application's scope name"
                            }
                        ],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_GUIC-getCompatibility",
                        "short_description": "Returns the terms \"block\" or \"allow\" based upon the browser version.",
                        "description": "",
                        "name": "getCompatibility()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "UICompatibility = new GlideUICompatibility(gs.getCurrentScopeName());\nvar blockOrAllow = UICompatibility.getCompatibility();\ngs.info(blockOrAllow);",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "Either block or allow"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_GUIC-isBlocked",
                        "short_description": "Determines if the browser is not supported.",
                        "description": "",
                        "name": "isBlocked()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "UICompatibility = new GlideUICompatibility(gs.getCurrentScopeName());\nvar blocked = UICompatibility.isBlocked();\ngs.info(blocked);",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "True if the browser is not supported."
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "For more information on using URIs:<ul class=\"ul\" id=\"c_GlideURIScopedAPI__ul_swn_bjb_rmb\">\n    <li class=\"li\"><a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-platform-user-interface/page/use/navigation/task/navigate-using-url.html\" target=\"_blank\">Navigate by URL</a></li>\n\n    <li class=\"li\"><a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-platform-user-interface/page/administer/navigation-and-ui/concept/c_NavigationStack.html\" target=\"_blank\">Navigation stack</a></li>\n\n   </ul><br/><br/>See also: <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=GlideURIGlobalAPI;v=paris\" target=\"_blank\">GlideURI -Global</a>",
                "short_description": "Enables handling the URI parameter in scoped applications.",
                "identifier": "c_GlideURIScopedAPI",
                "name": "GlideURI",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "r_ScopedGlideURIScopedGlideURI",
                        "short_description": "Instantiates a GlideURI object.",
                        "description": "",
                        "name": "GlideURI()",
                        "type": "Constructor",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideURIGet_String",
                        "short_description": "<span class=\"ph\">Returns the value of the specified\n                parameter.</span>",
                        "description": "",
                        "name": "get(String name)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gURI = new GlideURI();\ngURI.set('sysparm_query', 'priority=2^active=true' );\nvar fileString = gURI.get('sysparm_query');\ngs.info(fileString);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "name",
                                "type": "String",
                                "description": "The parameter name."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "The value for the specified parameter."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideURIGetFileFromPath",
                        "short_description": "<span class=\"ph\">Returns the file name portion of the\n                  URI.</span>",
                        "description": "",
                        "name": "getFileFromPath()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gURI = new GlideURI();\n \nvar fileString = gURI.getFileFromPath();\ngs.info(fileString);",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The file name portion of the URI."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideURISet_String_String",
                        "short_description": "<span class=\"ph\">Sets the specified parameter to the specified\n                value.</span>",
                        "description": "",
                        "name": "set(String name, String value)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gURI = new GlideURI();\ngURI.set('sysparm_query', 'priority=2^active=true' );\nvar fileString = gURI.get('sysparm_query');\ngs.info(fileString);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "name",
                                "type": "String",
                                "description": "The parameter name."
                            },
                            {
                                "name": "value",
                                "type": "String",
                                "description": "The value."
                            }
                        ],
                        "return": {
                            "type": "None",
                            "description": "Â "
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideURIToString_String",
                        "short_description": "<span class=\"ph\">Reconstructs the URI string and performs the proper\n                  URL encoding by converting non-valid characters to their URL code. For example,\n                  converting &amp; to '%26'.</span>",
                        "description": "<p>Parameters set with the <span class=\"keyword apiname\">set()</span>\n                  method are encoded with the URI as well.</p>",
                        "name": "toString(String path)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gURI = new GlideURI();\nfileString = gURI.toString('https://&lt;your instance&gt;.service-now.com/navpage.do');",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "path",
                                "type": "String",
                                "description": "The base portion of the system URL to which the URI is appended."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "The URL."
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "",
                "short_description": "The scoped GlideUser API provides access to information about the current user and\n  current user roles. Using the scoped GlideUser API avoids the need to use the slower GlideRecord\n  queries to get user information.",
                "identifier": "c_GlideUserScopedAPI",
                "name": "GlideUser",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "r_ScopedGlideUserGetCompanyID",
                        "short_description": "Returns the current user's company sys_id.",
                        "description": "",
                        "name": "getCompanyID()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var currentUser = gs.getUser(); \ngs.info(currentUser.getCompanyID());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "Company sys_id"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideUserGetDisplayName",
                        "short_description": "Returns the current user's display name.",
                        "description": "",
                        "name": "getDisplayName()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var currentUser = gs.getUser(); \ngs.info(currentUser.getDisplayName());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "User's display name"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SGU-getDomainID",
                        "short_description": "Returns the identifier of the user's current session domain.",
                        "description": "<p>The identifier that is returned depends on the domain type and the instantiation of that\n        domain.</p><p><ul class=\"ul\" id=\"SGU-getDomainID__ul_l4v_kc1_pfb\">\n          <li class=\"li\">If the user is configured in the global domain, and does not use the domain picker to\n            switch domains, the method returns null.</li>\n\n          <li class=\"li\">If the user uses the domain picker to switch to the global domain, the method returns\n            the string \"global\".</li>\n\n          <li class=\"li\">For all other domains, the method returns the sys_id of that domain.</li>\n\n        </ul></p>",
                        "name": "getDomainID()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var domain = new GlideRecord('domain');\ndomain.get(gs.getUser().getDomainID());\ngs.info(domain.name);",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "Domain identifier"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SGU-getEmail",
                        "short_description": "Returns the user's email address.",
                        "description": "",
                        "name": "getEmail()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var currentUser = gs.getUser(); \ngs.info(currentUser.getEmail());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "User's email address"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SGU-getFirstName",
                        "short_description": "Returns the user's first name.",
                        "description": "",
                        "name": "getFirstName()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var currentUser = gs.getUser(); \ngs.info(currentUser.getFirstName());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "User's first name"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideUserGetID",
                        "short_description": "Gets the sys_id of the current user.",
                        "description": "",
                        "name": "getID()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var currentUser = gs.getUser(); \ngs.info(currentUser.getID());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "User's sys_id"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SGU-getLastName",
                        "short_description": "Returns the user's last name.",
                        "description": "",
                        "name": "getLastName()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var currentUser = gs.getUser(); \ngs.info(currentUser.getLastName());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "User's last name"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideUserGetName",
                        "short_description": "Returns the user ID, or login name, of the current user.",
                        "description": "",
                        "name": "getName()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var currentUser = gs.getUser(); \ngs.info(currentUser.getName());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "User ID"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideUserGetPreference_String",
                        "short_description": "Gets the specified user preference value for the current user.",
                        "description": "",
                        "name": "getPreference(String name)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var currentUser = gs.getUser(); \ncurrentUser.savePreference(Â­'myPref','red'); \ngs.info(currentUser.getPreference(Â­'myPref'));",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "name",
                                "type": "String",
                                "description": "The name of the preference."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "The preference value."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SGU-getRoles",
                        "short_description": "Returns a list of roles that includes explicitly granted roles, inherited roles, and\n    roles acquired by group membership.",
                        "description": "",
                        "name": "getRoles()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var currentUser = gs.getUser(); \ngs.info(currentUser.getRoles());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Array",
                            "description": "List of all roles available to the user"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SGU-getUserRoles",
                        "short_description": "Returns the list of roles explicitly granted to the user.",
                        "description": "<p>Unlike the <span class=\"keyword apiname\">getRoles()</span> method, this method does not return roles the user\n        inherits or roles acquired from group membership.</p>",
                        "name": "getUserRoles()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var currentUser = gs.getUser(); \ngs.info(currentUser.getUserRoles());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Array",
                            "description": "List of roles explicitly assigned to the user"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideUserHasRole_String",
                        "short_description": "Determines if the current user has the specified role.",
                        "description": "",
                        "name": "hasRole(String role)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var currentUser = gs.getUser(); \ngs.info(currentUser.hasRole('admin'));",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "role",
                                "type": "String",
                                "description": "Role to check"
                            }
                        ],
                        "return": {
                            "type": "Boolean",
                            "description": "True if the user has the role."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideUserIsMemberOf_String",
                        "short_description": "Determines if the current user is a member of the specified group.",
                        "description": "",
                        "name": "isMemberOf(String group)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var currentUser = gs.getUser(); \ngs.info(currentUser.isMemberOf(Â­'Capacity Mgmt'));",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "group",
                                "type": "String",
                                "description": "Group to check"
                            }
                        ],
                        "return": {
                            "type": "Boolean",
                            "description": "True if the user is a member of the group."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedGlideUserSavePreference_String_String",
                        "short_description": "Saves a user preference value to the database.",
                        "description": "",
                        "name": "savePreference(String name, String value)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var currentUser = gs.getUser(); \ncurrentUser.savePreference('myPref','red'); \ngs.info(currentUser.getPreference('myPref'));",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "name",
                                "type": "String",
                                "description": "The preference to save."
                            },
                            {
                                "name": "value",
                                "type": "String",
                                "description": "The preference value."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "Access these methods using the static object <span class=\"keyword apiname\">GlideXMLUtil</span>. This class is\n      available in scoped and global scripts.",
                "short_description": "Provides methods to remove invalid characters from an XML string, and to validate an\n    XML string.",
                "identifier": "GlideXMLUtilAPI",
                "name": "GlideXMLUtil - Scoped, Global",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "GXUS-removeInvalidChars_S",
                        "short_description": "Removes invalid characters from an XML string.",
                        "description": "",
                        "name": "removeInvalidChars(String xmlString)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var test = \"test\\btab\";\nvar removedTest = GlideXMLUtil.removeInvalidChars(test);\n\ngs.info(removedTest);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "xmlString",
                                "type": "String",
                                "description": "The string to be processed."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "A string with invalid characters removed."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GXUS-validateXML_S_B_B",
                        "short_description": "Determines if the specified string is valid XML.",
                        "description": "",
                        "name": "validateXML(String xmlString, Boolean nsAware, Boolean forgiveUnclosed)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var s = \"&lt;?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?&gt;&lt;unload unload_date=\\\"2017-11-27 21:56:14\\\"&gt;&lt;incident action=\\\"INSERT_OR_UPDATE\\\"&gt;&lt;active&gt;true&lt;/active&gt;&lt;/incident&gt;&lt;/unload&gt;\";\nvar xml = GlideXMLUtil.validateXML(s,false, false);\ngs.info(xml);\n",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "xmlString",
                                "type": "String",
                                "description": "The string to be validated."
                            },
                            {
                                "name": "nsAware",
                                "type": "Boolean",
                                "description": "When true, the validation is aware of name spaces. When false, the validation\n                ignores name spaces."
                            },
                            {
                                "name": "forgiveUnclosed",
                                "type": "Boolean",
                                "description": "When true, the validation does not check for <xml> tags enclosing the\n                string."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "Returns null if the string is valid. Returns an error string describing the\n                error if the specified string is not valid."
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "For scoped applications, the <span class=\"keyword apiname\">JSON</span> API uses static methods that call the\n      JavaScript ES5 native JSON object.",
                "short_description": "Provides scoped methods to create JSON objects from a string, and to turn JSON objects\n    into strings.",
                "identifier": "JSONScopedAPI",
                "name": "JSON",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "JSONScoped-parse_S",
                        "short_description": "Creates an object or primitive type from a JSON formatted string.",
                        "description": "",
                        "name": "parse(String str)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var str = '{\"name\":\"George\",\"lastname\":\"Washington\"}';\nvar obj = JSON.parse(str);\ngs.info('The first name is' + obj.name);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "str",
                                "type": "String",
                                "description": "A JSON formatted string."
                            }
                        ],
                        "return": {
                            "type": "Object",
                            "description": "An object created from the specified string."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "JSONScoped-stringify_O",
                        "short_description": "Creates a string from a JSON object.",
                        "description": "",
                        "name": "stringify(Object jsonObject)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var obj = {\"name\":\"George\",\"lastname\":\"Washington\"};\nvar str =  JSON.stringify(obj);\ngs.info('The object' + str);\n",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "jsonObject",
                                "type": "Object",
                                "description": "The JSON object to be turned into a string."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "A JSON formatted string."
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "Using the <span class=\"keyword apiname\">NotifyConferenceUtil</span> API you can:<br/><br/><ul class=\"ul\" id=\"NotifyConferenceUtils__ul_qvb_kqy_4hb\">\n        <li class=\"li\">Create new conference calls</li>\n\n        <li class=\"li\">Add participants by phone number or user ID</li>\n\n        <li class=\"li\">Remove participants from a conference call</li>\n\n        <li class=\"li\">Mute participants in a conference call</li>\n\n        <li class=\"li\">Unmute participants in a conference call</li>\n\n        <li class=\"li\">Obtain the capabilities of a specified service provider</li>\n\n        <li class=\"li\">End a conference call</li>\n\n      </ul><br/><br/>You can use this API in both scoped and global scripts. To use this API you must activate the\n      Conference Notify plugin (com.snc.notify) which requires a separate subscription. For details\n      on activating this plugin, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-servicenow-platform/page/product/notify2/task/t_ActivateNotify.html\" target=\"_blank\">Activate Notify</a>.",
                "short_description": "The <span class=\"keyword apiname\">NotifyConferenceUtil</span> API provides methods to manage Notify\n    conference calls and SMS messages for various telephony service providers, such as Zoom and\n    WebEx.",
                "identifier": "NotifyConferenceUtils",
                "name": "NotifyConferenceUtil - Scoped, Global",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "NUtil-NotifyConferenceUtils",
                        "short_description": "Instantiates a NotifyConferenceUtils object (constructor).",
                        "description": "",
                        "name": "NotifyConferenceUtils()",
                        "type": "Constructor",
                        "examples": [
                            {
                                "script": "function () {\n\tvar confGR = new GlideRecord('notify_conference_call');\n\tconfGR.get('76d3364d0b5133008e64aabcb4673a6d');\n\n\tvar confUtils = new NotifyConferenceUtils();\n\tvar actionResult = confUtils.addToConferenceByPhoneNumber(\"+917799555331\", confGR)\n\tif (actionResult.status)\n\t\tgs.info('Participant has been added to conference');\n\telse {\n\t\tgs.info('join operation failed');\n\t\tactionResult.warnMessages.forEach(function (msg) {\n\t\t\tgs.info(msg);\n\t\t});\n\t\tactionResult.errorMessages.forEach(function (msg) {\n\t\t\tgs.info(msg);\n\t\t})\n\t}\n})();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "NUtil-addToConferenceByPhoneNumber_S_GR",
                        "short_description": "Adds a participant to a specified conference call using their phone number to identify\n    the participant.",
                        "description": "",
                        "name": "addToConferenceByPhoneNumber(String toNumber, GlideRecord confGR)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "function () {\n\tvar confGR = new GlideRecord('notify_conference_call');\n\tconfGR.get('76d3364d0b5133008e64aabcb4673a6d');\n\n\tvar confUtils = new NotifyConferenceUtils();\n\tvar actionResult = confUtils.addToConferenceByPhoneNumber(\"+917799555331\", confGR)\n\tif (actionResult.status)\n\t\tgs.info('Participant has been added to conference');\n\telse {\n\t\tgs.info('join operation failed');\n\t\tactionResult.warnMessages.forEach(function (msg) {\n\t\t\tgs.info(msg);\n\t\t});\n\t\tactionResult.errorMessages.forEach(function (msg) {\n\t\t\tgs.info(msg);\n\t\t})\n\t}\n})();",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "toNumber",
                                "type": "String",
                                "description": "Phone number of the participant to add to the conference call."
                            },
                            {
                                "name": "confGR",
                                "type": "GlideRecord",
                                "description": "GlideRecord of the conference call to which to add the specified participant.\n                These records are located in the Notify Conference Call [notify_conference_call]\n                table."
                            }
                        ],
                        "return": {
                            "type": "Object",
                            "description": "Results of the conference\n                  action.<p class=\"p\"><samp class=\"ph codeph\">&lt;action&gt;.status</samp>: Status of the conference\n                action.</p>\n<ul class=\"ul\" id=\"NUtil-addToConferenceByPhoneNumber_S_GR__d90234e68\">\n                <li class=\"li\">Data type: Boolean</li>\n\n                <li class=\"li\">Valid values:<ul class=\"ul\" id=\"NUtil-addToConferenceByPhoneNumber_S_GR__d90234e75\">\n                    <li class=\"li\">true: Conference action succeeded</li>\n\n                    <li class=\"li\">false: Conference action failed</li>\n\n                  </ul>\n</li>\n\n              </ul>\n<p class=\"p\"><samp class=\"ph codeph\">&lt;action&gt;.successMessages</samp>: If <var class=\"keyword varname\">status</var> is\n                true, success message(s), else empty.</p>\n<ul class=\"ul\" id=\"NUtil-addToConferenceByPhoneNumber_S_GR__d90234e91\">\n                <li class=\"li\">Data type: Array of Strings</li>\n\n              </ul>\n<p class=\"p\">\n                <samp class=\"ph codeph\">&lt;action&gt;.warnMessages</samp>: If <var class=\"keyword varname\">status</var> is false,\n                any warning messages thrown during processing.</p>\n<ul class=\"ul\" id=\"NUtil-addToConferenceByPhoneNumber_S_GR__d90234e104\">\n                <li class=\"li\">Data type: Array of Strings</li>\n\n              </ul>\n<p class=\"p\">\n                <samp class=\"ph codeph\">&lt;action&gt;.errorMessages</samp>: If <var class=\"keyword varname\">status</var> is false,\n                any error messages thrown during processing.</p>\n<ul class=\"ul\" id=\"NUtil-addToConferenceByPhoneNumber_S_GR__d90234e117\">\n                <li class=\"li\">Data type: Array of Strings</li>\n\n              </ul>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "NUtil-addToConferenceByUserId_S_GR",
                        "short_description": "Adds a participant to the conference call referenced by the passed in GlideRecord using\n    their unique user identifier.",
                        "description": "",
                        "name": "addToConferenceByUserId(String userId, GlideRecord confGR)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "(function () {\n\tvar confGR = new GlideRecord('notify_conference_call');\n\tconfGR.get('76d3364d0b5133008e64aabcb4673a6d');\n\n\tvar confUtils = new NotifyConferenceUtils();\n\tvar actionResult = confUtils.addToConferenceByUserId(gs.getUserID(), confGR)\n\tif (actionResult.status)\n\t\tgs.info('Participant has been added to conference');\n\telse {\n\t\tgs.info('join operation failed');\n\t\tactionResult.warnMessages.forEach(function (msg) {\n\t\t\tgs.info(msg);\n\t\t});\n\t\tactionResult.errorMessages.forEach(function (msg) {\n\t\t\tgs.info(msg);\n\t\t})\n\t}\n})();\n",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "userId",
                                "type": "String",
                                "description": "Sys ID of the participant to add to the specified conference call. This\n                information is located in the User [sys_user] table."
                            },
                            {
                                "name": "confGR",
                                "type": "GlideRecord",
                                "description": "GlideRecord of the conference call to add the specified participant. These\n                records are located in the Notify Conference Call [notify_conference_call]\n                table."
                            }
                        ],
                        "return": {
                            "type": "Object",
                            "description": "Results of the conference\n                  action.<p class=\"p\"><samp class=\"ph codeph\">&lt;action&gt;.status</samp>: Status of the conference\n                action.</p>\n<ul class=\"ul\" id=\"NUtil-addToConferenceByUserId_S_GR__d90234e68\">\n                <li class=\"li\">Data type: Boolean</li>\n\n                <li class=\"li\">Valid values:<ul class=\"ul\" id=\"NUtil-addToConferenceByUserId_S_GR__d90234e75\">\n                    <li class=\"li\">true: Conference action succeeded</li>\n\n                    <li class=\"li\">false: Conference action failed</li>\n\n                  </ul>\n</li>\n\n              </ul>\n<p class=\"p\"><samp class=\"ph codeph\">&lt;action&gt;.successMessages</samp>: If <var class=\"keyword varname\">status</var> is\n                true, success message(s), else empty.</p>\n<ul class=\"ul\" id=\"NUtil-addToConferenceByUserId_S_GR__d90234e91\">\n                <li class=\"li\">Data type: Array of Strings</li>\n\n              </ul>\n<p class=\"p\">\n                <samp class=\"ph codeph\">&lt;action&gt;.warnMessages</samp>: If <var class=\"keyword varname\">status</var> is false,\n                any warning messages thrown during processing.</p>\n<ul class=\"ul\" id=\"NUtil-addToConferenceByUserId_S_GR__d90234e104\">\n                <li class=\"li\">Data type: Array of Strings</li>\n\n              </ul>\n<p class=\"p\">\n                <samp class=\"ph codeph\">&lt;action&gt;.errorMessages</samp>: If <var class=\"keyword varname\">status</var> is false,\n                any error messages thrown during processing.</p>\n<ul class=\"ul\" id=\"NUtil-addToConferenceByUserId_S_GR__d90234e117\">\n                <li class=\"li\">Data type: Array of Strings</li>\n\n              </ul>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "NUtil-doConferenceAction_S_O",
                        "short_description": "Performs the specified conference call action, such as starting/ending a conference\n    call or joining, removing, muting, or unmuting participants from a conference call.",
                        "description": "<p>You can start a new conference call and add participants within a single call to this\n        method or call the method multiple times to start the call and then manage participants\n        separately. In addition, through the passed in data object, you can configure the method\n          to:<ul class=\"ul\" id=\"NUtil-doConferenceAction_S_O__ul_rqn_z2y_vhb\">\n          <li class=\"li\">Save\n            pointers\n            in the conference call record to the specific record (source record),\n            such as an incident or problem, that is the topic of discussion for the conference\n            call.</li>\n\n          <li class=\"li\">Allow/disallow multiple conference calls for a source record.</li>\n\n          <li class=\"li\">Automatically log the participants that were in the conference call in the \"Work\n            Notes\" field of the source record.</li>\n\n          <li class=\"li\">Have a message read aloud when a participant answers an outgoing call from the\n            conference.</li>\n\n        </ul></p>",
                        "name": "doConferenceAction(String action, Object data)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "(function (confId) {\n\tvar confUtils = new NotifyConferenceUtils();\n\tvar data = confUtils.getConferenceInputDataTemplate();\n\tdata.table = 'incident';\n\tdata.sysId = '1234';\n\tdata.addToWorkNotes = false;\n\tdata.confId = confId;\n\tdata.message = 'p1 incident has been created';\n\tdata.fromNumber = 'twilio/Telephony driver number';\n\tdata.items.push({ id: 'user3SysId', phoneNumber: '+917799555332' });\n\tdata.items.push({ id: 'user4SysId', email: 'yln99518@gmail.com' });\n\n\tvar result = confUtils.doConferenceAction('start', data);\n\tif (result.status) {\n\t\tgs.info('Start conference action succeeded');\n\t} else\n\t\tgs.info('Start conference action failed');\n\n\tresult.errorMessages.forEach(function (msg) {\n\t\tgs.info(msg);\n\t});\n\tresult.warnMessages.forEach(function (msg) {\n\t\tgs.info(msg);\n\t});\n\tresult.successMessages.forEach(function (msg) {\n\t\tgs.info(msg);\n\t});\n})('activeConfSysId');\n",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "action",
                                "type": "String",
                                "description": "Defines the conference call action to perform.<div class=\"p\">The\n                following are the available conference call actions:<ul class=\"ul\" id=\"NUtil-doConferenceAction_S_O__d90234e554\">\n                  <li class=\"li\">start: Starts the conference call identified in\n                      <span class=\"keyword parmname\">data.confId</span></li>\n\n                  <li class=\"li\">end: Terminates the conference call identified in\n                      <span class=\"keyword parmname\">data.confId</span></li>\n\n                  <li class=\"li\">join: Adds the participant specified in the <span class=\"keyword parmname\">data.items</span>\n                    array to the conference call identified in <span class=\"keyword parmname\">data.confId</span></li>\n\n                  <li class=\"li\">multiJoin: Adds the participants specified in the\n                      <span class=\"keyword parmname\">data.items</span> array to the conference call identified in\n                      <span class=\"keyword parmname\">data.confId</span></li>\n\n                  <li class=\"li\">selfJoin: Adds the currently logged in user to the conference call (no entry\n                    in <span class=\"keyword parmname\">data.items</span> required.)</li>\n\n                  <li class=\"li\">kick: Removes the participant specified in the <span class=\"keyword parmname\">data.items</span>\n                    array from the conference call identified in\n                    <span class=\"keyword parmname\">data.confId</span></li>\n\n                  <li class=\"li\">multiKick: Removes the participants specified in the\n                      <span class=\"keyword parmname\">data.items</span> array from the conference call identified in\n                      <span class=\"keyword parmname\">data.confId</span></li>\n\n                  <li class=\"li\">mute: Mutes the participant specified in the <span class=\"keyword parmname\">data.items</span>\n                    array on the conference call identified in <span class=\"keyword parmname\">data.confId</span></li>\n\n                  <li class=\"li\">multiMute: Mutes the participants specified in the\n                      <span class=\"keyword parmname\">data.items</span> array on the conference call identified in\n                      <span class=\"keyword parmname\">data.confId</span></li>\n\n                  <li class=\"li\">unmute: Unmutes the participant specified in the\n                      <span class=\"keyword parmname\">data.items</span> array from the conference call identified in\n                      <span class=\"keyword parmname\">data.confId</span></li>\n\n                  <li class=\"li\">multiUnmute: Unmutes the participants specified in the\n                      <span class=\"keyword parmname\">data.items</span> array from the conference call identified in\n                      <span class=\"keyword parmname\">data.confId</span></li>\n\n                </ul>\n</div>"
                            },
                            {
                                "name": "data",
                                "type": "Object",
                                "description": "Object that describes the conference call."
                            },
                            {
                                "name": "data.addToWorkNotes",
                                "type": "Boolean",
                                "description": "<span class=\"ph\" id=\"NUtil-doConferenceAction_S_O__d90234e179\">Flag that indicates whether to add information\n                about the participants that were included in the conference call in the work notes\n                field of the associated record.</span>\n              <p class=\"p\"><span class=\"ph\" id=\"NUtil-doConferenceAction_S_O__d90234e183\">For this functionality to work, you must also\n                  specify values in the <span class=\"keyword parmname\">data.table</span> and\n                    <span class=\"keyword parmname\">data.sysId</span> parameters. These parameters identify the record\n                  in which to add the work notes.</span></p>\n<p class=\"p\">Default: false</p>\n<p class=\"p\">Actions for which\n                this parameter is valid:</p>\n<ul class=\"ul\" id=\"NUtil-doConferenceAction_S_O__d90234e195\">\n                <li class=\"li\">start</li>\n\n                <li class=\"li\">join</li>\n\n                <li class=\"li\">multiJoin</li>\n\n                <li class=\"li\">selfJoin</li>\n\n              </ul>"
                            },
                            {
                                "name": "data.allowMulticonference",
                                "type": "Boolean",
                                "description": "<span class=\"ph\" id=\"NUtil-doConferenceAction_S_O__d90234e221\">Flag that indicates whether to allow multiple\n                conference calls for a specific record at one time.</span>\n              <p class=\"p\" id=\"NUtil-doConferenceAction_S_O__d90234e224\">For this functionality to work, you must also specify values in the\n                  <span class=\"keyword parmname\">data.table</span> and <span class=\"keyword parmname\">data.sysId</span> parameters.\n                These parameters identify the record that is allowed to have multiple conference\n                calls.</p>\n<p class=\"p\">Default: false</p>\n<p class=\"p\">Actions for which this parameter is valid:</p>\n<ul class=\"ul\" id=\"NUtil-doConferenceAction_S_O__d90234e236\">\n                <li class=\"li\">start</li>\n\n              </ul>"
                            },
                            {
                                "name": "data.confId",
                                "type": "String",
                                "description": "<span class=\"ph\" id=\"NUtil-doConferenceAction_S_O__d90234e254\">Sys ID of the conference call. </span>\n              <p class=\"p\"><span class=\"ph\" id=\"NUtil-doConferenceAction_S_O__d90234e258\">The conference Sys ID is located in the Notify\n                  Conference Call [notify_conference_call] table.</span></p>\n<p class=\"p\">Actions for which this\n                parameter is required:</p>\n<ul class=\"ul\" id=\"NUtil-doConferenceAction_S_O__d90234e262\">\n                <li class=\"li\">end</li>\n\n                <li class=\"li\">join</li>\n\n                <li class=\"li\">multiJoin</li>\n\n                <li class=\"li\">selfJoin</li>\n\n              </ul>\n<div class=\"p\">\n                <div class=\"note note\"><span class=\"notetitle\">Note:</span> Participant actions such as mute, unmute, and kick do not require this\n                  parameter to be set as the method obtains this information from the Notify\n                  Conference Call Participant [notify_participant] table.</div>\n\n              </div>"
                            },
                            {
                                "name": "data.fromNumber",
                                "type": "String",
                                "description": "<span class=\"ph\" id=\"NUtil-doConferenceAction_S_O__d90234e294\">Service provider number to call into for the\n                conference call.</span>\n              <p class=\"p\" id=\"NUtil-doConferenceAction_S_O__d90234e297\">Locate this value in the Number or Phone number column of the Notify Phone Number\n                [notify_number] table.</p>\n<p class=\"p\">Actions for which this parameter is required:</p>\n<ul class=\"ul\" id=\"NUtil-doConferenceAction_S_O__d90234e301\">\n                <li class=\"li\">start</li>\n\n              </ul>"
                            },
                            {
                                "name": "data.isNewConference",
                                "type": "Boolean",
                                "description": "<span class=\"ph\" id=\"NUtil-doConferenceAction_S_O__d90234e320\">Flag that indicates whether this is a new or an\n                existing conference call.</span>\n              <p class=\"p\">Valid values:</p>\n<ul class=\"ul\" id=\"NUtil-doConferenceAction_S_O__d90234e325\">\n                <li class=\"li\">true: New conference call</li>\n\n                <li class=\"li\">false: Existing conference call</li>\n\n              </ul>\n<p class=\"p\">Default: false</p>\n<p class=\"p\">Actions for which this parameter is valid:</p>\n<ul class=\"ul\" id=\"NUtil-doConferenceAction_S_O__d90234e337\">\n                <li class=\"li\">start</li>\n\n              </ul>"
                            },
                            {
                                "name": "data.items",
                                "type": "Array",
                                "description": "<span class=\"ph\" id=\"NUtil-doConferenceAction_S_O__d90234e355\">Information for each participant to include in the\n                conference call.</span>\n              <p class=\"p\">Valid array values:</p>\n<ul class=\"ul\" id=\"NUtil-doConferenceAction_S_O__d90234e360\">\n                <li class=\"li\">id: Sys ID of user; located in the User [sys_User] table.<p class=\"p\">Valid actions: join,\n                    multiJoin, start</p>\n</li>\n\n                <li class=\"li\">notifyParticipantId: Sys ID of the Notify participant; located in the Notify\n                  Participant [notify_participant] table.<p class=\"p\">Valid actions: join, kick, multiJoin,\n                    mute, start, unmute</p>\n</li>\n\n                <li class=\"li\">phoneNumber: Phone number of the participant. If this value is passed in\n                  conjunction with either the <span class=\"keyword parmname\">id</span> or\n                  <span class=\"keyword parmname\"> notifyParticipantId</span>, this value supersedes\n                  the phone numbers in the user/participant record and is used to place the\n                    call.<p class=\"p\">Valid actions: join, multiJoin, start</p>\n</li>\n\n                <li class=\"li\">email: Email address of the participant.<p class=\"p\">Valid actions: join, multiJoin,\n                    start</p>\n</li>\n\n              </ul>"
                            },
                            {
                                "name": "data.message",
                                "type": "String",
                                "description": "<span class=\"ph\" id=\"NUtil-doConferenceAction_S_O__d90234e404\">Message that is read aloud when a user answers the call,\n                such as, \"P1 incident has been created please login to instance.\"</span>\n              <p class=\"p\">Actions for which this parameter is valid:</p>\n<ul class=\"ul\" id=\"NUtil-doConferenceAction_S_O__d90234e409\">\n                <li class=\"li\">start</li>\n\n                <li class=\"li\">join</li>\n\n                <li class=\"li\">multiJoin</li>\n\n              </ul>"
                            },
                            {
                                "name": "data.serviceProvider",
                                "type": "String",
                                "description": "<span class=\"ph\" id=\"NUtil-doConferenceAction_S_O__d90234e433\">Required. Name of conference service provider,\n                such as Zoom or Webex.</span>\n              <p class=\"p\">Actions for which this parameter is required:</p>\n<ul class=\"ul\" id=\"NUtil-doConferenceAction_S_O__d90234e438\">\n                <li class=\"li\">all</li>\n\n              </ul>"
                            },
                            {
                                "name": "data.sysId",
                                "type": "String",
                                "description": "<span class=\"ph\" id=\"NUtil-doConferenceAction_S_O__d90234e456\">Sys ID of the source record to associate with the\n                conference call.</span>\n              <p class=\"p\"><span class=\"ph\" id=\"NUtil-doConferenceAction_S_O__d90234e460\">For example, if a conference call is held to discuss\n                  a specific incident or problem, put the Sys ID of the incident or problem record\n                  in this value. This Sys ID is stored in the Source column of the NotifyConference\n                  Call [notify_conference_call] table and can later be tracked. </span></p>\n<p class=\"p\"><span class=\"ph\" id=\"NUtil-doConferenceAction_S_O__d90234e463\">This parameter is used in conjunction with the\n                    <span class=\"keyword parmname\">data.Table</span>, <span class=\"keyword parmname\">data.addToWorkNotes</span>, and\n                    <span class=\"keyword parmname\">allowMulticonference</span> parameters.</span></p>\n<p class=\"p\">Actions for\n                which this parameter is valid:</p>\n<ul class=\"ul\" id=\"NUtil-doConferenceAction_S_O__d90234e476\">\n                <li class=\"li\">start</li>\n\n              </ul>"
                            },
                            {
                                "name": "data.table",
                                "type": "String",
                                "description": "<span class=\"ph\" id=\"NUtil-doConferenceAction_S_O__d90234e494\">Table that contains the source record to associate with\n                the conference call. A source record can be any record, such as an \"incident\" or\n                \"problem\", that is the topic of discussion in the conference call. </span>\n              <p class=\"p\" id=\"NUtil-doConferenceAction_S_O__d90234e497\">This table name is stored in the Table column of the\n                NotifyConference Call [notify_conference_call] table and can be tracked. </p>\n<p class=\"p\" id=\"NUtil-doConferenceAction_S_O__d90234e499\">This parameter is used in conjunction with the\n                  <span class=\"keyword parmname\">data.sysId</span>, <span class=\"keyword parmname\">data.addToWorkNotes</span>, and\n                  <span class=\"keyword parmname\">allowMulticonference</span> parameters. </p>\n<p class=\"p\">Actions for which\n                this parameter is valid:</p>\n<ul class=\"ul\" id=\"NUtil-doConferenceAction_S_O__d90234e512\">\n                <li class=\"li\">start</li>\n\n              </ul>"
                            }
                        ],
                        "return": {
                            "type": "Object",
                            "description": "Results of the conference\n                  action.<p class=\"p\"><samp class=\"ph codeph\">&lt;action&gt;.status</samp>: Status of the conference\n                action.</p>\n<ul class=\"ul\" id=\"NUtil-doConferenceAction_S_O__d90234e68\">\n                <li class=\"li\">Data type: Boolean</li>\n\n                <li class=\"li\">Valid values:<ul class=\"ul\" id=\"NUtil-doConferenceAction_S_O__d90234e75\">\n                    <li class=\"li\">true: Conference action succeeded</li>\n\n                    <li class=\"li\">false: Conference action failed</li>\n\n                  </ul>\n</li>\n\n              </ul>\n<p class=\"p\"><samp class=\"ph codeph\">&lt;action&gt;.successMessages</samp>: If <var class=\"keyword varname\">status</var> is\n                true, success message(s), else empty.</p>\n<ul class=\"ul\" id=\"NUtil-doConferenceAction_S_O__d90234e91\">\n                <li class=\"li\">Data type: Array of Strings</li>\n\n              </ul>\n<p class=\"p\">\n                <samp class=\"ph codeph\">&lt;action&gt;.warnMessages</samp>: If <var class=\"keyword varname\">status</var> is false,\n                any warning messages thrown during processing.</p>\n<ul class=\"ul\" id=\"NUtil-doConferenceAction_S_O__d90234e104\">\n                <li class=\"li\">Data type: Array of Strings</li>\n\n              </ul>\n<p class=\"p\">\n                <samp class=\"ph codeph\">&lt;action&gt;.errorMessages</samp>: If <var class=\"keyword varname\">status</var> is false,\n                any error messages thrown during processing.</p>\n<ul class=\"ul\" id=\"NUtil-doConferenceAction_S_O__d90234e117\">\n                <li class=\"li\">Data type: Array of Strings</li>\n\n              </ul>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "NUtil-getConferenceInputDataTemplate",
                        "short_description": "Returns a JSON data template to use with the <span class=\"keyword apiname\">doConferenceAction()</span>\n    method. Using this template automatically structures the data object so that you don't have to\n    manually create it.",
                        "description": "<p>Call this method prior to calling the <span class=\"keyword apiname\">doConferenceAction()</span> method. For\n        the desired conference call action, set the desired parameters within the template, and then\n        pass the template in the <span class=\"keyword apiname\">doConferenceAction()</span> call. For additional\n        information on the valid parameters for each action, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-application-development/page/app-store/dev_portal/API_reference/NotifyConferenceUtils/concept/NotifyConferenceUtils.html#NUtil-doConferenceAction_S_O\" target=\"_blank\">doConferenceAction()</a>.</p><p><span class=\"notetitle\">Note:</span> This is a helper method. You can also manually construct this object and pass that\n        object into the <span class=\"keyword apiname\">doConferenceAction()</span> method and have the same\n        outcome.</p>",
                        "name": "getConferenceInputDataTemplate()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "(function (confId) {\n\tvar confUtils = new NotifyConferenceUtils();\n\tvar data = confUtils.getConferenceInputDataTemplate();\n\tdata.confId = confId;\n\tvar result = confUtils.doConferenceAction('end', data);\n\tif (result.status) {\n\t\tgs.info('Conference call has been ended');\n\t} else\n\t\tgs.info('End conference call action failed');\n\n\tresult.errorMessages.forEach(function (msg) {\n\t\tgs.info(msg);\n\t});\n\tresult.warnMessages.forEach(function (msg) {\n\t\tgs.info(msg);\n\t});\n\tresult.successMessages.forEach(function (msg) {\n\t\tgs.info(msg);\n\t});\n})('activeConfSysId');",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "data.table",
                            "description": "<span class=\"ph\" id=\"NUtil-getConferenceInputDataTemplate__d90234e494\">Table that contains the source record to associate with\n                the conference call. A source record can be any record, such as an \"incident\" or\n                \"problem\", that is the topic of discussion in the conference call. </span>\n              <p class=\"p\" id=\"NUtil-getConferenceInputDataTemplate__d90234e497\">This table name is stored in the Table column of the\n                NotifyConference Call [notify_conference_call] table and can be tracked. </p>\n<p class=\"p\" id=\"NUtil-getConferenceInputDataTemplate__d90234e499\">This parameter is used in conjunction with the\n                  <span class=\"keyword parmname\">data.sysId</span>, <span class=\"keyword parmname\">data.addToWorkNotes</span>, and\n                  <span class=\"keyword parmname\">allowMulticonference</span> parameters. </p>\n<p class=\"p\">Actions for which\n                this parameter is valid:</p>\n<ul class=\"ul\" id=\"NUtil-getConferenceInputDataTemplate__d90234e512\">\n                <li class=\"li\">start</li>\n\n              </ul>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "NUtil-getServiceProvidersCapabilities",
                        "short_description": "Returns the capabilities of all telephony service provider drivers in the\n    instance.",
                        "description": "<p>Possible capabilities include:<ul class=\"ul\" id=\"NUtil-getServiceProvidersCapabilities__ul_pq5_qfv_nhb\">\n          <li class=\"li\">archive: archives the conference after it ends</li>\n\n          <li class=\"li\">beepOnLeave: plays a \"beep\" tone when a participant leaves the conference call</li>\n\n          <li class=\"li\">beepOnJoin: plays a \"beep\" tone when a participant joins the conference call</li>\n\n          <li class=\"li\">end: ends the identified conference call</li>\n\n          <li class=\"li\">filesharing: allows file sharing between participants</li>\n\n          <li class=\"li\">join: adds a participant to a conference call</li>\n\n          <li class=\"li\">kick: removes a participant from a conference call</li>\n\n          <li class=\"li\">multiJoin: adds multiple participants to a conference call</li>\n\n          <li class=\"li\">multiKick: removes multiple participants from a conference call</li>\n\n          <li class=\"li\">muteOnJoin: mutes a participant when they initially join a conference call</li>\n\n          <li class=\"li\">multiUnmute: unmutes multiple participants for a conference call</li>\n\n          <li class=\"li\">record: records conference calls</li>\n\n          <li class=\"li\">recording: provides an on-screen indicator when the conference call is being\n            recorded</li>\n\n          <li class=\"li\">screenSharing: allows participant screens to be shared with the group</li>\n\n          <li class=\"li\">selfJoin: adds the current logged in user to a  conference call</li>\n\n          <li class=\"li\">speaking: provides an on-screen message as to who is currently speaking</li>\n\n          <li class=\"li\">start: starts the identified conference call</li>\n\n          <li class=\"li\">unmute: unmutes a participant in a conference call</li>\n\n        </ul></p>",
                        "name": "getServiceProvidersCapabilities()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "(function () {\n\tvar confUtils = new NotifyConferenceUtils();\n\tvar providerToCapability = confUtils.getServiceProvidersCapabilites();\n\tfor (var provider in providerToCapability) {\n\t\tgs.info('{0} supported capabilities \\n\\n', provider);\n\t\tvar capabilities = providerToCapability[provider]\n\t\tfor (var cap in capabilities)\n\t\t\tif(confUtils.isActionSupported(capabilities[cap].isSupported))\n\t\t\t\tgs.info('\"{0}\" action supported', cap);\n\t\t\telse\n\t\t\t\tgs.info(\"'{0}' action is not supported by this conference driver\", cap);\n\t}\n})();\n",
                                "description": "List driver capabilities for all telephony service provider drivers in the instance."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Object",
                            "description": "Key-value pairs of the status of each driver capability.<p class=\"p\">Valid values:</p>\n<ul class=\"ul\" id=\"NUtil-getServiceProvidersCapabilities__ul_jbq_mdt_rhb\">\n                  <li class=\"li\">isSupported = 0: capability is not supported</li>\n\n                  <li class=\"li\">isSupported = 1: capability is supported</li>\n\n                </ul>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "NUtil-isActionSupported_N",
                        "short_description": "Determines whether a Notify conference action is supported by a telephony service\n    provider.",
                        "description": "<p>To use this method, you must first call the\n          <span class=\"keyword apiname\">getServiceProviderCapabilities()</span> method. This method returns an object\n        that contains information about the availability of each possible Notify conference action\n        for each service provider configured in your instance.</p><p>For example:</p><p><pre class=\"pre codeblock\">{\n    \"Telephony\": {\n        \"start\": {\n            \"isSupported\": 1,\n            \"meta\": {}\n        },\n        \"end\": {\n            \"isSupported\": 1,\n            \"meta\": {}\n        },\n        \"selfJoin\": {\n            \"isSupported\": 1,\n            \"meta\": {}\n        },\n        \"join\": {\n            \"isSupported\": 1,\n            \"meta\": {}\n        },\n        \"multiJoin\": {\n            \"isSupported\": 1,\n            \"meta\": {}\n        },\n        \"mute\": {\n            \"isSupported\": 1,\n            \"meta\": {}\n        },\n        \"multiMute\": {\n            \"isSupported\": 1,\n            \"meta\": {}\n        },\n        \"unmute\": {\n            \"isSupported\": 1,\n            \"meta\": {}\n        },\n        \"multiUnmute\": {\n            \"isSupported\": 1,\n            \"meta\": {}\n        },\n        \"kick\": {\n            \"isSupported\": 1,\n            \"meta\": {}\n        },\n        \"multiKick\": {\n            \"isSupported\": 1,\n            \"meta\": {}\n        },\n        \"record\": {\n            \"isSupported\": 0,\n            \"meta\": {}\n        },\n        \"speaking\": {\n            \"isSupported\": 0,\n            \"meta\": {}\n        },\n        \"recording\": {\n            \"isSupported\": 0,\n            \"meta\": {}\n        },\n        \"screenSharing\": {\n            \"isSupported\": 0,\n            \"meta\": {}\n        },\n        \"fileSharing\": {\n            \"isSupported\": 0,\n            \"meta\": {}\n        },\n        \"archive\": {\n            \"isSupported\": 0,\n            \"meta\": {}\n        },\n        \"muteOnJoin\": {\n            \"isSupported\": 0,\n            \"meta\": {}\n        },\n        \"beepOnJoin\": {\n            \"isSupported\": 0,\n            \"meta\": {}\n        },\n        \"beepOnLeave\": {\n            \"isSupported\": 0,\n            \"meta\": {}\n        }\n    }\n}</pre></p>",
                        "name": "isActionSupported(Number action)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "(function () {\n  var confUtils = new NotifyConferenceUtils();\n  var providerToCapability = confUtils.getServiceProvidersCapabilites();\n    for (var provider in providerToCapability) {\n      gs.info('{0} supported capabilities \\n\\n', provider);\n      var capabilities = providerToCapability[provider]\n      for (var cap in capabilities)\n        if (confUtils.isActionSupported(capabilities[cap].isSupported))\n          gs.info('\"{0}\" action supported', cap);\n        else\n          gs.info(\"'{0}' action is not supported by this conference driver\", cap);\n    }\n})();",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "action",
                                "type": "Number",
                                "description": "<p class=\"p\">Value of the <span class=\"keyword parmname\">isSupported</span> parameter returned by the\n                    <span class=\"keyword apiname\">getServiceProvidersCapabilities()</span> method for a specific\n                  action and service provider.</p>\n\n                <div class=\"note note\"><span class=\"notetitle\">Note:</span> Although the <span class=\"keyword parmname\">isSupported</span> value may appear to be a\n                  Boolean, it is actually a Number. Do not try and evaluate the capabilities as\n                  Boolean values. Use this method as the associated values may be expanded in future\n                  versions.</div>"
                            }
                        ],
                        "return": {
                            "type": "Boolean",
                            "description": "Flag that indicates whether the telephony service provider supports the\n                specified action.<p class=\"p\">Valid values:</p>\n<ul class=\"ul\" id=\"NUtil-isActionSupported_N__ul_pkt_mf2_vhb\">\n                  <li class=\"li\">true: action is supported by the service provider</li>\n\n                  <li class=\"li\">false: action is not supported by the service provider</li>\n\n                </ul>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "NUtil-kickByParticipantGR_GR",
                        "short_description": "Removes the participant associated with the passed in GlideRecord from the current\n    conference call.",
                        "description": "",
                        "name": "kickByParticipantGR(GlideRecord notifyParticipantGR)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "(function () {\n    var confUtils = new NotifyConferenceUtils();\n    var participantGR = new GlideRecord('notify_participant');  // Participant record contains conf call ID\n    participantGR.get('validParticipantSysId');\n    var actionResult = confUtils.kickByParticipantGR(participantGR);\n    if (actionResult.status)\n        gs.info('Participant has been kicked out of conference');\n    else {\n        gs.info('kick operation failed');\n        actionResult.warnMessages.forEach(function (msg) {\n            gs.info(msg);\n        });\n        actionResult.errorMessages.forEach(function (msg) {\n            gs.info(msg);\n        })\n    }\n})()\n",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "notifyParticipantGR",
                                "type": "GlideRecord",
                                "description": "GlideRecord object of the participant to remove from the conference call. These\n                records are located in the Notify Participant [notify_participant] table."
                            }
                        ],
                        "return": {
                            "type": "Object",
                            "description": "Results of the conference\n                  action.<p class=\"p\"><samp class=\"ph codeph\">&lt;action&gt;.status</samp>: Status of the conference\n                action.</p>\n<ul class=\"ul\" id=\"NUtil-kickByParticipantGR_GR__d90234e68\">\n                <li class=\"li\">Data type: Boolean</li>\n\n                <li class=\"li\">Valid values:<ul class=\"ul\" id=\"NUtil-kickByParticipantGR_GR__d90234e75\">\n                    <li class=\"li\">true: Conference action succeeded</li>\n\n                    <li class=\"li\">false: Conference action failed</li>\n\n                  </ul>\n</li>\n\n              </ul>\n<p class=\"p\"><samp class=\"ph codeph\">&lt;action&gt;.successMessages</samp>: If <var class=\"keyword varname\">status</var> is\n                true, success message(s), else empty.</p>\n<ul class=\"ul\" id=\"NUtil-kickByParticipantGR_GR__d90234e91\">\n                <li class=\"li\">Data type: Array of Strings</li>\n\n              </ul>\n<p class=\"p\">\n                <samp class=\"ph codeph\">&lt;action&gt;.warnMessages</samp>: If <var class=\"keyword varname\">status</var> is false,\n                any warning messages thrown during processing.</p>\n<ul class=\"ul\" id=\"NUtil-kickByParticipantGR_GR__d90234e104\">\n                <li class=\"li\">Data type: Array of Strings</li>\n\n              </ul>\n<p class=\"p\">\n                <samp class=\"ph codeph\">&lt;action&gt;.errorMessages</samp>: If <var class=\"keyword varname\">status</var> is false,\n                any error messages thrown during processing.</p>\n<ul class=\"ul\" id=\"NUtil-kickByParticipantGR_GR__d90234e117\">\n                <li class=\"li\">Data type: Array of Strings</li>\n\n              </ul>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "NUtil-muteByParticipantGR_GR",
                        "short_description": "Mutes the participant associated with the passed in GlideRecord on the current\n    conference call.",
                        "description": "",
                        "name": "muteByParticipantGR(GlideRecord notifyParticipantGR)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "(function () {\n    var confUtils = new NotifyConferenceUtils();\n    var participantGR = new GlideRecord('notify_participant');\n    participantGR.get('validSysId');\n    var actionResult = confUtils.muteByParticipantGR(participantGR);\n    if (actionResult.status)\n        gs.info('Participant has been muted');\n    else {\n        gs.info('mute operation failed');\n        actionResult.warnMessages.forEach(function (msg) {\n            gs.info(msg);\n        });\n        actionResult.errorMessages.forEach(function (msg) {\n            gs.info(msg);\n        })\n    }\n})()",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "notifyParticipantGR",
                                "type": "Object",
                                "description": "GlideRecord object of the participant to mute. These records are located in the\n                Notify Participant [notify_participant] table."
                            }
                        ],
                        "return": {
                            "type": "Object",
                            "description": "Results of the conference\n                  action.<p class=\"p\"><samp class=\"ph codeph\">&lt;action&gt;.status</samp>: Status of the conference\n                action.</p>\n<ul class=\"ul\" id=\"NUtil-muteByParticipantGR_GR__d90234e68\">\n                <li class=\"li\">Data type: Boolean</li>\n\n                <li class=\"li\">Valid values:<ul class=\"ul\" id=\"NUtil-muteByParticipantGR_GR__d90234e75\">\n                    <li class=\"li\">true: Conference action succeeded</li>\n\n                    <li class=\"li\">false: Conference action failed</li>\n\n                  </ul>\n</li>\n\n              </ul>\n<p class=\"p\"><samp class=\"ph codeph\">&lt;action&gt;.successMessages</samp>: If <var class=\"keyword varname\">status</var> is\n                true, success message(s), else empty.</p>\n<ul class=\"ul\" id=\"NUtil-muteByParticipantGR_GR__d90234e91\">\n                <li class=\"li\">Data type: Array of Strings</li>\n\n              </ul>\n<p class=\"p\">\n                <samp class=\"ph codeph\">&lt;action&gt;.warnMessages</samp>: If <var class=\"keyword varname\">status</var> is false,\n                any warning messages thrown during processing.</p>\n<ul class=\"ul\" id=\"NUtil-muteByParticipantGR_GR__d90234e104\">\n                <li class=\"li\">Data type: Array of Strings</li>\n\n              </ul>\n<p class=\"p\">\n                <samp class=\"ph codeph\">&lt;action&gt;.errorMessages</samp>: If <var class=\"keyword varname\">status</var> is false,\n                any error messages thrown during processing.</p>\n<ul class=\"ul\" id=\"NUtil-muteByParticipantGR_GR__d90234e117\">\n                <li class=\"li\">Data type: Array of Strings</li>\n\n              </ul>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "NUtil-unmuteByParticipantGR_GR",
                        "short_description": "Unmutes the participant associated with the passed in GlideRecord on the current\n    conference call.",
                        "description": "",
                        "name": "unmuteByParticipantGR(GlideRecord notifyParticipantGR)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "(function () {\n    var confUtils = new NotifyConferenceUtils();\n    var participantGR = new GlideRecord('notify_participant');\n    participantGR.get('validSysId');\n    var actionResult = confUtils.unmuteByParticipantGR(participantGR);\n    if (actionResult.status)\n        gs.info('Participant has been Unmuted');\n    else {\n        gs.info('Unmute operation failed');\n        actionResult.warnMessages.forEach(function (msg) {\n            gs.info(msg);\n        });\n        actionResult.errorMessages.forEach(function (msg) {\n            gs.info(msg);\n        })\n    }\n})();\n",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "notifyParticipantGR",
                                "type": "GlideRecord",
                                "description": "GlideRecord object of the participant to unmute. These records are located in\n                the Notify Participant [notify_participant] table."
                            }
                        ],
                        "return": {
                            "type": "Object",
                            "description": "Results of the conference\n                  action.<p class=\"p\"><samp class=\"ph codeph\">&lt;action&gt;.status</samp>: Status of the conference\n                action.</p>\n<ul class=\"ul\" id=\"NUtil-unmuteByParticipantGR_GR__d90234e68\">\n                <li class=\"li\">Data type: Boolean</li>\n\n                <li class=\"li\">Valid values:<ul class=\"ul\" id=\"NUtil-unmuteByParticipantGR_GR__d90234e75\">\n                    <li class=\"li\">true: Conference action succeeded</li>\n\n                    <li class=\"li\">false: Conference action failed</li>\n\n                  </ul>\n</li>\n\n              </ul>\n<p class=\"p\"><samp class=\"ph codeph\">&lt;action&gt;.successMessages</samp>: If <var class=\"keyword varname\">status</var> is\n                true, success message(s), else empty.</p>\n<ul class=\"ul\" id=\"NUtil-unmuteByParticipantGR_GR__d90234e91\">\n                <li class=\"li\">Data type: Array of Strings</li>\n\n              </ul>\n<p class=\"p\">\n                <samp class=\"ph codeph\">&lt;action&gt;.warnMessages</samp>: If <var class=\"keyword varname\">status</var> is false,\n                any warning messages thrown during processing.</p>\n<ul class=\"ul\" id=\"NUtil-unmuteByParticipantGR_GR__d90234e104\">\n                <li class=\"li\">Data type: Array of Strings</li>\n\n              </ul>\n<p class=\"p\">\n                <samp class=\"ph codeph\">&lt;action&gt;.errorMessages</samp>: If <var class=\"keyword varname\">status</var> is false,\n                any error messages thrown during processing.</p>\n<ul class=\"ul\" id=\"NUtil-unmuteByParticipantGR_GR__d90234e117\">\n                <li class=\"li\">Data type: Array of Strings</li>\n\n              </ul>"
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "You can get an <span class=\"keyword apiname\">Optional</span> object in these ways:<br/><br/><ul class=\"ul\" id=\"OptionalGlobalAPI__ul_d3q_3dl_4mb\">\n        <li class=\"li\">Return an <span class=\"keyword apiname\">Optional</span> object from these methods in the\n            <span class=\"keyword apiname\">GlideQuery</span> class. For more information, see <a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/GlideQueryAPI\" title=\"The GlideQuery API is an alternative to GlideRecord to perform CRUD operations on record data from server-side scripts.\"><span class=\"keyword apiname\">GlideQuery</span></a>.<ul class=\"ul\" id=\"OptionalGlobalAPI__ul_bgr_bhl_4mb\">\n            <li class=\"li\"><a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/GlideQueryAPI#GQ-getBy_O_O\" title=\"Returns an Optional object containing a single record based on a set of name-value pairs to query by. Assumes the '=' operator for each name-value pair.\"><span class=\"keyword apiname\">getBy()</span></a></li>\n\n            <li class=\"li\"><a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/GlideQueryAPI#GQ-get_S_O\" title=\"Returns a single record from the query.\"><span class=\"keyword apiname\">get()</span></a></li>\n\n            <li class=\"li\"><a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/GlideQueryAPI#GQ-insert_O_O\" title=\"Inserts a record and returns an Optional object containing the record.\"><span class=\"keyword apiname\">insert()</span></a></li>\n\n            <li class=\"li\"><a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/GlideQueryAPI#GQ-insertOrUpdate_O_O\" title=\"Updates an existing record, or inserts a new record if one does not already exist.\"><span class=\"keyword apiname\">insertOrUpdate()</span></a></li>\n\n            <li class=\"li\"><a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/GlideQueryAPI#GQ-update_O_O\" title=\"Updates an existing record that matches the defined conditions.\"><span class=\"keyword apiname\">update()</span></a></li>\n\n            <li class=\"li\"><a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/GlideQueryAPI#GQ-selectOne_S\" title=\"Returns the result of the query as an Optional object containing specified fields.\"><span class=\"keyword apiname\">selectOne()</span></a></li>\n\n            <li class=\"li\"><a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/GlideQueryAPI#GQ-avg_S\" title=\"Returns the aggregate average of a given numeric field.\"><span class=\"keyword apiname\">avg()</span></a></li>\n\n            <li class=\"li\"><a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/GlideQueryAPI#GQ-max_S\" title=\"Returns the aggregate maximum of a given field.\"><span class=\"keyword apiname\">max()</span></a></li>\n\n            <li class=\"li\"><a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/GlideQueryAPI#GQ-min_S\" title=\"Returns the aggregate minimum of a given field.\"><span class=\"keyword apiname\">min()</span></a></li>\n\n            <li class=\"li\"><a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/GlideQueryAPI#GQ-sum_S\" title=\"Returns the aggregate sum of a given numeric field.\"><span class=\"keyword apiname\">sum()</span></a></li>\n\n          </ul>\n</li>\n\n        <li class=\"li\">Return an <span class=\"keyword apiname\">Optional</span> object from the <a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/StreamGlobalAPI#Stream-find_F\" title=\"Returns the first record or item in the Stream object that matches the predicate function. If no predicate function is provided, then the method returns the first record or item in the Stream.\"><span class=\"keyword apiname\">find()</span></a> method\n          in the <span class=\"keyword apiname\">Stream</span> class. For more information on <span class=\"keyword apiname\">Stream</span>,\n          see the <a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/StreamGlobalAPI\" title=\"The Stream API interacts with a stream of items such as records. For example, you can use the forEach() method to update the state of each record in a stream returned by the GlideQuery API.\"><span class=\"keyword apiname\">Stream</span></a> API.</li>\n\n        <li class=\"li\">Use the <a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/OptionalGlobalAPI#Optional-lazy_F\" title=\"Returns a new Optional object. Instead of containing the record, the object contains a function to get the record that is only called if and when requested in the code.\"><span class=\"keyword apiname\">lazy()</span></a>\n          method to generate the value of the Optional if ever needed. </li>\n\n      </ul><br/><br/>These methods are static and do not require an instance of the class:<br/><br/><ul class=\"ul\" id=\"OptionalGlobalAPI__ul_jpq_2px_5mb\">\n        <li class=\"li\"><a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/OptionalGlobalAPI#Optional-lazy_F\" title=\"Returns a new Optional object. Instead of containing the record, the object contains a function to get the record that is only called if and when requested in the code.\"><span class=\"keyword apiname\">lazy()</span></a></li>\n\n        <li class=\"li\"><a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/OptionalGlobalAPI#Optional-of_A\" title=\"Wraps a given value in an Optional object. For example, you can wrap the result of a GlideRecord query in an Optional object to use the associated methods.\"><span class=\"keyword apiname\">of()</span></a></li>\n\n        <li class=\"li\"><a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/OptionalGlobalAPI#Optional-empty_S\" title=\"Returns an empty Optional object. Use this method in an Else clause to handle a query that might not return a result.\"><span class=\"keyword apiname\">empty()</span></a></li>\n\n      </ul><br/><br/>You can use these static methods with any API that returns a single value such as <a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/c_GlideRecordScopedAPI\" title=\"Scoped GlideRecord is used for database operations.\"><span class=\"keyword apiname\">GlideRecord</span></a>.<br/><br/>Use the <span class=\"keyword apiname\">Optional</span> API in scoped or global server-side scripts. This API\n      requires the GlideQuery [com.sn_glidequery] plugin.<br/><br/><h2 class=\"title sectiontitle\">Implementation</h2>\n      \n      <p class=\"p\">This API can work with the <a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/GlideQueryAPI\" title=\"The GlideQuery API is an alternative to GlideRecord to perform CRUD operations on record data from server-side scripts.\"><span class=\"keyword apiname\">GlideQuery</span></a> and <a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/StreamGlobalAPI\" title=\"The Stream API interacts with a stream of items such as records. For example, you can use the forEach() method to update the state of each record in a stream returned by the GlideQuery API.\"><span class=\"keyword apiname\">Stream</span></a> APIs in\n        a <span class=\"ph\">builder pattern where the method calls chain together, each method\n          building on the returned result of the previous method. Use methods to define the\n          attributes of the query. The methods do not execute until you call a terminal method, a\n          method that returns a query result, allowing you to define the requirements of the query\n          before executing it.</span></p>\n\n      <p class=\"p\"><span class=\"ph\">If the query returns a single record, the system wraps the result\n          in an Optional object. If the query returns a stream of records, the system wraps the\n          result in a Stream object. These objects let you manage the result using a set of methods\n          in each API.</span></p>\n\n      <p class=\"p\"><span class=\"ph\">For example, here's a script that performs a query on the\n          Task table and groups the records by priority and returns groups with total reassignments\n          greater than four.</span></p>\n\n      <div class=\"p\">\n        <pre><code class='language-javascript'>var query = new global.GlideQuery('task')\n    .where('active', true) //Returns new GlideQuery object with a \"where\" clause.\n    .groupBy('priority') //Returns new GlideQuery object with a \"group by\" clause.\n    .aggregate('sum', 'reassignment_count') //Returns new GlideQuery object with a \"sum(reassignment_count)\" clause.\n    .having('sum', 'reassignment_count', '&gt;', 4) //Returns new GlideQuery object with a \"having reassignment_count &gt; 4\" clause.\n    .select() //Returns a stream of records wrapped in a Stream object.  \n    .toArray(10); //Terminal method in the Stream class that executes the query and returns the result. </code></pre>\n\n      </div><br/><br/><h2 class=\"title sectiontitle\">Terminal methods</h2>\n      \n      <p class=\"p\">For performance reasons, a query only fetches data when you call a terminal method. These\n        are the terminal methods from the <span class=\"keyword apiname\">Optional</span> class:</p>\n\n      <div class=\"p\">\n        <ul class=\"ul\" id=\"OptionalGlobalAPI__ul_z2v_tgg_ymb\">\n          <li class=\"li\"><a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/OptionalGlobalAPI#Optional-get\" title=\"Returns the record inside the Optional object, or returns an error if the query does not return a record.\"><span class=\"keyword apiname\">get()</span></a></li>\n\n          <li class=\"li\"><a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/OptionalGlobalAPI#Optional-orElse\" title=\"Adds a default value within the Optional object if the query does not return any results.\"><span class=\"keyword apiname\">orElse()</span></a></li>\n\n          <li class=\"li\"><a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/OptionalGlobalAPI#Optional-ifPresent_F\" title=\"Applies a function to the record within an Optional object. If the Optional object does not contain a record, the function does not execute.\"><span class=\"keyword apiname\">ifPresent()</span></a></li>\n\n          <li class=\"li\"><a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/OptionalGlobalAPI#Optional-isEmpty\" title=\"Returns true if the Optional object is empty.\"><span class=\"keyword apiname\">isEmpty()</span></a></li>\n\n          <li class=\"li\"><a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/OptionalGlobalAPI#Optional-isPresent\" title=\"Checks whether an Optional object contains a value.\"><span class=\"keyword apiname\">isPresent()</span></a></li>\n\n        </ul>\n\n      </div>",
                "short_description": "The <span class=\"keyword apiname\">Optional</span> API interacts with a single record returned by the\n      <span class=\"keyword apiname\">GlideQuery</span>, <span class=\"keyword apiname\">Stream</span>, or <span class=\"keyword apiname\">GlideRecord</span>\n    APIs, even when it does not exist. Write scripts that are less likely to result in an error by\n    handling null or undefined query results.",
                "identifier": "OptionalGlobalAPI",
                "name": "Optional",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "Optional-empty_S",
                        "short_description": "Returns an empty Optional object. Use this method in an Else clause to handle a query\n    that might not return a result.",
                        "description": "<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This method is static. You do not need an instance of the class to use this method.\n        </div></p>",
                        "name": "empty(String reason)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var now_GR = new GlideRecord('task');\nnow_GR.addQuery('approval', 'not requested'); \nnow_GR.query();\nvar optional;\nif (now_GR.next()) {\n    optional = Optional.of(now_GR.getUniqueValue());\n} else {\n    optional = Optional.empty(\"no results\");\n}\n\ngs.info(optional.get());",
                                "description": "This example shows you how to generate an empty Optional object when a query does not\n        return a result."
                            }
                        ],
                        "params": [
                            {
                                "name": "reason",
                                "type": "String",
                                "description": "Optional. Reason displayed in the log when <span class=\"keyword apiname\">Optional.get()</span> is\n                called on the empty Optional object."
                            }
                        ],
                        "return": {
                            "type": "<a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/OptionalGlobalAPI\" title=\"The Optional API interacts with a single record returned by the GlideQuery, Stream, or GlideRecord APIs, even when it does not exist. Write scripts that are less likely to result in an error by handling null or undefined query results.\">Optional</a>",
                            "description": "Object used to interact with a single record."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "Optional-filter_F",
                        "short_description": "Applies a predicate function, a function that takes a single value and returns true or\n    false, to the record inside the Optional object. If the function returns true, the method\n    returns the Optional record unchanged. If the function returns false, it returns an empty\n    Optional object.",
                        "description": "",
                        "name": "filter(Function predicate)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var filteredQuery = new global.GlideQuery('sys_user')\n    .getBy({ sys_id: 'f682abf03710200044e0bfc8bcbe5d38' }, ['phone'])\n    .filter(function (user) {\n        return phoneRegex.test(user.phone);\n    });",
                                "description": "This example shows you how to apply a filter function to an Optional result."
                            }
                        ],
                        "params": [
                            {
                                "name": "predicate",
                                "type": "Function",
                                "description": "Predicate function to apply to the value inside the Optional object. Must\n                return a Boolean value."
                            }
                        ],
                        "return": {
                            "type": "<a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/OptionalGlobalAPI\" title=\"The Optional API interacts with a single record returned by the GlideQuery, Stream, or GlideRecord APIs, even when it does not exist. Write scripts that are less likely to result in an error by handling null or undefined query results.\">Optional</a>",
                            "description": "Object used to interact with a single record."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "Optional-flatMap_F",
                        "short_description": "Applies a function that returns an Optional object to the result of a query. Use this\n    method to perform a second query using the result of the first.",
                        "description": "",
                        "name": "flatMap(Function fn)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "new global.GlideQuery('alm_asset')\n    .whereNotNull('owned_by')\n    .selectOne('owned_by')\n    .flatMap(function (asset) {\n        return new global.GlideQuery('sys_user')\n            .getBy({ sys_id: asset.owned_by }, ['first_name', 'last_name', 'company.name'])\n    })\n    .ifPresent(GQ.jsonDebug);",
                                "description": "This example shows how to execute a query of the User table based on the result of a\n        previous query."
                            }
                        ],
                        "params": [
                            {
                                "name": "fn",
                                "type": "Function",
                                "description": "Function\n                to apply to the results of the query that returned the Optional\n                object."
                            }
                        ],
                        "return": {
                            "type": "<a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/OptionalGlobalAPI\" title=\"The Optional API interacts with a single record returned by the GlideQuery, Stream, or GlideRecord APIs, even when it does not exist. Write scripts that are less likely to result in an error by handling null or undefined query results.\">Optional</a>",
                            "description": "Object used to interact with a single record."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "Optional-get",
                        "short_description": "Returns the record inside the Optional object, or returns an error if the query does\n    not return a record.",
                        "description": "",
                        "name": "get()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var value = new global.GlideQuery('sys_user')\n    .selectOne('first_name') //Returns the result of the query inside an Optional object\n    .get(); //Calls Optional.get() on the Optional object\n\ngs.info(JSON.stringify(value));",
                                "description": "This example shows how to get the value of a single record."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Any",
                            "description": "The record inside the Optional object. If the value is null or undefined, the\n                system returns an error."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "Optional-ifPresent_F",
                        "short_description": "Applies a function to the record within an Optional object. If the Optional object does\n    not contain a record, the function does not execute.",
                        "description": "",
                        "name": "ifPresent(Function fn)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var user = new global.GlideQuery('sys_user')\n    .where('sys_id', 'f682abf03710200044e0bfc8bcbe5d38')\n    .selectOne('zip')\n    .ifPresent(function (user) {\n      gs.info('Zip Code: ' + user.zip);\n    });",
                                "description": "This example shows how to print a value if it exists."
                            }
                        ],
                        "params": [
                            {
                                "name": "fn",
                                "type": "Function",
                                "description": "The function to apply to the record within the Optional object."
                            }
                        ],
                        "return": {
                            "type": "None",
                            "description": "Â "
                        },
                        "extras": []
                    },
                    {
                        "identifier": "Optional-isEmpty",
                        "short_description": "Returns true if the Optional object is empty.",
                        "description": "",
                        "name": "isEmpty()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var checkEmpty = new global.GlideQuery('sys_user')\n    .where('last_name', 'Barker')\n    .selectOne()\n    .isEmpty();\n\ngs.info(checkEmpty);",
                                "description": "This example shows how to check whether the result of a query is empty."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "<p class=\"p\">Flag that indicates whether the result of a query contains a value.</p>\n\n                <div class=\"p\">Valid values:<ul class=\"ul\" id=\"Optional-isEmpty__ul_htd_wcs_smb\">\n                    <li class=\"li\">true: The query returns null or undefined.</li>\n\n                    <li class=\"li\">false: The query returns a value.</li>\n\n                  </ul>\n</div>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "Optional-isPresent",
                        "short_description": "Checks whether an Optional object contains a value.",
                        "description": "",
                        "name": "isPresent()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var checkPresent = new global.GlideQuery('sys_user')    \n   .where('last_name', 'Luddy')\n   .selectOne('first_name')\n   .isPresent();\n\ngs.info(checkPresent);",
                                "description": "This example shows how to check whether a query returns a result."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "<p class=\"p\">Flag that indicates whether the result of a query contains a value.</p>\n\n                <div class=\"p\">Valid values:<ul class=\"ul\" id=\"Optional-isPresent__ul_htd_wcs_smb\">\n                    <li class=\"li\">true: The query returns a value.</li>\n\n                    <li class=\"li\">false: The query returns null or undefined.</li>\n\n                  </ul>\n</div>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "Optional-lazy_F",
                        "short_description": "Returns a new Optional object. Instead of containing the record, the object contains a\n    function to get the record that is only called if and when requested in the code.",
                        "description": "<p>Use this method to delay getting the value until it's needed. You might do this if\n        requesting the value from a slow source and don't want to slow down your code unnecessarily.\n        Otherwise, you can return an Optional object using the <a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/GlideQueryAPI\" title=\"The GlideQuery API is an alternative to GlideRecord to perform CRUD operations on record data from server-side scripts.\"><span class=\"keyword apiname\">GlideQuery</span></a> and <a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/StreamGlobalAPI\" title=\"The Stream API interacts with a stream of items such as records. For example, you can use the forEach() method to update the state of each record in a stream returned by the GlideQuery API.\"><span class=\"keyword apiname\">Stream</span></a>\n        APIs.</p><p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This method is static. You do not need an instance of the class to use this method.\n        </div></p>",
                        "name": "lazy(Function lazyGetFn)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var userOptional = global.Optional.lazy(function () {\n    var userGr = new GlideRecord('sys_user');\n    userGr.setLimit(1);\n    userGr.query();\n    return userGr.next() ? userGr.getUniqueValue() : null;\n});\n\ngs.info(userOptional);",
                                "description": "This example shows how to get an Optional object based on a GlideRecord query."
                            }
                        ],
                        "params": [
                            {
                                "name": "lazyGetFn",
                                "type": "Function",
                                "description": "Function that returns a single record as a result of a query. For example:\n                <pre class=\"pre codeblock\">var userGr = new GlideRecord('sys_user');</pre>"
                            }
                        ],
                        "return": {
                            "type": "<a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/OptionalGlobalAPI\" title=\"The Optional API interacts with a single record returned by the GlideQuery, Stream, or GlideRecord APIs, even when it does not exist. Write scripts that are less likely to result in an error by handling null or undefined query results.\">Optional</a>",
                            "description": "Object containing the result of the query in the format\n                  <samp class=\"ph codeph\">Optional&lt;result&gt;</samp>."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "Optional-map_F",
                        "short_description": "Applies a function to the result of a query.",
                        "description": "",
                        "name": "map(Function fn)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var value = new global.GlideQuery('sys_user')\n    .whereNotNull('first_name')\n    .selectOne('first_name')\n    .map(function (user) {\n\t       return user.first_name.toUpperCase();\n    });\n\ngs.info(value);",
                                "description": "This example shows how to apply a function that transforms a value to upper case to the\n        result of a query."
                            }
                        ],
                        "params": [
                            {
                                "name": "fn",
                                "type": "Function",
                                "description": "Function to apply to the result of the query."
                            }
                        ],
                        "return": {
                            "type": "<a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/OptionalGlobalAPI\" title=\"The Optional API interacts with a single record returned by the GlideQuery, Stream, or GlideRecord APIs, even when it does not exist. Write scripts that are less likely to result in an error by handling null or undefined query results.\">Optional</a>",
                            "description": "Object containing the results of the query updated by the function in the\n                format <samp class=\"ph codeph\">Optional&lt;result&gt;</samp>."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "Optional-of_A",
                        "short_description": "Wraps a given value in an Optional object. For example, you can wrap the result of a\n    GlideRecord query in an Optional object to use the associated methods.",
                        "description": "<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This method is static. You do not need an instance of the class to use this method.\n        </div></p>",
                        "name": "of(Any value)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var now_GR = new GlideRecord('task');\nnow_GR.addQuery('approval', 'not requested'); \nnow_GR.query();\nvar optional;\nif (now_GR.next()) {\n    optional = Optional.of(now_GR.getUniqueValue());\n} else {\n    optional = Optional.empty(\"no results\");\n}\n\ngs.info(optional.get());",
                                "description": "This example shows you how to generate an Optional object based on a GlideRecord query."
                            }
                        ],
                        "params": [
                            {
                                "name": "value",
                                "type": "Any",
                                "description": "Value inside the Optional object."
                            }
                        ],
                        "return": {
                            "type": "<a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/OptionalGlobalAPI\" title=\"The Optional API interacts with a single record returned by the GlideQuery, Stream, or GlideRecord APIs, even when it does not exist. Write scripts that are less likely to result in an error by handling null or undefined query results.\">Optional</a>",
                            "description": "Object containing the passed-in value in the format\n                  <samp class=\"ph codeph\">Optional&lt;value&gt;</samp>."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "Optional-orElse",
                        "short_description": "Adds a default value within the Optional object if the query does not return any\n    results.",
                        "description": "",
                        "name": "orElse(Any defaultValue)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var user = new global.GlideQuery('sys_user')\n    .get('1234', ['first_name', 'last_name'])\n    .orElse({ first_name: 'Default', last_name: 'User' });\n\ngs.info(JSON.stringify(user))",
                                "description": "This example shows how to return a value, even when the query is incorrect."
                            }
                        ],
                        "params": [
                            {
                                "name": "defaultValue",
                                "type": "Any",
                                "description": "Value within the Optional object if the query does not return any\n                results."
                            }
                        ],
                        "return": {
                            "type": "Any",
                            "description": "Value within the Optional object if the query does not return any\n                results."
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "",
                "short_description": "The PAScorecard API enables you to fetch data about indicators and their associated\n    records, such as breakdowns.",
                "identifier": "PAScorecard",
                "name": "PAScorecard",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "PASc-addParam_S_S",
                        "short_description": "Add a query parameter to filter the returned scores.",
                        "description": "<p>Call this method multiple times on the same PAScorecard object to pass multiple parameters,\n        such as the indicator sys_id and a breakdown sys_id. After specifying all parameters, call\n          <span class=\"keyword apiname\">query()</span> to run the query.</p><p>If you query a PAScorecard object with no parameters, the API returns a list of all\n        indicators that are displayed on the <span class=\"ph\"><span class=\"ph\">Analytics Hub</span></span>, with their scores.</p>",
                        "name": "addParam(String parameter, String value)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var sc = new SNC.PAScorecard(); //in a scoped app, do not use the SNC namespace\nsc.addParam('uuid', 'fb007202d7130100b96d45a3ce6103b4');       // Number of open incidents\nsc.addParam('breakdown', '0df47e02d7130100b96d45a3ce610399');  // by Priority\nvar result = sc.query();  // Query results, which are returned as an object\nfor (var i = 0; i &lt; result.length; i++)\ngs.info(result[i].name + ': ' + result[i].value + ' ' + result[i].unit.display_value);\n",
                                "description": "In this example, the uuid parameter specifies the Number of open incidents indicator, and\n        the breakdown parameter specifies the Priority breakdown. Both parameters have the sys_id of\n        the respective records as their values. The query() function returns the results as an\n        object."
                            }
                        ],
                        "params": [
                            {
                                "name": "uuid",
                                "type": "String",
                                "description": "Enter a colon-separated list of sys_id values to specify which indicators,\n                breakdowns, aggregates, and domains to query. The parameter follows this\n                    format:<p class=\"p\"><span class=\"ph\">&lt;indicator sys_id&gt;:&lt;breakdown sys_id&gt;:&lt;element\n          sys_id&gt;:&lt;lvl-2 breakdown sys_id&gt;:&lt;lvl-2 element sys_id&gt;:&lt;aggregate\n          sys_id&gt;:&lt;domain_sys_id&gt;</span></p>\n<p class=\"p\">The parameter must begin with the sys_id of an indicator record.\n                  Optionally, you can append the sys_id values of a breakdown and breakdown element\n                  to group the response based on the breakdown, and the sys_id of an aggregate to\n                  apply that aggregate. You can use a breakdown with an aggregate, or use only\n                  one.</p>\n<p class=\"p\">For information about obtaining the sys_id values of records, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/table-administration/concept/c_UniqueRecordIdentifier.html\" target=\"_blank\">Unique record identifier (sys_id)</a>.</p>\n\n                <div class=\"note note\"><span class=\"notetitle\">Note:</span> If an indicator is configured to use a\n                    <span class=\"ph uicontrol\">Default time series</span>, all <span class=\"ph\"><span class=\"ph\">Analytics Hub</span></span> values for that indicator use that time series aggregation.</div>"
                            },
                            {
                                "name": "breakdown",
                                "type": "String",
                                "description": "Enter the sys_id of a breakdown to return chart information\n              organized as defined by the breakdown. For example, enter the sys_id of a priority\n              breakdown to return separate task chart information for each priority value, such as\n              Number of open incidents / Priority / 2 - High."
                            },
                            {
                                "name": "breakdown_relation",
                                "type": "String",
                                "description": "Specify the sys_id of a breakdown relation to break down the returned data\n                using that relation. You can view available breakdown relations by setting the\n                  <span class=\"keyword parmname\">include_available_breakdowns</span> parameter to\n                  <kbd class=\"ph userinput\">true</kbd>."
                            },
                            {
                                "name": "elements_filter",
                                "type": "String",
                                "description": "Specify the sys_id of an elements filter to apply that filter to the returned\n                data."
                            },
                            {
                                "name": "display",
                                "type": "String",
                                "description": "Set to <kbd class=\"ph userinput\">true</kbd> to return only\n              indicators that are displayed on the <span class=\"ph\"><span class=\"ph\">Analytics Hub</span></span>. Set this parameter to <kbd class=\"ph userinput\">all</kbd> to return all indicators. This\n              parameter is <samp class=\"ph codeph\">true</samp> by default."
                            },
                            {
                                "name": "favorites",
                                "type": "String",
                                "description": "Set to <kbd class=\"ph userinput\">true</kbd> to return only\n              indicators that are favorites of the querying user."
                            },
                            {
                                "name": "key",
                                "type": "String",
                                "description": "Set to <kbd class=\"ph userinput\">true</kbd> to return results only\n              for key indicators."
                            },
                            {
                                "name": "target",
                                "type": "String",
                                "description": "Set to <kbd class=\"ph userinput\">true</kbd> to return results only\n              for indicators that have a target set on the <span class=\"ph\"><span class=\"ph\">Analytics Hub</span></span>."
                            },
                            {
                                "name": "contains",
                                "type": "String",
                                "description": "Enter a comma-separated list of names or descriptions to\n              return results only from indicators with a matching value."
                            },
                            {
                                "name": "tags",
                                "type": "String",
                                "description": "Enter an indicator group sys_id to return the indicators in that group. Do not\n                use <span class=\"keyword parmname\">uuid</span> with this parameter."
                            },
                            {
                                "name": "per_page",
                                "type": "String",
                                "description": "Enter the maximum number of indicators each query can\n              return on a page. By default this value is 10, and the maximum is 100."
                            },
                            {
                                "name": "page",
                                "type": "String",
                                "description": "Specify the page number. For example, when querying 20 <span class=\"ph\"><span class=\"ph\">Analytics Hub</span></span>s with the default per_page value (10), specify a page value of 2 to retrieve <span class=\"ph\"><span class=\"ph\">Analytics Hub</span></span>s 11-20."
                            },
                            {
                                "name": "sortby",
                                "type": "String",
                                "description": "Specify the value to use when sorting results. Valid values\n              for this parameter are value, change, changeperc, gap, gapperc, duedate, name, order,\n              default, group, indicator_group, frequency, target, date, trend, bullet, and\n              direction. By default, queries sort records by value."
                            },
                            {
                                "name": "sortdir",
                                "type": "String",
                                "description": "Specify the sort direction, ascending or descending. By\n              default, queries sort records in descending order. Set this parameter to\n                <samp class=\"ph codeph\">asc</samp> to sort in ascending order."
                            },
                            {
                                "name": "display_value",
                                "type": "String",
                                "description": "Data retrieval operation for reference and choice fields.<div class=\"p\">Based on this\n                  value, the display value and/or the actual value in the database are retrieved.<ul class=\"ul\" id=\"PASc-addParam_S_S__ul_vzj_1pw_pp\">\n                    <li class=\"li\"><span class=\"keyword option\">true</span> returns display values for all of the fields.</li>\n\n                    <li class=\"li\"><span class=\"keyword option\">false</span> returns actual values from the database. If a value\n                      is not specified, this parameter defaults to <span class=\"keyword option\">false</span>.</li>\n\n                    <li class=\"li\"><span class=\"keyword option\">all</span> returns both actual and display values.</li>\n\n                  </ul>\n</div>"
                            },
                            {
                                "name": "exclude_reference_link",
                                "type": "String",
                                "description": "Set to <kbd class=\"ph userinput\">true</kbd> to hide additional\n              information provided for reference fields, such as the URI to the reference\n              resource."
                            },
                            {
                                "name": "include_scores",
                                "type": "String",
                                "description": "<span class=\"ph\">Set to\n                  <kbd class=\"ph userinput\">true</kbd> to return indicator scores for the entire time range\n                selected on the <span class=\"ph\"><span class=\"ph\">Analytics Hub</span></span>. If a value is not specified, this parameter defaults to false and returns only\n                the most recent score value.</span><p class=\"p\">To constrain the date range of the scores that are returned, combine this\n                  parameter with the <span class=\"keyword parmname\">from</span> and <span class=\"keyword parmname\">to</span>\n                  parameters.</p>"
                            },
                            {
                                "name": "from",
                                "type": "String",
                                "description": "<span class=\"ph\">Specify the earliest date to\n                return scores from. Only scores from this date or later are returned. The date\n                format must match the ISO-8601 standard.</span><p class=\"p\">This parameter requires that <span class=\"keyword parmname\">include_scores</span> is set to\n                    <kbd class=\"ph userinput\">true</kbd>.</p>"
                            },
                            {
                                "name": "to",
                                "type": "String",
                                "description": "<span class=\"ph\">Specify the latest date to return\n                scores from. Only scores from this date or earlier are returned. The date format\n                must match the ISO-8601 standard. </span><p class=\"p\">This parameter requires that <span class=\"keyword parmname\">include_scores</span> is set to\n                    <kbd class=\"ph userinput\">true</kbd>.</p>"
                            },
                            {
                                "name": "step",
                                "type": "String",
                                "description": "Specify a numeric value to skip scores, based on the\n              indicator frequency. For example, specify a value of 3 to return only scores from\n              every third day for a daily indicator, or from every third week for a weekly\n              indicator."
                            },
                            {
                                "name": "limit",
                                "type": "String",
                                "description": "Specify the maximum number of scores to return."
                            },
                            {
                                "name": "include_available_breakdowns",
                                "type": "String",
                                "description": "Set to <kbd class=\"ph userinput\">true</kbd> to return all available\n              breakdowns for an indicator. If a value is not specified, this parameter defaults to\n              false and returns no breakdowns."
                            },
                            {
                                "name": "include_available_aggregates",
                                "type": "String",
                                "description": "Set to <kbd class=\"ph userinput\">true</kbd> to return all possible\n              aggregates for an indicator, including aggregates that have already been applied. If a\n              value is not specified, this parameter defaults to false and returns no\n              aggregates."
                            },
                            {
                                "name": "include_realtime",
                                "type": "String",
                                "description": "Set this parameter to <kbd class=\"ph userinput\">true</kbd> to return\n              the realtime_enabled element which indicates if real-time scores are enabled for the\n              indicator, and the realtime_value element which contains the real-time score value.\n              This parameter is not supported for formula indicators."
                            },
                            {
                                "name": "include_target_color_scheme",
                                "type": "String",
                                "description": "Set this parameter to <kbd class=\"ph userinput\">true</kbd> to return\n              the target_color_scheme element that contains the minimum and maximum values, and the\n              color of each section of the target color scheme for the <span class=\"ph\"><span class=\"ph\">Analytics Hub</span></span>."
                            },
                            {
                                "name": "include_forecast_scores",
                                "type": "String",
                                "description": "<span class=\"ph\">Set this parameter to\n                  <kbd class=\"ph userinput\">true</kbd> to return the forecast_scores element that contains an\n                array of date-value pairs that define the forecast data for the <span class=\"ph\"><span class=\"ph\">Analytics Hub</span></span>.</span><p class=\"p\">This paramater requires that the <span class=\"keyword parmname\">include_scores</span>\n                  parameter is also set to <kbd class=\"ph userinput\">true</kbd>.</p>"
                            },
                            {
                                "name": "include_trendline_scores",
                                "type": "String",
                                "description": "<span class=\"ph\">Set this parameter to\n                  <kbd class=\"ph userinput\">true</kbd> to return the trendline_scores element that contains\n                an array of date-value pairs that define the <span class=\"ph\"><span class=\"ph\">Analytics Hub</span></span> trendline.</span><p class=\"p\">This paramater requires that the <span class=\"keyword parmname\">include_scores</span>\n                  parameter is also set to <kbd class=\"ph userinput\">true</kbd>.</p>"
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "PASc-query",
                        "short_description": "Perform a query based on the specified parameters and return the results as an\n    object.",
                        "description": "<p>Before calling this method, configure parameters for the PAScorecard object by calling\n          <span class=\"keyword apiname\">addParam(String parameter, String value)</span>.</p>",
                        "name": "query()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "Object",
                            "description": "The PAScorecard object."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "PASc-result",
                        "short_description": "Get the last query result as an object.",
                        "description": "<p><span class=\"ph\" id=\"PASc-result__ph_pascorecard_result_noquery\">This method does not perform a query. To perform a\n          query before returning the result, use <span class=\"keyword apiname\">query()</span>.</span></p><p>This function cannot run in a scope other than global.</p>",
                        "name": "result()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "Object",
                            "description": "The results from the last query, returned as a JS object."
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "You can query information about a snapshot at a certain date using the indicator sys_id and\n      date, and perform comparisons between snapshots for an indicator at different dates.",
                "short_description": "The PASnapshot API enables you to query information about <span class=\"ph\">Performance Analytics</span> snapshots.\n    Snapshots are <span class=\"ph\">the lists of records (sys_ids) that are collected at the\n              time that the scores for those records are collected. A snapshot is made only for\n              indicators with <span class=\"ph uicontrol\">Collect records</span> selected.</span>",
                "identifier": "PASnapshot",
                "name": "PASnapshot",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "PASn-getCompareIDs_S_n_n_S",
                        "short_description": "Compare records in snapshots for a specified indicator at multiple dates, such as to\n    identify records included in one snapshot but not the other.",
                        "description": "",
                        "name": "getCompareIDs(String sys_id, Number date1, Number date2, String type)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var snapshot2 = PASnapshot.getCompareIDs('fb007202d7130100b96d45a3ce6103b4', 20160430, 20160531, 'shared');\ngs.info(snapshot2);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "sys_id",
                                "type": "String",
                                "description": "The indicator sys_id."
                            },
                            {
                                "name": "date1",
                                "type": "Number",
                                "description": "The date of the first snapshot, in the format yyyymmdd."
                            },
                            {
                                "name": "date2",
                                "type": "Number",
                                "description": "The date of the second snapshot, in the format yyyymmdd."
                            },
                            {
                                "name": "type",
                                "type": "String",
                                "description": "Specifies what data to retrieve. Valid values are:<ul class=\"ul\" id=\"PASn-getCompareIDs_S_n_n_S__ul_pdr_xnr_nw\">\n                  <li class=\"li\">all1: all records in the first snapshot</li>\n\n                  <li class=\"li\">all2: all records in the second snapshot</li>\n\n                  <li class=\"li\">shared: records that are in both snapshots</li>\n\n                  <li class=\"li\">movedin: records that are in the first snapshot, but not the second</li>\n\n                  <li class=\"li\">movedout: records that are in the second snapshot, but not the first</li>\n\n                </ul>"
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "A comma-separated list of sys_id values."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "PASn-getCompareQuery_S_n_n_S",
                        "short_description": "Get the query used to compare records in snapshots for a specified indicator at\n    multiple dates.",
                        "description": "",
                        "name": "getCompareQuery(String sys_id, Number date1, Number date2, String type)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var snapshot4 = PASnapshot.getCompareQuery('fb007202d7130100b96d45a3ce6103b4', 20160530, 20160531, 'all1');\ngs.info(snapshot4);\n",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "sys_id",
                                "type": "String",
                                "description": "The indicator sys_id."
                            },
                            {
                                "name": "date1",
                                "type": "Number",
                                "description": "The date of the first snapshot, in the format yyyymmdd."
                            },
                            {
                                "name": "date2",
                                "type": "Number",
                                "description": "The date of the second snapshot, in the format yyyymmdd."
                            },
                            {
                                "name": "type",
                                "type": "String",
                                "description": "Specifies what data to retrieve. Valid values are:<ul class=\"ul\" id=\"PASn-getCompareQuery_S_n_n_S__ul_pdr_xnr_nw\">\n                  <li class=\"li\">all1: all records in the first snapshot</li>\n\n                  <li class=\"li\">all2: all records in the second snapshot</li>\n\n                  <li class=\"li\">shared: records that are in both snapshots</li>\n\n                  <li class=\"li\">movedin: records that are in the second snapshot, but not the first</li>\n\n                  <li class=\"li\">movedout: records that are in the first snapshot, but not the second</li>\n\n                </ul>"
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "The table, view, and encoded query as a JSON string."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "PASn-getIDs_S_n",
                        "short_description": "Get the sys_id values for all records contained in the snapshot for a specified\n    indicator at the specified date.",
                        "description": "",
                        "name": "getIDs(String sys_id, Number date)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var snapshot1 = PASnapshot.getIDs('fb007202d7130100b96d45a3ce6103b4', 20160530);\ngs.info(snapshot1);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "sys_id",
                                "type": "String",
                                "description": "The indicator sys_id."
                            },
                            {
                                "name": "date",
                                "type": "Number",
                                "description": "The date when the snapshot was taken, in the format yyyymmdd."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "A comma-separated list of sys_id values."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "PASn-getQuery_S_n",
                        "short_description": "Get the query used to generate the snapshot for a specified indicator at the specified\n    date.",
                        "description": "",
                        "name": "getQuery(String sys_id, Number date)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var snapshot3 = PASnapshot.getQuery('fb007202d7130100b96d45a3ce6103b4', 20160530);\ngs.info(snapshot3);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "sys_id",
                                "type": "String",
                                "description": "The indicator sys_id."
                            },
                            {
                                "name": "date",
                                "type": "Number",
                                "description": "The date when the snapshot was taken, in the format yyyymmdd."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "The table, view, and encoded query as a JSON string."
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "Access <span class=\"keyword apiname\">RenderProperties</span> methods using the static variable\n    <samp class=\"ph codeph\">RP</samp>.",
                "short_description": "The RenderProperties API provides methods about the current page and is available in\n  Jelly scripts and in UI-action conditions and scripts.",
                "identifier": "RenderProperties-Scoped-API",
                "name": "RenderProperties",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "SRP-getEncodedQuery",
                        "short_description": "Returns the encoded query from the URL sent to the page.",
                        "description": "",
                        "name": "getEncodedQuery()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "Returns the encoded query from the URL sent to the form."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SRP-getListControl",
                        "short_description": "Returns the list control object for the page.",
                        "description": "",
                        "name": "getListControl()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "ScopedSysListControl object",
                            "description": "The list control object for the page."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SRP-getParameterValue_S",
                        "short_description": "Returns the value of the specified URL parameter.",
                        "description": "",
                        "name": "getParameterValue(String parameterName)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "parameterName",
                                "type": "String",
                                "description": "Name of the parameter passed on the URL."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "The parameter's value."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SRP-getReferringURL",
                        "short_description": "Returns the URL where the request originated.",
                        "description": "",
                        "name": "getReferringURL()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The URL of the page where the request originated."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SRP-getViewName",
                        "short_description": "Returns the name of the view in use.",
                        "description": "",
                        "name": "getViewName()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The name of the view being used."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SRP-getWindowProperties",
                        "short_description": "Returns the window's properties.",
                        "description": "",
                        "name": "getWindowProperties()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "Object",
                            "description": "The window's properties"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SRP-isInDevStudio",
                        "short_description": "Returns true if the page is part of Studio.",
                        "description": "",
                        "name": "isInDevStudio()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "Returns true if the page is part of Studio."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SRP-isInteractive",
                        "short_description": "Returns true if this is an interactive session. An interactive session is when a user\n    has logged in as opposed to a REST request.",
                        "description": "",
                        "name": "isInteractive()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "True if this is an interactive session."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SRP-isManyToMany",
                        "short_description": "Returns true when the <samp class=\"ph codeph\">sysparm_collection_related_file</samp> URL parameter is\n    set.",
                        "description": "",
                        "name": "isManyToMany()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "Returns true when the <samp class=\"ph codeph\">sysparm_collection_related_file</samp> URL\n                parameter is set."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SRP-isRelatedList",
                        "short_description": "Returns true when the <samp class=\"ph codeph\">sys_is_related_list</samp> URL-parameter is true.\n    Returns false if the parameter is not present.",
                        "description": "",
                        "name": "isRelatedList()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "True if the URL parameter <samp class=\"ph codeph\">sys_is_related_list</samp> is true."
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "The <span class=\"keyword apiname\">SPScriptedFacet</span> API can only be used in a facet generation script in a\n        <span class=\"ph\">Service Portal</span> search source. The\n      facet generation script is only visible when <span class=\"ph uicontrol\">Is scripted source</span> is\n      selected.<br/><br/>There is no constructor for this class. Instead, use the createFacet() or\n      createMultiChoiceFacet() methods of the <span class=\"keyword apiname\">SPScriptedFacetService</span> class to\n      generate a facets object.",
                "short_description": "<span class=\"ph\">Define facet items, filters, or mapped\n                queries for a facets object.</span>",
                "identifier": "SPScriptedFacetScopedAPI",
                "name": "SPScriptedFacet",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "SPSFScoped-addFacetItem_S_O",
                        "short_description": "Adds facet items or mapped queries to a facets object.",
                        "description": "<p>Before adding facet items to a facets object, create the facets object using the\n          <span class=\"keyword apiname\">createFacet()</span> or <span class=\"keyword apiname\">createMultiChoiceFacet()</span> methods of\n        the <span class=\"keyword apiname\">SPScriptedFacetService</span> class.</p>",
                        "name": "addFacetItem(String label, Object valueObj)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "function createMultiChoiceFacetFromKB(label, variable, values, orderBy){\n  if(!values || values.length == 0)\n    return;\n\n  var kbFacet = facetService.createMultiChoiceFacet(label, variable);\n  var kbMap = {};\n  for(var i in values) {\n    var key = values[i].label;\n    var value = values[i].id;\n    var parent = new KBParentData().getParentCategory(value, key);\n    key = parent.join(' &gt; ');\n    kbMap[key] = value;\n  }\n\n  var labels = Object.keys(kbMap).sort();\n  for (i = 0; i &lt; labels.length; i++) {\n    var currentLabel = labels[i];\n    kbFacet.addFacetItem(currentLabel, kbMap[currentLabel]);\n    //adds facet search options for each kbMap entry\n  }\n}",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "label",
                                "type": "String",
                                "description": "The display label for the facet item or mapped query."
                            },
                            {
                                "name": "valueObj",
                                "type": "Object",
                                "description": "The facet item or mapped query for the facet. Can only contain types String,\n                Number, Boolean, and Double."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "The <span class=\"keyword apiname\">SPScriptedFacetService</span> API can only be used in a facet generation\n      script in a <span class=\"ph\">Service Portal</span> search\n      source. The facet generation script is only visible when <span class=\"ph uicontrol\">Is scripted\n        source</span> is selected.<br/><br/>There is no constructor for this class. Instead, use the createFacet() or\n      createMultiChoiceFacet() methods to generate a facets object.",
                "short_description": "<span class=\"ph\">Generate a multi choice or single\n                choice facets object for an advanced search source.</span>",
                "identifier": "SPScriptedFacetServiceScopedAPI",
                "name": "SPScriptedFacetService",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "SPSFServiceScoped-createFacet_S_S",
                        "short_description": "Creates a single choice facets object.",
                        "description": "<p>After creating the facets object, add facet items or mapped queries to the facet using the\n        addFacetItem() method of the <span class=\"keyword apiname\">SPScriptedFacet</span> class.</p>",
                        "name": "createFacet(String label, String id)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var stateFacet = facetService.createFacet(\"State\", \"state\");",
                                "description": "Can only be used in a facet generation script in a Service Portal advanced search\n        source."
                            }
                        ],
                        "params": [
                            {
                                "name": "label",
                                "type": "String",
                                "description": "Label for the facet."
                            },
                            {
                                "name": "id",
                                "type": "String",
                                "description": "ID for the facet."
                            }
                        ],
                        "return": {
                            "type": "Object",
                            "description": "Single choice facets object. Returns an error when:<ul class=\"ul\" id=\"SPSFServiceScoped-createFacet_S_S__ul_obk_vvw_xcb\">\n                  <li class=\"li\">A duplicate label or ID is found. </li>\n\n                  <li class=\"li\">A label or ID is not defined. </li>\n\n                </ul>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SPSFServiceScoped-createMultiSelectFacet_S_S",
                        "short_description": "Creates a multi choice facets object.",
                        "description": "<p>After creating the facets object, add facet items or mapped queries to the facet using the\n          <span class=\"keyword apiname\">addFacetItem()</span> method of the <span class=\"keyword apiname\">SPScriptedFacet</span> class.</p>",
                        "name": "createMultiChoiceFacet(String label, String id)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "function createMultiChoiceFacetFromKB(label, variable, values, orderBy){\n  if(!values || values.length == 0)\n    return;\n\n  var kbFacet = facetService.createMultiChoiceFacet(label, variable);\n  var kbMap = {};\n  for(var i in values) {\n    var key = values[i].label;\n    var value = values[i].id;\n    var parent = new KBParentData().getParentCategory(value, key);\n    key = parent.join(' &gt; ');\n    kbMap[key] = value;\n  }\n\n  var labels = Object.keys(kbMap).sort();\n  for (i = 0; i &lt; labels.length; i++) {\n    var currentLabel = labels[i];\n    kbFacet.addFacetItem(currentLabel, kbMap[currentLabel]);\n    //adds facet search options for each kbMap entry\n  }\n}",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "label",
                                "type": "String",
                                "description": "Label for the facet."
                            },
                            {
                                "name": "id",
                                "type": "String",
                                "description": "ID for the facet."
                            }
                        ],
                        "return": {
                            "type": "Object",
                            "description": "Multi choice facets object. <p class=\"p\">Returns an error when:</p>\n<ul class=\"ul\" id=\"SPSFServiceScoped-createMultiSelectFacet_S_S__ul_obk_vvw_xcb\">\n                  <li class=\"li\">A duplicate label or ID is found. </li>\n\n                  <li class=\"li\">A label or ID is not defined. </li>\n\n                </ul>"
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "You can get a <span class=\"keyword apiname\">Stream</span> object in these ways:<br/><br/><ul class=\"ul\" id=\"StreamGlobalAPI__ul_d3q_3dl_4mb\">\n        <li class=\"li\">Instantiate a <span class=\"keyword apiname\">Stream</span> object using the constructor.</li>\n\n        <li class=\"li\">Return a <span class=\"keyword apiname\">Stream</span> object from the\n            <span class=\"keyword apiname\">GlideQuery.select()</span> method. For more information, see <a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/GlideQueryAPI\" title=\"The GlideQuery API is an alternative to GlideRecord to perform CRUD operations on record data from server-side scripts.\"><span class=\"keyword apiname\">GlideQuery</span></a>.</li>\n\n      </ul><br/><br/>This method is static and does not require an instance of the class: <a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/StreamGlobalAPI#Stream-fromArray_O\" title=\"Returns a Stream object that contains the values from the provided array.\"><span class=\"keyword apiname\">fromArray()</span></a>.<br/><br/>Use the <span class=\"keyword apiname\">Stream</span> API in scoped or global server-side scripts. This API\n      requires the GlideQuery [com.sn_glidequery] plugin.<br/><br/><h2 class=\"title sectiontitle\">Implementation</h2>\n      \n      <p class=\"p\">This API can work with the <a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/GlideQueryAPI\" title=\"The GlideQuery API is an alternative to GlideRecord to perform CRUD operations on record data from server-side scripts.\"><span class=\"keyword apiname\">GlideQuery</span></a> and <a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/OptionalGlobalAPI\" title=\"The Optional API interacts with a single record returned by the GlideQuery, Stream, or GlideRecord APIs, even when it does not exist. Write scripts that are less likely to result in an error by handling null or undefined query results.\"><span class=\"keyword apiname\">Optional</span></a>\n        APIs in a <span class=\"ph\">builder pattern where the method calls chain together, each method\n          building on the returned result of the previous method. Use methods to define the\n          attributes of the query. The methods do not execute until you call a terminal method, a\n          method that returns a query result, allowing you to define the requirements of the query\n          before executing it.</span></p>\n\n      <p class=\"p\"><span class=\"ph\">If the query returns a single record, the system wraps the result\n          in an Optional object. If the query returns a stream of records, the system wraps the\n          result in a Stream object. These objects let you manage the result using a set of methods\n          in each API.</span></p>\n\n      <p class=\"p\"><span class=\"ph\">For example, here's a script that performs a query on the\n          Task table and groups the records by priority and returns groups with total reassignments\n          greater than four.</span></p>\n\n      <div class=\"p\">\n        <pre><code class='language-javascript'>var query = new global.GlideQuery('task')\n    .where('active', true) //Returns new GlideQuery object with a \"where\" clause.\n    .groupBy('priority') //Returns new GlideQuery object with a \"group by\" clause.\n    .aggregate('sum', 'reassignment_count') //Returns new GlideQuery object with a \"sum(reassignment_count)\" clause.\n    .having('sum', 'reassignment_count', '&gt;', 4) //Returns new GlideQuery object with a \"having reassignment_count &gt; 4\" clause.\n    .select() //Returns a stream of records wrapped in a Stream object.  \n    .toArray(10); //Terminal method in the Stream class that executes the query and returns the result. </code></pre>\n\n      </div><br/><br/><h2 class=\"title sectiontitle\">Terminal methods</h2>\n      \n      <p class=\"p\">For performance reasons, a query only fetches data when you call a terminal method. These\n        are the terminal methods from the <span class=\"keyword apiname\">Stream</span> class:</p>\n\n      <ul class=\"ul\" id=\"StreamGlobalAPI__ul_u1m_2jd_smb\">\n        <li class=\"li\"><a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/StreamGlobalAPI#Stream-every_F\" title=\"Applies a predicate function to every item in the Stream object. If the predicate returns true for every item in the stream, the method returns true. If the predicate returns false for any item in the stream, the method returns false.\"><span class=\"keyword apiname\">every()</span></a></li>\n\n        <li class=\"li\"><a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/StreamGlobalAPI#Stream-find_F\" title=\"Returns the first record or item in the Stream object that matches the predicate function. If no predicate function is provided, then the method returns the first record or item in the Stream.\"><span class=\"keyword apiname\">find()</span></a></li>\n\n        <li class=\"li\"><a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/StreamGlobalAPI#Stream-forEach_F\" title=\"Applies the specified function to each record or item in the stream.\"><span class=\"keyword apiname\">forEach()</span></a></li>\n\n        <li class=\"li\"><a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/StreamGlobalAPI#Stream-reduce_F_A\" title=\"Executes a reducer function on each item in the stream, resulting in single output value.\"><span class=\"keyword apiname\">reduce()</span></a></li>\n\n        <li class=\"li\"><a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/StreamGlobalAPI#Stream-some_F\" title=\"Applies a predicate function, a function that takes a single value and returns true or false, to each item in the stream. If the predicate returns true for any item in the stream, the method returns true.\"><span class=\"keyword apiname\">some()</span></a></li>\n\n        <li class=\"li\"><a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/StreamGlobalAPI#Stream-toArray_n\" title=\"Returns an array containing the given number of items from the stream.\"><span class=\"keyword apiname\">toArray()</span></a></li>\n\n      </ul>",
                "short_description": "The Stream API interacts with a stream of items such as records. For example, you can\n    use the <span class=\"keyword apiname\">forEach()</span> method to update the state of each record in a stream\n    returned by the <span class=\"keyword apiname\">GlideQuery</span> API.",
                "identifier": "StreamGlobalAPI",
                "name": "Stream",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "Stream-Stream_F",
                        "short_description": "Instantiates a Stream object.",
                        "description": "<p>Instead of using this constructor, you can return a Stream object based on a query using\n        the <a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/GlideQueryAPI\" title=\"The GlideQuery API is an alternative to GlideRecord to perform CRUD operations on record data from server-side scripts.\"><span class=\"keyword apiname\">GlideQuery</span></a> API.</p>",
                        "name": "Stream(Function nextFn)",
                        "type": "Constructor",
                        "examples": [
                            {
                                "script": "new Stream(Math.random)\n   .map(Math.round)\n   .map(function (num) { \n      return num === 1 ? 'heads' : 'tails'; \n   })\n   .limit(10)\n   .forEach(gs.info)\n",
                                "description": "This example shows you how to create a Stream object based on a random number generator.\n        Make sure to include the <span class=\"keyword apiname\">limit()</span> method to avoid creating an infinite\n        loop."
                            }
                        ],
                        "params": [
                            {
                                "name": "nextFn",
                                "type": "Function",
                                "description": "A function that retrieves the next item in the stream."
                            }
                        ],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "Stream-chunk_N",
                        "short_description": "Returns results in batches of arrays, each containing the number of records passed to\n    the method.",
                        "description": "",
                        "name": "chunk(Number count)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var chunkResult = new GlideQuery('cmdb_ci_hardware')\n    .select('asset', 'purchase_date')\n    .limit(10)\n    .chunk(5) // returns arrays of 5 sys_ids at a time\n    .toArray(100);\n\ngs.info(JSON.stringify(chunkResult));",
                                "description": "This example shows how to query a table and chunk the result into batches of arrays."
                            },
                            {
                                "script": "var chunkResult = new global.GlideQuery('cmdb_ci_hardware')\n    .select('sys_id')\n    .map(function (device) { return device.sys_id; })\n    .chunk(5) // returns arrays of 5 sys_ids at a time\n    .flatMap(function (deviceIds) {\n        return new GlideQuery('cmdb_sam_sw_install')\n            .where('installed_on', 'IN', deviceIds)\n            .select('software_model', 'installed_on');\n    })\n\ngs.info(JSON.stringify(chunkResult));",
                                "description": "This example shows how to create a child query using batches of IDs. When you call the\n          <span class=\"keyword apiname\">flatMap()</span> method after using the <span class=\"keyword apiname\">chunk()</span> method, the\n        system iterates over the batch of records instead of each individual record."
                            }
                        ],
                        "params": [
                            {
                                "name": "count",
                                "type": "Number",
                                "description": "Number of records in each array returned from the stream."
                            }
                        ],
                        "return": {
                            "type": "<a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/StreamGlobalAPI\" title=\"The Stream API interacts with a stream of items such as records. For example, you can use the forEach() method to update the state of each record in a stream returned by the GlideQuery API.\">Stream</a>",
                            "description": "Object used to interact with a stream of items such as records."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "Stream-every_F",
                        "short_description": "Applies a predicate function to every item in the Stream object. If the predicate\n    returns true for every item in the stream, the method returns true. If the predicate returns\n    false for any item in the stream, the method returns false.",
                        "description": "",
                        "name": "every(Function predicate)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var hasOnlyShortDescriptions = new global.GlideQuery('task')\n   .whereNotNull('description')\n   .select('description')\n   .every(function (t) { \n       return t.description.length &lt; 10; \n       });\n\ngs.info(hasOnlyShortDescriptions);",
                                "description": "This example shows how to apply a predicate function to every item in a stream."
                            }
                        ],
                        "params": [
                            {
                                "name": "predicate",
                                "type": "Function",
                                "description": "Predicate function to apply to every record or item inside the Stream object.\n                The function must take each item in the stream as input and return a boolean."
                            }
                        ],
                        "return": {
                            "type": "Boolean",
                            "description": "<p class=\"p\">Flag that indicates whether the predicate function returns true for every item in\n                  the stream.</p>\n\n                <div class=\"p\">Valid values:<ul class=\"ul\" id=\"Stream-every_F__ul_ij5_1kg_tmb\">\n                    <li class=\"li\">true: The predicate function returns true for every item in the stream.</li>\n\n                    <li class=\"li\">false: The predicate function does not return true for every item in the\n                      stream.</li>\n\n                  </ul>\n</div>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "Stream-filter_F",
                        "short_description": "Applies a predicate function to each item in the Stream object. If the predicate\n    returns true, the method returns the stream. If the predicate returns false, it returns an empty\n    Stream object.",
                        "description": "<p>For better performance, use the <span class=\"keyword apiname\">where()</span>,\n          <span class=\"keyword apiname\">whereNotNull()</span>, and <span class=\"keyword apiname\">whereNull()</span> methods in the\n          <span class=\"keyword apiname\">GlideQuery</span> class instead of this method where possible. See <a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/GlideQueryAPI\" title=\"The GlideQuery API is an alternative to GlideRecord to perform CRUD operations on record data from server-side scripts.\">GlideQuery</a>.</p>",
                        "name": "filter(Function predicate)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var shoutingTasks = new global.GlideQuery('task')\n   .whereNotNull('description')\n   .select('description')\n   .filter(function (task) { \n       return task.description.toUpperCase() === task.description; \n   })",
                                "description": "This example shows how to check all records in the Task table against a defined filter. If\n        the records match the filter, the system returns the stream of records. Otherwise, it\n        returns an empty Stream object."
                            }
                        ],
                        "params": [
                            {
                                "name": "predicate",
                                "type": "Function",
                                "description": "Predicate function to apply to every record or item inside the Stream object.\n                The function must take each item in the stream as input and return a\n                boolean."
                            }
                        ],
                        "return": {
                            "type": "<a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/StreamGlobalAPI\" title=\"The Stream API interacts with a stream of items such as records. For example, you can use the forEach() method to update the state of each record in a stream returned by the GlideQuery API.\">Stream</a>",
                            "description": "Object used to interact with a stream of items such as records."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "Stream-find_F",
                        "short_description": "Returns the first record or item in the Stream object that matches the predicate\n    function. If no predicate function is provided, then the method returns the first record or item\n    in the Stream.",
                        "description": "",
                        "name": "find(Function predicate)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var UserOptional = new global.GlideQuery('sys_user')\n   .where('active', true)\n   .where('company.name', 'ServiceNow')\n   .select()\n   .find()\n   .map(function (user) { \n      return JSON.stringify(user); \n   })\n\ngs.info(UserOptional);",
                                "description": "This example shows how to return the first record from the stream."
                            }
                        ],
                        "params": [
                            {
                                "name": "predicate",
                                "type": "Function",
                                "description": "Optional. Predicate function to apply to the items inside the Stream object.\n                The function must take each item in the stream as input and return a\n                boolean."
                            }
                        ],
                        "return": {
                            "type": "<a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/OptionalGlobalAPI\" title=\"The Optional API interacts with a single record returned by the GlideQuery, Stream, or GlideRecord APIs, even when it does not exist. Write scripts that are less likely to result in an error by handling null or undefined query results.\">Optional</a>",
                            "description": "Object containing the returned record."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "Stream-flatMap_F",
                        "short_description": "Applies a function to every item in a stream. Returns another stream that you can\n    iterate over.",
                        "description": "<p>Use this method instead of <span class=\"keyword apiname\">map()</span> if the function returns a second stream\n        of records.</p>",
                        "name": "flatMap(function fn)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var records = new global.GlideQuery('sys_user')\n   .where('last_login', '&gt;', '2015-12-31')\n   .select('first_name', 'last_name')\n   .flatMap(function (u) {\n      return new global.GlideQuery('task')\n           .where('closed_by', u.sys_id)\n           .select('closed_at', 'description')\n           .map(function (t) {\n                return {\n                    first_name: u.first_name,\n                    last_name: u.last_name,\n                    description: t.description,\n                    closed_at: t.closed_at\n                 };\n           });\n      })\n   .limit(5)\n   .toArray(100);\n\ngs.info(JSON.stringify(records));",
                                "description": "This example shows you how to query the User table and then create a child query from the\n        result. This example executes an N+1 query, which can cause performance issues. Avoid this\n        use case in a production environment."
                            }
                        ],
                        "params": [
                            {
                                "name": "fn",
                                "type": "Function",
                                "description": "Function to apply to the result of the query that returns a Stream object."
                            }
                        ],
                        "return": {
                            "type": "<a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/StreamGlobalAPI\" title=\"The Stream API interacts with a stream of items such as records. For example, you can use the forEach() method to update the state of each record in a stream returned by the GlideQuery API.\">Stream</a>",
                            "description": "Object containing the stream of records updated after applying the\n                function."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "Stream-forEach_F",
                        "short_description": "Applies the specified function to each record or item in the stream.",
                        "description": "",
                        "name": "forEach(Function fn)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var firstNames = new global.GlideQuery('sys_user')\n   .select('first_name')\n   .forEach(function (u) { \n      gs.debug(u.first_name); \n   });",
                                "description": "This example shows you how to print the result of each item in the stream."
                            }
                        ],
                        "params": [
                            {
                                "name": "fn",
                                "type": "Function",
                                "description": "Function to apply to each item in the stream."
                            }
                        ],
                        "return": {
                            "type": "None",
                            "description": "Â "
                        },
                        "extras": []
                    },
                    {
                        "identifier": "Stream-fromArray_O",
                        "short_description": "Returns a Stream object that contains the values from the provided array.",
                        "description": "<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This method is static. You do not need an instance of the class to use this method.\n        </div></p>",
                        "name": "fromArray(Object arr)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var nameStream = Stream.fromArray(['Bob', 'Sue', 'Sam'])\n   .map(function (name) { \n      return name.toUpperCase(); \n   })\n   .toArray(3);\n\ngs.info(JSON.stringify(nameStream));",
                                "description": "This example shows how to create a Stream object containing an array of values."
                            }
                        ],
                        "params": [
                            {
                                "name": "arr",
                                "type": "Array",
                                "description": "Array of values to create the stream from."
                            }
                        ],
                        "return": {
                            "type": "<a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/StreamGlobalAPI\" title=\"The Stream API interacts with a stream of items such as records. For example, you can use the forEach() method to update the state of each record in a stream returned by the GlideQuery API.\">Stream</a>",
                            "description": "Object used to interact with a stream of items such as records."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "Stream-limit_N",
                        "short_description": "Limits the number of results returned by the stream.",
                        "description": "<p>For better performance, use the <span class=\"keyword apiname\">limit()</span> method in the\n          <span class=\"keyword apiname\">GlideQuery</span> class where possible. See <a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/GlideQueryAPI\" title=\"The GlideQuery API is an alternative to GlideRecord to perform CRUD operations on record data from server-side scripts.\">GlideQuery</a>. You may need\n        to use this method to limit results with the <span class=\"keyword apiname\">Stream.flatMap()</span> method.</p>",
                        "name": "limit(Number count)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var records = new global.GlideQuery('sys_user')\n   .where('last_login', '&gt;', '2015-12-31')\n   .select('first_name', 'last_name')\n   .flatMap(function (u) {\n      return new GlideQuery('task')\n           .where('closed_by', u.sys_id)\n           .select('closed_at', 'description')\n           .map(function (t) {\n                return {\n                    first_name: u.first_name,\n                    last_name: u.last_name,\n                    description: t.description,\n                    closed_at: t.closed_at\n                 };\n           });\n      })\n   .limit(5)\n   .toArray(100);\n\ngs.info(JSON.stringify(records));",
                                "description": "This example shows you how to limit the results returned from the\n          <span class=\"keyword apiname\">Stream.flatMap()</span> method."
                            }
                        ],
                        "params": [
                            {
                                "name": "count",
                                "type": "Number",
                                "description": "Number of records to return."
                            }
                        ],
                        "return": {
                            "type": "<a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/StreamGlobalAPI\" title=\"The Stream API interacts with a stream of items such as records. For example, you can use the forEach() method to update the state of each record in a stream returned by the GlideQuery API.\">Stream</a>",
                            "description": "Object used to interact with a stream of items such as records."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "Stream-map_F",
                        "short_description": "Applies a function to each item in a stream and returns the updated Stream\n    object.",
                        "description": "",
                        "name": "map(Function fn)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var users = new global.GlideQuery('sys_user')\n   .whereNotNull('first_name')\n   .select('first_name')\n   .map(function (u) { \n      return u.first_name.toUpperCase(); \n   })\n   .toArray(100);\n\ngs.info(JSON.stringify(users));",
                                "description": "This example shows you how to apply a function to every item in the stream."
                            }
                        ],
                        "params": [
                            {
                                "name": "fn",
                                "type": "Function",
                                "description": "Function to apply to the result of the query that takes the each item in the\n                stream as input."
                            }
                        ],
                        "return": {
                            "type": "<a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/StreamGlobalAPI\" title=\"The Stream API interacts with a stream of items such as records. For example, you can use the forEach() method to update the state of each record in a stream returned by the GlideQuery API.\">Stream</a>",
                            "description": "Object containing the stream of records updated after applying the\n                function."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "Stream-reduce_F_A",
                        "short_description": "Executes a reducer function on each item in the stream, resulting in single output\n    value.",
                        "description": "<p>This method is similar to the native JavaScript <span class=\"keyword apiname\">reduce()</span> method. For\n        more information, see <a class=\"extRef\" href=\"https://www.w3schools.com/jsref/jsref_reduce.asp\" target=\"_blank\">w3schools documentation</a>.</p>",
                        "name": "reduce(function reducerFn, Any initialValue)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var longestName = new global.GlideQuery('sys_user')\n   .whereNotNull('first_name')\n   .select('first_name')\n   .reduce(function (acc, cur) {\n       return cur.first_name.length &gt; acc.length\n           ? cur.first_name\n           : acc;\n       }, '');\n\ngs.info(JSON.stringify(longestName));",
                                "description": "This example shows you how to return the record with the longest name from the User table."
                            }
                        ],
                        "params": [
                            {
                                "name": "reducerFn",
                                "type": "Function",
                                "description": "Function to apply to each item in the stream that reduces the stream to a\n                single value. This function must take two arguments: <div class=\"p\">\n                  <ul class=\"ul\" id=\"Stream-reduce_F_A__ul_k1m_yd3_5mb\">\n                    <li class=\"li\"><samp class=\"ph codeph\">acc</samp>: Accumulator that accumulates all values returned by\n                      the function.</li>\n\n                    <li class=\"li\"><samp class=\"ph codeph\">cur</samp>: Current item being accumulated in the array.</li>\n\n                  </ul>\n\n                </div>"
                            },
                            {
                                "name": "initialValue",
                                "type": "Any",
                                "description": "Value passed to the function as the initial value."
                            }
                        ],
                        "return": {
                            "type": "Any",
                            "description": "Accumulated total of all items returned by the reducer function."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "Stream-some_F",
                        "short_description": "Applies a predicate function, a function that takes a single value and returns true or\n    false, to each item in the stream. If the predicate returns true for any item in the stream, the\n    method returns true.",
                        "description": "",
                        "name": "some(Function predicate)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var hasLongDescriptions = new global.GlideQuery('task')\n   .whereNotNull('description')\n   .select('description')\n   .some(function (t) { \n      return t.description.length &gt; 1000; \n   });\n\n\ngs.info(hasLongDescriptions);",
                                "description": "This example shows how to check whether any descriptions in the Task table are over 1,000\n        characters long."
                            }
                        ],
                        "params": [
                            {
                                "name": "predicate",
                                "type": "Function",
                                "description": "Predicate function to apply to the items inside the Stream object. Must return\n                a Boolean value."
                            }
                        ],
                        "return": {
                            "type": "Boolean",
                            "description": "<p class=\"p\">Flag that indicates whether the predicate function returned true for an item in\n                  the stream.</p>\n\n                <div class=\"p\">Valid values:<ul class=\"ul\" id=\"Stream-some_F__ul_iwm_q33_5mb\">\n                    <li class=\"li\">true: The predicate function returned true for an item in the stream.</li>\n\n                    <li class=\"li\">false: The predicate function did not return true for an item in the\n                      stream.</li>\n\n                  </ul>\n</div>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "Stream-toArray_n",
                        "short_description": "Returns an array containing the given number of items from the stream.",
                        "description": "",
                        "name": "toArray(Number count)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var users = new global.GlideQuery('sys_user')\n    .limit(10)\n    .select('first_name', 'last_name')\n    .toArray(50);\n\ngs.info(JSON.stringify(users));",
                                "description": "This example shows you how to transform a stream of records into a JavaScript array."
                            }
                        ],
                        "params": [
                            {
                                "name": "count",
                                "type": "Number",
                                "description": "The maximum number of items from the stream to return in the array."
                            }
                        ],
                        "return": {
                            "type": "Array",
                            "description": "Array containing the given number of items from the stream."
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "There is no constructor for the scoped TemplatePrinter API. The methods are called in mail\n   scripts using the <span class=\"keyword apiname\">template</span> global variable.",
                "short_description": "Scoped TemplatePrinter handles printing from a mail script to the email message.",
                "identifier": "c_TemplatePrinterScopedAPI",
                "name": "TemplatePrinter",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "r_TPS-print_S",
                        "short_description": "Prints the string to the email body.",
                        "description": "",
                        "name": "print(String string)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "template.print(\"Incident number - \" + current.number + \"\\n\");",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "string",
                                "type": "String",
                                "description": "The string to print"
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_TPS-space_N",
                        "short_description": "Adds non-breaking spaces to the email body.",
                        "description": "",
                        "name": "space(Number spaces)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "template.space(4);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "spaces",
                                "type": "Number",
                                "description": "The number of non-breaking spaces to output to the email body."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "<span class=\"ph\">This API requires the Remote Tables plugin\n        (com.glide.script.vtable) to be activated. For more information on Remote Tables, see </span>\n      <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-servicenow-platform/page/administer/remote-tables/concept/remote-tables.html\" target=\"_blank\">Retrieving external data using remote\n        tables and scripts</a>.<br/><br/>Remote table rows are created using the <a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/v_tableAPI\" title=\"Scriptable object that enables you to add rows to a remote table.\"><span class=\"keyword apiname\">v_table</span></a> API.",
                "short_description": "Scriptable object that represents a query running against a remote table.",
                "identifier": "v_queryAPI",
                "name": "v_query â Scoped, Global",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "vquery-getCondition_S",
                        "short_description": "Gets an encoded query string for the specified field.",
                        "description": "",
                        "name": "getCondition(String field)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var result = v_query.getCondition(\"number\");\ngs.info(result);",
                                "description": "The following example shows results for a field with an encoded query of\n          <samp class=\"ph codeph\">number=INC0001^active=true</samp>."
                            }
                        ],
                        "params": [
                            {
                                "name": "field",
                                "type": "String",
                                "description": "Name of the field."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "Returns an <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-platform-user-interface/page/use/using-lists/concept/c_EncodedQueryStrings.html\" target=\"_blank\">encoded query string</a>\n                for the given field."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "vquery-getEncodedQuery",
                        "short_description": "Returns the query against a remote table as an encoded query string",
                        "description": "<p>For details, see <span class=\"ph\" id=\"vquery-getEncodedQuery__d97283e104\"><a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-platform-user-interface/page/use/using-lists/concept/c_EncodedQueryStrings.html\" target=\"_blank\">Encoded query\n                      strings</a></span>.</p>",
                        "name": "getEncodedQuery()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "gs.info(v_query.getEncodedQuery());",
                                "description": "The following example is a snippet from <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-servicenow-platform/page/administer/remote-tables/reference/remote-table-script-def-example2.html\" target=\"_blank\">Retrieving specific records from a\n          third-party source</a>."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The encoded query as a string."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "vquery-getParameter_S",
                        "short_description": "Gets the value of a field in an equality query condition.",
                        "description": "",
                        "name": "getParameter(String field)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "v_query.getParameter(\"caller_id\")",
                                "description": "The following example is a snippet from <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-servicenow-platform/page/administer/remote-tables/reference/remote-table-script-def-example2.html\" target=\"_blank\">Retrieving specific records from a\n          third-party source</a>."
                            }
                        ],
                        "params": [
                            {
                                "name": "field",
                                "type": "String",
                                "description": "Name of the field to be queried."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "Value of the field in the query condition. For example, if\n                  <samp class=\"ph codeph\">name=John</samp> is the encoded query, then\n                  <span class=\"keyword apiname\">getParameter(\"name\")</span> returns <samp class=\"ph codeph\">\"John\"</samp>."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "vquery-getSysId",
                        "short_description": "Returns the sys_id value in a get query.",
                        "description": "",
                        "name": "getSysId()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "v_query.getSysId();",
                                "description": "The following example is a snippet from <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-servicenow-platform/page/administer/remote-tables/reference/remote-table-script-def-example2.html\" target=\"_blank\">Retrieving specific records from a\n          third-party source</a>."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "Sys_id value in the get query, for example, if <samp class=\"ph codeph\">sys_id=123</samp>,\n                this method returns <samp class=\"ph systemoutput\">123</samp>."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "vquery-getTextSearch",
                        "short_description": "Gets a text search query parameter.",
                        "description": "<p>See also:<ul class=\"ul\" id=\"vquery-getTextSearch__ul_a2q_rkp_nlb\">\n        <li class=\"li\"><a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-platform-user-interface/page/use/using-lists/concept/c_EncodedQueryStrings.html\" target=\"_blank\">Encoded query strings</a></li>\n\n        <li class=\"li\"><a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-application-development/page/script/server-scripting/concept/c_UsingGlideRecordToQueryTables.html\" target=\"_blank\">Querying tables in script</a></li>\n\n        </ul></p>",
                        "name": "getTextSearch()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "// for query value GOTO123TEXTQUERY321=email\nv_query.getTextSearch();",
                                "description": "In the following example, the method returns true if the query contains a text query\n        parameter, such as <samp class=\"ph codeph\">GOTO123TEXTQUERY321=email</samp>."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "Text search query parameter, for example\n                <samp class=\"ph systemoutput\">email</samp>."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "vquery-isGet",
                        "short_description": "Determines if the query is a get query, that is, a query that retrieves a record by\n    sys_id.",
                        "description": "",
                        "name": "isGet()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "if (v_query.isGet()) {\n\t\tbySysId(v_table, v_query, v_query.getSysId());\n\t}\n\telse if (v_query.getParameter(\"caller_id\")) {\n\t\tbyCallerId(v_table, v_query, v_query.getParameter(\"caller_id\"));\n\t}\n\telse {\n\t\tfetchAllIncidents(v_table, v_query);\n\t}",
                                "description": "The following example is a snippet from <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-servicenow-platform/page/administer/remote-tables/reference/remote-table-script-def-example2.html\" target=\"_blank\">Retrieving specific records from a\n          third-party source</a>. If the encoded query is <samp class=\"ph codeph\">sys_id=12345123</samp>, the\n          <span class=\"keyword apiname\">v_query.isGet()</span> method returns true. If the encoded query is anything\n        else, such as <samp class=\"ph codeph\">Number=INC1234</samp>, the <span class=\"keyword apiname\">v_query.isGet()</span> method\n        returns false."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "Flag indicates that query for a specific record has <samp class=\"ph codeph\">sys_id=</samp> as\n                the query format. <div class=\"p\">Valid values:<ul class=\"ul\" id=\"vquery-isGet__ul_jdl_pfb_add\">\n                    <li class=\"li\">true: Query contains equality query condition on the sys_id field.</li>\n\n                    <li class=\"li\">false: Query does not include equality query condition on the sys_id\n                      field.</li>\n\n                  </ul>\n</div>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "vquery-isTextSearch",
                        "short_description": "Indicates if the query contains a text query parameter.",
                        "description": "<p>See also:<ul class=\"ul\" id=\"vquery-isTextSearch__ul_a2q_rkp_nlb\">\n          <li class=\"li\"><a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-platform-user-interface/page/use/using-lists/concept/c_EncodedQueryStrings.html\" target=\"_blank\">Encoded query strings</a></li>\n\n          <li class=\"li\"><a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-application-development/page/script/server-scripting/concept/c_UsingGlideRecordToQueryTables.html\" target=\"_blank\">Querying tables in\n            script</a></li>\n\n        </ul></p>",
                        "name": "isTextSearch()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "v_query.isTextSearch();",
                                "description": "In the following example, the method returns true if the query contains a text query\n        parameter, such as <samp class=\"ph codeph\">GOTO123TEXTQUERY321=email</samp>."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "Flag that indicates whether the query contains a text query parameter.<div class=\"p\">Valid\n                    values:<ul class=\"ul\" id=\"vquery-isTextSearch__ul_jdl_pfb_add\">\n                    <li class=\"li\">true: Query contains a text query parameter.</li>\n\n                    <li class=\"li\">false: Query does not contain a text query parameter.</li>\n\n                  </ul>\n</div>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "vquery-setLastErrorMessage_S",
                        "short_description": "Sets the last error message in the GlideRecord.",
                        "description": "<p>See also <a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/c_GlideRecordScopedAPI\" title=\"Scoped GlideRecord is used for database operations.\">Scoped\n          GlideRecord - getLastErrorMessage()</a>.</p>",
                        "name": "setLastErrorMessage(String message)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "function fetchAllIncidents(v_table, v_query) {\n\t// Uses RestMessage with name 'Remote Instance Incidents' and function 'All Incidents'\n\t// Create a RestMessage first which calls an external REST service\n\ttry {\n\t\tvar restMessage = new sn_ws.RESTMessageV2('Remote Instance Incidents', 'All Incidents');\n\t\tvar response = restMessage.execute();\n\t\tvar responseBody = response.getBody();\n\n\t\t// if REST call ends up in an error, set the last error message which shows up\n\t\t// at the bottom of the list view\n\t\tif (response.haveError()) {\n\t\tv_query.setLastErrorMessage(response.getErrorMessage());\n\t\t// can use gs.error() or gs.addErrorMessage() while debugging\n\t\t// gs.debug() messages visible in session debugger\n\t\t// gs.debug(response.getErrorMessage());\n\t\treturn;\n\t\t}\n\t} catch (ex) {\n\t\tv_query.setLastErrorMessage(ex.message);\n\t\t// gs.debug(ex.message);\n\t\treturn;\n\t}",
                                "description": "The following example is a snippet from <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-servicenow-platform/page/administer/remote-tables/reference/remote-table-script-def-example2.html\" target=\"_blank\">Retrieving specific records from a\n          third-party source</a>."
                            }
                        ],
                        "params": [
                            {
                                "name": "message",
                                "type": "String",
                                "description": "Error message."
                            }
                        ],
                        "return": {
                            "type": "None",
                            "description": "Â "
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "<span class=\"ph\">This API requires the Remote Tables plugin\n        (com.glide.script.vtable) to be activated. For more information on Remote Tables, see </span>\n      <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-servicenow-platform/page/administer/remote-tables/concept/remote-tables.html\" target=\"_blank\">Retrieving external data using remote\n        tables and scripts</a>.<br/><br/>Use the <a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/v_queryAPI\" title=\"Scriptable object that represents a query running against a remote table.\"><span class=\"keyword apiname\">v_query</span></a>\n      scriptable object to query remote tables.",
                "short_description": "Scriptable object that enables you to add rows to a remote table.",
                "identifier": "v_tableAPI",
                "name": "v_table â Scoped, Global",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "v_table-addRow_O",
                        "short_description": "Adds rows to the remote table.",
                        "description": "<p>See also <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-servicenow-platform/page/administer/remote-tables/task/create-remote-table-script.html\" target=\"_blank\">Create a script definition for a\n          remote table</a>.</p>",
                        "name": "addRow(Object row)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "/**\n * Adds rows to `v_table` using `restMessage`\n */\nfunction loadData(v_table, v_query, restMessage) {\n\ttry {\n\t\tvar response = restMessage.execute();\n\t\tvar responseBody = response.getBody();\n\t\t\n\t\t// if REST call ends up in an error, set the last error message which shows up\n\t\t// at the bottom of the list view\n\t\tif (response.haveError()) {\n\t\tv_query.setLastErrorMessage(response.getErrorMessage());\n\t\t// can use gs.error() or gs.addErrorMessage() while debugging\n\t\t// gs.debug() messages visible in session debugger\n\t\t// gs.debug(response.getErrorMessage());\n\t\treturn;\n\t\t}\n\t} catch (ex) {\n\t\tv_query.setLastErrorMessage(ex.message);\n\t\t// gs.debug(ex.message);\n\t\treturn;\n\t}\n\tâ\n\tvar transformerDefinition = getTransformerDefinition();\n\tvar transformer = new sn_tfrm.Transformer(transformerDefinition, responseBody);\n\t// transformer parses the responseBody and extracts rows\n\twhile (transformer.transform()) {\n\t\t// row is field-value map e.g. { active:\"true\", number: \"INC0000001\"}\n\t\tvar row = transformer.getRow();\n\t\t// you may do any additional transformations to the row like GlideDuration, GlideDataTime etc. For example,\n\t\t// row.duration = new GlideDuration(row.duration);\n\tâ\n\t\t// finally add the row to the remote table\n\t\tv_table.addRow(row);\n\t}\n}",
                                "description": "The following example is a snippet from <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-servicenow-platform/page/administer/remote-tables/reference/remote-table-script-def-example2.html\" target=\"_blank\">Retrieving specific records from a third-party source</a>."
                            }
                        ],
                        "params": [
                            {
                                "name": "row",
                                "type": "Object",
                                "description": "JavaScript object containing field name and value map in which the key is the\n                field name, for example, <samp class=\"ph codeph\">{number: \"INC0001\", sys_id:\n                \"a34\"}</samp>.<pre class=\"pre codeblock\">{ &lt;field name&gt;: String }\n</pre>"
                            },
                            {
                                "name": "row.<field value>",
                                "type": "String",
                                "description": "Represents the value of the selected field. Although no fields are mandatory,\n                ServiceNow recommends sys_id.<p class=\"p\">Example listing only sys_id field and\n                value:</p>\n<pre class=\"pre codeblock\">{ sys_id: \"&lt;uniqueID&gt;\" }\n</pre>"
                            }
                        ],
                        "return": {
                            "type": "Boolean",
                            "description": "Flag that indicates whether the row was added to the remote table.<div class=\"p\">Valid\n                    values:<ul class=\"ul\" id=\"v_table-addRow_O__ul_jdl_pfb_add\">\n                    <li class=\"li\">true: Success.</li>\n\n                    <li class=\"li\">false: Row was not added.</li>\n\n                  </ul>\n</div>"
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "There are no constructors for creating an instance of a scoped workflow object. Instead, use\n   the global <span class=\"keyword apiname\">workflow</span> object available in activity scripts. This workflow object\n   is available in any script location inside a workflow.",
                "short_description": "The scoped Workflow API provides methods that can be used in an activity definition\n  script.",
                "identifier": "c_WorkflowScopedAPI",
                "name": "Workflow",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "SWF-inputs",
                        "short_description": "Object that contains the workflow variables.",
                        "description": "<p>This is not a method, but rather a way to reference the variables in a workflow object,\n        such as the user. Workflow variables are defined in the properties of the workflow or by\n        scripted activities.</p>",
                        "name": "inputs",
                        "type": "Property",
                        "examples": [
                            {
                                "script": "var user = workflow.inputs.u_user;",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "inputs",
                                "type": "Object",
                                "description": "Workflow variables as name value pairs. The variables of a workflow object are\n                custom to an integrator's implementation."
                            }
                        ],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SWF-result",
                        "short_description": "Element of the workflow object that contains the workflow results.",
                        "description": "<p>This is not a method, but rather the element in the workflow object that contains the\n        results of a workflow.</p>",
                        "name": "result",
                        "type": "Property",
                        "examples": [
                            {
                                "script": "var wfResult = workflow.result;",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "result",
                                "type": "String",
                                "description": "Workflow results."
                            }
                        ],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SWF-debug_S_O",
                        "short_description": "Adds a debug message to the log.",
                        "description": "",
                        "name": "debug(String message, Object args)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var loggedMessage = workflow.debug(\"All is well\");",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "message",
                                "type": "String",
                                "description": "The message to add to the log."
                            },
                            {
                                "name": "args",
                                "type": "Object",
                                "description": "Arguments to add to the message."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "The message added to the log."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SWF-error_S_O",
                        "short_description": "Adds an error message to the log.",
                        "description": "",
                        "name": "error(String message, Object args)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var loggedMessage = workflow.error(\"An error has occurred. \");",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "message",
                                "type": "String",
                                "description": "The message to add to the log."
                            },
                            {
                                "name": "args",
                                "type": "Object",
                                "description": "Arguments to add to the message."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "The logged message"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SWF-getVariable_S",
                        "short_description": "Returns the specified variable's value.",
                        "description": "",
                        "name": "getVariable(String name)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var value = workflow.getVariable(\"task\");",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "name",
                                "type": "String",
                                "description": "The variable name"
                            }
                        ],
                        "return": {
                            "type": "Object",
                            "description": "The variable's value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SWF-info_S_O",
                        "short_description": "Adds an informational message to the log.",
                        "description": "",
                        "name": "info(String message, Object args)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var loggedMessage = workflow.info(\"All is well\");",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "message",
                                "type": "String",
                                "description": "The message to add to the log."
                            },
                            {
                                "name": "args",
                                "type": "Object",
                                "description": "Arguments to add to the message."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "The message that is logged."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SWF-name",
                        "short_description": "Returns the workflow name.",
                        "description": "",
                        "name": "name()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var name = workflow.name();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The workflow name"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SWF-removeVariable_S",
                        "short_description": "Removes the specified variable from the workflow.",
                        "description": "",
                        "name": "removeVariable(String name)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var value = workflow.removeVariable(\"task\");",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "name",
                                "type": "String",
                                "description": "The variable name"
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SWF-scratchpad",
                        "short_description": "Returns the workflow's scratchpad object.",
                        "description": "",
                        "name": "scratchpad()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var scratchpad = workflow.scratchpad();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Object",
                            "description": "The scratchpad object."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SWF-setResult_S",
                        "short_description": "Sets the workflow's result.",
                        "description": "",
                        "name": "setResult(String result)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "workflow.setResult(\"Success\");",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "result",
                                "type": "String",
                                "description": "The workflow's result"
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SWF-setVariable_S_O",
                        "short_description": "Sets the specified variable to the specified value.",
                        "description": "",
                        "name": "setVariable(String name, Object value)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "workflow.setVariable(\"task\", \"terrible\");",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "name",
                                "type": "String",
                                "description": "The variable name"
                            },
                            {
                                "name": "value",
                                "type": "Object",
                                "description": "The value to be assigned to the variable."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SWF-warn_S_O",
                        "short_description": "Adds a warning message to the log.",
                        "description": "",
                        "name": "warn(String message, Object args)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var loggedMessage = workflow.warn(\"Check your permissions.\");",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "message",
                                "type": "String",
                                "description": "The message to add to the log."
                            },
                            {
                                "name": "args",
                                "type": "Object",
                                "description": "Arguments to add to the message."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "The logged message"
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "Use this JavaScript class to create an object from an XML string, usually a return value from a\n   web-service invocation, or the XML payload of ECC Queue. Using the XMLDocument2 object in a\n   JavaScript business rule lets you query values from the XML elements and attributes directly.<br/><br/>An XML string has a tree structure, and the parts of the structure are called nodes. An\n   XMLDocument2 object deals with two node types, element, and document element. An element node is\n   a node with a name and possibly attributes and child nodes. A document-element node is the root\n   node of the XML tree. It is the only node without a parent node.",
                "short_description": "XMLDocument2 is a JavaScript Object wrapper for parsing and extracting XML data from an\n  XML string.",
                "identifier": "c_XMLDocument2ScopedAPI",
                "name": "XMLDocument2",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "r_SXMLDoc2-XMLDocument2_GSIS",
                        "short_description": "Creates an XMLDocument2 object from an attachment stream.",
                        "description": "",
                        "name": "XMLDocument2( GlideScriptableInputStream inputStream)",
                        "type": "Constructor",
                        "examples": [],
                        "params": [
                            {
                                "name": "inputStream",
                                "type": "GlideScriptableInputStream",
                                "description": "The input stream the XMLDocument2 object encapsulates."
                            }
                        ],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedXMLDocument2XMLDocument2",
                        "short_description": "Creates an XMLDocument2 object.",
                        "description": "",
                        "name": "XMLDocument2()",
                        "type": "Constructor",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedXMLDocument2CreateElement_String",
                        "short_description": "Creates and adds an element node to the current node. The element name is the string\n    passed in as a parameter. The new element has no text child nodes.",
                        "description": "",
                        "name": "createElement(String name)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var xmlString = \"&lt;test&gt;\" +\n                \"  &lt;one&gt;\" +\n                \"    &lt;two att=\\\"xxx\\\"&gt;abcd1234&lt;/two&gt;\" +\n                \"    &lt;three boo=\\\"yah\\\" att=\\\"yyy\\\"&gt;1234abcd&lt;/three&gt;\" +\n                \"    &lt;two&gt;another&lt;/two&gt;\" +\n                \"  &lt;/one&gt;\" +\n                \"  &lt;number&gt;1234&lt;/number&gt;\" +\n                \"&lt;/test&gt;\";\nvar xmlDoc = new XMLDocument2();\nxmlDoc.parseXML(xmlString); \nxmlDoc.createElement(\"new2\"); \n \ngs.info(xmlDoc);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "name",
                                "type": "String",
                                "description": "The new element's name."
                            }
                        ],
                        "return": {
                            "type": "XMLNode",
                            "description": "Current XML node."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedXMLDocument2CreateElementWithTextValue_String_String",
                        "short_description": "Creates and adds an element node with a text child node to the current\n    node.",
                        "description": "",
                        "name": "createElementWithTextValue(String name, String value)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var xmlString = \"&lt;test&gt;\" +\n    \"  &lt;one&gt;\" +\n    \"    &lt;two att=\\\"xxx\\\"&gt;abcd1234&lt;/two&gt;\" +\n    \"    &lt;three boo=\\\"yah\\\" att=\\\"yyy\\\"&gt;1234abcd&lt;/three&gt;\" +\n    \"    &lt;two&gt;another&lt;/two&gt;\" +\n    \"  &lt;/one&gt;\" +\n    \"  &lt;number&gt;1234&lt;/number&gt;\" +\n    \"&lt;/test&gt;\";\nvar xmlDoc = new XMLDocument2();\nxmlDoc.parseXML(xmlString); \nxmlDoc.createElementWithTextValue(\"new\", \"test\");\ngs.info(xmlDoc);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "name",
                                "type": "String",
                                "description": "Name of the element to add."
                            },
                            {
                                "name": "value",
                                "type": "String",
                                "description": "Element's text value."
                            }
                        ],
                        "return": {
                            "type": "XMLNode",
                            "description": "Current XML node."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedXMLDocument2GetDocumentElement",
                        "short_description": "Gets the document element node of the XMLdocument2 object. The document element node is\n    the root node.",
                        "description": "",
                        "name": "getDocumentElement()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var xmlString = \"&lt;test&gt;\" +\n                \"  &lt;one&gt;\" +\n                \"    &lt;two att=\\\"xxx\\\"&gt;abcd1234&lt;/two&gt;\" +\n                \"    &lt;three boo=\\\"yah\\\" att=\\\"yyy\\\"&gt;1234abcd&lt;/three&gt;\" +\n                \"    &lt;two&gt;another&lt;/two&gt;\" +\n                \"  &lt;/one&gt;\" +\n                \"  &lt;number&gt;1234&lt;/number&gt;\" +\n                \"&lt;/test&gt;\";\nvar xmlDoc = new XMLDocument2();\nxmlDoc.parseXML(xmlString);\n//returns the root node of the document tree.\nvar rootNode = xmlDoc.getDocumentElement();\ngs.info(rootNode.getTextContent());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "XMLNode",
                            "description": "The document element."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedXMLDocument2GetFirstNode_String",
                        "short_description": "Gets the first node in the specified XPATH.",
                        "description": "",
                        "name": "getFirstNode(String xPath)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var xmlString = \"&lt;test&gt;\" +\n                \"  &lt;one&gt;\" +\n                \"    &lt;two att=\\\"xxx\\\"&gt;abcd1234&lt;/two&gt;\" +\n                \"    &lt;three boo=\\\"yah\\\" att=\\\"yyy\\\"&gt;1234abcd&lt;/three&gt;\" +\n                \"    &lt;two&gt;another&lt;/two&gt;\" +\n                \"  &lt;/one&gt;\" +\n                \"  &lt;number&gt;1234&lt;/number&gt;\" +\n                \"&lt;/test&gt;\";\nvar xmlDoc = new XMLDocument2();\nxmlDoc.parseXML(xmlString);\nvar foo = xmlDoc.getFirstNode('/test/one/two');\ngs.info(foo.getTextContent());",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "xPath",
                                "type": "String",
                                "description": "The XPATH."
                            }
                        ],
                        "return": {
                            "type": "XMLNode",
                            "description": "The first node."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedXMLDocument2GetNextNode_Object",
                        "short_description": "Gets the node after the specified node.",
                        "description": "",
                        "name": "getNextNode(Object current)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var xmlString = \"&lt;test&gt;\" +\n                \"  &lt;one&gt;\" +\n                \"    &lt;two att=\\\"xxx\\\"&gt;abcd1234&lt;/two&gt;\" +\n                \"    &lt;three boo=\\\"yah\\\" att=\\\"yyy\\\"&gt;1234abcd&lt;/three&gt;\" +\n                \"    &lt;two&gt;another&lt;/two&gt;\" +\n                \"  &lt;/one&gt;\" +\n                \"  &lt;number&gt;1234&lt;/number&gt;\" +\n                \"&lt;/test&gt;\";\nvar xmlDoc = new XMLDocument2();\nxmlDoc.parseXML(xmlString);\nvar foo = xmlDoc. getFirstNode('/test/one/two');\nvar foo2 = xmlDoc.getNextNode(foo);\ngs.info(foo.getTextContent());\ngs.info(foo2.getTextContent());",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "current",
                                "type": "Object",
                                "description": "The current node."
                            }
                        ],
                        "return": {
                            "type": "XMLNode",
                            "description": "The next node."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedXMLDocument2GetNode_String",
                        "short_description": "Gets the node specified in the XPath.",
                        "description": "",
                        "name": "getNode(String xPath)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var xmlString = \"&lt;test&gt;\" +\n                \"  &lt;one&gt;\" +\n                \"    &lt;two att=\\\"xxx\\\"&gt;abcd1234&lt;/two&gt;\" +\n                \"    &lt;three boo=\\\"yah\\\" att=\\\"yyy\\\"&gt;1234abcd&lt;/three&gt;\" +\n                \"    &lt;two&gt;another&lt;/two&gt;\" +\n                \"  &lt;/one&gt;\" +\n                \"  &lt;number&gt;1234&lt;/number&gt;\" +\n                \"&lt;/test&gt;\";\nvar xmlDoc = new XMLDocument2();\nxmlDoc.parseXML(xmlString);\nvar node = xmlDoc.getNode(\"/test/one/two\");\ngs.info(node);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "xPath",
                                "type": "String",
                                "description": "XPath of the node to obtain."
                            }
                        ],
                        "return": {
                            "type": "XMLNode",
                            "description": "Current XML node."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedXMLDocument2GetNodeText_String",
                        "short_description": "Gets all the text child nodes from the node referenced in the specified\n    XPath.",
                        "description": "",
                        "name": "getNodeText(String xPath)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var xmlString = \"&lt;test&gt;\" +\n                \"  &lt;one&gt;\" +\n                \"    &lt;two att=\\\"xxx\\\"&gt;abcd1234&lt;/two&gt;\" +\n                \"    &lt;three boo=\\\"yah\\\" att=\\\"yyy\\\"&gt;1234abcd&lt;/three&gt;\" +\n                \"    &lt;two&gt;another&lt;/two&gt;\" +\n                \"  &lt;/one&gt;\" +\n                \"  &lt;number&gt;1234&lt;/number&gt;\" +\n                \"&lt;/test&gt;\";\nvar xmlDoc = new XMLDocument2();\nxmlDoc.parseXML(xmlString); \ngs.info(xmlDoc.getNodeText(\"//two\"));",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "xPath",
                                "type": "String",
                                "description": "XPath of the text to obtain."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "Text children in the XPath."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedXMLDocument2ParseXML_String",
                        "short_description": "Parses the XML string and loads it into the XMLDocument2 object.",
                        "description": "",
                        "name": "parseXML(String xmlDoc)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var xmlString = \"&lt;test&gt;\" +\n                \"  &lt;one&gt;\" +\n                \"    &lt;two att=\\\"xxx\\\"&gt;abcd1234&lt;/two&gt;\" +\n                \"    &lt;three boo=\\\"yah\\\" att=\\\"yyy\\\"&gt;1234abcd&lt;/three&gt;\" +\n                \"    &lt;two&gt;another&lt;/two&gt;\" +\n                \"  &lt;/one&gt;\" +\n                \"  &lt;number&gt;1234&lt;/number&gt;\" +\n                \"&lt;/test&gt;\";\nvar xmlDoc = new XMLDocument2();\nxmlDoc.parseXML(xmlString); \nvar rootNode = xmlDoc.getDocumentElement();",
                                "description": "This example parses the xmlString and loads it into the xmlDocument2 object."
                            }
                        ],
                        "params": [
                            {
                                "name": "xmlDoc",
                                "type": "String",
                                "description": "The document to parse."
                            }
                        ],
                        "return": {
                            "type": "Boolean",
                            "description": "Flag that indicates whether the content was parsed."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedXMLDocument2SetCurrentElement_XMLNode",
                        "short_description": "Makes the node passed in as a parameter the current node.",
                        "description": "",
                        "name": "setCurrentElement(XMLNode element)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var xmlString = \"&lt;test&gt;\" +\n                \"  &lt;one&gt;\" +\n                \"    &lt;two att=\\\"xxx\\\"&gt;abcd1234&lt;/two&gt;\" +\n                \"    &lt;three boo=\\\"yah\\\" att=\\\"yyy\\\"&gt;1234abcd&lt;/three&gt;\" +\n                \"    &lt;two&gt;another&lt;/two&gt;\" +\n                \"  &lt;/one&gt;\" +\n                \"  &lt;number&gt;1234&lt;/number&gt;\" +\n                \"&lt;/test&gt;\";\nvar xmlDoc = new XMLDocument2();\nxmlDoc.parseXML(xmlString);\n//returns the root node of the document tree.\nvar rootNode = xmlDoc.getDocumentElement(); //returns org.w3c.dom.Element\n// sets the root node as the current element\nxmlDoc.setCurrentElement(rootNode);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "element",
                                "type": "XMLNode",
                                "description": "The element node to set as the current node."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SXML-setNamespaceAware_B",
                        "short_description": "When set to true, the XMLDocument2 object processes the document with XML\n    namespaces.",
                        "description": "<p>If you don't set this, an XML document with namespaces won't be enumerated correctly, and\n        an XPath search would fail.Â </p>",
                        "name": "setNamespaceAware(Boolean aware)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "aware",
                                "type": "Boolean",
                                "description": "When true, the XMLDocument2 object processes the document with XML namespaces."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedXMLDocument2ToString",
                        "short_description": "Returns a string containing the XML.",
                        "description": "",
                        "name": "toString()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var xmlString = \"&lt;test&gt;\" +\n                \"  &lt;one&gt;\" +\n                \"    &lt;two att=\\\"xxx\\\"&gt;abcd1234&lt;/two&gt;\" +\n                \"    &lt;three boo=\\\"yah\\\" att=\\\"yyy\\\"&gt;1234abcd&lt;/three&gt;\" +\n                \"    &lt;two&gt;another&lt;/two&gt;\" +\n                \"  &lt;/one&gt;\" +\n                \"  &lt;number&gt;1234&lt;/number&gt;\" +\n                \"&lt;/test&gt;\";\nvar xmlDoc = new XMLDocument2();\nxmlDoc.parseXML(xmlString);\ngs.info(xmlDoc.toString());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "A string containing the XML."
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "There are no constructors for creating a stand alone instance of an XMLNode object. Instead,\n   use the createElement() method of <a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/c_XMLDocument2ScopedAPI\" title=\"XMLDocument2 is a JavaScript Object wrapper for parsing and extracting XML data from an XML string.\">XMLDocument2</a>, which adds a node to an existing document.",
                "short_description": "The scoped XMLNode API allows you to query values from XML nodes. XMLNodes are extracted\n  from XMLDocument2 objects, which contain XML strings.",
                "identifier": "c_XMLNodeScopedAPI",
                "name": "XMLNode",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "r_ScopedXMLNodeGetAttribute_String",
                        "short_description": "Gets the value of the attribute.",
                        "description": "",
                        "name": "getAttribute(String attribute)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var xmlString = \"&lt;test&gt;\" +\n                \"  &lt;one&gt;\" +\n                \"    &lt;two att=\\\"xxx\\\"&gt;abcd1234&lt;/two&gt;\" +\n                \"    &lt;three boo=\\\"yah\\\" att=\\\"yyy\\\"&gt;1234abcd&lt;/three&gt;\" +\n                \"    &lt;two&gt;another&lt;/two&gt;\" +\n                \"  &lt;/one&gt;\" +\n                \"  &lt;number&gt;1234&lt;/number&gt;\" +\n                \"&lt;/test&gt;\";\nvar xmlDoc = new XMLDocument2();\nxmlDoc.parseXML(xmlString);\nvar node = xmlDoc.getNode('//two');\ngs.info(node.getAttribute('att'));",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "attribute",
                                "type": "String",
                                "description": "Name of the attribute."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "The attribute's value."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SXMLN_getAttributes",
                        "short_description": "Returns an object containing the node's attributes as properties with\n    values.",
                        "description": "",
                        "name": "getAttributes()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "Object",
                            "description": "Contains name-value pairs where the name is the attribute and the value is the\n                attribute's value."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedXMLNodeGetChildNodeIterator",
                        "short_description": "Gets a XMLNodeIterator object that can be used to walk through the list of child\n    nodes.",
                        "description": "",
                        "name": "getChildNodeIterator()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var xmlString = \"&lt;test&gt;\" +\n                \"  &lt;one&gt;\" +\n                \"    &lt;two att=\\\"xxx\\\"&gt;abcd1234&lt;/two&gt;\" +\n                \"    &lt;three boo=\\\"yah\\\" att=\\\"yyy\\\"&gt;1234abcd&lt;/three&gt;\" +\n                \"    &lt;two&gt;another&lt;/two&gt;\" +\n                \"  &lt;/one&gt;\" +\n                \"  &lt;number&gt;1234&lt;/number&gt;\" +\n                \"&lt;/test&gt;\";\nvar xmlDoc = new XMLDocument2();\nxmlDoc.parseXML(xmlString);\nvar node = xmlDoc.getNode('//one');\nvar iter= node.getChildNodeIterator();\ngs.info(iter.hasNext());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "XMLNodeIterator",
                            "description": "The node iterator object."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedXMLNodeGetFirstChild",
                        "short_description": "Gets the node's first child node.",
                        "description": "",
                        "name": "getFirstChild()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var xmlString = \"&lt;test&gt;\" +\n                \"&lt;one&gt;\" +\n                \"&lt;two att=\\\"xxx\\\"&gt;abcd1234&lt;/two&gt;\" +\n                \"&lt;three boo=\\\"yah\\\" att=\\\"yyy\\\"&gt;1234abcd&lt;/three&gt;\" +\n                \"&lt;two&gt;another&lt;/two&gt;\" +\n                \"&lt;/one&gt;\" +\n                \"&lt;number&gt;1234&lt;/number&gt;\" +\n                \"&lt;/test&gt;\";\nvar xmlDoc = new XMLDocument2();\nxmlDoc.parseXML(xmlString);\nvar node = xmlDoc.getNode('//one');\ngs.info(node.getFirstChild());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "XMLNode",
                            "description": "The node's first child node."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedXMLNodeGetLastChild",
                        "short_description": "Gets the node's last child node.",
                        "description": "",
                        "name": "getLastChild()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var xmlString = \"&lt;test&gt;\" +\n                \"&lt;one&gt;\" +\n                \"&lt;two att=\\\"xxx\\\"&gt;abcd1234&lt;/two&gt;\" +\n                \"&lt;three boo=\\\"yah\\\" att=\\\"yyy\\\"&gt;1234abcd&lt;/three&gt;\" +\n                \"&lt;two&gt;another&lt;/two&gt;\" +\n                \"&lt;/one&gt;\" +\n                \"&lt;number&gt;1234&lt;/number&gt;\" +\n                \"&lt;/test&gt;\";\nvar xmlDoc = new XMLDocument2();\nxmlDoc.parseXML(xmlString);\nvar node = xmlDoc.getNode('//one');\n \ngs.info(node.getLastChild());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "XMLNode",
                            "description": "The node's last child."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedXMLNodeGetNodeName",
                        "short_description": "Gets the node's name. A node's name is determined by the node type. A document-element\n    node's name is #document. A text node's name is #text. An element node's name is the element's\n    name.",
                        "description": "",
                        "name": "getNodeName()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var xmlString = \"&lt;test&gt;\" +\n                \"  &lt;one&gt;\" +\n                \"    &lt;two att=\\\"xxx\\\"&gt;abcd1234&lt;/two&gt;\" +\n                \"    &lt;three boo=\\\"yah\\\" att=\\\"yyy\\\"&gt;1234abcd&lt;/three&gt;\" +\n                \"    &lt;two&gt;another&lt;/two&gt;\" +\n                \"  &lt;/one&gt;\" +\n                \"  &lt;number&gt;1234&lt;/number&gt;\" +\n                \"&lt;/test&gt;\";\nvar xmlDoc = new XMLDocument2();\nxmlDoc.parseXML(xmlString);\nvar node = xmlDoc.getNode('//two');\ngs.info(node.getNodeName());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The node's name."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedXMLNodeGetNodeValue",
                        "short_description": "Gets the node's value. A node's value is determined by the node type. Element and\n    document-element nodes return null.",
                        "description": "",
                        "name": "getNodeValue()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var xmlString = \"&lt;test&gt;\" +\n                \"  &lt;one&gt;\" +\n                \"    &lt;two att=\\\"xxx\\\"&gt;abcd1234&lt;/two&gt;\" +\n                \"    &lt;three boo=\\\"yah\\\" att=\\\"yyy\\\"&gt;1234abcd&lt;/three&gt;\" +\n                \"    &lt;two&gt;another&lt;/two&gt;\" +\n                \"  &lt;/one&gt;\" +\n                \"  &lt;number&gt;1234&lt;/number&gt;\" +\n                \"&lt;/test&gt;\";\nvar xmlDoc = new XMLDocument2();\nxmlDoc.parseXML(xmlString);\nvar node = xmlDoc.getNode('//two');\ngs.info(node.getNodeValue());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The node's value."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedXMLNodeGetTextContent",
                        "short_description": "Gets the text content of the current node. The text content of a node consists of all\n    the node's child text nodes",
                        "description": "",
                        "name": "getTextContent()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var xmlString = \"&lt;test&gt;\" +\n                \"  &lt;one&gt;\" +\n                \"    &lt;two att=\\\"xxx\\\"&gt;abcd1234&lt;/two&gt;\" +\n                \"    &lt;three boo=\\\"yah\\\" att=\\\"yyy\\\"&gt;1234abcd&lt;/three&gt;\" +\n                \"    &lt;two&gt;another&lt;/two&gt;\" +\n                \"  &lt;/one&gt;\" +\n                \"  &lt;number&gt;1234&lt;/number&gt;\" +\n                \"&lt;/test&gt;\";\nvar xmldoc = new XMLDocument2();\nxmldoc.parseXML(xmlString);\nvar node = xmldoc.getNode('//one/two');\ngs.info(node.getTextContent());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The text content of the current node."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedXMLNodeHasAttribute_String",
                        "short_description": "Determines if the node has the specified attribute.",
                        "description": "",
                        "name": "hasAttribute(String attribute)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var xmlString = \"&lt;test&gt;\" +\n                \"  &lt;one&gt;\" +\n                \"    &lt;two att=\\\"xxx\\\"&gt;abcd1234&lt;/two&gt;\" +\n                \"    &lt;three boo=\\\"yah\\\" att=\\\"yyy\\\"&gt;1234abcd&lt;/three&gt;\" +\n                \"    &lt;two&gt;another&lt;/two&gt;\" +\n                \"  &lt;/one&gt;\" +\n                \"  &lt;number&gt;1234&lt;/number&gt;\" +\n                \"&lt;/test&gt;\";\nvar xmlDoc = new XMLDocument2();\nxmlDoc.parseXML(xmlString);\nvar node = xmlDoc.getNode('//two');\ngs.info(node.hasAttribute('att'));",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "attribute",
                                "type": "String",
                                "description": "The name of the attribute to check."
                            }
                        ],
                        "return": {
                            "type": "Boolean",
                            "description": "True if the node has the attribute."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedXMLNodeToString",
                        "short_description": "Returns the string value of the current node.",
                        "description": "",
                        "name": "toString()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var xmlString = \"&lt;test&gt;\" +\n                \"  &lt;one&gt;\" +\n                \"    &lt;two att=\\\"xxx\\\"&gt;abcd1234&lt;/two&gt;\" +\n                \"    &lt;three boo=\\\"yah\\\" att=\\\"yyy\\\"&gt;1234abcd&lt;/three&gt;\" +\n                \"    &lt;two&gt;another&lt;/two&gt;\" +\n                \"  &lt;/one&gt;\" +\n                \"  &lt;number&gt;1234&lt;/number&gt;\" +\n                \"&lt;/test&gt;\";\nvar xmlDoc = new XMLDocument2();\nxmlDoc.parseXML(xmlString);\nvar node = xmlDoc.getNode('//one');\ngs.info(node.toString());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The string value of the current node."
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "There are no constructors for creating a stand alone instance of a XMLNodeIterator object. To\n   create a XMLNodeIterator object use the <span class=\"keyword apiname\">getChildNodeIterator()</span> method of the\n   XMLNode object.",
                "short_description": "The scoped XMLNodeIterator class allows you to iterate through a node of a XML\n  document.",
                "identifier": "c_XMLNodeIteratorAPI",
                "name": "XMLNodeIterator",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "r_ScopedXMLNodeIteratorHasNext",
                        "short_description": "Returns true if the iteration has more elements.",
                        "description": "",
                        "name": "hasNext()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var xmlString = \"&lt;test&gt;\" +\n                \"  &lt;one&gt;\" +\n                \"    &lt;two att=\\\"xxx\\\"&gt;abcd1234&lt;/two&gt;\" +\n                \"    &lt;three boo=\\\"yah\\\" att=\\\"yyy\\\"&gt;1234abcd&lt;/three&gt;\" +\n                \"    &lt;two&gt;another&lt;/two&gt;\" +\n                \"  &lt;/one&gt;\" +\n                \"  &lt;number&gt;1234&lt;/number&gt;\" +\n                \"&lt;/test&gt;\";\nvar xmlDoc = new XMLDocument2();\nxmlDoc.parseXML(xmlString);\nvar node = xmlDoc.getNode('//one');\nvar iter= node.getChildNodeIterator();\ngs.info(iter.hasNext());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "True if the iteration has more elements."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_ScopedXMLNodeIteratorNext",
                        "short_description": "Gets the next element in the iteration. The returned element may be a #text node for\n    the spaces/tabs if XML is \"pretty formatted\".",
                        "description": "",
                        "name": "next()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var xmlString = \"&lt;test&gt;\" +\n                \"  &lt;one&gt;\" +\n                \"    &lt;two att=\\\"xxx\\\"&gt;abcd1234&lt;/two&gt;\" +\n                \"    &lt;three boo=\\\"yah\\\" att=\\\"yyy\\\"&gt;1234abcd&lt;/three&gt;\" +\n                \"    &lt;two&gt;another&lt;/two&gt;\" +\n                \"  &lt;/one&gt;\" +\n                \"  &lt;number&gt;1234&lt;/number&gt;\" +\n                \"&lt;/test&gt;\";\nvar xmlDoc = new XMLDocument2();\nxmlDoc.parseXML(xmlString);\nvar node = xmlDoc.getNode('//one');\nvar iter= node.getChildNodeIterator();\nwhile(iter.hasNext()) {\n   var n = iter.next();\n   gs.info('Node name: ' +  n.getNodeName());\n   gs.info('Node value: ' +  n.getNodeValue());\n}",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "XMLNode",
                            "description": "The next element in the iteration."
                        },
                        "extras": []
                    }
                ]
            }
        ]
    },
    {
        "identifier": "sn_auth-namespace",
        "namespace": "sn_auth",
        "classes": [
            {
                "description": "Generate outbound signing requests using these APIs in the following\n         order:<ol class=\"ol\" id=\"AuthCredentialAPI__d81426e64\">\n         <li class=\"li\"><span class=\"keyword apiname\">HttpRequestData</span>: Build the API request.</li>\n\n         <li class=\"li\"><span class=\"keyword apiname\">AuthCredential</span>: Create a credential object or update an existing\n          one. Use the credential to sign the request through the <span class=\"keyword apiname\">RequestAuthAPI</span>\n          class. </li>\n\n         <li class=\"li\"><span class=\"keyword apiname\">RequestAuthAPI</span>: Sign the request and return an HttpRequestAuthedData\n          object.</li>\n\n         <li class=\"li\"><span class=\"keyword apiname\">HttpRequestAuthedData</span>: Get information about the signed\n          request.</li>\n\n         <li class=\"li\"><span class=\"keyword apiname\">GlideHTTPRequest</span>: Send the signed request.</li>\n\n        </ol><br/><br/><span class=\"ph\">Before using these APIs, you must <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-servicenow-platform/page/product/credentials/task/configure-authentication-algorithm.html\" target=\"_blank\">configure an authentication\n         algorithm</a> to sign the request and associate it with the credential used to\n        authenticate the request.</span><br/><br/><span class=\"ph\">You can create an empty AuthCredential object, instantiate an\n        existing AuthCredential object, or use the <span class=\"keyword apiname\">StandardCredentialsProvider</span>\n        class to instantiate an AuthCredential object using a Credential record from the Credentials\n        [discovery_credentials] table. If you create an empty AuthCredential object, use the\n         <span class=\"keyword apiname\">setAttribute()</span> method to add properties to the object. </span><br/><br/>See the following example to instantiate an AuthCredential using\n        <span class=\"keyword apiname\">StandardCredentialsProvider</span>:<pre><code class='language-javascript'>// Return an AuthCredential object using a Credential sys_id\nvar credential = new sn_cc.StandardCredentialsProvider().getAuthCredentialByID(\"5b61c16f73533300f662cff8faf6a74b\");</code></pre><br/><br/>Use the <span class=\"keyword apiname\">AuthCredential</span> API in scoped scripts with the\n        <span class=\"keyword parmname\">sn_auth</span> namespace identifier.",
                "short_description": "The <span class=\"keyword apiname\">AuthCredential()</span> API provides methods that enable you to build\n    credentials for a REST request.",
                "identifier": "AuthCredentialAPI",
                "name": "AuthCredential",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "AuthCredential-AuthCredential_O",
                        "short_description": "Instantiates a new AuthCredential object, or modifies an existing one.",
                        "description": "<p><span class=\"ph\">You can create an empty AuthCredential object, instantiate an\n        existing AuthCredential object, or use the <span class=\"keyword apiname\">StandardCredentialsProvider</span>\n        class to instantiate an AuthCredential object using a Credential record from the Credentials\n        [discovery_credentials] table. If you create an empty AuthCredential object, use the\n         <span class=\"keyword apiname\">setAttribute()</span> method to add properties to the object. </span></p>",
                        "name": "AuthCredential(Object authCredential)",
                        "type": "Constructor",
                        "examples": [],
                        "params": [
                            {
                                "name": "authCredential",
                                "type": "Object",
                                "description": "Optional. Include this parameter to update an existing AuthCredential object."
                            }
                        ],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "AuthCredential-getAttribute_S",
                        "short_description": "Returns the value of an AuthCredential attribute.",
                        "description": "",
                        "name": "getAttribute(String key)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "// Define the HttpRequestData object\nvar endpoint= \"https://third-party-endpoint\";\nvar httpRequestData = new sn_auth.HttpRequestData();\nhttpRequestData.setEndpoint(endpoint);\nhttpRequestData.setService(âs3â);\nhttpRequestData.setRegion(âus-east-1â);\nhttpRequestData.setHttpMethod(âPUTâ);\nvar content = âAction=SendMessage&amp;MessageBody=This is a test messageâ;\nhttpRequestData.setContent(content);\nhttpRequestData.addHeader(âx-amz-aclâ , âpublic-readâ );\n \n// Get AuthCredential object and set an attribute\nvar credential = new sn_auth.AuthCredential();\ncredential.setAttribute(\"user_name\", \"admin\");\n \n// Sign the request and return an AuthCredential attribute value\nvar signingAPI = new sn_auth.RequestAuthAPI(httpRequestData, credential);\nvar signingCredential = signingAPI.getAuthCredential();\nname = signingCredential.getAttribute(\"name\");",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "key",
                                "type": "String",
                                "description": "Key of the attribute to return the value for. If you created an empty\n                  <span class=\"keyword apiname\">AuthCredential</span> object, you must use the <span class=\"keyword apiname\">setAttribute()\n                </span> method to add properties to the object. If you used a credential record\n                to instantiate the <span class=\"keyword apiname\">AuthCredential</span> object, pass a field name from\n                the Credential [discovery_credentials] table to access the value."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "AuthCredential-setAttribute_S_S",
                        "short_description": "Sets an attribute for an AuthCredential object.",
                        "description": "",
                        "name": "setAttribute(String key, String value)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "// Define the HttpRequestData object\nvar endpoint= \"https://third-party-endpoint\";\nvar httpRequestData = new sn_auth.HttpRequestData();\nhttpRequestData.setEndpoint(endpoint);\nhttpRequestData.setService(âs3â);\nhttpRequestData.setRegion(âus-east-1â);\nhttpRequestData.setHttpMethod(âPUTâ);\nvar content = âAction=SendMessage&amp;MessageBody=This is a test messageâ;\nhttpRequestData.setContent(content);\nhttpRequestData.addHeader(âx-amz-aclâ , âpublic-readâ );\n \n// Get AuthCredential object and set an attribute\nvar credential = new sn_auth.AuthCredential();\ncredential.setAttribute(\"user_name\", \"admin\");",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "key",
                                "type": "String",
                                "description": "Name of the attribute to set. If you created an empty\n                  <span class=\"keyword apiname\">AuthCredential</span> object, you must use the this method to add\n                properties to the object. If you used a credential record to instantiate the\n                  <span class=\"keyword apiname\">AuthCredential</span> object, pass a field name from the Credential\n                [discovery_credentials] table to set the value."
                            },
                            {
                                "name": "value",
                                "type": "String",
                                "description": "Value of the attribute."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "This API can be used in global and scoped scripts. In scoped scripts us the\n    <span class=\"keyword parmname\">sn_auth</span> namespace identifier.",
                "short_description": "Use these methods for requesting and revoking OAuth refresh and access tokens.",
                "identifier": "c_OAuthGlideOAuthClient",
                "name": "GlideOAuthClient - Scoped, Global",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "r_GlideOAuthClientRequestgetToken",
                        "short_description": "Retrieves the token for the client. You can use the token to check the expiration date\n    and perform a token renewal.",
                        "description": "",
                        "name": "getToken(String oauthEntityName, String requestor)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "token = oAuthClient.getToken(testAppProvider, someone@someemail.com);",
                                "description": "This example code retrieves a token from the instance database:"
                            }
                        ],
                        "params": [
                            {
                                "name": "OAuthEntityName",
                                "type": "String",
                                "description": "The OAuth entity."
                            },
                            {
                                "name": "requestor",
                                "type": "String",
                                "description": "The request."
                            }
                        ],
                        "return": {
                            "type": "ScopedGlideOAuthToken",
                            "description": "The token for the client."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_GlideOAuthClientRequestTokenJSON",
                        "short_description": "Retrieves the token for the client, with the request parameters encoded in JSON\n    format.",
                        "description": "",
                        "name": "requestToken(String clientName, String jsonString)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "\nvar oAuthClient = new GlideOAuthClient();\nvar params ={grant_type:\"password\", username:\"itil\", password:'itil'};\nvar json =new JSON();\nvar text = json.encode(params);\nvar tokenResponse = oAuthClient.requestToken('TestClient', text);\nvar token = tokenResponse.getToken();\n\ngs.log(\"AccessToken:\"+ token.getAccessToken());\ngs.log(\"AccessTokenExpiresIn:\"+ token.getExpiresIn());\ngs.log(\" RefreshToken:\"+ token.getRefreshToken());\n",
                                "description": "This example shows a resource owner password grant type request, with request parameters\n        encoded in JSON format."
                            }
                        ],
                        "params": [
                            {
                                "name": "clientName",
                                "type": "String",
                                "description": "The client name."
                            },
                            {
                                "name": "jsonString",
                                "type": "String",
                                "description": "The JSON string for the client."
                            }
                        ],
                        "return": {
                            "type": "GlideOAuthClientResponse",
                            "description": "The token for the client."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_GlideOAuthClientRequestTokenClientRequest",
                        "short_description": "Retrieves the token for the client, with the client name and the request set into a\n    GlideOAuthClientResponse object.",
                        "description": "",
                        "name": "requestTokenByRequest(String clientName, GlideOAuthClientRequest request)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "clientName",
                                "type": "String",
                                "description": "The client name."
                            },
                            {
                                "name": "request",
                                "type": "GlideOAuthClientRequest",
                                "description": "The request."
                            }
                        ],
                        "return": {
                            "type": "GlideOAuthClientResponse",
                            "description": "The token for the client."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_GlideOAuthClientRevokeTokenClientRequest",
                        "short_description": "Revokes the access or refresh token for the client, with the request and optional\n    header parameters set into a GlideOAuthClientRequest object.",
                        "description": "",
                        "name": "revokeToken(String clientName, String accessToken, String refreshToken, GlideOAuthClientRequest request)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "clientName",
                                "type": "String",
                                "description": "The client name."
                            },
                            {
                                "name": "accessToken",
                                "type": "String",
                                "description": "The access token."
                            },
                            {
                                "name": "refreshToken",
                                "type": "String",
                                "description": "The refresh token."
                            },
                            {
                                "name": "request",
                                "type": "GlideOAuthClientRequest",
                                "description": "The request."
                            }
                        ],
                        "return": {
                            "type": "GlideOAuthClientResponse",
                            "description": "The token for the client."
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "This API can be used in global and scoped scripts. In scoped scripts us the\n        <span class=\"keyword parmname\">sn_auth</span> namespace identifier.",
                "short_description": "Use these methods for handling OAuth client requests.",
                "identifier": "c_OAuthGlideOAuthClientRequest",
                "name": "GlideOAuthClientRequest - Scoped, Global",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "r_GlideOAuthClientGetGrantType",
                        "short_description": "Retrieves the grant type.",
                        "description": "",
                        "name": "getGrantType()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The grant type."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_GlideOAuthClientRequestGetHeader",
                        "short_description": "Retrieves the HTTP headers for the string you provide.",
                        "description": "",
                        "name": "getHeader(String name)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "name",
                                "type": "String",
                                "description": "The name of the parameter."
                            }
                        ],
                        "return": {
                            "type": "StringMap",
                            "description": "The string map with the HTTP headers."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_GlideOAuthClientRequestGetHeaders",
                        "short_description": "Retrieves the HTTP headers.",
                        "description": "",
                        "name": "getHeaders()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "StringMap",
                            "description": "The string map with the HTTP headers."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_GlideOAuthClientRequestGetParameter",
                        "short_description": "Retrieves the parameters for the parameter name you provide.",
                        "description": "",
                        "name": "getParameter(String name)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "name",
                                "type": "String",
                                "description": "The parameter name for which you want the parameters."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "The parameters."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_GlideOAuthClientGetPassword",
                        "short_description": "Retrieves the password.",
                        "description": "",
                        "name": "getPassword()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The password."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_GlideOAuthClientGetRefreshToken",
                        "short_description": "Retrieves the refresh token.",
                        "description": "",
                        "name": "getRefreshToken()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The refresh token."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_GlideOAuthClientGetScope",
                        "short_description": "Retrieves the scope.",
                        "description": "",
                        "name": "getScope()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The scope."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_GlideOAuthClientGetUserName",
                        "short_description": "Retrieves the user name.",
                        "description": "",
                        "name": "getUserName()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The user name."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_GlideOAuthClientSetGrantType",
                        "short_description": "Sets the grant type for the string you provide.",
                        "description": "<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> You only need to set the grant type if it is not already defined in the OAuth provider\n          profile. </div></p>",
                        "name": "setGrantType(String grantType)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "name",
                                "type": "String",
                                "description": "The grant type."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_GlideOAuthClientRequestSetHead",
                        "short_description": "Retrieves the HTTP headers for the string you provide.",
                        "description": "",
                        "name": "setHead(String name, String value)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "name",
                                "type": "String",
                                "description": "The name of the parameter."
                            },
                            {
                                "name": "value",
                                "type": "String",
                                "description": "The value of the parameter."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_GlideOAuthClientRequestSetParametersNameValue",
                        "short_description": "Sets the parameters for the name:value pair of strings you provide.",
                        "description": "",
                        "name": "setParameter(String name, String value)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "name",
                                "type": "String",
                                "description": "The parameter name for which you want the parameters."
                            },
                            {
                                "name": "value",
                                "type": "String",
                                "description": "The value of the parameter."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_GlideOAuthClientSetPassword",
                        "short_description": "Sets the password with the string you provide.",
                        "description": "",
                        "name": "setPassword(String password)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "password",
                                "type": "String",
                                "description": "The user name."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_GlideOAuthClientSetRefreshToken",
                        "short_description": "Sets the refresh token with the string you provide.",
                        "description": "",
                        "name": "setRefreshToken(String refreshToken)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "\n     var tokenRequest =new GlideOAuthClientRequest();\n     tokenRequest.setGrantType(\"password\");\n     tokenRequest.setUserName(\"itil\");\n     tokenRequest.setPassword(\"itil\");\n     tokenRequest.setScope(null);\n \n     var oAuthClient =new GlideOAuthClient();var tokenResponse = oAuthClient.requestToken(\"TestClient\", tokenRequest);\n     gs.log(\"Error:\"+ tokenResponse.getErrorMessage());\n \n     var token = tokenResponse.getToken();if(token){\n       gs.log(\"AccessToken:\"+ token.getAccessToken());\n       gs.log(\"AccessTokenExpiresIn:\"+ token.getExpiresIn());\n       gs.log(\"RefreshToken:\"+ token.getRefreshToken());\n",
                                "description": "This example shows a resource owner password grant type request."
                            }
                        ],
                        "params": [
                            {
                                "name": "refreshToken",
                                "type": "String",
                                "description": "The refresh token."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_GlideOAuthClientSetScope",
                        "short_description": "Sets the scope for the string you provide.",
                        "description": "<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> You only need to set the scope if it is not already defined in the OAuth\n          provider.</div></p>",
                        "name": "setScope(String scope)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "scope",
                                "type": "String",
                                "description": "The scope."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_GlideOAuthClientSetUserName",
                        "short_description": "Sets the user name with the string you provide.",
                        "description": "",
                        "name": "setUserName(String userName)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "userName",
                                "type": "String",
                                "description": "The user name."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "This API can be used in global and scoped scripts. In scoped scripts us the\n                <span class=\"keyword parmname\">sn_auth</span> namespace identifier.",
                "short_description": "Use these methods for handling OAuth client responses.",
                "identifier": "c_OAuthGlideOAuthClientResponse",
                "name": "GlideOAuthClientResponse - Scoped, Global",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "r_GlideOAuthClientResponseGetBody",
                        "short_description": "Retrieves all of the response information, including instance information.",
                        "description": "",
                        "name": "getBody()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The response information."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_GlideOAuthClientResponseGetContentType",
                        "short_description": "Retrieves the HTTP response content header from an external OAuth provider.",
                        "description": "",
                        "name": "getContentType()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The HTTP response header."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_GlideOAuthClientResponseGetErrorMessage",
                        "short_description": "Retrieves the error message if authentication is not successful.",
                        "description": "",
                        "name": "getErrorMessage()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The error message."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_GlideOAuthClientResponseGetResponseCode",
                        "short_description": "Retrieves the HTTP response code from the external OAuth provider.",
                        "description": "",
                        "name": "getResponseCode()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The HTTP response code."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_GlideOAuthClientResponseGetResponseParameters",
                        "short_description": "Retrieves the error message if authentication is not successful.",
                        "description": "",
                        "name": "getResponseParameters()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "MapString",
                            "description": "The response content."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_GlideOAuthClientResponseGetToken",
                        "short_description": "Retrieves the refresh token.",
                        "description": "",
                        "name": "getToken()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "GlideOAuthToken",
                            "description": "The refresh token."
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "This API can be used in global and scoped scripts. In scoped scripts use the\n    <span class=\"keyword parmname\">sn_auth</span> namespace identifier.",
                "short_description": "Use the <span class=\"keyword apiname\">GlideOAuthToken</span> methods for retrieving OAuth access token and\n  information about the access token.",
                "identifier": "c_OAuthGlideOAuthToken",
                "name": "GlideOAuthToken - Scoped, Global",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "r_GlideOAuthTokenGetAccessToken",
                        "short_description": "Retrieves the access token associated with the GlideOAuthToken object.",
                        "description": "",
                        "name": "getAccessToken()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "Access token."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_GlideOAuthTokenGetAccessTokenSysID",
                        "short_description": "Retrieves the sys_id of the token ID associated with the GlideOAuthToken\n    object.",
                        "description": "",
                        "name": "getAccessTokenSysID()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "Sys_id of the access token."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_GlideOAuthTokenGetExpiresIn",
                        "short_description": "Retrieves the lifespan of the access token associated with the GlideOAuthToken\n    object.",
                        "description": "",
                        "name": "getExpiresIn()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "Number (Long)",
                            "description": "Lifespan of the token.<p class=\"p\">Unit: Seconds</p>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_GlideOAuthTokenGetRefreshToken",
                        "short_description": "Refreshes the token associated with the GlideOAuthToken object.",
                        "description": "",
                        "name": "getRefreshToken()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "Refreshed token."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_GlideOAuthTokenGetRefreshTokenSysID",
                        "short_description": "Retrieves the sys_id of the refresh token.",
                        "description": "",
                        "name": "getRefreshTokenSysID()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "Sys_id of the refresh token."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_GlideOAuthTokenGetScope",
                        "short_description": "Retrieves the token scope, which is the amount of access granted by the access\n    token.",
                        "description": "",
                        "name": "getScope()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "Scope of the access token."
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "Generate outbound signing requests using these APIs in the following\n         order:<ol class=\"ol\" id=\"HttpRequestAuthedDataAPI__d86789e64\">\n         <li class=\"li\"><span class=\"keyword apiname\">HttpRequestData</span>: Build the API request.</li>\n\n         <li class=\"li\"><span class=\"keyword apiname\">AuthCredential</span>: Create a credential object or update an existing\n          one. Use the credential to sign the request through the <span class=\"keyword apiname\">RequestAuthAPI</span>\n          class. </li>\n\n         <li class=\"li\"><span class=\"keyword apiname\">RequestAuthAPI</span>: Sign the request and return an HttpRequestAuthedData\n          object.</li>\n\n         <li class=\"li\"><span class=\"keyword apiname\">HttpRequestAuthedData</span>: Get information about the signed\n          request.</li>\n\n         <li class=\"li\"><span class=\"keyword apiname\">GlideHTTPRequest</span>: Send the signed request.</li>\n\n        </ol><br/><br/><span class=\"ph\">Before using these APIs, you must <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-servicenow-platform/page/product/credentials/task/configure-authentication-algorithm.html\" target=\"_blank\">configure an authentication\n         algorithm</a> to sign the request and associate it with the credential used to\n        authenticate the request.</span><br/><br/>Use this API in scoped scripts with the <span class=\"keyword parmname\">sn_auth</span> namespace identifier.\n        <span class=\"ph\">You can instantiate this class using the constructor, or you\n        can return an HttpRequestAuthedData object from the <span class=\"keyword apiname\">generateAuth()</span> method\n        in the <span class=\"keyword apiname\">RequestAuthAPI</span> class.</span>",
                "short_description": "The <span class=\"keyword apiname\">HttpRequestAuthedData()</span> API provides methods to access and set\n    values in a signed REST request.",
                "identifier": "HttpRequestAuthedDataAPI",
                "name": "HttpRequestAuthedData",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "HRAD-HttpRequestAuthedData",
                        "short_description": "Instantiates an HttpRequestAuthedData object.",
                        "description": "<p><span class=\"ph\">You can instantiate this class using the constructor, or you\n        can return an HttpRequestAuthedData object from the <span class=\"keyword apiname\">generateAuth()</span> method\n        in the <span class=\"keyword apiname\">RequestAuthAPI</span> class.</span></p>",
                        "name": "HttpRequestAuthedData()",
                        "type": "Constructor",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "HRAD-addHeader_S_S",
                        "short_description": "Adds a header to the HttpRequestAuthedData object.",
                        "description": "",
                        "name": "addHeader(String key, String value)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "// Define HttpRequestData\nvar endpoint= \"https://third-party-endpointâ;\nvar httpRequestData = new sn_auth.HttpRequestData();\nhttpRequestData.setEndpoint(endpoint);\nhttpRequestData.setService(âs3â);\nhttpRequestData.setRegion(âus-east-1â);\nhttpRequestData.setHttpMethod(âPUTâ);\nvar content = âAction=SendMessage&amp;MessageBody=This is a test messageâ;\nhttpRequestData.setContent(content);\n \n//Get AuthCredential\nvar credential = new sn_cc.StandardCredentialsProvider().getAuthCredentialByID(\"5b61c16f73533300f662cff8faf6a74b\");\n \n// Create RequestAuthAPI and sign the request\nvar signingAPI = new sn_auth.RequestAuthAPI(httpRequestData, credential);\nvar output = signingAPI.generateAuth();\n \n// Update the signed response\noutput.addHeader(âaccess-rightsâ, âpublic-readâ);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "key",
                                "type": "String",
                                "description": "Name of the HTTP header."
                            },
                            {
                                "name": "value",
                                "type": "String",
                                "description": "Value of the HTTP Header."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "HRAD-addQueryParam_S_S",
                        "short_description": "Adds a query parameter to the HttpRequestAuthedData object.",
                        "description": "",
                        "name": "addQueryParam(String key, String value)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "// Define HttpRequestData\nvar endpoint= \"https://third-party-endpointâ;\nvar httpRequestData = new sn_auth.HttpRequestData();\nhttpRequestData.setEndpoint(endpoint);\nhttpRequestData.setService(âs3â);\nhttpRequestData.setRegion(âus-east-1â);\nhttpRequestData.setHttpMethod(âPUTâ);\nvar content = âAction=SendMessage&amp;MessageBody=This is a test messageâ;\nhttpRequestData.setContent(content);\n \n//Get AuthCredential\nvar credential = new sn_cc.StandardCredentialsProvider().getAuthCredentialByID(\"5b61c16f73533300f662cff8faf6a74b\");\n \n// Create RequestAuthAPI and sign the request\nvar signingAPI = new sn_auth.RequestAuthAPI(httpRequestData, credential);\nvar output = signingAPI.generateAuth();\n \n// Update the signed response\noutput.addQueryParameter(âapi_versionâ, âv2â);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "key",
                                "type": "String",
                                "description": "Name of the query parameter."
                            },
                            {
                                "name": "value",
                                "type": "String",
                                "description": "Value of the query parameter."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "HRAD-getDirective",
                        "short_description": "Returns whether the signature is applied to the request in the header or as a query\n    parameter.",
                        "description": "<p>By default, the system applies the signature to the header. You can apply the signature as\n        a query parameter using the <span class=\"keyword apiname\">setDirective()</span> API.</p>",
                        "name": "getDirective()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "// Define HttpRequestData\nvar endpoint= \"https://third-party-endpointâ;\nvar httpRequestData = new sn_auth.HttpRequestData();\nhttpRequestData.setEndpoint(endpoint);\nhttpRequestData.setService(âs3â);\nhttpRequestData.setRegion(âus-east-1â);\nhttpRequestData.setHttpMethod(âPUTâ);\nvar content = âAction=SendMessage&amp;MessageBody=This is a test messageâ;\nhttpRequestData.setContent(content);\n \n//Get AuthCredential\nvar credential = new sn_cc.StandardCredentialsProvider().getAuthCredentialByID(\"5b61c16f73533300f662cff8faf6a74b\");\n \n// Create RequestAuthAPI and sign the request\nvar signingAPI = new sn_auth.RequestAuthAPI(httpRequestData, credential);\nvar output = signingAPI.generateAuth();\noutput.setDirective(\"header\");\n\ngs.info(\"Signature applied to: \" + output.getDirective());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "Whether the signature is applied to the header or as a query parameter.\n                  <p class=\"p\">Values include: </p>\n<ul class=\"ul\" id=\"HRAD-getDirective__ul_xdw_v5b_5jb\">\n                  <li class=\"li\">HEADER: The signature is applied to the request header.</li>\n\n                  <li class=\"li\">QUERY: The signature is applied as a query parameter.</li>\n\n                </ul>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "HRAD-getHeaderMap",
                        "short_description": "Returns an object containing the headers that were included when the request was\n    signed.",
                        "description": "",
                        "name": "getHeaderMap()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "// Define the HttpRequestData object\nvar endpoint= \"https://third-party-endpoint\";\nvar httpRequestData = new sn_auth.HttpRequestData();\nhttpRequestData.setEndpoint(endpoint);\nhttpRequestData.setService(âs3â);\nhttpRequestData.setRegion(âus-east-1â);\nhttpRequestData.setHttpMethod(âPUTâ);\nvar content = âAction=SendMessage&amp;MessageBody=This is a test messageâ;\nhttpRequestData.setContent(content);\nhttpRequestData.addHeader(âx-amz-aclâ , âpublic-readâ );\n \n// Get an AuthCredential object\nvar credential = new sn_cc.StandardCredentialsProvider().getAuthCredentialByID(\"5b61c16f73533300f662cff8faf6a74b\");\n \n// Create the RequestAuthAPI object and sign the request\nvar signingAPI = new sn_auth.RequestAuthAPI(httpRequestData, credential);\nvar output = signingAPI.generateAuth();\n \n// get the signed response detail\nvar authH = headerM[\"Authorization\"];\nvar xamzdateH = headerM[\"X-Amz-Date\"];\nvar content256 = headerM[\"x-amz-content-sha256\"];\n \ngs.debug(âauthH:â + authH );\ngs.debug(âxamzdateH:â + xamzdateH );\ngs.debug(âcontent256:â + content256 );\n",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Object",
                            "description": "Key-value pairs that define all of the headers included when the request was\n                signed. Each key-value pair includes these parts:<ul class=\"ul\" id=\"HRAD-getHeaderMap__ul_adn_4qh_5jb\">\n                  <li class=\"li\">key: String. Name of the header.</li>\n\n                  <li class=\"li\">value: String. Value of the header.</li>\n\n                </ul>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "HRAD-getQueryMap",
                        "short_description": "Returns an object containing the query parameters included when the request was\n    signed.",
                        "description": "",
                        "name": "getQueryMap()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "// Define the HttpRequestData object\nvar endpoint= \"https://third-party-endpoint\";\nvar httpRequestData = new sn_auth.HttpRequestData();\nhttpRequestData.setEndpoint(endpoint);\nhttpRequestData.setService(âs3â);\nhttpRequestData.setRegion(âus-east-1â);\nhttpRequestData.setHttpMethod(âPUTâ);\nvar content = âAction=SendMessage&amp;MessageBody=This is a test messageâ;\nhttpRequestData.setContent(content);\nhttpRequestData.addQueryParam(âapi_versionâ, âv2â );\nhttpRequestData.addQueryParam(âlimitâ, â1000â );\nhttpRequestData.addQueryParam(âoffsetâ, â1â );\n \n// Get an AuthCredential object\nvar credential = new sn_cc.StandardCredentialsProvider().getAuthCredentialByID(\"5b61c16f73533300f662cff8faf6a74b\");\n \n// Create the RequestAuthAPI object and sign the request\nvar signingAPI = new sn_auth.RequestAuthAPI(httpRequestData, credential);\nvar output = signingAPI.generateAuth();\n \n// Get the signed response\nqueryMap = output.getQueryMap();\n\ngs.info(\"API Version is: \" + queryMap[\"api_version\"]);",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Object",
                            "description": "Key-value pairs that define the query parameters included when the request was\n                signed. Each key-value pair includes these parts:<ul class=\"ul\" id=\"HRAD-getQueryMap__ul_adn_4qh_5jb\">\n                  <li class=\"li\">key: String. Name of the query parameter.</li>\n\n                  <li class=\"li\">value: String. Value of the query parameter.</li>\n\n                </ul>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "HRAD-getStatus",
                        "short_description": "Returns the status of the request signing.",
                        "description": "",
                        "name": "getStatus()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "// Define the HttpRequestData object\nvar endpoint= \"https://third-party-endpoint\";\nvar httpRequestData = new sn_auth.HttpRequestData();\nhttpRequestData.setEndpoint(endpoint);\nhttpRequestData.setService(âs3â);\nhttpRequestData.setRegion(âus-east-1â);\nhttpRequestData.setHttpMethod(âPUTâ);\nvar content = âAction=SendMessage&amp;MessageBody=This is a test messageâ;\nhttpRequestData.setContent(content);\n \n// Get an AuthCredential object\nvar credential = new sn_cc.StandardCredentialsProvider().getAuthCredentialByID(\"5b61c16f73533300f662cff8faf6a74b\");\n \n// Create the RequestAuthAPI object and sign the request\nvar signingAPI = new sn_auth.RequestAuthAPI(httpRequestData, credential);\nvar output = signingAPI.generateAuth();\n \n// Get the signed status\ngs.info(\"Status is: \" + output.getStatus());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The status of the request signing. <p class=\"p\">Possible values:</p>\n<ul class=\"ul\" id=\"HRAD-getStatus__ul_kfj_1f1_wjb\">\n                  <li class=\"li\">SUCCESS: The system successfully signed the request.</li>\n\n                  <li class=\"li\">FAIL: The system failed to sign the request. </li>\n\n                  <li class=\"li\">SKIPPED: The system skipped signing because the information was incomplete.\n                  </li>\n\n                </ul>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "HRAD-getStatusMessage",
                        "short_description": "Returns a detailed message about the request signing. If the request signing fails,\n    this method returns the error message.",
                        "description": "",
                        "name": "getStatusMessage()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "// Define the HttpRequestData object\nvar endpoint= \"https://third-party-endpoint\";\nvar httpRequestData = new sn_auth.HttpRequestData();\nhttpRequestData.setEndpoint(endpoint);\nhttpRequestData.setService(âs3â);\nhttpRequestData.setRegion(âus-east-1â);\nhttpRequestData.setHttpMethod(âPUTâ);\nvar content = âAction=SendMessage&amp;MessageBody=This is a test messageâ;\nhttpRequestData.setContent(content);\nhttpRequestData.addQueryParam(âapi_versionâ, âv2â );\nhttpRequestData.addQueryParam(âlimitâ, â1000â );\nhttpRequestData.addQueryParam(âoffsetâ, â1â );\n \n// Get AuthCredential object and set an attribute\nvar credential = new sn_auth.AuthCredential();\ncredential.setAttribute(\"user_name\", \"admin\");\ncredential.setAttribute(\"password\", \"admin\");\n \n// Create the RequestAuthAPI object and sign the request\nvar signingAPI = new sn_auth.RequestAuthAPI(httpRequestData, credential);\nvar output = signingAPI.generateAuth();\n \n// Get the signed status\ngs.info(\"Status message is: \" + output.getStatusMessage());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "Message about the request signing. If the request signing fails, returns one of\n                these error messages:<ul class=\"ul\" id=\"HRAD-getStatusMessage__ul_vj2_ll1_wjb\">\n                  <li class=\"li\"><samp class=\"ph systemoutput\">credential is not valid</samp>: Check the AuthCredential\n                    object you used to sign the request. Make sure an authentication algorithm is\n                    associated with the credential. For more information, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-servicenow-platform/page/product/credentials/task/configure-authentication-algorithm.html\" target=\"_blank\">Configure an\n                      authentication algorithm</a>.</li>\n\n                  <li class=\"li\"><samp class=\"ph systemoutput\">Request data is empty. Request auth is skipped</samp>:\n                    Check the HttpRequestData object because required information may be missing. </li>\n\n                  <li class=\"li\"><samp class=\"ph systemoutput\">Can't find script includes scope</samp>: Verify that the\n                    authentication algorithm record and associated script includes used to sign the\n                    request are in the correct scope.</li>\n\n                </ul>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "HRAD-setDirective_S",
                        "short_description": "Defines whether to apply the signature to the signed request in the header or as a\n    query parameter.",
                        "description": "",
                        "name": "setDirective(String directive)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "// Define HttpRequestData\nvar endpoint= \"https://third-party-endpointâ;\nvar httpRequestData = new sn_auth.HttpRequestData();\nhttpRequestData.setEndpoint(endpoint);\nhttpRequestData.setService(âs3â);\nhttpRequestData.setRegion(âus-east-1â);\nhttpRequestData.setHttpMethod(âPUTâ);\nvar content = âAction=SendMessage&amp;MessageBody=This is a test messageâ;\nhttpRequestData.setContent(content);\n \n//Get AuthCredential\nvar credential = new sn_cc.StandardCredentialsProvider().getAuthCredentialByID(\"5b61c16f73533300f662cff8faf6a74b\");\n \n// Create RequestAuthAPI and sign the request\nvar signingAPI = new sn_auth.RequestAuthAPI(httpRequestData, credential);\nvar output = signingAPI.generateAuth();\noutput.setDirective(\"header\");\n",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "directive",
                                "type": "String",
                                "description": "Whether to apply the signature to the header or as a query parameter of the\n                signed request. <p class=\"p\">Values include:</p>\n<ul class=\"ul\" id=\"HRAD-setDirective_S__ul_w2m_lzb_5jb\">\n                  <li class=\"li\"><samp class=\"ph codeph\">query</samp>: Applies signature as a query parameter.</li>\n\n                  <li class=\"li\"><samp class=\"ph codeph\">header</samp>: Applies signature to the request header.</li>\n\n                </ul>"
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "HRAD-setStatus_S",
                        "short_description": "Sets the status of the request signing.",
                        "description": "",
                        "name": "setStatus(String status)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "// Define the HttpRequestData object\nvar endpoint= \"https://third-party-endpoint\";\nvar httpRequestData = new sn_auth.HttpRequestData();\nhttpRequestData.setEndpoint(endpoint);\nhttpRequestData.setService(âs3â);\nhttpRequestData.setRegion(âus-east-1â);\nhttpRequestData.setHttpMethod(âPUTâ);\nvar content = âAction=SendMessage&amp;MessageBody=This is a test messageâ;\nhttpRequestData.setContent(content);\n \n// Get an AuthCredential object\nvar credential = new sn_cc.StandardCredentialsProvider().getAuthCredentialByID(\"5b61c16f73533300f662cff8faf6a74b\");\n \n// Create the RequestAuthAPI object and sign the request\nvar signingAPI = new sn_auth.RequestAuthAPI(httpRequestData, credential);\nvar output = signingAPI.generateAuth();\noutput.setStatus(\"fail\");\n \n// Get the signed status\ngs.info(\"Status is: \" + output.getStatus());",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "status",
                                "type": "String",
                                "description": "The status of the request signing. <p class=\"p\">Possible values:</p>\n<ul class=\"ul\" id=\"HRAD-setStatus_S__ul_nbg_jr1_wjb\">\n                  <li class=\"li\"><samp class=\"ph codeph\">success</samp>: The system successfully signed the request.</li>\n\n                  <li class=\"li\"><samp class=\"ph codeph\">fail</samp>: The system failed to sign the request. </li>\n\n                  <li class=\"li\"><samp class=\"ph codeph\">skipped</samp>: The system skipped signing because the information\n                    was incomplete. </li>\n\n                </ul>"
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "HRAD-setStatusMessage_S",
                        "short_description": "Sets a status message for the request signing.",
                        "description": "",
                        "name": "setStatusMessage(String statusMessage)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "// Define the HttpRequestData object\nvar endpoint= \"https://third-party-endpoint\";\nvar httpRequestData = new sn_auth.HttpRequestData();\nhttpRequestData.setEndpoint(endpoint);\nhttpRequestData.setService(âs3â);\nhttpRequestData.setRegion(âus-east-1â);\nhttpRequestData.setHttpMethod(âPUTâ);\nvar content = âAction=SendMessage&amp;MessageBody=This is a test messageâ;\nhttpRequestData.setContent(content);\n \n// Get an AuthCredential object\nvar credential = new sn_cc.StandardCredentialsProvider().getAuthCredentialByID(\"5b61c16f73533300f662cff8faf6a74b\");\n \n// Create the RequestAuthAPI object and sign the request\nvar signingAPI = new sn_auth.RequestAuthAPI(httpRequestData, credential);\nvar output = signingAPI.generateAuth();\noutput.setStatusMessage(\"The request was successfully signed.\");\n \n// Get the signed status message\ngs.info(\"Status message is: \" + output.getStatusMessage());",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "statusMessage",
                                "type": "String",
                                "description": "Message to set for the request signing status."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "Generate outbound signing requests using these APIs in the following\n         order:<ol class=\"ol\" id=\"HttpRequestDataAPI__d86857e64\">\n         <li class=\"li\"><span class=\"keyword apiname\">HttpRequestData</span>: Build the API request.</li>\n\n         <li class=\"li\"><span class=\"keyword apiname\">AuthCredential</span>: Create a credential object or update an existing\n          one. Use the credential to sign the request through the <span class=\"keyword apiname\">RequestAuthAPI</span>\n          class. </li>\n\n         <li class=\"li\"><span class=\"keyword apiname\">RequestAuthAPI</span>: Sign the request and return an HttpRequestAuthedData\n          object.</li>\n\n         <li class=\"li\"><span class=\"keyword apiname\">HttpRequestAuthedData</span>: Get information about the signed\n          request.</li>\n\n         <li class=\"li\"><span class=\"keyword apiname\">GlideHTTPRequest</span>: Send the signed request.</li>\n\n        </ol><br/><br/><span class=\"ph\">Before using these APIs, you must <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-servicenow-platform/page/product/credentials/task/configure-authentication-algorithm.html\" target=\"_blank\">configure an authentication\n         algorithm</a> to sign the request and associate it with the credential used to\n        authenticate the request.</span><br/><br/>Use this API in scoped scripts with the <span class=\"keyword parmname\">sn_auth</span> namespace identifier.\n      You can instantiate this class using the constructor, or you can return an HttpRequestData\n      object from the <span class=\"keyword apiname\">getHttpRequestData()</span> method in the\n        <span class=\"keyword apiname\">RequestAuthAPI</span> class.",
                "short_description": "The <span class=\"keyword apiname\">HttpRequestData</span> API provides methods to build and manipulate a\n    REST request before applying a signature and sending it to an endpoint.",
                "identifier": "HttpRequestDataAPI",
                "name": "HttpRequestData",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "HttpRD-HttpRD",
                        "short_description": "Instantiates an HttpRequestData object.",
                        "description": "",
                        "name": "HttpRequestData()",
                        "type": "Constructor",
                        "examples": [
                            {
                                "script": "var httpRequestData = new sn_auth.HttpRequestData();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "HttpRD-addHeader_S_S",
                        "short_description": "Adds a header to the HttpRequestData object.",
                        "description": "",
                        "name": "addHeader(String key String value)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var endpoint= \"https://s3.amazonaws.com\";\nvar httpRequestData = new sn_auth.HttpRequestData();\nhttpRequestData.setEndpoint(endpoint);\nhttpRequestData.setService('s3');\nhttpRequestData.setRegion('us-east-1');\nhttpRequestData.setHttpMethod(\"PUT\");\nvar content = \"Action=SendMessage&amp;MessageBody=This is a test message\";\nhttpRequestData.setContent(content);\nhttpRequestData.addHeader('x-amz-acl', 'public-read' );",
                                "description": "This example creates a REST request payload."
                            }
                        ],
                        "params": [
                            {
                                "name": "key",
                                "type": "String",
                                "description": "Name of the HTTP header."
                            },
                            {
                                "name": "value",
                                "type": "String",
                                "description": "Value of the HTTP Header."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "HttpRD-addQueryParam_S_S",
                        "short_description": "Adds a query parameter to the HttpRequestData object.",
                        "description": "",
                        "name": "addQueryParam(String key, String value)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var endpoint= \"https://third-party-endpoint\";\nvar httpRequestData = new sn_auth.HttpRequestData();\nhttpRequestData.setEndpoint(endpoint);\nhttpRequestData.setService('s3');\nhttpRequestData.setRegion('us-east-1');\nhttpRequestData.setHttpMethod('put');\nvar content = \"Action=SendMessage&amp;MessageBody=This is a test message\";\nhttpRequestData.setContent(content);\nhttpRequestData.addQueryParam('api_version', 'v2 );\nâ",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "key",
                                "type": "String",
                                "description": "Name of the query parameter."
                            },
                            {
                                "name": "value",
                                "type": "String",
                                "description": "Value of the query parameter."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "HttpRD-deleteHeader_S",
                        "short_description": "Removes a header from the HttpRequestData object.",
                        "description": "",
                        "name": "deleteHeader(String key)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var endpoint= \"https://s3.amazonaws.com\";\nvar httpRequestData = new sn_auth.HttpRequestData();\nhttpRequestData.setEndpoint(endpoint);\nhttpRequestData.setService('s3');\nhttpRequestData.setRegion('us-east-1');\nhttpRequestData.setHttpMethod('put');\nvar content = \"Action=SendMessage&amp;MessageBody=This is a test message\";\nhttpRequestData.setContent(content);\nhttpRequestData.deleteHeader('x-amz-acl');",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "key",
                                "type": "String",
                                "description": "Name of the HTTP header to remove."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "HttpRD-getConnectionAliasID",
                        "short_description": "Returns the sys_id of the Connection & Credential alias associated with the <span class=\"ph\">IntegrationHub</span> REST step.",
                        "description": "<p>You can pass the sys_id to the <span class=\"keyword apiname\">ConnectionInfoProvider</span> API to retrieve\n        information about the connection.<div class=\"note note\"><span class=\"notetitle\">Note:</span> <span class=\"ph\">You can only use this method in an <span class=\"ph\">IntegrationHub</span>\n        REST step. For more information, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-servicenow-platform/page/administer/flow-designer/reference/rest-request-action-designer-2.html\" target=\"_blank\">REST step</a>.</span></div></p>",
                        "name": "getConnectionAliasID()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var httpRequestData = new sn_auth.HttpRequestData();\nvar id = httpRequestData.getConnectionAliasID();\n \nvar credential = new sn_cc.ConnectionInfoProvider().\nvar connectionInfo = credential.getConnectionInfo(id);",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "Sys_id of the alias record from the Connection & Credential Aliases\n                [sys_alias] table associated with the request."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "HttpRD-getConnectionExtendedAttribute_S",
                        "short_description": "Returns the value of a connection attribute associated with the Connection &\n    Credential alias associated with <span class=\"ph\">IntegrationHub</span> REST step.",
                        "description": "<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> <span class=\"ph\">You can only use this method in an <span class=\"ph\">IntegrationHub</span>\n        REST step. For more information, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-servicenow-platform/page/administer/flow-designer/reference/rest-request-action-designer-2.html\" target=\"_blank\">REST step</a>.</span></div></p><p>For more information about connection attributes, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-servicenow-platform/page/product/credentials/task/create-connection-attributes.html\" target=\"_blank\">Create connection attributes for\n          IntegrationHub</a>.</p>",
                        "name": "getConnectionExtendedAttribute(String name)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var httpRequestData = new sn_auth.HttpRequestData();â\ngs.info(\"API Version is: \" + httpRequestData.getConnectionExtendedAttribute('api_version'));",
                                "description": "This example returns the value of a connection attribute set on the Connection &\n        Credential alias associated with the REST step."
                            }
                        ],
                        "params": [
                            {
                                "name": "name",
                                "type": "String",
                                "description": "Name of the connection attribute."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "Value of the connection attribute."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "HttpRD-getContent",
                        "short_description": "Returns the content of the request in the HttpRequestData object.",
                        "description": "",
                        "name": "getContent()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var endpoint= \"https://s3.amazonaws.comâ;\nvar httpRequestData = new sn_auth.HttpRequestData();\nhttpRequestData.setEndpoint(endpoint);\nhttpRequestData.setService('s3');\nhttpRequestData.setRegion('us-east-1');\nhttpRequestData.setHttpMethod('put');\nvar content = âAction=SendMessage&amp;MessageBody=This is a test messageâ;\nhttpRequestData.setContent(content);\nhttpRequestData.addHeader(âx-amz-aclâ , âpublic-readâ );\nvar ct = httpRequestData.getContent();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "Content of the request."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "HttpRD-getDate",
                        "short_description": "Returns the date when the request was signed.",
                        "description": "",
                        "name": "getDate()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var endpoint= \"https://s3.amazonaws.com\";â\nvar httpRequestData = new sn_auth.HttpRequestData();â\nhttpRequestData.setEndpoint(endpoint);â\nhttpRequestData.addQueryParam(\"list-type\", \"2\");â\nhttpRequestData.setService('s3');â\nhttpRequestData.setHttpMethod('get');â\n\ngs.info( \"Date: \" + httpRequestData.getDate());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Number",
                            "description": "The difference between January 1, 1970 UTC and when the request was\n                  signed.<p class=\"p\">Unit: Milliseconds</p>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "HttpRD-getDirective",
                        "short_description": "Returns whether the signature is applied to the request in the header or as a query\n    parameter.",
                        "description": "<p>By default, the system applies the signature to the header. You can apply the signature as\n        a query parameter using the <span class=\"keyword apiname\">setDirective()</span> API.</p>",
                        "name": "getDirective()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var endpoint= \"https://s3.amazonaws.comâ;â\nvar httpRequestData = new sn_auth.HttpRequestData();â\nhttpRequestData.setEndpoint(endpoint);â\nhttpRequestData.addQueryParam(\"list-type\", \"2\");â\nhttpRequestData.setService('s3');â\nhttpRequestData.setHttpMethod('get');â\n\ngs.info( \"Signature applied to: \" + httpRequestData.getDirective() );",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "Whether the signature is applied to the header or as a query parameter.\n                  <p class=\"p\">Values include:</p>\n<ul class=\"ul\" id=\"HttpRD-getDirective__ul_xdw_v5b_5jb\">\n                  <li class=\"li\">HEADER: The signature is applied to the request header.</li>\n\n                  <li class=\"li\">QUERY: The signature is applied as a query parameter.</li>\n\n                </ul>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "HttpRD-getEndpoint",
                        "short_description": "Returns the endpoint set for the request.",
                        "description": "",
                        "name": "getEndpoint()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var endpoint= \"https://s3.amazonaws.com\";â\nvar httpRequestData = new sn_auth.HttpRequestData();â\nhttpRequestData.setEndpoint(endpoint);â\nhttpRequestData.addQueryParam(\"list-type\", \"2\");â\nhttpRequestData.setService('s3');â\nhttpRequestData.setHttpMethod('get');â\nhttpRequestData.setDirective(\"query\");â\nâ\ngs.info( \"Endpoint is: \" + httpRequestData.getEndpoint() );",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "Endpoint set for the request."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "HttpRD-getExpiry",
                        "short_description": "Returns the time in seconds before the signature expires starting when the request was\n    signed using the <span class=\"keyword apiname\">generateAuth()</span> method in the\n      <span class=\"keyword apiname\">RequestAuthAPI</span> class.",
                        "description": "<p><span class=\"ph\">The expiration is commonly set by the third-party service you are\n        sending the request to, which overrides any value set by the <span class=\"keyword apiname\">setExpiry()</span>\n        method. For example, if the expiration is set to 900 seconds by the third-party service and\n        you use the <span class=\"keyword apiname\">setExpiry()</span> method to set the expiration to 300 seconds, the\n         <span class=\"keyword apiname\">getExpiry()</span> method returns 900 seconds.</span></p>",
                        "name": "getExpiry()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var endpoint= \"https://s3.amazonaws.com\";â\nvar httpRequestData = new sn_auth.HttpRequestData();â\nhttpRequestData.setEndpoint(endpoint);â\nhttpRequestData.addQueryParam(\"list-type\", \"2\");â\nhttpRequestData.setService('s3');â\nhttpRequestData.setHttpMethod('get');â\nhttpRequestData.setDirective(\"query\");â\nhttpRequestData.setExpiry(300);\n\ngs.info(\"Signature expires in: \" + httpRequestData.getExpiry());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Number",
                            "description": "Time before the signature expires.<p class=\"p\">Unit: Seconds</p>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "HttpRD-getHeader_S",
                        "short_description": "Returns the value associated with the given HTTP header.",
                        "description": "",
                        "name": "getHeader(String key)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var endpoint= \"https://third-party-endpoint\";\nvar httpRequestData = new sn_auth.HttpRequestData();\nhttpRequestData.setEndpoint(endpoint);\nhttpRequestData.setService('s3');\nhttpRequestData.setRegion('us-east-1');\nhttpRequestData.setHttpMethod('put');\nvar content = \"Action=SendMessage&amp;MessageBody=This is a test message\";\nhttpRequestData.setContent(content);\nhttpRequestData.addHeader(âx-amz-aclâ, âpublic-readâ );\nâ\n\ngs.info( \"Header value is: \" + httpRequestData.getHeader(âx-amz-aclâ) );",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "key",
                                "type": "String",
                                "description": "Name of HTTP header."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "Value of the given HTTP header."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "HttpRD-getHeaderMap",
                        "short_description": "Returns an object containing the headers included in the request.",
                        "description": "",
                        "name": "getHeaderMap()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var endpoint= \"https://third-party-endpoint\";\nvar httpRequestData = new sn_auth.HttpRequestData();\nhttpRequestData.setEndpoint(endpoint);\nhttpRequestData.setService('s3');\nhttpRequestData.setRegion('us-east-1');\nhttpRequestData.setHttpMethod('put');\nvar content = \"Action=SendMessage&amp;MessageBody=This is a test message\";\nhttpRequestData.setContent(content);\nhttpRequestData.addHeader(âx-amz-aclâ, âpublic-readâ );\nhttpRequestData.addHeader(âcontent-typeâ, âapplication/jsonâ );\n\nvar map = httpRequestData.getHeaderMap();\n\nfor(var x in map) {\n    var y = map[x]\n\n    gs.info(x, y);\n}",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Object",
                            "description": "Key-value pairs that define all of the headers associated with the request.\n                  <p class=\"p\">Each key-value pair includes these parts:</p>\n<ul class=\"ul\" id=\"HttpRD-getHeaderMap__ul_adn_4qh_5jb\">\n                  <li class=\"li\">Key: String. Name of the header.</li>\n\n                  <li class=\"li\">Value: String. Value of the header.</li>\n\n                </ul>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "HttpRD-getHost",
                        "short_description": "Returns the host used in the request.",
                        "description": "",
                        "name": "getHost()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var endpoint= \"https://third-party-endpointâ;\nvar httpRequestData = new sn_auth.HttpRequestData();\nhttpRequestData.setEndpoint(endpoint);\nhttpRequestData.setHost('myHost')\nhttpRequestData.setService('s3');\nhttpRequestData.setRegion('us-east-1');\nhttpRequestData.setHttpMethod('put');\nvar content = âAction=SendMessage&amp;MessageBody=This is a test messageâ;\nhttpRequestData.setContent(content);\nhttpRequestData.addHeader(âx-amz-aclâ , âpublic-readâ );\n\ngs.info(\"Host is: \" + httpRequestData.getHost());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "Host used in the request."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "HttpRD-getHttpMethod",
                        "short_description": "Returns the HTTP method used in the request.",
                        "description": "",
                        "name": "getHttpMethod()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var endpoint= \"https://third-party-endpoint\";\nvar httpRequestData = new sn_auth.HttpRequestData();\nhttpRequestData.setEndpoint(endpoint);\nhttpRequestData.setService('s3');\nhttpRequestData.setRegion('us-east-1');\nhttpRequestData.setHttpMethod('put');\nvar content = \"Action=SendMessage&amp;MessageBody=This is a test message\";\nhttpRequestData.setContent(content);\nhttpRequestData.addHeader(âx-amz-aclâ, âpublic-readâ );\nâ\n\ngs.info(\"HTTP method is: \" + httpRequestData.getHttpMethod());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "HTTP method used in the request."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "HttpRD-getQueryParam_S",
                        "short_description": "Returns the value of the specified query parameter.",
                        "description": "",
                        "name": "getQueryParam(String key)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var endpoint= \"https://third-party-endpoint\";\nvar httpRequestData = new sn_auth.HttpRequestData();\nhttpRequestData.setEndpoint(endpoint);\nhttpRequestData.setService('s3');\nhttpRequestData.setRegion('us-east-1');\nhttpRequestData.setHttpMethod('put');\nvar content = \"Action=SendMessage&amp;MessageBody=This is a test message\";\nhttpRequestData.setContent(content);\nhttpRequestData.addQueryParam(âapi_versionâ, âv2â );\n\ngs.info(\"API version is: \" + httpRequestData.getQueryParam('api_version'));",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "key",
                                "type": "String",
                                "description": "Name of the query parameter to get the value of."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "Value of the query parameter."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "HttpRD-getQueryParamMap",
                        "short_description": "Returns an object containing the query parameters included in the request.",
                        "description": "",
                        "name": "getQueryParamMap()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var endpoint= \"https://third-party-endpoint\";\nvar httpRequestData = new sn_auth.HttpRequestData();\nhttpRequestData.setEndpoint(endpoint);\nhttpRequestData.setService('s3');\nhttpRequestData.setRegion('us-east-1');\nhttpRequestData.setHttpMethod('put');\nvar content = \"Action=SendMessage&amp;MessageBody=This is a test message\";\nhttpRequestData.setContent(content);\nhttpRequestData.addQueryParam(âapi_versionâ, âv2â );\nhttpRequestData.addQueryParam(âlimitâ, â1000â );\nhttpRequestData.addQueryParam(âoffsetâ, â1â );\n\n\nvar map = httpRequestData.getQueryParamMap();\ngs.info(\"api_version is: \" + map['api_version']);",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Object",
                            "description": "Key-value pairs that define the query parameters associated with the request.\n                  <p class=\"p\">Each key-value pair includes these parts:</p>\n<ul class=\"ul\" id=\"HttpRD-getQueryParamMap__ul_adn_4qh_5jb\">\n                  <li class=\"li\">Key: String. Name of the query parameter.</li>\n\n                  <li class=\"li\">Value: String. Value of the query parameter.</li>\n\n                </ul>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "HttpRD-getRegion",
                        "short_description": "Returns the region for the request that will be used in signing.",
                        "description": "",
                        "name": "getRegion()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var endpoint= \"https://third-party-endpoint\";\nvar httpRequestData = new sn_auth.HttpRequestData();\nhttpRequestData.setEndpoint(endpoint);\nhttpRequestData.setService('s3');\nhttpRequestData.setRegion('us-east-1');\nhttpRequestData.setHttpMethod('put');\nvar content = \"Action=SendMessage&amp;MessageBody=This is a test message\";\nhttpRequestData.setContent(content);\n\ngs.info(\"Region is: \" + httpRequestData.getRegion());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "Name of the region."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "HttpRD-getService",
                        "short_description": "Returns the service defined in the request.",
                        "description": "",
                        "name": "getService()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var endpoint= \"https://s3.amazonaws.comâ;\nvar httpRequestData = new sn_auth.HttpRequestData();\nhttpRequestData.setEndpoint(endpoint);\nhttpRequestData.setService(âs3â);\n\ngs.info(\"Service is: \" + httpRequestData.getService());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "Service defined in the request."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "HttpRD-setContent_S",
                        "short_description": "Defines the content to send in the request.",
                        "description": "<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This method is not supported in script includes or MID server scripts.</div></p>",
                        "name": "setContent(String content)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var endpoint= \"https://s3.amazonaws.comâ;\nvar httpRequestData = new sn_auth.HttpRequestData();\nhttpRequestData.setEndpoint(endpoint);\nhttpRequestData.setService('s3');\nhttpRequestData.setRegion('us-east-1');\nhttpRequestData.setHttpMethod('put');\nvar content = âThis is a test messageâ;\nhttpRequestData.setContent(content);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "content",
                                "type": "String",
                                "description": "Content to send in the request."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "HttpRD-setDate_N",
                        "short_description": "Defines the date of the request used for signing.",
                        "description": "<p>Use this method only when testing whether the signature is created correctly based on a\n        time stamp. In production, the signing request uses the time that you generated the\n        signature; manually setting this value may cause the signing request to fail.</p>",
                        "name": "setDate(Number date)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var endpoint= \"https://s3.amazonaws.com\";â\nvar httpRequestData = new sn_auth.HttpRequestData();â\nhttpRequestData.setEndpoint(endpoint);â\nhttpRequestData.addQueryParam(\"list-type\", \"2\");â\nhttpRequestData.setService('s3');â\nhttpRequestData.setHttpMethod('get');\nhttpRequestData.setDate(1349333576093);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "date",
                                "type": "Number",
                                "description": "The difference between January 1, 1970 UTC and the date used to sign the\n                  request.<p class=\"p\">Unit: Milliseconds</p>"
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "HttpRD-setDirective_S",
                        "short_description": "Defines whether to apply the signature to the request in a header or as a query\n    parameter.",
                        "description": "",
                        "name": "setDirective(String directive)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var endpoint= \"https://s3.amazonaws.comâ;â\nvar httpRequestData = new sn_auth.HttpRequestData();â\nhttpRequestData.setEndpoint(endpoint);â\nhttpRequestData.addQueryParam(\"list-type\", \"2\");â\nhttpRequestData.setService('s3');â\nhttpRequestData.setHttpMethod('get');â\nhttpRequestData.setDirective(\"query\");â",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "directive",
                                "type": "String",
                                "description": "Whether to apply the signature to the header or as a query parameter. <p class=\"p\">Values\n                  include: </p>\n<ul class=\"ul\" id=\"HttpRD-setDirective_S__ul_w2m_lzb_5jb\">\n                  <li class=\"li\"><samp class=\"ph codeph\">query</samp>: Applies signature as a query parameter.</li>\n\n                  <li class=\"li\"><samp class=\"ph codeph\">header</samp>: Applies signature to the request header.</li>\n\n                </ul>\n<p class=\"p\">Default: header</p>"
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "HttpRD-setEndpoint_S",
                        "short_description": "Defines the endpoint to send the request to.",
                        "description": "",
                        "name": "setEndpoint(String endpoint)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var endpoint=\"https://third-party-endpoint/path-parameters/version\";\n\nvar httpRequestData = new sn_auth.HttpRequestData();\nhttpRequestData.setEndpoint(endpoint);\n",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "endpoint",
                                "type": "String",
                                "description": "Endpoint to send the request to. The endpoint can include query parameters,\n                path, and version."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "HttpRD-setExpiry_N",
                        "short_description": "Sets the amount of time before the signature expires starting when the request is\n    signed using the <span class=\"keyword apiname\">generateAuth()</span> method in the\n      <span class=\"keyword apiname\">RequestAuthAPI</span> class.",
                        "description": "<p><span class=\"ph\">The expiration is commonly set by the third-party service you are\n        sending the request to, which overrides any value set by the <span class=\"keyword apiname\">setExpiry()</span>\n        method. For example, if the expiration is set to 900 seconds by the third-party service and\n        you use the <span class=\"keyword apiname\">setExpiry()</span> method to set the expiration to 300 seconds, the\n         <span class=\"keyword apiname\">getExpiry()</span> method returns 900 seconds.</span></p>",
                        "name": "setExpiry(Number expiry)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var endpoint= \"https://s3.amazonaws.comâ;â\nvar httpRequestData = new sn_auth.HttpRequestData();â\nhttpRequestData.setEndpoint(endpoint);â\nhttpRequestData.addQueryParam(\"list-type\", \"2\");â\nhttpRequestData.setService('s3');â\nhttpRequestData.setHttpMethod('get');â\nhttpRequestData.setExpiry(300);â",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "expiry",
                                "type": "Number",
                                "description": "Amount of time before the signature expires.<p class=\"p\">Unit: Seconds</p>"
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "HttpRD-setHost_S",
                        "short_description": "Defines the host used in the request.",
                        "description": "",
                        "name": "setHost(String host)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var endpoint= \"https:third-party-endpointâ;\nvar httpRequestData = new sn_auth.HttpRequestData();\nhttpRequestData.setEndpoint(endpoint);\nhttpRequestData.setHost('myHost')\nhttpRequestData.setService('s3');\nhttpRequestData.setRegion('us-east-1');\nhttpRequestData.setHttpMethod('put');\nvar content = âAction=SendMessage&amp;MessageBody=This is a test messageâ;\nhttpRequestData.setContent(content);\nhttpRequestData.addHeader(âx-amz-aclâ, âpublic-readâ );",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "host",
                                "type": "String",
                                "description": "Name of the HTTP request host."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "HttpRD-setHttpMethod_S",
                        "short_description": "Sets the HTTP method to use in the request.",
                        "description": "",
                        "name": "setHttpMethod(String httpMethod)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var endpoint= \"https://third-party-endpoint\";\nvar httpRequestData = new sn_auth.HttpRequestData();\nhttpRequestData.setEndpoint(endpoint);\nhttpRequestData.setService('s3');\nhttpRequestData.setRegion('us-east-1');\nhttpRequestData.setHttpMethod('put');",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "httpMethod",
                                "type": "String",
                                "description": "HTTP method to use in the request."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "HttpRD-setRegion_S",
                        "short_description": "Defines the region to use for the request in signing.",
                        "description": "",
                        "name": "setRegion(String region)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var endpoint= \"https:third-party-endpoint\";\nvar httpRequestData = new sn_auth.HttpRequestData();\nhttpRequestData.setEndpoint(endpoint);\nhttpRequestData.setService('s3');\nhttpRequestData.setRegion('us-east-1');\nhttpRequestData.setHttpMethod('put');\nvar content = \"Action=SendMessage&amp;MessageBody=This is a test message\";\nhttpRequestData.setContent(content);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "region",
                                "type": "String",
                                "description": "The region to use to sign the request. Available values are determined by the\n                third-party API's requirements."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "HttpRD-setService_S",
                        "short_description": "Defines the service for the request.",
                        "description": "",
                        "name": "setService(String service)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var endpoint= \"https://s3.amazonaws.comâ;\nvar httpRequestData = new sn_auth.HttpRequestData();\nhttpRequestData.setEndpoint(endpoint);\nhttpRequestData.setService(âs3â);\n",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "service",
                                "type": "String",
                                "description": "The service for the request."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "Generate outbound signing requests using these APIs in the following\n         order:<ol class=\"ol\" id=\"RequestAuthAPI__d92395e64\">\n         <li class=\"li\"><span class=\"keyword apiname\">HttpRequestData</span>: Build the API request.</li>\n\n         <li class=\"li\"><span class=\"keyword apiname\">AuthCredential</span>: Create a credential object or update an existing\n          one. Use the credential to sign the request through the <span class=\"keyword apiname\">RequestAuthAPI</span>\n          class. </li>\n\n         <li class=\"li\"><span class=\"keyword apiname\">RequestAuthAPI</span>: Sign the request and return an HttpRequestAuthedData\n          object.</li>\n\n         <li class=\"li\"><span class=\"keyword apiname\">HttpRequestAuthedData</span>: Get information about the signed\n          request.</li>\n\n         <li class=\"li\"><span class=\"keyword apiname\">GlideHTTPRequest</span>: Send the signed request.</li>\n\n        </ol><br/><br/><span class=\"ph\">Before using these APIs, you must <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-servicenow-platform/page/product/credentials/task/configure-authentication-algorithm.html\" target=\"_blank\">configure an authentication\n         algorithm</a> to sign the request and associate it with the credential used to\n        authenticate the request.</span><br/><br/>Use this API in scoped scripts with the <span class=\"keyword parmname\">sn_auth</span> namespace\n      identifier.",
                "short_description": "The <span class=\"keyword apiname\">RequestAuthAPI()</span> API provides methods to apply a signature to a\n    REST request.",
                "identifier": "RequestAuthAPI",
                "name": "RequestAuthAPI",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "RequestAuthAPI-RequestAuthAPI_O_O",
                        "short_description": "Instantiates a RequestAuthAPI object using a REST request and a credential.",
                        "description": "",
                        "name": "RequestAuthAPI(Object data, Object credential)",
                        "type": "Constructor",
                        "examples": [
                            {
                                "script": "// Define the HttpRequestData object\nvar endpoint= \"https://third-party-endpoint\";\nvar httpRequestData = new sn_auth.HttpRequestData();\nhttpRequestData.setEndpoint(endpoint);\nhttpRequestData.setService(âs3â);\nhttpRequestData.setRegion(âus-east-1â);\nhttpRequestData.setHttpMethod(âPUTâ);\nvar content = âAction=SendMessage&amp;MessageBody=This is a test messageâ;\nhttpRequestData.setContent(content);\nhttpRequestData.addHeader(âx-amz-aclâ , âpublic-readâ );\n \n // Get a credential record\nvar credential = new sn_cc.StandardCredentialsProvider().getAuthCredentialByID(\"88772d0d40990010f8772fdd9ebc8075\");\n \n// Instantiate a RequestAuthAPI object\nvar signingAPI = new sn_auth.RequestAuthAPI(httpRequestData, credential);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "data",
                                "type": "Object",
                                "description": "HttpRequestData object that contains the unsigned REST request. Use the\n                  <span class=\"keyword apiname\">HttpRequestData</span> class to build this object. See <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=HttpRequestDataAPI&amp;v=paris\" target=\"_blank\">HttpRequestData\n                  API</a>."
                            },
                            {
                                "name": "credential",
                                "type": "Object",
                                "description": "Object that represents a record from the Credentials [discovery_credentials]\n                table. Retrieve this object using the <span class=\"keyword apiname\">AuthCredential</span> class. See\n                  <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=AuthCredentialAPI&amp;v=paris\" target=\"_blank\">AuthCredential API</a>."
                            }
                        ],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "RequestAuthAPI-generateAuth",
                        "short_description": "Signs the HttpRequestData object and returns an HttpRequestAuthedData object to use to\n    send in the REST request.",
                        "description": "",
                        "name": "generateAuth()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "// Define the HttpRequestData object\nvar endpoint= \"https://third-party-endpoint\";\nvar httpRequestData = new sn_auth.HttpRequestData();\nhttpRequestData.setEndpoint(endpoint);\nhttpRequestData.setService(âs3â);\nhttpRequestData.setRegion(âus-east-1â);\nhttpRequestData.setHttpMethod(âPUTâ);\nvar content = âAction=SendMessage&amp;MessageBody=This is a test messageâ;\nhttpRequestData.setContent(content);\nhttpRequestData.addHeader(âx-amz-aclâ , âpublic-readâ );\n \n// Get a credential record\ngs.info( âdate:â + httpRequestData.getDate() );\nvar credential = new sn_cc.StandardCredentialsProvider().getAuthCredentialByID(\"5b61c16f73533300f662cff8faf6a74b\");\n \n// Create the RequestAuthAPI object and sign the request\nvar signingAPI = new sn_auth.RequestAuthAPI(httpRequestData, credential);\nvar output = signingAPI.generateAuth();\n ",
                                "description": "This example creates a request and gets a credential record to pass to the\n          <span class=\"keyword apiname\">RequestAuthAPI</span> API. The <span class=\"keyword apiname\">generateAuth()</span> method then\n        signs the request."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "HttpRequestAuthedData",
                            "description": "Object. Data to use to obtain information about the signed result. Use the\n                methods in the <span class=\"keyword apiname\">HttpRequestAuthedData</span> class to interact with the\n                signed result. See <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=HttpRequestAuthedDataAPI&amp;v=paris\" target=\"_blank\">HttpRequestAuthedData\n                  API</a>."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "RequestAuthAPI-getAuthCredential",
                        "short_description": "Returns the credential record used to sign the request.",
                        "description": "",
                        "name": "getAuthCredential()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "// Define the HttpRequestData object\nvar endpoint= \"https://third-party-endpointâ;\nvar httpRequestData = new sn_auth.HttpRequestData();\nhttpRequestData.setEndpoint(endpoint);\nhttpRequestData.setService(âs3â);\nhttpRequestData.setRegion(âus-east-1â);\nhttpRequestData.setHttpMethod(âPUTâ);\nvar content = âAction=SendMessage&amp;MessageBody=This is a test messageâ;\nhttpRequestData.setContent(content);\nhttpRequestData.addHeader(âx-amz-aclâ , âpublic-readâ );\n \n// Get a credential record\nvar credential = new sn_cc.StandardCredentialsProvider().getAuthCredentialByID(\"5b61c16f73533300f662cff8faf6a74b\");\n \n// Return the AuthCredential object\nvar signingAPI = new sn_auth.RequestAuthAPI(httpRequestData, credential);\nvar signingCredential = signingAPI.getAuthCredential();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "AuthCredential",
                            "description": "Object. Data to use to obtain information about the credential record used to\n                sign the request. Use the methods in the <span class=\"keyword apiname\">AuthCredential</span> class to\n                interact with the credential. See <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=AuthCredentialAPI&amp;v=paris\" target=\"_blank\">AuthCredential API</a>."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "RequestAuthAPI-getHttpRequestData",
                        "short_description": "Returns the HttpRequestData object that was used to instantiate the\n      <span class=\"keyword apiname\">RequestAuthAPI</span> class.",
                        "description": "",
                        "name": "getHttpRequestData()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "// Define the HttpRequestData object\nvar endpoint= \"https://third-party-endpoint\";\nvar httpRequestData = new sn_auth.HttpRequestData();\nhttpRequestData.setEndpoint(endpoint);\nhttpRequestData.setService(âs3â);\nhttpRequestData.setRegion(âus-east-1â);\nhttpRequestData.setHttpMethod(âPUTâ);\nvar content = âAction=SendMessage&amp;MessageBody=This is a test messageâ;\nhttpRequestData.setContent(content);\nhttpRequestData.addHeader(âx-amz-aclâ , âpublic-readâ );\n \n // Get a credential record\nvar credential = new sn_cc.StandardCredentialsProvider().getAuthCredentialByID(\"88772d0d40990010f8772fdd9ebc8075\");\n \n// Return the HttpRequestData object\nvar signingAPI = new sn_auth.RequestAuthAPI(httpRequestData, credential);\nvar unsignedRequest = signingAPI.getHttpRequestData();\n \ngs.info(\"Endpoint is: \" + unsignedRequest.getEndpoint());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "HttpRequestData",
                            "description": "Object. Contains the unsigned REST request. Use the methods in the\n                  <span class=\"keyword apiname\">HttpRequestData</span> class to interact with the request. See <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=HttpRequestDataAPI&amp;v=paris\" target=\"_blank\">HttpRequestData\n                  API</a>."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "RequestAuthAPI-resetAuthCredential",
                        "short_description": "Generates a temporary, limited privilege token that you can use to provide trusted\n    users with temporary security credentials to control third-party resources.",
                        "description": "<p>To use this method, the third-party service must include an API or SDK that processes and\n        manages limited access tokens.</p>",
                        "name": "resetAuthCredential()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "// Creates a temporary token \nfunction(authAPI) {â\n    var requestData = authAPI.getHttpRequestData();â\n    var credential= authAPI.getAuthCredential();â\n    credential.setAttribute('Action', 'aws_sessionToken');â  \n    authAPI.resetAuthCredential();\t\n\n    //Returns status information\n    var status = credential.getAttribute(âcredential_reset_statusâ); â\n}",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    }
                ]
            }
        ]
    },
    {
        "identifier": "sn_cc-namespace",
        "namespace": "sn_cc",
        "classes": [
            {
                "description": "You can use this API in scoped applications, or within the global scope. In scoped scripts,\n      use the <span class=\"keyword parmname\">sn_cc</span> namespace identifier.<br/><br/>For more information on connections and credentials, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-servicenow-platform/page/product/credentials/reference/r-credentials.html\" target=\"_blank\">Credentials and connection\n        information</a>.<br/><br/>This function retrieves connection attribute information identified by the given connection\n      and credential alias.<br/><br/><pre><code class='language-javascript'>var provider = new sn_cc.ConnectionInfoProvider();\n\n// get a jdbc connection in the current domain with the alias ID\n//     \"6219afbf9f03320021dd7501942e70fc\"\nvar connectionInfo = provider.getConnectionInfo(\"6219afbf9f03320021dd7501942e70fc\");\nif (connectionInfo != null) {\n  // get data map\n  var datamap = connectionInfo.getDataMap();\n  gs.info(datamap[\"name\"]);\n  gs.info(datamap[\"connection_url\"]);\n\n  // get the same values using getAttribute\n  gs.info(connectionInfo.getAttribute(\"name\"));\n  gs.info(connectionInfo.getAttribute(\"connection_url\"));\n\n  // get credential attributes\n  gs.info(connectionInfo.getCredentialAttribute(\"user_name\"));\n  gs.info(connectionInfo.getCredentialAttribute(\"password\")); \n\n  // get extended attributes\n  var extendedAttributes = connectionInfo.getExtendedAttributes();  \n  gs.info(extendedAttributes[\"name1\"]);\n }\n\n // get a jdbc connection in the ACME domain with the alias ID\n //      \"cd5923ff9f03320021dd7501942e70bb\"\n connectionInfo = provider.getConnectionInfoByDomain(\"cd5923ff9f03320021dd7501942e70bb\",\n        \"c90d4b084a362312013398f051272c0d\");\n if (connectionInfo != null) {\n   // get data map\n   var datamap = connectionInfo.getDataMap();\n   gs.info(datamap[\"name\"]);\n }\n</code></pre>",
                "short_description": "Use the <span class=\"keyword apiname\">ConnectionInfo</span> API to get connection attribute information\n    through the connection and credential alias.",
                "identifier": "connectioninfo-api",
                "name": "ConnectionInfo - Scoped, Global",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "get-attribute",
                        "short_description": "Returns the value of a <span class=\"keyword apiname\">ConnectionInfo</span> attribute with the specified\n    property name.",
                        "description": "",
                        "name": "getAttribute(String name)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "  // get the same values using getAttribute\n  gs.info(connectionInfo.getAttribute(\"name\"));\n  gs.info(connectionInfo.getAttribute(\"connection_url\"));\n",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "name",
                                "type": "String",
                                "description": "Name of a <span class=\"keyword apiname\">ConnectionInfo</span> object property."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "Value of a specified <span class=\"keyword apiname\">ConnectionInfo</span> property."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "get-credential-attributes",
                        "short_description": "Returns the value of credential attributes for a specified connection.",
                        "description": "",
                        "name": "getCredentialAttribute()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": " // get credential attributes\n  gs.info(connectionInfo.getCredentialAttribute(\"user_name\"));\n  gs.info(connectionInfo.getCredentialAttribute(\"password\")); \n",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Object",
                            "description": "Key-value pair map of credential attributes."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "get-data-map",
                        "short_description": "Returns the connection attributes as a collection of key-value pairs.",
                        "description": "",
                        "name": "getDataMap()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": " // get data map\n  var datamap = connectionInfo.getDataMap();\n  gs.info(datamap[\"name\"]);\n  gs.info(datamap[\"connection_url\"]);\n",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Object",
                            "description": "Key-value pair map of connection attributes."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "get-extended-attributes",
                        "short_description": "Returns the extended attributes as a collection of key-value pairs.",
                        "description": "",
                        "name": "getExtendedAttributes()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "// get extended attributes\n  var extendedAttributes = connectionInfo.getExtendedAttributes();  \n  gs.info(extendedAttributes[\"name1\"]);\n }\n",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Object",
                            "description": "Key-value pair map of extended attributes."
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "You can use this API in scoped applications, or within the global scope. In scoped scripts,\n      use the <span class=\"keyword parmname\">sn_cc</span> namespace identifier.<br/><br/>This function retrieves connection information identified by the given connection alias.<br/><br/><pre><code class='language-javascript'>var provider = new sn_cc.ConnectionInfoProvider();\n\n// get a jdbc connection in the current domain with the alias ID\n//     \"6219afbf9f03320021dd7501942e70fc\"\nvar connectionInfo = provider.getConnectionInfo(\"6219afbf9f03320021dd7501942e70fc\");\nif (connectionInfo != null) {\n  // get data map\n  var datamap = connectionInfo.getDataMap();\n  gs.info(datamap[\"name\"]);\n  gs.info(datamap[\"connection_url\"]);\n\n  // get the same values using getAttribute\n  gs.info(connectionInfo.getAttribute(\"name\"));\n  gs.info(connectionInfo.getAttribute(\"connection_url\"));\n\n  // get credential attributes\n  gs.info(connectionInfo.getCredentialAttribute(\"user_name\"));\n  gs.info(connectionInfo.getCredentialAttribute(\"password\")); \n\n  // get extended attributes\n  var extendedAttributes = connectionInfo.getExtendedAttributes();  \n  gs.info(extendedAttributes[\"name1\"]);\n }\n\n // get a jdbc connection in the ACME domain with the alias ID\n //      \"cd5923ff9f03320021dd7501942e70bb\"\n connectionInfo = provider.getConnectionInfoByDomain(\"cd5923ff9f03320021dd7501942e70bb\",\n        \"c90d4b084a362312013398f051272c0d\");\n if (connectionInfo != null) {\n   // get data map\n   var datamap = connectionInfo.getDataMap();\n   gs.info(datamap[\"name\"]);\n }\n</code></pre>",
                "short_description": "Use the <span class=\"keyword apiname\">ConnectionInfoProvider</span> API to select connection information\n    through the connection alias.",
                "identifier": "connectioninfoprovider-api",
                "name": "ConnectionInfoProvider - Scoped, Global",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "connection-info-provider",
                        "short_description": "Use ConnectionInfoProvider() to select connection information through the connection\n    alias.",
                        "description": "",
                        "name": "ConnectionInfoProvider()",
                        "type": "Constructor",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "get-connection-info",
                        "short_description": "This function retrieves a ConnectionInfo object identified by the given aliasID in the\n    current domain.",
                        "description": "",
                        "name": "getConnectionInfo(String aliasID)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var provider = new sn_cc.ConnectionInfoProvider();\n\n// get a jdbc connection in the current domain with the alias ID\n//     \"6219afbf9f03320021dd7501942e70fc\"\nvar connectionInfo = provider.getConnectionInfo(\"6219afbf9f03320021dd7501942e70fc\");",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "aliasID",
                                "type": "String",
                                "description": "The sys_id of a connection alias."
                            }
                        ],
                        "return": {
                            "type": "ConnectionInfo",
                            "description": "Information about the connection."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "get-connection-info-by-domain",
                        "short_description": "This function retrieves a ConnectionInfo object identified by the given aliasID for a\n    specific domain.",
                        "description": "",
                        "name": "getConnectionInfoByDomain(String aliasID, String domainID)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var provider = new sn_cc.ConnectionInfoProvider();\n\n// get a jdbc connection in the ACME domain with the alias ID\n //      \"cd5923ff9f03320021dd7501942e70bb\"\n connectionInfo = provider.getConnectionInfoByDomain(\"cd5923ff9f03320021dd7501942e70bb\",\n        \"c90d4b084a362312013398f051272c0d\");",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "aliasID",
                                "type": "String",
                                "description": "The sys_id of a connection alias."
                            },
                            {
                                "name": "domainID",
                                "type": "String",
                                "description": "The sys_id of a domain or global."
                            }
                        ],
                        "return": {
                            "type": "ConnectionInfo",
                            "description": "Connection information."
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "You can use this API in scoped applications, or within the global scope. In scoped scripts,\n      use the <span class=\"keyword parmname\">sn_cc</span> namespace identifier.<br/><br/>This API provides methods to retrieve credential information by sys_id and by specified\n      credential attributes.<br/><br/><pre><code class='language-javascript'>//Get a single credential\n\nvar provider = new sn_cc.StandardCredentialsProvider();\nvar credential = provider.getCredentialByID(\"f43c6d40a0a0b5700c77f9bf387afe3\");\nvar userName = credential.getAttribute(\"user_name\");\nvar password = credential.getAttribute(\"password\");\n//using getAttribute for new keys in extended tables, for example \n//cloud management credential has the \"user_public_key\" attribute\nvar userPublicKey = credential.getAttribute(\"user_public_key\");\n\n//Get a list of SSH credentials\n\nvar provider = new sn_cc.StandardCredentialsProvider();\nvar credentials = provider.getCredentials([\"ssh\"]);\nfor (var i = 0; i &lt; credentials.length; i++) {\n  var credential = credentials[i];\n  gs.info(credential.getAttribute(\"name\"));\n}</code></pre>",
                "short_description": "Use the <span class=\"keyword apiname\">StandardCredentialsProvider</span> API to retrieve credential\n    information.",
                "identifier": "standardcredentialsprovider-api",
                "name": "StandardCredentialsProvider - Scoped, Global",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "standard-credentials-provider",
                        "short_description": "Instantiates a credentials provider object.",
                        "description": "",
                        "name": "StandardCredentialsProvider()",
                        "type": "Constructor",
                        "examples": [
                            {
                                "script": "var provider = new sn_cc.StandardCredentialsProvider();\nvar credentials = provider.getCredentialByID(\"ef43c6d40a0a0b5700c77f9bf387afe3\");",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "scp-get-credentials-by-id",
                        "short_description": "Returns the credential record object identified by the specified sys_id.",
                        "description": "",
                        "name": "getCredentialByID(String sys_id)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var provider = new sn_cc.StandardCredentialsProvider();\nvar credentials = provider.getCredentialByID(\"ef43c6d40a0a0b5700c77f9bf387afe3\");\ngs.info(\"User name: \" + credentials.getAttribute(\"user_name\"));",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "sys_id",
                                "type": "String",
                                "description": "Sys_id of the credential record. Located in the Credentials\n                [discovery_credentials] table."
                            }
                        ],
                        "return": {
                            "type": "StandardCredential",
                            "description": "Credential record object."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "get-credentials",
                        "short_description": "Returns an array of all credentials that match the specified types and\n    tags.",
                        "description": "",
                        "name": "getCredentials(String types, String tags)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var provider = new sn_cc.StandardCredentialsProvider();\nvar credentials = provider.getCredentials([\"ssh\"]);",
                                "description": "This code example shows how to get the provider credentials for \"ssh\" credential types."
                            },
                            {
                                "script": "var provider = new sn_cc.StandardCredentialsProvider();\nArrayList&lt;String&gt; types = new ArrayList&lt;&gt;();\ntypes.add(\"ssh\");\ntypes.add(\"windows\");\nJSONArray jsonArray = provider.getCredentials(types, \"admin\");",
                                "description": "This code example shows how to get the provider credentials for \"ssh\" and \"windows\"\n        credential types that have tags of \"admin\"."
                            }
                        ],
                        "params": [
                            {
                                "name": "tags",
                                "type": "String",
                                "description": "Optional. Comma-separated list of tag names. For example, \"ssh,\n                  jdbc\".<div class=\"p\">Examples of valid calls:<ul class=\"ul\" id=\"get-credentials__ul_fsr_sf2_4nb\">\n                    <li class=\"li\"><samp class=\"ph codeph\"> var credentials = provider.getCredentials(null,\n                      null);</samp></li>\n\n                    <li class=\"li\">\n                      <samp class=\"ph codeph\">var credentials = provider.getCredentials([\"ssh\"], \"\");</samp></li>\n\n                    <li class=\"li\">\n                      <samp class=\"ph codeph\">var credentials = provider.getCredentials(new ArrayList&lt;String&gt;(),\n                        \"ssh,admin\");</samp></li>\n\n                  </ul>\n</div>"
                            },
                            {
                                "name": "types",
                                "type": "Array",
                                "description": "Optional. Credential type names. For example, [\"ssh\", \"windows\"]<div class=\"note note\"><span class=\"notetitle\">Note:</span> If\n                    <span class=\"keyword parmname\">types</span> is null or empty, any match returns a credential. If\n                    <span class=\"keyword parmname\">types</span> is specified, the credentials whose type matches one\n                  of the types is returned.</div>"
                            }
                        ],
                        "return": {
                            "type": "StandardCredential",
                            "description": "Credential record object."
                        },
                        "extras": []
                    }
                ]
            }
        ]
    },
    {
        "identifier": "sn_clotho-namespace",
        "namespace": "sn_clotho",
        "classes": [
            {
                "description": "The <span class=\"keyword apiname\">Client</span> class can be used in scoped and global server scripts. When\n      using the <span class=\"keyword apiname\">Client</span> class, use the <span class=\"keyword parmname\">sn_clotho</span> namespace\n      identifier.<br/><br/>This class is part of the <span class=\"ph\">MetricBase</span> application.",
                "short_description": "Provides methods to add data to the <span class=\"ph\">MetricBase</span> database, to execute\n    transforms on the <span class=\"ph\">MetricBase</span>\n    database, and to receive the results of the transforms.",
                "identifier": "ClientScopedAPI",
                "name": "Client - Scoped, Global",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "ClientS-Client",
                        "short_description": "Create an instance of the client class to access the <span class=\"ph\">MetricBase</span> database.",
                        "description": "",
                        "name": "Client()",
                        "type": "Constructor",
                        "examples": [
                            {
                                "script": "var client = new sn_clotho.Client();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "ClientS-deleteSeries_GR_S",
                        "short_description": "Remove the data in the <span class=\"ph\">MetricBase</span> database associated with\n    the specified metric in the specified GlideRecord. Use this method for removing test data.",
                        "description": "<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This method deletes data from the <span class=\"ph\">MetricBase</span> database. There is no\n          recovery mechanism. </div></p>",
                        "name": "deleteSeries( GlideRecord gr, String metric)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var client = new sn_clotho.Client();\n//query drones of a specific model\nvar drones = new GlideRecord(\"mb_demo_drone\");\ndrones.addQuery(\"model\", \"Kingfisher Phantom\");\ndrones.query();\n\nclient.deleteSeries(drones, 'mb_demo_mt_speed');",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "gr",
                                "type": "GlideRecord",
                                "description": "The records whose time series data for the specified metric is to be\n                deleted."
                            },
                            {
                                "name": "metric",
                                "type": "String",
                                "description": "The name of the metric."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "ClientS-put_DB",
                        "short_description": "Saves metric data to the <span class=\"ph\">MetricBase</span> database.",
                        "description": "",
                        "name": "put(Object metricData)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var time = new GlideDateTime();\nâ\n// two different GlideRecord instances and metrics\nvar dataBuilder = new sn_clotho.DataBuilder(gr, 'cpu_percentage');\ndataBuilder.add(time, 0.6);\nâ\nvar dataBuilder2 = new sn_clotho.DataBuilder(gr2, 'disk_free_percentage');\ndataBuilder2.add(time, 0.2);\nâ\nnew sn_clotho.Client().put([dataBuilder,dataBuilder2]);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "metricData",
                                "type": "Object",
                                "description": "One of the following:<ul class=\"ul\" id=\"ClientS-put_DB__ul_ldw_bbh_yjb\">\n                <li class=\"li\"><a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-application-development/page/app-store/dev_portal/API_reference/DataBuilderScoped/concept/DataBuilderScopedAPI.html\" target=\"_blank\">DataBuilder</a> object containing metric data.</li>\n\n                  <li class=\"li\">Array of DataBuilder objects containing metric data.</li>\n\n                </ul>"
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "Do not use a constructor to create an instance of this class, instead use the object returned\n      by the <span class=\"keyword apiname\">sn_clotho.Client.transform()</span> method.<br/><br/>The <span class=\"keyword apiname\">Data</span> class can be used in scoped and global server scripts. When using\n      the <span class=\"keyword apiname\">Data</span> class, use the <span class=\"keyword parmname\">sn_clotho</span> namespace\n      identifier.<br/><br/>This class is part of the <span class=\"ph\">MetricBase</span> application.",
                "short_description": "A Data object contains the results of transform performed by a\n      <span class=\"keyword apiname\">sn_clotho.Client.transform()</span> method.",
                "identifier": "DataScopedAPI",
                "name": "Data - Scoped, Global",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "DATAS-getEnd",
                        "short_description": "Returns the end time for data in the Data object.",
                        "description": "",
                        "name": "getEnd()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "GlideDateTime",
                            "description": "The end of the time period."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "DATAS-getLabel",
                        "short_description": "Returns the label assigned by the <span class=\"keyword apiname\">\n      sn_clotho.ClothoTransform.label()</span> method.",
                        "description": "",
                        "name": "getLabel()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The label assigned to the data."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "DATAS-getMetricName",
                        "short_description": "Returns the name of the metric of the data series. Returns null when the data object is\n    associated with multiple data series.",
                        "description": "",
                        "name": "getMetricName()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "Name of the metric field. Returns null when the data object is associated with\n                multiple data series."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "DATAS-getPeriod",
                        "short_description": "Returns the time period in milliseconds.",
                        "description": "",
                        "name": "getPeriod()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "Number",
                            "description": "The elapsed time in seconds."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "DATAS-getStart",
                        "short_description": "Returns the start time for data in the Data object.",
                        "description": "",
                        "name": "getStart()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "GlideDateTime",
                            "description": "The time for the first data point."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "DATAS-getSubject",
                        "short_description": "Returns the subject of the data series. Returns null when the data object is associated\n    with multiple data series.",
                        "description": "",
                        "name": "getSubject()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The subject field value of the subject GlideRecord. This is generally the\n                sys_id of the subject GlideRecord."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "DATAS-getTableName",
                        "short_description": "Returns the name of the table assigned in the DataSelector class constructor. Returns\n    null when the data object is associated with multiple data series.",
                        "description": "",
                        "name": "getTableName()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "Table name. Returns null when the data object is associated with multiple data\n                series."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "DATAS-getValues",
                        "short_description": "Returns an array of values.",
                        "description": "",
                        "name": "getValues()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "Array",
                            "description": "An array of numbers."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "DATAS-size",
                        "short_description": "Returns the number of values in the Data object.",
                        "description": "",
                        "name": "size()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "Number",
                            "description": "The number of values in the object."
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "The <span class=\"keyword apiname\">DataBuilder</span> class can be used in scoped and global server scripts.\n      When using the <span class=\"keyword apiname\">DataBuilder</span> class, use the <span class=\"keyword parmname\">sn_clotho</span>\n      namespace identifier.<br/><br/>This class is part of the <span class=\"ph\">MetricBase</span> application.",
                "short_description": "Use the <span class=\"keyword apiname\">DataBuilder</span> class to create a series of data points for a\n    metric. Use the <span class=\"keyword apiname\">sn_clotho.Client.put()</span> method to save the values.",
                "identifier": "DataBuilderScopedAPI",
                "name": "DataBuilder - Scoped, Global",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "SDB-DataBuilder_S_S_S",
                        "short_description": "Creates an instance of the DataBuilder class.",
                        "description": "",
                        "name": "DataBuilder(Object glideRecord, String subject, String metric)",
                        "type": "Constructor",
                        "examples": [
                            {
                                "script": "// Where cpu_percentage is the name of the metric\nvar dataBuilder = new sn_clotho.DataBuilder(gr, 'cpu_percentage');",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "glideRecord",
                                "type": "Object",
                                "description": "GlideRecord from which to obtain the domain."
                            },
                            {
                                "name": "subject",
                                "type": "String",
                                "description": "The sys_id of the GlideRecord associated with this series."
                            },
                            {
                                "name": "metric",
                                "type": "String",
                                "description": "The field name of the metric."
                            }
                        ],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SDB-add_GDT_A",
                        "short_description": "Add a series of data points to the DataBuilder object. Each data point is a time stamp\n    and a value.",
                        "description": "<p>Uses the start parameter and the retention policy collection period to calculate the time\n        stamp for each value in the array. The first value has the start parameter as the time\n        stamp. This method does not save the data in the MetricBase database. Use the\n          <span class=\"keyword apiname\">sn_clotho.Client.put()</span> method to save the values.</p>",
                        "name": "add(GlideDateTime start, Array value)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "\nvar points = [7,0.5,273];\nvar dataBuilder = new sn_clotho.DataBuilder(gr, 'cpu_percentage');\n// this creates a GlideDateTime object set to the current date and time\nvar time = new GlideDateTime();\ndataBuilder.add(time, points);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "start",
                                "type": "GlideDateTime",
                                "description": "The time stamp for the first data point. Subsequent time stamps are calculated\n                using the retention policy collection period."
                            },
                            {
                                "name": "value",
                                "type": "Array",
                                "description": "An array of numbers."
                            }
                        ],
                        "return": {
                            "type": "DataBuilder",
                            "description": "The same DataBuilder object."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SDB-add_GDT_N",
                        "short_description": "Add a data point to the DataBuilder object. Each data point is a time stamp and a\n    value. This method does not save the data point in the metric. Use the\n      <span class=\"keyword apiname\">sn_clotho.Client.put()</span> method to save the values.",
                        "description": "",
                        "name": "add(GlideDateTime start, Number value)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var dataBuilder = new sn_clotho.DataBuilder(gr, 'cpu_percentage');\n// this creates a GlideDateTime object set to the current date and time\nvar time = new GlideDateTime();\ndataBuilder.add(time, 0.6);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "start",
                                "type": "GlideDateTime",
                                "description": "The time stamp for the data point."
                            },
                            {
                                "name": "value",
                                "type": "Number",
                                "description": "The value of the data point."
                            }
                        ],
                        "return": {
                            "type": "DataBuilder",
                            "description": "The DataBuilder object."
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "The <span class=\"keyword apiname\">Transformer</span> class can be used in scoped and global server scripts.\n      When using the<span class=\"keyword apiname\"> Transformer</span> class, use the <span class=\"keyword parmname\">sn_clotho</span>\n      namespace identifier.<br/><br/>The general use case is to determine the period to be evaluated, select the records from the\n      table with the metric field, define the type of transform to run, and then execute the\n      transform.<pre><code class='language-javascript'>// create the start and end time\n       var start = new GlideDateTime();\n\tstart.addSeconds(-1 * 60 * 60); \n\tvar end = new GlideDateTime();\n\t\n\t//mb_demo_drone is a table with metric fields. \n\tvar drones = new GlideRecord(\"mb_demo_drone\");\n\tdrones.addQuery(\"model\", \"Kingfisher Phantom\");\n\tdrones.query();\n\n\t//build a transform that returns a simple average\n\tvar builder = new sn_clotho.Transformer(drones);\n\tbuilder.metric(\"mb_demo_mt_rem_battery\").avg().label(\"Original\");\n\n\t//execute transform and return result for visualization\n\tvar result = builder.execute(start,end);</code></pre><br/><br/>This class is part of the <span class=\"ph\">MetricBase</span> application.",
                "short_description": "Manipulate time-series data to prepare the data for evaluation and\n    analysis.",
                "identifier": "TransformerScopedAPI",
                "name": "Transformer - Scoped, Global",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "TFMR-transformer_GR",
                        "short_description": "Create a Transformer object.",
                        "description": "",
                        "name": "Transformer( GlideRecord sourceRecords)",
                        "type": "Constructor",
                        "examples": [
                            {
                                "script": "//where drones is a GlideRecord created from a table with a metric field\n\tvar builder = new sn_clotho.Transformer(drones);\n",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "sourceRecords",
                                "type": "GlideRecord",
                                "description": "Contains the records for which metrics are to be evaluated. Can be one record\n                or many."
                            }
                        ],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "TFRM-execute_GDT_GDT",
                        "short_description": "Run the transform.",
                        "description": "<p>Use the <span class=\"keyword apiname\">metric()</span> and <span class=\"keyword apiname\">groupBy()</span> methods before calling\n          <span class=\"keyword apiname\">execute()</span>. The <span class=\"keyword apiname\">execute()</span> method can only be called\n        once for each Transformer object.</p><p>Actions performed as part of the transform do not change the data in the <span class=\"ph\">MetricBase</span> database.</p>",
                        "name": "execute(GlideDateTime start, GlideDateTime end)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var minutesAgoStart = 60;\n\tvar end = new GlideDateTime();\n\tvar start = new GlideDateTime(end);\n\tstart.addSeconds(-1 * 60 * minutesAgoStart);\n\t\n\t// query subject records\n\tvar grDrone = new GlideRecord('mb_demo_drone');\n\tgrDrone.query();\n\t\n\t// building transform; get the average transforms of a metric, grouping by model\n\tvar transformer = new sn_clotho.Transformer(grDrone);\n\ttransformer.groupBy(\"fleet\").metric(\"mb_demo_mt_altitude\").avg().label('avg - %g:fleet:');\n\n\t// execute and return result for visualization\n\tvar tfrmResult = transformer.execute(start, end);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "start",
                                "type": "GlideDateTime",
                                "description": "The beginning of the period to be evaluated."
                            },
                            {
                                "name": "end",
                                "type": "GlideDateTime",
                                "description": "The end of the period to be evaluated."
                            }
                        ],
                        "return": {
                            "type": "TransformResult",
                            "description": "The transformed data."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "TFMR-groupBy_S",
                        "short_description": "Specify a field to be used to group the data.",
                        "description": "<p>If you are going to use the <span class=\"keyword apiname\">groupBy()</span> method, it must be called before\n        the <span class=\"keyword apiname\">execute()</span> method.</p>",
                        "name": "groupBy(String field)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var transformer = new sn_clotho.Transformer(grDrone);\n\tvar trnsfrm = transformer.groupBy(\"fleet\");",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "field",
                                "type": "String",
                                "description": "A field in the table to be used to group the transform results."
                            }
                        ],
                        "return": {
                            "type": "TransformPart",
                            "description": "A TransformPart object that can be used to specify the transform\n                characteristics."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "TFRM-metric_S",
                        "short_description": "Specify the metric field to be used in the transform.",
                        "description": "<p>You can specify multiple metrics to be used in the transform. The\n          <span class=\"keyword apiname\">metric()</span> method cannot be called after the<span class=\"keyword apiname\"> execute()</span>\n        method is called.</p>",
                        "name": "metric(String metricName)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var transformer = new sn_clotho.Transformer(grDrone);\nvar trnsfrm = transformer.metric(\"mb_demo_mt_altitude\");",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "metricName",
                                "type": "String",
                                "description": "Name of the metric field."
                            }
                        ],
                        "return": {
                            "type": "TransformPart",
                            "description": "A TransformPart object that can be used to specify the transform\n                characteristics."
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "The <span class=\"keyword apiname\">TransformPart</span> class can be used in scoped and global server scripts.\n      When using the <span class=\"keyword apiname\">TransformPart</span> class, use the <span class=\"keyword parmname\">sn_clotho</span>\n      namespace identifier.<br/><br/>There is no constructor for this class. TransformPart objects are returned by many\n        <span class=\"keyword apiname\">Transformer</span> and<span class=\"keyword apiname\"> TransformPart</span> methods.<br/><br/>The methods of this class define the transforms to be done. The actual transformation is done\n      when the <span class=\"keyword apiname\">execute()</span> method is called on the Transformer object.<br/><br/>The order the <span class=\"keyword apiname\">TransformPart</span> methods are called is important. <ul class=\"ul\" id=\"TransformPartScopedAPI__ul_xt2_g2k_4bb\">\n        <li class=\"li\">You must call the <span class=\"keyword apiname\">metric()</span> method before calling a transform\n          method.</li>\n\n        <li class=\"li\">You cannot use the <span class=\"keyword apiname\">metric()</span> or <span class=\"keyword apiname\">groupBy()</span> methods\n          after calling a transform method.</li>\n\n        <li class=\"li\">Intermediate transforms are not returned in a result unless the\n            <span class=\"keyword apiname\">collect()</span> method is called for the intermediate result you\n          want.<pre><code class='language-javascript'>// where tp is a TransformPart object\n// example 1\ntp.avg().add(2);\nvar tr = tp.execute(); \n// tr contains avg+2, but not avg\n \n// example 2\ntp.avg().add(2);\ntp.avg();\nvar tr = tp.execute(); \n// tr contains both avg and avg + 2\n\n// example 3\ntp.avg().collect().add(2);\nvar tr = tp.execute(); \n// tr contains both avg and avg + 2</code></pre>\n</li>\n\n      </ul><br/><br/>This class is part of the <span class=\"ph\">MetricBase</span> application.",
                "short_description": "Use the <span class=\"keyword apiname\">TransformPart</span> class to specify details of the transform to\n    be done.",
                "identifier": "TransformPartScopedAPI",
                "name": "TransformPart - Scoped, Global",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "TP-add_S",
                        "short_description": "Add the specified number to the value in each time stamp.",
                        "description": "",
                        "name": "add(Number constant)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "constant",
                                "type": "Number",
                                "description": "The number to add to the value in each time stamp."
                            }
                        ],
                        "return": {
                            "type": "TransformPart",
                            "description": "A TransformPart object that can be used to specify transform\n                characteristics."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "TP-avg",
                        "short_description": "Aggregate the selected metric series into one series containing the average value for\n    each time stamp.",
                        "description": "",
                        "name": "avg()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "TransformPart",
                            "description": "A TransformPart object that can be used to specify transform\n                characteristics."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "TP-bottom_N",
                        "short_description": "Create a result set that for each time stamp returns specified number of bottom values.\n    This method results in 'count' number of series. Each value retains the label of its source\n    series.",
                        "description": "",
                        "name": "bottom(Number count)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "count",
                                "type": "Number",
                                "description": "The number of series to return. The series are labeled 0 to count - 1."
                            }
                        ],
                        "return": {
                            "type": "TransformPart",
                            "description": "A TransformPart object that can be used to specify transform\n                characteristics."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "TP-ceil_N",
                        "short_description": "Replace the value in any time stamp that is greater than the specified value with the\n    specified value.",
                        "description": "",
                        "name": "ceil(Number ceiling)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "ceiling",
                                "type": "Number",
                                "description": "The maximum allowed value for any time stamp."
                            }
                        ],
                        "return": {
                            "type": "TransformPart",
                            "description": "A TransformPart object that can be used to specify transform\n                characteristics."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "TP-collect",
                        "short_description": "Mark this transform for collection.",
                        "description": "<p>Transforms that are part of a chain, but not the last transform, are by default not\n        collected. A collected transform is returned as part of the transform result.</p>",
                        "name": "collect()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "TransformPart",
                            "description": "A TransformPart object that can be used to specify transform\n                characteristics."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "TP-count",
                        "short_description": "Aggregate the selected metric series into one series containing the number of values\n    for each time stamp.",
                        "description": "",
                        "name": "count()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "TransformPart",
                            "description": "A TransformPart object that can be used to specify transform\n                characteristics."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "TP-div_N",
                        "short_description": "Divide the value in each time stamp by the specified number.",
                        "description": "",
                        "name": "div(Number constant)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "constant",
                                "type": "Number",
                                "description": "The number by which to divide the value of each time stamp."
                            }
                        ],
                        "return": {
                            "type": "TransformPart",
                            "description": "A TransformPart object that can be used to specify transform\n                characteristics."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "TP-filter_O_O",
                        "short_description": "Create a series using the specified aggregator for the specified time.",
                        "description": "",
                        "name": "filter(Object aggregator, Object duration)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "aggregator",
                                "type": "Object",
                                "description": "Can be:<ul class=\"ul\" id=\"TP-filter_O_O__ul_jdr_lqy_1gb\">\n          <li class=\"li\">AVG</li>\n\n          <li class=\"li\">CHISQUARE</li>\n\n          <li class=\"li\">LAST </li>\n\n          <li class=\"li\">MAX</li>\n\n          <li class=\"li\">MEDIAN</li>\n\n          <li class=\"li\">MIN</li>\n\n          <li class=\"li\">STDDEV</li>\n\n         </ul>\n For definitions of these options, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-now-intelligence/page/use/reporting/reference/metricbase-transforms.html\" target=\"_blank\">MetricBase\n                transforms</a>."
                            },
                            {
                                "name": "duration",
                                "type": "Object",
                                "description": "Time period for the series."
                            }
                        ],
                        "return": {
                            "type": "TransformPart",
                            "description": "TransformPart object that can be used to specify transform characteristics."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "TP-floor_N",
                        "short_description": "Replace the value in any time stamp that is less than the specified value with the\n    specified value.",
                        "description": "",
                        "name": "floor(Number floor)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "floor",
                                "type": "Number",
                                "description": "The minimum value for any time stamp."
                            }
                        ],
                        "return": {
                            "type": "TransformPart",
                            "description": "A TransformPart object that can be used to specify transform\n                characteristics."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "TP-fractiles_A",
                        "short_description": "Create series made up of the value that the specified percentage of values is below.\n    Returns a series for each fraction in the specified array.",
                        "description": "<p>The value in a time stamp in a returned series is the value at which the specified\n        fraction of the samples for that time stamp is below. For example, if the fraction is 0.5,\n        then the value in the time stamp is the value where half the values in the input series are\n        below (median).</p>",
                        "name": "fractiles(Array fractions)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "// returns a single series containing the median for each time stamp, which\n// means that half a time stamp's values are below the returned value \nfractiles([.5]) \n// returns four series, one series for each of the 25%, 50%, 75%, and 100% quartiles \nfractiles([.25, .5, .75, 1])\n// returns the median, 95% percentile, the max value\nfractiles([.50, .95, 1]) ",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "fractions",
                                "type": "Array of numbers",
                                "description": "The fractions to use on the input series."
                            }
                        ],
                        "return": {
                            "type": "TransformPart",
                            "description": "A TransformPart object that can be used to specify transform characteristics.\n                Contains one series for each fraction specified."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "TP-getResult",
                        "short_description": "Return the part of the result relevant to this transform.",
                        "description": "<p>The <span class=\"keyword apiname\">collect()</span> method must be called before the\n          <span class=\"keyword apiname\">execute()</span> method, and the <span class=\"keyword apiname\">execute()</span> method must be\n        called before calling the <span class=\"keyword apiname\">getResult()</span> method.</p>",
                        "name": "getResult()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var t = new sn_clotho.Transformer(drones);\nt.metric(\"mb_demo_mt_altitude\");\nvar avgTform = t.avg();\nt.execute();\nvar avgTformResult = avgTform.getResult();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "TransformResult",
                            "description": "Contains the transform results associated with this part of the\n                transform."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "TP-groupBy_S",
                        "short_description": "Specify a field to be used to group the data.",
                        "description": "<p>The <span class=\"keyword apiname\">groupBy()</span> method cannot be called after a transform has been\n        run.</p>",
                        "name": "groupBy(String field)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "field",
                                "type": "String",
                                "description": "A field in the table to be used to group the transform results."
                            }
                        ],
                        "return": {
                            "type": "TransformPart",
                            "description": "A TransformPart object that can be used to specify transform\n                characteristics."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "TP-interpolate_O",
                        "short_description": "Create a data value for a NaN data item by interpolating from adjacent data values.",
                        "description": "",
                        "name": "interpolate(Object count)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "count",
                                "type": "Object",
                                "description": "Specifies the number of data samples in each direction to check for a non NaN\n                value. If if a non NaN value is not found, NaN is used."
                            }
                        ],
                        "return": {
                            "type": "TransformPart",
                            "description": "A TransformPart object that can be used to specify transform\n                characteristics."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "TP-irq",
                        "short_description": "Perform an Interquartile range transform.",
                        "description": "<p>Creates a result set of four series. <ul class=\"ul\" id=\"TP-irq__ul_jdr_2r1_scb\">\n          <li class=\"li\">IQR, the median of all entries</li>\n\n          <li class=\"li\">IQR range, below Q1-1.5IQR, or above Q3+1.5IQR</li>\n\n          <li class=\"li\">Q1, the median of the smallest half of entries</li>\n\n          <li class=\"li\">Q3, the median of the largest half of entries </li>\n\n        </ul></p>",
                        "name": "iqr()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "TransformPart",
                            "description": "A TransformPart object that can be used to specify transform characteristics."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "TP-label_S",
                        "short_description": "Add a label for the resulting series.",
                        "description": "",
                        "name": "label(String label)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "label",
                                "type": "String",
                                "description": "The label for the transform results."
                            }
                        ],
                        "return": {
                            "type": "TransformPart",
                            "description": "A TransformPart object that can be used to specify transform\n                characteristics."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "TP-limit_O",
                        "short_description": "Returns at most the specified number of values, starting at the most recent non-NaN\n    value.",
                        "description": "",
                        "name": "limit(Object count)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "count",
                                "type": "Object",
                                "description": "A number of time stamps."
                            }
                        ],
                        "return": {
                            "type": "TransformPart",
                            "description": "A TransformPart object that can be used to specify transform\n                characteristics."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "TP-log_N",
                        "short_description": "Run a logarithm on the value in each time stamp where the result is the log of the\n    specified base for the time stamp value.",
                        "description": "",
                        "name": "log(Number base)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "base",
                                "type": "Number",
                                "description": "The base for the logarithm calculation."
                            }
                        ],
                        "return": {
                            "type": "TransformPart",
                            "description": "A TransformPart object that can be used to specify transform\n                characteristics."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "TP-max",
                        "short_description": "Returns a series with the maximum value for each time stamp.",
                        "description": "",
                        "name": "max()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "TransformPart",
                            "description": "A TransformPart object that can be used to specify transform\n                characteristics."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "TP-median",
                        "short_description": "Create a series containing the median of values for each time stamp across a set of\n    series.",
                        "description": "<p>If there are n series in the TranformPart object, then if n is odd, the (n / 2 + 1) value\n        for a time stamp is the median. If n is even, the average of the (n / 2) and (n / 2 + 1)\n        values for a time stamp is the median.</p>",
                        "name": "median()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "TransformPart",
                            "description": "A TransformPart object that can be used to specify transform\n                characteristics."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "TP-metric_S",
                        "short_description": "Specify the metric field to be used in the transform.",
                        "description": "<p>You can specify multiple metrics to be used in the transform. The\n          <span class=\"keyword apiname\">metric()</span> method cannot be called after the transform has been run.</p>",
                        "name": "metric(String metric)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "metric",
                                "type": "String",
                                "description": "Name of the metric field."
                            }
                        ],
                        "return": {
                            "type": "TransformPart",
                            "description": "A TransformPart object that can be used to specify transform\n                characteristics."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "TP-min",
                        "short_description": "Returns a series with the minimum value for each time stamp.",
                        "description": "",
                        "name": "min()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "TransformPart",
                            "description": "A TransformPart object that can be used to specify transform\n                characteristics."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "TP-mul_N",
                        "short_description": "Multiply the value in each time stamp by the specified number.",
                        "description": "",
                        "name": "mul(Number constant)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "constant",
                                "type": "Number",
                                "description": "The number by which to multiply the value of each time stamp."
                            }
                        ],
                        "return": {
                            "type": "TransformPart",
                            "description": "A TransformPart object that can be used to specify transform\n                characteristics."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "TP-partition_S_GDT_GDT",
                        "short_description": "Partition the series into intervals of the same duration.",
                        "description": "",
                        "name": "partition(String aggregator, GlideDateTime duration, GlideDateTime base)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "aggregator",
                                "type": "String",
                                "description": "The aggregator to use. Can be min, max, avg, or last."
                            },
                            {
                                "name": "duration",
                                "type": "GlideDateTime or an ISO 8601 formatted string",
                                "description": "The interval length."
                            },
                            {
                                "name": "base",
                                "type": "GlideDateTime or an ISO 8601 formatted string",
                                "description": "The zero offset for partitioning. For example, if you partition by day (24h),\n                then set the base to Monday at midnight in your time zone. If you partition by 30\n                days, then set the base to  1st day of the most recent month."
                            }
                        ],
                        "return": {
                            "type": "TransformPart",
                            "description": "A TransformPart object that can be used to specify transform\n                characteristics."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "TP-resample_N",
                        "short_description": "Specify the number of data points to include in the result.",
                        "description": "<p>Aligns a series with a fixed number of data points in the given range. If the original\n        series has more data points than specified, multiple values are averaged. If the original\n        series has fewer data points than specified, data points are added by interpolating data\n        points between existing data points.</p><p>You can use the <span class=\"keyword apiname\">resample()</span> method to reduce the number of samples in the\n        result to more closely match the number of samples you are going to display.</p>",
                        "name": "resample(Number count)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "count",
                                "type": "Number",
                                "description": "The number of samples to include in the result."
                            }
                        ],
                        "return": {
                            "type": "TransformPart",
                            "description": "A TransformPart object that can be used to specify transform\n                characteristics."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "TP-resample_N_N",
                        "short_description": "Specify the minimum and maximum number of samples to include in the result.",
                        "description": "<p>This method is useful when you are showing series with different time periods\n        (granularities).</p><p>This method determines the average number of points per series and if that fits between the\n        specified minimum and maximum, each series is resampled to that average number of points. If\n        the calculated average is greater than the maximum specified or smaller than the minimum\n        specified, the specified maximum or minimum is used.</p>",
                        "name": "resample(Number min, Number max)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "min",
                                "type": "Number",
                                "description": "The minimum number of samples to include in the result. If not enough samples\n                are available, interpolation is used to create samples."
                            },
                            {
                                "name": "max",
                                "type": "Number",
                                "description": "The maximum number of samples to include in the result."
                            }
                        ],
                        "return": {
                            "type": "TransformPart",
                            "description": "A TransformPart object that can be used to specify transform characteristics."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "TP-resample_S_GD",
                        "short_description": "Specify an aggregator to use to create a result set over the specified duration. The\n    aggregator can be LAST, AVG, MIN, or MAX.",
                        "description": "<p>Resamples the underlying data to the requested period. <ul class=\"ul\" id=\"TP-resample_S_GD__ul_y3z_pq1_scb\">\n          <li class=\"li\">When the time series is stored at a 1 minute interval and <samp class=\"ph codeph\">resample(AVG, new\n              GlideDuration(\"1:00\"))</samp> is called, the result will have one data point at\n            every hour reflecting the average of the previous 60 values. </li>\n\n          <li class=\"li\">When the period requested is smaller than the period of the data, interpolation is\n            used to calculate the intervening data points.</li>\n\n        </ul></p><p>You can use the <span class=\"keyword apiname\">resample()</span> method to reduce the number of samples in the\n        result to more closely match the number of samples you are going to display.</p>",
                        "name": "resample(String aggregator, GlideDuration duration)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "aggregator",
                                "type": "String",
                                "description": "Can be LAST, AVG, MIN, or MAX."
                            },
                            {
                                "name": "duration",
                                "type": "GlideDuration",
                                "description": "The time period for the result set."
                            }
                        ],
                        "return": {
                            "type": "TransformPart",
                            "description": "A TransformPart object that can be used to specify transform characteristics."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "TP-resample_S_N",
                        "short_description": "Specify an aggregator to use to create a result set of the specified size. The\n    aggregator can be LAST, AVG, MIN, or MAX.",
                        "description": "<p>You can use the <span class=\"keyword apiname\">resample()</span> method to reduce the number of samples in the\n        result to more closely match the number of samples you are going to display.</p>",
                        "name": "resample(String aggregator, Number numValues)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "aggregator",
                                "type": "String",
                                "description": "Can be LAST, AVG, MIN, or MAX."
                            },
                            {
                                "name": "numValues",
                                "type": "Number",
                                "description": "The number of samples to include in the result set.<p class=\"p\">When the number of values\n                  requested is greater than the number of values in the data for the requested time\n                  period, <span class=\"keyword apiname\">interpolate()</span> is used to add values between existing\n                  points to reach the requested number of values.</p>"
                            }
                        ],
                        "return": {
                            "type": "TransformPart",
                            "description": "A TransformPart object that can be used to specify transform characteristics."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "TP-round_N",
                        "short_description": "Round the value in each time stamp to the specified precision.",
                        "description": "<p>Performs this calculation on each\n        value.<pre class=\"pre codeblock\">(v / precision) * precision</pre></p>",
                        "name": "round(Number precision)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "precision",
                                "type": "Number",
                                "description": "The value to be used in the rounding calculation."
                            }
                        ],
                        "return": {
                            "type": "TransformPart",
                            "description": "A TransformPart object that can be used to specify transform\n                characteristics."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "TP-stddev",
                        "short_description": "Create a series containing the standard deviation of values for each time stamp across\n    a set of series.",
                        "description": "",
                        "name": "stddev()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "TransformPart",
                            "description": "A TransformPart object that can be used to specify transform\n                characteristics."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "TP-sub_O",
                        "short_description": "Subtract the specified number from the value in each time stamp.",
                        "description": "",
                        "name": "sub(Object constant)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "constant",
                                "type": "Object",
                                "description": "The number to subtract from the value in each time stamp."
                            }
                        ],
                        "return": {
                            "type": "TransformPart",
                            "description": "A TransformPart object that can be used to specify transform\n                characteristics."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "TP-sum",
                        "short_description": "Aggregate the selected metric series into one series containing the sum of all values\n    for each time stamp.",
                        "description": "",
                        "name": "sum()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "TransformPart",
                            "description": "A TransformPart object that can be used to specify transform\n                characteristics."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "TP-top_N",
                        "short_description": "Create a result set that for each time stamp returns the specified number of top\n    values. This method results in 'count' number of series. Each value retains the label of its\n    source series.",
                        "description": "",
                        "name": "top(Number count)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "count",
                                "type": "Number",
                                "description": "The number of series to return. The series are labeled 0 to count - 1."
                            }
                        ],
                        "return": {
                            "type": "TransformPart",
                            "description": "A TransformPart object that can be used to specify transform\n                characteristics."
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "The <span class=\"keyword apiname\">TransformResult</span> class can be used in scoped and global server scripts.\n      When using the Transformer class, use the <span class=\"keyword parmname\">sn_clotho</span> namespace\n      identifier.<br/><br/>There is no constructor for this class. TransformResult objects are returned by many\n        <span class=\"keyword apiname\">TransformPart</span> methods.<br/><br/>This class is part of the <span class=\"ph\">MetricBase</span> application.",
                "short_description": "Provides the result of a transformation run on time-series data.",
                "identifier": "TransformResultScopedAPI",
                "name": "TransformResult - Scoped, Global",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "TR-byGroup",
                        "short_description": "Returns an array of Data objects. Returns an error if no group was specified for the\n    transform.",
                        "description": "",
                        "name": "byGroup()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "Array",
                            "description": "An array of Data objects, with each object corresponding to a group."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "TR-getByLabel_S",
                        "short_description": "Returns the transformed data with the specified label.",
                        "description": "",
                        "name": "getByLabel(String label)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "label",
                                "type": "String",
                                "description": "The label that identifies the data to be retrieved."
                            }
                        ],
                        "return": {
                            "type": "Data",
                            "description": "The Data object with the transform results."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "TR-getData",
                        "short_description": "Returns a single Data object, or null if the result is empty.",
                        "description": "",
                        "name": "getData()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "Data",
                            "description": "The Data object with the transform results."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "TR-toArray",
                        "short_description": "Returns the transformed data as an array. This method turns a Data object into an\n    array.",
                        "description": "",
                        "name": "toArray()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "Array",
                            "description": "The Data object formatted as an array."
                        },
                        "extras": []
                    }
                ]
            }
        ]
    },
    {
        "identifier": "sn_cmdb-namespace",
        "namespace": "sn_cmdb",
        "classes": [
            {
                "description": "When using this class in a scoped application, use the <span class=\"keyword parmname\">sn_cmdb</span> namespace\n   identifier.",
                "short_description": "The <span class=\"keyword apiname\">IdentificationEngine</span> API uses the Identification and\n  Reconciliation framework to minimize the creation of duplicate configuration items (CIs) and to\n  reconcile CI attributes by only accepting information from authorized data sources when updating\n  the <span class=\"ph\">Configuration Management Database (CMDB)</span>.",
                "identifier": "IdentificationEngineScopedAPI",
                "name": "IdentificationEngine",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "IESS-createorUpdateCI_S_S",
                        "short_description": "<span class=\"ph\">Insert or update\n                configuration items and non-<span class=\"ph\">Configuration Management Database (CMDB)</span>\n                configuration items (classes not extending from cmdb_ci) in the <span class=\"ph\">CMDB</span> based on identification and reconciliation\n                rules. Use this API instead of updating the <span class=\"ph\">CMDB</span> directly.</span>",
                        "description": "",
                        "name": "createOrUpdateCI(String source, String input)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var payload = {\n\"items\": [\n{\n \"className\": \"cmdb_ci_win_server\", \n \"values\": {\n   \"chassis_type\": \"Desktop\",\n   \"os\": \"Windows 2012 R2 Datacenter\",\n   \"name\": \"Windows2012Server1\",\n   \"serial_number\": \"0000-0011-1690-8730-8636-5722-52\",\n   \"cpu_count\": \"1\"\n  },\n  \"lookup\": [\n  {\n     \"values\": {\n       \"valid\": \"true\",\n       \"serial_number\": \"0000-0011-1690-8730-8636-5722-52\",\n       \"serial_number_type\": \"bios\"\n      },\n     \"className\": \"cmdb_serial_number\"\n   },\n   {\n     \"values\": {\n       \"valid\": \"true\",\n       \"serial_number\": \"3311-9736-4988-9744-1749-4183-41\",\n       \"serial_number_type\": \"chassis\"\n      },\n     \"className\": \"cmdb_serial_number\"\n   }],\n\n    \"internal_id\": \"16777219\",\n    \"sys_object_source_info\": {\n      \"source_feed\": \"SN Discovery Feed 1\",\n      \"source_name\": \"ServiceNow\",\n      \"source_native_key\": \"16777219\",\n      \"source_recency_timestamp\": \"2019-10-18 08:31:23\"\n   }},\n   {  \n   \"className\": \"cmdb_ci_spkg\",\n   \"values\": {\n     \"name\": \"Windows 2012 R2 Datacenter\",\n     \"key\": \"Microsoft Windows Server 2012 R2 Datacenter_:::_NULL\"\n     },\n\n  \"related\": [\n    {\n      \"internal_id\": \"Microsoft Windows Server 2012 R2 Datacenter_:::_NULL|16777219\",\n      \"values\": {\n        \"name\": \"Windows 2012 R2 Datacenter-SAMLABVM52\"\n      },\n      \"className\": \"cmdb_software_instance\",\n      \"sys_object_source_info\": {\n        \"source_feed\": \"SN Discovery Feed 1\",\n        \"source_name\": \"ServiceNow\",\n        \"source_native_key\": \"Microsoft Windows Server 2012 R2 Datacenter_:::_NULL|16777219\"\n  }}]}, \n  {\n  \"className\": \"cmdb_ci_app_server_tomcat\",\n  \"values\": {\n    \"running_process_key_parameters\": \"/opt/OV/nonOV/tomcat/b/temp org.apache.catalina.startup.Bootstrap start\",\n    \"install_directory\": \"/opt/OV/nonOV/tomcat/b\",\n    \"name\": \"Tomcat@hpom9:3443\",\n    \"server_port\": \"8006\",\n    \"sys_class_name\": \"cmdb_ci_app_server_tomcat\"\n  },\n\n  \"internal_id\": \"tomcat_id\"\n  }],\n\n\"relations\": [\n  {\n    \"parent_id\": \"tomcat_id\",\n    \"child_id\": \"16777219\",\n    \"type\": \"Runs on::Runs\"\n  }],\n\n\"referenceItems\": [\n  {\n    \"referenceField\": \"installed_on\",\n    \"referenced\": \"16777219\",\n    \"referencedBy\": \"Microsoft Windows Server 2012 R2 Datacenter_:::_NULL|16777219\"\n  }]};\n\nvar jsonUntil = new JSON();\nvar input = jsonUntil.encode(payload);\nvar output = sn_cmdb.IdentificationEngine.createOrUpdateCI('ServiceNow', input);\ngs.info(output);\n",
                                "description": ""
                            },
                            {
                                "script": "var payload = \n              {items: [ \n                    {className:'cmdb_ci_web_server', \n                     values: {name:'apache linux den 200', \n                              running_process_command: 'xyz',  \n                              running_process_key_parameters: 'abc', \n                              tcp_port:'3452'}}, \n                    {className:'cmdb_ci_linux_server', \n                     values: {name:'lnux100', ram:'2048'}}],\n               relations:[{parent: 0, child: 1, type: 'Runs on::Runs'}]\n              };\n\nvar jsonUntil = new JSON();\nvar input = jsonUntil.encode(payload);\nvar output = sn_cmdb.IdentificationEngine.createOrUpdateCI('ServiceWatch', input);\ngs.info(output);\n",
                                "description": "Identify a dependent CI."
                            },
                            {
                                "script": "var payload = {items: [\n           {className:'cmdb_ci_netgear', \n               values: {name:'ny8500-nbxs08',\n                        ports:'1200'}, \n               lookup: [{className:'cmdb_serial_number',\n                            values:{serial_number:'1234ABCD', serial_number_type:'uuid',absent:'false',valid:'true'}},\n                        {className:'cmdb_serial_number',\n                            values:{serial_number:'3456EFGH', serial_number_type:'system',absent:'false',valid:'true'}}]}]};\n\nvar jsonUntil = new JSON();\nvar input = jsonUntil.encode(payload);\nvar output = sn_cmdb.IdentificationEngine.createOrUpdateCI('ServiceNow', input);\ngs.info(output);\n",
                                "description": "Identify an independent CI with lookup-based identification."
                            }
                        ],
                        "params": [
                            {
                                "name": "input",
                                "type": "String",
                                "description": "Required. Input payload. A JSON formatted string of\n              configuration items to add or update.\n              <pre class=\"pre codeblock\">\"input\" { \n \"items\": [Array],\n \"referenceItems\": [Array],\n \"relations\": [Array]\n}</pre>"
                            },
                            {
                                "name": "input.items",
                                "type": "Array",
                                "description": "Array of objects that define the items to add or\n              update.<pre class=\"pre codeblock\">\"items\": [\n  { \n    \"className\": \"String\", \n    \"internal_id\": \"String\", \n    \"lookup\": [Array],\n    \"related\": [Array],\n    \"settings\": {Object},\n    \"sys_object_source_info\": {Object},\n    \"values\": {Object}\n  }\n]</pre>"
                            },
                            {
                                "name": "input.items.className",
                                "type": "String",
                                "description": "Required. Class/table name, sys_class_name, of the\n              configuration item (CI) to create or update.<p class=\"p\">This value can be any <span class=\"ph\">CMDB</span> class/table, such as cmdb_ci_linux_server or\n                cmdb_ci_win_server.</p>"
                            },
                            {
                                "name": "input.items.internal_id",
                                "type": "String",
                                "description": "Unique item identifier for the associated payload.<p class=\"p\">This\n                can be any value, but must be unique within the payload.</p>"
                            },
                            {
                                "name": "input.items.lookup",
                                "type": "Array",
                                "description": "Identifies the top-level item containing the lookup\n              (lookup-based identification). These records are used to identify the configuration\n              item based on a lookup table that has a reference back to cmdb_ci.<p class=\"p\">For example:\n              </p>\n<pre class=\"pre codeblock\">\"lookup\": [\n  {\n    \"className\": \"String\",\n    \"internal_id\": \"String\",\n    \"sys_object_source_info\": {Object},\n    \"values\": {Object}\n  }\n]</pre>"
                            },
                            {
                                "name": "input.items.lookup.className",
                                "type": "String",
                                "description": "Required. Class/table name,\n              sys_class_name, of the configuration item (CI) to create or update.<p class=\"p\">This value can\n                be any <span class=\"ph\">CMDB</span> class/table, such as\n                cmdb_serial_number or cmdb_ci_network_adapter.</p>"
                            },
                            {
                                "name": "input.items.lookup.internal_id",
                                "type": "String",
                                "description": "Unique item identifier for the associated payload.<p class=\"p\">This\n                can be any value, but must be unique within the payload.</p>"
                            },
                            {
                                "name": "input.items.lookup.sys_object_source_info",
                                "type": "Object",
                                "description": "Unique CI identifier for a specific\n              source.<pre class=\"pre codeblock\">\"sys_object_source_info\": { \n  \"source_feed\": \"String\",\n  \"source_name\": \"String\",  \n  \"source_native_key\": \"String\",\n  \"source_recency_timestamp\": \"String\"\n} </pre>"
                            },
                            {
                                "name": "input.items.lookup.sys_object_source_info.source_feed",
                                "type": "String",
                                "description": "If the source can have\n              multiple feeds, use this field to provide the name of the feed sending this\n                item.<p class=\"p\">The data source generates this feed name. It can be any string that uniquely\n                identifies the source feed.</p>"
                            },
                            {
                                "name": "input.items.lookup.sys_object_source_info.source_name",
                                "type": "String",
                                "description": "Data source of the CI\n              information. This value must be one of the choice values defined for the\n              discovery_source field of the Configuration Item [cmdb_ci] table."
                            },
                            {
                                "name": "input.items.lookup.sys_object_source_info.source_native_key",
                                "type": "String",
                                "description": "Unique key/id for the\n              item from the source.<p class=\"p\">The data source generates this key. It can be any string that\n                is unique to the item.</p>"
                            },
                            {
                                "name": "input.items.lookup.sys_object_source_info.source_recency_timestamp",
                                "type": "String",
                                "description": "UTC date and\n              time that the item was scanned.<p class=\"p\">Format: YYYY-MM-DD hh:mm:ss</p>"
                            },
                            {
                                "name": "input.items.lookup.values",
                                "type": "Object",
                                "description": "Fields to create or update for this related item as name/value\n              pairs, where the name is the field name. For a reference field, the value must be the\n              referenced sys_id.<p class=\"p\">Field names and types depend on the fields selected by the user,\n                such\n              as:</p>\n<pre class=\"pre codeblock\" lang=\"json\" xml:lang=\"json\">\"values\": {\n  \"host_name\": \"String\",\n  \"ip_address\": \"String\",\n  \"name\": \"String\",\n  \"os_name\": \"String\",\n  \"sys_class_name\": \"String\"\n}</pre>"
                            },
                            {
                                "name": "input.items.related",
                                "type": "Array",
                                "description": "Reference to the top-level item that contains the related\n              list. Rules in the Related Entry [cmdb_related_entry] define what type of records can\n              be in this array. These records are used to add items based on a related table that\n              has a reference to the CI that is being identified. <p class=\"p\">The related table may or may\n                not extend cmdb_ci. These records are not used to identify the configuration\n                item.</p>\n<pre class=\"pre codeblock\">\"related\" [\n  {\n    \"className\": \"String\",\n    \"internal_id\": \"String\",\n    \"sys_object_source_info\": {Object},\n    \"values\": {Object}\n  }\n]</pre>"
                            },
                            {
                                "name": "input.items.related.className",
                                "type": "String",
                                "description": "Required. Class/table name,\n              sys_class_name, of the configuration item (CI) to create or update.<p class=\"p\">This value can\n                be any <span class=\"ph\">CMDB</span> class/table, such as\n                cmdb_software_instance or cmdb_key_value.</p>"
                            },
                            {
                                "name": "input.items.related.internal_id",
                                "type": "String",
                                "description": "Unique item identifier for the associated payload.<p class=\"p\">This\n                can be any value, but must be unique within the payload.</p>"
                            },
                            {
                                "name": "input.items.related.sys_object_source_info",
                                "type": "Object",
                                "description": "Unique CI identifier for a specific\n              source.<pre class=\"pre codeblock\">\"sys_object_source_info\": { \n  \"source_feed\": \"String\",\n  \"source_name\": \"String\",  \n  \"source_native_key\": \"String\",\n  \"source_recency_timestamp\": \"String\"\n} </pre>"
                            },
                            {
                                "name": "input.items.related.sys_object_source_info.source_feed",
                                "type": "String",
                                "description": "If the source can have\n              multiple feeds, use this field to provide the name of the feed sending this\n                item.<p class=\"p\">The data source generates this feed name. It can be any string that uniquely\n                identifies the source feed.</p>"
                            },
                            {
                                "name": "input.items.related.sys_object_source_info.source_name",
                                "type": "String",
                                "description": "Data source of the CI\n              information. This value must be one of the choice values defined for the\n              discovery_source field of the Configuration Item [cmdb_ci] table."
                            },
                            {
                                "name": "input.items.related.sys_object_source_info.source_native_key",
                                "type": "String",
                                "description": "Unique key/id for the\n              item from the source.<p class=\"p\">The data source generates this key. It can be any string that\n                is unique to the item.</p>"
                            },
                            {
                                "name": "input.items.related.sys_object_source_info.source_recency_timestamp",
                                "type": "String",
                                "description": "UTC date and\n              time that the item was scanned.<p class=\"p\">Format: YYYY-MM-DD hh:mm:ss</p>"
                            },
                            {
                                "name": "input.items.related.values",
                                "type": "Object",
                                "description": "Fields to create or update for this related item as name/value\n              pairs, where the name is the field name. For a reference field, the value must be the\n              referenced sys_id.<p class=\"p\">Field names and types depend on the fields selected by the user,\n                such\n              as:</p>\n<pre class=\"pre codeblock\" lang=\"json\" xml:lang=\"json\">\"values\": {\n  \"host_name\": \"String\",\n  \"ip_address\": \"String\",\n  \"name\": \"String\",\n  \"os_name\": \"String\",\n  \"sys_class_name\": \"String\"\n}</pre>"
                            },
                            {
                                "name": "input.items.settings",
                                "type": "Object",
                                "description": "Parameters that define the types of updates that are\n                permitted.<pre class=\"pre codeblock\">\"settings\": { \n \"updateWithoutDowngrade\": \"String\", \n \"updateWithoutSwitch\": \"String\",\n \"updateWithoutUpgrade\": \"String\"\n}</pre>"
                            },
                            {
                                "name": "input.items.settings.updateWithoutDowngrade",
                                "type": "String",
                                "description": "Flag that indicates whether\n                update and downgrade are both permitted for this item.<div class=\"p\">Valid values:<ul class=\"ul\" id=\"IESS-createorUpdateCI_S_S__ul_jdl_pfb_sjb\">\n                    <li class=\"li\">true: Update the item but downgrade is not permitted.</li>\n\n                    <li class=\"li\">false: Both item update and downgrade are permitted.</li>\n\n                  </ul>\n</div>\n<p class=\"p\">Default: false</p>"
                            },
                            {
                                "name": "input.items.settings.updateWithoutUpgrade",
                                "type": "String",
                                "description": "Flag that indicates whether\n                update and upgrade are both permitted for this item.<div class=\"p\">Valid values:<ul class=\"ul\" id=\"IESS-createorUpdateCI_S_S__ul_vqx_xfb_sjb\">\n                    <li class=\"li\">true: Update the item but upgrade is not permitted.</li>\n\n                    <li class=\"li\">false: Both item update and upgrade are permitted.</li>\n\n                  </ul>\n</div>\n<p class=\"p\">Default: false</p>"
                            },
                            {
                                "name": "input.items.settings.updateWithoutSwitch",
                                "type": "String",
                                "description": "Flag that indicates whether the\n                item can be updated and the class switched.<div class=\"p\">Valid values:<ul class=\"ul\" id=\"IESS-createorUpdateCI_S_S__ul_h4p_2gb_sjb\">\n                    <li class=\"li\">true: Update the item but class switching is not permitted.</li>\n\n                    <li class=\"li\">false: Both item update and class switching are permitted.</li>\n\n                  </ul>\n</div>\n<p class=\"p\">Default: false</p>"
                            },
                            {
                                "name": "input.items.sys_object_source_info",
                                "type": "Object",
                                "description": "Unique CI identifier for a specific\n              source.<pre class=\"pre codeblock\">\"sys_object_source_info\": { \n  \"source_feed\": \"String\",\n  \"source_name\": \"String\",  \n  \"source_native_key\": \"String\",\n  \"source_recency_timestamp\": \"String\"\n} </pre>"
                            },
                            {
                                "name": "input.items.sys_object_source_info.source_feed",
                                "type": "String",
                                "description": "If the source can have\n              multiple feeds, use this field to provide the name of the feed sending this\n                item.<p class=\"p\">The data source generates this feed name. It can be any string that uniquely\n                identifies the source feed.</p>"
                            },
                            {
                                "name": "input.items.sys_object_source_info.source_name",
                                "type": "String",
                                "description": "Data source of the CI\n              information. This value must be one of the choice values defined for the\n              discovery_source field of the Configuration Item [cmdb_ci] table."
                            },
                            {
                                "name": "input.items.sys_object_source_info.source_native_key",
                                "type": "String",
                                "description": "Unique key/id for the\n              item from the source.<p class=\"p\">The data source generates this key. It can be any string that\n                is unique to the item.</p>"
                            },
                            {
                                "name": "input.items.sys_object_source_info.source_recency_timestamp",
                                "type": "String",
                                "description": "UTC date and\n              time that the item was scanned.<p class=\"p\">Format: YYYY-MM-DD hh:mm:ss</p>"
                            },
                            {
                                "name": "input.items.values",
                                "type": "Object",
                                "description": "Fields to create or update for this related item as name/value\n              pairs, where the name is the field name. For a reference field, the value must be the\n              referenced sys_id.<p class=\"p\">Field names and types depend on the fields selected by the user,\n                such\n              as:</p>\n<pre class=\"pre codeblock\" lang=\"json\" xml:lang=\"json\">\"values\": {\n  \"host_name\": \"String\",\n  \"ip_address\": \"String\",\n  \"name\": \"String\",\n  \"os_name\": \"String\",\n  \"sys_class_name\": \"String\"\n}</pre>"
                            },
                            {
                                "name": "input.referenceItems",
                                "type": "Array",
                                "description": "Array of objects that define references between items\n              in the input payload.\n              <pre class=\"pre codeblock\">\"referenceItems\": [\n  { \n    \"referenced\": \"String\", \n    \"referencedBy\": \"String\", \n    \"referenceField\": \"String\" \n  }\n]</pre>"
                            },
                            {
                                "name": "input.referenceItems.referenced",
                                "type": "String",
                                "description": "The <span class=\"keyword parmname\">internal_id</span> defined\n              for the item being referenced by another item."
                            },
                            {
                                "name": "input.referenceItems.referencedBy",
                                "type": "String",
                                "description": "The <span class=\"keyword parmname\">internal_id</span>\n              defined for the item that references another item."
                            },
                            {
                                "name": "input.referenceItems.referenceField",
                                "type": "String",
                                "description": "Name of the reference field in the\n              class/table for the <span class=\"keyword parmname\">referencedBy</span> item."
                            },
                            {
                                "name": "input.relations",
                                "type": "Array",
                                "description": "Array of objects that specify relationships between items in\n              the input payload. <div class=\"p\">A node in this array can use either of two formats.<ul class=\"ul\" id=\"IESS-createorUpdateCI_S_S__d86981e669\">\n                  <li class=\"li\">The node can define a relationship between two top-level items (only) using\n                      <span class=\"keyword parmname\">parent</span> and <span class=\"keyword parmname\">child</span> name-value pairs,\n                    with values representing item indexes from the payload\n                      <span class=\"keyword parmname\">items</span> array.</li>\n\n                  <li class=\"li\">The node can define a relationship between any two items, including top-level,\n                    related, or lookup items, using <span class=\"keyword parmname\">parent_id</span> and\n                      <span class=\"keyword parmname\">child_id</span> key/value pairs, with values representing\n                      <span class=\"keyword parmname\">internal_id</span> values defined for those items.</li>\n\n                </ul>\n</div>\n<pre class=\"pre codeblock\">\"relations\": [\n  {\n    \"child\": Number,\n    \"parent\": Number,\n    \"type\": \"String\"\n  }\n]</pre>\n<pre class=\"pre codeblock\">\"relations\": [\n  {\n    \"child_id\": \"String\",\n    \"parent_id\": \"String\",\n    \"type\": \"String\"\n  }\n]</pre>"
                            },
                            {
                                "name": "input.relations.child",
                                "type": "Number",
                                "description": "Integer index of the CI object in the\n                <span class=\"keyword parmname\">items</span> array that represents the child in the\n              relationship."
                            },
                            {
                                "name": "input.relations.child_id",
                                "type": "String",
                                "description": "The <span class=\"keyword parmname\">internal_id</span> of the child\n              item in the relation."
                            },
                            {
                                "name": "input.relations.parent",
                                "type": "Number",
                                "description": "Integer index of the parent item in the\n                <span class=\"keyword parmname\">items</span> array."
                            },
                            {
                                "name": "input.relations.parent_id",
                                "type": "String",
                                "description": "The <span class=\"keyword parmname\">internal_id</span> of the parent\n              item in the relation (item.related or item.lookup item)."
                            },
                            {
                                "name": "input.relations.type",
                                "type": "String",
                                "description": "The type of relationship that exists between the parent\n              and child items. This must be a name field value from the CI Relationship Type\n              [cmdb_rel_type] table."
                            },
                            {
                                "name": "source",
                                "type": "String",
                                "description": "Identifies the data source of the CI information. This value must be one of the\n                choice values defined for the discovery_source field of the cmdb_ci table."
                            }
                        ],
                        "return": {
                            "type": "&lt;String&gt;.relations.sysId",
                            "description": "The sys_id of the dependent relationship\n                CI.<p class=\"p\">Data type: String</p>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "IESS-createOrUpdateCIEnhanced_S_S_S",
                        "short_description": "<span class=\"ph\">Insert or update\n                configuration items and non-<span class=\"ph\">Configuration Management Database (CMDB)</span>\n                configuration items (classes not extending from cmdb_ci) in the <span class=\"ph\">CMDB</span> based on identification and reconciliation\n                rules. Use this API instead of updating the <span class=\"ph\">CMDB</span> directly.</span>",
                        "description": "<p>In addition to providing the functionality of the <span class=\"keyword apiname\">createOrUpdateCI()</span>\n        method, this method also supports:</p><p><ul class=\"ul\" id=\"IESS-createOrUpdateCIEnhanced_S_S_S__ul_wyg_3f1_njb\">\n          <li class=\"li\">Handling partial payloads</li>\n\n          <li class=\"li\">Handling partial commits</li>\n\n          <li class=\"li\">Removing duplicate items within a payload</li>\n\n          <li class=\"li\">Generating output summaries</li>\n\n        </ul></p><p>For additional information on IRE and more detailed explanations of the data used by this\n        method, see \n        <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-servicenow-platform/page/product/configuration-management/concept/ire.html\" target=\"_blank\">Identification and Reconciliation\n          (IRE)</a>.</p>",
                        "name": "createOrUpdateCIEnhanced(String source, String input, Object options)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var payload = {\n\"items\": [\n{\n \"className\": \"cmdb_ci_win_server\", \n \"values\": {\n   \"chassis_type\": \"Desktop\",\n   \"os\": \"Windows 2012 R2 Datacenter\",\n   \"name\": \"Windows2012Server1\",\n   \"serial_number\": \"0000-0011-1690-8730-8636-5722-52\",\n   \"cpu_count\": \"1\"\n  },\n  \"lookup\": [\n  {\n     \"values\": {\n       \"valid\": \"true\",\n       \"serial_number\": \"0000-0011-1690-8730-8636-5722-52\",\n       \"serial_number_type\": \"bios\"\n      },\n     \"className\": \"cmdb_serial_number\"\n   },\n   {\n     \"values\": {\n       \"valid\": \"true\",\n       \"serial_number\": \"3311-9736-4988-9744-1749-4183-41\",\n       \"serial_number_type\": \"chassis\"\n      },\n     \"className\": \"cmdb_serial_number\"\n   }],\n\n    \"internal_id\": \"16777219\",\n    \"sys_object_source_info\": {\n      \"source_feed\": \"SN Discovery Feed 1\",\n      \"source_name\": \"ServiceNow\",\n      \"source_native_key\": \"16777219\",\n      \"source_recency_timestamp\": \"2019-10-18 08:31:23\"\n   }},\n   {  \n   \"className\": \"cmdb_ci_spkg\",\n   \"values\": {\n     \"name\": \"Windows 2012 R2 Datacenter\",\n     \"key\": \"Microsoft Windows Server 2012 R2 Datacenter_:::_NULL\"\n     },\n\n  \"related\": [\n    {\n      \"internal_id\": \"Microsoft Windows Server 2012 R2 Datacenter_:::_NULL|16777219\",\n      \"values\": {\n        \"name\": \"Windows 2012 R2 Datacenter-SAMLABVM52\"\n      },\n      \"className\": \"cmdb_software_instance\",\n      \"sys_object_source_info\": {\n        \"source_feed\": \"SN Discovery Feed 1\",\n        \"source_name\": \"ServiceNow\",\n        \"source_native_key\": \"Microsoft Windows Server 2012 R2 Datacenter_:::_NULL|16777219\"\n  }}] \n  \"settings\" : {\n        \"updateWithoutDowngrade\" : \"true\",\n        \"updateWithoutUpgrade\" : \"true\",\n        \"updateWithoutSwitch\" : \"true\"\n      }}, \n  {\n  \"className\": \"cmdb_ci_app_server_tomcat\",\n  \"values\": {\n    \"running_process_key_parameters\": \"/opt/OV/nonOV/tomcat/b/temp org.apache.catalina.startup.Bootstrap start\",\n    \"install_directory\": \"/opt/OV/nonOV/tomcat/b\",\n    \"name\": \"Tomcat@hpom9:3443\",\n    \"server_port\": \"8006\",\n    \"sys_class_name\": \"cmdb_ci_app_server_tomcat\"\n  },\n\n  \"internal_id\": \"tomcat_id\"\n  }],\n\n\"relations\": [\n  {\n    \"parent_id\": \"tomcat_id\",\n    \"child_id\": \"16777219\",\n    \"type\": \"Runs on::Runs\"\n  }],\n\n\"referenceItems\": [\n  {\n    \"referenceField\": \"installed_on\",\n    \"referenced\": \"16777219\",\n    \"referencedBy\": \"Microsoft Windows Server 2012 R2 Datacenter_:::_NULL|16777219\"\n  }]};\n\nvar input = new JSON().encode(payload);\nvar output = sn_cmdb.IdentificationEngine.createOrUpdateCIEnhanced('ServiceNow', input, {});",
                                "description": "This example shows how to import multiple CI entries."
                            }
                        ],
                        "params": [
                            {
                                "name": "input",
                                "type": "String",
                                "description": "Required. Input payload. A JSON formatted string of\n              configuration items to add or update.\n              <pre class=\"pre codeblock\">\"input\" { \n \"items\": [Array],\n \"referenceItems\": [Array],\n \"relations\": [Array]\n}</pre>"
                            },
                            {
                                "name": "input.items",
                                "type": "Array",
                                "description": "Array of objects that define the items to add or\n              update.<pre class=\"pre codeblock\">\"items\": [\n  { \n    \"className\": \"String\", \n    \"internal_id\": \"String\", \n    \"lookup\": [Array],\n    \"related\": [Array],\n    \"settings\": {Object},\n    \"sys_object_source_info\": {Object},\n    \"values\": {Object}\n  }\n]</pre>"
                            },
                            {
                                "name": "input.items.className",
                                "type": "String",
                                "description": "Required. Class/table name, sys_class_name, of the\n              configuration item (CI) to create or update.<p class=\"p\">This value can be any <span class=\"ph\">CMDB</span> class/table, such as cmdb_ci_linux_server or\n                cmdb_ci_win_server.</p>"
                            },
                            {
                                "name": "input.items.internal_id",
                                "type": "String",
                                "description": "Unique item identifier for the associated payload.<p class=\"p\">This\n                can be any value, but must be unique within the payload.</p>"
                            },
                            {
                                "name": "input.items.lookup",
                                "type": "Array",
                                "description": "Identifies the top-level item containing the lookup\n              (lookup-based identification). These records are used to identify the configuration\n              item based on a lookup table that has a reference back to cmdb_ci.<p class=\"p\">For example:\n              </p>\n<pre class=\"pre codeblock\">\"lookup\": [\n  {\n    \"className\": \"String\",\n    \"internal_id\": \"String\",\n    \"sys_object_source_info\": {Object},\n    \"values\": {Object}\n  }\n]</pre>"
                            },
                            {
                                "name": "input.items.lookup.className",
                                "type": "String",
                                "description": "Required. Class/table name,\n              sys_class_name, of the configuration item (CI) to create or update.<p class=\"p\">This value can\n                be any <span class=\"ph\">CMDB</span> class/table, such as\n                cmdb_serial_number or cmdb_ci_network_adapter.</p>"
                            },
                            {
                                "name": "input.items.lookup.internal_id",
                                "type": "String",
                                "description": "Unique lookup item identifier for the associated payload.<p class=\"p\">This can be any\n                value, but must be unique within the payload.</p>"
                            },
                            {
                                "name": "input.items.lookup.sys_object_source_info",
                                "type": "Object",
                                "description": "Defines a unique CI identifier for a specific data source. Different sources may\n              have different name-value pairs for the same\n              CI.<pre class=\"pre codeblock\">\"sys_object_source_info\": { \n  \"source_feed\": \"String\",\n  \"source_name\": \"String\",  \n  \"source_native_key\": \"String\",\n  \"source_recency_timestamp\": \"String\"\n} </pre>"
                            },
                            {
                                "name": "input.items.lookup.sys_object_source_info.source_feed",
                                "type": "String",
                                "description": "If the source can have multiple feeds, use this field to provide the name of the\n              feed sending this item.<p class=\"p\">The data source generates this feed name. It can be any\n                string that uniquely identifies the source feed.</p>"
                            },
                            {
                                "name": "input.items.lookup.sys_object_source_info.source_name",
                                "type": "String",
                                "description": "Data source of the CI information. This value must be one of the choice values\n              defined for the discovery_source field of the Configuration Item [cmdb_ci] table."
                            },
                            {
                                "name": "input.items.lookup.sys_object_source_info.source_native_key",
                                "type": "String",
                                "description": "Unique key-id for the item from the source.<p class=\"p\">The data source generates this key.\n                It can be any string that is unique to the item.</p>"
                            },
                            {
                                "name": "input.items.lookup.sys_object_source_info.source_recency_timestamp",
                                "type": "String",
                                "description": "UTC date/time that the item was scanned.<p class=\"p\">Format: YYYY-MM-DD\n              hh:mm:ss</p>"
                            },
                            {
                                "name": "input.items.lookup.values",
                                "type": "Object",
                                "description": "Field information for the CI as name-value pairs, where the name is the field\n              name. When updating reference fields, the value must be the referenced sys_id.<p class=\"p\">Field\n                names and types depend on the fields selected by the user, such\n              as:</p>\n<pre class=\"pre codeblock\" lang=\"json\" xml:lang=\"json\">\"values\": {\n  \"serial_number\": \"String\",\n  \"serial_number_type\": \"String\",\n  \"valid\": \"String\",\n  \"ip_address\": \"String\",\n  \"mac_address\": \"String\"\n}</pre>"
                            },
                            {
                                "name": "input.items.related",
                                "type": "Array",
                                "description": "Reference to the top-level item that contains the related\n              list. Rules in the Related Entry [cmdb_related_entry] define what type of records can\n              be in this array. These records are used to add items based on a related table that\n              has a reference to the CI that is being identified. <p class=\"p\">The related table may or may\n                not extend cmdb_ci. These records are not used to identify the configuration\n                item.</p>\n<pre class=\"pre codeblock\">\"related\" [\n  {\n    \"className\": \"String\",\n    \"internal_id\": \"String\",\n    \"sys_object_source_info\": {Object},\n    \"values\": {Object}\n  }\n]</pre>"
                            },
                            {
                                "name": "input.items.related.className",
                                "type": "String",
                                "description": "Required. Class/table name,\n              sys_class_name, of the configuration item (CI) to create or update.<p class=\"p\">This value can\n                be any <span class=\"ph\">CMDB</span> class/table, such as\n                cmdb_software_instance or cmdb_key_value.</p>"
                            },
                            {
                                "name": "input.items.related.internal_id",
                                "type": "String",
                                "description": "Unique identifier for this related item in this payload. Can be any value, but\n              must be unique within the payload."
                            },
                            {
                                "name": "input.items.related.sys_object_source_info",
                                "type": "Object",
                                "description": "Object that makes up a unique CI identifier for a specified data source.\n              Different sources may have different name-value pairs for the same\n              CI.<pre class=\"pre codeblock\">\"sys_object_source_info\": { \n  \"source_feed\": \"String\",\n  \"source_name\": \"String\",  \n  \"source_native_key\": \"String\",\n  \"source_recency_timestamp\": \"String\"\n} </pre>"
                            },
                            {
                                "name": "input.items.related.sys_object_source_info.source_feed",
                                "type": "String",
                                "description": "If the source can have multiple feeds, use this field to provide the name of the\n              feed sending this item.<p class=\"p\">The data source generates this feed name. It can be any\n                string that uniquely identifies the source feed.</p>"
                            },
                            {
                                "name": "input.items.related.sys_object_source_info.source_name",
                                "type": "String",
                                "description": "Identifies the data source of the CI information. This value must be one of the\n              choice values defined for the discovery_source field of the Configuration Item\n              [cmdb_ci] table."
                            },
                            {
                                "name": "input.items.related.sys_object_source_info.source_native_key",
                                "type": "String",
                                "description": "Unique key/id from the source for the related item. <p class=\"p\">The data source generates\n                this key. It can be any string that is unique to the item.</p>"
                            },
                            {
                                "name": "input.items.related.sys_object_source_info.source_recency_timestamp",
                                "type": "String",
                                "description": "UTC date and time that the item was scanned.<p class=\"p\">Format: <samp class=\"ph codeph\">YYYY-MM-DD\n                  hh:mm:ss</samp></p>"
                            },
                            {
                                "name": "input.items.related.values",
                                "type": "Object",
                                "description": "Fields to create or update for this related item as name/value\n              pairs, where the name is the field name. For a reference field, the value must be the\n              referenced sys_id.<p class=\"p\">Field names and types depend on the fields selected by the user,\n                such\n              as:</p>\n<pre class=\"pre codeblock\" lang=\"json\" xml:lang=\"json\">\"values\": {\n  \"host_name\": \"String\",\n  \"ip_address\": \"String\",\n  \"name\": \"String\",\n  \"os_name\": \"String\",\n  \"sys_class_name\": \"String\"\n}</pre>"
                            },
                            {
                                "name": "input.items.settings",
                                "type": "Object",
                                "description": "Parameters that define the types of updates that are\n              permitted.<pre class=\"pre codeblock\">\"settings\": { \n  \"updateWithoutDowngrade\": \"String\", \n  \"updateWithoutSwitch\": \"String\",\n  \"updateWithoutUpgrade\": \"String\"\n}</pre>"
                            },
                            {
                                "name": "input.items.settings.updateWithoutDowngrade",
                                "type": "String",
                                "description": "Flag that indicates whether\n              update and downgrade are both permitted for this item.<div class=\"p\">Valid values:<ul class=\"ul\" id=\"IESS-createOrUpdateCIEnhanced_S_S_S__d86981e452\">\n                  <li class=\"li\">true: Update the item but downgrade is not permitted.</li>\n\n                  <li class=\"li\">false: Both item update and downgrade are permitted.</li>\n\n                </ul>\n</div>\n<p class=\"p\">Default: false</p>"
                            },
                            {
                                "name": "input.items.settings.updateWithoutSwitch",
                                "type": "String",
                                "description": "Flag that indicates whether the\n              item can be updated and the class switched.<div class=\"p\">Valid values:<ul class=\"ul\" id=\"IESS-createOrUpdateCIEnhanced_S_S_S__d86981e476\">\n                  <li class=\"li\">true: Update the item but class switching is not permitted.</li>\n\n                  <li class=\"li\">false: Both item update and class switching are permitted.</li>\n\n                </ul>\n</div>\n<p class=\"p\">Default: false</p>"
                            },
                            {
                                "name": "input.items.settings.updateWithoutUpgrade",
                                "type": "String",
                                "description": "Flag that indicates whether update\n              and upgrade are both permitted for this item.<div class=\"p\">Valid values:<ul class=\"ul\" id=\"IESS-createOrUpdateCIEnhanced_S_S_S__d86981e500\">\n                  <li class=\"li\">true: Update the item but upgrade is not permitted.</li>\n\n                  <li class=\"li\">false: Both item update and upgrade are permitted.</li>\n\n                </ul>\n</div>\n<p class=\"p\">Default: false</p>"
                            },
                            {
                                "name": "input.items.sys_object_source_info",
                                "type": "Object",
                                "description": "Unique CI identifier for a specific\n              source.<pre class=\"pre codeblock\">\"sys_object_source_info\": { \n  \"source_feed\": \"String\",\n  \"source_name\": \"String\",  \n  \"source_native_key\": \"String\",\n  \"source_recency_timestamp\": \"String\"\n} </pre>"
                            },
                            {
                                "name": "input.items.sys_object_source_info.source_feed",
                                "type": "String",
                                "description": "If the source can have\n              multiple feeds, use this field to provide the name of the feed sending this\n                item.<p class=\"p\">The data source generates this feed name. It can be any string that uniquely\n                identifies the source feed.</p>"
                            },
                            {
                                "name": "input.items.sys_object_source_info.source_name",
                                "type": "String",
                                "description": "Data source of the CI\n              information. This value must be one of the choice values defined for the\n              discovery_source field of the Configuration Item [cmdb_ci] table."
                            },
                            {
                                "name": "input.items.sys_object_source_info.source_native_key",
                                "type": "String",
                                "description": "Unique key/id for the\n              item from the source.<p class=\"p\">The data source generates this key. It can be any string that\n                is unique to the item.</p>"
                            },
                            {
                                "name": "input.items.sys_object_source_info.source_recency_timestamp",
                                "type": "String",
                                "description": "UTC date and\n              time that the item was scanned.<p class=\"p\">Format: YYYY-MM-DD hh:mm:ss</p>"
                            },
                            {
                                "name": "input.items.values",
                                "type": "Object",
                                "description": "Fields to create or update for this related item as name/value\n              pairs, where the name is the field name. For a reference field, the value must be the\n              referenced sys_id.<p class=\"p\">Field names and types depend on the fields selected by the user,\n                such\n              as:</p>\n<pre class=\"pre codeblock\" lang=\"json\" xml:lang=\"json\">\"values\": {\n  \"host_name\": \"String\",\n  \"ip_address\": \"String\",\n  \"name\": \"String\",\n  \"os_name\": \"String\",\n  \"sys_class_name\": \"String\"\n}</pre>"
                            },
                            {
                                "name": "input.referenceItems",
                                "type": "Array",
                                "description": "Array of objects that define references between items\n              in the input payload.\n              <pre class=\"pre codeblock\">\"referenceItems\": [\n  { \n    \"referenced\": \"String\", \n    \"referencedBy\": \"String\", \n    \"referenceField\": \"String\" \n  }\n]</pre>"
                            },
                            {
                                "name": "input.referenceItems.referenced",
                                "type": "String",
                                "description": "The <span class=\"keyword parmname\">internal_id</span> defined\n              for the item being referenced by another item."
                            },
                            {
                                "name": "input.referenceItems.referencedBy",
                                "type": "String",
                                "description": "The <span class=\"keyword parmname\">internal_id</span>\n              defined for the item that references another item."
                            },
                            {
                                "name": "input.referenceItems.referenceField",
                                "type": "String",
                                "description": "Name of the reference field in the\n              class/table for the <span class=\"keyword parmname\">referencedBy</span> item."
                            },
                            {
                                "name": "input.relations",
                                "type": "Array",
                                "description": "Array of objects that specify relationships between items in\n              the input payload. <div class=\"p\">A node in this array can use either of two formats.<ul class=\"ul\" id=\"IESS-createOrUpdateCIEnhanced_S_S_S__d86981e669\">\n                  <li class=\"li\">The node can define a relationship between two top-level items (only) using\n                      <span class=\"keyword parmname\">parent</span> and <span class=\"keyword parmname\">child</span> name-value pairs,\n                    with values representing item indexes from the payload\n                      <span class=\"keyword parmname\">items</span> array.</li>\n\n                  <li class=\"li\">The node can define a relationship between any two items, including top-level,\n                    related, or lookup items, using <span class=\"keyword parmname\">parent_id</span> and\n                      <span class=\"keyword parmname\">child_id</span> key/value pairs, with values representing\n                      <span class=\"keyword parmname\">internal_id</span> values defined for those items.</li>\n\n                </ul>\n</div>\n<pre class=\"pre codeblock\">\"relations\": [\n  {\n    \"child\": Number,\n    \"parent\": Number,\n    \"type\": \"String\"\n  }\n]</pre>\n<pre class=\"pre codeblock\">\"relations\": [\n  {\n    \"child_id\": \"String\",\n    \"parent_id\": \"String\",\n    \"type\": \"String\"\n  }\n]</pre>"
                            },
                            {
                                "name": "input.relations.child",
                                "type": "Number",
                                "description": "Integer index of the CI object in the\n                <span class=\"keyword parmname\">items</span> array that represents the child in the\n              relationship."
                            },
                            {
                                "name": "input.relations.child_id",
                                "type": "String",
                                "description": "The <span class=\"keyword parmname\">internal_id</span> of the child\n              item in the relation."
                            },
                            {
                                "name": "input.relations.parent",
                                "type": "Number",
                                "description": "Integer index of the parent item in the\n                <span class=\"keyword parmname\">items</span> array."
                            },
                            {
                                "name": "input.relations.parent_id",
                                "type": "String",
                                "description": "The <span class=\"keyword parmname\">internal_id</span> of the parent\n              item in the relation (item.related or item.lookup item)."
                            },
                            {
                                "name": "input.relations.type",
                                "type": "String",
                                "description": "The type of relationship that exists between the parent\n              and child items. This must be a name field value from the CI Relationship Type\n              [cmdb_rel_type] table."
                            },
                            {
                                "name": "options",
                                "type": "Object",
                                "description": "Optional, but {} or null must be passed-in. Options to enable\n              or disable features.<div class=\"note note\"><span class=\"notetitle\">Note:</span> By default or if <span class=\"keyword parmname\">partial_payloads</span> is\n                set to true, both <span class=\"keyword parmname\">partial_commits</span> and\n                  <span class=\"keyword parmname\">deduplicate_payloads</span> are enabled, even if they are set to\n                false, as those features are essential for partial payloads\n              functionality.</div>\n<pre class=\"pre codeblock\">\"options\": { \n \"deduplicate_payloads\": \"Boolean\",\n \"generate_summary\": \"Boolean\", \n \"partial_commits\": \"Boolean\", \n \"partial_payloads\": \"Boolean\"\n}</pre>"
                            },
                            {
                                "name": "options.deduplicate_payloads",
                                "type": "Boolean",
                                "description": "Flag that indicates whether duplicate\n              items are merged or considered errors.<p class=\"p\">Valid values:</p>\n<ul class=\"ul\" id=\"IESS-createOrUpdateCIEnhanced_S_S_S__d86981e811\">\n                <li class=\"li\">true: Merge duplicate items.</li>\n\n                <li class=\"li\">false: Consider duplicate items as errors.</li>\n\n              </ul>\n<p class=\"p\">Default: true</p>"
                            },
                            {
                                "name": "options.generate_summary",
                                "type": "Boolean",
                                "description": "Flag that indicates whether the returned\n              results contain summary information. For the details of the returned summary\n              information, see <span class=\"keyword parmname\">&lt;String&gt;.summary</span> in the return results\n                table.<p class=\"p\">Valid values:</p>\n<ul class=\"ul\" id=\"IESS-createOrUpdateCIEnhanced_S_S_S__d86981e838\">\n                <li class=\"li\">true: Include summary information.</li>\n\n                <li class=\"li\">false: Do not include summary information.</li>\n\n              </ul>\n<p class=\"p\">Default: false</p>"
                            },
                            {
                                "name": "options.partial_commits",
                                "type": "Boolean",
                                "description": "Flag that indicates whether partial commit\n              support is enabled. For additional information on partial commits, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-servicenow-platform/page/product/configuration-management/concept/ire.html\" target=\"_blank\">Enhanced IRE\n                features</a>.<p class=\"p\">Valid values:</p>\n<ul class=\"ul\" id=\"IESS-createOrUpdateCIEnhanced_S_S_S__d86981e865\">\n                <li class=\"li\">true: Partial commit enabled.</li>\n\n                <li class=\"li\">false: Partial commit disabled.</li>\n\n              </ul>\n<p class=\"p\">Default: true</p>"
                            },
                            {
                                "name": "options.partial_payloads",
                                "type": "Boolean",
                                "description": "Flag that indicates whether partial payload\n              support is enabled. For additional information on partial payloads, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-servicenow-platform/page/product/configuration-management/concept/ire.html\" target=\"_blank\">Enhanced IRE features</a> and\n                <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-servicenow-platform/page/product/configuration-management/task/create-ire-data-source-rule.html\" target=\"_blank\">Create an IRE data source\n                rule</a>.<p class=\"p\">Valid values:</p>\n<ul class=\"ul\" id=\"IESS-createOrUpdateCIEnhanced_S_S_S__d86981e895\">\n                <li class=\"li\">true: Partial payload enabled.</li>\n\n                <li class=\"li\">false: Partial payload disabled.</li>\n\n              </ul>\n<p class=\"p\">Default: true</p>"
                            },
                            {
                                "name": "source",
                                "type": "String",
                                "description": "Data source of the CI information. This value must be one of\n              the choice values defined for the discovery_source field of the Configuration Item\n              [cmdb_ci] table."
                            }
                        ],
                        "return": {
                            "type": "&lt;String&gt;.summary.&lt;class_name&gt;.warningCount",
                            "description": "Number of items that generated\n              a warning when processed.<p class=\"p\">Data type: Number</p>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "IESS-identifyCI_S",
                        "short_description": "Determines the operation (insert/update) that will be performed with the specified\n    payload without committing the operation in the database.",
                        "description": "<p>This works just like <span class=\"keyword apiname\">createOrUpdateCI()</span>, but does not commit the\n        result.</p>",
                        "name": "identifyCI(String jsonString)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "jsonString",
                                "type": "String",
                                "description": "A JSON formatted string of configuration items to be added or updated. Each\n                input string is in the format Â 'items: [{}], relations:[{}]', where each item within\n                the items and relations lists contains name-value pairs. <div class=\"p\">The possible name-value\n                  pairs within the items list are:<ul class=\"ul\" id=\"IESS-identifyCI_S__d88699e89\">\n                    <li class=\"li\">className - the sys_class_name of the CI to be created or updated.</li>\n\n                    <li class=\"li\">values:{} - the field information for the CI as name-value pairs, where the\n                      name is the field name.</li>\n\n                    <li class=\"li\">lookup:[{}] - a list of records with each item having name-value pairs like\n                      the items list. </li>\n\n                  </ul>\n</div>\n<div class=\"p\">The possible name-value pairs within the relations list are:<ul class=\"ul\" id=\"IESS-identifyCI_S__d88699e102\">\n                    <li class=\"li\">parent - index of the parent item in the dependency relation</li>\n\n                    <li class=\"li\">child - index of the child item in the dependency relation</li>\n\n                    <li class=\"li\">type - the relationship type. This is one of the name field values from the\n                      cmdb_rel_type table.</li>\n\n                  </ul>\n</div>"
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "A JSON formatted string that is a list of results. Each result string is in the\n                format Â 'items: [{}], relations:[{}]', where each item within the items and\n                relations lists contains name-value pairs. <div class=\"p\">The possible name-value pairs within\n                  the items list are: <ul class=\"ul\" id=\"IESS-identifyCI_S__d88699e153\">\n                    <li class=\"li\">className- the sys_class_name for the CI that was updated or created.</li>\n\n                    <li class=\"li\">operation, which is one of INSERT, UPDATE, UPDATE_WITH_UPGRADE,\n                      UPDATE_WITH_DOWNGRADE, UPDATE_WITH_SWITCH, DELETE, NO_CHANGE</li>\n\n                    <li class=\"li\">sysId - the sys_id of the CI that was updated or created.</li>\n\n                    <li class=\"li\">relatedSysIds - a list of sys_id values of CIs used during lookup based\n                      identification.</li>\n\n                    <li class=\"li\">identifierEntrySysId - sys_id of identifier entry used during matching.</li>\n\n                    <li class=\"li\">errors - a list of errors in the format of (error, message string)</li>\n\n                    <li class=\"li\">duplicateIndices - a list of indexes of items that are duplicates of the\n                      current item.</li>\n\n                    <li class=\"li\">identificationAttempts - a list of attempts in the format of (attributes,\n                      identiferName, attemptResult, searchOnTable) where <ul class=\"ul\" id=\"IESS-identifyCI_S__d88699e179\">\n                        <li class=\"li\">attributes - the attributes of identifier entry used during\n                          identification</li>\n\n                        <li class=\"li\">identiferName - the CI identifier to which this identifier entry\n                          belongs</li>\n\n                        <li class=\"li\">attemptResult - one of SKIPPED, NO_MATCH, MATCHED, MULTI_MATCH</li>\n\n                        <li class=\"li\">searchOnTable - the table searched during the identification\n                          process.</li>\n\n                      </ul>\n</li>\n\n                  </ul>\n</div>\n<div class=\"p\">The possible name-value pairs within the relations list are:<ul class=\"ul\" id=\"IESS-identifyCI_S__d88699e196\">\n                    <li class=\"li\">className - the relationship CI's class name and is always cmdb_rel_ci</li>\n\n                    <li class=\"li\">operation - one of INSERT, UPDATE, NO_CHANGE</li>\n\n                    <li class=\"li\">sysId - the sys_id of the relationship CI inserted or updated</li>\n\n                  </ul>\n</div>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "IESS-identifyCIEnhanced_S_S_O",
                        "short_description": "Determines the <span class=\"ph\">Configuration Management Database (CMDB)</span> operation (insert/update)\n    to perform with the specified payload (request body), without committing the operations in the\n    database.",
                        "description": "<p>Use this method to simulate submission of a payload.</p><p>This method is similar to the <a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/sn_cmdb-namespace/IdentificationEngineScopedAPI#IESS-identifyCI_S\" title=\"Determines the operation (insert/update) that will be performed with the specified payload without committing the operation in the database.\">IdentificationEngine - identifyCI(String jsonString)</a> method, however it also\n        supports the following functionality:<ul class=\"ul\" id=\"IESS-identifyCIEnhanced_S_S_O__ul_scj_jvk_xlb\">\n          <li class=\"li\">Partial payloads <ul class=\"ul\" id=\"IESS-identifyCIEnhanced_S_S_O__ul_x4s_nvk_xlb\">\n              <li class=\"li\">In case of an item having a warning or error, indicates if an item operation is\n                INSERT_AS_PARTIAL or INSERT_INCOMPLETE. </li>\n\n              <li class=\"li\">Returns the sys_ids of partial payloads that were merged with existing partial\n                payloads. </li>\n\n            </ul>\n</li>\n\n          <li class=\"li\">Supports payload deduplicate feature. </li>\n\n          <li class=\"li\">Generates a summary.</li>\n\n        </ul></p>",
                        "name": "identifyCIEnhanced(String source, String input, Object options)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var payload = {\n\"items\": [\n{\n\"className\": \"cmdb_ci_win_server\",\n\"values\": {\n   \"chassis_type\": \"Desktop\",\n   \"os\": \"Windows 2012 R2 Datacenter\",\n   \"name\": \"Windows2012Server1\",\n   \"serial_number\": \"0000-0011-1690-8730-8636-5722-52\",\n   \"cpu_count\": \"1\"\n  },\n  \"lookup\": [\n  {\n     \"values\": {\n       \"valid\": \"true\",\n       \"serial_number\": \"0000-0011-1690-8730-8636-5722-52\",\n       \"serial_number_type\": \"bios\"\n      },\n     \"className\": \"cmdb_serial_number\"\n   },\n   {\n     \"values\": {\n       \"valid\": \"true\",\n       \"serial_number\": \"3311-9736-4988-9744-1749-4183-41\",\n       \"serial_number_type\": \"chassis\"\n      },\n     \"className\": \"cmdb_serial_number\"\n   }],\n \n    \"internal_id\": \"16777219\",\n    \"sys_object_source_info\": {\n      \"source_feed\": \"SN Discovery Feed 1\",\n      \"source_name\": \"ServiceNow\",\n      \"source_native_key\": \"16777219\",\n      \"source_recency_timestamp\": \"2019-10-18 08:31:23\"\n   }},\n   {\n   \"className\": \"cmdb_ci_spkg\",\n   \"values\": {\n     \"name\": \"Windows 2012 R2 Datacenter\",\n     \"key\": \"Microsoft Windows Server 2012 R2 Datacenter_:::_NULL\"\n     },\n \n  \"related\": [\n    {\n     \"internal_id\": \"Microsoft Windows Server 2012 R2 Datacenter_:::_NULL|16777219\",\n      \"values\": {\n        \"name\": \"Windows 2012 R2 Datacenter-SAMLABVM52\"\n      },\n      \"className\": \"cmdb_software_instance\",\n      \"sys_object_source_info\": {\n        \"source_feed\": \"SN Discovery Feed 1\",\n        \"source_name\": \"ServiceNow\",\n        \"source_native_key\": \"Microsoft Windows Server 2012 R2 Datacenter_:::_NULL|16777219\"\n  }},\n  {\n    \"internal_id\": \"Microsoft Windows Server 2012 R2 Datacenter_:::_NULL|16777229\",\n    \"values\": {\n    },\n    \"className\": \"cmdb_software_instance\",\n    \"sys_object_source_info\": {\n      \"source_feed\": \"SN Discovery Feed 1\",\n      \"source_name\": \"ServiceNow\",\n      \"source_native_key\": \"Microsoft Windows Server 2012 R2 Datacenter_:::_NULL|16777229\"\n  }}\n],\n  \"settings\" : {\n        \"updateWithoutDowngrade\" : \"true\",\n        \"updateWithoutUpgrade\" : \"true\",\n        \"updateWithoutSwitch\" : \"true\"\n      }},\n  {\n  \"className\": \"cmdb_ci_app_server_tomcat\",\n  \"values\": {\n    \"running_process_key_parameters\": \"/opt/OV/nonOV/tomcat/b/temp org.apache.catalina.startup.Bootstrap start\",\n    \"install_directory\": \"/opt/OV/nonOV/tomcat/b\",\n    \"name\": \"Tomcat@hpom9:3443\",\n    \"server_port\": \"8006\",\n    \"sys_class_name\": \"cmdb_ci_app_server_tomcat\"\n  },\n \n  \"internal_id\": \"tomcat_id\"\n  }],\n \n\"relations\": [\n  {\n    \"parent_id\": \"tomcat_id\",\n    \"child_id\": \"16777219\",\n    \"type\": \"Runs on::Runs\"\n  }],\n \n\"referenceItems\": [\n  {\n    \"referenceField\": \"installed_on\",\n    \"referenced\": \"16777219\",\n    \"referencedBy\": \"Microsoft Windows Server 2012 R2 Datacenter_:::_NULL|16777219\"\n  }]};\n \nvar input = new JSON().encode(payload);\nvar output = sn_cmdb.IdentificationEngine.identifyCIEnhanced('ServiceNow', input, {});",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "input",
                                "type": "String",
                                "description": "Required. Input payload. A JSON formatted string of\n              configuration items to add or update.\n              <pre class=\"pre codeblock\">\"input\" { \n \"items\": [Array],\n \"referenceItems\": [Array],\n \"relations\": [Array]\n}</pre>"
                            },
                            {
                                "name": "input.items",
                                "type": "Array",
                                "description": "Array of objects that define the items to add or\n              update.<pre class=\"pre codeblock\">\"items\": [\n  { \n    \"className\": \"String\", \n    \"internal_id\": \"String\", \n    \"lookup\": [Array],\n    \"related\": [Array],\n    \"settings\": {Object},\n    \"sys_object_source_info\": {Object},\n    \"values\": {Object}\n  }\n]</pre>"
                            },
                            {
                                "name": "input.items.className",
                                "type": "String",
                                "description": "Required. Class/table name, sys_class_name, of the\n              configuration item (CI) to create or update.<p class=\"p\">This value can be any <span class=\"ph\">CMDB</span> class/table, such as cmdb_ci_linux_server or\n                cmdb_ci_win_server.</p>"
                            },
                            {
                                "name": "input.items.internal_id",
                                "type": "String",
                                "description": "Unique item identifier for the associated payload.<p class=\"p\">This\n                can be any value, but must be unique within the payload.</p>"
                            },
                            {
                                "name": "input.items.lookup",
                                "type": "Array",
                                "description": "Identifies the top-level item containing the lookup\n              (lookup-based identification). These records are used to identify the configuration\n              item based on a lookup table that has a reference back to cmdb_ci.<p class=\"p\">For example:\n              </p>\n<pre class=\"pre codeblock\">\"lookup\": [\n  {\n    \"className\": \"String\",\n    \"internal_id\": \"String\",\n    \"sys_object_source_info\": {Object},\n    \"values\": {Object}\n  }\n]</pre>"
                            },
                            {
                                "name": "input.items.lookup.className",
                                "type": "String",
                                "description": "Required. Class/table name,\n              sys_class_name, of the configuration item (CI) to create or update.<p class=\"p\">This value can\n                be any <span class=\"ph\">CMDB</span> class/table, such as\n                cmdb_serial_number or cmdb_ci_network_adapter.</p>"
                            },
                            {
                                "name": "input.items.lookup.internal_id",
                                "type": "String",
                                "description": "Unique lookup item identifier for the associated payload.<p class=\"p\">This can be any\n                value, but must be unique within the payload.</p>"
                            },
                            {
                                "name": "input.items.lookup.sys_object_source_info",
                                "type": "Object",
                                "description": "Defines a unique CI identifier for a specific data source. Different sources may\n              have different name-value pairs for the same\n              CI.<pre class=\"pre codeblock\">\"sys_object_source_info\": { \n  \"source_feed\": \"String\",\n  \"source_name\": \"String\",  \n  \"source_native_key\": \"String\",\n  \"source_recency_timestamp\": \"String\"\n} </pre>"
                            },
                            {
                                "name": "input.items.lookup.sys_object_source_info.source_feed",
                                "type": "String",
                                "description": "If the source can have multiple feeds, use this field to provide the name of the\n              feed sending this item.<p class=\"p\">The data source generates this feed name. It can be any\n                string that uniquely identifies the source feed.</p>"
                            },
                            {
                                "name": "input.items.lookup.sys_object_source_info.source_name",
                                "type": "String",
                                "description": "Data source of the CI information. This value must be one of the choice values\n              defined for the discovery_source field of the Configuration Item [cmdb_ci] table."
                            },
                            {
                                "name": "input.items.lookup.sys_object_source_info.source_native_key",
                                "type": "String",
                                "description": "Unique key-id for the item from the source.<p class=\"p\">The data source generates this key.\n                It can be any string that is unique to the item.</p>"
                            },
                            {
                                "name": "input.items.lookup.sys_object_source_info.source_recency_timestamp",
                                "type": "String",
                                "description": "UTC date/time that the item was scanned.<p class=\"p\">Format: YYYY-MM-DD\n              hh:mm:ss</p>"
                            },
                            {
                                "name": "input.items.lookup.values",
                                "type": "Object",
                                "description": "Field information for the CI as name-value pairs, where the name is the field\n              name. When updating reference fields, the value must be the referenced sys_id.<p class=\"p\">Field\n                names and types depend on the fields selected by the user, such\n              as:</p>\n<pre class=\"pre codeblock\" lang=\"json\" xml:lang=\"json\">\"values\": {\n  \"serial_number\": \"String\",\n  \"serial_number_type\": \"String\",\n  \"valid\": \"String\",\n  \"ip_address\": \"String\",\n  \"mac_address\": \"String\"\n}</pre>"
                            },
                            {
                                "name": "input.items.related",
                                "type": "Array",
                                "description": "Reference to the top-level item that contains the related\n              list. Rules in the Related Entry [cmdb_related_entry] define what type of records can\n              be in this array. These records are used to add items based on a related table that\n              has a reference to the CI that is being identified. <p class=\"p\">The related table may or may\n                not extend cmdb_ci. These records are not used to identify the configuration\n                item.</p>\n<pre class=\"pre codeblock\">\"related\" [\n  {\n    \"className\": \"String\",\n    \"internal_id\": \"String\",\n    \"sys_object_source_info\": {Object},\n    \"values\": {Object}\n  }\n]</pre>"
                            },
                            {
                                "name": "input.items.related.className",
                                "type": "String",
                                "description": "Required. Class/table name,\n              sys_class_name, of the configuration item (CI) to create or update.<p class=\"p\">This value can\n                be any <span class=\"ph\">CMDB</span> class/table, such as\n                cmdb_software_instance or cmdb_key_value.</p>"
                            },
                            {
                                "name": "input.items.related.internal_id",
                                "type": "String",
                                "description": "Unique identifier for this related item in this payload. Can be any value, but\n              must be unique within the payload."
                            },
                            {
                                "name": "input.items.related.sys_object_source_info",
                                "type": "Object",
                                "description": "Object that makes up a unique CI identifier for a specified data source.\n              Different sources may have different name-value pairs for the same\n              CI.<pre class=\"pre codeblock\">\"sys_object_source_info\": { \n  \"source_feed\": \"String\",\n  \"source_name\": \"String\",  \n  \"source_native_key\": \"String\",\n  \"source_recency_timestamp\": \"String\"\n} </pre>"
                            },
                            {
                                "name": "input.items.related.sys_object_source_info.source_feed",
                                "type": "String",
                                "description": "If the source can have multiple feeds, use this field to provide the name of the\n              feed sending this item.<p class=\"p\">The data source generates this feed name. It can be any\n                string that uniquely identifies the source feed.</p>"
                            },
                            {
                                "name": "input.items.related.sys_object_source_info.source_name",
                                "type": "String",
                                "description": "Identifies the data source of the CI information. This value must be one of the\n              choice values defined for the discovery_source field of the Configuration Item\n              [cmdb_ci] table."
                            },
                            {
                                "name": "input.items.related.sys_object_source_info.source_native_key",
                                "type": "String",
                                "description": "Unique key/id from the source for the related item. <p class=\"p\">The data source generates\n                this key. It can be any string that is unique to the item.</p>"
                            },
                            {
                                "name": "input.items.related.sys_object_source_info.source_recency_timestamp",
                                "type": "String",
                                "description": "UTC date and time that the item was scanned.<p class=\"p\">Format: <samp class=\"ph codeph\">YYYY-MM-DD\n                  hh:mm:ss</samp></p>"
                            },
                            {
                                "name": "input.items.related.values",
                                "type": "Object",
                                "description": "Fields to create or update for this related item as name/value\n              pairs, where the name is the field name. For a reference field, the value must be the\n              referenced sys_id.<p class=\"p\">Field names and types depend on the fields selected by the user,\n                such\n              as:</p>\n<pre class=\"pre codeblock\" lang=\"json\" xml:lang=\"json\">\"values\": {\n  \"host_name\": \"String\",\n  \"ip_address\": \"String\",\n  \"name\": \"String\",\n  \"os_name\": \"String\",\n  \"sys_class_name\": \"String\"\n}</pre>"
                            },
                            {
                                "name": "input.items.settings",
                                "type": "Object",
                                "description": "Parameters that define the types of updates that are\n              permitted.<pre class=\"pre codeblock\">\"settings\": { \n  \"updateWithoutDowngrade\": \"String\", \n  \"updateWithoutSwitch\": \"String\",\n  \"updateWithoutUpgrade\": \"String\"\n}</pre>"
                            },
                            {
                                "name": "input.items.settings.updateWithoutDowngrade",
                                "type": "String",
                                "description": "Flag that indicates whether\n              update and downgrade are both permitted for this item.<div class=\"p\">Valid values:<ul class=\"ul\" id=\"IESS-identifyCIEnhanced_S_S_O__d87952e452\">\n                  <li class=\"li\">true: Update the item but downgrade is not permitted.</li>\n\n                  <li class=\"li\">false: Both item update and downgrade are permitted.</li>\n\n                </ul>\n</div>\n<p class=\"p\">Default: false</p>"
                            },
                            {
                                "name": "input.items.settings.updateWithoutSwitch",
                                "type": "String",
                                "description": "Flag that indicates whether the\n              item can be updated and the class switched.<div class=\"p\">Valid values:<ul class=\"ul\" id=\"IESS-identifyCIEnhanced_S_S_O__d87952e476\">\n                  <li class=\"li\">true: Update the item but class switching is not permitted.</li>\n\n                  <li class=\"li\">false: Both item update and class switching are permitted.</li>\n\n                </ul>\n</div>\n<p class=\"p\">Default: false</p>"
                            },
                            {
                                "name": "input.items.settings.updateWithoutUpgrade",
                                "type": "String",
                                "description": "Flag that indicates whether update\n              and upgrade are both permitted for this item.<div class=\"p\">Valid values:<ul class=\"ul\" id=\"IESS-identifyCIEnhanced_S_S_O__d87952e500\">\n                  <li class=\"li\">true: Update the item but upgrade is not permitted.</li>\n\n                  <li class=\"li\">false: Both item update and upgrade are permitted.</li>\n\n                </ul>\n</div>\n<p class=\"p\">Default: false</p>"
                            },
                            {
                                "name": "input.items.sys_object_source_info",
                                "type": "Object",
                                "description": "Unique CI identifier for a specific\n              source.<pre class=\"pre codeblock\">\"sys_object_source_info\": { \n  \"source_feed\": \"String\",\n  \"source_name\": \"String\",  \n  \"source_native_key\": \"String\",\n  \"source_recency_timestamp\": \"String\"\n} </pre>"
                            },
                            {
                                "name": "input.items.sys_object_source_info.source_feed",
                                "type": "String",
                                "description": "If the source can have\n              multiple feeds, use this field to provide the name of the feed sending this\n                item.<p class=\"p\">The data source generates this feed name. It can be any string that uniquely\n                identifies the source feed.</p>"
                            },
                            {
                                "name": "input.items.sys_object_source_info.source_name",
                                "type": "String",
                                "description": "Data source of the CI\n              information. This value must be one of the choice values defined for the\n              discovery_source field of the Configuration Item [cmdb_ci] table."
                            },
                            {
                                "name": "input.items.sys_object_source_info.source_native_key",
                                "type": "String",
                                "description": "Unique key/id for the\n              item from the source.<p class=\"p\">The data source generates this key. It can be any string that\n                is unique to the item.</p>"
                            },
                            {
                                "name": "input.items.sys_object_source_info.source_recency_timestamp",
                                "type": "String",
                                "description": "UTC date and\n              time that the item was scanned.<p class=\"p\">Format: YYYY-MM-DD hh:mm:ss</p>"
                            },
                            {
                                "name": "input.items.values",
                                "type": "Object",
                                "description": "Fields to create or update for this related item as name/value\n              pairs, where the name is the field name. For a reference field, the value must be the\n              referenced sys_id.<p class=\"p\">Field names and types depend on the fields selected by the user,\n                such\n              as:</p>\n<pre class=\"pre codeblock\" lang=\"json\" xml:lang=\"json\">\"values\": {\n  \"host_name\": \"String\",\n  \"ip_address\": \"String\",\n  \"name\": \"String\",\n  \"os_name\": \"String\",\n  \"sys_class_name\": \"String\"\n}</pre>"
                            },
                            {
                                "name": "input.referenceItems",
                                "type": "Array",
                                "description": "Array of objects that define references between items\n              in the input payload.\n              <pre class=\"pre codeblock\">\"referenceItems\": [\n  { \n    \"referenced\": \"String\", \n    \"referencedBy\": \"String\", \n    \"referenceField\": \"String\" \n  }\n]</pre>"
                            },
                            {
                                "name": "input.referenceItems.referenced",
                                "type": "String",
                                "description": "The <span class=\"keyword parmname\">internal_id</span> defined\n              for the item being referenced by another item."
                            },
                            {
                                "name": "input.referenceItems.referencedBy",
                                "type": "String",
                                "description": "The <span class=\"keyword parmname\">internal_id</span>\n              defined for the item that references another item."
                            },
                            {
                                "name": "input.referenceItems.referenceField",
                                "type": "String",
                                "description": "Name of the reference field in the\n              class/table for the <span class=\"keyword parmname\">referencedBy</span> item."
                            },
                            {
                                "name": "input.relations",
                                "type": "Array",
                                "description": "Array of objects that specify relationships between items in\n              the input payload. <div class=\"p\">A node in this array can use either of two formats.<ul class=\"ul\" id=\"IESS-identifyCIEnhanced_S_S_O__d87952e669\">\n                  <li class=\"li\">The node can define a relationship between two top-level items (only) using\n                      <span class=\"keyword parmname\">parent</span> and <span class=\"keyword parmname\">child</span> name-value pairs,\n                    with values representing item indexes from the payload\n                      <span class=\"keyword parmname\">items</span> array.</li>\n\n                  <li class=\"li\">The node can define a relationship between any two items, including top-level,\n                    related, or lookup items, using <span class=\"keyword parmname\">parent_id</span> and\n                      <span class=\"keyword parmname\">child_id</span> key/value pairs, with values representing\n                      <span class=\"keyword parmname\">internal_id</span> values defined for those items.</li>\n\n                </ul>\n</div>\n<pre class=\"pre codeblock\">\"relations\": [\n  {\n    \"child\": Number,\n    \"parent\": Number,\n    \"type\": \"String\"\n  }\n]</pre>\n<pre class=\"pre codeblock\">\"relations\": [\n  {\n    \"child_id\": \"String\",\n    \"parent_id\": \"String\",\n    \"type\": \"String\"\n  }\n]</pre>"
                            },
                            {
                                "name": "input.relations.child",
                                "type": "Number",
                                "description": "Integer index of the CI object in the\n                <span class=\"keyword parmname\">items</span> array that represents the child in the\n              relationship."
                            },
                            {
                                "name": "input.relations.child_id",
                                "type": "String",
                                "description": "The <span class=\"keyword parmname\">internal_id</span> of the child\n              item in the relation."
                            },
                            {
                                "name": "input.relations.parent",
                                "type": "Number",
                                "description": "Integer index of the parent item in the\n                <span class=\"keyword parmname\">items</span> array."
                            },
                            {
                                "name": "input.relations.parent_id",
                                "type": "String",
                                "description": "The <span class=\"keyword parmname\">internal_id</span> of the parent\n              item in the relation (item.related or item.lookup item)."
                            },
                            {
                                "name": "input.relations.type",
                                "type": "String",
                                "description": "The type of relationship that exists between the parent\n              and child items. This must be a name field value from the CI Relationship Type\n              [cmdb_rel_type] table."
                            },
                            {
                                "name": "options",
                                "type": "Object",
                                "description": "Optional, but {} or null must be passed-in. Options to enable\n              or disable features.<div class=\"note note\"><span class=\"notetitle\">Note:</span> By default or if <span class=\"keyword parmname\">partial_payloads</span> is\n                set to true, both <span class=\"keyword parmname\">partial_commits</span> and\n                  <span class=\"keyword parmname\">deduplicate_payloads</span> are enabled, even if they are set to\n                false, as those features are essential for partial payloads\n              functionality.</div>\n<pre class=\"pre codeblock\">\"options\": { \n \"deduplicate_payloads\": \"Boolean\",\n \"generate_summary\": \"Boolean\", \n \"partial_commits\": \"Boolean\", \n \"partial_payloads\": \"Boolean\"\n}</pre>"
                            },
                            {
                                "name": "options.deduplicate_payloads",
                                "type": "Boolean",
                                "description": "Flag that indicates whether duplicate\n              items are merged or considered errors.<p class=\"p\">Valid values:</p>\n<ul class=\"ul\" id=\"IESS-identifyCIEnhanced_S_S_O__d87952e811\">\n                <li class=\"li\">true: Merge duplicate items.</li>\n\n                <li class=\"li\">false: Consider duplicate items as errors.</li>\n\n              </ul>\n<p class=\"p\">Default: true</p>"
                            },
                            {
                                "name": "options.generate_summary",
                                "type": "Boolean",
                                "description": "Flag that indicates whether the returned\n              results contain summary information. For the details of the returned summary\n              information, see <span class=\"keyword parmname\">&lt;String&gt;.summary</span> in the return results\n                table.<p class=\"p\">Valid values:</p>\n<ul class=\"ul\" id=\"IESS-identifyCIEnhanced_S_S_O__d87952e838\">\n                <li class=\"li\">true: Include summary information.</li>\n\n                <li class=\"li\">false: Do not include summary information.</li>\n\n              </ul>\n<p class=\"p\">Default: false</p>"
                            },
                            {
                                "name": "options.partial_commits",
                                "type": "Boolean",
                                "description": "Flag that indicates whether partial commit\n              support is enabled. For additional information on partial commits, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-servicenow-platform/page/product/configuration-management/concept/ire.html\" target=\"_blank\">Enhanced IRE\n                features</a>.<p class=\"p\">Valid values:</p>\n<ul class=\"ul\" id=\"IESS-identifyCIEnhanced_S_S_O__d87952e865\">\n                <li class=\"li\">true: Partial commit enabled.</li>\n\n                <li class=\"li\">false: Partial commit disabled.</li>\n\n              </ul>\n<p class=\"p\">Default: true</p>"
                            },
                            {
                                "name": "options.partial_payloads",
                                "type": "Boolean",
                                "description": "Flag that indicates whether partial payload\n              support is enabled. For additional information on partial payloads, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-servicenow-platform/page/product/configuration-management/concept/ire.html\" target=\"_blank\">Enhanced IRE features</a> and\n                <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-servicenow-platform/page/product/configuration-management/task/create-ire-data-source-rule.html\" target=\"_blank\">Create an IRE data source\n                rule</a>.<p class=\"p\">Valid values:</p>\n<ul class=\"ul\" id=\"IESS-identifyCIEnhanced_S_S_O__d87952e895\">\n                <li class=\"li\">true: Partial payload enabled.</li>\n\n                <li class=\"li\">false: Partial payload disabled.</li>\n\n              </ul>\n<p class=\"p\">Default: true</p>"
                            },
                            {
                                "name": "source",
                                "type": "String",
                                "description": "Data source of the CI information. This value must be one of\n              the choice values defined for the discovery_source field of the Configuration Item\n              [cmdb_ci] table."
                            }
                        ],
                        "return": {
                            "type": "&lt;String&gt;.summary.&lt;class_name&gt;.warningCount",
                            "description": "Number of items that generated\n              a warning when processed.<p class=\"p\">Data type: Number</p>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "IESS-runIdentificationAudit_GR",
                        "short_description": "Run an identification audit against the specified CI to detect duplicates.",
                        "description": "<p>If duplicates are found, duplication tasks are created. Only use this method on CI types\n        with independent identification rules.</p>",
                        "name": "runIdentificationAudit(GlideRecord gr)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "gr",
                                "type": "GlideRecord",
                                "description": "The CI on which to run the audit to detect duplicates. The CI must have\n                independent identification rules."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    }
                ]
            }
        ]
    },
    {
        "identifier": "sn_cmdbgroup-namespace",
        "namespace": "sn_cmdbgroup",
        "classes": [
            {
                "description": "The <span class=\"keyword apiname\">CMDBGroupAPI</span> is a scoped static class. To use the class you must include\n   the namespace identifier <span class=\"keyword parmname\">sn_cmdbgroup</span> before the CMDBGroupAPI object. For\n   example:<pre><code class='language-javascript'>var response = sn_cmdbgroup.CMDBGroupAPI.getManualCIList(groupSysId, false);</code></pre><br/><br/>To access this API you must have the itil or asset role.",
                "short_description": "The <span class=\"keyword apiname\">CMDBGroupAPI</span> provides methods for performing actions on <span class=\"ph\">Configuration Management Database (CMDB)</span> groups.",
                "identifier": "c_CMDBGroupAPIScoped",
                "name": "CMDBGroupAPI",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "r_CMDBG-getAllCI_S_B",
                        "short_description": "Returns all configuration items (CIs) for the specified group. The results include all\n    manual CIs and the list of CIs from the query builder's saved query.",
                        "description": "",
                        "name": "getAllCI(String groupId, Boolean requireCompleteSet, Boolean requireAllQueryNodesCis)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "// Script example:\nvar getAllCIFunc = function(groupSysId) {\n  var parser = new JSONParser();\n  var response = sn_cmdbgroup.CMDBGroupAPI.getAllCI(groupSysId, false);\n  var parsed = parser.parse(response);\n  if (parsed.result) {\n    gs.info(\"succeed to retrieve ci list: \" + parsed.idList);\n  } else {\n    gs.info(\"fail to retrieve list, errors: \" + JSON.stringify(parsed.errors));\n  }\n}\nvar groupExists = \"d0d2d25113152200eef2dd828144b0e4\";\nvar groupContainsInvalidSavedQuery = \"e685a2c3d7012200de92a5f75e610387\";\ngetAllCIFunc(groupExists);\ngetAllCIFunc(groupContainsInvalidSavedQuery);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "groupId",
                                "type": "String",
                                "description": "Sys_id of the Configuration Management Database (CMDB) group."
                            },
                            {
                                "name": "requireCompleteSet",
                                "type": "Boolean",
                                "description": "Optional, but must be passed if\n                <span class=\"keyword parmname\">requireAllQueryNodesCis</span> is passed. <p class=\"p\">Flag that indicates\n                whether an empty string is returned if any CIs are filtered out by access control\n                list (ACL) restrictions. </p>\n<div class=\"p\">Valid values:<ul class=\"ul\" id=\"r_CMDBG-getAllCI_S_B__d81496e258\">\n                  <li class=\"li\">true: Return empty string.</li>\n\n                  <li class=\"li\">false: Don't return value.</li>\n\n                </ul>\n</div>\n<p class=\"p\">Default: false</p>"
                            },
                            {
                                "name": "requireAllQueryNodesCis",
                                "type": "Boolean",
                                "description": "Optional. Flag that indicates whether to\n              return CIs from all CMDB classes of the query. <div class=\"p\">Valid values:<ul class=\"ul\" id=\"r_CMDBG-getAllCI_S_B__d81496e282\">\n                  <li class=\"li\">true: Return CIs from all columns.</li>\n\n                  <li class=\"li\">false: Only return CIs from the starting node of the query builder query.</li>\n\n                </ul>\n</div>\n<p class=\"p\">Default: false</p>"
                            }
                        ],
                        "return": {
                            "type": "result",
                            "description": "Flag that indicates whether the method completed successfully.<div class=\"p\">Possible\n                  values:<ul class=\"ul\" id=\"r_CMDBG-getAllCI_S_B__d81496e189\">\n                  <li class=\"li\">true: Success</li>\n\n                  <li class=\"li\">false: Error</li>\n\n                </ul>\n</div>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_CMDBG-getAllCIFromQBuild_S_B",
                        "short_description": "Returns all configuration items (CIs) returned from all saved query builders' query IDs\n    for the specified group.",
                        "description": "",
                        "name": "getAllCIFromQueryBuilder(String groupId, Boolean requireCompleteSet, Boolean requireAllQueryNodesCis)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "// Script example:\nvar getAllCIFromQueryBuilderFunc = function(groupSysId) {\n  var parser = new JSONParser();\n  var response = sn_cmdbgroup.CMDBGroupAPI.getAllCIFromQueryBuilder(groupSysId, false);\n  var parsed = parser.parse(response);\n  if (parsed.result) {\n    gs.info(\"succeed to retrieve ci list: \" + parsed.idList);\n  } else {\n    gs.info(\"fail to retrieve list, errors: \" + JSON.stringify(parsed.errors));\n  }\n}\nvar groupExists = \"d0d2d25113152200eef2dd828144b0e4\";\nvar groupContainsInvalidSavedQuery = \"e685a2c3d7012200de92a5f75e610387\";\ngetAllCIFromQueryBuilderFunc(groupExists);\ngetAllCIFromQueryBuilderFunc(groupContainsInvalidSavedQuery);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "groupId",
                                "type": "String",
                                "description": "Sys_id of the Configuration Management Database (CMDB) group."
                            },
                            {
                                "name": "requireCompleteSet",
                                "type": "Boolean",
                                "description": "Optional, but must be passed if\n                <span class=\"keyword parmname\">requireAllQueryNodesCis</span> is passed. <p class=\"p\">Flag that indicates\n                whether an empty string is returned if any CIs are filtered out by access control\n                list (ACL) restrictions. </p>\n<div class=\"p\">Valid values:<ul class=\"ul\" id=\"r_CMDBG-getAllCIFromQBuild_S_B__d81496e258\">\n                  <li class=\"li\">true: Return empty string.</li>\n\n                  <li class=\"li\">false: Don't return value.</li>\n\n                </ul>\n</div>\n<p class=\"p\">Default: false</p>"
                            },
                            {
                                "name": "requireAllQueryNodesCis",
                                "type": "Boolean",
                                "description": "Optional. Flag that indicates whether to\n              return CIs from all CMDB classes of the query. <div class=\"p\">Valid values:<ul class=\"ul\" id=\"r_CMDBG-getAllCIFromQBuild_S_B__d81496e282\">\n                  <li class=\"li\">true: Return CIs from all columns.</li>\n\n                  <li class=\"li\">false: Only return CIs from the starting node of the query builder query.</li>\n\n                </ul>\n</div>\n<p class=\"p\">Default: false</p>"
                            }
                        ],
                        "return": {
                            "type": "result",
                            "description": "Flag that indicates whether the method completed successfully.<div class=\"p\">Possible\n                  values:<ul class=\"ul\" id=\"r_CMDBG-getAllCIFromQBuild_S_B__d81496e189\">\n                  <li class=\"li\">true: Success</li>\n\n                  <li class=\"li\">false: Error</li>\n\n                </ul>\n</div>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_CMDBG-getManualCIList_S_B",
                        "short_description": "Returns the CMDB group's manual CI list.",
                        "description": "",
                        "name": "getManualCIList(String groupId, Boolean requireCompleteSet)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "// Script example for requireCompleteSet being false:\n    var getManualCIList = function(groupSysId) {\n    var parser = new JSONParser();\n    var response = sn_cmdbgroup.CMDBGroupAPI.getManualCIList(groupSysId, false);\n    var parsed = parser.parse(response);\n    if (parsed.result) {\n        gs.info(\"succeed to retrieve ci list: \" + parsed.idList);\n    } else {\n        gs.info(\"fail to retrieve list, errors: \" + JSON.stringify(parsed.errors));\n    }\n}\n// create a group in cmdb_group, and add CIs to this group in Edit Manual CI form\nvar groupExists = \"d0d2d25113152200eef2dd828144b0e4\";\n// use a non-exist group\nvar groupDoesNotExists = \"d0d2d25113152200eef2dd828144b0e4111\";\ngetManualCIList(groupExists);\ngetManualCIList(groupDoesNotExists);\n ",
                                "description": ""
                            },
                            {
                                "script": "// Script example for requireCompleteSet being true\n    var getManualCIList = function(groupSysId) {\n    var parser = new JSONParser();\n    var response = sn_cmdbgroup.CMDBGroupAPI.getManualCIList(groupSysId, true);\n    var parsed = parser.parse(response);\n    if (parsed.result) {\n        gs.info(\"succeed to retrieve ci list: \" + parsed.idList);\n    } else {\n        gs.info(\"fail to retrieve list, errors: \" + JSON.stringify(parsed.errors));\n    }\n}\n// create a group in cmdb_group, and add CIs to this group in Edit Manual CI form\nvar groupExists = \"d0d2d25113152200eef2dd828144b0e4\";\ngetManualCIList(groupExists);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "groupId",
                                "type": "String",
                                "description": "The sysId of the CMDB group."
                            },
                            {
                                "name": "requireCompleteSet",
                                "type": "Boolean",
                                "description": "When true, returns an error string if any CIs are filtered out by ACL\n                restrictions."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "A JSON formated string in the format\n                <pre class=\"pre codeblock\">{ 'result':false, \n'errors':[ {'message':'Group does not exist',\n            'error':'GROUP_SYS_ID_IS_NOT_FOUND'},\n { } // another error if it exists \n ], \n'partialCIListDueToACLFlag':false,\n'idList':['sys_id_1', 'sys_id2'] }</pre>\nWhere\n                  <ul class=\"ul\" id=\"r_CMDBG-getManualCIList_S_B__d81607e134\">\n                  <li class=\"li\">result - a boolean flag. When true the method was successful. </li>\n\n                  <li class=\"li\">errors - a list of errors with a message and error code. </li>\n\n                  <li class=\"li\">partialCIListDueToACLFlag - Â a Boolean flag. When true, the idList is\n                    incomplete due to an ACL restriction. When false, the idList is complete.</li>\n\n                  <li class=\"li\">idList - an array of cmdb_ci sys_ids</li>\n\n                </ul>\n<p class=\"p\">When not successful, returns one of the errors GROUP_SYS_ID_IS_NOT_FOUND,\n                  GROUP_SYS_ID_IS_EMPTY, FAIL_TO_INSERT_GROUP_CI_PAIR,\n                  FAIL_TO_INSERT_GROUP_QUERY_ID_PAIR, CI_CAN_NOT_FOUND, SAVED_QUERY_ID_NOT_FOUND,\n                  ERROR_DURING_QUERY_BUILDER_PROCESS_QUERY,\n                  TIMEOUT_DURING_QUERY_BUILDER_PROCESS_QUERY,\n                  NOT_COMPLETE_DURING_QUERY_BUILDER_PROCESS_QUERY,\n                  MAX_LIMIT_DURING_QUERY_BUILDER_PROCESS_QUERY, GROUP_API_TIMEOUT,\n                  EXCEPTION_FROM_EXECUTE_QUERY,\n                SOME_CI_NOT_VISIBLE_DUE_TO_SECURITY_CONSTRAINT</p>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_CMDBG-getSavedQueryIdList_S_B",
                        "short_description": "Returns the query builder's query IDs for the specified CMDB group.",
                        "description": "",
                        "name": "getSavedQueryIdList(String groupId, Boolean requireCompleteSet)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "// Script example:\nvar getSavedQueryIdList = function(groupSysId) {\n    var parser = new JSONParser();\n    var response = sn_cmdbgroup.CMDBGroupAPI.getSavedQueryIdList(groupSysId, false);\n    var parsed = parser.parse(response);\n    if (parsed.result) {\n        gs.info(\"succeed to retrieve saved query id list: \" + parsed.idList);\n    } else {\n        gs.info(\"fail to retrieve list, errors: \" + JSON.stringify(parsed.errors));\n    }\n}\nvar groupExists = \"d0d2d25113152200eef2dd828144b0e4\";\nvar groupDoesNotExists = \"d0d2d25113152200eef2dd828144b0e4111\";\ngetSavedQueryIdList(groupExists);\ngetSavedQueryIdList(groupDoesNotExists);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "groupId",
                                "type": "String",
                                "description": "The sysId of the CMDB group."
                            },
                            {
                                "name": "requireCompleteSet",
                                "type": "Boolean",
                                "description": "When true, returns an empty string if any CIs are filtered out by ACL\n                restrictions."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "A JSON formated string in the format\n                <pre class=\"pre codeblock\">{ 'result':false, \n'errors':[ {'message':'Group does not exist',\n            'error':'GROUP_SYS_ID_IS_NOT_FOUND'},\n { } // another error if it exists \n ], \n'partialCIListDueToACLFlag':false,\n'idList':['sys_id_1', 'sys_id2'] }</pre>\nWhere\n                  <ul class=\"ul\" id=\"r_CMDBG-getSavedQueryIdList_S_B__d81607e134\">\n                  <li class=\"li\">result - a boolean flag. When true the method was successful. </li>\n\n                  <li class=\"li\">errors - a list of errors with a message and error code. </li>\n\n                  <li class=\"li\">partialCIListDueToACLFlag - Â a Boolean flag. When true, the idList is\n                    incomplete due to an ACL restriction. When false, the idList is complete.</li>\n\n                  <li class=\"li\">idList - an array of cmdb_ci sys_ids</li>\n\n                </ul>\n<p class=\"p\">When not successful, returns one of the errors GROUP_SYS_ID_IS_NOT_FOUND,\n                  GROUP_SYS_ID_IS_EMPTY, FAIL_TO_INSERT_GROUP_CI_PAIR,\n                  FAIL_TO_INSERT_GROUP_QUERY_ID_PAIR, CI_CAN_NOT_FOUND, SAVED_QUERY_ID_NOT_FOUND,\n                  ERROR_DURING_QUERY_BUILDER_PROCESS_QUERY,\n                  TIMEOUT_DURING_QUERY_BUILDER_PROCESS_QUERY,\n                  NOT_COMPLETE_DURING_QUERY_BUILDER_PROCESS_QUERY,\n                  MAX_LIMIT_DURING_QUERY_BUILDER_PROCESS_QUERY, GROUP_API_TIMEOUT,\n                  EXCEPTION_FROM_EXECUTE_QUERY,\n                SOME_CI_NOT_VISIBLE_DUE_TO_SECURITY_CONSTRAINT</p>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_CMDBG-setManualCIList_S_S",
                        "short_description": "Sets the manual CI list for the specified group. The existing manual CI list is\n    overwritten. CI sysIds not found in the cmdb_ci table are ignored.",
                        "description": "",
                        "name": "setManualCIList(String groupId, String ciSysIds)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "// Script example:\nvar setManualCIListFunc = function(groupSysId, manualCIList) {\n    var parser = new JSONParser();\n    var response = sn_cmdbgroup.CMDBGroupAPI.setManualCIList(groupSysId, manualCIList);\n    var parsed = parser.parse(response);\n    if (parsed.result) {\n        gs.info(\"succeed to set manual ci list\");\n    } else {\n        gs.info(\"fail to set manual ci list, errors: \" + JSON.stringify(parsed.errors));\n    }\n}\nvar group = \"d0d2d25113152200eef2dd828144b0e4\";\nvar groupDoesNotExist = \"1234\";\nvar manualCIList = \"b4fd7c8437201000deeabfc8bcbe5dc1, affd3c8437201000deeabfc8bcbe5dc3\";\nsetManualCIListFunc(group, manualCIList);\nsetManualCIListFunc(groupDoesNotExist, manualCIList);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "groupId",
                                "type": "String",
                                "description": "The sysId of the CMDB group."
                            },
                            {
                                "name": "ciSysIds",
                                "type": "String",
                                "description": "Comma separated list of CI sysIds."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "A JSON formated string in the format\n                <pre class=\"pre codeblock\">{ 'result':false, \n'errors':[ {'message':'Group does not exist',\n            'error':'GROUP_SYS_ID_IS_NOT_FOUND'},\n { } // another error if it exists \n ], \n'partialCIListDueToACLFlag':false,\n'idList':['sys_id_1', 'sys_id2'] }</pre>\nWhere\n                  <ul class=\"ul\" id=\"r_CMDBG-setManualCIList_S_S__ul_hb5_4sp_mx\">\n                  <li class=\"li\">result - a boolean flag. When true the method was successful. </li>\n\n                  <li class=\"li\">errors - a list of errors with a message and error code. </li>\n\n                  <li class=\"li\">partialCIListDueToACLFlag - Â a Boolean flag. When true, the idList is\n                    incomplete due to an ACL restriction. When false, the idList is complete.</li>\n\n                  <li class=\"li\">idList - an array of cmdb_ci sys_ids</li>\n\n                </ul>\n<p class=\"p\">When not successful, returns one of the errors GROUP_SYS_ID_IS_NOT_FOUND,\n                  GROUP_SYS_ID_IS_EMPTY, FAIL_TO_INSERT_GROUP_CI_PAIR,\n                  FAIL_TO_INSERT_GROUP_QUERY_ID_PAIR, CI_CAN_NOT_FOUND, SAVED_QUERY_ID_NOT_FOUND,\n                  ERROR_DURING_QUERY_BUILDER_PROCESS_QUERY,\n                  TIMEOUT_DURING_QUERY_BUILDER_PROCESS_QUERY,\n                  NOT_COMPLETE_DURING_QUERY_BUILDER_PROCESS_QUERY,\n                  MAX_LIMIT_DURING_QUERY_BUILDER_PROCESS_QUERY, GROUP_API_TIMEOUT,\n                  EXCEPTION_FROM_EXECUTE_QUERY,\n                SOME_CI_NOT_VISIBLE_DUE_TO_SECURITY_CONSTRAINT</p>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_CMDBG-setSavedQueryIdList_S_S",
                        "short_description": "Sets the saved query ID list for the specified group. The existing query ID list is\n    overwritten. Query sysIds not found in the qb_saved_query table are ignored.",
                        "description": "",
                        "name": "setSavedQueryIdList(String groupId, String queryIds)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "// Script example:\nvar setSavedQueryIdListFunc = function(groupSysId, queryIdList) {\n    var parser = new JSONParser();\n    var response = sn_cmdbgroup.CMDBGroupAPI.setSavedQueryIdList(groupSysId, queryIdList);\n    var parsed = parser.parse(response);\n    if (parsed.result) {\n        gs.info(\"succeed to set saved query id list\");\n    } else {\n        gs.info(\"fail to set saved query id list, errors: \" + JSON.stringify(parsed.errors));\n    }\n}\nvar group = \"d0d2d25113152200eef2dd828144b0e4\";\nvar savedQueryBuilderIdList = \"394585fed7812200de92a5f75e6103e8\";\nvar savedQueryBuilderIdNotExistList = \"b4fd7c8437201000deeabfc8bcbe5dc1,\n   affd3c8437201000deeabfc8bcbe5dc3\";\n \nsetSavedQueryIdListFunc(group, savedQueryBuilderIdList);\nsetSavedQueryIdListFunc(group, savedQueryBuilderIdNotExistList);\n",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "groupId",
                                "type": "String",
                                "description": "The sysId of the CMDB group."
                            },
                            {
                                "name": "queryIds",
                                "type": "String",
                                "description": "Comma separated list of saved query sysIds."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "A JSON formated string in the format\n                <pre class=\"pre codeblock\">{ 'result':false, \n'errors':[ {'message':'Group does not exist',\n            'error':'GROUP_SYS_ID_IS_NOT_FOUND'},\n { } // another error if it exists \n ], \n'partialCIListDueToACLFlag':false,\n'idList':['sys_id_1', 'sys_id2'] }</pre>\nWhere\n                  <ul class=\"ul\" id=\"r_CMDBG-setSavedQueryIdList_S_S__d81607e134\">\n                  <li class=\"li\">result - a boolean flag. When true the method was successful. </li>\n\n                  <li class=\"li\">errors - a list of errors with a message and error code. </li>\n\n                  <li class=\"li\">partialCIListDueToACLFlag - Â a Boolean flag. When true, the idList is\n                    incomplete due to an ACL restriction. When false, the idList is complete.</li>\n\n                  <li class=\"li\">idList - an array of cmdb_ci sys_ids</li>\n\n                </ul>\n<p class=\"p\">When not successful, returns one of the errors GROUP_SYS_ID_IS_NOT_FOUND,\n                  GROUP_SYS_ID_IS_EMPTY, FAIL_TO_INSERT_GROUP_CI_PAIR,\n                  FAIL_TO_INSERT_GROUP_QUERY_ID_PAIR, CI_CAN_NOT_FOUND, SAVED_QUERY_ID_NOT_FOUND,\n                  ERROR_DURING_QUERY_BUILDER_PROCESS_QUERY,\n                  TIMEOUT_DURING_QUERY_BUILDER_PROCESS_QUERY,\n                  NOT_COMPLETE_DURING_QUERY_BUILDER_PROCESS_QUERY,\n                  MAX_LIMIT_DURING_QUERY_BUILDER_PROCESS_QUERY, GROUP_API_TIMEOUT,\n                  EXCEPTION_FROM_EXECUTE_QUERY,\n                SOME_CI_NOT_VISIBLE_DUE_TO_SECURITY_CONSTRAINT</p>"
                        },
                        "extras": []
                    }
                ]
            }
        ]
    },
    {
        "identifier": "sn_connect-namespace",
        "namespace": "sn_connect",
        "classes": [
            {
                "description": "To use this class in a scoped application, use the <span class=\"keyword parmname\">sn_connect</span> namespace\n      identifier. The Connect Scriptable APIs plugin (ID: com.glide.connect.scriptable) should be\n      enabled to access the <span class=\"keyword apiname\">Conversation</span> API.",
                "short_description": "The <span class=\"keyword apiname\">Conversation</span> API enables you to create or modify Connect\n    conversations.",
                "identifier": "c_ConversationScopedAPI",
                "name": "Conversation",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "conversation-addMember_string",
                        "short_description": "Add a user to a conversation.",
                        "description": "",
                        "name": "addSubscriber(String sysID)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var conversation = sn_connect.Conversation.get(\"7caf49111309030034bb58a12244b06c\");\nconversation.addSubscriber(\"a8f98bb0eb32010045e1a5115206fe3a\");",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "sysID",
                                "type": "String",
                                "description": "The sys_ID of the user you want to add to a conversation."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "conversation-create_String_String",
                        "short_description": "Create a <span class=\"ph\">Connect</span>\n    conversation.",
                        "description": "",
                        "name": "create(String name)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var conversation = sn_connect.Conversation.create({\n    name: \"Hello world\",\n    type: \"connect\"\n});",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "name",
                                "type": "String",
                                "description": "Create a conversation with a specific name."
                            },
                            {
                                "name": "type",
                                "type": "String",
                                "description": "Include a specific conversation type. The type is determined by the type choice\n                list. The base system includes the following type options: <ul class=\"ul\" id=\"conversation-create_String_String__ul_ut2_4df_wbb\">\n                  <li class=\"li\">connect</li>\n\n                  <li class=\"li\">support</li>\n\n                  <li class=\"li\">group</li>\n\n                  <li class=\"li\">peer</li>\n\n                  <li class=\"li\">qanda</li>\n\n                  <li class=\"li\">team</li>\n\n                </ul>"
                            }
                        ],
                        "return": {
                            "type": "Object",
                            "description": "Scriptable Conversation"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "conversation-get-string",
                        "short_description": "Get an existing Connect conversation by sys_id.",
                        "description": "",
                        "name": "get(String sysID)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var conversation = sn_connect.Conversation.get(\"27b9844c1385030034bb58a12244b037\");",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "sysID",
                                "type": "String",
                                "description": "The sys_id of the conversation record."
                            }
                        ],
                        "return": {
                            "type": "Object",
                            "description": "Conversation object"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "conversation-removeMember_string",
                        "short_description": "Remove a user from a conversation.",
                        "description": "",
                        "name": "removeSubscriber(String sysID)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var conversation = sn_connect.Conversation.get(\"7caf49111309030034bb58a12244b06c\");\nconversation.removeSubscriber(\"a8f98bb0eb32010045e1a5115206fe3a\");",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "SysID",
                                "type": "String",
                                "description": "The sys_id of the user you want to remove from a conversation."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "conversation-sendMessage_String_String",
                        "short_description": "Send a message to a conversation.",
                        "description": "",
                        "name": "sendMessage(String body, String field)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var conversation = sn_connect.Conversation.get(\"2064fa3919010300964f5270e9840fbb\");\nconversation.sendMessage({body: \"Hello world\", field: \"work_notes\"});",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "Body",
                                "type": "String",
                                "description": "The main text of the message."
                            },
                            {
                                "name": "Field",
                                "type": "String",
                                "description": "The field you want the message to appear as. Only use this option if adding a\n                message to a record conversation. Choose from work_notes, comments, or system. Using\n                the field system treats the message as a system message."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "To use this class in a scoped application, use the <span class=\"keyword parmname\">sn_connect</span> namespace\n      identifier. The Connect Scriptable APIs plugin (ID: com.glide.connect.scriptable) should be\n      enabled to access the <span class=\"keyword apiname\">Queue</span> API.",
                "short_description": "The <span class=\"keyword apiname\">Queue</span> API allows you to retrieve or join a <span class=\"ph\">Connect Support</span> chat queue.",
                "identifier": "QueueScopedAPI",
                "name": "Queue",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "queue-get-string",
                        "short_description": "Retrieves a specified chat queue.",
                        "description": "",
                        "name": "get(String sysID)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var queue = sn_connect.Queue.get(\"ab73be7dc09a4300964f336ee6b74361\");",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "SysID",
                                "type": "String",
                                "description": "Sys_id of a queue from the Chat Queue [chat_queue] table."
                            }
                        ],
                        "return": {
                            "type": "Object",
                            "description": "Returns a conversation queue object."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "queue-join",
                        "short_description": "Adds the current user to an existing <span class=\"ph\">Connect Support</span> chat queue and\n    posts the specified question.",
                        "description": "<p>Before calling this method, you must call the <a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/sn_connect-namespace/QueueScopedAPI#queue-get-string\" title=\"Retrieves a specified chat queue.\">Scoped Queue - get(String sysID)</a> method\n        to retrieve the chat queue to which to attach the current user.</p>",
                        "name": "join(String question)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var queue = sn_connect.Queue.get(\"ab73be7dc09a4300964f336ee6b74361\");\nqueue.join(\"How do I access my email?\");",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "Question",
                                "type": "String",
                                "description": "Question to add to the chat queue."
                            }
                        ],
                        "return": {
                            "type": "Object",
                            "description": "GlideRecord object for the Chat Queue Entry."
                        },
                        "extras": []
                    }
                ]
            }
        ]
    },
    {
        "identifier": "sn_cti_core-namespace",
        "namespace": "sn_cti_core",
        "classes": [
            {
                "description": "You use CTIOperationRequest objects to pass information between a message transformer and an\n      operation handler within the Cloud Call Center framework.<br/><br/>Typically, a message transformer is responsible for parsing an incoming CTI-specific payload\n      and setting the payload data on an associated CTIOperationRequest object. An operation handler\n      is then responsible for getting the information from the CTIOperationRequest object and using\n      the data to process the requested operation.<br/><br/>The <span class=\"ph\">ServiceNow</span> base system provides\n        working operation handlers and message transformers that enable connection to Amazon\n        Connect. When building contact flows within Amazon Connect, there are two integration points\n        between Amazon services and a <span class=\"ph\">ServiceNow</span> instance:<ul class=\"ul\" id=\"CTIOperationRequestAPI__d81665e86\">\n          <li class=\"li\">Amazon Web Services (AWS) Lambda Proxy (Invoke AWS Lambda function)</li>\n\n          <li class=\"li\">AWS Lex Bot (Get Customer Input) </li>\n\n        </ul>\nYou can find the available operation handlers and message transformers for these\n        integration points in the Operation Handlers [sn_cti_operation_handler] and Provider Message\n        Transformer [sn_cti_provider_msg_transormer] tables.<br/><br/>A payload is passed into a <span class=\"ph\">ServiceNow</span> instance from an external source,\n      such as from a computer telephony integration (CTI) provider that is making an operation\n      request. When a request is received, a message transformer parses the payload and uses the\n      CTIOperationRequest set methods to set payload values, such as the operation handler name,\n      onto an operation and contact-specific CTIOperationRequest object.<br/><br/>The following message transformer script parses the passed in JSON payload and sets the\n      values required by the associated operation handler on the CTIOperationRequest object.<br/><br/><pre><code class='language-javascript'>{\t\n  try {\n    var jsonPayload = httpRequest.body.data;\n    if (jsonPayload) {\n\tvar event = jsonPayload.event;\n\tif (event) {\n\t  var details = event.Details;\n\t  if (details) {\t\t\t\t\t\n\t    operationRequest.setOperationName(details.Parameters['sn_operation']);\n\t    var contactData = details.ContactData;\n\t    if(contactData) {\n\t\t// Call id should be surfaced in openframe call log so it can be tied to transcription later\n\t\toperationRequest.setParameter('contact.call_id', contactData.ContactId);\n\t\tfor(var ck in contactData.CustomerEndpoint) {\n\t\t  operationRequest.setParameter('contact.' + ck, contactData.CustomerEndpoint[ck]);\n\t       }\n\t       operationRequest.setParameter('contact.id', contactData.ContactId);\n\t       operationRequest.setParameter('contact.phone', contactData.CustomerEndpoint.Address);\n\t    }\n\t    var parameters = details.Parameters;\n\t    if (parameters) {\n\t\tfor (var pk in parameters) {\n\t\t  switch(pk) {\n\t\t    case 'interactionId':\n\t\t\toperationRequest.setInteractionSysId(parameters[pk]);\n\t\t\tbreak;\n\t\t    case 'authToken':\n\t\t\toperationRequest.setAuthToken(parameters[pk]);\n\t\t\tbreak;\n\t\t    case 'language':\n\t\t\toperationRequest.setLanguage(parameters[pk]);\n\t\t\tbreak;\n\t\t\t\t\t\t\t\t\n\t\t    default:\n\t\t\toperationRequest.setParameter(pk, parameters[pk]);\n\t\t }\t\t\t\t\t\t\n            }\n          }\t\t\t\t\t\n        }\n      }\n    }\n  } catch(e) {\n\t\tctx.setError(e);\n  }\n})(httpRequest, operationRequest, ctx);</code></pre><br/><br/>After the message transformer finishes parsing the passed in payload, the Cloud Call Center\n      framework instantiates the specified operation handler. The operating handler uses the\n        <span class=\"keyword apiname\">CTIOperationResponse</span> API get methods to obtain the information that it\n      needs from the associated CTIOperationRequest object to process the requested operation.<br/><br/>The following operation handler script stores values that were set on the CTIOperationRequest\n      object in the interaction record associated with the call.<br/><br/><pre><code class='language-javascript'>(function( /*CTIOperationRequest*/ request, /*CTIOperationResponse*/ response, ctx) {\n  // Returns the sys_id of the interaction record.\n  var interactionSysId = request.getInteractionSysId();\n  var number = request.getParameter('number');\n  var addComment = request.getParameter('add_comment');\n  addComment = addComment ? addComment.toLowerCase() : addComment;\n  addComment = 'yes' === addComment || 'true' === addComment || '1' === addComment;\n  var workNotes = request.getParameter('work_notes');\n  var message = gs.getMessage('Thankyou');\n  var interactionGr = request.getInteractionRecord();\n  var openedFor = interactionGr ? interactionGr.getValue('opened_for') : null;\n  if (openedFor &amp;&amp; number &amp;&amp; addComment &amp;&amp; workNotes) {\n    var now_GR = new GlideRecordSecure('incident');\n    now_GR.addQuery('caller_id', openedFor);\n    now_GR.addQuery('number', number);\n    now_GR.query();\n    if (now_GR.next()) {\n      now_GR.work_notes += workNotes;\n      now_GR.update();\n      message = gs.getMessage('Your comment was added');\n    }\n  }\n  response.setStatusCode(200);\n  response.setMessage(message);\n})(request, response, ctx);</code></pre><br/><br/>For additional information on creating operation handlers, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-servicenow-platform/page/product/cloud-call-center/task/establish-automated-bot-interactions.html\" target=\"_blank\">Configure a contact flow for an\n        automated caller interaction</a>.<br/><br/>This API runs in the <span class=\"keyword parmname\">sn_cti_core</span> namespace. Before you are able to\n      access the <span class=\"keyword apiname\">CTIOperationRequest</span> API, the Cloud Call Center Core\n      (sn_cti_core) plugin must be activated. For information on activating the Cloud Call Center,\n      see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-servicenow-platform/page/product/cloud-call-center/task/install-ccc-apps.html\" target=\"_blank\">Install Cloud Call Center\n        applications</a>.<br/><br/>For additional information on the Cloud Call Center, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-servicenow-platform/page/product/cloud-call-center/concept/cloud-call-center-overview.html\" target=\"_blank\">Cloud Call Center</a>.",
                "short_description": "The <span class=\"keyword apiname\">CTIOperationRequest</span> API provides methods to set and get data on\n    the current CTIOperationRequest object.",
                "identifier": "CTIOperationRequestAPI",
                "name": "CTIOperationRequest - Scoped, Global",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "CTIOpReq-CTIOperationRequest_S",
                        "short_description": "Instantiates a CTIOperationRequest object.",
                        "description": "",
                        "name": "CTIOperationRequest(String origin)",
                        "type": "Constructor",
                        "examples": [
                            {
                                "script": "var request = new sn_cti_core.CTIOperationRequest('AWS Connect');\nrequest.setSessionAttribute('contact.phone', '+15552222345');\nrequest.setSessionAttribute('contact.okToCall', true);\nrequest.setSessionAttribute('contact.address', {\n    street: '1234 Main St'\n    city: 'API City',\n    zip: 91335\n});",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "origin",
                                "type": "String",
                                "description": "Optional. Origin of the request. Usually the name of the computer telephony\n                integrator provider. <p class=\"p\">Default: null</p>"
                            }
                        ],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "CTIOpReq-getAuthToken",
                        "short_description": "Returns the authentication token set on the associated CTIOperationRequest\n    object.",
                        "description": "<p>This token is used by the Cloud Call Center framework to authenticate the current Cloud\n        Call Center user before executing the requested operation handler if the handler's\n          <span class=\"keyword parmname\">auth_required</span> flag is set to true. The\n          <span class=\"keyword parmname\">auth_required</span> flag is a field in the Operation Handler\n        [sn_cti_operation_handler] table. The life of an authentication token should be for the life\n        of the call session, but is determined by the CTI provider.</p><p>You can define whatever authentication/authorization handling required by your\n        implementation by creating your own authentication operation handler. Regardless of how the\n        authentication token is generated, the message translator must pass the token back in the\n        CTI payload. Additionally, the CTI provider must store this authentication token locally and\n        pass it in each operation request that requires authentication.</p><p>If using the instance provided authenticate operation handler, the handler initiates the\n        creation of the authentication token based on a four-digit user-entered pin. It then sets\n        the authentication token in the sessionAttributes object of the CTIOperationResponse object.\n        The associated message transformer translates the sessionAttributes object into the\n        CTI-specific payload and then sends it to the CTI provider.</p><p><div class=\"note note\"><span class=\"notetitle\">Note:</span> If the authentication token is not passed, all requests to execute operation handlers\n          with the <span class=\"keyword parmname\">auth_required</span> flag set will fail. If you do not use\n          authentication, you do not need to maintain authentication tokens.</div></p><p>The <span class=\"ph\">ServiceNow</span> base system provides\n        working operation handlers and message transformers that enable connection to Amazon\n        Connect. When building contact flows within Amazon Connect, there are two integration points\n        between Amazon services and a <span class=\"ph\">ServiceNow</span> instance:<ul class=\"ul\" id=\"CTIOpReq-getAuthToken__d81686e86\">\n          <li class=\"li\">Amazon Web Services (AWS) Lambda Proxy (Invoke AWS Lambda function)</li>\n\n          <li class=\"li\">AWS Lex Bot (Get Customer Input) </li>\n\n        </ul>\nYou can find the available operation handlers and message transformers for these\n        integration points in the Operation Handlers [sn_cti_operation_handler] and Provider Message\n        Transformer [sn_cti_provider_msg_transormer] tables.</p>",
                        "name": "getAuthToken()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "(function( /*CTIProviderResponseExecutionContext*/ ctx, /*CTIOperationRequest*/ operationRequest, /*CTIOperationResponse*/ operationResponse, /*HTTPResponse*/ httpResponse) {\n  var sessionAttributes = {},\n      intentResponse;\n  var statusCode = -1;\n  var message = 'Unprocessed';\n  if (operationResponse) {\n    statusCode = operationResponse.getStatusCode();\n    sessionAttributes = operationResponse.getSessionAttributes();\n    message = operationResponse.getMessage();\n    var error = operationResponse.getError();\n    if (error) {\n      sessionAttributes.error = error;\n    }\n  }\n  if (sn_cti_core.CTIRequestDispatcher.Constants.HTTP.Status.AUTH_REQUIRED.code === statusCode) {\n    //first call for a secure action without authentication token\n    sessionAttributes.statusCode = 401;\n    sessionAttributes.message = message;\n    intentResponse = {\n      sessionAttributes: sessionAttributes,\n      dialogAction: {\n        type: 'Close',\n        fulfillmentState: 'Fulfilled',\n        message: {\n          contentType: 'PlainText',\n          content: 'This operation requires authentication. Say authenticate for authentication.'\n        }\n      }\n    };\n  } else if ('DialogCodeHook' === operationRequest.getParameter('$$invocationSource')) {\n      //pass back authToken and interactionId\n      sessionAttributes.authToken = operationRequest.getAuthToken();\n      sessionAttributes.interactionId = operationRequest.getInteractionSysId();\n      var originalSlots = operationRequest.getParameter('$$slots');\n      var responseParameters = operationResponse ? operationResponse.getParameters() : {};\n      responseParameters = responseParameters ? responseParameters : {};\n      // See if processing happened and we got a dialogAction\n      var responseDialogAction = responseParameters['dialogAction'];\n      // Default dialog action\n      var dialogAction = {\n        type: 'Delegate',\n        slots: originalSlots\n      };\n      // If the response doesn't contain an override replay the inputs\n      if (responseDialogAction) {\n        // We bypassed dialoghook so delegate and pass through inputs\n        dialogAction = responseDialogAction;\n      }\n      intentResponse = {\n        sessionAttributes: sessionAttributes,\n        dialogAction: dialogAction\n      };\n  } else {\n    // Override required session attributes\n    sessionAttributes.statusCode = statusCode;\n    sessionAttributes.message = message;\n    // Build response template\n    intentResponse = {\n      sessionAttributes: sessionAttributes,\n      dialogAction: {\n        type: 'Close',\n        fulfillmentState: 'Fulfilled',\n        message: {\n          contentType: 'PlainText',\n          content: message\n        }\n      }\n    };\n  }\n  httpResponse.setBody(intentResponse);\n})(ctx, operationRequest, operationResponse, httpResponse);",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The authentication token associated with the current Cloud Call Center user."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "CTIOpReq-getInteractionRecord",
                        "short_description": "Returns the interaction GlideRecord associated with the operation request.",
                        "description": "<p>An interaction represents a customer request for assistance made through a chat, phone\n        call, or in-person. Interactions can be routed to queues for assignment or assigned to\n        agents directly. Interaction records are stored in the Interaction [interaction] table and\n        can contain any type of data that describes service account interactions with a customer for\n        a specific session.</p><p>Interaction records are associated with a CTIOperationRequest object through the <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=CTIOpReq-setInteractionSysId_S&amp;v=paris\" target=\"_blank\">CTIOperationRequest -\n          setInteractionSysId(String Id)</a>\n        method. This method is typically called by the message transformer and must be called prior\n        to calling the <span class=\"keyword apiname\">getInteractionRecord()</span> method.</p>",
                        "name": "getInteractionRecord()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "(function(/*CTIOperationRequest*/ request, /*CTIOperationResponse*/ response, /*Context*/ ctx) {\t\n  var notes = '', lang = request.getLanguage();\n  try { \n    // Returns the interaction record (GlideRecord) set on the passed in CTIOperationRequest object\t\t\n    var interactionGr = request.getInteractionRecord();\n\n    var now_GR = new GlideRecord('sys_user');\n    if(interactionGr &amp;&amp; now_GR.get(interactionGr.opened_for.toString())) {\t\n      if(now_GR.locked_out == true) {\n        notes += gs.getMessageLang(\"User record found locked. Unlocking the account.\\n\", lang);\n        now_GR.locked_out=false;\n        now_GR.update();\n        response.setStatusCode(200);\n        response.setMessage(gs.getMessageLang(\"Your account has been unlocked.\", lang));\n      } else {\n        notes += gs.getMessageLang(\"User record not locked.\\n\", lang);\n        response.setStatusCode(200);\n        response.setMessage(gs.getMessageLang(\"Your account doesn't seem to be locked.\", lang));\n      }\t\n    } else {\n      notes += gs.getMessageLang(\"User record not found. Transfer to agent\\n\", lang);\n      response.setStatusCode(302);\n      response.setMessage(gs.getMessageLang(\"I am unable to find your record. Let me transfer to someone who can help.\", lang));\n    }\n    if(interactionGr) {\n      interactionGr.work_notes = notes;\n      interactionGr.update();\n    }\n  } catch(e) {\n    ctx.setError(e);\n  }\n})(request, response, ctx);",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "GlideRecord",
                            "description": "Interaction GlideRecord object associated with the current CTIOperationRequest\n                object. If the interaction record sys_id has not been set on the CTIOperationRequest\n                object, returns null."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "CTIOpReq-getInteractionSysId",
                        "short_description": "Returns the sys_id of the interaction record associated with the current\n    CTIOperationRequest object.",
                        "description": "<p>The <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=CTIOpReq-setInteractionSysId_S&amp;v=paris\" target=\"_blank\">CTIOperationRequest -\n          setInteractionSysId(String Id)</a>\n        method must have been called prior to calling this method.</p>",
                        "name": "getInteractionSysId()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "(function( /*CTIOperationRequest*/ request, /*CTIOperationResponse*/ response, ctx) {\n  // Returns the sys_id of the interaction record associated with the CTIOperationRequest object.\n  var interactionSysId = request.getInteractionSysId();\n  var number = request.getParameter('number');\n  var addComment = request.getParameter('add_comment');\n  addComment = addComment ? addComment.toLowerCase() : addComment;\n  addComment = 'yes' === addComment || 'true' === addComment || '1' === addComment;\n  var workNotes = request.getParameter('work_notes');\n  var message = gs.getMessage('Thankyou');\n  var interactionGr = request.getInteractionRecord();\n  var openedFor = interactionGr ? interactionGr.getValue('opened_for') : null;\n  if (openedFor &amp;&amp; number &amp;&amp; addComment &amp;&amp; workNotes) {\n    var now_GR = new GlideRecordSecure('incident');\n    now_GR.addQuery('caller_id', openedFor);\n    now_GR.addQuery('number', number);\n    now_GR.query();\n    if (now_GR.next()) {\n      now_GR.work_notes += workNotes;\n      now_GR.update();\n      message = gs.getMessage('Your comment was added');\n    }\n  }\n  response.setStatusCode(200);\n  response.setMessage(message);\n})(request, response, ctx);",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The sys_id of the interaction record set on the current CTIOperationRequest\n                  object.<p class=\"p\">If the sys_id was not set on the associated CTIOperationRequest object,\n                  the method returns null.</p>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "CTIOpReq-getLanguage",
                        "short_description": "Returns the ISO 639.1 language code that was set on the current CTIOperationRequest\n    object.",
                        "description": "<p>Using the customer preferred language enables you to use platform-provided\n        internationalization and localization capabilities to customize messages and other\n        communications with the associated caller.</p><p>Typically an operation handler calls the getLanguage() method and the message transformer\n        sets the language on the CTIOperationRequest object by calling the <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=CTIOpReq-setLanguage_S&amp;v=paris\" target=\"_blank\">CTIOperationRequest -\n          setLanguage(String languageCode)</a> method.</p>",
                        "name": "getLanguage()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "(function(/*CTIOperationRequest*/ request, /*CTIOperationResponse*/ response) {\n  // Obtain the contact's preferred language\n  var notes = \"\", announcement, lang = request.getLanguage();\n  try {\n\t\t\n    var interactionGr = request.getInteractionRecord();\n\t\t\n    announcement = gs.getMessageLang(\"We are currently experiencing issues with VPN. If you are calling about VPN issues, you may hang up the call.\", lang);\n    // Use the contact's language to customize the response messages and notes\t\n    if(announcement) {\t\n      notes = gs.getMessageLang(\"Listened to announcement: {0}\", lang, [announcement]);\n      response.setStatusCode(200);\n    } else {\n      announcement = gs.getMessageLang(\"There are currently no known outage announcements\", lang);\n      //use the status case as the flag to check for announcements in contact flow\n      response.setStatusCode(404);\n    }\t\t\t\n    response.setMessage(announcement);\t\n\t\t\t\n    if(interactionGr &amp;&amp; notes) {\t\t\t\n      interactionGr.work_notes = notes;\t\t\n      interactionGr.update();\n    }\n\t\t\n  } catch(e) {\n    ctx.setError(e);\n  }\n\n})(request, response);",
                                "description": "The following example shows an operation handler calling <span class=\"keyword apiname\">getLanguage()</span>\n        to obtain the caller's preferred language."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The ISO 639.1 language code set on the current CTIOperationRequest object. If\n                the language code is not set, returns <samp class=\"ph systemoutput\">en</samp>."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "CTIOpReq-getMajorVersion",
                        "short_description": "Returns the major version of the computer telephony integrator (CTI) software set on\n    the current CTIOperationRequest object.",
                        "description": "<p>Use this method if the CTI providers connected to your <span class=\"ph\">ServiceNow</span> instance are running multiple versions of their software, as\n        different software versions may require different processing behavior. If the processing\n        behavior is only slightly different between the software versions, it may make sense to have\n        only a single operation handler. You can then handle the processing differences by just\n        checking the version of software making the request and process the request/data within your\n        operation handler. If the required processing is significantly different between versions,\n        it may be more effective to use multiple operation handlers.</p><p>Typically the message transformer sets the software version on the CTIOperationRequest\n        object by calling the <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=CTIOpReq-setMajorVersion_N&amp;v=paris\" target=\"_blank\">CTIOperationRequest -\n          setMajorVersion(Number majorVersion)</a>\n        method and an operation handler then consumes the set value using this method. You can also\n        get/set the minor version value of a provider's software using the <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=CTIOpReq-getMinorVersion&amp;v=paris\" target=\"_blank\">CTIOperationRequest -\n          getMinorVersion()</a> and <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=CTIOpReq-setMinorVersion_N&amp;v=paris\" target=\"_blank\">CTIOperationRequest -\n          setMinorVersion(Number minorVersion)</a>\n        methods.</p>",
                        "name": "getMajorVersion()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var request = new sn_cti_core.CTIOperationRequest('origin');\nvar majorVersion = request.getMajorVersion();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Number",
                            "description": "Major version number of the CTI software.<p class=\"p\">If the major version was never set,\n                  returns <samp class=\"ph systemoutput\">1</samp>. </p>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "CTIOpReq-getMinorVersion",
                        "short_description": "Returns the minor version of the computer telephony integrator (CTI) software\n    associated with a CTIOperationRequest object.",
                        "description": "<p>Use this method if the CTI providers connected to your <span class=\"ph\">ServiceNow</span> instance are running multiple versions of their software, as\n        different software versions may require different processing behavior. If the processing\n        behavior is only slightly different between the software versions, it may make sense to have\n        only a single operation handler. You can then handle the processing differences by just\n        checking the version of software making the request and process the request/data within your\n        operation handler. If the required processing is significantly different between versions,\n        it may be more effective to use multiple operation handlers.</p><p>Typically the message transformer sets the software version on the CTIOperationRequest\n        object by calling the <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=CTIOpReq-setMinorVersion_N&amp;v=paris\" target=\"_blank\">CTIOperationRequest -\n          setMinorVersion(Number minorVersion)</a><a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/sn_cti_core-namespace/CTIOperationRequestAPI#CTIOpReq-setMinorVersion_N\" title=\"Sets the minor version of the computer telephony integrator (CTI) provider software making the request on the associated CTIOperationRequest object.\">CTIOperationRequest - setMinorVersion(Number minorVersion)</a>\n        method and an operation handler then consumes the set value using this method. You can also\n        get/set the major version value of a provider's software using the <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=CTIOpReq-getMajorVersion&amp;v=paris\" target=\"_blank\">CTIOperationRequest -\n          getMajorVersion()</a><a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/sn_cti_core-namespace/CTIOperationRequestAPI#CTIOpReq-getMajorVersion\" title=\"Returns the major version of the computer telephony integrator (CTI) software set on the current CTIOperationRequest object.\">CTIOperationRequest - getMajorVersion()</a> and <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=CTIOpReq-setMajorVersion_N&amp;v=paris\" target=\"_blank\">CTIOperationRequest -\n          setMajorVersion(Number majorVersion)</a><a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/sn_cti_core-namespace/CTIOperationRequestAPI#CTIOpReq-setMajorVersion_N\" title=\"Sets the major version of the computer telephony integrator (CTI) provider software making the request on the associated CTIOperationRequest object.\">CTIOperationRequest - setMajorVersion(Number majorVersion)</a>\n        methods.</p>",
                        "name": "getMinorVersion()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var request = new sn_cti_core.CTIOperationRequest('origin');\nvar minorVersion = request.getMinorVersion();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Number",
                            "description": "Minor version number of the CTI software. <p class=\"p\">If the minor version was never\n                  set, returns <samp class=\"ph systemoutput\">0</samp>. </p>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "CTIOpReq-getOperationName",
                        "short_description": "Returns the name of the operation that the computer telephony integration (CTI)\n    provider is requesting to execute.",
                        "description": "<p>The operation name determines the operation handler that is used to process a request.\n        Typically the message transformer sets the operation name on the CTIOperationRequest object\n        using the <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=CTIOpReq-setOperationName_S&amp;v=paris\" target=\"_blank\">CTIOperationRequest -\n          setOperationName(String name)</a>\n        method.</p><p><div class=\"note note\"><span class=\"notetitle\">Note:</span> The <span class=\"keyword apiname\">getOperationName()</span> method does not instantiate the associated\n          operation handler. This is done by the Cloud Call Center framework. This method simply\n          returns the associated operation handler name.</div>\n\n        <div class=\"note note\"><span class=\"notetitle\">Note:</span> For Amazon Connect Lex\n          Bot implementations, intent names are appended with a five letter suffix as different\n          Amazon intents cannot have the same intent name. In the Cloud Call Center framework, the\n          intent name equals the operation handler name. An operation handler can either be specific\n          for an intent, having an operation handler name that includes this suffix\n          (myOperation_SUFFX), or it can be generic and used by multiple CTI providers or different\n          use cases, such as using the same handler for processing an HR request and a helpdesk\n          request (myOperation).</div></p>",
                        "name": "getOperationName()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var request = new sn_cti_core.CTIOperationRequest('origin');\nvar name = request.getOperationName();\n",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The name of the operation that the CTI provider is requesting to execute. If\n                the operation name is not set, returns null."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "CTIOpReq-getOperationSubStepName",
                        "short_description": "Returns the substep operation handler name set on the current CTIOperationRequest\n    object.",
                        "description": "<p>Use substeps to perform actions such as initialization and validation before processing an\n        operation. Unlike operation handlers that are meant to be generic and used by all CTI\n        providers, substeps are CTI provider specific and use terminology and naming conventions\n        that are specific to the CTI provider.</p><p>The Cloud Call Center framework performs the following steps to locate the required\n        operation handler and any associated substep operation handlers.<div class=\"note note\" id=\"CTIOpReq-getOperationSubStepName__d81686e104\"><span class=\"notetitle\">Note:</span> For Amazon Connect Lex\n          Bot implementations, intent names are appended with a five letter suffix as different\n          Amazon intents cannot have the same intent name. In the Cloud Call Center framework, the\n          intent name equals the operation handler name. An operation handler can either be specific\n          for an intent, having an operation handler name that includes this suffix\n          (myOperation_SUFFX), or it can be generic and used by multiple CTI providers or different\n          use cases, such as using the same handler for processing an HR request and a helpdesk\n          request (myOperation).</div>\n<ol class=\"ol\" id=\"CTIOpReq-getOperationSubStepName__d81686e106\">\n          <li class=\"li\">Tries to locate the operation handler associated with the request. <ul class=\"ul\" id=\"CTIOpReq-getOperationSubStepName__d81686e110\">\n              <li class=\"li\">First checks for an operation handler called <samp class=\"ph codeph\">myOperation_SUFFX</samp>. </li>\n\n              <li class=\"li\">If not found, checks for the operation handler <samp class=\"ph codeph\">myOperation</samp>. If\n                not found, errors out.</li>\n\n            </ul>\n</li>\n\n          <li class=\"li\">If the handler is found, checks the <span class=\"keyword parmname\">auth_required</span> flag on the\n            operation handler. If set, it checks that a valid authentication token (obtained through\n            the <span class=\"keyword apiname\">getAuthToken()</span> method) is present on the request. If present and\n            valid, continue processing, else throw an error.</li>\n\n          <li class=\"li\">Looks up the operation handler for the passed in substep. For this example let's\n            assume <samp class=\"ph codeph\">subStepName=SubStep</samp>.<ul class=\"ul\" id=\"CTIOpReq-getOperationSubStepName__d81686e139\">\n              <li class=\"li\">First checks for an operation handler named\n                  <samp class=\"ph codeph\">myOperation_SUFFX.SubStep</samp>. If found, executes the handler.</li>\n\n              <li class=\"li\">If not found, checks for the handler <samp class=\"ph codeph\">myOperation.SubStep</samp>. If\n                found executes the handler.</li>\n\n              <li class=\"li\">If not found, checks if a <samp class=\"ph codeph\">subStepNotFoundBehavior</samp> was set on the\n                request object.</li>\n\n              <li class=\"li\">If set, executes the behavior, otherwise, errors out.</li>\n\n            </ul>\n</li>\n\n          <li class=\"li\">Executes the primary operation handler (<samp class=\"ph codeph\">myOpersation_SUFFX</samp> or\n              <samp class=\"ph codeph\">myOperation</samp>.)</li>\n\n        </ol></p><p>Typically the message transformer sets the substep name on the CTIOperationRequest object\n        using the <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=CTIOpReq-setOperationSubStepName_S&amp;v=paris\" target=\"_blank\">CTIOperationRequest -\n          setOperationSubStepName(String name)</a> method. You can override this behavior if\n        you are creating your own transformer by calling the <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=CTIOpReq-setSubStepNotFoundBehav_O&amp;v=paris\" target=\"_blank\">CTIOperationRequest -\n          setSubStepNotFoundBehaviour(Object behaviour)</a> method.</p>",
                        "name": "getOperationSubStepName()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var request = new sn_cti_core.CTIOperationRequest('origin');\nvar name = request.getOperationSubStepName();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The name of the substep operation handler set on the CTIOperationRequest\n                object. If it does not exist, returns null."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "CTIOpReq-getParameter_S",
                        "short_description": "Returns the value of a specified key previously set on the current CTIOperationRequest\n    object.",
                        "description": "<p>Using the get/set parameter methods enables the passing of\n        virtually any string or number value between a message transformer and an operation handler.\n        The parameter object can contain zero or more key/value pairs of data that directly\n        correlate to the current operation request. The operation handler determines what key/value\n        pairs are required as it consumes these values. Typically the message transformer sets these\n        parameters on the CTIOperationRequest object by calling the <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=CTIOpReq-setParameter_S_O&amp;v=paris\" target=\"_blank\">CTIOperationRequest -\n          setParameter(String key, Object value)</a> method and the operation handler\n        consumes them using this method.</p>",
                        "name": "getParameter(String key)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "(function( /*CTIOperationRequest*/ request, /*CTIOperationResponse*/ response, ctx) {\n  var interactionSysId = request.getInteractionSysId();\n  // Returns the number and add_comment parameters from the CTIOperationRequest object\n  var number = request.getParameter('number');\n  var addComment = request.getParameter('add_comment');\n  addComment = addComment ? addComment.toLowerCase() : addComment;\n  addComment = 'yes' === addComment || 'true' === addComment || '1' === addComment;\n  var workNotes = request.getParameter('work_notes');\n  var message = gs.getMessage('Thankyou');\n  var interactionGr = request.getInteractionRecord();\n  var openedFor = interactionGr ? interactionGr.getValue('opened_for') : null;\n  if (openedFor &amp;&amp; number &amp;&amp; addComment &amp;&amp; workNotes) {\n    var now_GR = new GlideRecordSecure('incident');\n    now_GR.addQuery('caller_id', openedFor);\n    now_GR.addQuery('number', number);\n    now_GR.query();\n    if (now_GR.next()) {\n      now_GR.work_notes += workNotes;\n      now_GR.update();\n      message = gs.getMessage('Your comment was added');\n    }\n  }\n  response.setStatusCode(200);\n  response.setMessage(message);\n})(request, response, ctx);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "key",
                                "type": "String",
                                "description": "The name of the key value to return."
                            }
                        ],
                        "return": {
                            "type": "String or Number",
                            "description": "Value of the specified key. If no such key exists, returns null."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "CTIOpReq-getParameters",
                        "short_description": "Returns the key-value pairs for all parameters that were previously set on the current\n    CTIOperationRequest object.",
                        "description": "<p>Using the get/set parameter methods enables the passing of\n        virtually any string or number value between a message transformer and an operation handler.\n        The parameter object can contain zero or more key/value pairs of data that directly\n        correlate to the current operation request. The operation handler determines what key/value\n        pairs are required as it consumes these values. Typically the message transformer sets these\n        parameters on the CTIOperationRequest object by calling the <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=CTIOpReq-setParameter_S_O&amp;v=paris\" target=\"_blank\">CTIOperationRequest -\n          setParameter(String key, Object value)</a> method and the operation handler\n        consumes them using this method.</p>",
                        "name": "getParameters()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var request = new sn_cti_core.CTIOperationRequest('origin');\nvar parms = request.getParameters();\nfor(var key in parms) {\n    gs.info(key + '=' + parms[key]);\n}",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Object",
                            "description": "A map of key-value pairs that were previously set on the CTIOperationRequest\n                object. This key-value pairs are free-form and defined by the needs of the operation\n                handler. The returned values are either Strings or Numbers."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "CTIOpReq-getSessionAttribute_S",
                        "short_description": "Returns the value of a specified session attribute key set on the current\n    CTIOperationRequest object.",
                        "description": "<p>Using the get/set session attribute methods enables the\n        passing of virtually any string or number value between a message transformer and an\n        operation handler. The sessionAttribute object can contain zero or more key/value pairs of\n        data that are valid for the duration of a computer telephony integration provider defined\n        session, such as the contact's phone number. Session attributes can also be accessed within\n        a contact flow. The operation handler determines what session attribute key/value pairs are\n        needed as it consumes these values. Typically the message transformer sets these attributes\n        on the CTIOperationRequest object by calling the <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=CTIOpReq-setSessionAttribute_S_O&amp;v=paris\" target=\"_blank\">CTIOperationRequest -\n          setSessionAttribute(String key, Object value)</a>\n        method. Session attributes are different than parameters in that they persist for the life\n        of the session (such as the entire call) and should be passed back by the CTI provider with\n        each operation request within that call session.</p>",
                        "name": "getSessionAttribute(String key)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var request = new sn_cti_core.CTIOperationRequest('origin');\nvar phoneAttribute = request.getSessionAttribute('contact.phone');",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "key",
                                "type": "String",
                                "description": "The name of the key value to return."
                            }
                        ],
                        "return": {
                            "type": "String or Number",
                            "description": "Value of the specified key. If no such key exists, returns null."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "CTIOpReq-getSessionAttributes",
                        "short_description": "Returns a key-value pair map of all session attributes set on the current\n    CTIOperationRequest object.",
                        "description": "<p>Using the get/set session attribute methods enables the\n        passing of virtually any string or number value between a message transformer and an\n        operation handler. The sessionAttribute object can contain zero or more key/value pairs of\n        data that are valid for the duration of a computer telephony integration provider defined\n        session, such as the contact's phone number. Session attributes can also be accessed within\n        a contact flow. The operation handler determines what session attribute key/value pairs are\n        needed as it consumes these values. Typically the message transformer sets these attributes\n        on the CTIOperationRequest object by calling the <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=CTIOpReq-setSessionAttribute_S_O&amp;v=paris\" target=\"_blank\">CTIOperationRequest -\n          setSessionAttribute(String key, Object value)</a>\n        method. Session attributes are different than parameters in that they persist for the life\n        of the session (such as the entire call) and should be passed back by the CTI provider with\n        each operation request within that call session.</p>",
                        "name": "getSessionAttributes()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var request = new sn_cti_core.CTIOperationRequest('origin');\nvar parms = request.getSessionAttributes();\nfor(var key in parms) {\n    gs.info(key + '=' + parms[key]);\n}",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Object",
                            "description": "A map of session attribute key-value pairs that were set on the associated\n                CTIOperationResponse object. This map is free-form and defined by the needs of the\n                operation handler."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "CTIOpReq-getSubStepNotFoundBehaviour",
                        "short_description": "Returns the handling behavior for a subsep when a substep's operation handler is not\n    found.",
                        "description": "<p>Use substeps to perform actions such as initialization and validation before processing an\n        operation. Unlike operation handlers that are meant to be generic and used by all CTI\n        providers, substeps are CTI provider specific and use terminology and naming conventions\n        that are specific to the CTI provider.</p><p>If the requested substep operation handler cannot be found by the Cloud Call Center\n        framework, it attempts to use the \"step not found behavior\". This behavior is typically set\n        by the message transformer when an operation is initially requested.</p>",
                        "name": "getSubStepNotFoundBehaviour",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var request = new sn_cti_core.CTIOperationRequest('origin');\nvar behavior = request.getSubStepNotFoundBehaviour();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "OperationNotFoundBehaviours",
                            "description": "The behavior/handling to perform when an operation handler cannot be found for\n                the operation/substep combination\n                (<span class=\"keyword parmname\">&lt;operation_name&gt;</span>.SubStep>). If not defined, returns\n                  null.<div class=\"p\">Possible values:<ul class=\"ul\" id=\"CTIOpReq-getSubStepNotFoundBehaviour__ul_kbc_53f_1lb\">\n                    <li class=\"li\">OperationNotFoundBehaviours.ThrowError: Throw an error.</li>\n\n                    <li class=\"li\">OperationNotFoundBehaviours.PassThrough: Do not perform any further\n                      processing on the request, just return.</li>\n\n                    <li class=\"li\">OperationNotFoundBehaviours.RouteToOperation: Use the parent operation\n                      handler <span class=\"keyword parmname\">&lt;operation_name&gt;</span>.</li>\n\n                  </ul>\n</div>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "CTIOpReq-setAuthToken_S",
                        "short_description": "Sets an authentication token on the current CTIOperationRequest object.",
                        "description": "<p>This token is used by the Cloud Call Center framework to authenticate the current Cloud\n        Call Center user before executing the requested operation handler if the handler's\n          <span class=\"keyword parmname\">auth_required</span> flag is set to true. The\n          <span class=\"keyword parmname\">auth_required</span> flag is a field in the Operation Handler\n        [sn_cti_operation_handler] table. The life of an authentication token should be for the life\n        of the call session, but is determined by the CTI provider.</p><p>You can define whatever authentication/authorization handling required by your\n        implementation by creating your own authentication operation handler. Regardless of how the\n        authentication token is generated, the message translator must pass the token back in the\n        CTI payload. Additionally, the CTI provider must store this authentication token locally and\n        pass it in each operation request that requires authentication.</p><p>If using the instance provided authenticate operation handler, the handler initiates the\n        creation of the authentication token based on a four-digit user-entered pin. It then sets\n        the authentication token in the sessionAttributes object of the CTIOperationResponse object.\n        The associated message transformer translates the sessionAttributes object into the\n        CTI-specific payload and then sends it to the CTI provider.</p><p><div class=\"note note\"><span class=\"notetitle\">Note:</span> If the authentication token is not passed, all requests to execute operation handlers\n          with the <span class=\"keyword parmname\">auth_required</span> flag set will fail. If you do not use\n          authentication, you do not need to maintain authentication tokens.</div></p><p>The <span class=\"ph\">ServiceNow</span> base system provides\n        working operation handlers and message transformers that enable connection to Amazon\n        Connect. When building contact flows within Amazon Connect, there are two integration points\n        between Amazon services and a <span class=\"ph\">ServiceNow</span> instance:<ul class=\"ul\" id=\"CTIOpReq-setAuthToken_S__d81686e86\">\n          <li class=\"li\">Amazon Web Services (AWS) Lambda Proxy (Invoke AWS Lambda function)</li>\n\n          <li class=\"li\">AWS Lex Bot (Get Customer Input) </li>\n\n        </ul>\nYou can find the available operation handlers and message transformers for these\n        integration points in the Operation Handlers [sn_cti_operation_handler] and Provider Message\n        Transformer [sn_cti_provider_msg_transormer] tables.</p>",
                        "name": "setAuthToken(String id)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "{\t\n  try {\n    var jsonPayload = httpRequest.body.data;\n    if (jsonPayload) {\n\tvar event = jsonPayload.event;\n\tif (event) {\n\t  var details = event.Details;\n\t  if (details) {\t\t\t\t\t\n\t    operationRequest.setOperationName(details.Parameters['sn_operation']);\n\t    var contactData = details.ContactData;\n\t    if(contactData) {\n\t\t// Call id should be surfaced in openframe call log so it can be tied to transcription later\n\t\toperationRequest.setParameter('contact.call_id', contactData.ContactId);\n\t\tfor(var ck in contactData.CustomerEndpoint) {\n\t\t  operationRequest.setParameter('contact.' + ck, contactData.CustomerEndpoint[ck]);\n\t       }\n\t       operationRequest.setParameter('contact.id', contactData.ContactId);\n\t       operationRequest.setParameter('contact.phone', contactData.CustomerEndpoint.Address);\n\t    }\n\t    var parameters = details.Parameters;\n\t    if (parameters) {\n\t\tfor (var pk in parameters) {\n\t\t  switch(pk) {\n\t\t    case 'interactionId':\n\t\t\toperationRequest.setInteractionSysId(parameters[pk]);\n\t\t\tbreak;\n\t\t    case 'authToken':\n\t\t\toperationRequest.setAuthToken(parameters[pk]);\n\t\t\tbreak;\n\t\t    case 'language':\n\t\t\toperationRequest.setLanguage(parameters[pk]);\n\t\t\tbreak;\n\t\t    case 'statusCode':\n\t\t    case 'message':\n\t\t\tbreak;\n\t\t\t\t\t\t\t\t\n\t\t    default:\n\t\t\toperationRequest.setParameter(pk, parameters[pk]);\n\t\t }\t\t\t\t\t\t\n            }\n          }\t\t\t\t\t\n        }\n      }\n    }\n  } catch(e) {\n\t\tctx.setError(e);\n  }\n})(httpRequest, operationRequest, ctx);",
                                "description": " of message transformer script that saves the passed in authentication token."
                            }
                        ],
                        "params": [
                            {
                                "name": "id",
                                "type": "String",
                                "description": "The authentication token for the associated Cloud Call Center user."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "CTIOpReq-setInteractionSysId_S",
                        "short_description": "Sets the sys_id of the interaction record associated with the operation request on the\n    current CTIOperationRequest object.",
                        "description": "<p>If you want to maintain contact interaction information within a contact-specific\n        interaction record, the interaction record sys_id must be maintained for the entire Cloud\n        Call Center call session.</p><p>Typically, an operation handler creates an interaction record when a new contact call is\n        initiated. It then sets the interaction record sys_id and table name on the associated\n        CTIOperationResponse object as session attributes using the <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=CTIOpResp-setSessionAttribute_S_O&amp;v=paris\" target=\"_blank\">CTIOperationRequest -\n          setSessionAttribute(String key, Object value)</a>\n        method. The associated method transformer then translates this information into the computer\n        telephony integration (CTI) provider payload and sends it back to the CTI provider.</p><p>The CTI provider must store the interaction record sys_id for the contact session locally.\n        Each time the CTI provider interacts with the Cloud Call Center for this contact session, it\n        must pass back the corresponding interaction record sys_id in its payload. The receiving\n        message transformer then parses the payload and uses the CTIOperationRequest -\n        setInteractionSysId() method to set the interaction record sys_id on the associated\n        CTIOperationtRequest object.</p><p>The <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=CTIOpReq-getInteractionRecord&amp;v=paris\" target=\"_blank\">CTIOperationRequest -\n          getInteractionRecord()</a> method uses\n        this sys_id to obtain the correct interaction record for the contact session. Interaction\n        records are located in the Interaction [interaction] table. For additional information on\n        interaction records, see</p>",
                        "name": "setInteractionSysId(String Id)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "{\t\n  try {\n    var jsonPayload = httpRequest.body.data;\n    if (jsonPayload) {\n\tvar event = jsonPayload.event;\n\tif (event) {\n\t  var details = event.Details;\n\t  if (details) {\t\t\t\t\t\n\t    operationRequest.setOperationName(details.Parameters['sn_operation']);\n\t    var contactData = details.ContactData;\n\t    if(contactData) {\n\t\t// Call id should be surfaced in openframe call log so it can be tied to transcription later\n\t\toperationRequest.setParameter('contact.call_id', contactData.ContactId);\n\t\tfor(var ck in contactData.CustomerEndpoint) {\n\t\t  operationRequest.setParameter('contact.' + ck, contactData.CustomerEndpoint[ck]);\n\t       }\n\t       operationRequest.setParameter('contact.id', contactData.ContactId);\n\t       operationRequest.setParameter('contact.phone', contactData.CustomerEndpoint.Address);\n\t    }\n\t    var parameters = details.Parameters;\n\t    if (parameters) {\n\t\tfor (var pk in parameters) {\n\t\t  switch(pk) {\n                 // Associate the existing customer interaction record with the request\n\t\t    case 'interactionId':\n\t\t\toperationRequest.setInteractionSysId(parameters[pk]);\n\t\t\tbreak;\n\t\t    case 'authToken':\n\t\t\toperationRequest.setAuthToken(parameters[pk]);\n\t\t\tbreak;\n\t\t    case 'language':\n\t\t\toperationRequest.setLanguage(parameters[pk]);\n\t\t\tbreak;\n\t\t    case 'statusCode':\n\t\t    case 'message':\n\t\t\tbreak;\n\t\t\t\t\t\t\t\t\n\t\t    default:\n\t\t\toperationRequest.setParameter(pk, parameters[pk]);\n\t\t }\t\t\t\t\t\t\n            }\n          }\t\t\t\t\t\n        }\n      }\n    }\n  } catch(e) {\n\t\tctx.setError(e);\n  }\n})(httpRequest, operationRequest, ctx);",
                                "description": " of a message transformer script that extracts the interaction record sys_id from\n        the incoming payload (passed as a parameter) and sets it on the associated\n        CTIOperationRequest object."
                            }
                        ],
                        "params": [
                            {
                                "name": "sys_id",
                                "type": "String",
                                "description": "The sys_id of the interaction record to associate with the request."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "CTIOpReq-setLanguage_S",
                        "short_description": "Sets the ISO 639.1 language code to use when processing the associated operation on a\n    CTIOperationRequest object.",
                        "description": "<p>Using the customer preferred language enables you to use platform-provided\n        internationalization and localization capabilities to customize messages and other\n        communications with the associated caller. Typically the message transformer sets the\n        language on the CTIOperationRequest object.</p>",
                        "name": "setLanguage(String languageCode)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "{\t\n  try {\n    var jsonPayload = httpRequest.body.data;\n    if (jsonPayload) {\n\tvar event = jsonPayload.event;\n\tif (event) {\n\t  var details = event.Details;\n\t  if (details) {\t\t\t\t\t\n\t    operationRequest.setOperationName(details.Parameters['sn_operation']);\n\t    var contactData = details.ContactData;\n\t    if(contactData) {\n\t\t// Call id should be surfaced in openframe call log so it can be tied to transcription later\n\t\toperationRequest.setParameter('contact.call_id', contactData.ContactId);\n\t\tfor(var ck in contactData.CustomerEndpoint) {\n\t\t  operationRequest.setParameter('contact.' + ck, contactData.CustomerEndpoint[ck]);\n\t       }\n\t       operationRequest.setParameter('contact.id', contactData.ContactId);\n\t       operationRequest.setParameter('contact.phone', contactData.CustomerEndpoint.Address);\n\t    }\n\t    var parameters = details.Parameters;\n\t    if (parameters) {\n\t\tfor (var pk in parameters) {\n\t\t  switch(pk) {\n\t\t    case 'interactionId':\n\t\t\toperationRequest.setInteractionSysId(parameters[pk]);\n\t\t\tbreak;\n\t\t    case 'authToken':\n\t\t\toperationRequest.setAuthToken(parameters[pk]);\n\t\t\tbreak;\n\t\t    case 'language':\n\t\t\toperationRequest.setLanguage(parameters[pk]);\n\t\t\tbreak;\n\t\t    case 'statusCode':\n\t\t    case 'message':\n\t\t\tbreak;\n\t\t\t\t\t\t\t\t\n\t\t    default:\n\t\t\toperationRequest.setParameter(pk, parameters[pk]);\n\t\t }\t\t\t\t\t\t\n            }\n          }\t\t\t\t\t\n        }\n      }\n    }\n  } catch(e) {\n\t\tctx.setError(e);\n  }\n})(httpRequest, operationRequest, ctx);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "languageCode",
                                "type": "String",
                                "description": "The ISO 639.1 language code to use when processing the associated\n                operation."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "CTIOpReq-setMajorVersion_N",
                        "short_description": "Sets the major version of the computer telephony integrator (CTI) provider software\n    making the request on the associated CTIOperationRequest object.",
                        "description": "<p>Use this method if the CTI providers connected to your <span class=\"ph\">ServiceNow</span> instance are running multiple versions of their software, as\n        different software versions may require different processing behavior. If the processing\n        behavior is only slightly different between the software versions, it may make sense to have\n        only a single operation handler. You can then handle the processing differences by just\n        checking the version of software making the request and process the request/data within your\n        operation handler. If the required processing is significantly different between versions,\n        it may be more effective to use multiple operation handlers.</p><p>Typically the message transformer sets the software version on the CTIOperationRequest\n        object by calling this method and an operation handler then consumes the set value using the\n          <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=CTIOpReq-getMajorVersion&amp;v=paris\" target=\"_blank\">CTIOperationRequest -\n          getMajorVersion()</a> method. You can also\n        get/set the minor version value of a provider's software using the <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=CTIOpReq-getMinorVersion&amp;v=paris\" target=\"_blank\">CTIOperationRequest -\n          getMinorVersion()</a> and <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=CTIOpReq-setMinorVersion_N&amp;v=paris\" target=\"_blank\">CTIOperationRequest -\n          setMinorVersion(Number minorVersion)</a>\n        methods.</p>",
                        "name": "setMajorVersion(Number majorVersion)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var request = new sn_cti_core.CTIOperationRequest('origin');\nrequest.setMajorVersion(2);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "majorVersion",
                                "type": "Number",
                                "description": "Major version of the CTI provider software making the operation request.<p class=\"p\">If\n                  this value was not previously set, returns\n                <samp class=\"ph systemoutput\">1</samp>.</p>"
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "CTIOpReq-setMinorVersion_N",
                        "short_description": "Sets the minor version of the computer telephony integrator (CTI) provider software\n    making the request on the associated CTIOperationRequest object.",
                        "description": "<p>Use this method if the CTI providers connected to your <span class=\"ph\">ServiceNow</span> instance are running multiple versions of their software, as\n        different software versions may require different processing behavior. If the processing\n        behavior is only slightly different between the software versions, it may make sense to have\n        only a single operation handler. You can then handle the processing differences by just\n        checking the version of software making the request and process the request/data within your\n        operation handler. If the required processing is significantly different between versions,\n        it may be more effective to use multiple operation handlers.</p><p>Typically the message transformer sets the software version on the CTIOperationRequest\n        object by calling this method and an operation handler then consumes the set value using the\n          <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=CTIOpReq-getMinorVersion&amp;v=paris\" target=\"_blank\">CTIOperationRequest -\n          getMinorVersion()</a> method. You can also\n        get/set the major version value of a provider's software using the <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=CTIOpReq-getMajorVersion&amp;v=paris\" target=\"_blank\">CTIOperationRequest -\n          getMajorVersion()</a> and <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=CTIOpReq-setMajorVersion_N&amp;v=paris\" target=\"_blank\">CTIOperationRequest -\n          setMajorVersion(Number majorVersion)</a>\n        methods.</p>",
                        "name": "setMinorVersion(Number minorVersion)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var request = new sn_cti_core.CTIOperationRequest('origin');\n...\nrequest.setMinorVersion(3);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "minorVersion",
                                "type": "Number",
                                "description": "Minor version of the CTI provider software making the operation request.<p class=\"p\">If\n                  this value was not previously set, returns\n                <samp class=\"ph systemoutput\">0</samp>.</p>"
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "CTIOpReq-setOperationName_S",
                        "short_description": "Sets the name of the operation that the computer telephony integration (CTI) provider\n    is attempting to execute on the current CTIOperationRequest object.",
                        "description": "<p>The operation name determines the operation handler that is used to process the request.\n        Call this method from the associated message transformer.</p><p><div class=\"note note\"><span class=\"notetitle\">Note:</span> For Amazon Connect Lex\n          Bot implementations, intent names are appended with a five letter suffix as different\n          Amazon intents cannot have the same intent name. In the Cloud Call Center framework, the\n          intent name equals the operation handler name. An operation handler can either be specific\n          for an intent, having an operation handler name that includes this suffix\n          (myOperation_SUFFX), or it can be generic and used by multiple CTI providers or different\n          use cases, such as using the same handler for processing an HR request and a helpdesk\n          request (myOperation).</div></p>",
                        "name": "setOperationName(String name)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "{\t\n  try {\n    var jsonPayload = httpRequest.body.data;\n    if (jsonPayload) {\n\tvar event = jsonPayload.event;\n\tif (event) {\n\t  var details = event.Details;\n\t  if (details) {\t\n           // Set the operation handler to use to process the request\t\t\t\t\n\t    operationRequest.setOperationName(details.Parameters['sn_operation']);\n\t    var contactData = details.ContactData;\n\t    if(contactData) {\n\t\t// Call id should be surfaced in openframe call log so it can be tied to transcription later\n\t\toperationRequest.setParameter('contact.call_id', contactData.ContactId);\n\t\tfor(var ck in contactData.CustomerEndpoint) {\n\t\t  operationRequest.setParameter('contact.' + ck, contactData.CustomerEndpoint[ck]);\n\t       }\n\t       operationRequest.setParameter('contact.id', contactData.ContactId);\n\t       operationRequest.setParameter('contact.phone', contactData.CustomerEndpoint.Address);\n\t    }\n\t    var parameters = details.Parameters;\n\t    if (parameters) {\n\t\tfor (var pk in parameters) {\n\t\t  switch(pk) {\n\t\t    case 'interactionId':\n\t\t\toperationRequest.setInteractionSysId(parameters[pk]);\n\t\t\tbreak;\n\t\t    case 'authToken':\n\t\t\toperationRequest.setAuthToken(parameters[pk]);\n\t\t\tbreak;\n\t\t    case 'language':\n\t\t\toperationRequest.setLanguage(parameters[pk]);\n\t\t\tbreak;\n\t\t    case 'statusCode':\n\t\t    case 'message':\n\t\t\tbreak;\n\t\t\t\t\t\t\t\t\n\t\t    default:\n\t\t\toperationRequest.setParameter(pk, parameters[pk]);\n\t\t }\t\t\t\t\t\t\n            }\n          }\t\t\t\t\t\n        }\n      }\n    }\n  } catch(e) {\n\t\tctx.setError(e);\n  }\n})(httpRequest, operationRequest, ctx);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "name",
                                "type": "String",
                                "description": "The name of the operation that the CTI provider is currently attempting to\n                execute. <p class=\"p\">This name must be the same as the name of the operation handler to use\n                  to process the request. If it is not, an error is thrown. You can locate the\n                  available operation handlers in the Operation Handler [sn_cti_operation_handler]\n                  table. </p>"
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "CTIOpReq-setOperationSubStepName_S",
                        "short_description": "Sets the operation substep name on the current CTIOperationRequest object.",
                        "description": "<p>Use substeps to perform actions such as initialization and validation before processing an\n        operation. Unlike operation handlers that are meant to be generic and used by all CTI\n        providers, substeps are CTI provider specific and use terminology and naming conventions\n        that are specific to the CTI provider.</p><p>The Cloud Call Center framework performs the following steps to locate the required\n        operation handler and any associated substep operation handlers.<div class=\"note note\" id=\"CTIOpReq-setOperationSubStepName_S__d81686e104\"><span class=\"notetitle\">Note:</span> For Amazon Connect Lex\n          Bot implementations, intent names are appended with a five letter suffix as different\n          Amazon intents cannot have the same intent name. In the Cloud Call Center framework, the\n          intent name equals the operation handler name. An operation handler can either be specific\n          for an intent, having an operation handler name that includes this suffix\n          (myOperation_SUFFX), or it can be generic and used by multiple CTI providers or different\n          use cases, such as using the same handler for processing an HR request and a helpdesk\n          request (myOperation).</div>\n<ol class=\"ol\" id=\"CTIOpReq-setOperationSubStepName_S__d81686e106\">\n          <li class=\"li\">Tries to locate the operation handler associated with the request. <ul class=\"ul\" id=\"CTIOpReq-setOperationSubStepName_S__d81686e110\">\n              <li class=\"li\">First checks for an operation handler called <samp class=\"ph codeph\">myOperation_SUFFX</samp>. </li>\n\n              <li class=\"li\">If not found, checks for the operation handler <samp class=\"ph codeph\">myOperation</samp>. If\n                not found, errors out.</li>\n\n            </ul>\n</li>\n\n          <li class=\"li\">If the handler is found, checks the <span class=\"keyword parmname\">auth_required</span> flag on the\n            operation handler. If set, it checks that a valid authentication token (obtained through\n            the <span class=\"keyword apiname\">getAuthToken()</span> method) is present on the request. If present and\n            valid, continue processing, else throw an error.</li>\n\n          <li class=\"li\">Looks up the operation handler for the passed in substep. For this example let's\n            assume <samp class=\"ph codeph\">subStepName=SubStep</samp>.<ul class=\"ul\" id=\"CTIOpReq-setOperationSubStepName_S__d81686e139\">\n              <li class=\"li\">First checks for an operation handler named\n                  <samp class=\"ph codeph\">myOperation_SUFFX.SubStep</samp>. If found, executes the handler.</li>\n\n              <li class=\"li\">If not found, checks for the handler <samp class=\"ph codeph\">myOperation.SubStep</samp>. If\n                found executes the handler.</li>\n\n              <li class=\"li\">If not found, checks if a <samp class=\"ph codeph\">subStepNotFoundBehavior</samp> was set on the\n                request object.</li>\n\n              <li class=\"li\">If set, executes the behavior, otherwise, errors out.</li>\n\n            </ul>\n</li>\n\n          <li class=\"li\">Executes the primary operation handler (<samp class=\"ph codeph\">myOpersation_SUFFX</samp> or\n              <samp class=\"ph codeph\">myOperation</samp>.)</li>\n\n        </ol></p><p>You can set the default behavior of a substep by calling the <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=CTIOpReq-setSubStepNotFoundBehav_O&amp;v=paris\" target=\"_blank\">CTIOperationRequest -\n          setSubStepNotFoundBehaviour(Object behaviour)</a> method.</p>",
                        "name": "setOperationSubStepName(String name)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "(function( /*HTTPRequest*/ httpRequest, /*CTIOperationRequest*/ operationRequest, /*Context*/ ctx) {\n  try {\n    var jsonPayload = httpRequest.body.data;\n    if (jsonPayload) {\n      var event = jsonPayload.event;\n      if (event) {\n        var intent = event.currentIntent;\n\t var inputTranscript = event.inputTranscript;\n\t if(inputTranscript) {\n\t   operationRequest.setParameter('$utterance', inputTranscript);\n\t }\n        if (intent) {\n          operationRequest.setOperationName(intent.name);\n\t   // Add this because intent name gets changed through the pipeline\n\t   operationRequest.setParameter('$original_intent', intent.name);\n          var sessionAttributes = event.sessionAttributes;\n          if (sessionAttributes) {\n            for (var sk in sessionAttributes) {\n              switch (sk) {\n                case 'interactionId':\n                  operationRequest.setInteractionSysId(sessionAttributes[sk]);\n                  break;\n                case 'authToken':\n                  operationRequest.setAuthToken(sessionAttributes[sk]);\n                  break;\n\t\t  case 'language':\n\t\t    operationRequest.setLanguage(sessionAttributes[sk]);\n\t\t    break;\n                case 'statusCode':\n                case 'message':\n                  break;\n                default:\n                  operationRequest.setSessionAttribute(sk, sessionAttributes[sk]);\n              }\n            }\n          }\n          var slots = intent.slots;\n\t   // Always copy in slots they are the parameters for the operation\n          if (slots) {\n            for (var pk in slots) {\n              operationRequest.setParameter(pk, slots[pk]);\n            }\n          }\n          var invocationSource = event.invocationSource;\n\t   operationRequest.setParameter('$$invocationSource', invocationSource);\n          // Specific handling for dialog hooks with a way to override for Amazon specific provider\n          if (invocationSource === 'DialogCodeHook') {\n\t     // Set substep to trigger forwarding to another handler IF it s present\n\t     operationRequest.setOperationSubStepName(invocationSource);\n\t     // Allow pass through behavior\n\t     var behaviourToUse = sn_cti_core.CTIOperationRequest.OperationNotFoundBehaviours.PassThrough;\n\t     operationRequest.setSubStepNotFoundBehaviour(behaviourToUse);\n\t     // Reserved - copy slots in so we can just use delegate as default if the call isn't handled\n\t     operationRequest.setParameter('$$slots', slots);\n          }\n        }\n      }\n    }\n  } catch (e) {\n      ctx.setError(e);\n  }\n  return operationRequest;\n})(httpRequest, operationRequest, ctx);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "name",
                                "type": "String",
                                "description": "The name of the substep that the CTI provider is trying to execute."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "CTIOpReq-setParameter_S_O",
                        "short_description": "Sets the specified key-value pair on the parameter object of the current\n    CTIOperationRequest object.",
                        "description": "<p>Using the get/set parameter methods enables the passing of virtually any string or number\n        value between a message transformer and an operation handler. The parameter object can\n        contain zero or more key/value pairs of data that directly correlate to the current\n        operation request. The operation handler determines what key/value pairs are required as it\n        consumes these values. Typically the message transformer sets these parameters on the\n        CTIOperationRequest object by calling this method and the operation handler consumes them\n        using the <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=CTIOpReq-getParameter_S&amp;v=paris\" target=\"_blank\">CTIOperationRequest -\n          getParameter(String key)</a> or <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=CTIOpReq-getParameters&amp;v=paris\" target=\"_blank\">CTIOperationRequest -\n          getParameters()</a> method.</p><p><div class=\"note note\"><span class=\"notetitle\">Note:</span> You should only store objects that can survive a\n            <samp class=\"ph codeph\">JSON.parse(JSON.stringify(object))</samp> operation. Objects not meeting this\n          criteria may not propagate correctly through the entire operation processing chain.</div></p><p>For\n        example:<pre class=\"pre codeblock\">var x = {\n  \"string\": 'abc',\n  \"int\": 123,\n  \"float\": 1.234,\n  \"number\": new Number(3),\n  \"boolean\": true,\n  \"date\": new Date(2006, 0, 2, 15, 4, 5),\n  \"object\": {\n    \"string\": 'abc',\n    \"int\": 123,\n    \"float\": 1.234,\n    \"number\": new Number(3),\n    \"boolean\": true,\n    \"date\": new Date(2006, 0, 2, 15, 4, 5)\n  },\n  \"function\": function(abc) {\n\n  }\n}\nvar stringify = JSON.stringify(x);\ngs.info(stringify);\nvar hydrate = JSON.parse(stringify);\nvar stringify2 = JSON.stringify(hydrate);\ngs.info(stringify2);\n</pre></p><p>Produces:<pre class=\"pre codeblock\">{\"string\":\"abc\",\"int\":123,\"float\":1.234,\"number\":3,\"boolean\":true,\"date\":\"2006-01-02T23:04:05.000Z\",\"object\":{\"string\":\"abc\",\"int\":123,\"float\":1.234,\"number\":3,\"boolean\":true,\"date\":\"2006-01-02T23:04:05.000Z\"}}\n{\"string\":\"abc\",\"int\":123,\"float\":1.234,\"number\":3,\"boolean\":true,\"date\":\"2006-01-02T23:04:05.000Z\",\"object\":{\"string\":\"abc\",\"int\":123,\"float\":1.234,\"number\":3,\"boolean\":true,\"date\":\"2006-01-02T23:04:05.000Z\"}}\n</pre></p>",
                        "name": "setParameter(String key, Object value)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "{\t\n  try {\n    var jsonPayload = httpRequest.body.data;\n    if (jsonPayload) {\n\tvar event = jsonPayload.event;\n\tif (event) {\n\t  var details = event.Details;\n\t  if (details) {\t\t\t\t\t\n\t    operationRequest.setOperationName(details.Parameters['sn_operation']);\n\t    var contactData = details.ContactData;\n\t    if(contactData) {\n\t\t// Call id should be surfaced in openframe call log so it can be tied to transcription later\n\t\toperationRequest.setParameter('contact.call_id', contactData.ContactId);\n\t\tfor(var ck in contactData.CustomerEndpoint) {\n\t\t  operationRequest.setParameter('contact.' + ck, contactData.CustomerEndpoint[ck]);\n\t       }\n\t       operationRequest.setParameter('contact.id', contactData.ContactId);\n\t       operationRequest.setParameter('contact.phone', contactData.CustomerEndpoint.Address);\n\t    }\n\t    var parameters = details.Parameters;\n\t    if (parameters) {\n\t\tfor (var pk in parameters) {\n\t\t  switch(pk) {\n\t\t    case 'interactionId':\n\t\t\toperationRequest.setInteractionSysId(parameters[pk]);\n\t\t\tbreak;\n\t\t    case 'authToken':\n\t\t\toperationRequest.setAuthToken(parameters[pk]);\n\t\t\tbreak;\n\t\t    case 'language':\n\t\t\toperationRequest.setLanguage(parameters[pk]);\n\t\t\tbreak;\n\t\t    case 'statusCode':\n\t\t    case 'message':\n\t\t\tbreak;\n\t\t\t\t\t\t\t\t\n\t\t    default:\n\t\t\toperationRequest.setParameter(pk, parameters[pk]);\n\t\t }\t\t\t\t\t\t\n            }\n          }\t\t\t\t\t\n        }\n      }\n    }\n  } catch(e) {\n\t\tctx.setError(e);\n  }\n})(httpRequest, operationRequest, ctx);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "key",
                                "type": "String",
                                "description": "Name of the key under which to store the associated value."
                            },
                            {
                                "name": "value",
                                "type": "Object",
                                "description": "Value to store.<div class=\"p\">Valid data types:<ul class=\"ul\" id=\"CTIOpReq-setParameter_S_O__ul_mcs_2sr_zkb\">\n                    <li class=\"li\">string</li>\n\n                    <li class=\"li\">int</li>\n\n                    <li class=\"li\">float</li>\n\n                    <li class=\"li\">number</li>\n\n                    <li class=\"li\">boolean</li>\n\n                    <li class=\"li\">date</li>\n\n                    <li class=\"li\">object</li>\n\n                  </ul>\n</div>"
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "CTIOpReq-setSessionAttribute_S_O",
                        "short_description": "Sets the specified session attribute key-value pair on the current CTIOperationRequest\n    object.",
                        "description": "<p>Using the get/set session attribute methods enables the passing of virtually any string or\n        number value between a message transformer and an operation handler. The sessionAttribute\n        object can contain zero or more key/value pairs of data that are valid for the duration of a\n        computer telephony integration provider defined session. Session attributes can also be\n        accessed within a contact flow. The operation handler determines what session attribute\n        key/value pairs are needed as it consumes these values. Typically the message transformer\n        sets these attributes on the CTIOperationRequest object by calling this method and the\n        operation handler gets the attributes using the <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=CTIOpReq-getSessionAttribute_S&amp;v=paris\" target=\"_blank\">CTIOperationRequest -\n          getSessionAttribute(String key)</a> or <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=CTIOpReq-getSessionAttributes&amp;v=paris\" target=\"_blank\">CTIOperationRequest -\n          getSessionAttribute()</a> method.</p><p><div class=\"note note\"><span class=\"notetitle\">Note:</span> You should only store objects that can survive a\n            <samp class=\"ph codeph\">JSON.parse(JSON.stringify(object))</samp> operation. Objects not meeting this\n          criteria may not propagate correctly through the entire operation processing chain.</div></p><p>For\n        example:<pre class=\"pre codeblock\">var x = {\n  \"string\": 'abc',\n  \"int\": 123,\n  \"float\": 1.234,\n  \"number\": new Number(3),\n  \"boolean\": true,\n  \"date\": new Date(2006, 0, 2, 15, 4, 5),\n  \"object\": {\n    \"string\": 'abc',\n    \"int\": 123,\n    \"float\": 1.234,\n    \"number\": new Number(3),\n    \"boolean\": true,\n    \"date\": new Date(2006, 0, 2, 15, 4, 5)\n  },\n  \"function\": function(abc) {\n\n  }\n}\nvar stringify = JSON.stringify(x);\ngs.info(stringify);\nvar hydrate = JSON.parse(stringify);\nvar stringify2 = JSON.stringify(hydrate);\ngs.info(stringify2);\n</pre></p><p>Produces:<pre class=\"pre codeblock\">{\"string\":\"abc\",\"int\":123,\"float\":1.234,\"number\":3,\"boolean\":true,\"date\":\"2006-01-02T23:04:05.000Z\",\"object\":{\"string\":\"abc\",\"int\":123,\"float\":1.234,\"number\":3,\"boolean\":true,\"date\":\"2006-01-02T23:04:05.000Z\"}}\n{\"string\":\"abc\",\"int\":123,\"float\":1.234,\"number\":3,\"boolean\":true,\"date\":\"2006-01-02T23:04:05.000Z\",\"object\":{\"string\":\"abc\",\"int\":123,\"float\":1.234,\"number\":3,\"boolean\":true,\"date\":\"2006-01-02T23:04:05.000Z\"}}\n</pre></p>",
                        "name": "setSessionAttribute(String key, Object value)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var request = new sn_cti_core.CTIOperationRequest('origin');\nrequest.setSessionAttribute('contact.phone', '+15552222345');\nrequest.setSessionAttribute('contact.okToCall', true);\nrequest.setSessionAttribute('contact.address', {\n    street: '1234 Main St'\n    city: 'API City',\n    zip: 91335\n});",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "key",
                                "type": "String",
                                "description": "Name of the key under which to store the associated value."
                            },
                            {
                                "name": "value",
                                "type": "Object",
                                "description": "Value to store.<div class=\"p\">Valid data types:<ul class=\"ul\" id=\"CTIOpReq-setSessionAttribute_S_O__ul_mcs_2sr_zkb\">\n                    <li class=\"li\">string</li>\n\n                    <li class=\"li\">int</li>\n\n                    <li class=\"li\">float</li>\n\n                    <li class=\"li\">number</li>\n\n                    <li class=\"li\">boolean</li>\n\n                    <li class=\"li\">date</li>\n\n                    <li class=\"li\">object</li>\n\n                  </ul>\n</div>"
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "CTIOpReq-setSubStepNotFoundBehav_O",
                        "short_description": "Sets the behavior to perform if the current substep's operation handler is not\n    found.",
                        "description": "<p>This method should be called by the input message transformer.</p>",
                        "name": "setSubStepNotFoundBehaviour(Object behaviour)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "(function( /*HTTPRequest*/ httpRequest, /*CTIOperationRequest*/ operationRequest, /*Context*/ ctx) {\n  try {\n    var jsonPayload = httpRequest.body.data;\n    if (jsonPayload) {\n      var event = jsonPayload.event;\n      if (event) {\n        var intent = event.currentIntent;\n\t var inputTranscript = event.inputTranscript;\n\t if(inputTranscript) {\n\t   operationRequest.setParameter('$utterance', inputTranscript);\n\t }\n        if (intent) {\n          operationRequest.setOperationName(intent.name);\n\t   // Add this because intent name gets changed through the pipeline\n\t   operationRequest.setParameter('$original_intent', intent.name);\n          var sessionAttributes = event.sessionAttributes;\n          if (sessionAttributes) {\n            for (var sk in sessionAttributes) {\n              switch (sk) {\n                case 'interactionId':\n                  operationRequest.setInteractionSysId(sessionAttributes[sk]);\n                  break;\n                case 'authToken':\n                  operationRequest.setAuthToken(sessionAttributes[sk]);\n                  break;\n\t\t  case 'language':\n\t\t    operationRequest.setLanguage(sessionAttributes[sk]);\n\t\t    break;\n                case 'statusCode':\n                case 'message':\n                  break;\n                default:\n                  operationRequest.setSessionAttribute(sk, sessionAttributes[sk]);\n              }\n            }\n          }\n          var slots = intent.slots;\n\t   // Always copy in slots they are the parameters for the operation\n          if (slots) {\n            for (var pk in slots) {\n              operationRequest.setParameter(pk, slots[pk]);\n            }\n          }\n          var invocationSource = event.invocationSource;\n\t   operationRequest.setParameter('$$invocationSource', invocationSource);\n          // Specific handling for dialog hooks with a way to overide for Amazon specific provider\n          if (invocationSource === 'DialogCodeHook') {\n\t     // Set substep to trigger forwarding to another handler IF it s present\n\t     operationRequest.setOperationSubStepName(invocationSource);\n\t     // Allow pass through behavior\n\t     var behaviourToUse = sn_cti_core.CTIOperationRequest.OperationNotFoundBehaviours.PassThrough;\n\t     operationRequest.setSubStepNotFoundBehaviour(behaviourToUse);\n\t     // Reserved - copy slots in so we can just use delegate as default if the call isn't handled\n\t     operationRequest.setParameter('$$slots', slots);\n          }\n        }\n      }\n    }\n  } catch (e) {\n      ctx.setError(e);\n  }\n  return operationRequest;\n})(httpRequest, operationRequest, ctx);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "behaviour",
                                "type": "OperationNotFoundBehaviours",
                                "description": "Behavior to use if a handling behavior is not specified for the substep. This\n                must be a behavior defined on the CTIOperationRequest.OperationNotFoundBehaviours\n                  object.<div class=\"p\">Possible values:<ul class=\"ul\" id=\"CTIOpReq-setSubStepNotFoundBehav_O__ul_kbc_53f_1lb\">\n                    <li class=\"li\">ThrowError: Throw an error.</li>\n\n                    <li class=\"li\">PassThrough: Do not perform any further processing on the request, just\n                      return.</li>\n\n                    <li class=\"li\">RouteToOperation: Use the parent operation handler\n                        <span class=\"keyword parmname\">&lt;operation_name&gt;</span>.</li>\n\n                  </ul>\n</div>"
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "You use CTIOperationResponse objects to pass information between an operation handler and a\n      message transformer within the Cloud Call Center framework.<br/><br/>Typically, an operation handler is responsible for setting values on the CTIOperationResponse\n      object as it processes the associated request. A message transformer is then responsible for\n      getting the values from the CTIOperationRequest object and building the CTI-specific payload\n      that is sent back to the computer telephony integrator (CTI) provider.<br/><br/>The <span class=\"ph\">ServiceNow</span> base system provides\n        working operation handlers and message transformers that enable connection to Amazon\n        Connect. When building contact flows within Amazon Connect, there are two integration points\n        between Amazon services and a <span class=\"ph\">ServiceNow</span> instance:<ul class=\"ul\" id=\"CTIOperationResponseAPI__d81961e86\">\n          <li class=\"li\">Amazon Web Services (AWS) Lambda Proxy (Invoke AWS Lambda function)</li>\n\n          <li class=\"li\">AWS Lex Bot (Get Customer Input) </li>\n\n        </ul>\nYou can find the available operation handlers and message transformers for these\n        integration points in the Operation Handlers [sn_cti_operation_handler] and Provider Message\n        Transformer [sn_cti_provider_msg_transormer] tables.<br/><br/>The following operation handler script shows how to use various\n        <span class=\"keyword apiname\">CTIOperationResponse</span> methods to set values on the CTIOperationResponse\n      object.<br/><br/><pre><code class='language-javascript'>(function(/*CTIOperationRequest*/ request, /*CTIOperationResponse*/ response) {\n\n  try {\n    var state = request.getParameter('$state');\n    if(!state) {\n      state = 'new';\n    }\n    var phone = request.getParameter('contact.phone');\n    var username = request.getParameter('contact.username');\n    var someDataPresent = phone || username;\n    if(!someDataPresent) {\n      throw 'phone or username must be supplied';\n    }\n    if('new' === state) {\n      var userGr = null;\n      if(phone || username) {\n        userGr = new GlideRecordSecure('sys_user');\n        var qc = null;\n        if(phone) {\n          qc = userGr.addQuery('phone', phone);\n          qc.addOrCondition('mobile_phone', phone);\n          qc.addOrCondition(\"home_phone\", phone);\n        }\n        if(username) {\n          if(qc) {\n            qc.addOrCondition('user_name', username);\n          } else {\n            qc = userGr.addQuery('user_name', username);\n          }\n        }\n        // If there was criteria then run the query\n        if(qc) {\n          userGr.query();\n        } else {\n          userGr = null;\n        }\n      }\n\t\t\t\n      var foundUser = userGr &amp;&amp; userGr.next();\n\n      var phonelogGr = new GlideRecord('sn_openframe_phone_log');\n      phonelogGr.initialize();\n      phonelogGr.setValue('call_id', request.getParameter('contact.id'));\n      phonelogGr.setValue('phone_number', phone);\n      if(foundUser) {\n        phonelogGr.setValue('contact', userGr.getUniqueValue());\n      }\n      phonelogGr.insert();\n\t\t\t\n      var interactionGr = new GlideRecordSecure('interaction');\n      interactionGr.initialize();\n      interactionGr.setValue('type', 'phone');\n      interactionGrsetValue('short_description', 'User Contact via Phone: ' + phone);\n      interactionGr.setValue('channel_metadata_table', 'sn_openframe_phone_log');\n      interactionGr.setValue('channel_metadata_document',phonelogGr.getUniqueValue());\n\t\t\t\n      if(foundUser) {\n        interactionGr.setValue('opened_for', userGr.getUniqueValue());\n        response.setSessionAttribute('snc_user_first_name', userGr.getValue('first_name'));\n        response.setSessionAttribute('snc_user_last_name', userGr.getValue('last_name'));\n        response.setSessionAttribute('snc_user_sys_id', userGr.getUniqueValue());\n      } else {\n        response.setSessionAttribute('snc_user_sys_id', \"USER_NOT_FOUND\");\n      }\n      interactionGr.setValue('state', 'new');\n\n      var interactionId = interactionGr.insert();\n\n      response.setStatusCode(200);\n      response.setMessage('success');\n      response.setSessionAttribute('interactionTable', 'interaction');\n      response.setSessionAttribute('interactionId', interactionId);\n\n    }\n  } catch(e) {\n    ctx.setError(e);\n  }\n\n})(request, response);</code></pre><br/><br/>For additional information on creating operation handlers, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-servicenow-platform/page/product/cloud-call-center/task/establish-automated-bot-interactions.html\" target=\"_blank\">Configure a contact flow for an\n        automated caller interaction</a>.<br/><br/>The following message transformer script gets the values set on the CTIOperationResponse\n      object and stores them in the CTI-specific payload that is then sent back to the CTI\n      provider.<br/><br/><pre><code class='language-javascript'>(function (/*CTIOperationResponse*/operationResponse, /*HTTPResponse*/ httpResponse) {\n\t// AWS Connect Lambda expects name value pairs only\n\tvar out = {};\n\tfor(var k in operationResponse.getSessionAttributes()) {\n\t\tout[k] = operationResponse.getSessionAttributes()[k];\n\t}\n\tout.statusCode = operationResponse.getStatusCode();\n\tout.message = operationResponse.getMessage();\n\thttpResponse.setBody(out);\n})(operationResponse, httpResponse);</code></pre><br/><br/>This API runs in the <span class=\"keyword parmname\">sn_cti_core</span> namespace. Before you are able to\n      access the <span class=\"keyword apiname\">CTIOperationRequest</span> API, the Cloud Call Center Core\n      (sn_cti_core) application must be installed. For information on this installation, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-servicenow-platform/page/product/cloud-call-center/task/install-ccc-apps.html\" target=\"_blank\">Install Cloud Call Center\n        applications</a>.<br/><br/>For additional information on the Cloud Call Center, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-servicenow-platform/page/product/cloud-call-center/concept/cloud-call-center-overview.html\" target=\"_blank\">Cloud Call Center</a>.",
                "short_description": "The <span class=\"keyword apiname\">CTIOperationResponse</span> API provides methods to set and get data on\n    the current CTIOperationResponse object.",
                "identifier": "CTIOperationResponseAPI",
                "name": "CTIOperationResponse - Scoped, Global",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "CTIOpResp-CTIOperationResp_S",
                        "short_description": "Instantiates a CTIOperationResponse object.",
                        "description": "",
                        "name": "CTIOperationResponse(String origin)",
                        "type": "Constructor",
                        "examples": [
                            {
                                "script": "var response = new sn_cti_core.CTIOperationResponse();\nresponse.setMinorVersion(3);",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "CTIOpResp-getAuthToken",
                        "short_description": "Returns the authentication token that was set on the CTIOperationResponse\n    object.",
                        "description": "<p>This token is used by the Cloud Call Center framework to authenticate the current Cloud\n        Call Center user before executing the requested operation handler if the handler's\n          <span class=\"keyword parmname\">auth_required</span> flag is set to true. The\n          <span class=\"keyword parmname\">auth_required</span> flag is a field in the Operation Handler\n        [sn_cti_operation_handler] table. The life of an authentication token should be for the life\n        of the call session, but is determined by the CTI provider.</p><p>You can define whatever authentication/authorization handling required by your\n        implementation by creating your own authentication operation handler. Regardless of how the\n        authentication token is generated, the message translator must pass the token back in the\n        CTI payload. Additionally, the CTI provider must store this authentication token locally and\n        pass it in each operation request that requires authentication.</p><p>If using the instance provided authenticate operation handler, the handler initiates the\n        creation of the authentication token based on a four-digit user-entered pin. It then sets\n        the authentication token in the sessionAttributes object of the CTIOperationResponse object.\n        The associated message transformer translates the sessionAttributes object into the\n        CTI-specific payload and then sends it to the CTI provider.</p><p><div class=\"note note\"><span class=\"notetitle\">Note:</span> If the authentication token is not passed, all requests to execute operation handlers\n          with the <span class=\"keyword parmname\">auth_required</span> flag set will fail. If you do not use\n          authentication, you do not need to maintain authentication tokens.</div></p><p>The <span class=\"ph\">ServiceNow</span> base system provides\n        working operation handlers and message transformers that enable connection to Amazon\n        Connect. When building contact flows within Amazon Connect, there are two integration points\n        between Amazon services and a <span class=\"ph\">ServiceNow</span> instance:<ul class=\"ul\" id=\"CTIOpResp-getAuthToken__d81982e86\">\n          <li class=\"li\">Amazon Web Services (AWS) Lambda Proxy (Invoke AWS Lambda function)</li>\n\n          <li class=\"li\">AWS Lex Bot (Get Customer Input) </li>\n\n        </ul>\nYou can find the available operation handlers and message transformers for these\n        integration points in the Operation Handlers [sn_cti_operation_handler] and Provider Message\n        Transformer [sn_cti_provider_msg_transormer] tables.</p>",
                        "name": "getAuthToken()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var response = new sn_cti_core.CTIOperationResponse();\nvar token = response.getAuthToken();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The authentication token previously set on the CTIOperationRequest object. If\n                not set, returns null."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "CTIOpResp-getError",
                        "short_description": "Returns the error object associated with the current CTIOperationResponse\n    object.",
                        "description": "<p>You might use this information to formulate the payload returned to the computer telephony\n        integration (CTI) provider.</p>",
                        "name": "getError()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "(function( /*CTIProviderResponseExecutionContext*/ ctx, /*CTIOperationRequest*/ operationRequest, /*CTIOperationResponse*/ operationResponse, /*HTTPResponse*/ httpResponse) {\n    var sessionAttributes = {},\n        intentResponse;\n    var statusCode = -1;\n    var message = 'Unprocessed';\n    if (operationResponse) {\n        statusCode = operationResponse.getStatusCode();\n        sessionAttributes = operationResponse.getSessionAttributes();\n        message = operationResponse.getMessage();\n        var error = operationResponse.getError();\n        if (error) {\n            sessionAttributes.error = error;\n        }\n    }\n    if (sn_cti_core.CTIRequestDispatcher.Constants.HTTP.Status.AUTH_REQUIRED.code === statusCode) {\n        //first call for a secure action without authentication token\n        sessionAttributes.statusCode = 401;\n        sessionAttributes.message = message;\n        intentResponse = {\n            sessionAttributes: sessionAttributes,\n            dialogAction: {\n                type: 'Close',\n                fulfillmentState: 'Fulfilled',\n                message: {\n                    contentType: 'PlainText',\n                    content: 'This operation requires authentication. Say authenticate for authentication.'\n                }\n            }\n        };\n    } else if ('DialogCodeHook' === operationRequest.getParameter('$$invocationSource')) {\n        //pass back authToken and interactionId\n        sessionAttributes.authToken = operationRequest.getAuthToken();\n        sessionAttributes.interactionId = operationRequest.getInteractionSysId();\n\t\tvar originalSlots = operationRequest.getParameter('$$slots');\n        var responseParameters = operationResponse ? operationResponse.getParameters() : {};\n        responseParameters = responseParameters ? responseParameters : {};\n        // See if we processing happened and we got a dialogAction\n\t\tvar responseDialogAction = responseParameters['dialogAction'];\n\t\t// Default dialog action\n        var dialogAction = {\n            type: 'Delegate',\n            slots: originalSlots\n        };\n\t\t// If the response doesn't contain an override replay the inputs\n        if (responseDialogAction) {\n            // We bypassed dialoghook so delegate and pass through inputs\n            dialogAction = responseDialogAction;\n        }\n        intentResponse = {\n            sessionAttributes: sessionAttributes,\n            dialogAction: dialogAction\n        };\n    } else {\n        // Override required session attributes\n        sessionAttributes.statusCode = statusCode;\n        sessionAttributes.message = message;\n        // Build response template\n        intentResponse = {\n            sessionAttributes: sessionAttributes,\n            dialogAction: {\n                type: 'Close',\n                fulfillmentState: 'Fulfilled',\n                message: {\n                    contentType: 'PlainText',\n                    content: message\n                }\n            }\n        };\n    }\n    httpResponse.setBody(intentResponse);\n})(ctx, operationRequest, operationResponse, httpResponse);",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Object",
                            "description": "Operation error information. The format of this object is determined by the CTI\n                provider. If an error does not exist, returns null."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "CTIOpResp-getInteractionSysId",
                        "short_description": "Returns the sys_id of the interaction record associated with the call session that was\n    set on the CTIOperationResponse object.",
                        "description": "<p>The <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=CTIOpResp-setInteractionSysId_S&amp;v=paris\" target=\"_blank\">CTIOperationResponse -\n          setInteractionSysId(String Id)</a>\n         method must have been called prior to\n        calling this method.</p>",
                        "name": "getInteractionSysId()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var request = new sn_cti_core.CTIOperationResponse();\nvar interactionId = request.getInteractionSysId();\n",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The sys_id of the interaction record set on the CTIOperationResponse object.\n                Interaction records are located in the Interaction [interaction] table.<p class=\"p\">If the\n                  interaction record sys_id is not set, the method returns null.</p>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "CTIOpResp-getMajorVersion",
                        "short_description": "Returns the major version of the computer telephony integrator (CTI) software set on\n    the current CTIOperationResponse object.",
                        "description": "<p>Use this method if the CTI providers connected to your <span class=\"ph\">ServiceNow</span>\n        instance are running multiple versions of their software, as different software versions may\n        require different payloads. If the payload is only slightly different between the software\n        versions, it may make sense to have only a single message transformer. You can then handle\n        the payload differences by just checking the version of software making the request within\n        your message transformer. If the required payload is significantly different between\n        versions, it may be more effective to use multiple message transformers.</p>",
                        "name": "getMajorVersion()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var request = new sn_cti_core.CTIOperationResponse();\nvar majorVersion = response.getMajorVersion();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Number",
                            "description": "Major version number of the CTI software.<p class=\"p\">If the major version was never set,\n                  returns <samp class=\"ph systemoutput\">1</samp>. </p>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "CTIOpResp-getMessage",
                        "short_description": "Returns the message string set on the current CTIOperationResponse object.",
                        "description": "<p>Typically this is a message that is spoken back to the user once an operation is complete.\n        You can set this value using the <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=CTIOpResp-setMessage_S&amp;v=paris\" target=\"_blank\">CTIOperationResponse -\n          setMessage(String message)</a> method.</p>",
                        "name": "getMessage()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "(function (/*CTIOperationResponse*/operationResponse, /*HTTPResponse*/ httpResponse) {\n  // AWS Connect Lambda expects name value pairs only\n  var out = {};\n  for(var k in operationResponse.getSessionAttributes()) {\n    out[k] = operationResponse.getSessionAttributes()[k];\n  }\n  out.statusCode = operationResponse.getStatusCode();\n  out.message = operationResponse.getMessage();\n  httpResponse.setBody(out);\n})(operationResponse, httpResponse);",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "Message text. If no message exists, returns null."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "CTIOpResp-getMinorVersion",
                        "short_description": "Returns the minor version of the computer telephony integrator (CTI) software set on\n    the current CTIOperationResponse object.",
                        "description": "<p>Use this method if the CTI providers connected to your <span class=\"ph\">ServiceNow</span>\n        instance are running multiple versions of their software, as different software versions may\n        require different payloads. If the payload is only slightly different between the software\n        versions, it may make sense to have only a single message transformer. You can then handle\n        the payload differences by just checking the version of software making the request within\n        your message transformer. If the required payload is significantly different between\n        versions, it may be more effective to use multiple message transformers.</p>",
                        "name": "getMinorVersion()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var request = new sn_cti_core.CTIOperationResponse();\nvar minorVersion = request.getMinorVersion();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Number",
                            "description": "Minor version number of the payload associated with this interaction.<p class=\"p\">If the\n                  minor version was never set, returns <samp class=\"ph systemoutput\">0</samp>. </p>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "CTIOpResp-getParameter_S",
                        "short_description": "Returns the value of a specified key previously set on the current CTIOperationResponse\n    object.",
                        "description": "<p>Using the get/set parameter methods enables the passing of\n        virtually any string or number value between an operation handler and a message transformer.\n        The parameter object can contain zero or more key/value pairs of data that directly\n        correlate to the current operation response. The operation handler determines what key/value\n        pairs are required as it produces these values. Use the <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=CTIOpResp-setParameter_S_O&amp;v=paris\" target=\"_blank\">CTIOperationResponse -\n          setParameter(String key, Object value)</a>\n         method to set parameters on the\n        current CTIOperationResponse object.</p>",
                        "name": "getParameter(String key)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var request = new sn_cti_core.CTIOperationResponse();\nvar parm = request.getParameter('contact.phone');",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "key",
                                "type": "String",
                                "description": "The name of the key value to return."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "The value of the passed in key. If no such key exists, returns null."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "CTIOpResp-getParameters",
                        "short_description": "Returns the key-value pairs for all parameters that were previously set on the current\n    CTIOperationResponse object.",
                        "description": "<p>Using the get/set parameter methods enables the passing of\n        virtually any string or number value between an operation handler and a message transformer.\n        The parameter object can contain zero or more key/value pairs of data that directly\n        correlate to the current operation response. The operation handler determines what key/value\n        pairs are required as it produces these values. Use the <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=CTIOpResp-setParameter_S_O&amp;v=paris\" target=\"_blank\">CTIOperationResponse -\n          setParameter(String key, Object value)</a>\n         method to set parameters on the\n        current CTIOperationResponse object.</p>",
                        "name": "getParameters()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "(function( /*CTIProviderResponseExecutionContext*/ ctx, /*CTIOperationRequest*/ operationRequest, /*CTIOperationResponse*/ operationResponse, /*HTTPResponse*/ httpResponse) {\n  var sessionAttributes = {},\n      intentResponse;\n  var statusCode = -1;\n  var message = 'Unprocessed';\n  if (operationResponse) {\n    statusCode = operationResponse.getStatusCode();\n    sessionAttributes = operationResponse.getSessionAttributes();\n    message = operationResponse.getMessage();\n    var error = operationResponse.getError();\n    if (error) {\n      sessionAttributes.error = error;\n    }\n  }\n  if (sn_cti_core.CTIRequestDispatcher.Constants.HTTP.Status.AUTH_REQUIRED.code === statusCode) {\n    //first call for a secure action without authentication token\n    sessionAttributes.statusCode = 401;\n    sessionAttributes.message = message;\n    intentResponse = {\n      sessionAttributes: sessionAttributes,\n      dialogAction: {\n        type: 'Close',\n        fulfillmentState: 'Fulfilled',\n        message: {\n          contentType: 'PlainText',\n          content: 'This operation requires authentication. Say authenticate for authentication.'\n        }\n      }\n    };\n  } else if ('DialogCodeHook' === operationRequest.getParameter('$$invocationSource')) {\n      //pass back authToken and interactionId\n      sessionAttributes.authToken = operationRequest.getAuthToken();\n      sessionAttributes.interactionId = operationRequest.getInteractionSysId();\n      var originalSlots = operationRequest.getParameter('$$slots');\n      var responseParameters = operationResponse ? operationResponse.getParameters() : {};\n      responseParameters = responseParameters ? responseParameters : {};\n      // See if processing happened and we got a dialogAction\n      var responseDialogAction = responseParameters['dialogAction'];\n      // Default dialog action\n      var dialogAction = {\n        type: 'Delegate',\n        slots: originalSlots\n      };\n      // If the response doesn't contain an override replay the inputs\n      if (responseDialogAction) {\n        // We bypassed dialoghook so delegate and pass through inputs\n        dialogAction = responseDialogAction;\n      }\n        intentResponse = {\n            sessionAttributes: sessionAttributes,\n            dialogAction: dialogAction\n        };\n    } else {\n      // Override required session attributes\n      sessionAttributes.statusCode = statusCode;\n      sessionAttributes.message = message;\n      // Build response template\n      intentResponse = {\n        sessionAttributes: sessionAttributes,\n        dialogAction: {\n          type: 'Close',\n          fulfillmentState: 'Fulfilled',\n          message: {\n            contentType: 'PlainText',\n            content: message\n          }\n        }\n      };\n  }\n  httpResponse.setBody(intentResponse);\n})(ctx, operationRequest, operationResponse, httpResponse);",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Object",
                            "description": "A map of key-value pairs that were previously set on the CTIOperationResponse\n                object. This key-value pairs are free-form and defined by the needs of the operation\n                handler. The returned values are either Strings or Numbers."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "CTIOpResp-getSessionAttribute_S",
                        "short_description": "Returns the value for a specified session attribute key set on the current\n    CTIOperationResponse object.",
                        "description": "<p>Using the get/set session attribute methods enables the\n        passing of virtually any string or number value between an operation handler and a message\n        transformer. Session attributes can also be accessed within a contact flow. The\n        sessionAttribute object can contain zero or more key/value pairs of data, such as the\n        contact's phone number, that are valid for the duration of a computer telephony integration\n        provider defined session. The operation handler determines what session attribute key/value\n        pairs are needed as it utilizes these values during processing. Typically the operation\n        handler sets these attributes on the CTIOperationResponse object by calling the <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=CTIOpResp-setSessionAttribute_S_O&amp;v=paris\" target=\"_blank\">CTIOperationResponse -\n          setSessionAttribute(String key, Object value)</a>\n        method and the message transformer consumes the attributes using this method.</p>",
                        "name": "getSessionAttribute(String key)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var response = new sn_cti_core.CTIOperationResponse();\nvar phoneAttribute = response.getSessionAttribute('contact.phone');",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "key",
                                "type": "String",
                                "description": "The name of the key value to return."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "Value of the passed in key. If no such key exists, returns null."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "CTIOpResp-getSessionAttributes",
                        "short_description": "Returns the key-value pairs for all session attributes that were previously set on the\n    current CTIOperationResponse object.",
                        "description": "<p>Using the get/set session attribute methods enables the\n        passing of virtually any string or number value between an operation handler and a message\n        transformer. Session attributes can also be accessed within a contact flow. The\n        sessionAttribute object can contain zero or more key/value pairs of data, such as the\n        contact's phone number, that are valid for the duration of a computer telephony integration\n        provider defined session. The operation handler determines what session attribute key/value\n        pairs are needed as it utilizes these values during processing. Typically the operation\n        handler sets these attributes on the CTIOperationResponse object by calling the <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=CTIOpResp-setSessionAttribute_S_O&amp;v=paris\" target=\"_blank\">CTIOperationResponse -\n          setSessionAttribute(String key, Object value)</a>\n        method and the message transformer consumes the attributes using this method.</p>",
                        "name": "getSessionAttributes()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "(function (/*CTIOperationResponse*/operationResponse, /*HTTPResponse*/ httpResponse) {\n  // AWS Connect Lambda expects name value pairs only\n  var out = {};\n  for(var k in operationResponse.getSessionAttributes()) {\n    out[k] = operationResponse.getSessionAttributes()[k];\n  }\n  out.statusCode = operationResponse.getStatusCode();\n  out.message = operationResponse.getMessage();\n  httpResponse.setBody(out);\n})(operationResponse, httpResponse);",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Object",
                            "description": "A map of key-value pairs that were previously set on the CTIOperationResponse\n                object. This key-value pairs are free-form and defined by the needs of the operation\n                handler. The returned values are either Strings or Numbers."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "CTIOPResp-getStatusCode",
                        "short_description": "Returns the status code set on the current CTIOperationResponse object.",
                        "description": "<p>These status codes should correspond with standard HTTP status codes, such as 200 for\n        success, 401 for authorization required. Typically, the resultant status codes are\n        determined by the operation handler and are set on the CTIOperationResponse object using the\n          <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=CTIOpResp-setStatusCode_N&amp;v=paris\" target=\"_blank\">CTIOperationResponse -\n          setStatusCode(String statusCode)</a> method. The message transformer then uses this method to\n        include the status code in the payload returned to the computer telephony integrator\n        provider.</p>",
                        "name": "getStatusCode()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "(function (/*CTIOperationResponse*/operationResponse, /*HTTPResponse*/ httpResponse) {\n  // AWS Connect Lambda expects name value pairs only\n  var out = {};\n  for(var k in operationResponse.getSessionAttributes()) {\n    out[k] = operationResponse.getSessionAttributes()[k];\n  }\n  out.statusCode = operationResponse.getStatusCode();\n  out.message = operationResponse.getMessage();\n  httpResponse.setBody(out);\n})(operationResponse, httpResponse);",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Number",
                            "description": "Status code of the current operation. If a status code has not been set,\n                returns -1."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "CTIOpResp-setAuthToken_S",
                        "short_description": "Sets an authentication token on the current CTIOperationResponse object.",
                        "description": "<p>This token is used by the Cloud Call Center framework to authenticate the current Cloud\n        Call Center user before executing the requested operation handler if the handler's\n          <span class=\"keyword parmname\">auth_required</span> flag is set to true. The\n          <span class=\"keyword parmname\">auth_required</span> flag is a field in the Operation Handler\n        [sn_cti_operation_handler] table. The life of an authentication token should be for the life\n        of the call session, but is determined by the CTI provider.</p><p>You can define whatever authentication/authorization handling required by your\n        implementation by creating your own authentication operation handler. Regardless of how the\n        authentication token is generated, the message translator must pass the token back in the\n        CTI payload. Additionally, the CTI provider must store this authentication token locally and\n        pass it in each operation request that requires authentication.</p><p>If using the instance provided authenticate operation handler, the handler initiates the\n        creation of the authentication token based on a four-digit user-entered pin. It then sets\n        the authentication token in the sessionAttributes object of the CTIOperationResponse object.\n        The associated message transformer translates the sessionAttributes object into the\n        CTI-specific payload and then sends it to the CTI provider.</p><p><div class=\"note note\"><span class=\"notetitle\">Note:</span> If the authentication token is not passed, all requests to execute operation handlers\n          with the <span class=\"keyword parmname\">auth_required</span> flag set will fail. If you do not use\n          authentication, you do not need to maintain authentication tokens.</div></p><p>The <span class=\"ph\">ServiceNow</span> base system provides\n        working operation handlers and message transformers that enable connection to Amazon\n        Connect. When building contact flows within Amazon Connect, there are two integration points\n        between Amazon services and a <span class=\"ph\">ServiceNow</span> instance:<ul class=\"ul\" id=\"CTIOpResp-setAuthToken_S__d81982e86\">\n          <li class=\"li\">Amazon Web Services (AWS) Lambda Proxy (Invoke AWS Lambda function)</li>\n\n          <li class=\"li\">AWS Lex Bot (Get Customer Input) </li>\n\n        </ul>\nYou can find the available operation handlers and message transformers for these\n        integration points in the Operation Handlers [sn_cti_operation_handler] and Provider Message\n        Transformer [sn_cti_provider_msg_transormer] tables.</p>",
                        "name": "setAuthToken(String token)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var response = new sn_cti_core.CTIOperationResponse();\nvar authenticate = &lt;Your authentication code here&gt;; // Authenticate the user\nif (authenticated) {\n\tvar claims = {\n\t\t\"interactionId\":interactionGr.sys_id.toString()\n\t};\n\tvar jwt = new sn_cti_core.AuthHelpers().generateJWT(claims);\n\tresponse.setAuthToken(jwt);\n}",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The authentication token to use to authenticate operations that have the\n                  <span class=\"keyword parmname\">auth_required</span> flag set."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "CTIOpResp-setError_O",
                        "short_description": "Sets the error object in the current CTIOperationResponse object.",
                        "description": "<p>You can use the error object in the component to formulate the payload to send to the\n        computer telephony integrator (CTI) provider.</p>",
                        "name": "setError(Object error)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var response = new sn_cti_core.CTIOperationResponse();\nresponse.setError(new Error(âYou did not supply a fieldâ));",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "error",
                                "type": "Object",
                                "description": "Information about the error that was detected while processing the requested\n                operation. The format of this object is determined by the CTI provider."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "CTIOpResp-setInteractionSysId_S",
                        "short_description": "Sets the sys_id of the interaction record associated with the operation request on the\n    current CTIOperationResponse object.",
                        "description": "",
                        "name": "setInteractionSysId(String Id)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var response = new sn_cti_core.CTIOperationResponse();\nresponse.setInteractionSysId('98529cc55380001048e5ddeeff7b120b');\n",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "sys_id",
                                "type": "String",
                                "description": "The sys_id to set for the current interaction."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "CTIOpResp-setMajorVersion_N",
                        "short_description": "Sets the major version of the computer telephony integrator (CTI) provider software\n    making the request on the associated CTIOperationResponse object.",
                        "description": "<p>Use this method if the CTI providers connected to your <span class=\"ph\">ServiceNow</span>\n        instance are running multiple versions of their software, as different software versions may\n        require different payloads. If the payload is only slightly different between the software\n        versions, it may make sense to have only a single message transformer. You can then handle\n        the payload differences by just checking the version of software making the request within\n        your message transformer. If the required payload is significantly different between\n        versions, it may be more effective to use multiple message transformers.</p>",
                        "name": "setMajorVersion(Number majorVersion)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var request = new sn_cti_core.CTIOperationResponse();\nrequest.setMajorVersion(2);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "majorVersion",
                                "type": "Number",
                                "description": "Major version of the CTI provider software making the operation request.<p class=\"p\">If\n                  this value was not previously set, returns\n                <samp class=\"ph systemoutput\">1</samp>.</p>"
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "CTIOpResp-setMessage_S",
                        "short_description": "Sets a text message on the current CTIOperationResponse object.",
                        "description": "<p>Typically this is a message that is spoken back to the user once an operation is complete\n        and is set by the associated operation handler. The message transformer then uses the <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=CTIOpResp-getMessage&amp;v=paris\" target=\"_blank\">CTIOperationResponse -\n          getMessage()</a> method to obtain the message\n        and pass it back to the computer telephony integration provider.</p>",
                        "name": "setMessage(String message)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "(function(/*CTIOperationRequest*/ request, /*CTIOperationResponse*/ response, /*Context*/ ctx) {\t\n  var notes = '', lang = request.getLanguage();\n  try { \n\t\t\n    var interactionGr = request.getInteractionRecord();\n\n    var now_GR = new GlideRecord('sys_user');\n    if(interactionGr &amp;&amp; now_GR.get(interactionGr.opened_for.toString())) {\t\n      if(now_GR.locked_out == true) {\n        notes += gs.getMessageLang(\"User record found locked. Unlocking the account.\\n\", lang);\n        now_GR.locked_out=false;\n        now_GR.update();\n        response.setStatusCode(200);\n        response.setMessage(gs.getMessageLang(\"Your account has been unlocked.\", lang));\n      } else {\n        notes += gs.getMessageLang(\"User record not locked.\\n\", lang);\n        response.setStatusCode(200);\n        response.setMessage(gs.getMessageLang(\"Your account doesn't seem to be locked.\", lang));\n      }\t\n    } else {\n      notes += gs.getMessageLang(\"User record not found. Transfer to agent\\n\", lang);\n      response.setStatusCode(302);\n      response.setMessage(gs.getMessageLang(\"I am unable to find your record. Let me transfer to someone who can help.\", lang));\n    }\n    if(interactionGr) {\n      interactionGr.work_notes = notes;\n      interactionGr.update();\n    }\n  } catch(e) {\n    ctx.setError(e);\n  }\n})(request, response, ctx);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "message",
                                "type": "String",
                                "description": "Message text"
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "CTIOpResp-setMinorVersion_N",
                        "short_description": "Sets the minor version of the computer telephony integrator (CTI) provider software\n    making the request on the associated CTIOperationResponse object.",
                        "description": "<p>Use this method if the CTI providers connected to your <span class=\"ph\">ServiceNow</span>\n        instance are running multiple versions of their software, as different software versions may\n        require different payloads. If the payload is only slightly different between the software\n        versions, it may make sense to have only a single message transformer. You can then handle\n        the payload differences by just checking the version of software making the request within\n        your message transformer. If the required payload is significantly different between\n        versions, it may be more effective to use multiple message transformers.</p>",
                        "name": "setMinorVersion(Number minorVersion)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var response = new sn_cti_core.CTIOperationResponse();\nresponse.setMinorVersion(3);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "minorVersion",
                                "type": "Number",
                                "description": "Minor version of the CTI provider software making the operation request.<p class=\"p\">If\n                  this value was not previously set, returns\n                <samp class=\"ph systemoutput\">0</samp>.</p>"
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "CTIOpResp-setParameter_S_O",
                        "short_description": "Sets the specified key-value pair on the associated CTIOperationResponse\n    object.",
                        "description": "<p>Using the get/set parameter methods enables the passing of virtually any string or number\n        value between an operation handler and a message transformer. The parameter object can\n        contain zero or more key/value pairs of data that directly correlate to the current\n        operation request. The operation handler determines what key/value pairs are required as it\n        consumes these values. Typically the operation handler sets these parameters on the\n        CTIOperationResponse object by calling this method and the message transformer consumes them\n        using the <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=CTIOpResp-getParameter_S&amp;v=paris\" target=\"_blank\">CTIOperationResponse -\n          getParmeter(String key)</a> or <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=CTIOpResp-getParameters&amp;v=paris\" target=\"_blank\">CTIOperationResponse -\n          getSParameters()</a> method.</p><p><div class=\"note note\"><span class=\"notetitle\">Note:</span> You should only store objects that can survive a\n            <samp class=\"ph codeph\">JSON.parse(JSON.stringify(object))</samp> operation. Objects not meeting this\n          criteria may not propagate correctly through the entire operation processing chain.</div></p><p>For\n        example:<pre class=\"pre codeblock\">var x = {\n  \"string\": 'abc',\n  \"int\": 123,\n  \"float\": 1.234,\n  \"number\": new Number(3),\n  \"boolean\": true,\n  \"date\": new Date(2006, 0, 2, 15, 4, 5),\n  \"object\": {\n    \"string\": 'abc',\n    \"int\": 123,\n    \"float\": 1.234,\n    \"number\": new Number(3),\n    \"boolean\": true,\n    \"date\": new Date(2006, 0, 2, 15, 4, 5)\n  },\n  \"function\": function(abc) {\n\n  }\n}\nvar stringify = JSON.stringify(x);\ngs.info(stringify);\nvar hydrate = JSON.parse(stringify);\nvar stringify2 = JSON.stringify(hydrate);\ngs.info(stringify2);\n</pre></p><p>Produces:<pre class=\"pre codeblock\">{\"string\":\"abc\",\"int\":123,\"float\":1.234,\"number\":3,\"boolean\":true,\"date\":\"2006-01-02T23:04:05.000Z\",\"object\":{\"string\":\"abc\",\"int\":123,\"float\":1.234,\"number\":3,\"boolean\":true,\"date\":\"2006-01-02T23:04:05.000Z\"}}\n{\"string\":\"abc\",\"int\":123,\"float\":1.234,\"number\":3,\"boolean\":true,\"date\":\"2006-01-02T23:04:05.000Z\",\"object\":{\"string\":\"abc\",\"int\":123,\"float\":1.234,\"number\":3,\"boolean\":true,\"date\":\"2006-01-02T23:04:05.000Z\"}}\n</pre></p>",
                        "name": "setParameter(String key, Object value)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var response = new sn_cti_core.CTIOperationResponse();\nresponse.setParameter('contact.phone', '+15552222345');\nresponse.setParameter('contact.okToCall', true);\nresponse.setParameter('contact.address', {\n    street: '1234 Main St'\n    city: 'API City',\n    zip: 91335\n});",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "key",
                                "type": "String",
                                "description": "Name of the key under which to store the associated value."
                            },
                            {
                                "name": "value",
                                "type": "Object",
                                "description": "Value to store for the key.<div class=\"p\">Valid data types:<ul class=\"ul\" id=\"CTIOpResp-setParameter_S_O__ul_mcs_2sr_zkb\">\n                    <li class=\"li\">string</li>\n\n                    <li class=\"li\">int</li>\n\n                    <li class=\"li\">float</li>\n\n                    <li class=\"li\">number</li>\n\n                    <li class=\"li\">boolean</li>\n\n                    <li class=\"li\">date</li>\n\n                    <li class=\"li\">object</li>\n\n                  </ul>\n</div>"
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "CTIOpResp-setSessionAttribute_S_O",
                        "short_description": "Sets the specified session attribute key-value pair on the associated\n    CTIOperationResponse object.",
                        "description": "<p>Using the get/set session attribute methods enables the passing of virtually any string or\n        number value between an operation handler and a message transformer. The sessionAttribute\n        object can contain zero or more key/value pairs of data that are valid for the duration of a\n        computer telephony integration provider defined session. Session attributes can also be\n        accessed within a contact flow. The operation handler determines what session attribute\n        key/value pairs are needed as it consumes these values. Typically the operation handler sets\n        these attributes on the CTIOperationResponse object by calling this method and the message\n        transformer gets the attributes using the <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=CTIOpResp-getSessionAttribute_S&amp;v=paris\" target=\"_blank\">CTIOperationResponse -\n          getSessionAttribute(String key)</a> or <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=CTIOpResp-getSessionAttributes&amp;v=paris\" target=\"_blank\">CTIOperationResponse -\n          getSessionAttribute()</a> method.</p><p><div class=\"note note\"><span class=\"notetitle\">Note:</span> You should only store objects that can survive a\n            <samp class=\"ph codeph\">JSON.parse(JSON.stringify(object))</samp> operation. Objects not meeting this\n          criteria may not propagate correctly through the entire operation processing chain.</div></p><p>For\n        example:<pre class=\"pre codeblock\">var x = {\n  \"string\": 'abc',\n  \"int\": 123,\n  \"float\": 1.234,\n  \"number\": new Number(3),\n  \"boolean\": true,\n  \"date\": new Date(2006, 0, 2, 15, 4, 5),\n  \"object\": {\n    \"string\": 'abc',\n    \"int\": 123,\n    \"float\": 1.234,\n    \"number\": new Number(3),\n    \"boolean\": true,\n    \"date\": new Date(2006, 0, 2, 15, 4, 5)\n  },\n  \"function\": function(abc) {\n\n  }\n}\nvar stringify = JSON.stringify(x);\ngs.info(stringify);\nvar hydrate = JSON.parse(stringify);\nvar stringify2 = JSON.stringify(hydrate);\ngs.info(stringify2);\n</pre></p><p>Produces:<pre class=\"pre codeblock\">{\"string\":\"abc\",\"int\":123,\"float\":1.234,\"number\":3,\"boolean\":true,\"date\":\"2006-01-02T23:04:05.000Z\",\"object\":{\"string\":\"abc\",\"int\":123,\"float\":1.234,\"number\":3,\"boolean\":true,\"date\":\"2006-01-02T23:04:05.000Z\"}}\n{\"string\":\"abc\",\"int\":123,\"float\":1.234,\"number\":3,\"boolean\":true,\"date\":\"2006-01-02T23:04:05.000Z\",\"object\":{\"string\":\"abc\",\"int\":123,\"float\":1.234,\"number\":3,\"boolean\":true,\"date\":\"2006-01-02T23:04:05.000Z\"}}\n</pre></p>",
                        "name": "setSessionAttribute(String key, Object value)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var response = new sn_cti_core.CTIOperationResponse();\nresponse.setSessionAttribute('contact.phone', '+15552222345');\nresponse.setSessionAttribute('contact.okToCall', true);\nresponse.setSessionAttribute('contact.address', {\n    street: '1234 Main St'\n    city: 'API City',\n    zip: 91335\n});",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "key",
                                "type": "String",
                                "description": "Name of the session attribute key under which to set the associated\n                value."
                            },
                            {
                                "name": "value",
                                "type": "Object",
                                "description": "Value to set.<div class=\"p\">Valid data types:<ul class=\"ul\" id=\"CTIOpResp-setSessionAttribute_S_O__ul_mcs_2sr_zkb\">\n                    <li class=\"li\">string</li>\n\n                    <li class=\"li\">int</li>\n\n                    <li class=\"li\">float</li>\n\n                    <li class=\"li\">number</li>\n\n                    <li class=\"li\">boolean</li>\n\n                    <li class=\"li\">date</li>\n\n                    <li class=\"li\">object</li>\n\n                  </ul>\n</div>"
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "CTIOpResp-setStatusCode_N",
                        "short_description": "Sets the status code of the current operation request on the CTIOperationResponse\n    object.",
                        "description": "<p>You can use any integer values to define the status, but it is recommended that you emulate\n        the HTTP status codes, such as 200 = Ok/Success, 400 = Bad Request, 401 = Unauthorized.</p>",
                        "name": "setStatusCode(Number statusCode)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "(function(/*CTIOperationRequest*/ request, /*CTIOperationResponse*/ response, /*Context*/ ctx) {\t\n  var notes = '', lang = request.getLanguage();\n  try { \n\t\t\n    var interactionGr = request.getInteractionRecord();\n\n    var now_GR = new GlideRecord('sys_user');\n    if(interactionGr &amp;&amp; now_GR.get(interactionGr.opened_for.toString())) {\t\n      if(now_GR.locked_out == true) {\n        notes += gs.getMessageLang(\"User record found locked. Unlocking the account.\\n\", lang);\n        now_GR.locked_out=false;\n        now_GR.update();\n        response.setStatusCode(200);\n        response.setMessage(gs.getMessageLang(\"Your account has been unlocked.\", lang));\n      } else {\n        notes += gs.getMessageLang(\"User record not locked.\\n\", lang);\n        response.setStatusCode(200);\n        response.setMessage(gs.getMessageLang(\"Your account doesn't seem to be locked.\", lang));\n      }\t\n    } else {\n      notes += gs.getMessageLang(\"User record not found. Transfer to agent\\n\", lang);\n      response.setStatusCode(302);\n      response.setMessage(gs.getMessageLang(\"I am unable to find your record. Let me transfer to someone who can help.\", lang));\n    }\n    if(interactionGr) {\n      interactionGr.work_notes = notes;\n      interactionGr.update();\n    }\n  } catch(e) {\n    ctx.setError(e);\n  }\n})(request, response, ctx);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "statusCode",
                                "type": "Number",
                                "description": "Integer that uniquely identifies the status of the requested operation."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    }
                ]
            }
        ]
    },
    {
        "identifier": "sn_currency-namespace",
        "namespace": "sn_currency",
        "classes": [
            {
                "description": "You can acquire information for a specific FX Currency field by calling the <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=S-GCConfig-GlideCurrencyConfig_O&amp;v=paris\" target=\"_blank\">GlideCurrencyConfig(Object\n        ed)</a> constructor, which associates a specific FX Currency field to the\n      instantiated object. When calling the various <span class=\"keyword apiname\">GlideCurrencyConfig()</span>\n      methods, if a record exists in the FX Currency Configuration [fx_configuration] table for the\n      FX Currency field, the requested value is passed back. If a record or field is not available,\n      the default value is passed back. You can also acquire the default FX Currency configuration\n      values by calling the <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=S-GCConfig-GlideCurrencyConfig&amp;v=paris\" target=\"_blank\">GlideCurrencyConfig()</a> constructor.<br/><br/>For additional information on FX Currency configuration, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/currency/concept/fx-currency.html\" target=\"_blank\">Setting up and operating FX Currency\n        fields</a>.<br/><br/>This class runs is in the <span class=\"keyword parmname\">sn_currency</span> namespace.",
                "short_description": "The <span class=\"keyword apiname\">GlideCurrencyConfig</span> API provides methods to retrieve various\n    configuration information for FX Currency fields.",
                "identifier": "GlideCurrencyConfigScopedAPI",
                "name": "GlideCurrencyConfig",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "S-GCConfig-GlideCurrencyConfig",
                        "short_description": "Instantiates a GlideCurrencyConfig object that enables the retrieval of global default\n    FX Currency configuration information.",
                        "description": "<p>When calling the available methods on this type of GlideCurrencyConfig object, the return\n        values are the FX Currency global defaults from system properties. If a global default is\n        not defined in system properties, a hard-coded default is returned (this can also be an\n        empty value if not configured). This object does not provide configuration information for a\n        specific FX Currency field. To retrieve specific FX Currency field information, use the\n          <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=S-GCConfig-GlideCurrencyConfig_O&amp;v=paris\" target=\"_blank\">GlideCurrencyConfig(Object\n          ed)</a> constructor.</p><p>For more information on FX Currency fields, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/currency/concept/fx-currency.html\" target=\"_blank\">Setting up and operating FX Currency\n          fields</a>.</p>",
                        "name": "GlideCurrencyConfig()",
                        "type": "Constructor",
                        "examples": [
                            {
                                "script": "var cur_config = new sn_currency.GlideCurrencyConfig();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "S-GCConfig-GlideCurrencyConfig_O",
                        "short_description": "Instantiates a GlideCurrencyConfig object that enables the retrieval of the\n    configuration information for a specific FX Currency field.",
                        "description": "<p>When calling the available methods on this type of GlideCurrencyConfig object, the return\n        values are from the FX Currency Configuration [fx_configuration] record associated with the\n        FX Currency field, if a record exists. If a record does not exist, default values are\n        returned.</p><p>For more information on FX Currency fields, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/currency/concept/fx-currency.html\" target=\"_blank\">Setting up and operating FX Currency\n          fields</a>.</p>",
                        "name": "GlideCurrencyConfig(Object ed)",
                        "type": "Constructor",
                        "examples": [
                            {
                                "script": "var grCurr = new GlideRecord('my_FXCurrency_table');\nvar curr_field = grCurr.getElement('currency');\nvar ed = curr_field.getED();\nvar cur_config = new sn_currency.GlideCurrencyConfig(ed);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "ed",
                                "type": "GlideElementDescriptor",
                                "description": "GlideElementDescriptor object of the FX Currency field to associate with the\n                GlideCurrencyConfig object."
                            }
                        ],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "S-GCConfig-getAggregationSource",
                        "short_description": "Returns the aggregation source value for an FX Currency field.",
                        "description": "<p>If called on an existing FX Currency field that has a corresponding FX Currency\n        Configuration [fx_configuration] record, returns the value of the Aggregation Source\n        (aggregation_source) field. Otherwise, if a new record, returns a default value.</p><p>For more information on aggregation source, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/currency/concept/configure-fx-currency-field-behavior.html#fx-currency-display-parameters\" target=\"_blank\">Specify the table field and its currency display\n          parameters</a>.</p>",
                        "name": "getAggregationSource()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var cur_config = new sn_currency.GlideCurrencyConfig();\nvar curr_agg_source = cur_config.getAggregationSource();",
                                "description": "This code example returns the default aggregation source."
                            },
                            {
                                "script": "var grCurr = new GlideRecord('my_FXCurrency_table');\nvar curr_field = grCurr.getElement('currency');\nvar ed = curr_field.getED();\nvar cur_config = new sn_currency.GlideCurrencyConfig(ed);\nvar curr_agg_source = cur_config.getAggregationSource();",
                                "description": "This code example returns the aggregation source for a specific FX Currency field."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "Source of values for aggregations. The returned value depends on the\n                constructor used to instantiate the object.<ul class=\"ul\" id=\"S-GCConfig-getAggregationSource__ul_bkg_fct_tjb\">\n                  <li class=\"li\"><span class=\"keyword apiname\">GlideCurrencyConfig(Object ed)</span>: If an fx_configuration\n                    record exists, returns the aggregation_source field from the fx_configuration\n                    record that is associated with the FX Currency field specified by the\n                    GlideElementDescriptor passed in the constructor. If no fx_configuration record,\n                    follows the <span class=\"keyword apiname\">GlideCurrencyConfig()</span> rules.</li>\n\n                  <li class=\"li\"><span class=\"keyword apiname\">GlideCurrencyConfig()</span>: If set, returns the value in the\n                    glide.currency2.aggregation_source field in system properties. Otherwise,\n                    returns a hard-coded default of <samp class=\"ph codeph\">reference</samp>.</li>\n\n                </ul>\n<div class=\"p\">Possible values:<ul class=\"ul\" id=\"S-GCConfig-getAggregationSource__ul_thb_kcs_tjb\">\n                    <li class=\"li\">default</li>\n\n                    <li class=\"li\">as_entered</li>\n\n                    <li class=\"li\">reference</li>\n\n                  </ul>\n</div>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "S-GCConfig-getConversionDateSource",
                        "short_description": "Returns the field used as the source of the date and time for the currency conversion.",
                        "description": "<p>If called on an existing FX Currency field that has a corresponding FX Currency\n        Configuration [fx_configuration] record, returns the value of the Conversion Date Source\n        (conversion_date_source) field. Otherwise, if a new record, returns \"null\".</p><p>For more information on the Conversion Date Source field, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/currency/concept/configure-fx-currency-field-behavior.html#fx-currency-conv-rate-table-date-source\" target=\"_blank\">Identify the rate table and date\n          source for currency conversions</a>.</p>",
                        "name": "getConversionDateSource()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var grCurr = new GlideRecord('my_FXCurrency_table');\nvar curr_field = grCurr.getElement('currency');\nvar ed = curr_field.getED();\nvar cur_config = new sn_currency.GlideCurrencyConfig(ed);\nvar curr_conv_date_src = cur_config.getConversionDateSource();",
                                "description": "This code example returns the conversion date source for a specific FX Currency field."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "Field in the record used as the conversion date source. The returned value\n                depends on the constructor used to instantiate the object.<ul class=\"ul\" id=\"S-GCConfig-getConversionDateSource__ul_wln_cqt_tjb\">\n                  <li class=\"li\"><span class=\"keyword apiname\">GlideCurrencyConfig(Object ed)</span>: If an fx_configuration\n                    record exists, returns the conversion_date_source field from the\n                    fx_configuration record that is associated with the FX Currency field specified\n                    by the GlideElementDescriptor passed in the constructor. If no fx_configuration\n                    record, follows the <span class=\"keyword apiname\">GlideCurrencyConfig()</span> rules.</li>\n\n                  <li class=\"li\"><span class=\"keyword apiname\">GlideCurrencyConfig()</span>: Returns <samp class=\"ph codeph\">null</samp>.</li>\n\n                </ul>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "S-GCConfig-getDisplayDigits",
                        "short_description": "Returns the number of digits to display for an FX Currency field.",
                        "description": "<p>If called on an existing FX Currency field that has a corresponding FX Currency\n        Configuration [fx_configuration] record, returns the value of the Display Digits\n        (display_digits) field. Otherwise, if a new record, returns a default value.</p>",
                        "name": "getDisplayDigits()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var cur_config = new sn_currency.GlideCurrencyConfig();\nvar curr_display_digits = cur_config.getDisplayDigits();",
                                "description": "This code example returns the default number of display digits."
                            },
                            {
                                "script": "var grCurr = new GlideRecord('my_FXCurrency_table');\nvar curr_field = grCurr.getElement('currency');\nvar ed = curr_field.getED();\nvar cur_config = new sn_currency.GlideCurrencyConfig(ed);\nvar curr_display_digits = cur_config.getDisplayDigits();",
                                "description": "This code example returns the display digits for a specific FX Currency field."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Number",
                            "description": "Number of digits to display for the FX Currency field. The returned value\n                depends on the constructor used to instantiate the object.<ul class=\"ul\" id=\"S-GCConfig-getDisplayDigits__ul_wln_cqt_tjb\">\n                  <li class=\"li\"><span class=\"keyword apiname\">GlideCurrencyConfig(Object ed)</span>: If an fx_configuration\n                    record exists, returns the value of the display_digits field in the FX Currency\n                    Configuration [fx_configuration] record that is associated with the FX Currency\n                    field specified by the GlideElementDescriptor passed in the constructor. If no\n                    fx_configuration record, follows the <span class=\"keyword apiname\">GlideCurrencyConfig()</span>\n                    rules.</li>\n\n                  <li class=\"li\"><span class=\"keyword apiname\">GlideCurrencyConfig()</span>: If set, returns the value of the\n                    glide.currency2.display_digits property in system properties. Otherwise, returns\n                      <samp class=\"ph codeph\">-1</samp>.</li>\n\n                </ul>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "S-GCConfig-getDisplayValue",
                        "short_description": "Returns the currency code used to convert the FX Currency value when it appears in\n    lists and reports.",
                        "description": "<p>If called on an existing FX Currency field that has a corresponding FX Currency\n        Configuration [fx_configuration] record, returns the value of the Display Value Currency\n        (display_value) field. Otherwise, if a new record, returns a default value.</p>",
                        "name": "getDisplayValue()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var cur_config = new sn_currency.GlideCurrencyConfig();\nvar curr_display_value = cur_config.getDisplayValue();",
                                "description": "This code example returns the default currency code."
                            },
                            {
                                "script": "var grCurr = new GlideRecord('my_FXCurrency_table');\nvar curr_field = grCurr.getElement('currency');\nvar ed = curr_field.getED();\nvar cur_config = new sn_currency.GlideCurrencyConfig(ed);\nvar curr_display_value = cur_config.getDisplayValue();",
                                "description": "This code example returns the display currency code for a specific FX Currency field."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "Currency code to use to display the FX Currency field. The returned value\n                depends on the constructor used to instantiate the object.<div class=\"p\">\n                  <ul class=\"ul\" id=\"S-GCConfig-getDisplayValue__ul_ids_p5t_tjb\">\n                    <li class=\"li\"><span class=\"keyword apiname\">GlideCurrencyConfig(Object ed)</span>: If an fx_configuration\n                      record exists, returns the display_value field, which contains the currency\n                      code, from the fx_configuration record that is associated with the FX Currency\n                      field specified by the GlideElementDescriptor passed in the constructor. If no\n                      fx_configuration record, follows the <span class=\"keyword apiname\">GlideCurrencyConfig()</span>\n                      rules.</li>\n\n                    <li class=\"li\"><span class=\"keyword apiname\">GlideCurrencyConfig()</span>: If set, returns the value of the\n                      glide.currency2.display_value property in system properties. Otherwise,\n                      returns <samp class=\"ph codeph\">as_entered</samp>.</li>\n\n                  </ul>\n\n                </div>\n<div class=\"p\">Possible values:<ul class=\"ul\" id=\"S-GCConfig-getDisplayValue__ul_i2b_ctk_qjb\">\n                    <li class=\"li\">default: Global default. This is the value in the\n                      glide.currency2.display_digits property.</li>\n\n                    <li class=\"li\">as_entered: Currency value as entered by the user.</li>\n\n                    <li class=\"li\">in_session_currency: Currency value converted to the session currency.\n                      Session currency is based on the user's locale.</li>\n\n                    <li class=\"li\">in_reference_currency: Reference value if computed and stored. Otherwise,\n                      the currency value converted to the reference currency.</li>\n\n                  </ul>\n</div>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "S-GCConfig-getRateFilterRateTableField",
                        "short_description": "Returns the rate table field used as a rate table filter for an FX Currency\n    field.",
                        "description": "<p>If called on an existing FX Currency field that has a corresponding FX Currency\n        Configuration [fx_configuration] record, returns the value of the Rate Table Field\n        (rate_filter_rate_table_field). Otherwise, if a new record, returns a default value.</p><p>For more information on rate table filters, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/currency/concept/configure-fx-currency-field-behavior.html#fx-currency-rate-target-table-fields\" target=\"_blank\">Select the rate and target table\n          fields used for filtering</a>.</p>",
                        "name": "getRateFilterRateTableField()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var grCurr = new GlideRecord('my_FXurrency_table');\nvar curr_field = grCurr.getElement('currency');\nvar ed = curr_field.getED();\nvar cur_config = new sn_currency.GlideCurrencyConfig(ed);\nvar curr_reference_currency = cur_config.getRateFilterRateTableField();",
                                "description": "This code example returns the rate table field used to filter rate table records for a\n        specific FX Currency field."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "Field in the rate table used to filter the rate table records. The returned\n                value depends on the constructor used to instantiate the object.<ul class=\"ul\" id=\"S-GCConfig-getRateFilterRateTableField__ul_fdy_wg5_tjb\">\n                  <li class=\"li\"><span class=\"keyword apiname\">GlideCurrencyConfig(Object ed)</span>: If an fx_configuration\n                    record exists, returns the rate_filter_rate_table_field from the\n                    fx_configuration record that is associated with the FX Currency field specified\n                    by the GlideElementDescriptor passed in the constructor. If no fx_configuration\n                    record, follows the <span class=\"keyword apiname\">GlideCurrencyConfig()</span> rules.</li>\n\n                  <li class=\"li\"><span class=\"keyword apiname\">GlideCurrencyConfig()</span>: Returns <samp class=\"ph codeph\">null</samp>.</li>\n\n                </ul>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "S-GCConfig-getRateFilterTargetTableField",
                        "short_description": "Returns the target table field used to filter the rate table records for an FX Currency\n    field.",
                        "description": "<p>If called on an existing FX Currency field that has a corresponding FX Currency\n        Configuration [fx_configuration] record, returns the value of the Target Table Field\n        (rate_filter_target_table_field). Otherwise, if a new record, returns a default value.</p><p>For more information on rate table filters, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/currency/concept/configure-fx-currency-field-behavior.html#fx-currency-rate-target-table-fields\" target=\"_blank\">Select the rate and target table\n          fields used for filtering</a>.</p>",
                        "name": "getRateFilterTargetTableField()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var cur_config = new sn_currency.GlideCurrencyConfig();\nvar curr_rate_filter = cur_config.getRateFilterTargetTableField();",
                                "description": "This code example returns the default rate filter, target table field."
                            },
                            {
                                "script": "var grCurr = new GlideRecord('my_FXCurrency_table');\nvar curr_field = grCurr.getElement('currency');\nvar ed = curr_field.getED();\nvar cur_config = new sn_currency.GlideCurrencyConfig(ed);\nvar curr_rate_filter = cur_config.getRateFilterTargetTableField();",
                                "description": "This code example returns the rate filter, target table field for a specific FX Currency\n        field."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "Field in the target table used/to use to filter the rate table. The returned\n                value depends on the constructor used to instantiate the object.<ul class=\"ul\" id=\"S-GCConfig-getRateFilterTargetTableField__ul_ids_p5t_tjb\">\n                  <li class=\"li\"><span class=\"keyword apiname\">GlideCurrencyConfig(Object ed)</span>: If an fx_configuration\n                    record exists, returns the rate_filter_target_table_field from the\n                    fx_configuration record that is associated with the FX Currency field specified\n                    by the GlideElementDescriptor passed in the constructor. If no fx_configuration\n                    record, follows the <span class=\"keyword apiname\">GlideCurrencyConfig()</span> rules.</li>\n\n                  <li class=\"li\"><span class=\"keyword apiname\">GlideCurrencyConfig()</span>: Returns <samp class=\"ph codeph\">null</samp>.</li>\n\n                </ul>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "S-GCConfig-getRateTable",
                        "short_description": "Returns the rate table used to convert currency for an FX Currency field.",
                        "description": "<p>If called on an existing FX Currency field that has a corresponding FX Currency\n        Configuration [fx_configuration] record, returns the value of the Rate Table Field\n        (rate_filter_rate_table_field). Otherwise, if a new record, returns a default value.</p><p>For more information on FX Currency rate tables, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/currency/concept/configure-fx-currency-field-behavior.html#fx-currency-conv-rate-table-date-source\" target=\"_blank\">Identify the rate table and date\n          source for currency conversions</a>.</p>",
                        "name": "getRateTable()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var cur_config = new sn_currency.GlideCurrencyConfig();\nvar curr_rate_table = cur_config.getRateTable();",
                                "description": "Returns the default rate table."
                            },
                            {
                                "script": "var grCurr = new GlideRecord('my_FXCurrency_table');\nvar curr_field = grCurr.getElement('currency');\nvar ed = curr_field.getED();\nvar cur_config = new sn_currency.GlideCurrencyConfig(ed);\nvar curr_rate_table = cur_config.getRateTable();",
                                "description": "Returns the rate table used for a specific FX Currency field."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "Name of the rate table used to perform the currency conversion. The returned\n                value depends on the constructor used to instantiate the object.<ul class=\"ul\" id=\"S-GCConfig-getRateTable__ul_pv3_xzt_tjb\">\n                  <li class=\"li\"><span class=\"keyword apiname\">GlideCurrencyConfig(Object ed)</span>: If an fx_configuration\n                    record exists, returns the rate_table_field field from the fx_configuration\n                    record that is associated with the FX Currency field specified by the\n                    GlideElementDescriptor passed in the constructor. If no fx_configuration record,\n                    follows the <span class=\"keyword apiname\">GlideCurrencyConfig()</span> rules.</li>\n\n                  <li class=\"li\"><span class=\"keyword apiname\">GlideCurrencyConfig()</span>: If set, returns the value of the\n                    glide.currency2.system_rate_table property from system properties. Otherwise,\n                    returns <samp class=\"ph codeph\">fx_system_rate</samp>.</li>\n\n                </ul>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "S-GCConfig-getReferenceCurrency",
                        "short_description": "Returns the reference currency for an FX Currency field.",
                        "description": "<p>If called on an existing FX Currency field that has a corresponding FX Currency\n        Configuration [fx_configuration] record, returns the value of the Reference Currency\n        (reference_currency) field. Otherwise, if a new record, returns a default value.</p><p>For more information on reference currency, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/currency/concept/configure-fx-currency-field-behavior.html#fx-currency-set-reference\" target=\"_blank\">Set the reference currency</a>.</p>",
                        "name": "getReferenceCurrency()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var cur_config = new sn_currency.GlideCurrencyConfig();\nvar curr_reference_currency = cur_config.getReferenceCurrency();",
                                "description": "This code example returns the default reference currency."
                            },
                            {
                                "script": "var grCurr = new GlideRecord('my_FXCurrency_table');\nvar curr_field = grCurr.getElement('currency');\nvar ed = curr_field.getED();\nvar cur_config = new sn_currency.GlideCurrencyConfig(ed);\nvar curr_reference_currency = cur_config.getReferenceCurrency();",
                                "description": "This code example returns the reference currency for a specific FX Currency field."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "Reference currency as an ISO currency code. The returned value depends on the\n                constructor used to instantiate the object.<ul class=\"ul\" id=\"S-GCConfig-getReferenceCurrency__ul_yzw_5c5_tjb\">\n                  <li class=\"li\"><span class=\"keyword apiname\">GlideCurrencyConfig(Object ed)</span>: If an fx_configuration\n                    record exists, returns the reference_currency field from the fx_configuration\n                    record that is associated with the FX Currency field specified by the\n                    GlideElementDescriptor passed in the constructor. If no fx_configuration record,\n                    follows the <span class=\"keyword apiname\">GlideCurrencyConfig()</span> rules. </li>\n\n                  <li class=\"li\"><span class=\"keyword apiname\">GlideCurrencyConfig()</span>: If set, returns the value of the\n                    glide.currency2.default_reference_currency system property. Otherwise the method\n                    applies the following rules, in the specified order, to determine the reference\n                    currency code:<ul class=\"ul\" id=\"S-GCConfig-getReferenceCurrency__ul_mjs_fd5_tjb\">\n                      <li class=\"li\">If the glide.system.reference_currency system property is set to true,\n                        uses the value in the glide.system.reference_currency.code system\n                        property.</li>\n\n                      <li class=\"li\">The value in the glide.system.locale system property (which implies a\n                        currency).</li>\n\n                      <li class=\"li\">Default locale of the Java Virtual Machine on which the instance is\n                        running.</li>\n\n                    </ul>\n</li>\n\n                </ul>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "S-GCConfig-getReferenceCurrencySource",
                        "short_description": "Returns the reference currency source for an FX Currency field.",
                        "description": "<p>If called on an existing FX Currency field that has a corresponding FX Currency\n        Configuration [fx_configuration] record, returns the value (dot-walk path) of the Reference\n        Currency Source (reference_currency_source) field. Otherwise, if a new record, returns a\n        default value.</p><p>For more information on reference currency source, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/currency/concept/configure-fx-currency-field-behavior.html#fx-currency-set-reference\" target=\"_blank\">Set the reference currency</a>.</p>",
                        "name": "getReferenceCurrencySource()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var cur_config = new sn_currency.GlideCurrencyConfig();\nvar curr_reference_currency = cur_config.getReferenceCurrencySource();",
                                "description": "This code example returns the default reference currency source."
                            },
                            {
                                "script": "var grCurr = new GlideRecord('my_FXCurrency_table');\nvar curr_field = grCurr.getElement('currency');\nvar ed = curr_field.getED();\nvar cur_config = new sn_currency.GlideCurrencyConfig(ed);\nvar curr_reference_currency = cur_config.getReferenceCurrencySource();",
                                "description": "This code example returns the reference currency source for a specific FX Currency\n        field."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "Dot-walk path of the field used/to use as the reference currency. The returned\n                value depends on the constructor used to instantiate the object.<ul class=\"ul\">\n                  <li class=\"li\"><span class=\"keyword apiname\">GlideCurrencyConfig(Object ed)</span>: If an fx_configuration\n                    record exists, returns the reference_currency_source field from the\n                    fx_configuration record that is associated with the FX Currency field specified\n                    by the GlideElementDescriptor passed in the constructor. If no fx_configuration\n                    record, follows the <span class=\"keyword apiname\">GlideCurrencyConfig()</span> rules.</li>\n\n                  <li class=\"li\"><span class=\"keyword apiname\">GlideCurrencyConfig()</span>: Returns <samp class=\"ph codeph\">null</samp>.</li>\n\n                </ul>"
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "You can instantiate the GlideCurrencyConverter object and define the source and destination\n      currencies during instantiation using <span class=\"keyword apiname\">GlideCurrencyConverter(from, to)</span>. You\n      can also instantiate the object without these values and define them later using the\n        <span class=\"keyword apiname\">setFromCurrency()</span> and <span class=\"keyword apiname\">setToCurrency()</span> methods. These\n      values and the amount to convert must be set before calling the <span class=\"keyword apiname\">convert()</span>\n      method to perform the currency conversion. To set the amount to convert, use the\n        <span class=\"keyword apiname\">setAmount()</span> method.<br/><br/>The <span class=\"keyword apiname\">GlideCurrencyConverter()</span> API also provides optional methods that\n      enable you to:<ul class=\"ul\" id=\"GlideCurrConverterScopedAPI__ul_wx1_qnw_ljb\">\n        <li class=\"li\">Set the date and time for which to perform the conversion,\n            <span class=\"keyword apiname\">setDateTime()</span>. By setting the date and time, the rate that is used in\n          the conversion calculation is that for the specified date and time, instead of the default\n          of the current date and time.</li>\n\n        <li class=\"li\">Set the rate table to use in the conversion, <span class=\"keyword apiname\">setRateTable()</span>. By\n          default the conversion uses the fx_system_rate table however, you can define custom rate\n          tables for your instance. For additional information on creating rate tables, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/currency/task/custom-rate-table.html\" target=\"_blank\">Add conversion rates using a custom\n            rate table</a>.</li>\n\n      </ul><br/><br/>This class runs is in the <span class=\"keyword parmname\">sn_currency</span> namespace.",
                "short_description": "The <span class=\"keyword apiname\">GlideCurrencyConverter</span> API provides methods to convert one\n    currency value to another, such as converting US dollars into European Euro.",
                "identifier": "GlideCurrConverterScopedAPI",
                "name": "GlideCurrencyConverter",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "Scoped-GCC-GlideCurrConv",
                        "short_description": "Instantiates a <span class=\"keyword apiname\">GlideCurrencyConverter</span> object.",
                        "description": "",
                        "name": "GlideCurrencyConverter()",
                        "type": "Constructor",
                        "examples": [
                            {
                                "script": "var conv = new sn_currency.GlideCurrencyConverter();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "Scoped-GCC-GlideCurrConv_S_S",
                        "short_description": "Instantiates a <span class=\"keyword apiname\">GlideCurrencyConverter</span> object and sets the source and\n    destination country codes to use in the currency conversion.",
                        "description": "",
                        "name": "GlideCurrencyConverter(String from, String to)",
                        "type": "Constructor",
                        "examples": [
                            {
                                "script": "var conv = new sn_currency.GlideCurrencyConverter('EUR', 'USD');",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "from",
                                "type": "String",
                                "description": "Three-letter ISO 3166 country code of the source currency."
                            },
                            {
                                "name": "to",
                                "type": "String",
                                "description": "Three-letter ISO 3166 country code of the converted currency."
                            }
                        ],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "Scoped-GCC-convert",
                        "short_description": "Executes the currency converter.",
                        "description": "<p>Call this method after calling other <span class=\"keyword apiname\">GlideCurrencyConverter</span> methods that\n        construct the currency conversion, such as <span class=\"keyword apiname\">setAmount()</span>,\n          <span class=\"keyword apiname\">setRateTable()</span>, and <span class=\"keyword apiname\">setDate()</span>.</p>",
                        "name": "convert()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var conv = new sn_currency.GlideCurrencyConverter('EUR', 'USD');\nconv.setAmount(100);\ngs.info(conv.convert());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Object",
                            "description": "If the conversion is successful, returns CurrencyExchangeValue object. If\n                unsuccessful, returns\n                    \"null\".<pre class=\"pre codeblock\">CurrencyExchangeValue {\nRate: Number,\nOriginalAmount: Number,\nAmount: Number,\nfromCurrency: String,\ntoCurrency: String,\nrateSysId: String\n}</pre>\n<p class=\"p\"><span class=\"keyword parmname\">Rate</span>:\n                  Number. Exchange rate used in the\n                    conversion.</p>\n<p class=\"p\"><span class=\"keyword parmname\">OriginalAmount</span>: Number. Source currency\n                  amount.</p>\n<p class=\"p\"><span class=\"keyword parmname\">Amount</span>: Number. Converted amount\n                    (<span class=\"keyword parmname\">OriginalAmount</span> *\n                    <span class=\"keyword parmname\">Rate</span>).</p>\n<p class=\"p\"><span class=\"keyword parmname\">fromCurrency</span>: String.\n                  Three-letter ISO 3166 country code of the source\n                    currency.</p>\n<p class=\"p\"><span class=\"keyword parmname\">toCurrency</span>: String. Three-letter ISO 3166\n                  country code of the converted currency.</p>\n<p class=\"p\"><span class=\"keyword parmname\">rateSysId</span>:\n                  String. Sys_id of the rate table record used to calculate the\n                conversion.</p>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "Scoped-GCC-setAmount_S",
                        "short_description": "Sets the amount of currency to convert.",
                        "description": "",
                        "name": "setAmount(String amount)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var conv = new sn_currency.GlideCurrencyConverter('EUR', 'USD');\nconv.setAmount(100);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "amount",
                                "type": "String",
                                "description": "Currency amount to convert. This value must be unformatted except for a decimal\n                point to denote fractional currency. For example, 1234.56 is valid, 1,234.56 is\n                invalid."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "Scoped-GCC-setDateTime_O",
                        "short_description": "Sets the currency conversion date and time.",
                        "description": "<p>This date and time determines the conversion rate that is used to convert the currency. If\n        this method is not called before the <span class=\"keyword apiname\">GlideCurrencyConverter.convert()</span>\n        method, the conversion is performed using the rate for the current date/time.</p>",
                        "name": "setDateTime(Object date)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var conv = new sn_currency.GlideCurrencyConverter('EUR', 'USD');\nconv.setAmount(100);\nvar gd = new GlideDateTime(\"2019-01-03 11:00:00\");\nconv.setDateTime(gd);\ngs.info(conv.convert());",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "date",
                                "type": "GlideDateTime",
                                "description": "Date/time for which to calculate the currency conversion. This value determines\n                the rate that is used in the conversion."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "Scoped-GCC-SetFromCurrency_S",
                        "short_description": "Sets the currency type to convert from.",
                        "description": "",
                        "name": "setFromCurrency(String from)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var conv = new sn_currency.GlideCurrencyConverter.setFromCurrency('EUR');",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "from",
                                "type": "String",
                                "description": "Currency to convert from. Use the three-letter ISO currency code of the\n                currency."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "Scoped-GCC-SetRateTable_S",
                        "short_description": "Defines the rate table to be used in currency conversions.",
                        "description": "",
                        "name": "setRateTable(String rateTable)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var conv = new sn_currency.GlideCurrencyConverter('EUR', 'USD');\nconv.setRateTable(custom_rate_table);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "rateTable",
                                "type": "String",
                                "description": "The rate table used in currency conversons, which must extend\n                fx_conversion_rate. If the value is undefined, fx_system_rate is used."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "Scoped-GCC-SetToCurrency_S",
                        "short_description": "Sets the currency type to convert to.",
                        "description": "",
                        "name": "setToCurrency(String to)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var conv = new sn_currency.GlideCurrencyConverter.setToCurrency('USD');",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "to",
                                "type": "String",
                                "description": "Currency to convert to. Use the three-letter ISO currency code of the\n                currency."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "Refer to the <a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/sn_currency-namespace/GlideCurrConverterScopedAPI\" title=\"The GlideCurrencyConverter API provides methods to convert one currency value to another, such as converting US dollars into European Euro.\"><span class=\"keyword apiname\">GlideCurrencyConverter()</span></a> API for methods that return a\n      GlideCurrencyExchangeValue object.<br/><br/><div class=\"note note\"><span class=\"notetitle\">Note:</span> There is no constructor for this class. </div>",
                "short_description": "Provides access to information related to FX Currency conversions.",
                "identifier": "GlideCurrencyExchangeValueScopedAPI",
                "name": "GlideCurrencyExchangeValue",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "Scoped-GCEV-GetAmount",
                        "short_description": "Returns the amount after conversion.",
                        "description": "",
                        "name": "getAmount()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var originalValue = 999.999;\nvar nowDate = gs.daysAgo(0).toString().substring(0,10);\nvar exchangeValue = new sn_currency.GlideCurrencyConverter('USD', 'JPY');\nvar exchangedValue = exchangeValue.setAmount(originalValue).setDate(nowDate).convert().getAmount();\ngs.info('Exchanged Amount: ' + exchangedValue);",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Number",
                            "description": "The amount after conversion."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "Scoped-GCEV-GetCurrency",
                        "short_description": "Returns the currency type converted to.",
                        "description": "",
                        "name": "getCurrency()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var exchangeValue = new sn_currency.GlideCurrencyConverter('USD', 'JPY');\ngs.info('Exchanged Currency(To): ' + exchangeValue.convert().getCurrency());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The three-letter ISO currency code of the currency converted to."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "Scoped-GCEV-GetOrigCurr",
                        "short_description": "Returns the original, pre-conversion currency type.",
                        "description": "",
                        "name": "getOriginalCurrency()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var exchangeValue = new sn_currency.GlideCurrencyConverter('USD', 'JPY');\ngs.info('Original Currency(From): ' + exchangeValue.convert().getOriginalCurrency());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The three-letter ISO currency code of the currency converted from."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "Scoped-GCEV-GetOrigValue",
                        "short_description": "Returns the original, pre-conversion amount.",
                        "description": "",
                        "name": "getOriginalValue()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var converter = new sn_currency.GlideCurrencyConverter('USD', 'JPY');\nconverter.setAmount(999.999)\nvar convertValues = converter.convert();\ngs.info('Original Amount: ' + 'convertValues.getOriginalAmount());\n",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Number",
                            "description": "Original amount before conversion."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "Scoped-GCEV-GetRate",
                        "short_description": "Returns the currency conversion rate used to create the GlideCurrencyExchangeValue\n    object.",
                        "description": "",
                        "name": "getRate()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var nowDate = gs.daysAgo(0).toString().substring(0,10);\nvar exchangeUSD = new sn_currency.GlideCurrencyConverter('EUR', 'USD');\nvar EURUSD = exchangeUSD.setDate(nowDate).convert().getRate();\ngs.info('Exchange Rate From EUR to USD: ' + EURUSD);",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Number",
                            "description": "The exchange rate used in the currency conversion."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "Scoped-GCEV-getRateSysId",
                        "short_description": "Returns the sys_id of the record in the rate table used in the currency conversion.",
                        "description": "",
                        "name": "getRateSysId()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var converter = new sn_currency.GlideCurrencyConverter('USD', 'JPY');\nconverter.setAmount(999.999)\nvar convertValues = converter.convert();\ngs.info('Rate table sys_id: ' + convertValues.getRateSysId());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "Sys_id of the rate table used in the currency conversion."
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "When instantiating the GlideCurrencyFormatter object, you define the format of the output\n      results for this object. Once set, the same format is used each time you call the\n        <span class=\"keyword apiname\">GlideCurrencyFormatter.format()</span> method of that object. The\n        <span class=\"keyword apiname\">GlideCurrencyFormatter()</span> and <span class=\"keyword apiname\">format()</span> methods are the\n      only two methods that you must call to format FX Currency.<br/><br/>The <span class=\"keyword apiname\">GlideCurrencyFormatter()</span> API also provides optional methods that\n      enable you to:<ul class=\"ul\" id=\"GlideCurrFormatScopedAPI__ul_gtn_n5d_4jb\">\n        <li class=\"li\">Set the locale of the currency using <span class=\"keyword apiname\">setLocale()</span>. By setting the\n          locale, the formatter takes into consideration any formatting that is specific to that\n          locale, such as whether a decimal point or decimal comma is used to denote fractions of\n          currency amount. Default: System locale</li>\n\n        <li class=\"li\">Set the minimum number of fractional digits to display using\n            <span class=\"keyword apiname\">setMinFractionDigits()</span>. Defines the minimum number of digits to the\n          right of the decimal point/decimal comma to include. By default, all digits passed in are\n          displayed. If the passed in amount has fewer digits than the specified minimum, the result\n          is padded with \"0\".</li>\n\n        <li class=\"li\">Set the maximum number of fractional digits to display using\n            <span class=\"keyword apiname\">setMaxFractionDigits()</span>. Defines the maximum number of digits to the\n          right of the decimal point/decimal comma to include. By default, all digits passed in are\n          displayed. If the passed in amount has a greater number of digits than the specified\n          maximum, the additional digits are truncated during the process of rounding to the number\n          of maximum fraction digits. Rounding is performed to the closest right-most digit. For\n          example, if the maximum fraction digit is set to 2 and the passed in currency value is\n          123.456, the formatted value is 123.46. If the currency value is 23.122, the formatted\n          value is 23.12. If the maximum is set to less than the minimum, the minimum value is\n          used.</li>\n\n      </ul><br/><br/>This class runs is in the <span class=\"keyword parmname\">sn_currency</span> namespace.",
                "short_description": "The <span class=\"keyword apiname\">GlideCurrencyFormatter</span> API provides methods to format FX\n    Currency strings.",
                "identifier": "GlideCurrFormatScopedAPI",
                "name": "GlideCurrencyFormatter",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "Scoped-GCF-GlideCurrForm_S",
                        "short_description": "Instantiates a GlideCurrencyFormatter object and defines the format string to use to\n    format FX Currency.",
                        "description": "<p>This method does not perform the actual string format. You must call the\n          <span class=\"keyword apiname\">GlideCurrencyFormatter.format()</span> method to format the currency.</p>",
                        "name": "GlideCurrencyFormatter(String formatString)",
                        "type": "Constructor",
                        "examples": [
                            {
                                "script": "var formatString = '%s%v%c';\nvar exchangeValue = new sn_currency.GlideCurrencyFormatter(formatString);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "formatString",
                                "type": "String",
                                "description": "Optional. Format string to use to format any currency passed into the\n                  formatter.<p class=\"p\">Valid values:</p>\n<ul class=\"ul\" id=\"Scoped-GCF-GlideCurrForm_S__ul_sv5_qzc_4jb\">\n                  <li class=\"li\">%s: Replaced by the currency symbol associated with the country code specified\n                    in the <span class=\"keyword apiname\">format()</span> call.</li>\n\n                  <li class=\"li\">%v: Replaced by the currency amount, such as 123.45.</li>\n\n                  <li class=\"li\">%c: Replaced by the ISO currency code specified in the\n                      <span class=\"keyword apiname\">format()</span> call, such as USD or EUR.</li>\n\n                  <li class=\"li\">%l: Replaced with the passed in value, no formatting performed.</li>\n\n                  <li class=\"li\">%p: Replaced by the percent sign (%).</li>\n\n                </ul>\n<p class=\"p\">For example, if the format string is '%s%v%c' and the value to format is\n                  123.45 in US dollars, the returned formatted string is $123.45 USD. If the format\n                  string is '%s%l%c' and the value string to format is '56M' in Euros, the returned\n                  formatted string is â¬56M EUR.</p>\n<div class=\"note note\"><span class=\"notetitle\">Note:</span> The same format string is used each time\n                  the <span class=\"keyword apiname\">format()</span> method is called on this object.</div>"
                            }
                        ],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "Scoped-GCF-format_S_S",
                        "short_description": "Formats a specified currency value using the specified currency code.",
                        "description": "<p>The resulting format of the currency is also dependent on the values passed in when the\n        GlideCurrencyFormatter object was initially instantiated.</p>",
                        "name": "format(String value, String currencyCode)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var amount = '123456.123456789';\nvar currencyCode = 'USD';\nvar formatString = '%s%v%c';\nvar exchangeValue = new sn_currency.GlideCurrencyFormatter(formatString);\ngs.info('Formatted currency: ' + exchangeValue.setMaxFractionDigits(2).format(amount, currencyCode));",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "value",
                                "type": "String",
                                "description": "Currency amount to format. The amount can only contain a decimal point to\n                denote the fractional amount, commas are not supported. <p class=\"p\">Valid values: 123.45 or\n                  2436.23</p>\n<p class=\"p\">Invalid values 123,45 or 2,134.56</p>"
                            },
                            {
                                "name": "currencyCode",
                                "type": "String",
                                "description": "Three-letter ISO currency code to use when formatting the currency."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "Formatted currency value."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "Scoped-GCF-SetLocale_S_S",
                        "short_description": "Sets the locale for the displayed value.",
                        "description": "",
                        "name": "setLocale(String language, String country)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "language",
                                "type": "String",
                                "description": "The three-letter ISO 639 code of the language."
                            },
                            {
                                "name": "country",
                                "type": "String",
                                "description": "The three-letter ISO 3166 code of the country."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "Scoped-GCF-SetMaxFractDig_N",
                        "short_description": "Sets the maximum number of fraction digits to display.",
                        "description": "",
                        "name": "setMaxFractionDigits(Number maxFractionDigits)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var originalAmount = '123456.123456789';\nvar originalCurrency = 'USD';\nvar exchangeValue = new sn_currency.GlideCurrencyFormatter(originalAmount, originalCurrency);\ngs.info('Set maximum fraction digits: ' + exchangeValue.setMaxFractionDigits(2).format());",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "maxFractionDigits",
                                "type": "Number",
                                "description": "Sets the maximum number of fraction digits to display."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "Scoped-GCF-SetMinFranctDig_N",
                        "short_description": "Sets the minimum number of fraction digits to display.",
                        "description": "",
                        "name": "setMinFractionDigits(Number minFractionDigits)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var originalAmount = '123456.123456789';\nvar originalCurrency = 'USD';\nvar exchangeValue = new sn_currency.GlideCurrencyFormatter(originalAmount, originalCurrency);\ngs.info('Set minimum fraction digits: ' + exchangeValue.setMinFractionDigits(3).format());",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "minFractionDigits",
                                "type": "Number",
                                "description": "The minimum number of fraction digits to display."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "The methods in this class parse a specified string into a <a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/sn_currency-namespace/GlideCurrencyValueScopedAPI\" title=\"Provides methods that return the currency code and original currency from an associated GlideCurrencyParser.parse() call.\">GlideCurrencyValue</a> object enabling you to obtain locale-based currency formatting.\n      Before calling the <span class=\"keyword apiname\">GlideCurrencyParser.parse()</span> method, which actually\n      performs the parse, you must set the currency code to use during the parse. You can set the\n      currency code by either passing it in the <span class=\"keyword apiname\">GlideCurrencyParser.parse()</span>\n      method call or by calling <span class=\"keyword apiname\">GlideCurrencyParser.setDefaultCurrencyCode()</span>.<br/><br/>Setting the locale is optional. If you do not set it through the\n        <span class=\"keyword apiname\">GlideCurrencyParser.setLocale()</span> method, the currency amount passed into\n        <span class=\"keyword apiname\">GlideCurrencyParser.parse()</span> must be unformatted.<br/><br/>This class runs is in the <span class=\"keyword parmname\">sn_currency</span> namespace.",
                "short_description": "The <span class=\"keyword apiname\">GlideCurrencyParser</span> API provides methods to parse FX Currency\n    values to detect locale-based formatting.",
                "identifier": "GlideCurrParserScopedAPI",
                "name": "GlideCurrencyParser",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "GCPS-GlideCurrencyParser",
                        "short_description": "Instantiates a GlideCurrencyParser object that provides methods to parse a string into\n    a GlideCurrencyValue object.",
                        "description": "",
                        "name": "GlideCurrencyParser()",
                        "type": "Constructor",
                        "examples": [
                            {
                                "script": "var parser = new sn_currency.GlideCurrencyParser();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GCPS-parse_S",
                        "short_description": "Parses a specified string into a GlideCurrencyValue object to obtain locale-based\n    currency formatting.",
                        "description": "",
                        "name": "parse(String value)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gp = new sn_currency.GlideCurrencyParser(); \ngp.setLocale(\"fre\", \"FRA\"); \nvar cv = gp.parse(\"USD;1234.56\"); \ngs.info(cv);\n",
                                "description": "Passes the currency code in <span class=\"keyword parmname\">value</span> string."
                            },
                            {
                                "script": "var amount = â1234,56â\nvar gp = new sn_currency.GlideCurrencyParser();\ngp.setDefaultCurrencyCode(\"USD\");\nvar cv = gp.parse(amount);\ngs.info(cv);\n",
                                "description": "Uses the <span class=\"keyword parmname\">setDefaultCurrencyCode</span> property to define currency code."
                            }
                        ],
                        "params": [
                            {
                                "name": "value",
                                "type": "String",
                                "description": "String to parse. You can prepend this string with the ISO currency code to use\n                when parsing the string (semicolon separated). If the currency code is not set prior\n                to calling the <span class=\"keyword apiname\">parse()</span> method, it defaults to the current session\n                currency code.<p class=\"p\">This method supports both decimal point and decimal comma\n                  notation.</p>\n<p class=\"p\">For example: \"123.45\", \"USD;123.45\", \"123,45\",\n                \"EUR;123,45\"</p>"
                            }
                        ],
                        "return": {
                            "type": "<a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/sn_currency-namespace/GlideCurrencyValueScopedAPI\" title=\"Provides methods that return the currency code and original currency from an associated GlideCurrencyParser.parse() call.\">GlideCurrencyValue</a>",
                            "description": "Parsed value information.<p class=\"p\">Data type: Object</p>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GCPS-setDefaultCurrencyCode_S",
                        "short_description": "Sets the currency code for the associated GlideCurrencyParser object.",
                        "description": "",
                        "name": "setDefaultCurrencyCode(String currencyCode)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var amount = â123.45â\nvar gp = new sn_currency.GlideCurrencyParser();\ngp.setDefaultCurrencyCode(\"USD\");\nvar cv = gp.parse(amount);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "currencyCode",
                                "type": "String",
                                "description": "Three-letter ISO currency code to use as the default in the associated\n                GlideCurrencyParser object."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GCPS-setLocale_S_S",
                        "short_description": "Sets the default language and country codes, which constitute the locale, on the\n    associated GlideCurrencyParser object.",
                        "description": "<p>If you do not call this method before calling the\n          <span class=\"keyword apiname\">GlideCurrencyParser.parse()</span> method, the locale defaults to the current\n        session locale.</p>",
                        "name": "setLocale(String language, String country)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var amount = âUSD;123.45â\nvar gp = new sn_currency.GlideCurrencyParser();\ngp.setLocale(\"spa\", \"ESP\");\nvar cv = gp.parse(amount);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "language",
                                "type": "String",
                                "description": "Three-letter ISO 639 language code, such as eng, spa, and fre."
                            },
                            {
                                "name": "country",
                                "type": "String",
                                "description": "Three-letter ISO 3166 country code, such as USA, ESP, and FRA."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "<div class=\"note note\"><span class=\"notetitle\">Note:</span> There is no constructor for this class. </div>",
                "short_description": "Provides methods that return the currency code and original currency from an associated\n      <span class=\"keyword apiname\">GlideCurrencyParser.parse()</span> call.",
                "identifier": "GlideCurrencyValueScopedAPI",
                "name": "GlideCurrencyValue",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "Scoped-GCV-getAmount",
                        "short_description": "Returns the currency amount originally passed into the associated\n      <span class=\"keyword apiname\">GlideCurrencyParser.parse()</span> call.",
                        "description": "",
                        "name": "getAmount()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gp = new sn_currency.GlideCurrencyParser(); \ngp.setLocale(\"eng\", \"USA\");  \nvar cv = gp.parse(\"USD;1234.56\"); \ngs.info('Original currency amount: ' + cv.getAmount());\n",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "Original currency passed into the <span class=\"keyword apiname\">parse()</span> method."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "Scoped-GCV-getCurrencyCode",
                        "short_description": "Returns the currency code used to parse the currency in the associated\n      <span class=\"keyword apiname\">GlideCurrencyParser.parse()</span> call.",
                        "description": "",
                        "name": "getCurrencyCode()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var gp = new sn_currency.GlideCurrencyParser(); \ngp.setLocale(eng, USA); \nvar cv = gp.parse(\"USD\";\"1234.56\"); \ngs.info('Parsed currency code: ' + cv.getCurrencyCode());\n",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "Three-letter ISO currency code used to parse the currency."
                        },
                        "extras": []
                    }
                ]
            }
        ]
    },
    {
        "identifier": "sn_discovery-namespace",
        "namespace": "sn_discovery",
        "classes": [
            {
                "description": "",
                "short_description": "The methods of the <span class=\"keyword apiname\">DiscoveryAPI - Scoped</span> class launch a quick\n    Discovery of a single IPv4 address and return summaries of previously launched Discovery\n    statuses for a single CI or for all scanned CIs.",
                "identifier": "c_DiscoveryAPIScopedAPI",
                "name": "DiscoveryAPI",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "r_DiscoAPIdiscoverIpAddress",
                        "short_description": "Discovers a specified IPv4 address.",
                        "description": "<p>A MID Server is selected automatically, based on the IP address provided or the application\n        specified.</p>",
                        "name": "discoverIpAddress(String ipAddress, String application, String source)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var sysid = sn_discovery.DiscoveryAPI.discoverIpAddress(\"11.23.125.39\");",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "application",
                                "type": "String",
                                "description": "Optional. Application configured for the MID Server.<p class=\"p\">To define a\n                    <span class=\"keyword parmname\">source</span> parameter but not an\n                    <span class=\"keyword parmname\">application</span> parameter, use \"NULL\" as the place\n                  holder.</p>\n<p class=\"p\">Default: Discovery</p>"
                            },
                            {
                                "name": "ipAddress",
                                "type": "String",
                                "description": "IP address to discover."
                            },
                            {
                                "name": "source",
                                "type": "String",
                                "description": "Optional. Source of the Discovery. This same value appears in the optional\n                  <span class=\"ph uicontrol\">Source</span> field in the Discovery Status record, which\n                indicates how the Discovery was triggered. <p class=\"p\">Default: Discovery_API</p>"
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "Discovery status record sys_id.<div class=\"p\">The following exceptions can be thrown during\n                  MID Server selection:<ul class=\"ul\" id=\"r_DiscoAPIdiscoverIpAddress__ul_ms4_lqj_qcb\">\n                    <li class=\"li\"><span class=\"keyword parmname\">NoSuitableMidServerFoundException</span>: <samp class=\"ph codeph\">No\n                        appropriate MID Server available for this Discovery</samp></li>\n\n                    <li class=\"li\"><span class=\"keyword parmname\">BadArgumentException</span>: <samp class=\"ph codeph\">Invalid argument detected\n                        during MID Server selection</samp>\n                    </li>\n\n                  </ul>\n</div>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_DiscoAPIreportCiIpAddressStatus1",
                        "short_description": "Used to return a summary of a configuration item's Discovery status given the specific\n    status sys_id and IPv4 address.",
                        "description": "<p>The following exceptions can be thrown:<ul class=\"ul\" id=\"r_DiscoAPIreportCiIpAddressStatus1__ul_ztk_gft_rcb\">\n          <li class=\"li\"><span class=\"keyword parmname\">DiscoveryStatusNotFoundException</span>: <samp class=\"ph codeph\">Displays this message:\n              Discovery Status with sys id '&lt;<dfn class=\"term\">invalid value</dfn>&gt;' does not exist</samp>\n          </li>\n\n          <li class=\"li\"><span class=\"keyword parmname\">DiscoveryDeviceHistoryNotFoundException</span>: <samp class=\"ph codeph\">Device History\n              with Discovery Status sys id '&lt;<dfn class=\"term\">invalid value</dfn>&gt;' and ipAddress\n                '&lt;<dfn class=\"term\">invalid value</dfn>&gt;' does not exist</samp></li>\n\n          <li class=\"li\"><span class=\"keyword parmname\">IllegalArgumentException</span> (invalid input arguments): This argument\n            exception prevents input values from being null.<ul class=\"ul\" id=\"r_DiscoAPIreportCiIpAddressStatus1__ul_ul2_c4t_rcb\">\n              <li class=\"li\"><samp class=\"ph codeph\">Discovery Status sys id can not be null </samp></li>\n\n              <li class=\"li\"><samp class=\"ph codeph\">ipAddress can not be null</samp>\n              </li>\n\n            </ul>\n</li>\n\n          <li class=\"li\"><span class=\"keyword parmname\">IllegalArgumentException</span> (values stored in database): This\n            argument exception prevents erroneous data from being returned to the caller in the case\n            of bad attribute values.<ul class=\"ul\" id=\"r_DiscoAPIreportCiIpAddressStatus1__ul_pjt_j4t_rcb\">\n              <li class=\"li\"><samp class=\"ph codeph\">Discovery Status 'state' property can not be null</samp>\n              </li>\n\n              <li class=\"li\"><samp class=\"ph codeph\">Device history 'source' property can not be null </samp></li>\n\n              <li class=\"li\"><samp class=\"ph codeph\">Device history 'issues' property is not an integer: &lt;<dfn class=\"term\">invalid\n                    value</dfn>&gt;</samp>\n              </li>\n\n              <li class=\"li\"><samp class=\"ph codeph\">Device history 'issues' property can not be less than 0: &lt;<dfn class=\"term\">invalid\n                    value</dfn>&gt;</samp>\n              </li>\n\n            </ul>\n</li>\n\n        </ul></p>",
                        "name": "reportCiIpAddressStatus(Object ipAddress, Object discoveryStatusSysId)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var ipResultObj = sn_discovery.DiscoveryAPI.reportCiIpAddressStatus(ipAddress, discoveryStatus);\n",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "ipAddress",
                                "type": "string",
                                "description": "The IPv4 address that was scanned."
                            },
                            {
                                "name": "discoveryStatusSysId",
                                "type": "string",
                                "description": "The sys_id of the Discovery status record for the IP address that was\n                scanned."
                            }
                        ],
                        "return": {
                            "type": "array",
                            "description": "JavaScript array of immutable <a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/sn_discovery-namespace/c_ReportCiStatusOutputJSScopedAPI\" title=\"The ReportCiStatusOutputJS methods are getters that return specific object properties for the DiscoveryAPI reportCiIpAddressStatus method and then convert the information into a JSON string.\">ReportCiStatusOutputJS</a> objects."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_DiscoAPIreportCiStatus",
                        "short_description": "Used to return a summary of a CI Discovery status given a specific Discovery Status\n    sys_id.",
                        "description": "<p>The following exceptions can be thrown:<ul class=\"ul\" id=\"r_DiscoAPIreportCiStatus__ul_ztk_gft_rcb\">\n          <li class=\"li\"><span class=\"keyword parmname\">DiscoveryStatusNotFoundException</span>: <samp class=\"ph codeph\">Discovery Status with\n              sys id '&lt;<dfn class=\"term\">invalid value</dfn>&gt;' does not exist </samp></li>\n\n          <li class=\"li\"><span class=\"keyword parmname\">DiscoveryDeviceHistoryNotFoundException</span>: <samp class=\"ph codeph\">Device History\n              with Discovery Status sys id '&lt;<dfn class=\"term\">invalid value</dfn>&gt;' and ipAddress\n                '&lt;<dfn class=\"term\">invalid value</dfn>&gt;' does not exist</samp>\n          </li>\n\n          <li class=\"li\"><span class=\"keyword parmname\">IllegalArgumentException</span> (invalid input arguments): This argument\n            exception prevents input values from being null.<ul class=\"ul\" id=\"r_DiscoAPIreportCiStatus__ul_ul2_c4t_rcb\">\n              <li class=\"li\"><samp class=\"ph codeph\">Discovery Status sys id can not be null</samp>\n              </li>\n\n              <li class=\"li\"><samp class=\"ph codeph\">ipAddress can not be null</samp></li>\n\n            </ul>\n</li>\n\n          <li class=\"li\"><span class=\"keyword parmname\">IllegalArgumentException</span> (values stored in database): This\n            argument exception imposes post conditions on database access values.<ul class=\"ul\" id=\"r_DiscoAPIreportCiStatus__ul_pjt_j4t_rcb\">\n              <li class=\"li\"><samp class=\"ph codeph\">Discovery Status 'state' property can not be null</samp></li>\n\n              <li class=\"li\"><samp class=\"ph codeph\">Device history 'source' property can not be null</samp></li>\n\n              <li class=\"li\"><samp class=\"ph codeph\">Device history 'issues' property is not an integer: &lt;<dfn class=\"term\">invalid\n                    value</dfn>&gt;</samp></li>\n\n              <li class=\"li\"><samp class=\"ph codeph\">Device history 'issues' property can not be less than 0: &lt;<dfn class=\"term\">invalid\n                    value</dfn>&gt;</samp></li>\n\n            </ul>\n</li>\n\n        </ul></p>",
                        "name": "reportCiStatus(Object discoveryStatusSysId)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var ipResultObjArray = sn_discovery.DiscoveryAPI.reportCiStatus(discoveryStatus);\nfor(var idx=0; idx &lt; ipResultObjArray.length; idx++) {    \nvar ipResultObj = ipResultObjArray[idx]; ",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "sys_id",
                                "type": "string",
                                "description": "The sys_id of a Discovery status record."
                            }
                        ],
                        "return": {
                            "type": "array",
                            "description": "JavaScript array of immutable <a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/sn_discovery-namespace/c_ReportCiStatusOutputJSScopedAPI\" title=\"The ReportCiStatusOutputJS methods are getters that return specific object properties for the DiscoveryAPI reportCiIpAddressStatus method and then convert the information into a JSON string.\">ReportCiStatusOutputJS</a> objects."
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "",
                "short_description": "The <span class=\"keyword parmname\">ReportCiStatusOutputJS</span> methods are getters that return\n    specific object properties for the DiscoveryAPI <span class=\"keyword parmname\">reportCiIpAddressStatus</span>\n    method and then convert the information into a JSON string.",
                "identifier": "c_ReportCiStatusOutputJSScopedAPI",
                "name": "ReportCiStatusOutputJS",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "r_RepCiStatOutgetCiOperationStatus",
                        "short_description": "Used to return the state of the scanned CI.",
                        "description": "<p>This is a calculated field based on the last_state field in discovery_device_history table\n        and the state field in the discovery_status table.</p>",
                        "name": "getCiOperationStatus()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var ipResultObj = sn_discovery.DiscoveryAPI.reportCiIpAddressStatus(ipAddress, discoveryStatus);\ngs.info(\"ipResultObj(CiOperationStatus): \" + ipResultObj.getCiOperationStatus());\n",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "string",
                            "description": "The three possible states returned by this method are:<ul class=\"ul\" id=\"r_RepCiStatOutgetCiOperationStatus__ul_kll_ngb_scb\">\n                  <li class=\"li\">Processing: Discovery is still processing the request.</li>\n\n                  <li class=\"li\">Successful: A CI was created or updated.</li>\n\n                  <li class=\"li\">NotSuccessful: A CI was not created or updated, and the Discovery status was\n                    Completed or Cancelled.</li>\n\n                </ul>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_RepCiStatOutgetCmdbCI",
                        "short_description": "Used to return the value in the cmdb_ci field from the discovery_device_history table\n    for the CI being scanned.",
                        "description": "",
                        "name": "getCmdbCI()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var ipResultObj = sn_discovery.DiscoveryAPI.reportCiIpAddressStatus(ipAddress, discoveryStatus);\ngs.info(\"ipResultObj(cmdb): \" + ipResultObj.getCmdbCI());\n",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "string",
                            "description": "Sys_id of the CI created or updated. This value can be null in the case of\n                intermediate results before a CI is created."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_RepCiStatOutgetDiscoveryState",
                        "short_description": "Used to return the value from the <span class=\"ph uicontrol\">State</span> field in the Discovery\n    Status [discovery_status] table.",
                        "description": "<p>The values returned by this method are used to calculate the value returned by the <a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/sn_discovery-namespace/c_ReportCiStatusOutputJSScopedAPI#r_RepCiStatOutgetCiOperationStatus\" title=\"Used to return the state of the scanned CI.\">getCiOperationStatus()</a> method</p>",
                        "name": "getDiscoveryState()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var ipResultObj = sn_discovery.DiscoveryAPI.reportCiIpAddressStatus(ipAddress, discoveryStatus);\ngs.info(\"ipResultObj(discoveryState): \" + ipResultObj.getDiscoveryState());\n",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "string",
                            "description": "The possible states returned by this method are:<ul class=\"ul\" id=\"r_RepCiStatOutgetDiscoveryState__ul_kll_ngb_scb\">\n                  <li class=\"li\">Starting</li>\n\n                  <li class=\"li\">Active</li>\n\n                  <li class=\"li\">Complete</li>\n\n                  <li class=\"li\">Cancelled</li>\n\n                </ul>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_RepCiStatOutgetIpAddress",
                        "short_description": "Used to return the value from the source field in the discovery_device_history table\n    for the CI being scanned.",
                        "description": "",
                        "name": "getIpAddress()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var ipResultObj = sn_discovery.DiscoveryAPI.reportCiIpAddressStatus(ipAddress, discoveryStatus);\ngs.info(\"ipResultObj(IpAddress): \" + ipResultObj.getIpAddress());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "string",
                            "description": "The IP address of the CI being scanned."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_RepCiStatOutgetIssues",
                        "short_description": "Used to return the value from the issues field in the discovery_device_history table\n    for the CI being scanned.",
                        "description": "",
                        "name": "getIssues()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var ipResultObj = sn_discovery.DiscoveryAPI.reportCiIpAddressStatus(ipAddress, discoveryStatus);\ngs.info(\"ipResultObj(issues): \" + ipResultObj.getIssues());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "integer",
                            "description": "Number of issues in this Discovery for this CI."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_RepCiStatOutgetIssuesLink",
                        "short_description": "Used to return the value from the issues_link field in the discovery_device_history\n    table for the CI being scanned.",
                        "description": "",
                        "name": "getIssuesLink()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var ipResultObj = sn_discovery.DiscoveryAPI.reportCiIpAddressStatus(ipAddress, discoveryStatus);\ngs.info(\"ipResultObj(issues_link): \" + ipResultObj.getIssuesLink());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "string",
                            "description": "The issues_link field from the discovery_device_history table.<p class=\"p\">This value may\n                  be null or an anchor tag defining a hyperlink to a page that provides the list of\n                  issues associated with the Discovery Status and CI (IP address).</p>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_RepCiStatOuttoJson",
                        "short_description": "Used to serialized the <span class=\"keyword parmname\">ReportCiStatusOutputJS</span> object.",
                        "description": "<p>This method throws the <span class=\"keyword parmname\">IllegalArgumentException</span> exception,\n          <samp class=\"ph codeph\">Cannot serialize object, e</samp> when the method is unable to serialize the\n        object. The <span class=\"ph uicontrol\">e</span> is the exception object, which provides the exception\n        message and trace.</p>",
                        "name": "toJson()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var ipResultObj = sn_discovery.DiscoveryAPI.reportCiIpAddressStatus(ipAddress, discoveryStatus);\ngs.info(\"ipResultObj(json): \" + ipResultObj.toJson());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "string",
                            "description": "Serialized instance of the <span class=\"keyword parmname\">ReportCiStatusOutputJS</span> object\n                into a JSON string."
                        },
                        "extras": []
                    }
                ]
            }
        ]
    },
    {
        "identifier": "sn_dt-namespace",
        "namespace": "sn_dt",
        "classes": [
            {
                "description": "Access <span class=\"keyword apiname\">DecisionTableAPI</span> methods using the <span class=\"keyword parmname\">sn_dt</span>\n      namespace. To learn more about <span class=\"ph\">Decision Tables</span>, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-servicenow-platform/page/administer/decision-table/concept/decision-table.html\" target=\"_blank\">Decision Tables</a>.",
                "short_description": "Use the <span class=\"keyword apiname\">DecisionTableAPI</span> class to access <span class=\"ph\">Decision Tables</span> data in scoped and global server-side scripts.",
                "identifier": "DecisionTableAPI",
                "name": "DecisionTableAPI - Scoped, Global",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "DecisionTableAPI-DecisionTableAPI",
                        "short_description": "Instantiates a DecisionTableAPI object.",
                        "description": "",
                        "name": "DecisionTableAPI()",
                        "type": "Constructor",
                        "examples": [
                            {
                                "script": "var dt = new sn_dt.DecisionTableAPI();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "DecisionTableAPI-getAll",
                        "short_description": "Returns all decision tables from the Decision Tables [sys_decision] table.",
                        "description": "",
                        "name": "getAll()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var dt = new sn_dt.DecisionTableAPI();\nvar response = dt.getAll();\ngs.info(JSON.stringify(response));\n",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Object",
                            "description": "All decision tables and their fields from the Decision Tables [sys_decision]\n                table. Each decision table contains these key-value pairs: <ul class=\"ul\" id=\"DecisionTableAPI-getAll__ul_vvz_psd_h3b\">\n        <li class=\"li\">distinctAnswers: Array. Answer records associated with the decision table. Each record\n         contains these key-value pairs. <ul class=\"ul\" id=\"DecisionTableAPI-getAll__ul_ppz_npd_h3b\">\n        <li class=\"li\">valid: Boolean. True if the record exists in the system; otherwise false. </li>\n\n        <li class=\"li\">label: String. Answer record label.</li>\n\n        <li class=\"li\">value: String. Sys ID of the answer record.</li>\n\n        <li class=\"li\">table: String. Table containing the answer record. </li>\n\n       </ul>\n</li>\n\n        <li class=\"li\">referenceQualifier: String. Used for internal purposes. </li>\n\n        <li class=\"li\">inputs: Array. Decision inputs from the Decision Inputs [sys_decision_input] table\n         associated with the decision table. Each record contains these key-value pairs.<ul class=\"ul\" id=\"DecisionTableAPI-getAll__ul_n4g_spd_h3b\">\n        <li class=\"li\">searchField: String. Used for internal purposes.</li>\n\n        <li class=\"li\">defaultValue: String. Default value for the input. </li>\n\n        <li class=\"li\">show_ref_finder: Boolean. Used for internal purposes.</li>\n\n        <li class=\"li\">use_dependent: Boolean. Used for internal purposes.</li>\n\n        <li class=\"li\">type: String. Input data type.</li>\n\n        <li class=\"li\">mandatory: Boolean. True if the input is mandatory; otherwise false. </li>\n\n        <li class=\"li\">extended: Boolean. True if the input extends another field; otherwise false. </li>\n\n        <li class=\"li\">local: Boolean. Used for internal purposes.</li>\n\n        <li class=\"li\">sys_class_name: String. Used for internal purposes.</li>\n\n        <li class=\"li\">reference: String. Reference table used if the input type is reference. </li>\n\n        <li class=\"li\">dependent_on: String. Field that document ID and choice inputs depend on.</li>\n\n        <li class=\"li\">data_structure: String. Used for internal purposes.</li>\n\n        <li class=\"li\">readonly: Boolean. True if the input is read-only; otherwise false.</li>\n\n        <li class=\"li\">id: String. Sys ID of the input from the Decision Inputs [sys_decision_input]\n         table.</li>\n\n        <li class=\"li\">type_label: String. Input data type label. </li>\n\n        <li class=\"li\">table: String. Reference field table if the input type is reference.</li>\n\n        <li class=\"li\">order: Number. Order in which the system evaluates inputs.</li>\n\n        <li class=\"li\">ref_qual: String. Condition applied to the reference table. </li>\n\n        <li class=\"li\">reference_display: String. Used for internal purposes.</li>\n\n        <li class=\"li\">choiceOption: String. Method for users to see a list of suggested values.</li>\n\n        <li class=\"li\">label: String. Label of the input record.</li>\n\n        <li class=\"li\">hint: String. Hint text used to help users understand the input required. </li>\n\n        <li class=\"li\">name: String. Internal name of the input record. </li>\n\n        <li class=\"li\">attributes: Array. Field attributes that apply to the input record.</li>\n\n        <li class=\"li\">maxsize: Number. Maximum number of characters allowed in the field. </li>\n\n        <li class=\"li\">columnName: String. Name of the input.</li>\n\n       </ul>\n</li>\n\n        <li class=\"li\">domain: String. Domain in which the decision table is visible.</li>\n\n        <li class=\"li\">answerType: String. Used for internal purposes.</li>\n\n        <li class=\"li\">questions: Array. Decision records from the Decision [sys_decision_question] table\n         associated with the decision table. Decision records contain these key-value pairs.<ul class=\"ul\" id=\"DecisionTableAPI-getAll__ul_t4r_nyd_h3b\">\n        <li class=\"li\">defaultAnswer: Boolean. True if this decision is the default for the decision table;\n         otherwise false.</li>\n\n        <li class=\"li\">condition: String. Conditions required to reach this decision. The fields available for\n         the condition are the decision inputs that are associated with this decision table.</li>\n\n        <li class=\"li\">answer: Object. Answer record associated with the decision. Answer objects contain these\n         key-value pairs.<ul class=\"ul\" id=\"DecisionTableAPI-getAll__ul_myc_2rd_h3b\">\n        <li class=\"li\">valid: Boolean. True if the record exists in the system; otherwise false. </li>\n\n        <li class=\"li\">label: String. Answer record label.</li>\n\n        <li class=\"li\">value: String. Sys ID of the answer record.</li>\n\n        <li class=\"li\">table: String. Table containing the answer record. </li>\n\n       </ul>\n</li>\n\n        <li class=\"li\">decisionTable: String. Sys ID of the decision table from the Decision Tables\n         [sys_decision] table associated with the decision.</li>\n\n        <li class=\"li\">domain: String. Domain in which the decision is visible.</li>\n\n        <li class=\"li\">active: Boolean. True if the decision record is active; otherwise false.</li>\n\n        <li class=\"li\">id: String. Sys ID of the decision record from the Decision [sys_decision_question]\n         table.</li>\n\n        <li class=\"li\">label: String. Label for the decision record.</li>\n\n        <li class=\"li\">order: Number. Order in which the system evaluates decisions.</li>\n\n       </ul>\n</li>\n\n        <li class=\"li\">accessibleFrom: String. Scopes that have access to the record.</li>\n\n        <li class=\"li\">name: String. Internal name of the decision table record. </li>\n\n        <li class=\"li\">active: Boolean. True if the decision table record is active; otherwise false.</li>\n\n        <li class=\"li\">id: String. Sys ID of the decision table record.</li>\n\n        <li class=\"li\">label: String. Label of the decision table record.</li>\n\n        <li class=\"li\">answerTable: Object. Answer table associated with the decision table. <ul class=\"ul\" id=\"DecisionTableAPI-getAll__d83733e229\">\n          <li class=\"li\">displayValue: String. Display name of the table that contains answer records.</li>\n\n          <li class=\"li\">value: String. Internal name of the table that contains answer records.</li>\n\n         </ul>\n</li>\n\n       </ul>\n<p class=\"p\">Format: JSON</p>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "DecisionTableAPI-getAnswers_S",
                        "short_description": "Returns the answers associated with the specified decision table. An answer is a record\n    on any table associated with a Decision [sys_decision_question] record.",
                        "description": "",
                        "name": "getAnswers(String decisionID)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var dt = new sn_dt.DecisionTableAPI();\nvar response = dt.getAnswers(\"3c4464a7b701230034d1da23ee11a993\");\ngs.info(JSON.stringify(response));",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "decisionID",
                                "type": "String",
                                "description": "<span class=\"ph\">Sys ID of the Decision Table record from the\n        Decision Tables [sys_decision] table.</span>"
                            }
                        ],
                        "return": {
                            "type": "Object",
                            "description": "Answer records associated with the decision table. Each record contains these\n                key-value pairs: <ul class=\"ul\" id=\"DecisionTableAPI-getAnswers_S__ul_jlm_xcd_h3b\">\n        <li class=\"li\">valid: Boolean. True if the record exists in the system; otherwise false. </li>\n\n        <li class=\"li\">label: String. Answer record label.</li>\n\n        <li class=\"li\">value: String. Sys ID of the answer record.</li>\n\n        <li class=\"li\">table: String. Table containing the answer record. </li>\n\n       </ul>\n<p class=\"p\">Format: JSON</p>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "DecisionTableAPI-getDecision_S_O",
                        "short_description": "Evaluates a decision table based on the provided inputs and returns an\n    answer.\n    If no inputs are provided, returns the first default answer found.",
                        "description": "",
                        "name": "getDecision(String decisionID, Map inputs)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var dt = new sn_dt.DecisionTableAPI();\nvar inputs = new Object();\ninputs[âageâ] = 25;\nvar response = dt.getDecision('26eea7a9dba07300efc65404ce961961', inputs);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "decisionID",
                                "type": "String",
                                "description": "<span class=\"ph\">Sys ID of the Decision Table record from the\n        Decision Tables [sys_decision] table.</span>"
                            },
                            {
                                "name": "inputs",
                                "type": "Map",
                                "description": "Optional. Input values for the Decision Inputs [sys_decision_input] table\n                associated with the provided decision table. Use the value of the <span class=\"ph uicontrol\">Column\n                  name</span> field as the key. The data type of the value must match the\n                Decision Input <span class=\"ph uicontrol\">Type</span> field.  If no inputs are provided,\n                returns the first default answer found."
                            }
                        ],
                        "return": {
                            "type": "GlideRecord",
                            "description": "The correctly evaluated Answer record associated with the decision table. An\n                answer record is a record from the table defined in the Decision\n                [sys_decision_question] record <span class=\"ph uicontrol\">Answer table</span> field. <p class=\"p\">If no\n                  inputs are provided, returns the first default answer found. If no default or\n                  correctly evaluated answers are found, returns an error.</p>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "DecisionTableAPI-getDecisions_S_O",
                        "short_description": "Evaluates\n    a decision table based on the provided inputs and returns all\n    correctly\n    evaluated answers. If no inputs are provided, returns all default answers.",
                        "description": "",
                        "name": "getDecisions(String decisionID, Map inputs)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var dt = new sn_dt.DecisionTableAPI();\nvar input = new Object();\ninput['age'] = 25;\nvar response = dt.getDecisions('5b06ce5db701230034d1da23ee11a965', input);\n",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "decisionID",
                                "type": "String",
                                "description": "<span class=\"ph\">Sys ID of the Decision Table record from the\n        Decision Tables [sys_decision] table.</span>"
                            },
                            {
                                "name": "inputs",
                                "type": "Map",
                                "description": "Optional. Input values for the Decision Inputs  [sys_decision_input] table\n                associated with the provided decision table. If no inputs are provided, returns all\n                default answers."
                            }
                        ],
                        "return": {
                            "type": "Array",
                            "description": "Answer\n                records in GlideRecord format. An answer record is a record on any table associated\n                with a Decision [sys_decision_question] record. If no inputs are provided, returns\n                all default answers. If no default or correctly evaluated answers are found, returns\n                an error."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "DecisionTableAPI-getDecisionTable_S",
                        "short_description": "Returns a single decision table from the Decision Tables [sys_decision]\n    table.",
                        "description": "",
                        "name": "getDecisionTable(String decisionID)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var dt = new sn_dt.DecisionTableAPI();\nvar response = dt.getDecisionTable(\"3c4464a7b701230034d1da23ee11a993\");\ngs.info(JSON.stringify(response));\n",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "decisionID",
                                "type": "String",
                                "description": "<span class=\"ph\">Sys ID of the Decision Table record from the\n        Decision Tables [sys_decision] table.</span>"
                            }
                        ],
                        "return": {
                            "type": "Object",
                            "description": "Decision table from the Decision Tables [sys_decision] table. Each decision\n                table contains these key-value pairs. <ul class=\"ul\" id=\"DecisionTableAPI-getDecisionTable_S__ul_tjj_5pd_h3b\">\n        <li class=\"li\">distinctAnswers: Array. Answer records associated with the decision table. Each record\n         contains these key-value pairs. <ul class=\"ul\" id=\"DecisionTableAPI-getDecisionTable_S__ul_ppz_npd_h3b\">\n        <li class=\"li\">valid: Boolean. True if the record exists in the system; otherwise false. </li>\n\n        <li class=\"li\">label: String. Answer record label.</li>\n\n        <li class=\"li\">value: String. Sys ID of the answer record.</li>\n\n        <li class=\"li\">table: String. Table containing the answer record. </li>\n\n       </ul>\n</li>\n\n        <li class=\"li\">referenceQualifier: String. Used for internal purposes. </li>\n\n        <li class=\"li\">inputs: Array. Decision inputs from the Decision Inputs [sys_decision_input] table\n         associated with the decision table. Each record contains these key-value pairs.<ul class=\"ul\" id=\"DecisionTableAPI-getDecisionTable_S__ul_n4g_spd_h3b\">\n        <li class=\"li\">searchField: String. Used for internal purposes.</li>\n\n        <li class=\"li\">defaultValue: String. Default value for the input. </li>\n\n        <li class=\"li\">show_ref_finder: Boolean. Used for internal purposes.</li>\n\n        <li class=\"li\">use_dependent: Boolean. Used for internal purposes.</li>\n\n        <li class=\"li\">type: String. Input data type.</li>\n\n        <li class=\"li\">mandatory: Boolean. True if the input is mandatory; otherwise false. </li>\n\n        <li class=\"li\">extended: Boolean. True if the input extends another field; otherwise false. </li>\n\n        <li class=\"li\">local: Boolean. Used for internal purposes.</li>\n\n        <li class=\"li\">sys_class_name: String. Used for internal purposes.</li>\n\n        <li class=\"li\">reference: String. Reference table used if the input type is reference. </li>\n\n        <li class=\"li\">dependent_on: String. Field that document ID and choice inputs depend on.</li>\n\n        <li class=\"li\">data_structure: String. Used for internal purposes.</li>\n\n        <li class=\"li\">readonly: Boolean. True if the input is read-only; otherwise false.</li>\n\n        <li class=\"li\">id: String. Sys ID of the input from the Decision Inputs [sys_decision_input]\n         table.</li>\n\n        <li class=\"li\">type_label: String. Input data type label. </li>\n\n        <li class=\"li\">table: String. Reference field table if the input type is reference.</li>\n\n        <li class=\"li\">order: Number. Order in which the system evaluates inputs.</li>\n\n        <li class=\"li\">ref_qual: String. Condition applied to the reference table. </li>\n\n        <li class=\"li\">reference_display: String. Used for internal purposes.</li>\n\n        <li class=\"li\">choiceOption: String. Method for users to see a list of suggested values.</li>\n\n        <li class=\"li\">label: String. Label of the input record.</li>\n\n        <li class=\"li\">hint: String. Hint text used to help users understand the input required. </li>\n\n        <li class=\"li\">name: String. Internal name of the input record. </li>\n\n        <li class=\"li\">attributes: Array. Field attributes that apply to the input record.</li>\n\n        <li class=\"li\">maxsize: Number. Maximum number of characters allowed in the field. </li>\n\n        <li class=\"li\">columnName: String. Name of the input.</li>\n\n       </ul>\n</li>\n\n        <li class=\"li\">domain: String. Domain in which the decision table is visible.</li>\n\n        <li class=\"li\">answerType: String. Used for internal purposes.</li>\n\n        <li class=\"li\">questions: Array. Decision records from the Decision [sys_decision_question] table\n         associated with the decision table. Decision records contain these key-value pairs.<ul class=\"ul\" id=\"DecisionTableAPI-getDecisionTable_S__ul_t4r_nyd_h3b\">\n        <li class=\"li\">defaultAnswer: Boolean. True if this decision is the default for the decision table;\n         otherwise false.</li>\n\n        <li class=\"li\">condition: String. Conditions required to reach this decision. The fields available for\n         the condition are the decision inputs that are associated with this decision table.</li>\n\n        <li class=\"li\">answer: Object. Answer record associated with the decision. Answer objects contain these\n         key-value pairs.<ul class=\"ul\" id=\"DecisionTableAPI-getDecisionTable_S__ul_myc_2rd_h3b\">\n        <li class=\"li\">valid: Boolean. True if the record exists in the system; otherwise false. </li>\n\n        <li class=\"li\">label: String. Answer record label.</li>\n\n        <li class=\"li\">value: String. Sys ID of the answer record.</li>\n\n        <li class=\"li\">table: String. Table containing the answer record. </li>\n\n       </ul>\n</li>\n\n        <li class=\"li\">decisionTable: String. Sys ID of the decision table from the Decision Tables\n         [sys_decision] table associated with the decision.</li>\n\n        <li class=\"li\">domain: String. Domain in which the decision is visible.</li>\n\n        <li class=\"li\">active: Boolean. True if the decision record is active; otherwise false.</li>\n\n        <li class=\"li\">id: String. Sys ID of the decision record from the Decision [sys_decision_question]\n         table.</li>\n\n        <li class=\"li\">label: String. Label for the decision record.</li>\n\n        <li class=\"li\">order: Number. Order in which the system evaluates decisions.</li>\n\n       </ul>\n</li>\n\n        <li class=\"li\">accessibleFrom: String. Scopes that have access to the record.</li>\n\n        <li class=\"li\">name: String. Internal name of the decision table record. </li>\n\n        <li class=\"li\">active: Boolean. True if the decision table record is active; otherwise false.</li>\n\n        <li class=\"li\">id: String. Sys ID of the decision table record.</li>\n\n        <li class=\"li\">label: String. Label of the decision table record.</li>\n\n        <li class=\"li\">answerTable: Object. Answer table associated with the decision table. <ul class=\"ul\" id=\"DecisionTableAPI-getDecisionTable_S__d83733e229\">\n          <li class=\"li\">displayValue: String. Display name of the table that contains answer records.</li>\n\n          <li class=\"li\">value: String. Internal name of the table that contains answer records.</li>\n\n         </ul>\n</li>\n\n       </ul>\n<p class=\"p\">Format: JSON</p>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "DecisionTableAPI-getInputs_S",
                        "short_description": "Returns the decision inputs from the Decision Inputs [sys_decision_input] table\n    associated with the passed in decision table.",
                        "description": "",
                        "name": "getInputs(String decisionID)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var dt = new sn_dt.DecisionTableAPI();\nvar response = dt.getInputs(\"3c4464a7b701230034d1da23ee11a993\");\ngs.info(JSON.stringify(response));\n",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "decisionID",
                                "type": "String",
                                "description": "<span class=\"ph\">Sys ID of the Decision Table record from the\n        Decision Tables [sys_decision] table.</span>"
                            }
                        ],
                        "return": {
                            "type": "Object",
                            "description": "Decision inputs from the Decision Inputs [sys_decision_input] table associated\n                with the decision table. You can find the inputs associated with a decision table\n                using the Decision Inputs related list in the Decision Tables [sys_decision] table.\n                Inputs contain these key-value pairs. <ul class=\"ul\" id=\"DecisionTableAPI-getInputs_S__ul_t5m_nfd_h3b\">\n        <li class=\"li\">searchField: String. Used for internal purposes.</li>\n\n        <li class=\"li\">defaultValue: String. Default value for the input. </li>\n\n        <li class=\"li\">show_ref_finder: Boolean. Used for internal purposes.</li>\n\n        <li class=\"li\">use_dependent: Boolean. Used for internal purposes.</li>\n\n        <li class=\"li\">type: String. Input data type.</li>\n\n        <li class=\"li\">mandatory: Boolean. True if the input is mandatory; otherwise false. </li>\n\n        <li class=\"li\">extended: Boolean. True if the input extends another field; otherwise false. </li>\n\n        <li class=\"li\">local: Boolean. Used for internal purposes.</li>\n\n        <li class=\"li\">sys_class_name: String. Used for internal purposes.</li>\n\n        <li class=\"li\">reference: String. Reference table used if the input type is reference. </li>\n\n        <li class=\"li\">dependent_on: String. Field that document ID and choice inputs depend on.</li>\n\n        <li class=\"li\">data_structure: String. Used for internal purposes.</li>\n\n        <li class=\"li\">readonly: Boolean. True if the input is read-only; otherwise false.</li>\n\n        <li class=\"li\">id: String. Sys ID of the input from the Decision Inputs [sys_decision_input]\n         table.</li>\n\n        <li class=\"li\">type_label: String. Input data type label. </li>\n\n        <li class=\"li\">table: String. Reference field table if the input type is reference.</li>\n\n        <li class=\"li\">order: Number. Order in which the system evaluates inputs.</li>\n\n        <li class=\"li\">ref_qual: String. Condition applied to the reference table. </li>\n\n        <li class=\"li\">reference_display: String. Used for internal purposes.</li>\n\n        <li class=\"li\">choiceOption: String. Method for users to see a list of suggested values.</li>\n\n        <li class=\"li\">label: String. Label of the input record.</li>\n\n        <li class=\"li\">hint: String. Hint text used to help users understand the input required. </li>\n\n        <li class=\"li\">name: String. Internal name of the input record. </li>\n\n        <li class=\"li\">attributes: Array. Field attributes that apply to the input record.</li>\n\n        <li class=\"li\">maxsize: Number. Maximum number of characters allowed in the field. </li>\n\n        <li class=\"li\">columnName: String. Name of the input.</li>\n\n       </ul>\n<p class=\"p\">Format: JSON</p>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "DecisionTableAPI-getQuestions_S",
                        "short_description": "Returns the decisions from the Decision [sys_decision_question] table associated with\n    the passed in decision table.",
                        "description": "",
                        "name": "getQuestions(String decisionID)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var dt = new sn_dt.DecisionTableAPI();\nvar response = dt.getQuestions(\"3c4464a7b701230034d1da23ee11a993\");\ngs.info(JSON.stringify(response));\n",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "decisionID",
                                "type": "String",
                                "description": "<span class=\"ph\">Sys ID of the Decision Table record from the\n        Decision Tables [sys_decision] table.</span>"
                            }
                        ],
                        "return": {
                            "type": "Object",
                            "description": "Decisions from the Decision [sys_decision_question] table associated with the\n                decision table. You can find the decisions associated with a decision table using\n                the Decisions related list in the Decision Tables [sys_decision] table. Decision\n                records contain these key-value pairs.<ul class=\"ul\" id=\"DecisionTableAPI-getQuestions_S__ul_dhg_wsd_h3b\">\n        <li class=\"li\">defaultAnswer: Boolean. True if this decision is the default for the decision table;\n         otherwise false.</li>\n\n        <li class=\"li\">condition: String. Conditions required to reach this decision. The fields available for\n         the condition are the decision inputs that are associated with this decision table.</li>\n\n        <li class=\"li\">answer: Object. Answer record associated with the decision. Answer objects contain these\n         key-value pairs.<ul class=\"ul\" id=\"DecisionTableAPI-getQuestions_S__ul_myc_2rd_h3b\">\n        <li class=\"li\">valid: Boolean. True if the record exists in the system; otherwise false. </li>\n\n        <li class=\"li\">label: String. Answer record label.</li>\n\n        <li class=\"li\">value: String. Sys ID of the answer record.</li>\n\n        <li class=\"li\">table: String. Table containing the answer record. </li>\n\n       </ul>\n</li>\n\n        <li class=\"li\">decisionTable: String. Sys ID of the decision table from the Decision Tables\n         [sys_decision] table associated with the decision.</li>\n\n        <li class=\"li\">domain: String. Domain in which the decision is visible.</li>\n\n        <li class=\"li\">active: Boolean. True if the decision record is active; otherwise false.</li>\n\n        <li class=\"li\">id: String. Sys ID of the decision record from the Decision [sys_decision_question]\n         table.</li>\n\n        <li class=\"li\">label: String. Label for the decision record.</li>\n\n        <li class=\"li\">order: Number. Order in which the system evaluates decisions.</li>\n\n       </ul>\n<p class=\"p\">Format: JSON</p>"
                        },
                        "extras": []
                    }
                ]
            }
        ]
    },
    {
        "identifier": "sn_dt_api-namespace",
        "namespace": "sn_dt_api",
        "classes": [
            {
                "description": "In addition, you can use this API to detect the language of a specific string and check\n      whether the <span class=\"keyword apiname\">getDetectedLanguage()</span> and <span class=\"keyword apiname\">getTranslation()</span>\n      methods are enabled for a translation service. Use this API to create a seamless localization\n      experience for your user interface, enabling one interface to service multiple countries.<br/><br/>Currently this API supports three translation\n                service providers: Microsoft Azure Translator Service, IBM Watson Translator\n                Service, and Google Cloud Translator Service. You can also configure other\n                translation services within your instance and then use the\n                  <span class=\"keyword apiname\">DynamicTranslation</span> API to translate your text.<br/><br/>When using these methods in a server-side script, use the <span class=\"keyword parmname\">sn_dt_api</span>\n      namespace identifier. Before you are able to use this API, you must activate the\n      DynamicTranslation plugin. For information on this plugin and additional information on\n      Dynamic Translation, refer to <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/dynamic-translation/concept/dynamic-translation-overview.html\" target=\"_blank\">Dynamic translation overview</a>.",
                "short_description": "<span class=\"ph\">The\n                  <span class=\"keyword apiname\">DynamicTranslation</span> API provides methods that translate text, in\n                real time, into multiple languages using translation service providers.</span>",
                "identifier": "DynamicTranslation",
                "name": "DynamicTranslation",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "DynTran-getDetectedLanguage_S_O",
                        "short_description": "Detects the language of the passed in text.",
                        "description": "<p>If you pass in a translator, the method uses that translation service to detect the\n                source language. Otherwise, the detection is performed by the default translation\n                service. Ensure that the text you provide contains enough verbiage to enable proper\n                language detection.</p><p>In addition to the detected language, the response\n                contains a confidence level of the detection, along with other possible language\n                alternatives. If a translator is not passed in, the method also returns the default\n                translation service used to detect the language.</p>",
                        "name": "getDetectedLanguage(String text, Object parms)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var detectedResponse = sn_dt_api.DynamicTranslation.getDetectedLanguage('Please detect the language of this text', {\"translator\":'IBM'});\n gs.info(JSON.stringify(detectedResponse));\n",
                                "description": "This example shows code in a server-side script that detects a string in English using\n        IBM's translation service."
                            },
                            {
                                "script": "var detectedResponse = sn_dt_api.DynamicTranslation.getDetectedLanguage('Please detect the language of this text', {\"translator\":123});\n gs.info(JSON.stringify(detectedResponse));\n",
                                "description": "This example shows a server script that throws an error when an invalid translation service\n        is passed in."
                            }
                        ],
                        "params": [
                            {
                                "name": "text",
                                "type": "String",
                                "description": "Text to use to detect the language."
                            },
                            {
                                "name": "parms",
                                "type": "Object",
                                "description": "Optional. JSON object that contains additional translation parameters."
                            },
                            {
                                "name": "parms.translator",
                                "type": "String",
                                "description": "Optional. Translation service to use to translate the\n              text (not case-sensitive).<p class=\"p\">Valid values:</p>\n<ul class=\"ul\" id=\"DynTran-getDetectedLanguage_S_O__d84012e337\">\n                <li class=\"li\">Google</li>\n\n                <li class=\"li\">IBM</li>\n\n                <li class=\"li\">Microsoft</li>\n\n                <li class=\"li\">&lt;custom&gt;</li>\n\n              </ul>\n<div class=\"note note\"><span class=\"notetitle\">Note:</span> To use custom translation services you must first configure the translation\n                service in your instance. For details, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/dynamic-translation/task/integrate-translation-service-provider.html\" target=\"_blank\">Integrate with a translation\n                  service provider</a>. </div>\n<p class=\"p\">Default: translation service configured in the\n                Translator Configuration [sn_dt_translator_configuration] table.</p>"
                            }
                        ],
                        "return": {
                            "type": "Error messages",
                            "description": "The following are error messages that the method may return and indications as\n                to the error's root cause. <ul class=\"ul\" id=\"DynTran-getDetectedLanguage_S_O__ul_ccq_ntm_b3b\">\n                  <li class=\"li\">\n                    <span class=\"ph\">Text (\"text\" field) is missing or invalid (40000): The text to\n                translate is either missing or not a String.</span>\n                  </li>\n\n                  <li class=\"li\"><span class=\"ph\">Dynamic Translation plugin is not installed\n                (40001): The <span class=\"keyword apiname\">Dynamic Translation</span> API was invoked without\n                activating the com.glide.dynamic_translation plugin. For information on activating\n                this plugin, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/dynamic-translation/concept/dynamic-translation-overview.html\" target=\"_blank\">Dynamic translation\n                  overview</a>.</span></li>\n\n                  <li class=\"li\"><span class=\"ph\">Default translator is not\n                configured (40002): No translation service is marked as the\n                  <span class=\"ph uicontrol\">Default</span> in Translator Configurations. For information on\n                creating/modifying a translator configuration, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/dynamic-translation/task/create-custom-translator.html\" target=\"_blank\">Create a translator\n                  configuration</a>.</span></li>\n\n                  <li class=\"li\"><span class=\"ph\">Translator (\"translator\" field) is invalid\n                (40003): The passed in <span class=\"keyword parmname\">translator</span> parameter is not a\n                String.</span></li>\n\n                  <li class=\"li\"><span class=\"ph\">&lt;translator&gt; translator is not\n                configured (40004): The specified translation service is not configured in\n                Translator Configurations. For information on creating/modifying a translator\n                configuration, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/dynamic-translation/task/create-custom-translator.html\" target=\"_blank\">Create a translator\n                  configuration</a>.</span></li>\n\n                  <li class=\"li\"><span class=\"ph\">&lt;translator&gt; translator is inactive (40005):\n                The specified translation service is not set to <span class=\"ph uicontrol\">Active</span> in\n                Translator Configurations. For information on creating/modifying a translator\n                configuration, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/dynamic-translation/task/create-custom-translator.html\" target=\"_blank\">Create a translator\n                  configuration</a>.</span></li>\n\n                  <li class=\"li\"><span class=\"ph\">Additional parameters are invalid (40006): Additional parameters passed are\n                not an Object.</span></li>\n\n                  <li class=\"li\">\n                    <span class=\"ph\">Maximum time limit has been exceeded (40009): Operation took\n                longer than the defined timeout value specified in Translation Configuration. </span>\n                    <span class=\"ph\">Default: 40 seconds</span>\n                  </li>\n\n                  <li class=\"li\"><span class=\"ph\">Unknown error occurred (40051): Default error thrown when the error doesnât\n                fall in to any other category. </span></li>\n\n                  <li class=\"li\">\n                    <span class=\"ph\">Request is not authorized because credentials are missing or not\n                valid (40055): The credentials configured for the translation service in Connections\n                &amp; Credentials are not valid. For information on connections and credentials, see\n                  <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/dynamic-translation/concept/dynamic-translation-overview.html\" target=\"_blank\">Dynamic translation\n                  overview</a>. </span>\n                  </li>\n\n                </ul>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "DynTran-getTranslation_S_O",
                        "short_description": "Translates the passed in text to one or more languages.",
                        "description": "<p>The method uses translation services, such as Microsoft Azure Translator Service\n                and IBM Watson Translator Service, to perform the translation. If you do not pass in\n                translation parameters, the method uses the system default.</p>",
                        "name": "getTranslation(String textToTranslate, Object parms)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "try {\n    gs.info(JSON.stringify(sn_dt_api.DynamicTranslation.getTranslation(\"Translate this text using platform from server\", {\n        \"targetLanguages\": [\"fr\", \"it\"],\n        \"additionalParameters\": [{\n            \"parameterName\": \"texttype\",\n            \"parameterValue\": \"plain\"\n        }],\n        \"translator\": \"Microsoft\"\n    })));\n} catch (error) {\n    gs.info(error.message);\n}\n",
                                "description": "This example shows a server script translating plain text from English (detected) into\n        French and Italian using Microsoft's translation service."
                            },
                            {
                                "script": "try {\n    gs.info(JSON.stringify(sn_dt_api.DynamicTranslation.getTranslation(\"Translate this text using platform from server\", {\n        \"targetLanguages\": [\"123\"],\n        \"additionalParameters\": [{\n            \"parameterName\": \"texttype\",\n            \"parameterValue\": \"plain\"\n        }],\n        \"translator\": \"Microsoft\"\n    })));\n} catch (error) {\n    gs.info(error.message);\n}",
                                "description": "This example shows a server script that throws an error when an invalid target language is\n        passed in."
                            }
                        ],
                        "params": [
                            {
                                "name": "textToTranslate",
                                "type": "String",
                                "description": "Text to translate."
                            },
                            {
                                "name": "parms",
                                "type": "Object",
                                "description": "Optional. JSON object that contains additional translation parameters."
                            },
                            {
                                "name": "parms.targetLanguages",
                                "type": "Array",
                                "description": "Optional. List of language codes to use to translate the text. The method\n                returns translated text for each language code.<p class=\"p\">Default: User preferred\n                  language.</p>"
                            },
                            {
                                "name": "parms.translator",
                                "type": "String",
                                "description": "Optional. Translation service to use to translate the\n              text (not case-sensitive).<p class=\"p\">Valid values:</p>\n<ul class=\"ul\" id=\"DynTran-getTranslation_S_O__d84012e337\">\n                <li class=\"li\">Google</li>\n\n                <li class=\"li\">IBM</li>\n\n                <li class=\"li\">Microsoft</li>\n\n                <li class=\"li\">&lt;custom&gt;</li>\n\n              </ul>\n<div class=\"note note\"><span class=\"notetitle\">Note:</span> To use custom translation services you must first configure the translation\n                service in your instance. For details, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/dynamic-translation/task/integrate-translation-service-provider.html\" target=\"_blank\">Integrate with a translation\n                  service provider</a>. </div>\n<p class=\"p\">Default: translation service configured in the\n                Translator Configuration [sn_dt_translator_configuration] table.</p>"
                            },
                            {
                                "name": "parms.sourceLanguage",
                                "type": "String",
                                "description": "Optional. Language code of the source text.<p class=\"p\">Default: Translation service\n                  detects the source language.</p>"
                            },
                            {
                                "name": "parms.additionalParameters",
                                "type": "Object",
                                "description": "Optional. Array of JSON objects. Each object contains key-value pairs that\n                provide additional information for performing the translation."
                            },
                            {
                                "name": "parms.additionalParameters[].parameterName",
                                "type": "String",
                                "description": "Key name.<p class=\"p\">Valid values:</p>\n<ul class=\"ul\" id=\"DynTran-getTranslation_S_O__ul_jhc_5nl_thb\">\n                  <li class=\"li\">textype: Type of text to translate. For Microsoft Azure Translation Service\n                    only. </li>\n\n                </ul>"
                            },
                            {
                                "name": "parms.additionalParameters[].parameterValue",
                                "type": "String",
                                "description": "Value of the associated key.<p class=\"p\">Valid values:</p>\n<ul class=\"ul\" id=\"DynTran-getTranslation_S_O__ul_jk3_hhb_xhb\">\n                  <li class=\"li\">plain: Standard text string</li>\n\n                  <li class=\"li\">html: HTML text string</li>\n\n                </ul>\n<p class=\"p\">Default: plain</p>"
                            }
                        ],
                        "return": {
                            "type": "Error messages",
                            "description": "The following are error messages that the method may return and indications as\n                to their root cause. <ul class=\"ul\" id=\"DynTran-getTranslation_S_O__ul_ccq_ntm_b3b\">\n                  <li class=\"li\">\n                    <span class=\"ph\">Text (\"text\" field) is missing or invalid (40000): The text to\n                translate is either missing or not a String.</span>\n                  </li>\n\n                  <li class=\"li\"><span class=\"ph\">Dynamic Translation plugin is not installed\n                (40001): The <span class=\"keyword apiname\">Dynamic Translation</span> API was invoked without\n                activating the com.glide.dynamic_translation plugin. For information on activating\n                this plugin, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/dynamic-translation/concept/dynamic-translation-overview.html\" target=\"_blank\">Dynamic translation\n                  overview</a>.</span></li>\n\n                  <li class=\"li\"><span class=\"ph\">Default translator is not\n                configured (40002): No translation service is marked as the\n                  <span class=\"ph uicontrol\">Default</span> in Translator Configurations. For information on\n                creating/modifying a translator configuration, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/dynamic-translation/task/create-custom-translator.html\" target=\"_blank\">Create a translator\n                  configuration</a>.</span></li>\n\n                  <li class=\"li\"><span class=\"ph\">Translator (\"translator\" field) is invalid\n                (40003): The passed in <span class=\"keyword parmname\">translator</span> parameter is not a\n                String.</span></li>\n\n                  <li class=\"li\"><span class=\"ph\">&lt;translator&gt; translator is not\n                configured (40004): The specified translation service is not configured in\n                Translator Configurations. For information on creating/modifying a translator\n                configuration, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/dynamic-translation/task/create-custom-translator.html\" target=\"_blank\">Create a translator\n                  configuration</a>.</span></li>\n\n                  <li class=\"li\"><span class=\"ph\">&lt;translator&gt; translator is inactive (40005):\n                The specified translation service is not set to <span class=\"ph uicontrol\">Active</span> in\n                Translator Configurations. For information on creating/modifying a translator\n                configuration, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/dynamic-translation/task/create-custom-translator.html\" target=\"_blank\">Create a translator\n                  configuration</a>.</span></li>\n\n                  <li class=\"li\"><span class=\"ph\">Additional parameters are invalid (40006): Additional parameters passed are\n                not an Object.</span></li>\n\n                  <li class=\"li\">\n                    <div class=\"p\">Target languages (\"targetLanguages\" field) are\n                invalid (40007): The <span class=\"keyword parmname\">targetLanguages</span> parameter is passed in the\n                call but is not valid for one of the following reasons: <ul class=\"ul\" id=\"DynTran-getTranslation_S_O__d84012e448\">\n                  <li class=\"li\">Value is not an array</li>\n\n                  <li class=\"li\">Array is empty</li>\n\n                  <li class=\"li\">One or multiple of the entries is not a string</li>\n\n                </ul>\n</div>\n\n                  </li>\n\n                  <li class=\"li\"><span class=\"ph\">Source language (\"sourceLanguage\" field) is\n                invalid (40008): The <span class=\"keyword parmname\">sourceLanguage</span> parameter is passed in the\n                call but the value is not a string.</span></li>\n\n                  <li class=\"li\">\n                    <span class=\"ph\">Maximum time limit has been exceeded (40009): Operation took\n                longer than the defined timeout value specified in Translation Configuration. </span>\n                    <span class=\"ph\">Default: 40 seconds</span>\n                  </li>\n\n                  <li class=\"li\"><span class=\"ph\">Unknown error occurred (40051): Default error thrown when the error doesnât\n                fall in to any other category. </span></li>\n\n                  <li class=\"li\"><span class=\"ph\">Text (\"text\" field) has exceeded its maximum length\n                (40052): The text passed in to translate exceeds the maximum length supported by the\n                corresponding translation service.</span></li>\n\n                  <li class=\"li\"><span class=\"ph\">Source language is invalid (40053): The passed in\n                  <span class=\"keyword parmname\">sourceLanguage</span> parameter contains a language code that is not\n                supported by the corresponding translation service.</span></li>\n\n                  <li class=\"li\"><span class=\"ph\">Target language is invalid (40054): One or more\n                of the language codes passed in the <span class=\"keyword parmname\">targetLanguages</span> parameter\n                is not supported by the corresponding translation service.</span></li>\n\n                  <li class=\"li\">\n                    <span class=\"ph\">Request is not authorized because credentials are missing or not\n                valid (40055): The credentials configured for the translation service in Connections\n                &amp; Credentials are not valid. For information on connections and credentials, see\n                  <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/dynamic-translation/concept/dynamic-translation-overview.html\" target=\"_blank\">Dynamic translation\n                  overview</a>. </span>\n                  </li>\n\n                  <li class=\"li\"><span class=\"ph\">Text cannot be translated to target languages (40056):\n                The specified translation service is not able to translate the passed in text into\n                the specified target languages.</span></li>\n\n                </ul>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "DynTran-isEnabled_S",
                        "short_description": "<span class=\"ph\">Determines whether the\n                  <span class=\"keyword apiname\">getDetectedLanguage()</span> and <span class=\"keyword apiname\">getTranslation()</span>\n                methods are enabled for a translation service.</span>",
                        "description": "<p>If you pass in a specific translation service, the API checks the method activation\n                for that translation service; otherwise the method checks the default translation\n                service.</p>",
                        "name": "isEnabled(String translator)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "IsIBMTranslatorEnabled : function() {\n  try {\n    var response = sn_dt_api.DynamicTranslation.isEnabled('ibm');\n     gs.info(JSON.stringify(response));\n} catch(error) {\ngs.info(error.message);\n}",
                                "description": "This example shows a server script that checks whether the\n          <span class=\"keyword apiname\">DynamicTranslation</span> methods are active."
                            },
                            {
                                "script": "IsIBMTranslatorEnabled : function() {\n  try {\n    var response = sn_dt_api.DynamicTranslation.isEnabled(123);\n     gs.info(JSON.stringify(response));\n} catch(error) {\ngs.info(error.message);\n}",
                                "description": "This example shows a server script that throws an error when an invalid translation service\n        is passed in."
                            }
                        ],
                        "params": [
                            {
                                "name": "translator",
                                "type": "String",
                                "description": "Optional. Translation service to verify whether the  methods are active.\n              Translation services are configured under the Translator Configuration\n                menu.<p class=\"p\">Possible values - not case-sensitive:</p>\n<ul class=\"ul\" id=\"DynTran-isEnabled_S__d84012e158\">\n                <li class=\"li\">Google</li>\n\n                <li class=\"li\">IBM</li>\n\n                <li class=\"li\">Microsoft</li>\n\n                <li class=\"li\">&lt;custom&gt;</li>\n\n              </ul>\n<div class=\"note note\"><span class=\"notetitle\">Note:</span> To use custom translation services you must first configure the translation\n                service in your instance. For details, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-platform-administration/page/administer/dynamic-translation/task/integrate-translation-service-provider.html\" target=\"_blank\">Integrate with a translation\n                  service provider</a>. </div>"
                            }
                        ],
                        "return": {
                            "type": "Error messages",
                            "description": "The following are error messages that the API may return and indications as to\n                their root cause.<ul class=\"ul\" id=\"DynTran-isEnabled_S__ul_wp4_sfm_d3b\">\n                  <li class=\"li\"><span class=\"ph\">Translator (\"translator\" field) is invalid\n                (40003): The passed in <span class=\"keyword parmname\">translator</span> parameter is not a\n                String.</span></li>\n\n                </ul>"
                        },
                        "extras": []
                    }
                ]
            }
        ]
    },
    {
        "identifier": "sn_fd-namespace",
        "namespace": "sn_fd",
        "classes": [
            {
                "description": "This API is deprecated and replaced by the <a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/sn_fd-namespace/ScriptableFlowAPI\" title=\"Use FlowAPI methods to execute actions, flows, or subflows in server-side scripts using either blocking or non-blocking methods.\">FlowAPI -\n        Scoped, Global</a> and  <a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/sn_fd-namespace/ScriptableFlowRunnerScopedAPI\" title=\"Create a builder object used to define parameters for flow, subflow, and action execution. You can specify a flow to execute in a particular domain. Start the flow, subflow, or action execution directly from the builder and view the results in a ScriptableFlowRunnerResult object.\">ScriptableFlowRunner - Scoped</a> APIs.<br/><br/>The <span class=\"keyword apiname\">Flow</span> API can only be used in server scripts.<br/><br/>Use the <span class=\"keyword parmname\">sn_fd</span> namespace to access the Flow API.<br/><br/>Before interacting with a flow using the <span class=\"keyword apiname\">Flow</span> API, you must first create\n      and activate the flow in the <span class=\"ph\">Flow Designer</span> interface. Because the\n        <span class=\"keyword apiname\">Flow</span> API only interacts with pre-built flows, there is no constructor for\n      the class.<br/><br/><div class=\"note note\"><span class=\"notetitle\">Note:</span> To optimize instance performance, avoid calling these methods from a script for an\n        asynchronous business rule. Instead, create a scheduled job record within the <span class=\"ph\">Flow Designer</span> UI.</div>",
                "short_description": "Runs activated <span class=\"ph\">Flow Designer</span> flows.",
                "identifier": "FlowScopedAPI",
                "name": "Flow",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "FlowScoped-startAsync_S_GR",
                        "short_description": "Ignores the trigger and runs an activated flow asynchronously.",
                        "description": "<p>Asynchronous calls are non-blocking, allowing the client to execute other code in the\n        script without having to wait for the flow to complete.</p>",
                        "name": "startAsync(String scopeName.flowName, Map flowInputs)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "//Example 1: Run a flow with a record-based trigger\n(function startFlowAsync() {\n\n\ttry {\n\t\t// You MUST fetch the GlideRecord that will be passed to the flow\n\t\tvar glideRecordInput = new GlideRecord('sys_user');\n\t\tglideRecordInput.get('62826bf03710200044e0bfc8bcbe5df1');\n\n\t\tvar flowInputs = {};\n\t\tflowInputs['current'] = glideRecordInput;\n\t\tflowInputs['table_name'] = glideRecordInput.getTableName();\n\n\t\tvar result = sn_fd.Flow.startAsync('global.recordtriggeredflow', flowInputs);\n\n\t\t//The Sys ID of a flow execution (contextId)\n\t\tvar contextId = result.contextId;\n\n\t} catch (ex) {\n\t\tvar message = ex.getMessage();\n\t\tgs.error(message);\n\t}\n\n})();\n\n//Example 2: Run a flow with a schedule-based trigger\n(function startFlowAsync() {\n\n\ttry {\n\t\tvar result = sn_fd.Flow.startAsync('global.scheduletriggeredflow');\n\n\t\t//The Sys ID of a flow execution (contextId)\n\t\tvar contextId = result.contextId;\n\n\t} catch (ex) {\n\t\tvar message = ex.getMessage();\n\t\tgs.error(message);\n\t}\n\n})();\n\n//Example 3: Run a flow with a Service Catalog trigger\n(function startFlowAsync() {\n\n\ttry {\n\t\t// You MUST fetch the GlideRecord that will be passed to the flow\n\t\tvar glideRecordInput = new GlideRecord('sc_req_item');\n\t\tglideRecordInput.get(aeed229047801200e0ef563dbb9a71c2);\n\n\t\tvar flowInputs = {};\n\t\tflowInputs['request_item'] = glideRecordInput;\n\t\tflowInputs['table_name'] = glideRecordInput.getTableName();\n\n\t\tvar result = sn_fd.Flow.startAsync('global.catalogtriggeredflow', flowInputs);\n\n\t\t//The Sys ID of a flow execution (contextId)\n\t\tvar contextId = result.contextId;\n\n\t} catch (ex) {\n\t\tvar message = ex.getMessage();\n\t\tgs.error(message);\n\t}\n\n})();\n\n//Example 4: Run a flow with a MetricBase trigger\n(function startMetricBaseFlowAsync() {\n\n\ttry {\n\n\t\tvar oilLevelTriggerRecord = new GlideRecord('oil_levels');\n\t\toilLevelTriggerRecord.get('a4b3622bc72113007b237f48cb97635f');\n\n\t\tvar metricTriggerDefinition = new GlideRecord('sys_metric_trigger_definition');\n\t\tmetricTriggerDefinition.get('21f2eae7c72113007b237f48cb976352');\n\n\t\tvar event_time = oilLevelTriggerRecord.getValue('sys_created_on');\n\t\tvar level = 4;\n\n\t\tvar metricBaseFlowInputs = {};\n\t\t//The record that triggered the metric event\n\t\tmetricBaseFlowInputs['current'] = oilLevelTriggerRecord;\n\t\t//The MetricBase Trigger Definition record\n\t\tmetricBaseFlowInputs['metric'] = metricTriggerDefinition;\n\t\t//The time that the 'record' reached a specific metric event level and triggered this flow\n\t\tmetricBaseFlowInputs['event_time'] = event_time;\n\t\t//The target event level to reach in order for a metric flow to trigger\n\t\tmetricBaseFlowInputs['level'] = level;\n\n\t\tvar result = sn_fd.Flow.startAsync('global.metricbasedtriggeredflow', metricBaseFlowInputs);\n\n\t\t//The Sys ID of a flow execution (contextId)\n\t\tvar contextId = result.contextId;\n\n\t} catch (ex) {\n\t\tvar message = ex.getMessage();\n\t\tgs.error(message);\n\t}\n\n})();",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "scopeName.flowName",
                                "type": "String",
                                "description": "The application scope for the flow and the internal name of the flow to run. If\n                scopeName is not included, the scope of the user currently logged in is used.\n                Retrieve the internal name of the flow using the <span class=\"ph uicontrol\">Internal\n                  name</span> column on the <span class=\"ph\">Flow Designer</span> landing\n                page."
                            },
                            {
                                "name": "flowInputs",
                                "type": "Map",
                                "description": "Name-value pairs in <samp class=\"ph codeph\">&lt;String, Object&gt;</samp> format that define\n                record-based flow inputs.<div class=\"p\">To call a flow with a record-based trigger, use the\n                  format:<pre class=\"pre codeblock\">var flowInputs = {};\nflowInputs['current'] = glideRecord;\nflowInputs['table_name'] = glideRecord.getTableName();</pre>\n</div>\n<p class=\"p\">The\n                  GlideRecord object must be named 'current'.</p>\n<div class=\"p\">To call a flow with a <span class=\"ph\">Service Catalog</span>\n                  trigger, use the\n                  format:<pre class=\"pre codeblock\">var flowInputs = {};\nflowInputs['request_item'] = glideRecord;\nflowInputs['table_name'] = glideRecord.getTableName();</pre>\n</div>\n<p class=\"p\">The\n                  GlideRecord object must be named 'request_item'.</p>"
                            }
                        ],
                        "return": {
                            "type": "Object",
                            "description": "PlanResponse object containing the following properties: <ul class=\"ul\" id=\"FlowScoped-startAsync_S_GR__ul_bd2_k2v_ncb\">\n                  <li class=\"li\">contextId: sys_id of the execution details record for the executed flow.\n                    Access the execution details by navigating to the Flow Executions tab in <span class=\"ph\">Flow Designer</span> and\n                    filtering by sys_id. </li>\n\n                </ul>\n<div class=\"p\">An exception occurs when the flow:<ul class=\"ul\" id=\"FlowScoped-startAsync_S_GR__ul_ub3_n3t_pcb\">\n                    <li class=\"li\">Does not exist within the specified application scope, or the flow or scope\n                      name has been misspelled. </li>\n\n                    <li class=\"li\">Is not activated.</li>\n\n                    <li class=\"li\">Exceeds the recursion limit set by the\n                        <span class=\"keyword parmname\">com.glide.hub.flow_engine.indirect_recursion_limit</span>\n                      system property. The default value is three. </li>\n\n                  </ul>\n</div>"
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "Access <span class=\"keyword apiname\">FlowAPI</span> methods in global and scoped scripts using the\n        <samp class=\"ph codeph\">sn_fd.FlowAPI</samp> object. Create calls to your flows using the <span class=\"ph uicontrol\">Code\n        Snippet</span> action in Flow Designer, or use the methods detailed here to update\n      scripts manually.<br/><br/><div class=\"note note\"><span class=\"notetitle\">Note:</span> <span class=\"ph\">In domain separated instances, flows, subflows, and\n        actions triggered by this API run in the domain of the user who started the script. For\n        example, if a user in the Acme domain starts a script that triggers a flow, the flow runs in\n        the Acme domain and can only access Acme data, even if the flow runs as the System User.\n       </span></div><br/><br/><div class=\"note note\"><span class=\"notetitle\">Note:</span> To optimize instance performance, avoid calling these methods from a script for an\n        asynchronous business rule. Instead, create a scheduled job record within the <span class=\"ph\">Flow Designer</span> UI.</div>",
                "short_description": "Use <span class=\"keyword apiname\">FlowAPI</span> methods to execute actions, flows, or subflows in\n    server-side scripts using either blocking or non-blocking methods.",
                "identifier": "ScriptableFlowAPI",
                "name": "FlowAPI - Scoped, Global",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "FlowAPI-cancel_S_S",
                        "short_description": "Cancels a paused or running flow, subflow, or action.",
                        "description": "",
                        "name": "cancel(String contextId, String reason)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "(function() { \n\nvar now_GR = new GlideRecord('incident'); \nnow_GR.addQuery('number', 'INC0000050'); \nnow_GR.query(); \nnow_GR.next(); \n\n      try { \n          var inputs = {}; \n          inputs['current'] = gr; // GlideRecord of table: \n          inputs['table_name'] = 'incident'; \n\n          // Starts the flow asynchronously.\n          var contextId = sn_fd.FlowAPI.startFlow('global.myFlow', inputs); \n\n      } catch (ex) { \n          var message = ex.getMessage(); \n          gs.error(message); \n      } \n})();\n\n \n// Call the cancel() method using the context Id returned from the startFlow() method\nsn_fd.FlowAPI.cancel(contextId, 'Flow took too long to execute.');",
                                "description": "This example uses the return value of the <span class=\"keyword apiname\">startFlow()</span> method to cancel\n        any long-running flows."
                            },
                            {
                                "script": "var now_GR = new GlideRecord(\"sys_flow_context\");\nnow_GR.addQuery(\"name\", \"Test Flow\");\nnow_GR.query();\n\nwhile (now_GR.next()) {\n  sn_fd.FlowAPI.cancel(now_GR.getUniqueValue(), 'Canceling Test Flows');\n} ",
                                "description": "This example cancels any flows named Test Flow."
                            }
                        ],
                        "params": [
                            {
                                "name": "contextId",
                                "type": "String",
                                "description": "Sys_id of the execution details record for the flow, subflow, or action. Access\n                the execution details by navigating to the Flow Executions tab in <span class=\"ph\">Flow Designer</span>, or pass the sys_id of the context record returned by the\n                  <span class=\"keyword apiname\">startFlow()</span>, <span class=\"keyword apiname\">startSubflow()</span>, or\n                  <span class=\"keyword apiname\">startAction()</span> methods."
                            },
                            {
                                "name": "reason",
                                "type": "String",
                                "description": "Optional. Reason for canceling the flow, subflow, or action. Appears in the\n                  <span class=\"ph uicontrol\">Message</span> field of the Flow engine log entries [sys_flow_log]\n                table."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "ScriptableFlow-executeAction",
                        "short_description": "Run an action from a server-side script synchronously.",
                        "description": "<p>Execute an action from within a business rule, script include, or any other server-side\n        script. Actions run using this method run synchronously, so the method has access to outputs\n        created by the action. Use <span class=\"ph uicontrol\">startAction</span> to run an action\n            asynchronously.<div class=\"note note\"><span class=\"notetitle\">Note:</span> <span class=\"ph\">This API is replaced by <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=ScriptableFlowRunnerScopedAPI&amp;v=paris\" target=\"_blank\">ScriptableFlowRunner</a>,\n                which deprecates the existing methods used to build objects and execute <span class=\"ph\">Flow Designer</span> flows and actions. Use the <span class=\"keyword apiname\">getRunner()</span>\n                method in the <span class=\"keyword apiname\">FlowAPI</span> class to return a ScriptableFlowRunner\n                object and use the associated methods. Use the\n                  <span class=\"keyword apiname\">ScriptableFlowRunner</span> methods if you need to support domain\n                separation.</span></div>\n<div class=\"note note\"><span class=\"notetitle\">Note:</span> <span class=\"ph\">This method runs the action as the user who initiates\n          the session.</span></div></p>",
                        "name": "executeAction(String name, Map inputs, Number timeout)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "\n(function() {\n\t\n\ttry {\n\t\tvar inputs = {};\n\t\tinputs['name'] = ; // String \n\t\tinputs['password2'] = ; // Password (2 Way Encrypted) \n\t\t\n\t\t// Execute Synchronously: Run in foreground. Code snippet has access to outputs.\n\t\t// var timeout = ; //timeout in ms\n              //sn_fd.FlowAPI.executeAction('global.actionforpassword2test', inputs, timeout)\n              var outputs = sn_fd.FlowAPI.executeAction('global.actionforpassword2test', inputs);\n\n\t\t// Get Outputs:\n\t\t// Note: outputs can only be retrieved when executing synchronously.\n\t\tvar output = outputs['output']; // Password (2 Way Encrypted)\n\t\t\n\t} catch (ex) {\n\t\tvar message = ex.getMessage();\n\t\tgs.error(message);\n\t}\t\n})();",
                                "description": "In this example, the script uses <span class=\"keyword apiname\">sn_fd.FlowAPI.executeAction</span> to execute\n        an action called actionforpassword2test in the global scope. A variable called inputs\n        contains the inputs for the action. In this case, a name and password. The outputs for the\n        action are stored in the outputs variable, which in this case, is an encrypted password\n        object. The code is wrapped in a try/catch statement to capture any errors that might occur\n        when the flow executes."
                            }
                        ],
                        "params": [
                            {
                                "name": "name",
                                "type": "String",
                                "description": "The scope and name of the action to be executed, for example\n                  <samp class=\"ph codeph\">global.action_name</samp>."
                            },
                            {
                                "name": "inputs",
                                "type": "Map",
                                "description": "Name-value pairs that define action inputs. Use the input name, not the input\n                label."
                            },
                            {
                                "name": "timeout",
                                "type": "Number",
                                "description": "<span class=\"ph\">Optional. Timeout in milliseconds. This value overrides the 30\n        second default timeout specified by the\n         <span class=\"keyword parmname\">com.glide.hub.flow_api.default_execution_time</span> system property. After\n        the timeout expires, an exception is thrown.</span>"
                            }
                        ],
                        "return": {
                            "type": "Object",
                            "description": "The action outputs."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "FlowAPI-executeActionQuick_S_O_N",
                        "short_description": "Run an action from a server-side script synchronously from the current user session\n    without creating execution details or other related records. Improve performance by eliminating\n    record-keeping overhead. <span class=\"ph\">Use this API to increase the speed of high-volume processing, for\n                example multiple executions per second, in a production environment.</span>",
                        "description": "<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> <span class=\"ph\">This API is replaced by <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=ScriptableFlowRunnerScopedAPI&amp;v=paris\" target=\"_blank\">ScriptableFlowRunner</a>,\n                which deprecates the existing methods used to build objects and execute <span class=\"ph\">Flow Designer</span> flows and actions. Use the <span class=\"keyword apiname\">getRunner()</span>\n                method in the <span class=\"keyword apiname\">FlowAPI</span> class to return a ScriptableFlowRunner\n                object and use the associated methods. Use the\n                  <span class=\"keyword apiname\">ScriptableFlowRunner</span> methods if you need to support domain\n                separation.</span></div>\n\n        <div class=\"note note\"><span class=\"notetitle\">Note:</span> Execution details and context records are not created, regardless of\n         <span class=\"ph\">Flow Designer</span> settings.</div></p>",
                        "name": "executeActionQuick(String name, Map inputs, Number timeout)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "(function() {\n  try {\n\n    var grIncident = new GlideRecord('incident');\n    grIncident.get('57af7aec73d423002728660c4cf6a71c');\n\n    var inputs = {};\n    inputs['variable'] = grIncident;\n\n    var outputs = sn_fd.FlowAPI.executeActionQuick('global.update_record_test', inputs);\n\n    // Get Outputs:\n    // Note: outputs can only be retrieved when executing synchronously.\n    var output1 = outputs['output1']; \n\n  } catch (ex) { \n    var message = ex.getMessage();\n    gs.error(message);\n    }\n\t\n})();",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "name",
                                "type": "String",
                                "description": "Scope and internal name of the action to execute. For example,\n                  <samp class=\"ph codeph\">global.action_name</samp>. Locate the <span class=\"ph uicontrol\">Internal\n                  name</span> field in the list of <span class=\"ph\">Flow Designer</span>\n                actions."
                            },
                            {
                                "name": "inputs",
                                "type": "Map",
                                "description": "Name-value pairs that define action inputs. You can find the available action\n                inputs and required data types under Inputs in the action outline. Use the input\n                name, not the input label. For example,\n                  <samp class=\"ph codeph\">{'table':'incident','sys_id':'a39d8e3cf0212300964feeefe80ff0ed'}</samp>."
                            },
                            {
                                "name": "timeout",
                                "type": "Number",
                                "description": "<p class=\"p\"><span class=\"ph\">Optional. Timeout in milliseconds. This value overrides the 30\n        second default timeout specified by the\n         <span class=\"keyword parmname\">com.glide.hub.flow_api.default_execution_time</span> system property. After\n        the timeout expires, an exception is thrown.</span></p>"
                            }
                        ],
                        "return": {
                            "type": "Object",
                            "description": "Object containing outputs defined by the action. You can find the outputs for\n                the action under <span class=\"ph uicontrol\">Outputs</span> in the action outline."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "FlowAPI-executeDataStream_S_O",
                        "short_description": "Runs a Data Stream action synchronously from a server-side script and returns a\n    ScriptableDataStream object.",
                        "description": "<p>For more information about Data Stream actions, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-servicenow-platform/page/administer/integrationhub/concept/data-stream-actions.html\" target=\"_blank\">Data Stream actions and\n          pagination</a>.</p><p><div class=\"note note\"><span class=\"notetitle\">Note:</span> <span class=\"ph\">This API is replaced by <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=ScriptableFlowRunnerScopedAPI&amp;v=paris\" target=\"_blank\">ScriptableFlowRunner</a>,\n                which deprecates the existing methods used to build objects and execute <span class=\"ph\">Flow Designer</span> flows and actions. Use the <span class=\"keyword apiname\">getRunner()</span>\n                method in the <span class=\"keyword apiname\">FlowAPI</span> class to return a ScriptableFlowRunner\n                object and use the associated methods. Use the\n                  <span class=\"keyword apiname\">ScriptableFlowRunner</span> methods if you need to support domain\n                separation.</span></div>\n\n        <div class=\"note note\"><span class=\"notetitle\">Note:</span> <span class=\"ph\">Always wrap data stream logic in a\n                  <samp class=\"ph codeph\">try/catch</samp> block to catch errors. Always include a\n                  <samp class=\"ph codeph\">finally</samp> statement that ends with the <span class=\"keyword apiname\">close()</span>\n                method from the <span class=\"keyword apiname\">ScriptableDataStream</span> class to close the data\n                stream and prevent performance issues.</span></div></p>",
                        "name": "executeDataStreamAction(String name, Map inputs, Number timeout)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "(function() {\n\t\n\ttry {\n\n\t\t// Execute Data Stream Action. \n\t\tvar stream = sn_fd.FlowAPI.executeDataStreamAction('x_my_scope.data_stream_name');\n\n\t\t// Process each item in the data stream\n\t\twhile (stream.hasNext()) {\n\n\t\t\t// Get a single item from the data stream.\n\t\t\tvar item = stream.next();\n\n\t\t\t// Use the item. \n\t\t\tvar now_GR = new GlideRecord('incident');\n\t\t\tnow_GR.setValue('number',item.id);\n\t\t\tnow_GR.setValue('short_description',item.name);\n\t\t\tnow_GR.insert();\n\t\t\n\t\t\t// By default, this code snippet will terminate after 10 items.\n\t\t\t// Remove or modify this limit after testing your code.\n\t\t\tif (stream.getItemIndex() &gt;= 9) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\t\t\n\t} catch (ex) {\n\t\tvar message = ex.getMessage();\n\t\tgs.error(message);\n\t} finally {\n\t\tstream.close();\n\t}\n\t\n})();",
                                "description": "This example creates an incident record for each item returned in the data stream."
                            }
                        ],
                        "params": [
                            {
                                "name": "name",
                                "type": "String",
                                "description": "The scope and name of the Data Stream action to execute. For example,\n                  <samp class=\"ph codeph\">global.data_stream_action_name</samp>."
                            },
                            {
                                "name": "inputs",
                                "type": "Map",
                                "description": "Name-value pairs that define action inputs. Use the input name, not the input\n                label. If the action does not have any inputs, do not include this\n                parameter."
                            },
                            {
                                "name": "timeout",
                                "type": "Number",
                                "description": "Optional. Amount of time before the action times out. After the timeout\n                expires, an exception is thrown. The timeout only applies to the\n                  <span class=\"keyword apiname\">executeDataStreamAction</span> method, not to methods in the\n                  <span class=\"keyword apiname\">ScriptableDataStream</span> class.<p class=\"p\">Default: 30000, specified by the\n                    <span class=\"keyword parmname\">com.glide.hub.flow_api.default_execution_time</span> system\n                  property</p>\n<p class=\"p\">Unit: Milliseconds</p>"
                            }
                        ],
                        "return": {
                            "type": "ScriptableDataStream",
                            "description": "An object used to iterate through items in the data stream. Use the methods in\n                the <span class=\"keyword apiname\">ScriptableDataStream</span> class to interact with this object. See\n                  <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=ScriptableDataStreamAPI&amp;v=paris\" target=\"_blank\">ScriptableDataStream\n                  API</a>."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "ScriptableFlow-executeFlow",
                        "short_description": "Run a flow from a server-side script synchronously.",
                        "description": "<p>Execute a flow from within a business rule, script include, or any other server-side\n        script. Flows run using this method run synchronously. Use <span class=\"ph uicontrol\">startFlow</span>\n        to run a flow asynchronously.<div class=\"note note\"><span class=\"notetitle\">Note:</span> <span class=\"ph\">This API is replaced by <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=ScriptableFlowRunnerScopedAPI&amp;v=paris\" target=\"_blank\">ScriptableFlowRunner</a>,\n                which deprecates the existing methods used to build objects and execute <span class=\"ph\">Flow Designer</span> flows and actions. Use the <span class=\"keyword apiname\">getRunner()</span>\n                method in the <span class=\"keyword apiname\">FlowAPI</span> class to return a ScriptableFlowRunner\n                object and use the associated methods. Use the\n                  <span class=\"keyword apiname\">ScriptableFlowRunner</span> methods if you need to support domain\n                separation.</span></div>\n<div class=\"note note\"><span class=\"notetitle\">Note:</span> <span class=\"ph\">This method runs the flow as the user specified in flow\n          properties.</span></div></p>",
                        "name": "executeFlow(String name, Map inputs, Number timeout)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "\n(function() {\n\ttry {\n\t\tvar inputs = {};\n\t\tinputs['current'] = ; // GlideRecord of table:  \n\t\tinputs['table_name'] = 'incident';\n\n              // Execute Synchronously: Run in foreground.\n              // var timeout = ; //timeout in ms\n              //sn_fd.FlowAPI.executeFlow('global.test_flow', inputs, timeout)\n              sn_fd.FlowAPI.executeFlow('global.test_flow', inputs);\n\t} catch (ex) {\n\t\tvar message = ex.getMessage();\n\t\tgs.error(message);\n\t}\n})();",
                                "description": "This example uses sn_fd.FlowAPI.executeFlow to execute a global flow called test_flow. This\n        flow is normally triggered when a record on the incident table is updated. Because you are\n        activating the flow from a script, you must provide this information. The code creates an\n        inputs variable that contains the current record, and the table for the record. The code is\n        wrapped in a try/catch statement to capture any errors that might occur when the flow\n        executes."
                            }
                        ],
                        "params": [
                            {
                                "name": "name",
                                "type": "String",
                                "description": "The scope and name of the flow to be executed, for example\n                  <samp class=\"ph codeph\">global.flow_name</samp>."
                            },
                            {
                                "name": "inputs",
                                "type": "Map",
                                "description": "Name-value pairs that define trigger inputs. Use the input name, not the input\n                label."
                            },
                            {
                                "name": "timeout",
                                "type": "Number",
                                "description": "<span class=\"ph\">Optional. Timeout in milliseconds. This value overrides the 30\n        second default timeout specified by the\n         <span class=\"keyword parmname\">com.glide.hub.flow_api.default_execution_time</span> system property. After\n        the timeout expires, an exception is thrown.</span>"
                            }
                        ],
                        "return": {
                            "type": "Exception",
                            "description": "The API throws an exception when a flow called synchronously pauses.\n                    <samp class=\"ph codeph\">The current execution is in the waiting state</samp>. In most cases,\n                  the exception is removed when the flow resumes. However, the API cannot resume a\n                  flow that has been sent to a MID Server."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "FlowAPI-executeFlowQuick_S_O_N",
                        "short_description": "<span class=\"ph\">Runs a flow, subflow, or action from a\n                    server-side script synchronously or asynchronously without creating execution\n                    details or other related records. Improves performance by eliminating\n                    record-keeping overhead.</span>\n    <span class=\"ph\">Use this API to increase the speed of high-volume processing, for\n                example multiple executions per second, in a production environment.</span>",
                        "description": "<p>This method runs the flow as the user who initiates the session. Setting the flow to run as\n        the system user, or impersonating a user, is not supported. Flows <span class=\"ph\">that include wait conditions, for instance the\n        Wait for a duration of time flow logic or Ask For Approval action, are not\n       supported.</span><div class=\"note note\"><span class=\"notetitle\">Note:</span> <span class=\"ph\">This API is replaced by <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=ScriptableFlowRunnerScopedAPI&amp;v=paris\" target=\"_blank\">ScriptableFlowRunner</a>,\n                which deprecates the existing methods used to build objects and execute <span class=\"ph\">Flow Designer</span> flows and actions. Use the <span class=\"keyword apiname\">getRunner()</span>\n                method in the <span class=\"keyword apiname\">FlowAPI</span> class to return a ScriptableFlowRunner\n                object and use the associated methods. Use the\n                  <span class=\"keyword apiname\">ScriptableFlowRunner</span> methods if you need to support domain\n                separation.</span></div>\n<div class=\"note note\"><span class=\"notetitle\">Note:</span> Execution details and context records are not created, regardless of\n         <span class=\"ph\">Flow Designer</span> settings.</div></p>",
                        "name": "executeFlowQuick(String name, Map inputs, Number timeout)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "(function() {\n\t\n  try {\n    var grIncident = new GlideRecord('incident');\n    grIncident.get('ed92e8d173d023002728660c4cf6a7bc');\n\n    var inputs = {};\n    inputs['current'] = grIncident;\n    inputs['table_name'] = 'incident';\n\t\t\n    sn_fd.FlowAPI.executeFlowQuick('global.test_quick_flow', inputs);\n\t\t\n  } catch (ex) {\n    var message = ex.getMessage();\n    gs.error(message);\n\t}\n\t\n})();",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "name",
                                "type": "String",
                                "description": "Scope and internal name of the flow to execute. For example,\n                  <samp class=\"ph codeph\">global.flow_name</samp>. Locate the <span class=\"ph uicontrol\">Internal name</span>\n                field in the list of <span class=\"ph\">Flow Designer</span>\n                flows."
                            },
                            {
                                "name": "inputs",
                                "type": "Map",
                                "description": "Name-value pairs that define trigger inputs. You can find the available trigger\n                inputs and required data types in the Trigger section of the flow. Use the input\n                name, not the input label. For example,\n                  <samp class=\"ph codeph\">{'table':'incident','sys_id':'a39d8e3cf0212300964feeefe80ff0ed'}</samp>."
                            },
                            {
                                "name": "timeout",
                                "type": "Number",
                                "description": "<span class=\"ph\">Optional. Timeout in milliseconds. This value overrides the 30\n        second default timeout specified by the\n         <span class=\"keyword parmname\">com.glide.hub.flow_api.default_execution_time</span> system property. After\n        the timeout expires, an exception is thrown.</span>"
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "ScriptableFlow-executeSubflow",
                        "short_description": "Run an subflow from a server-side script synchronously.",
                        "description": "<p>Execute a subflow from within a business rule, script include, or any other server-side\n        script. Subflows run using this method run synchronously. Use\n          <span class=\"ph uicontrol\">startSubflow</span> to run an subflow asynchronously.<div class=\"note note\"><span class=\"notetitle\">Note:</span> <span class=\"ph\">This API is replaced by <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=ScriptableFlowRunnerScopedAPI&amp;v=paris\" target=\"_blank\">ScriptableFlowRunner</a>,\n                which deprecates the existing methods used to build objects and execute <span class=\"ph\">Flow Designer</span> flows and actions. Use the <span class=\"keyword apiname\">getRunner()</span>\n                method in the <span class=\"keyword apiname\">FlowAPI</span> class to return a ScriptableFlowRunner\n                object and use the associated methods. Use the\n                  <span class=\"keyword apiname\">ScriptableFlowRunner</span> methods if you need to support domain\n                separation.</span></div>\n<div class=\"note note\"><span class=\"notetitle\">Note:</span> <span class=\"ph\">This method runs the flow as the user specified in flow\n          properties.</span></div></p>",
                        "name": "executeSubflow(String name, Map inputs, Number timeout)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "\n(function() {\n\t\n\ttry {\n\t\tvar inputs = {};\n\t\tinputs['name'] = ; // String \n\t\tinputs['password2'] = ; // Password (2 Way Encrypted) \n\t\t\n\t\t// Execute Synchronously: Run in foreground.\n\t\t// var timeout = ; //timeout in ms\n              //sn_fd.FlowAPI.executeSubflow('global.subflowTest', inputs, timeout)\n              var outputs = sn_fd.FlowAPI.executeSubflow('global.subflowTest', inputs);\n\t\t\n\t} catch (ex) {\n\t\tvar message = ex.getMessage();\n\t\tgs.error(message);\n\t}\t\n})();",
                                "description": "In this example, the script uses sn_fd.FlowAPI.executeSubflow to execute an subflow called\n        subflowTest in the global scope. A variable called inputs contains the inputs for the\n        subflow. In this case, a name and password. The code is wrapped in a try/catch statement to\n        capture any errors that might occur when the flow executes."
                            }
                        ],
                        "params": [
                            {
                                "name": "name",
                                "type": "String",
                                "description": "The scope and name of the subflow to be executed, for example\n                  <samp class=\"ph codeph\">global.subflow_name</samp>."
                            },
                            {
                                "name": "inputs",
                                "type": "Map",
                                "description": "Name-value pairs that define subflow inputs. Use the input name, not the input\n                label."
                            },
                            {
                                "name": "timeout",
                                "type": "Number",
                                "description": "<span class=\"ph\">Optional. Timeout in milliseconds. This value overrides the 30\n        second default timeout specified by the\n         <span class=\"keyword parmname\">com.glide.hub.flow_api.default_execution_time</span> system property. After\n        the timeout expires, an exception is thrown.</span>"
                            }
                        ],
                        "return": {
                            "type": "Exception",
                            "description": "The API throws an exception when a flow called synchronously pauses.\n                    <samp class=\"ph codeph\">The current execution is in the waiting state</samp>. In most cases,\n                  the exception is removed when the flow resumes. However, the API cannot resume a\n                  flow that has been sent to a MID Server."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "FlowAPI-executeSubflowQuick_S_O_N",
                        "short_description": "Run a subflow from a server-side script synchronously from the current user session\n    without creating execution details or other related records. Improve performance by eliminating\n    record-keeping overhead. <span class=\"ph\">Use this API to increase the speed of high-volume processing, for\n                example multiple executions per second, in a production environment.</span>",
                        "description": "<p>This method runs the subflow as the user who initiates the session. Setting the subflow to\n        run as the System User, or impersonating a user, is not applied. Subflows <span class=\"ph\">that include wait conditions, for instance the\n        Wait for a duration of time flow logic or Ask For Approval action, are not\n       supported.</span><div class=\"note note\"><span class=\"notetitle\">Note:</span> <span class=\"ph\">This API is replaced by <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=ScriptableFlowRunnerScopedAPI&amp;v=paris\" target=\"_blank\">ScriptableFlowRunner</a>,\n                which deprecates the existing methods used to build objects and execute <span class=\"ph\">Flow Designer</span> flows and actions. Use the <span class=\"keyword apiname\">getRunner()</span>\n                method in the <span class=\"keyword apiname\">FlowAPI</span> class to return a ScriptableFlowRunner\n                object and use the associated methods. Use the\n                  <span class=\"keyword apiname\">ScriptableFlowRunner</span> methods if you need to support domain\n                separation.</span></div>\n<div class=\"note note\"><span class=\"notetitle\">Note:</span> Execution details and context records are not created, regardless of\n         <span class=\"ph\">Flow Designer</span> settings.</div></p>",
                        "name": "executeSubflowQuick(String name, Map inputs, Number timeout)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "(function() {\n\n  try {\n    var grIncident = new GlideRecord('incident');\n    grIncident.get('57af7aec73d423002728660c4cf6a71c');\n\n    var inputs = {};\n    inputs['variable'] = grIncident;\n\n    var outputs = sn_fd.FlowAPI.executeSubflowQuick('global.test_quick_run_subflow', inputs);\n\n    // Get Outputs:\n    // Note: outputs can only be retrieved when executing synchronously.\n    var output1 = outputs['output1']; \n\t\t\n  } catch (ex) {\n    var message = ex.getMessage();\n    gs.error(message);\n    }\n\t\n})();",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "name",
                                "type": "String",
                                "description": "Scope and internal name of the subflow to execute. For example,\n                  <samp class=\"ph codeph\">global.subflow_name</samp>. Locate the <span class=\"ph uicontrol\">Internal\n                  name</span> field in the list of <span class=\"ph\">Flow Designer</span>\n                subflows."
                            },
                            {
                                "name": "inputs",
                                "type": "Map",
                                "description": "Name-value pairs that define subflow inputs. You can find the available subflow\n                inputs and required data types under Inputs in the subflow. Use the input name, not\n                the input label. For example,\n                  <samp class=\"ph codeph\">{'table':'incident','sys_id':'a39d8e3cf0212300964feeefe80ff0ed'}</samp>."
                            },
                            {
                                "name": "timeout",
                                "type": "Number",
                                "description": "<span class=\"ph\">Optional. Timeout in milliseconds. This value overrides the 30\n        second default timeout specified by the\n         <span class=\"keyword parmname\">com.glide.hub.flow_api.default_execution_time</span> system property. After\n        the timeout expires, an exception is thrown.</span>"
                            }
                        ],
                        "return": {
                            "type": "Object",
                            "description": "Object containing outputs defined by the subflow. You can find the outputs for\n                the subflow under <span class=\"ph uicontrol\">Subflow Inputs &amp; Outputs</span> in the subflow\n                outline."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "FlowAPI-getOutputs_S",
                        "short_description": "Returns the outputs of a completed action or subflow.",
                        "description": "<p>You can use the return values from either the\n          <span class=\"keyword apiname\">startAction()</span>\n          or<span class=\"keyword apiname\">startSubflow()</span>\n        methods as the contextId parameter.<div class=\"note note\"><span class=\"notetitle\">Note:</span> <span class=\"ph\">This API is replaced by <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=ScriptableFlowRunnerScopedAPI&amp;v=paris\" target=\"_blank\">ScriptableFlowRunner</a>,\n                which deprecates the existing methods used to build objects and execute <span class=\"ph\">Flow Designer</span> flows and actions. Use the <span class=\"keyword apiname\">getRunner()</span>\n                method in the <span class=\"keyword apiname\">FlowAPI</span> class to return a ScriptableFlowRunner\n                object and use the associated methods. Use the\n                  <span class=\"keyword apiname\">ScriptableFlowRunner</span> methods if you need to support domain\n                separation.</span></div></p>",
                        "name": "getOutputs(String contextId)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "(function() {\n\n\ttry {\n\t\t// Gather inputs to call flow\n\t\tvar inputs = {};\n\t\tinputs['ah_task'] = myTaskRecord; // GlideRecord of table: task\n\t\tinputs['ah_comment'] ='Test Comment' ; // String\n\n\t\t// Call flow\n\t\tvar contextId = sn_fd.FlowAPI.startSubflow('global.test_subflow', inputs);\n\n\t\t// Wait for the flow to finish running\n\n\t\t// Get flow outputs\n\t\tvar outputs = sn_fd.FlowAPI.getOutputs(contextId);\n\t\tvar output1 = outputs['output1'];\n\t\treturn output1;\n\n\t} catch (ex) {\n\t\tvar message = ex.getMessage();\n\t\tgs.error(message);\n\t}\n})();\n",
                                "description": "This example starts a global subflow called test_subflow, waits for the flow to finish, and\n        then gets its output values. Normally, a single script does not both run a flow and then get\n        its output values. Since a flow may not complete before the <span class=\"keyword apiname\">getOutputs()</span>\n        call, this example uses a wait time. Typically, either another script or <span class=\"ph\">Flow Designer</span> would have already run the flow. The code is wrapped in a\n        try/catch statement to capture any errors that might occur when the flow executes."
                            }
                        ],
                        "params": [
                            {
                                "name": "contextId",
                                "type": "String",
                                "description": "The sys_id of the action or subflow whose outputs you want to get."
                            }
                        ],
                        "return": {
                            "type": "Object",
                            "description": "Object containing the action or subflow outputs."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "FlowAPI-getRunner",
                        "short_description": "Returns a <span class=\"keyword apiname\">ScriptableFlowRunner</span> builder object for a flow or action\n    that you want to run.",
                        "description": "",
                        "name": "getRunner()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "\n(function() {\n  try {\n\n    var inputs = {}; \n\n    inputs['sys_id'] = '57af7aec73d423002728660c4cf6a71c';  // Pass the recordâs sys_id in as input.  \n\n    var result = sn_fd.FlowAPI.getRunner()  // Create a ScriptableFlowRunner builder object.\n      .action('global.markapproved')        // Run the global scope action named markapproved.\n      .inForeground()\n      .inDomain('TOP/ACME')                 // Run the action from the TOP/ACME domain.                               \n      .withInputs(inputs)\n      .run();                               // Run the action and return a FlowRunnerResult object.\n\n    var contextId = result.getContextId();  // Retrieve the context ID from the result\n    var dateRun = result.getDate();\n    var domainUsed = result.getDomainId();  // Retrieve the Domain ID from the result.\n    var flowName = result.getFlowObjectName();\n    var flowObjectType = result.getFlowObjectType();\n\n    var outputs = result.getOutputs();            // Retrieve any outputs from the action execution.\n    var newApprovalStatus = outputs['approval'];  // Echo back the approval status for verification.\n\t\t\n  } catch (ex) {\n    var message = ex.getMessage();\n    gs.error(message);\n  }\n\t\n})();\n   ",
                                "description": "This example runs a flow synchronously."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "<a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/sn_fd-namespace/ScriptableFlowRunnerScopedAPI\" title=\"Create a builder object used to define parameters for flow, subflow, and action execution. You can specify a flow to execute in a particular domain. Start the flow, subflow, or action execution directly from the builder and view the results in a ScriptableFlowRunnerResult object.\">ScriptableFlowRunner</a>",
                            "description": "Builder object used to run a <span class=\"ph\">Flow Designer</span> action, flow, or\n                  subflow."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "FlowAPI-hasApprovals_S",
                        "short_description": "Checks if a flow within a give scope contains any Ask for Approval actions.",
                        "description": "<p>The <span class=\"keyword apiname\">hasApprovals()</span> method determines if a flow within a given scope\n        contains any Ask for Approval actions. This method also checks if any Ask for Approval\n        actions within the flow are nested under If flow logic blocks. For more information, see\n          <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-servicenow-platform/page/administer/flow-designer/reference/ask-approval-flow-designer.html\" target=\"_blank\">Ask for Approval action</a>.</p>",
                        "name": "hasApprovals(String scopedFlowName)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "(function() {\n\t\n  try {\n    var result = sn_fd.FlowAPI.hasApprovals('global.example_flow');\n    gs.log('Result: ' + result);\n  }\n\n  catch (ex) {\n    var message = ex.getMessage();\n    gs.error(message);\n  }\n})();",
                                "description": "The following example checks if the <span class=\"keyword apiname\">example_flow</span> flow within the\n          <span class=\"keyword apiname\">global</span> scope contains any Ask for Approval actions and logs the result."
                            }
                        ],
                        "params": [
                            {
                                "name": "scopedFlowName",
                                "type": "String",
                                "description": "Scope and internal name of the flow to execute. For example,\n                  <samp class=\"ph codeph\">global.flow_name</samp>. Locate the <span class=\"ph uicontrol\">Internal name</span>\n                field in the list of <span class=\"ph\">Flow Designer</span> flows."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "Returns one of the following values:<ul class=\"ul\" id=\"FlowAPI-hasApprovals_S__ul_fx1_fdf_vlb\">\n                  <li class=\"li\">\"ALWAYS\" - The flow contains an Ask for Approval action that isn't nested\n                    within a conditional If flow logic block.</li>\n\n                  <li class=\"li\">\"CONDITIONALLY\" - The flow contains an Ask for Approval action that is nested\n                    within a conditional If flow logic block.</li>\n\n                  <li class=\"li\">\"NO\" - The flow doesn't contain any Ask for Approval actions.</li>\n\n                  <li class=\"li\">\"UNKNOWN\" - There was a compiler error, and the system can't determine whether\n                    the flow contains any Ask for Approval actions.</li>\n\n                </ul>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "ScriptableFlow-glideActionUtil-setEncryptedOutput",
                        "short_description": "Build password2 values inside a script step.",
                        "description": "<p>Identify an encrypted password2 value returned from a GlideRecord, enabling the system to\n        display the value as a masked password rather than an encrypted string.</p>",
                        "name": "setEncryptedOutput(String password)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "\n(function execute(inputs, outputs) {\n\t// ...code...\n\tvar now_GR = new GlideRecord('sys_user');\n\tnow_GR.addQuery('first_name' , 'Abel');\n\tnow_GR.query();\n\tnow_GR.next();\n\tvar pwVal = now_GR.getValue('pw2');\n\toutputs['usedSetEncrypted'] = sn_fd.GlideActionUtil.setEncryptedOutput(pwVal);\n\toutputs['justSetDirectly'] = pwVal;\n})(inputs, outputs);",
                                "description": "This example returns value of a password2 field from a user record and stores in in a\n        variable. This variable is passed into the setEncryptedOutput method, which is called using\n        sn_fd.GlideActionUtil.setEncryptedOutput. The instance recognises the returned value as a\n        password."
                            }
                        ],
                        "params": [
                            {
                                "name": "password",
                                "type": "String",
                                "description": "Encrypted password2 value."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "Encrypted password2 value, recognised by the engine as a password\n                value."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "ScriptableFlow-startAction",
                        "short_description": "Run an action from a server-side script asynchronously.",
                        "description": "<p>Execute an action from within a business rule, script include, or any other server-side\n        script. Actions run using this method run asynchronously, so scripts using this method do\n        not have access to any outputs created by the action. Use\n          <span class=\"ph uicontrol\">executeAction</span> to run an action synchronously and access the outputs\n        it generates.<div class=\"note note\"><span class=\"notetitle\">Note:</span> <span class=\"ph\">This API is replaced by <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=ScriptableFlowRunnerScopedAPI&amp;v=paris\" target=\"_blank\">ScriptableFlowRunner</a>,\n                which deprecates the existing methods used to build objects and execute <span class=\"ph\">Flow Designer</span> flows and actions. Use the <span class=\"keyword apiname\">getRunner()</span>\n                method in the <span class=\"keyword apiname\">FlowAPI</span> class to return a ScriptableFlowRunner\n                object and use the associated methods. Use the\n                  <span class=\"keyword apiname\">ScriptableFlowRunner</span> methods if you need to support domain\n                separation.</span></div>\n<div class=\"note note\"><span class=\"notetitle\">Note:</span> <span class=\"ph\">This method runs the action as the user who initiates\n          the session.</span></div></p>",
                        "name": "startAction(String name, Map inputs)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "\n(function() {\n\ttry {\n\t\tvar inputs = {};\n\t\tinputs['ah_task'] = myTaskRecord; // GlideRecord of table: task \n\t\tinputs['ah_comment'] ='Test Comment' ; // String \n\n\t\tvar contextId = sn_fd.FlowAPI.startAction('sn_itsm_spoke.add_comment', inputs);\t\n\t\t\t\n\t} catch (ex) {\n\t\tvar message = ex.getMessage();\n\t\tgs.error(message);\n\t}\n})();",
                                "description": "This example uses sn_fd.FlowAPI.startAction to execute an action called add_comment in the\n        sn_itsm_spoke scope. The inputs object contains a target record and a comment to add to that\n        record. The code is wrapped in a try/catch statement to capture any errors that might occur\n        when the flow executes."
                            }
                        ],
                        "params": [
                            {
                                "name": "name",
                                "type": "String",
                                "description": "The scope and name of the action to be executed, for example\n                  <samp class=\"ph codeph\">global.action_name</samp>."
                            },
                            {
                                "name": "inputs",
                                "type": "Map",
                                "description": "Name-value pairs that define action inputs. Use the input name, not the input\n                label."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "Sys Id of the context record for the action. Access the context record by\n                navigating to the Flow Executions tab in <span class=\"ph\">Flow Designer</span>, selecting a\n                flow execution, and clicking <span class=\"ph uicontrol\">Open Context Record</span>."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "FlowAPI-startActionQuick_S_O",
                        "short_description": "Run an action from a server-side script asynchronously without creating execution\n    details or other related records. Improve performance by eliminating record-keeping overhead.\n      <span class=\"ph\">Use this API to increase the speed of high-volume processing, for\n                example multiple executions per second, in a production environment.</span>",
                        "description": "<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> <span class=\"ph\">This API is replaced by <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=ScriptableFlowRunnerScopedAPI&amp;v=paris\" target=\"_blank\">ScriptableFlowRunner</a>,\n                which deprecates the existing methods used to build objects and execute <span class=\"ph\">Flow Designer</span> flows and actions. Use the <span class=\"keyword apiname\">getRunner()</span>\n                method in the <span class=\"keyword apiname\">FlowAPI</span> class to return a ScriptableFlowRunner\n                object and use the associated methods. Use the\n                  <span class=\"keyword apiname\">ScriptableFlowRunner</span> methods if you need to support domain\n                separation.</span></div>\n\n        <div class=\"note note\"><span class=\"notetitle\">Note:</span> Execution details and context records are not created, regardless of\n         <span class=\"ph\">Flow Designer</span> settings.</div></p>",
                        "name": "startActionQuick(String name, Map inputs)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "(function() {\n\t\n  try {\n    var grIncident = new GlideRecord('incident');\n    grIncident.get('57af7aec73d423002728660c4cf6a71c');\n\n    var inputs = {};\n    inputs['variable'] = grIncident;\n\n    sn_fd.FlowAPI.startActionQuick('global.update_record_test', inputs);\n\n  } catch (ex) {\n    var message = ex.getMessage();\n    gs.error(message);\n    }\n\t\n})();",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "name",
                                "type": "String",
                                "description": "Scope and internal name of the action to execute. For example,\n                  <samp class=\"ph codeph\">global.action_name</samp>. Locate the <span class=\"ph uicontrol\">Internal\n                  name</span> field in the list of <span class=\"ph\">Flow Designer</span>\n                actions."
                            },
                            {
                                "name": "inputs",
                                "type": "Map",
                                "description": "Name-value pairs that define action inputs. You can find the available action\n                inputs and required data types under Inputs in the action outline. Use the input\n                name, not the input label. For example,\n                  <samp class=\"ph codeph\">{'table':'incident','sys_id':'a39d8e3cf0212300964feeefe80ff0ed'}</samp>."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "ScriptableFlow-startFlow",
                        "short_description": "Run a flow from a server-side script.",
                        "description": "<p>Execute a flow from within a business rule, script include, or any other server-side\n        script. Flows executed with this method run asynchronously.<div class=\"note note\"><span class=\"notetitle\">Note:</span> <span class=\"ph\">This API is replaced by <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=ScriptableFlowRunnerScopedAPI&amp;v=paris\" target=\"_blank\">ScriptableFlowRunner</a>,\n                which deprecates the existing methods used to build objects and execute <span class=\"ph\">Flow Designer</span> flows and actions. Use the <span class=\"keyword apiname\">getRunner()</span>\n                method in the <span class=\"keyword apiname\">FlowAPI</span> class to return a ScriptableFlowRunner\n                object and use the associated methods. Use the\n                  <span class=\"keyword apiname\">ScriptableFlowRunner</span> methods if you need to support domain\n                separation.</span></div>\n<div class=\"note note\"><span class=\"notetitle\">Note:</span> <span class=\"ph\">This method runs the flow as the user specified in flow\n          properties.</span></div></p>",
                        "name": "startFlow(String name, Map inputs)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "\n(function() {\n\nvar now_GR = new GlideRecord('incident'); \nnow_GR.addQuery('number', 'INC0009009'); \nnow_GR.query(); \nnow_GR.next();\n\n    try {\n        var inputs = {};\n        inputs['current'] = gr; // GlideRecord of table: Incident\n        inputs['table_name'] = 'incident';\n\n        var contextId = sn_fd.FlowAPI.startFlow('global.test_flow', inputs);\t\n\t\n    } catch (ex) {\n        var message = ex.getMessage();\n        gs.error(message);  \n    }\n})();",
                                "description": "This example uses sn_fd.FlowAPI.startFlow to execute a global flow called test_flow. The\n        code creates an inputs variable that contains inputs required by the flow. In this case, the\n        current record and the table for the record. The code is wrapped in a try/catch statement to\n        capture any errors that might occur when the flow executes."
                            }
                        ],
                        "params": [
                            {
                                "name": "name",
                                "type": "String",
                                "description": "The scope and name of the flow to be executed, for example\n                  <samp class=\"ph codeph\">global.flow_name</samp>."
                            },
                            {
                                "name": "inputs",
                                "type": "Map",
                                "description": "Name-value pairs that define trigger inputs. Use the input name, not the input\n                label."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "Sys Id of the context record for the flow. Access the context record by\n                navigating to the Flow Executions tab in <span class=\"ph\">Flow Designer</span>, selecting a\n                flow execution, and clicking <span class=\"ph uicontrol\">Open Context Record</span>."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "FlowAPI-startFlowQuick_S_O_N",
                        "short_description": "Run a flow from a server-side script asynchronously without creating execution details\n    or other related records. Improve performance by eliminating record-keeping overhead. <span class=\"ph\">Use this API to increase the speed of high-volume processing, for\n                example multiple executions per second, in a production environment.</span>",
                        "description": "<p>This method runs the flow as the System User. Setting the flow to run as the user who\n        initiates the session, or impersonating a user, is not applied. Flows <span class=\"ph\">that include wait conditions, for instance the\n        Wait for a duration of time flow logic or Ask For Approval action, are not\n       supported.</span><div class=\"note note\"><span class=\"notetitle\">Note:</span> <span class=\"ph\">This API is replaced by <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=ScriptableFlowRunnerScopedAPI&amp;v=paris\" target=\"_blank\">ScriptableFlowRunner</a>,\n                which deprecates the existing methods used to build objects and execute <span class=\"ph\">Flow Designer</span> flows and actions. Use the <span class=\"keyword apiname\">getRunner()</span>\n                method in the <span class=\"keyword apiname\">FlowAPI</span> class to return a ScriptableFlowRunner\n                object and use the associated methods. Use the\n                  <span class=\"keyword apiname\">ScriptableFlowRunner</span> methods if you need to support domain\n                separation.</span></div>\n<div class=\"note note\"><span class=\"notetitle\">Note:</span> Execution details and context records are not created, regardless of\n         <span class=\"ph\">Flow Designer</span> settings.</div></p>",
                        "name": "startFlowQuick(String name, Map inputs)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "(function() {\n\t\n  try {\n    var grIncident = new GlideRecord('incident');\n    grIncident.get('ed92e8d173d023002728660c4cf6a7bc');\n\n    var inputs = {};\n    inputs['current'] = grIncident;\n    inputs['table_name'] = 'incident';\n\t\t\n    sn_fd.FlowAPI.startFlowQuick('global.test_quick_flow', inputs);\n\t\t\n  } catch (ex) {\n    var message = ex.getMessage();\n    gs.error(message);\n\t}\n\t\n})();",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "name",
                                "type": "String",
                                "description": "Scope and internal name of the flow to execute. For example,\n                  <samp class=\"ph codeph\">global.flow_name</samp>. Locate the <span class=\"ph uicontrol\">Internal name</span>\n                field in the list of <span class=\"ph\">Flow Designer</span>\n                flows."
                            },
                            {
                                "name": "inputs",
                                "type": "Map",
                                "description": "Name-value pairs that define trigger inputs. You can find the available trigger\n                inputs and required data types in the Trigger section of the flow. Use the input\n                name, not the input label. For example,\n                  <samp class=\"ph codeph\">{'table':'incident','sys_id':'a39d8e3cf0212300964feeefe80ff0ed'}</samp>."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "ScriptableFlow-startSubFlow",
                        "short_description": "Run a subflow from a server-side script.",
                        "description": "<p>Execute a subflow from within a business rule, script include, or any other server-side\n        script. Subflows run using this method run asynchronously Scripts that include this method\n        do not have access to outputs created by the flow. Use <span class=\"ph uicontrol\">executeSubflow</span>\n        to run a subflow synchronously and access the outputs it generates.<div class=\"note note\"><span class=\"notetitle\">Note:</span> <span class=\"ph\">This API is replaced by <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=ScriptableFlowRunnerScopedAPI&amp;v=paris\" target=\"_blank\">ScriptableFlowRunner</a>,\n                which deprecates the existing methods used to build objects and execute <span class=\"ph\">Flow Designer</span> flows and actions. Use the <span class=\"keyword apiname\">getRunner()</span>\n                method in the <span class=\"keyword apiname\">FlowAPI</span> class to return a ScriptableFlowRunner\n                object and use the associated methods. Use the\n                  <span class=\"keyword apiname\">ScriptableFlowRunner</span> methods if you need to support domain\n                separation.</span></div>\n<div class=\"note note\"><span class=\"notetitle\">Note:</span> <span class=\"ph\">This method runs the flow as the user specified in flow\n          properties.</span></div></p>",
                        "name": "startSubflow(String name, Map input)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "(function() {\n\ttry {\n\t\tvar inputs = {};\n\t\tinputs['ah_task'] = myTaskRecord; // GlideRecord of table: task \n\t\tinputs['ah_comment'] ='Test Comment' ; // String \n\n\t\tvar contextId = sn_fd.FlowAPI.startSubflow('global.test_subflow', inputs);\n\n\t} catch (ex) {\n\t\tvar message = ex.getMessage();\n\t\tgs.error(message);\n\t}\n\t\n})();",
                                "description": "This example uses sn_fd.FlowAPI.startSubflow to execute a global flow called test_subflow.\n        The code is wrapped in a try/catch statement to capture any errors that might occur when the\n        flow executes."
                            }
                        ],
                        "params": [
                            {
                                "name": "name",
                                "type": "String",
                                "description": "The scope and name of the subflow to be executed, for example\n                  <samp class=\"ph codeph\">global.subflow_name</samp>."
                            },
                            {
                                "name": "inputs",
                                "type": "Map",
                                "description": "Name-value pairs that define subflow inputs. Use the input name, not the input\n                label."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "Sys Id of the context record for the subflow. Access the context record by\n                navigating to the Flow Executions tab in <span class=\"ph\">Flow Designer</span>, selecting a\n                flow execution, and clicking <span class=\"ph uicontrol\">Open Context Record</span>."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "FlowAPI-startSubflowQuick_S_O",
                        "short_description": "Run a subflow from a server-side script asynchronously without creating execution\n    details or other related records. Improve performance by eliminating record-keeping overhead.\n      <span class=\"ph\">Use this API to increase the speed of high-volume processing, for\n                example multiple executions per second, in a production environment.</span>",
                        "description": "<p>This method runs the subflow as the System User. Setting the subflow to run as the user who\n        initiates the session, or impersonating a user, is not applied. Subflows <span class=\"ph\">that include wait conditions, for instance the\n        Wait for a duration of time flow logic or Ask For Approval action, are not\n       supported.</span><div class=\"note note\"><span class=\"notetitle\">Note:</span> <span class=\"ph\">This API is replaced by <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=ScriptableFlowRunnerScopedAPI&amp;v=paris\" target=\"_blank\">ScriptableFlowRunner</a>,\n                which deprecates the existing methods used to build objects and execute <span class=\"ph\">Flow Designer</span> flows and actions. Use the <span class=\"keyword apiname\">getRunner()</span>\n                method in the <span class=\"keyword apiname\">FlowAPI</span> class to return a ScriptableFlowRunner\n                object and use the associated methods. Use the\n                  <span class=\"keyword apiname\">ScriptableFlowRunner</span> methods if you need to support domain\n                separation.</span></div>\n<div class=\"note note\"><span class=\"notetitle\">Note:</span> Execution details and context records are not created, regardless of\n         <span class=\"ph\">Flow Designer</span> settings.</div></p>",
                        "name": "startSubflowQuick(String name, Map inputs)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "(function() {\n\n  try {\n    var grIncident = new GlideRecord('incident');\n    grIncident.get('57af7aec73d423002728660c4cf6a71c');\n\n    var inputs = {};\n    inputs['variable'] = grIncident;\n\n    sn_fd.FlowAPI.startSubflowQuick('global.test_quick_run_subflow', inputs);\n\n  } catch (ex) {\n    var message = ex.getMessage();  \n    gs.error(message);\n    }\n\t\n})();",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "name",
                                "type": "String",
                                "description": "Scope and internal name of the subflow to execute. For example,\n                  <samp class=\"ph codeph\">global.subflow_name</samp>. Locate the <span class=\"ph uicontrol\">Internal\n                  name</span> field in the list of <span class=\"ph\">Flow Designer</span>\n                subflows."
                            },
                            {
                                "name": "inputs",
                                "type": "Map",
                                "description": "Name-value pairs that define subflow inputs. You can find the available subflow\n                inputs and required data types under Inputs in the subflow. Use the input name, not\n                the input label. For example,\n                  <samp class=\"ph codeph\">{'table':'incident','sys_id':'a39d8e3cf0212300964feeefe80ff0ed'}</samp>."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "This class can only be used in a server-side script after retrieving a ScriptableDataStream\n      object using one of these APIs:<br/><br/><ul class=\"ul\" id=\"ScriptableDataStreamAPI__ul_wnh_sfv_ylb\">\n        <li class=\"li\">The <span class=\"keyword apiname\">executeDataStreamAction()</span> method in the\n            <span class=\"keyword apiname\">FlowAPI</span> class. See <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=ScriptableFlowAPI&amp;v=paris\" target=\"_blank\">FlowAPI</a>.</li>\n\n        <li class=\"li\">The <span class=\"keyword apiname\">getDataStream()</span> method in the\n            <span class=\"keyword apiname\">ScriptableFlowRunnerResult</span> class. See <a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/sn_fd-namespace/ScriptableFlowRunnerResultScopedAPI\" title=\"Captures the result of using ScriptableFlowRunner to execute a flow, subflow, or action. Includes data such as the context ID, domain, and any outputs from the flow execution.\">ScriptableFlowRunnerResult</a>.</li>\n\n      </ul><br/><br/>After retrieving a ScriptableDataStream object, call the methods in this specific order:<br/><br/><ol class=\"ol\" id=\"ScriptableDataStreamAPI__ol_k1k_yp1_3jb\">\n        <li class=\"li\">Use the <span class=\"keyword apiname\">hasNext()</span> method to determine whether there are more items in\n          the data stream.</li>\n\n        <li class=\"li\">Use the <span class=\"keyword apiname\">next()</span> method to access the next item in the stream.</li>\n\n        <li class=\"li\">Use the <span class=\"keyword apiname\">getItemIndex()</span>, <span class=\"keyword apiname\">getItemInPageIndex()</span>, and\n            <span class=\"keyword apiname\">getPageIndex()</span> methods to get information from the stream.</li>\n\n        <li class=\"li\">Use the <span class=\"keyword apiname\">close()</span> method to close the stream. </li>\n\n      </ol><br/><br/><div class=\"note note\"><span class=\"notetitle\">Note:</span> <span class=\"ph\">Always wrap data stream logic in a\n                  <samp class=\"ph codeph\">try/catch</samp> block to catch errors. Always include a\n                  <samp class=\"ph codeph\">finally</samp> statement that ends with the <span class=\"keyword apiname\">close()</span>\n                method from the <span class=\"keyword apiname\">ScriptableDataStream</span> class to close the data\n                stream and prevent performance issues.</span></div>",
                "short_description": "Provides methods to interact with a stream of data.",
                "identifier": "ScriptableDataStreamAPI",
                "name": "ScriptableDataStream - Scoped, Global",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "ScriptableDS-close",
                        "short_description": "Closes the connection to a data stream. Always call this method after performing any\n    desired operations on a data stream.",
                        "description": "<p><span class=\"ph\">You can only call this method on a\n                ScriptableDataStream object returned from the\n                  <span class=\"keyword apiname\">executeDataStreamAction()</span> method in the FlowAPI class. See\n                  <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=ScriptableFlowAPI&amp;v=paris\" target=\"_blank\">FlowAPI</a>.</span></p>",
                        "name": "close()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "(function() {\n\t\n\ttry {\nâ\n\t\t// Execute Data Stream Action. \n\t\tvar stream = sn_fd.FlowAPI.executeDataStreamAction('x_snc_my_scope.data_stream_name');\nâ\n\t\t// Process each item in the data stream\n\t\twhile (stream.hasNext()) {\nâ\n\t\t\t// Get a single item from the data stream.\n\t\t\tvar user = stream.next();\n\t\t\n\t\t\t// Only log the first item in each page\n\t\t\tif (stream.getItemInPageIndex() == 0) {\n\t\t\t\tgs.info('first user on page is ' + user.name);\n\t\t\t}\n\t\t}\t\t\n\t} catch (ex) {\n\t\tvar message = ex.getMessage();\n\t\tgs.error(message);\n\t} finally {\n\t\tstream.close();\n\t}\n\t\n})();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "ScriptableDS-getItemIndex",
                        "short_description": "Returns the current index of an item in a data stream.",
                        "description": "<p><span class=\"ph\">You can only call this method on a\n                ScriptableDataStream object returned from the\n                  <span class=\"keyword apiname\">executeDataStreamAction()</span> method in the FlowAPI class. See\n                  <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=ScriptableFlowAPI&amp;v=paris\" target=\"_blank\">FlowAPI</a>.</span></p>",
                        "name": "getItemIndex()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "(function() {\n\t\n\ttry {\n\n\t\t// Execute Data Stream Action. \n\t\tvar stream = sn_fd.FlowAPI.executeDataStreamAction('x_my_scope.data_stream_name');\n\n\t\t// Process each item in the data stream\n\t\twhile (stream.hasNext()) {\n\n\t\t\t// Get a single item from the data stream.\n\t\t\tvar User = stream.next();\n\n\t\t\t// Use the item. Example:\n\t\t\t// var now_GR = new GlideRecord(&lt;table_name&gt;);\n\t\t\t// now_GR.&lt;field_name&gt; = User.&lt;field_name&gt;;\n\t\t\t// now_GR.insert();\n\t\t\n\t\t\t// By default, this code snippet will terminate after 10 items.\n\t\t\t// Remove or modify this limit after your code has been tested.\n\t\t\tif (stream.getItemIndex() &gt;= 9) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\t\t\n\t} catch (ex) {\n\t\tvar message = ex.getMessage();\n\t\tgs.error(message);\n\t} finally {\n\t\tstream.close();\n\t}\n\t\n})();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Number",
                            "description": "Current index of an item in a data stream using zero-based indexing."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "ScriptableDS-getItemInPageIndex",
                        "short_description": "Returns the current index of an item within the current page in a data\n    stream.",
                        "description": "<p><span class=\"ph\">You can only call this method on a\n                ScriptableDataStream object returned from the\n                  <span class=\"keyword apiname\">executeDataStreamAction()</span> method in the FlowAPI class. See\n                  <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=ScriptableFlowAPI&amp;v=paris\" target=\"_blank\">FlowAPI</a>.</span></p>",
                        "name": "getItemInPageIndex()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "(function() {\n\t\n\ttry {\nâ\n\t\t// Execute Data Stream Action. \n\t\tvar stream = sn_fd.FlowAPI.executeDataStreamAction('x_snc_my_scope.data_stream_name');\nâ\n\t\t// Process each item in the data stream\n\t\twhile (stream.hasNext()) {\nâ\n\t\t\t// Get a single item from the data stream.\n\t\t\tvar user = stream.next();\n\t\t\n\t\t\t// Only log the first item in each page\n\t\t\tif (stream.getItemInPageIndex() == 0) {\n\t\t\t\tgs.info('first user on page is ' + user.name);\n\t\t\t}\n\t\t}\t\t\n\t} catch (ex) {\n\t\tvar message = ex.getMessage();\n\t\tgs.error(message);\n\t} finally {\n\t\tstream.close();\n\t}\n\t\n})();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Number",
                            "description": "Current index of an item within the current page in the data stream using\n                zero-based indexing."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "ScriptableDS-getPageIndex",
                        "short_description": "Returns the current index of a page in a data stream.",
                        "description": "<p><span class=\"ph\">You can only call this method on a\n                ScriptableDataStream object returned from the\n                  <span class=\"keyword apiname\">executeDataStreamAction()</span> method in the FlowAPI class. See\n                  <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=ScriptableFlowAPI&amp;v=paris\" target=\"_blank\">FlowAPI</a>.</span></p>",
                        "name": "getPageIndex()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "(function() {\n\t\n\ttry {\n\n\t\t// Execute Data Stream Action. \n\t\tvar stream = sn_fd.FlowAPI.executeDataStreamAction('x_my_scope.data_stream_name');\n\n\t\t// Process each item in the data stream\n\t\twhile (stream.hasNext()) {\n\n\t\t\t// Get a single item from the data stream.\n\t\t\tvar item = stream.next();\n\n\t\t\t// Use the item. \n\t\t\tvar now_GR = new GlideRecord('incident');\n\t\t\tnow_GR.setValue('number',item.id);\n\t\t\tnow_GR.setValue('short_description',item.name);\n\t\t\tnow_GR.insert();\n\t\t\n\t\t\t// By default, this code snippet will terminate after 5 pages.\n\t\t\t// Remove or modify this limit after testing your code.\n\t\t\tif (stream.getPageIndex() &gt;= 4) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\t\t\n\t} catch (ex) {\n\t\tvar message = ex.getMessage();\n\t\tgs.error(message);\n\t} finally {\n\t\tstream.close();\n\t}\n\t\n})();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Number",
                            "description": "Current index of a page in a data stream using zero-based indexing."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "ScriptableDS-hasNext",
                        "short_description": "Returns true if there are more items in the data stream.",
                        "description": "<p><span class=\"ph\">You can only call this method on a\n                ScriptableDataStream object returned from the\n                  <span class=\"keyword apiname\">executeDataStreamAction()</span> method in the FlowAPI class. See\n                  <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=ScriptableFlowAPI&amp;v=paris\" target=\"_blank\">FlowAPI</a>.</span></p><p><div class=\"note note\"><span class=\"notetitle\">Note:</span> <span class=\"ph\">By default, the instance waits for 600 seconds to\n                  retrieve a single page of data from a <span class=\"ph\">MID Server</span>. If you\n                  encounter a timeout when running a <span class=\"ph\">Data Stream</span> action through a <span class=\"ph\">MID Server</span>, change this default by increasing the\n                    <span class=\"keyword parmname\">datastream_alternative_env_fetch_page_timeout</span> system\n                  property. </span></div></p>",
                        "name": "hasNext()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "(function() {\n\t\n\ttry {\n\n\t\t// Execute Data Stream Action. \n\t\tvar stream = sn_fd.FlowAPI.executeDataStreamAction('x_my_scope.data_stream_name');\n\n\t\t// Process each item in the data stream\n\t\twhile (stream.hasNext()) {\n\n\t\t\t// Get a single item from the data stream.\n\t\t\tvar item = stream.next();\n\n\t\t\t// Use the item. \n\t\t\tvar now_GR = new GlideRecord('incident');\n\t\t\tnow_GR.setValue('number',item.id);\n\t\t\tnow_GR.setValue('short_description',item.name);\n\t\t\tnow_GR.insert();\n\t\t\n\t\t\t// By default, this code snippet will terminate after 10 items.\n\t\t\t// Remove or modify this limit after testing your code.\n\t\t\tif (stream.getItemIndex() &gt;= 9) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\t\t\n\t} catch (ex) {\n\t\tvar message = ex.getMessage();\n\t\tgs.error(message);\n\t} finally {\n\t\tstream.close();\n\t}\n\t\n})();",
                                "description": "This example creates an incident record for each item returned in the data stream."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "Flag that determines whether there are more items in the data stream. Values\n                  include:<ul class=\"ul\" id=\"ScriptableDS-hasNext__ul_xy5_z4d_cjb\">\n                  <li class=\"li\">true: There are more items to iterate through in the data stream.</li>\n\n                  <li class=\"li\">false: There are no more items in the data stream.</li>\n\n                </ul>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "ScriptableDS-next",
                        "short_description": "Returns the next item in a data stream.",
                        "description": "<p><span class=\"ph\">You can only call this method on a\n                ScriptableDataStream object returned from the\n                  <span class=\"keyword apiname\">executeDataStreamAction()</span> method in the FlowAPI class. See\n                  <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=ScriptableFlowAPI&amp;v=paris\" target=\"_blank\">FlowAPI</a>.</span></p><p><div class=\"note note\"><span class=\"notetitle\">Note:</span> <span class=\"ph\">By default, the instance waits for 600 seconds to\n                  retrieve a single page of data from a <span class=\"ph\">MID Server</span>. If you\n                  encounter a timeout when running a <span class=\"ph\">Data Stream</span> action through a <span class=\"ph\">MID Server</span>, change this default by increasing the\n                    <span class=\"keyword parmname\">datastream_alternative_env_fetch_page_timeout</span> system\n                  property. </span></div></p>",
                        "name": "next()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "(function() {\n\t\n\ttry {\n\n\t\t// Execute Data Stream Action. \n\t\tvar stream = sn_fd.FlowAPI.executeDataStreamAction('x_my_scope.data_stream_name');\n\n\t\t// Process each item in the data stream\n\t\twhile (stream.hasNext()) {\n\n\t\t\t// Get a single item from the data stream.\n\t\t\tvar item = stream.next();\n\n\t\t\t// Use the item. \n\t\t\tvar now_GR = new GlideRecord('incident');\n\t\t\tnow_GR.setValue('number',item.id);\n\t\t\tnow_GR.setValue('short_description',item.name);\n\t\t\tnow_GR.insert();\n\t\t\n\t\t\t// By default, this code snippet will terminate after 10 items.\n\t\t\t// Remove or modify this limit after testing your code.\n\t\t\tif (stream.getItemIndex() &gt;= 9) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\t\t\n\t} catch (ex) {\n\t\tvar message = ex.getMessage();\n\t\tgs.error(message);\n\t} finally {\n\t\tstream.close();\n\t}\n\t\n})();",
                                "description": "This example creates an incident record for each item returned in the data stream."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Object",
                            "description": "The next item in the data stream. This object contains the outputs defined by\n                the Data Stream action. To view the Data Stream action outputs, navigate to the\n                Outputs section of the Data Stream action in the Flow Designer interface."
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "<p class=\"p\">Use these methods in your server-side scripts with the <span class=\"keyword parmname\">sn_fd</span> namespace\n        identifier.</p><br/><br/><h2 class=\"title sectiontitle\">API call order</h2>\n      \n      <p class=\"p\">Build and execute flows, subflows, and actions using these APIs in the following order:</p>\n\n      <div class=\"p\">\n                <dl class=\"dl\">\n                  \n                    <dt class=\"dt dlterm\">1. <span class=\"keyword apiname\">FlowAPI</span>: Creates a builder object</dt>\n\n                    <dd class=\"dd\">Use <span class=\"keyword apiname\">getRunner()</span> to instantiate the ScriptableFlowRunner\n                      builder object.</dd>\n\n                  \n                  \n                    <dt class=\"dt dlterm\">2. <span class=\"keyword apiname\">ScriptableFlowRunner</span>: Specify  <span class=\"ph\">Flow Designer</span> content to run</dt>\n\n                    <dd class=\"dd\">Use these methods in the following order to create the builder pattern:<div class=\"p\">\n                        <ol class=\"ol\" id=\"ScriptableFlowRunnerScopedAPI__d93758e730\">\n                          <li class=\"li\">Use one of the methods <span class=\"keyword apiname\">action()</span>,\n                              <span class=\"keyword apiname\">datastream()</span>, <span class=\"keyword apiname\">flow()</span>, or\n                              <span class=\"keyword apiname\">subflow()</span> to specify what type of <span class=\"ph\">Flow Designer</span> object to build.</li>\n\n                          <li class=\"li\">Use one or more methods such as <span class=\"keyword apiname\">addInput()</span>,\n                              <span class=\"keyword apiname\">inDomain()</span>, or <span class=\"keyword apiname\">quick()</span> to\n                            specify execution parameters.</li>\n\n                          <li class=\"li\">Use the <span class=\"keyword apiname\">run()</span> method to run the action, flow, or\n                            subflow with the provided parameters and return a\n                            ScriptableFlowRunnerResult object.</li>\n\n                        </ol>\n\n                      </div>\n</dd>\n\n                  \n                  \n                    <dt class=\"dt dlterm\">3. <span class=\"keyword apiname\">ScriptableFlowRunnerResult</span>: Retrieve <span class=\"ph\">Flow Designer</span> execution details</dt>\n\n                    <dd class=\"dd\">Use one or more methods such as <span class=\"keyword apiname\">getContextId()</span>,\n                        <span class=\"keyword apiname\">getOutputs()</span>, and <span class=\"keyword apiname\">getDomainId()</span> to\n                      view execution details.</dd>\n\n                  \n                </dl>\n\n              </div><br/><br/><h2 class=\"title sectiontitle\">Example</h2>\n      \n      <p class=\"p\">This example shows how to create a\n                ScriptableFlowRunner builder object and uses it to execute an approval action on a\n                specific record. A ScriptableFlowRunnerResult object captures the execution\n                arguments and action outputs.</p>\n\n      <div class=\"p\">\n        <pre><code class='language-javascript'>\n(function() {\n  try {\n\n    var inputs = {}; \n\n    inputs['sys_id'] = '57af7aec73d423002728660c4cf6a71c';  // Pass the recordâs sys_id in as input.  \n\n    var result = sn_fd.FlowAPI.getRunner()  // Create a ScriptableFlowRunner builder object.\n      .action('global.markapproved')        // Run the global scope action named markapproved.\n      .inForeground()\n      .inDomain('TOP/ACME')                 // Run the action from the TOP/ACME domain.                               \n      .withInputs(inputs)\n      .run();                               // Run the action and return a FlowRunnerResult object.\n\n    var contextId = result.getContextId();  // Retrieve the context ID from the result\n    var dateRun = result.getDate();\n    var domainUsed = result.getDomainId();  // Retrieve the Domain ID from the result.\n    var flowName = result.getFlowObjectName();\n    var flowObjectType = result.getFlowObjectType();\n\n    var outputs = result.getOutputs();            // Retrieve any outputs from the action execution.\n    var newApprovalStatus = outputs['approval'];  // Echo back the approval status for verification.\n\t\t\n  } catch (ex) {\n    var message = ex.getMessage();\n    gs.error(message);\n  }\n\t\n})();\n   </code></pre>\n\n      </div>",
                "short_description": "<span class=\"ph\">Create a builder object used to define parameters\n                for flow, subflow, and action execution. You can specify a flow to execute in a\n                particular domain. Start the flow, subflow, or action execution directly from the\n                builder and view the results in a ScriptableFlowRunnerResult object.</span>",
                "identifier": "ScriptableFlowRunnerScopedAPI",
                "name": "ScriptableFlowRunner",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "FlowRunner-action_S",
                        "short_description": "Identifies the scope and name of the action to execute.",
                        "description": "",
                        "name": "action(String scopedActionName)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "\n(function() {\n  try {\n\n    var inputs = {}; \n\n    inputs['sys_id'] = '57af7aec73d423002728660c4cf6a71c';  // Pass the recordâs sys_id in as input.  \n\n    var result = sn_fd.FlowAPI.getRunner()  // Create a ScriptableFlowRunner builder object.\n      .action('global.markapproved')        // Run the global scope action named markapproved.\n      .inForeground()\n      .inDomain('TOP/ACME')                 // Run the action from the TOP/ACME domain.                               \n      .withInputs(inputs)\n      .run();                               // Run the action and return a FlowRunnerResult object.\n\n    var contextId = result.getContextId();  // Retrieve the context ID from the result\n    var dateRun = result.getDate();\n    var domainUsed = result.getDomainId();  // Retrieve the Domain ID from the result.\n    var flowName = result.getFlowObjectName();\n    var flowObjectType = result.getFlowObjectType();\n\n    var outputs = result.getOutputs();            // Retrieve any outputs from the action execution.\n    var newApprovalStatus = outputs['approval'];  // Echo back the approval status for verification.\n\t\t\n  } catch (ex) {\n    var message = ex.getMessage();\n    gs.error(message);\n  }\n\t\n})();\n   ",
                                "description": "This example shows how to create a\n                ScriptableFlowRunner builder object and uses it to execute an approval action on a\n                specific record. A ScriptableFlowRunnerResult object captures the execution\n                arguments and action outputs."
                            }
                        ],
                        "params": [
                            {
                                "name": "scopedActionName",
                                "type": "String",
                                "description": "Scope and name of the action to execute. For example,\n                  <samp class=\"ph codeph\">global.actionName</samp>."
                            }
                        ],
                        "return": {
                            "type": "<a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/sn_fd-namespace/ScriptableFlowRunnerScopedAPI\" title=\"Create a builder object used to define parameters for flow, subflow, and action execution. You can specify a flow to execute in a particular domain. Start the flow, subflow, or action execution directly from the builder and view the results in a ScriptableFlowRunnerResult object.\">ScriptableFlowRunner</a>",
                            "description": "Builder object used to run a <span class=\"ph\">Flow Designer</span> action, flow, or\n                  subflow."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "FlowRunner-addInput_S_O",
                        "short_description": "Adds a single input. If the name passed as an argument already exists as a separate\n    input, the new value replaces the pre-existing value.",
                        "description": "<p>This method adds a single input. To create an object and add multiple inputs, use the\n          <span class=\"keyword apiname\">withInputs()</span> method.</p>",
                        "name": "addInput(String name, Object value)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "(function() {\n  try {\n\n    var result = sn_fd.FlowAPI.getRunner()\n      .action('global.test_action')\n      .addInput('table_name', 'incident')\n      .inForeground()\n      .run();\n\n    gs.info(result.debug());\n\n  } catch (ex) {\n    var message = ex.getMessage();\n    gs.error(message);\n  }\n\n})();",
                                "description": "This example runs an action that takes a single input called\n        <samp class=\"ph codeph\">table_name</samp>."
                            }
                        ],
                        "params": [
                            {
                                "name": "name",
                                "type": "String",
                                "description": "The name of the input for the flow, subflow, or action."
                            },
                            {
                                "name": "value",
                                "type": "Object",
                                "description": "The value of the input for the flow, subflow, or action."
                            }
                        ],
                        "return": {
                            "type": "<a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/sn_fd-namespace/ScriptableFlowRunnerScopedAPI\" title=\"Create a builder object used to define parameters for flow, subflow, and action execution. You can specify a flow to execute in a particular domain. Start the flow, subflow, or action execution directly from the builder and view the results in a ScriptableFlowRunnerResult object.\">ScriptableFlowRunner</a>",
                            "description": "Builder object used to run a <span class=\"ph\">Flow Designer</span> action, flow, or\n                  subflow."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "FlowRunner-datastream_S",
                        "short_description": "Identifies the scope and name of the data stream action to execute.",
                        "description": "<p>To learn more about data stream actions, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-servicenow-platform/page/administer/integrationhub/concept/data-stream-actions.html\" target=\"_blank\">Data Stream actions and\n          pagination</a>.</p>",
                        "name": "datastream(String scopedDatastreamName)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "(function() {\n  try {\n\n    var result = sn_fd.FlowAPI.getRunner()\n      .datastream('global.test_dsa')\n      .inForeground()\n      .run();\n\n    gs.info(result.debug());\n\n  } catch (ex) {\n    var message = ex.getMessage();\n    gs.error(message);\n  }\n\n})();",
                                "description": "This example shows how to run a Data Stream action."
                            }
                        ],
                        "params": [
                            {
                                "name": "scopedDatastreamName",
                                "type": "String",
                                "description": "Scope and name of the Data Stream action to execute. For example,\n                  <samp class=\"ph codeph\">global.dataStreamActionName</samp>."
                            }
                        ],
                        "return": {
                            "type": "<a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/sn_fd-namespace/ScriptableFlowRunnerScopedAPI\" title=\"Create a builder object used to define parameters for flow, subflow, and action execution. You can specify a flow to execute in a particular domain. Start the flow, subflow, or action execution directly from the builder and view the results in a ScriptableFlowRunnerResult object.\">ScriptableFlowRunner</a>",
                            "description": "Builder object used to run a <span class=\"ph\">Flow Designer</span> action, flow, or\n                  subflow."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "FlowRunner-flow_S",
                        "short_description": "Identifies the scope and name of the flow to execute.",
                        "description": "",
                        "name": "flow(String scopedFlowName)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "(function() {\n  try {\n\n    var result = sn_fd.FlowAPI.getRunner()\n      .flow('global.test_flow')\n      .inForeground()\n      .run();\n\n    gs.info(result.debug());\n\n  } catch (ex) {\n    var message = ex.getMessage();\n    gs.error(message);\n  }\n\n})();",
                                "description": "This example shows how to run a flow that logs a message."
                            }
                        ],
                        "params": [
                            {
                                "name": "scopedFlowName",
                                "type": "String",
                                "description": "Scope and name of the flow to execute. For example,\n                  <samp class=\"ph codeph\">global.flowName</samp>."
                            }
                        ],
                        "return": {
                            "type": "<a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/sn_fd-namespace/ScriptableFlowRunnerScopedAPI\" title=\"Create a builder object used to define parameters for flow, subflow, and action execution. You can specify a flow to execute in a particular domain. Start the flow, subflow, or action execution directly from the builder and view the results in a ScriptableFlowRunnerResult object.\">ScriptableFlowRunner</a>",
                            "description": "Builder object used to run a <span class=\"ph\">Flow Designer</span> action, flow, or\n                  subflow."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "FlowRunner-inBackground",
                        "short_description": "Runs the flow, subflow, or action asynchronously. Once the flow object starts running,\n    script execution resumes immediately.",
                        "description": "",
                        "name": "inBackground()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "(function() {\n  try {\n\n    var result = sn_fd.FlowAPI.getRunner()\n      .flow('global.test_flow')\n      .inBackground()\n      .run();\n\n    gs.info(result.debug());\n\n  } catch (ex) {\n    var message = ex.getMessage();\n    gs.error(message);\n  }\n\n})();",
                                "description": "This example shows how to run a flow asynchronously."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "<a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/sn_fd-namespace/ScriptableFlowRunnerScopedAPI\" title=\"Create a builder object used to define parameters for flow, subflow, and action execution. You can specify a flow to execute in a particular domain. Start the flow, subflow, or action execution directly from the builder and view the results in a ScriptableFlowRunnerResult object.\">ScriptableFlowRunner</a>",
                            "description": "Builder object used to run a <span class=\"ph\">Flow Designer</span> action, flow, or\n                  subflow."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "FlowRunner-inDomain_S",
                        "short_description": "Runs the flow, subflow, or action in the specified domain. Checks to ensure the domain\n    exists and is available.",
                        "description": "",
                        "name": "inDomain(String domainId)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "\n(function() {\n  try {\n\n    var inputs = {}; \n\n    inputs['sys_id'] = '57af7aec73d423002728660c4cf6a71c';  // Pass the recordâs sys_id in as input.  \n\n    var result = sn_fd.FlowAPI.getRunner()  // Create a ScriptableFlowRunner builder object.\n      .action('global.markapproved')        // Run the global scope action named markapproved.\n      .inForeground()\n      .inDomain('TOP/ACME')                 // Run the action from the TOP/ACME domain.                               \n      .withInputs(inputs)\n      .run();                               // Run the action and return a FlowRunnerResult object.\n\n    var contextId = result.getContextId();  // Retrieve the context ID from the result\n    var dateRun = result.getDate();\n    var domainUsed = result.getDomainId();  // Retrieve the Domain ID from the result.\n    var flowName = result.getFlowObjectName();\n    var flowObjectType = result.getFlowObjectType();\n\n    var outputs = result.getOutputs();            // Retrieve any outputs from the action execution.\n    var newApprovalStatus = outputs['approval'];  // Echo back the approval status for verification.\n\t\t\n  } catch (ex) {\n    var message = ex.getMessage();\n    gs.error(message);\n  }\n\t\n})();\n   ",
                                "description": "This example shows how to create a\n                ScriptableFlowRunner builder object and uses it to execute an approval action on a\n                specific record. A ScriptableFlowRunnerResult object captures the execution\n                arguments and action outputs."
                            }
                        ],
                        "params": [
                            {
                                "name": "domainId",
                                "type": "String",
                                "description": "The sys_id or name for the domain of execution for the flow."
                            }
                        ],
                        "return": {
                            "type": "<a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/sn_fd-namespace/ScriptableFlowRunnerScopedAPI\" title=\"Create a builder object used to define parameters for flow, subflow, and action execution. You can specify a flow to execute in a particular domain. Start the flow, subflow, or action execution directly from the builder and view the results in a ScriptableFlowRunnerResult object.\">ScriptableFlowRunner</a>",
                            "description": "Builder object used to run a <span class=\"ph\">Flow Designer</span> action, flow, or\n                  subflow."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "FlowRunner-inForeground",
                        "short_description": "Runs the flow, subflow, or action synchronously. Script execution pauses while the flow\n    object is running.",
                        "description": "",
                        "name": "inForeground()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "\n(function() {\n  try {\n\n    var inputs = {}; \n\n    inputs['sys_id'] = '57af7aec73d423002728660c4cf6a71c';  // Pass the recordâs sys_id in as input.  \n\n    var result = sn_fd.FlowAPI.getRunner()  // Create a ScriptableFlowRunner builder object.\n      .action('global.markapproved')        // Run the global scope action named markapproved.\n      .inForeground()\n      .inDomain('TOP/ACME')                 // Run the action from the TOP/ACME domain.                               \n      .withInputs(inputs)\n      .run();                               // Run the action and return a FlowRunnerResult object.\n\n    var contextId = result.getContextId();  // Retrieve the context ID from the result\n    var dateRun = result.getDate();\n    var domainUsed = result.getDomainId();  // Retrieve the Domain ID from the result.\n    var flowName = result.getFlowObjectName();\n    var flowObjectType = result.getFlowObjectType();\n\n    var outputs = result.getOutputs();            // Retrieve any outputs from the action execution.\n    var newApprovalStatus = outputs['approval'];  // Echo back the approval status for verification.\n\t\t\n  } catch (ex) {\n    var message = ex.getMessage();\n    gs.error(message);\n  }\n\t\n})();\n   ",
                                "description": "This example shows how to create a\n                ScriptableFlowRunner builder object and uses it to execute an approval action on a\n                specific record. A ScriptableFlowRunnerResult object captures the execution\n                arguments and action outputs."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "<a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/sn_fd-namespace/ScriptableFlowRunnerScopedAPI\" title=\"Create a builder object used to define parameters for flow, subflow, and action execution. You can specify a flow to execute in a particular domain. Start the flow, subflow, or action execution directly from the builder and view the results in a ScriptableFlowRunnerResult object.\">ScriptableFlowRunner</a>",
                            "description": "Builder object used to run a <span class=\"ph\">Flow Designer</span> action, flow, or\n                  subflow."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "FlowRunner-quick",
                        "short_description": "<span class=\"ph\">Runs a flow, subflow, or action from a\n                    server-side script synchronously or asynchronously without creating execution\n                    details or other related records. Improves performance by eliminating\n                    record-keeping overhead.</span>\n    <span class=\"ph\">Use this API to increase the speed of high-volume processing, for\n                example multiple executions per second, in a production environment.</span>",
                        "description": "",
                        "name": "quick()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "(function() {\n  try {\n\n    var result = sn_fd.FlowAPI.getRunner()\n      .flow('global.test_flow')\n      .inForeground()\n      .quick()\n      .run();\n\n    gs.info(result);\n\n  } catch (ex) {\n    var message = ex.getMessage();\n    gs.error(message);\n  }\n\n})();",
                                "description": "This example shows how to run a flow without creating any related records."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "<a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/sn_fd-namespace/ScriptableFlowRunnerScopedAPI\" title=\"Create a builder object used to define parameters for flow, subflow, and action execution. You can specify a flow to execute in a particular domain. Start the flow, subflow, or action execution directly from the builder and view the results in a ScriptableFlowRunnerResult object.\">ScriptableFlowRunner</a>",
                            "description": "Builder object used to run a <span class=\"ph\">Flow Designer</span> action, flow, or\n                  subflow."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "FlowRunner-run",
                        "short_description": "Runs the flow, subflow, or action with the specified parameters.",
                        "description": "",
                        "name": "run()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "\n(function() {\n  try {\n\n    var inputs = {}; \n\n    inputs['sys_id'] = '57af7aec73d423002728660c4cf6a71c';  // Pass the recordâs sys_id in as input.  \n\n    var result = sn_fd.FlowAPI.getRunner()  // Create a ScriptableFlowRunner builder object.\n      .action('global.markapproved')        // Run the global scope action named markapproved.\n      .inForeground()\n      .inDomain('TOP/ACME')                 // Run the action from the TOP/ACME domain.                               \n      .withInputs(inputs)\n      .run();                               // Run the action and return a FlowRunnerResult object.\n\n    var contextId = result.getContextId();  // Retrieve the context ID from the result\n    var dateRun = result.getDate();\n    var domainUsed = result.getDomainId();  // Retrieve the Domain ID from the result.\n    var flowName = result.getFlowObjectName();\n    var flowObjectType = result.getFlowObjectType();\n\n    var outputs = result.getOutputs();            // Retrieve any outputs from the action execution.\n    var newApprovalStatus = outputs['approval'];  // Echo back the approval status for verification.\n\t\t\n  } catch (ex) {\n    var message = ex.getMessage();\n    gs.error(message);\n  }\n\t\n})();\n   ",
                                "description": "This example shows how to create a\n                ScriptableFlowRunner builder object and uses it to execute an approval action on a\n                specific record. A ScriptableFlowRunnerResult object captures the execution\n                arguments and action outputs."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "<a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/sn_fd-namespace/ScriptableFlowRunnerResultScopedAPI\" title=\"Captures the result of using ScriptableFlowRunner to execute a flow, subflow, or action. Includes data such as the context ID, domain, and any outputs from the flow execution.\">ScriptableFlowRunnerResult</a>",
                            "description": "Object containing the execution details of a <span class=\"ph\">Flow Designer</span>\n                  action, flow, or subflow."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "FlowRunner-subflow_S",
                        "short_description": "Identifies the scope and name of the subflow to execute.",
                        "description": "",
                        "name": "subflow(String scopedSubflowName)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "(function() {\n  try {\n\n    var result = sn_fd.FlowAPI.getRunner()\n      .subflow('global.test_subflow')\n      .inForeground()\n      .run();\n\n    gs.info(result);\n\n  } catch (ex) {\n    var message = ex.getMessage();\n    gs.error(message);\n  }\n\n})();",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "scopedSubflowName",
                                "type": "String",
                                "description": "Scope and name of the subflow to execute. For example,\n                  <samp class=\"ph codeph\">global.subflowName</samp>."
                            }
                        ],
                        "return": {
                            "type": "<a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/sn_fd-namespace/ScriptableFlowRunnerScopedAPI\" title=\"Create a builder object used to define parameters for flow, subflow, and action execution. You can specify a flow to execute in a particular domain. Start the flow, subflow, or action execution directly from the builder and view the results in a ScriptableFlowRunnerResult object.\">ScriptableFlowRunner</a>",
                            "description": "Builder object used to run a <span class=\"ph\">Flow Designer</span> action, flow, or\n                  subflow."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "FlowRunner-timeout_N",
                        "short_description": "Sets a timeout for a flow, subflow, or action execution.",
                        "description": "",
                        "name": "timeout(Number timeout)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "(function() {\n  try {\n\n    var result = sn_fd.FlowAPI.getRunner()\n      .flow('global.test_flow')\n      .inForeground()\n      .timeout(120000)\n      .run();\n\n    gs.info(result.debug());\n\n  } catch (ex) {\n    var message = ex.getMessage();\n    gs.error(message);\n  }\n\n})(); ",
                                "description": "This example shows how to run a flow and sets a timeout for two minutes."
                            }
                        ],
                        "params": [
                            {
                                "name": "timeout",
                                "type": "Number",
                                "description": "Timeout in milliseconds."
                            }
                        ],
                        "return": {
                            "type": "<a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/sn_fd-namespace/ScriptableFlowRunnerScopedAPI\" title=\"Create a builder object used to define parameters for flow, subflow, and action execution. You can specify a flow to execute in a particular domain. Start the flow, subflow, or action execution directly from the builder and view the results in a ScriptableFlowRunnerResult object.\">ScriptableFlowRunner</a>",
                            "description": "Builder object used to run a <span class=\"ph\">Flow Designer</span> action, flow, or\n                  subflow."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "FR-wConnectionAliasOverride_S_S",
                        "short_description": "Overrides the <span class=\"ph\">Connections and Credentials</span> alias associated with the flow,\n    action, or subflow.",
                        "description": "<p>To learn more about overriding a <span class=\"ph\">Connections and Credentials</span> alias, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-servicenow-platform/page/administer/integrationhub/concept/support-multiple-connections.html\" target=\"_blank\">Supporting multiple\n        connections</a>.</p>",
                        "name": "withConnectionAliasOverride(String aliasName, String overrideName)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "(function() {\n  try {\n\n    var result = sn_fd.FlowAPI.getRunner()\n      .flow('global.test_flow')\n      .withConnectionAliasOverride('sn_original_alias.spoke', 'x_new_alias.spoke')\n      .inForeground()\n      .run();\n\n    gs.info(result.debug());\n\n  } catch (ex) {\n    var message = ex.getMessage();\n    gs.error(message);\n  }\n\n})();",
                                "description": "This example shows how to run a flow using a different alias than the default associated\n        with the flow."
                            }
                        ],
                        "params": [
                            {
                                "name": "aliasName",
                                "type": "String",
                                "description": "The name of the alias to override."
                            },
                            {
                                "name": "overrideName",
                                "type": "String",
                                "description": "The name of the alias to use when running the flow, subflow, or action."
                            }
                        ],
                        "return": {
                            "type": "<a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/sn_fd-namespace/ScriptableFlowRunnerScopedAPI\" title=\"Create a builder object used to define parameters for flow, subflow, and action execution. You can specify a flow to execute in a particular domain. Start the flow, subflow, or action execution directly from the builder and view the results in a ScriptableFlowRunnerResult object.\">ScriptableFlowRunner</a>",
                            "description": "Builder object used to run a <span class=\"ph\">Flow Designer</span> action, flow, or\n                  subflow."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "FlowRunner-withInputs_O",
                        "short_description": "Adds a collection of inputs. If a name in one of the name-value pairs already exists,\n    the new value replaces the pre-existing value.",
                        "description": "",
                        "name": "withInputs(Map inputs)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "\n(function() {\n  try {\n\n    var inputs = {}; \n\n    inputs['sys_id'] = '57af7aec73d423002728660c4cf6a71c';  // Pass the recordâs sys_id in as input.  \n\n    var result = sn_fd.FlowAPI.getRunner()  // Create a ScriptableFlowRunner builder object.\n      .action('global.markapproved')        // Run the global scope action named markapproved.\n      .inForeground()\n      .inDomain('TOP/ACME')                 // Run the action from the TOP/ACME domain.                               \n      .withInputs(inputs)\n      .run();                               // Run the action and return a FlowRunnerResult object.\n\n    var contextId = result.getContextId();  // Retrieve the context ID from the result\n    var dateRun = result.getDate();\n    var domainUsed = result.getDomainId();  // Retrieve the Domain ID from the result.\n    var flowName = result.getFlowObjectName();\n    var flowObjectType = result.getFlowObjectType();\n\n    var outputs = result.getOutputs();            // Retrieve any outputs from the action execution.\n    var newApprovalStatus = outputs['approval'];  // Echo back the approval status for verification.\n\t\t\n  } catch (ex) {\n    var message = ex.getMessage();\n    gs.error(message);\n  }\n\t\n})();\n   ",
                                "description": "Creates an input object and passes the value to the <span class=\"keyword apiname\">withInputs()</span>\n        method."
                            }
                        ],
                        "params": [
                            {
                                "name": "inputs",
                                "type": "Object",
                                "description": "Map object containing the name-value pairs that define inputs for the flow,\n                subflow, or action."
                            }
                        ],
                        "return": {
                            "type": "<a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/sn_fd-namespace/ScriptableFlowRunnerScopedAPI\" title=\"Create a builder object used to define parameters for flow, subflow, and action execution. You can specify a flow to execute in a particular domain. Start the flow, subflow, or action execution directly from the builder and view the results in a ScriptableFlowRunnerResult object.\">ScriptableFlowRunner</a>",
                            "description": "Builder object used to run a <span class=\"ph\">Flow Designer</span> action, flow, or\n                  subflow."
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "<p class=\"p\">Use these methods in your server-side scripts with the <span class=\"keyword parmname\">sn_fd</span> namespace\n        identifier.</p><br/><br/><h2 class=\"title sectiontitle\">API call Order</h2>\n      \n      <p class=\"p\">Build and execute flows, subflows, and actions using these APIs in the following order:</p>\n\n      <div class=\"p\">\n                <dl class=\"dl\">\n                  \n                    <dt class=\"dt dlterm\">1. <span class=\"keyword apiname\">FlowAPI</span>: Creates a builder object</dt>\n\n                    <dd class=\"dd\">Use <span class=\"keyword apiname\">getRunner()</span> to instantiate the ScriptableFlowRunner\n                      builder object.</dd>\n\n                  \n                  \n                    <dt class=\"dt dlterm\">2. <span class=\"keyword apiname\">ScriptableFlowRunner</span>: Specify  <span class=\"ph\">Flow Designer</span> content to run</dt>\n\n                    <dd class=\"dd\">Use these methods in the following order to create the builder pattern:<div class=\"p\">\n                        <ol class=\"ol\" id=\"ScriptableFlowRunnerResultScopedAPI__d93695e730\">\n                          <li class=\"li\">Use one of the methods <span class=\"keyword apiname\">action()</span>,\n                              <span class=\"keyword apiname\">datastream()</span>, <span class=\"keyword apiname\">flow()</span>, or\n                              <span class=\"keyword apiname\">subflow()</span> to specify what type of <span class=\"ph\">Flow Designer</span> object to build.</li>\n\n                          <li class=\"li\">Use one or more methods such as <span class=\"keyword apiname\">addInput()</span>,\n                              <span class=\"keyword apiname\">inDomain()</span>, or <span class=\"keyword apiname\">quick()</span> to\n                            specify execution parameters.</li>\n\n                          <li class=\"li\">Use the <span class=\"keyword apiname\">run()</span> method to run the action, flow, or\n                            subflow with the provided parameters and return a\n                            ScriptableFlowRunnerResult object.</li>\n\n                        </ol>\n\n                      </div>\n</dd>\n\n                  \n                  \n                    <dt class=\"dt dlterm\">3. <span class=\"keyword apiname\">ScriptableFlowRunnerResult</span>: Retrieve <span class=\"ph\">Flow Designer</span> execution details</dt>\n\n                    <dd class=\"dd\">Use one or more methods such as <span class=\"keyword apiname\">getContextId()</span>,\n                        <span class=\"keyword apiname\">getOutputs()</span>, and <span class=\"keyword apiname\">getDomainId()</span> to\n                      view execution details.</dd>\n\n                  \n                </dl>\n\n              </div><br/><br/><h2 class=\"title sectiontitle\">Example</h2>\n      \n      <p class=\"p\">This example shows how to create a\n                ScriptableFlowRunner builder object and uses it to execute an approval action on a\n                specific record. A ScriptableFlowRunnerResult object captures the execution\n                arguments and action outputs.</p>\n\n      <div class=\"p\">\n        <pre><code class='language-javascript'>\n(function() {\n  try {\n\n    var inputs = {}; \n\n    inputs['sys_id'] = '57af7aec73d423002728660c4cf6a71c';  // Pass the recordâs sys_id in as input.  \n\n    var result = sn_fd.FlowAPI.getRunner()  // Create a ScriptableFlowRunner builder object.\n      .action('global.markapproved')        // Run the global scope action named markapproved.\n      .inForeground()\n      .inDomain('TOP/ACME')                 // Run the action from the TOP/ACME domain.                               \n      .withInputs(inputs)\n      .run();                               // Run the action and return a FlowRunnerResult object.\n\n    var contextId = result.getContextId();  // Retrieve the context ID from the result\n    var dateRun = result.getDate();\n    var domainUsed = result.getDomainId();  // Retrieve the Domain ID from the result.\n    var flowName = result.getFlowObjectName();\n    var flowObjectType = result.getFlowObjectType();\n\n    var outputs = result.getOutputs();            // Retrieve any outputs from the action execution.\n    var newApprovalStatus = outputs['approval'];  // Echo back the approval status for verification.\n\t\t\n  } catch (ex) {\n    var message = ex.getMessage();\n    gs.error(message);\n  }\n\t\n})();\n   </code></pre>\n\n      </div>",
                "short_description": "<span class=\"ph\">Captures the result of using\n                  <span class=\"keyword apiname\">ScriptableFlowRunner</span> to execute a flow, subflow, or action.\n                Includes data such as the context ID, domain, and any outputs from the flow\n                execution.</span>",
                "identifier": "ScriptableFlowRunnerResultScopedAPI",
                "name": "ScriptableFlowRunnerResult",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "FlowRunnerResult-debug",
                        "short_description": "Returns information about the executed flow, subflow, or action, including the context\n    ID, domain ID, and execution outputs.",
                        "description": "",
                        "name": "debug()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "(function() {\n  try {\n\n    var result = sn_fd.FlowAPI.getRunner()\n      .flow('global.test_flow')\n      .inForeground()\n      .timeout(12000)\n      .run();\n\n    gs.print(result.debug());\n\n  } catch (ex) {\n    var message = ex.getMessage();\n    gs.error(message);\n  }\n\n})();",
                                "description": "This example shows how to retrieve information about the executed flow, subflow, or action\n        from the ScriptableFlowRunnerResult object."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "Execution details about the <span class=\"ph\">Flow Designer</span> action, flow, or\n                subflow run.<ul class=\"ul\" id=\"FlowRunnerResult-debug__ul_tcc_dqr_5lb\">\n                  <li class=\"li\">flow object name: Name of the flow, subflow, or action.</li>\n\n                  <li class=\"li\">flow object type: Flow, subflow, action, or datastream action.</li>\n\n                  <li class=\"li\">domain ID: ID of the domain that the flow, subflow, or action ran in.</li>\n\n                  <li class=\"li\">result time: Amount of time it took to run. </li>\n\n                  <li class=\"li\">context ID: Sys_id of the <span class=\"ph\">Flow Designer</span> execution details\n                    record for the action, flow, or subflow.</li>\n\n                  <li class=\"li\">output count: Number of action or subflow outputs.</li>\n\n                </ul>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "FlowRunnerResult-getContextId",
                        "short_description": "Returns the context ID of the flow, subflow, or action.",
                        "description": "",
                        "name": "getContextId()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var contextId = result.getContextId();",
                                "description": "This example shows how to retrieve a context ID from a ScriptableFlowRunnerResult\n        object."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The sys_id of the <span class=\"ph\">Flow Designer</span> execution details record for the\n                action, flow, or subflow."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "FlowRunnerResult-getDataStream",
                        "short_description": "Returns the stream of data from a data stream action.",
                        "description": "<p>If the <span class=\"keyword apiname\">datastream()</span> method was used in the\n          <span class=\"keyword apiname\">ScriptableFlowRunner</span> builder class, this returns the stream of data as\n        a ScriptableDataStream object. Use the <span class=\"keyword apiname\">ScriptableDataStream</span> class to\n        iterate over items in the stream. See <a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/sn_fd-namespace/ScriptableDataStreamAPI\" title=\"Provides methods to interact with a stream of data.\">ScriptableDataStream</a>.</p><p>For more information about data stream actions, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-servicenow-platform/page/administer/integrationhub/concept/data-stream-actions.html\" target=\"_blank\">Data Stream actions and\n          pagination</a>.</p>",
                        "name": "getDataStream()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var datastream = result.getDataStream();",
                                "description": "This example shows how to retrieve a data stream from a ScriptableFlowRunnerResult\n        object."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "ScriptableDataStream",
                            "description": "A ScriptableDataStream object you can use to iterate through items in a data\n                stream. Use the methods in the <span class=\"keyword apiname\">ScriptableDataStream</span> class to\n                interact with this object. See <a class=\"extRef\" href=\"https://developer.servicenow.com/go_to_api.do?ID=ScriptableDataStreamAPI&amp;v=paris\" target=\"_blank\">ScriptableDataStream</a>."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "FlowRunnerResult-getDate",
                        "short_description": "Returns the date and time when a <span class=\"ph\">Flow Designer</span> action, flow, or subflow\n    ran as a GlideDateTime object.",
                        "description": "",
                        "name": "getDate()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "(function() {\n  try {\n\n    var result = sn_fd.FlowAPI.getRunner()\n      .flow('global.test_flow')\n      .inForeground()\n      .timeout(12000)\n      .run();\n\n    gs.print(result.getDate());\n\n  } catch (ex) {\n    var message = ex.getMessage();\n    gs.error(message);\n  }\n\n})();",
                                "description": "This example shows how to retrieve the date and time of a flow execution from a\n        ScriptableFlowRunnerResult object."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "GlideDateTime",
                            "description": "The execution date and time for the flow, subflow, or action."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "FlowRunnerResult-getDomainId",
                        "short_description": "Returns the sys_id of the domain that the <span class=\"ph\">Flow Designer</span> action, flow, or\n    subflow ran in.",
                        "description": "",
                        "name": "getDomainId()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "(function() {\n  try {\n\n    var result = sn_fd.FlowAPI.getRunner()\n      .flow('global.test_flow')\n      .inForeground()\n      .inDomain('TOP/ACME')\n      .timeout(12000)\n      .run();\n\n    gs.print(result.getDomainId());\n\n  } catch (ex) {\n    var message = ex.getMessage();\n    gs.error(message);\n  }\n\n})();",
                                "description": "This example shows how to retrieve a domain ID from a ScriptableFlowRunnerResult\n        object."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The sys_id of the domain that the <span class=\"ph\">Flow Designer</span> action, flow, or\n                subflow ran in."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "FlowRunnerResult-getFlowObjectName",
                        "short_description": "Returns the scope and internal name of the <span class=\"ph\">Flow Designer</span> action, flow,\n    or subflow run.",
                        "description": "",
                        "name": "getFlowObjectName()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "(function() {\n  try {\n\n    var result = sn_fd.FlowAPI.getRunner()\n      .flow('global.test_flow')\n      .inForeground()\n      .timeout(12000)\n      .run();\n\n    gs.print(result.getFlowObjectName());\n\n  } catch (ex) {\n    var message = ex.getMessage();\n    gs.error(message);\n  }\n\n})();",
                                "description": "This example shows how to retrieve the name of the flow, subflow, or action name from a\n        ScriptableFlowRunnerResult object."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The scope and internal name of the <span class=\"ph\">Flow Designer</span> action, flow,\n                or subflow run. For example, <samp class=\"ph codeph\">global.emailflow</samp>."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "FlowRunnerResult-getFlowObjectType",
                        "short_description": "Returns the type of <span class=\"ph\">Flow Designer</span> object run.",
                        "description": "",
                        "name": "getFlowObjectType()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "(function() {\n  try {\n\n    var result = sn_fd.FlowAPI.getRunner()\n      .flow('global.test_flow')\n      .inForeground()\n      .timeout(12000)\n      .run();\n\n    gs.print(result.getFlowObjectType());\n\n  } catch (ex) {\n    var message = ex.getMessage();\n    gs.error(message);\n  }\n\n})();",
                                "description": "This example shows how to retrieve the flow object type from the\n          <span class=\"keyword apiname\">ScriptableFlowRunnerResult</span> API."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "FlowObjectType",
                            "description": "The type of <span class=\"ph\">Flow Designer</span> object run, which is either action,\n                flow, or subflow."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "FlowRunnerResult-getOutputs",
                        "short_description": "Returns the outputs of a completed <span class=\"ph\">Flow Designer</span> action, flow, or\n    subflow.",
                        "description": "",
                        "name": "getOutputs()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "(function() {\n  try {\n\n    var result = sn_fd.FlowAPI.getRunner()\n      .action('global.test_action')\n      .inForeground()\n      .timeout(12000)\n      .run();\n\n    gs.print(result.getOutputs());\n\n  } catch (ex) {\n    var message = ex.getMessage();\n    gs.error(message);\n  }\n\n})();",
                                "description": "This example shows how to retrieve the outputs from a <span class=\"ph\">Flow Designer</span> action,\n        flow, or subflow run with the <span class=\"keyword apiname\">ScriptableFlowRunner</span> API."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Object",
                            "description": "Object containing the output of a completed <span class=\"ph\">Flow Designer</span>\n                action, flow, or subflow."
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "This API is deprecated and replaced by the <a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/sn_fd-namespace/ScriptableFlowAPI\" title=\"Use FlowAPI methods to execute actions, flows, or subflows in server-side scripts using either blocking or non-blocking methods.\">FlowAPI - Scoped, Global</a>.<br/><br/>The <span class=\"keyword apiname\">Subflow</span> API can only be used in server scripts.<br/><br/>Use the <span class=\"keyword parmname\">sn_fd</span> namespace to access the <span class=\"keyword apiname\">Subflow</span> API.<br/><br/>Before interacting with a subflow using the <span class=\"keyword apiname\">Subflow</span> API, you must first\n      create and publish the subflow in the <span class=\"ph\">Flow Designer</span> interface. Because the\n        <span class=\"keyword apiname\">Subflow</span> API only interacts with pre-built subflows, there is no\n      constructor for the class.<br/><br/><div class=\"note note\"><span class=\"notetitle\">Note:</span> To optimize instance performance, avoid calling these methods from a script for an\n        asynchronous business rule. Instead, create a scheduled job record within the <span class=\"ph\">Flow Designer</span> UI.</div>",
                "short_description": "Runs published <span class=\"ph\">Flow Designer</span> subflows.",
                "identifier": "SubflowScopedAPI",
                "name": "Subflow",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "SubflowScoped-startAsync_S_O",
                        "short_description": "Runs a published subflow asynchronously.",
                        "description": "<p>Asynchronous calls are non-blocking, allowing the client to execute other code in the\n        script without having to wait for the subflow to complete.</p>",
                        "name": "startAsync(String scopeName.subflowName, Map inputs)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "//Run a subflow that takes two inputs: user, a sys_user record, and laptop_welcome_message, a string.\n(function startSubflowAsync() {\n\n\ttry {\n\t\tvar userToProvisionFor = new GlideRecord('sys_user');\n\t\tuserToProvisionFor.get('62826bf03710200044e0bfc8bcbe5df1');\n\n\t\tvar inputs = {};\n\t\tinputs['user'] = userToProvisionFor;\n\t\tinputs['laptop_welcome_message'] = 'Welcome Onboard!!';\n\n\t\tvar result = sn_fd.Subflow.startAsync('sn_devstudio.provisionlaptop', inputs);\n\n\t\t//The Sys ID of a flow execution (contextId)\n\t\tvar contextId = result.contextId;\n\n\t} catch (ex) {\n\t\tvar message = ex.getMessage();\n\t\tgs.error(message);\n\t}\n\n})();",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "scopeName.subflowName",
                                "type": "String",
                                "description": "The application scope for the subflow and the internal name of the subflow to\n                run. If scopeName is not included, the scope of the user currently logged in is\n                used. Retrieve the internal name of the subflow using the <span class=\"ph uicontrol\">Internal\n                  name</span> column on the <span class=\"ph\">Flow Designer</span> landing\n                page."
                            },
                            {
                                "name": "inputs",
                                "type": "Map",
                                "description": "Name-value pairs that define subflow inputs. If a subflow includes mandatory\n                inputs, they must be included. For inputs of Reference or Document ID field types,\n                use a GlideRecord object as the value."
                            }
                        ],
                        "return": {
                            "type": "Object",
                            "description": "PlanResponse object containing the following properties: <ul class=\"ul\" id=\"SubflowScoped-startAsync_S_O__ul_bd2_k2v_ncb\">\n                  <li class=\"li\">contextId: sys_id of the execution details record for the executed subflow.\n                    Access the execution details by navigating to the Flow Executions tab in <span class=\"ph\">Flow Designer</span> and\n                    filtering by sys_id. </li>\n\n                </ul>\n<div class=\"p\">An exception occurs when the subflow:<ul class=\"ul\" id=\"SubflowScoped-startAsync_S_O__ul_ub3_n3t_pcb\">\n                    <li class=\"li\">Does not exist within the specified application scope, or the subflow or\n                      scope name has been misspelled. </li>\n\n                    <li class=\"li\">Is not published.</li>\n\n                    <li class=\"li\">Is passed an input object that does not match the subflow inputs. </li>\n\n                    <li class=\"li\">Exceeds the recursion limit set by the\n                        <span class=\"keyword parmname\">com.glide.hub.flow_engine.indirect_recursion_limit</span>\n                      system property. The default value is three. </li>\n\n                  </ul>\n</div>"
                        },
                        "extras": []
                    }
                ]
            }
        ]
    },
    {
        "identifier": "sn_hr_core-namespace",
        "namespace": "sn_hr_core",
        "classes": [
            {
                "description": "The hr_Utils API requires the HR core plugin (com.sn_hr_core).",
                "short_description": "Provides basic functionality for the HR application.",
                "identifier": "hr_UtilsAPI",
                "name": "hr_Utils",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "hrU-hr_Utils",
                        "short_description": "Instantiates an instance of the hr_Utils class.",
                        "description": "",
                        "name": "hr_Utils()",
                        "type": "Constructor",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "hrU-getPrimaryJob_S",
                        "short_description": "Gets the Sys ID of the active primary job for a provided user.",
                        "description": "",
                        "name": "getPrimaryJob(String userId)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var result = new sn_hr_core.hr_Utils().getPrimaryJob('5137153cc611227c000bbd1bd8cd2007');\ngs.info('Result: ' + result);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "userID",
                                "type": "String",
                                "description": "Sys ID of the HR user from the User [sys_user] table assigned an active or\n                future job in which Primary is true."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "If present and active, Sys ID of the primary job from the Jobs [sn_hr_core_job]\n                table, null otherwise."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "hrU-switchPrimaryJob_S_S",
                        "short_description": "Switches the primary job of a user.",
                        "description": "",
                        "name": "switchPrimaryJob(String userId String jobId)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var result = new sn_hr_core.hr_Utils().switchPrimaryJob('5137153cc611227c000bbd1bd8cd2007', 'bc884e723c0ebf00964fb8b1ce04f9d7');\ngs.info('Result: ' + result);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "userId",
                                "type": "String",
                                "description": "Sys ID of HR user from the Users [sys_user] table."
                            },
                            {
                                "name": "jobId",
                                "type": "String",
                                "description": "Job Sys ID from the Jobs [sn_hr_core_job] table."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "Encoded JSON with message and status, error otherwise."
                        },
                        "extras": []
                    }
                ]
            }
        ]
    },
    {
        "identifier": "sn_hr_le-namespace",
        "namespace": "sn_hr_le",
        "classes": [
            {
                "description": "Lifecycle event activity sets represent different stages in the lifecycle event process. You\n      must define when the activity set is triggered, such as immediately upon creation of the\n      lifecycle event case or after the completion of another activity set. Each activity set is\n      associated with a single lifecycle event.<br/><br/>The hr_ActivitySet API requires the HR Lifecycle Events plugin\n      (com.sn_hr_lifecycle_events).<br/><br/>See also <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-hr-service-delivery/page/product/human-resources/concept/understanding-enterprise-onboarding-and-transitions.html\" target=\"_blank\">Understanding Enterprise Onboarding and\n        Transitions</a>.",
                "short_description": "Handles lifecycle event activity set cases.",
                "identifier": "hr_ActivitySetAPI",
                "name": "hr_ActivitySet",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "hrAS-hr_ActivitySet",
                        "short_description": "Instantiates an instance of the hr_ActivitySet class.",
                        "description": "",
                        "name": "hr_ActivitySet()",
                        "type": "Constructor",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "createLECaseByService_S_O",
                        "short_description": "Creates a lifecycle event case based on a specified HR service.",
                        "description": "",
                        "name": "createLECaseByService(String hrService, Object caseValues)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var caseValues = {\n              âsubject_personâ: â62826bf03710200044e0bfc8bcbe5df1â,\n              âopened_forâ: â0e826bf03710200044e0bfc8bcbe5d7câ,\n              âsubject_person_jobâ: âf8d56900587d3700964f4efae452b3dbâ,\n              âlocationâ: â25ab9d1d0a0a0bb300537fd25687439dâ,\n              âdepartmentâ: â93b25282c0a8000b0b55c8ab34e2f1e6â,\n              âsubject_person_hr_profileâ: â330370019f22120047a2d126c42e7012â,\n              âshort_descriptionâ: âShort descriptionâ,\n              âstateâ: 10\n          };\n\n  var activity = new sn_hr_le.hr_ActivitySet();\n  var createCase = new activity.createLECaseByService(â4719647c67a60300132a6c3b5685ef16â, caseValues);",
                                "description": "Output includes summary with Operation Table and Row Count columns. Click the link in the\n        row count column adjacent sn_hr_le_case table to view the new case."
                            }
                        ],
                        "params": [
                            {
                                "name": "hrService",
                                "type": "String",
                                "description": "Sys ID of HR service in the HR Services [sn_hr_core_service] table to be\n                assigned to the lifecycle event case."
                            },
                            {
                                "name": "caseValues",
                                "type": "Object",
                                "description": "Key-value pairs containing a value for each case field."
                            },
                            {
                                "name": "caseValues.subject_person",
                                "type": "String",
                                "description": "Sys ID of subject person's name in the User [sys_user] table."
                            },
                            {
                                "name": "caseValues.opened_for",
                                "type": "String",
                                "description": "Sys ID of case opened for subject person in the Users [sys_user] table."
                            },
                            {
                                "name": "caseValues.subject_person_job",
                                "type": "String",
                                "description": "Sys ID of subject person's Business title in the Jobs [sn_hr_core_job]\n                table."
                            },
                            {
                                "name": "caseValues.location",
                                "type": "String",
                                "description": "Sys ID of subject person's location in HR profile in the Locations\n                [cmn_location] table."
                            },
                            {
                                "name": "caseValues.department",
                                "type": "String",
                                "description": "Sys ID of subject person's department in HR profile in the Departments\n                [cmn_department] table."
                            },
                            {
                                "name": "caseValues.subject_person_hr_profile",
                                "type": "String",
                                "description": "Sys ID of subject person's HR profile in the HR Profiles [sn_hr_core_profile]\n                table."
                            },
                            {
                                "name": "caseValues.short_description",
                                "type": "String",
                                "description": "Case description."
                            },
                            {
                                "name": "caseValues.state",
                                "type": "Number",
                                "description": "Number representing uniquely-defined custom case state."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "Sys ID of the created case in the HR Lifecycle Events Cases [sn_hr_le_case]\n                table."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "hrAS-hasActiveCaseByService_S_S_S",
                        "short_description": "Checks for a case matching the specified combination of subject person user, HR\n    service, and job.",
                        "description": "",
                        "name": "hasActiveCaseByService(String spUser, String hrService, String jobId)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var userId = '62826bf03710200044e0bfc8bcbe5df1'; //Abel Tuter\nvar hrServiceId = '64fa4c53534222003066a5f4a11c0875'; //Onboarding HR Service\nvar jobId = '3D62826bf03710200044e0bfc8bcbe5df1'; // Sample Job sys_id for the example\n\nvar activity = new sn_hr_le.hr_ActivitySet();\n\nvar hasActiveLECase = activity.hasActiveCaseByService(userId, hrServiceId, jobId);\n\ngs.info('User has an active HR case: ' + hasActiveLECase);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "spUser",
                                "type": "String",
                                "description": "Sys ID of subject person user in the Users [sys_user] table."
                            },
                            {
                                "name": "hrService",
                                "type": "String",
                                "description": "Sys ID of HR service in the HR Services [sn_hr_core_service] table."
                            },
                            {
                                "name": "jobId",
                                "type": "String",
                                "description": "Sys ID of subject user's job title in the HR Services [sn_hr_core_service]\n                table."
                            }
                        ],
                        "return": {
                            "type": "Boolean",
                            "description": "True if matching case exists, false otherwise."
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "The hr_ActivityUtils script include requires the HR Lifecycle Events plugin\n      (com.sn_hr_lifecycle_events).",
                "short_description": "Enables creating HR cases from a record producer.",
                "identifier": "hr_ActivityUtilsAPI",
                "name": "hr_ActivityUtils",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "hrAU-createCaseFromProducer_GR_O_S",
                        "short_description": "Creates a case from a record producer and service. This method is intended to be called\n    as-is to create a producer and does not require supplying data.",
                        "description": "<p>The following variables can be configured in a record producer to provide additional\n        capabilities as follows:<ul class=\"ul\" id=\"hrAU-createCaseFromProducer_GR_O_S__ul_jhc_rj2_h3b\">\n          <li class=\"li\"><samp class=\"ph codeph\">job</samp> â References sn_hr_core_job and maps to subject_person_job in an\n            HR case</li>\n\n          <li class=\"li\"><samp class=\"ph codeph\">opened_for</samp> â References sys_user and maps opened_for in an HR\n            case</li>\n\n          <li class=\"li\"><samp class=\"ph codeph\">concurrent_job</samp> â If the record producer includes this variable (by\n            activating checkbox) and parameters have job information, creates a new job in\n            sn_hr_core_job\n            table     </li>\n\n        </ul></p>",
                        "name": "createCaseFromProducer(GlideRecord current, Object producer, String cat_item.sys_id)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "new sn_hr_core.hr_ActivityUtils(current).createCaseFromProducer(producer, cat_item.sys_id);",
                                "description": "This method is intended to be called as-is to create a producer and does not require\n        supplying data."
                            }
                        ],
                        "params": [
                            {
                                "name": "current",
                                "type": "GlideRecord",
                                "description": "GlideRecord for case to be created."
                            },
                            {
                                "name": "producer",
                                "type": "Object",
                                "description": "Comma-separated key value pair containing data as questions and answers that\n                are automatically provided when a user submits an answer to a record producer\n                question."
                            },
                            {
                                "name": "cat_item.sys_id",
                                "type": "String",
                                "description": "Looks up the HR service of case being created and variable names to populate\n                the description."
                            }
                        ],
                        "return": {
                            "type": "Object",
                            "description": "New case in related table, varies by product."
                        },
                        "extras": []
                    }
                ]
            }
        ]
    },
    {
        "identifier": "sn_hw-namespace",
        "namespace": "sn_hw",
        "classes": [
            {
                "description": "It supports the ability to return a GlideRecord to a previous update count (walked\n      GlideRecord) with the appropriate GlideElements populated. After the walked GlideRecord is\n      retrieved, the API provides the ability to move forward and backward the update numbers\n      navigating through its historical updates.<br/><br/>To use this class in scoped and global applications, use the <span class=\"keyword parmname\">sn_hw</span>\n      namespace identifier. The History Walker plugin (com.glide.history_walker) that is enabled by\n      default is required to access the <span class=\"keyword apiname\">HistoryWalker</span> API.<div class=\"note note\"><span class=\"notetitle\">Note:</span> For offline\n        updates, the <span class=\"keyword apiname\">HistoryWalker</span> API is initiated automatically and the only\n        two methods that you can use are: <span class=\"keyword apiname\">walkTo()</span> (the input argument for this\n        method can only be zero) and <span class=\"keyword apiname\">walkForward()</span>. Other available methods\n        cannot be invoked for offline updates.</div><br/><br/>The <span class=\"keyword apiname\">HistoryWalker</span> API provides two ways to retrieve the audit data:<ul class=\"ul\" id=\"c_HistoryWalkerScopedGlobal__ul_frp_f3t_qbb\">\n        <li class=\"li\">Using History Set: A History Set entry is created (if not available or not up to date)\n          from the data in the Sys Audit [sys_audit] table for the record that you are going to walk\n          through. The History Set table contains records (History Lines) with the actual changes to\n          field values that occurred. Methods of the <span class=\"keyword apiname\">HistoryWalker</span> API retrieve\n          the history data from the generated History Lines, instead of querying the sys_audit\n          table. </li>\n\n        <li class=\"li\">Using Sys Audit table: In this case, the <span class=\"keyword apiname\">HistoryWalker</span> API extracts\n          data directly querying the sys_audit table.</li>\n\n      </ul><br/><br/>By default, it populates the data to support the <span class=\"keyword apiname\">changes()</span>,\n        <span class=\"keyword apiname\">changesFrom()</span>, and <span class=\"keyword apiname\">changesTo()</span> methods in the walked\n      record, as well as provides record and field level security. Additionally, it can enable\n      journal fields and variables to be also populated in the walked GlideRecord when walking\n      through the updates.<br/><br/>This API enables you to:<br/><br/><li class=\"li\">Apply the appropriate history/audit data to get an existing GlideRecord to the state it\n        was in a specific update count.</li>\n\n      <li class=\"li\">Instruct the <span class=\"keyword apiname\">HistoryWalker</span> API to use sys_audit table instead of\n        sys_history_set/sys_history_line tables to retrieve its data.</li>\n\n      <li class=\"li\">Turn off row-level access control.</li>\n\n      <li class=\"li\">Turn off field-level access control.</li>\n\n      <li class=\"li\">Turn off retrieval and processing of âchangesâ data.</li>\n\n      <li class=\"li\">Enable journal fields.</li>\n\n      <li class=\"li\">Enable variables.</li>",
                "short_description": "The <span class=\"keyword apiname\">HistoryWalker</span> API uses the audit/history tables to generate a\n    historical version of an existing record.",
                "identifier": "c_HistoryWalkerScopedGlobal",
                "name": "HistoryWalker - Scoped, Global",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "r_HW-HistoryWalker_S_S",
                        "short_description": "Fetches the database record based on the parameters, using the History Sets to retrieve\n    the historic data.",
                        "description": "",
                        "name": "HistoryWalker(String tableName, String sysId)",
                        "type": "Constructor",
                        "examples": [
                            {
                                "script": "var incGr = new GlideRecord('incident');\nincGr.get('number', 'INC0000015');\n\nvar hw = new sn_hw.HistoryWalker(incGr.getTableName(), incGr.getUniqueValue());\nif (hw.walkTo(3)) {\n    var oldPriority = hw.getWalkedRecord().priority;\n    gs.info('Incident priority in update number ' + hw.getUpdateNumber() + ' was ' + oldPriority);\n} else\n    gs.info('Incident does not have update number 3');",
                                "description": ":"
                            }
                        ],
                        "params": [
                            {
                                "name": "tableName",
                                "type": "String",
                                "description": "Name of table containing the record to retrieve."
                            },
                            {
                                "name": "sydId",
                                "type": "String",
                                "description": "sys_id of the record to retrieve."
                            }
                        ],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_HW-HistoryWalker_S_S_B",
                        "short_description": "Fetches the database record based on the parameters, using the History Sets or Audit\n    data to retrieve the historic data, depending on the third parameter.",
                        "description": "",
                        "name": "HistoryWalker(String tableName, String sysId, Boolean useAudit)",
                        "type": "Constructor",
                        "examples": [
                            {
                                "script": "var incGr = new GlideRecord('incident');\nincGr.get('number', 'INC0000015');\n\nvar hw = new sn_hw.HistoryWalker(incGr.getTableName(), incGr.getUniqueValue(), true);\nif (hw.walkTo(3)) {\n    var oldPriority = hw.getWalkedRecord().priority;\n    gs.info('Incident priority in update number ' + hw.getUpdateNumber() + ' was ' + oldPriority);\n} else\n    gs.info('Incident does not have update number 3');\n",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "tableName",
                                "type": "String",
                                "description": "Name of table containing the record to retrieve."
                            },
                            {
                                "name": "sydId",
                                "type": "String",
                                "description": "sys_id of the record to retrieve."
                            },
                            {
                                "name": "useAudit",
                                "type": "Boolean",
                                "description": "<ul class=\"ul\" id=\"r_HW-HistoryWalker_S_S_B__ul_jvm_pq5_qbb\">\n                  <li class=\"li\">If set to true, uses audit data to retrieve historic date.</li>\n\n                  <li class=\"li\">If set to false,  uses history set to retrieve historic date.</li>\n\n                </ul>"
                            }
                        ],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "HW-getUpdateNumber",
                        "short_description": "Gets the update number of the current walked glide record.",
                        "description": "",
                        "name": "getUpdateNumber()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var incGr = new GlideRecord('incident');\nincGr.get('number', 'INC0000015');\n\nvar hw = new sn_hw.HistoryWalker(incGr.getTableName(), incGr.getUniqueValue());\nhw.walkTo(3);\ngs.info('Update number: ' + hw.getUpdateNumber());",
                                "description": ":"
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "int",
                            "description": "Current update number or, -1 if record is not found"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "HW-getWalkedRecord",
                        "short_description": "Gets the record filled with the history/audit data after walking to an update\n    number.",
                        "description": "",
                        "name": "getWalkedRecord()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var incGr = new GlideRecord('incident');\nincGr.get('number', 'INC0000015');\n\nvar hw = new sn_hw.HistoryWalker(incGr.getTableName(), incGr.getUniqueValue());\nhw.walkTo(0);\nvar walkedRecord = hw.getWalkedRecord();\ngs.info('Priority in update number 0: ' + walkedRecord.priority);\nhw.walkTo(1);\nwalkedRecord = hw.getWalkedRecord();\ngs.info('Short description in update number 1: ' + walkedRecord.short_description);",
                                "description": ":"
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "GlideRecord",
                            "description": "The walked GlideRecord."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "HW-getWalkedRecordCopy",
                        "short_description": "Returns a copy of the record filled with the history/audit data after walking to an\n    update number.",
                        "description": "<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> The <span class=\"keyword apiname\">getWalkedRecord()</span> API might modify the obtained walkedRecord\n          after walking to another update number. The <span class=\"keyword apiname\">getWalkedRecordCopy()</span> API\n          gets a clone to the walked record to prevent that.</div></p>",
                        "name": "getWalkedRecordCopy()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var incGr = new GlideRecord('incident');\nincGr.get('number', 'INC0000015');\n\nvar walkedRecord = [];\nvar hw = new sn_hw.HistoryWalker(incGr.getTableName(), incGr.getUniqueValue());\nhw.walkTo(0);\nwalkedRecord[0] = hw.getWalkedRecordCopy();\nhw.walkTo(1);\nwalkedRecord[1] = hw.getWalkedRecordCopy();\n\ngs.info('Priority in update number 0: ' + walkedRecord[0].priority);\ngs.info('Short description in update number 1: ' + walkedRecord[1].short_description);\n",
                                "description": ":"
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "GlideRecord",
                            "description": "A copy of the walked GlideRecord."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "HW-isFieldLevelSecurity",
                        "short_description": "Specifies if the record-level read access is applied on the record when retrieving from\n    the database.",
                        "description": "",
                        "name": "isFieldLevelSecurity()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var incGr = new GlideRecord('incident');\nincGr.get('number', 'INC0000015');\n\nvar hw = new sn_hw.HistoryWalker(incGr.getTableName(), incGr.getUniqueValue());\ngs.info('Field level security is active: ' + hw.isFieldLevelSecurity());",
                                "description": ":"
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "Returns true if field level security is enabled, else returns false."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "HW-isRecordLevelSecurity",
                        "short_description": "Specifies if the record-level read access is applied on the record when retrieving from\n    the database.",
                        "description": "",
                        "name": "isRecordLevelSecurity()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var incGr = new GlideRecord('incident');\nincGr.get('number', 'INC0000015');\n\nvar hw = new sn_hw.HistoryWalker(incGr.getTableName(), incGr.getUniqueValue());\ngs.info('Record level security is active: ' + hw.isRecordLevelSecurity());\n",
                                "description": ":"
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "Returns true if the record-level security is enabled, else returns\n                false."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "HW-isWithChanges",
                        "short_description": "Specifies if any of the methods that walk the record from one update to another,\n    support the âchangesâ data for each element.",
                        "description": "",
                        "name": "isWithChanges()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var incGr = new GlideRecord('incident');\nincGr.get('number', 'INC0000015');\n\nvar hw = new sn_hw.HistoryWalker(incGr.getTableName(), incGr.getUniqueValue());\ngs.info('Changes is active: ' + hw.isWithChanges());",
                                "description": ":"
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "Returns true if the changes support is enabled, else returns false."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "HW-isWithJournalFields",
                        "short_description": "Specifies if journal type fields are populated from the historical values.",
                        "description": "",
                        "name": "isWithJournalFields()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var incGr = new GlideRecord('incident');\nincGr.get('number', 'INC0000015');\n\nvar hw = new sn_hw.HistoryWalker(incGr.getTableName(), incGr.getUniqueValue());\ngs.info('Populating journal fields is active: ' + hw. isWithJournalFields());\n",
                                "description": ":"
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "Returns true if journal fields are populated, else returns false."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "HW-isWithVariables",
                        "short_description": "Specifies if values are set for variables that are recorded in the history.",
                        "description": "",
                        "name": "isWithVariables()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var incGr = new GlideRecord('incident');\nincGr.get('number', 'INC0000015');\n\nvar hw = new sn_hw.HistoryWalker(incGr.getTableName(), incGr.getUniqueValue());\ngs.info('Populating variables is active: ' + hw. isWithVariables());",
                                "description": ":"
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "Returns true if including values for variables, else returns false."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "HW-setFieldLevelSecurity_B",
                        "short_description": "Sets the field-level read access on each element before setting the historical value of\n    that element in the GlideRecord. If the field-level security is enabled, it prevents the API to\n    populate the fields of the walked record that the user of the API does not have access\n    to.",
                        "description": "",
                        "name": "setFieldLevelSecurity(Boolean fieldLevelSecurity)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var incGr = new GlideRecord('incident');\nincGr.get('number', 'INC0000015');\n\nvar hw = new sn_hw.HistoryWalker(incGr.getTableName(), incGr.getUniqueValue());\nhw.setFieldLevelSecurity(false);\nhw.walkTo(0);\n",
                                "description": ":"
                            }
                        ],
                        "params": [
                            {
                                "name": "fieldLevelSecurity",
                                "type": "Boolean",
                                "description": "If set to true, field-level security is enabled. The default value is\n                true."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "HW-setRecordLevelSecurity_B",
                        "short_description": "Sets the record-level read access on the record when retrieving from the database. The\n    record-level security prevents the API to retrieve the walked record if the user of the API does\n    not have access to the GlideRecord.",
                        "description": "",
                        "name": "setRecordLevelSecurity(Boolean recordLevelSecurity)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var incGr = new GlideRecord('incident');\nincGr.get('number', 'INC0000015');\n\nvar hw = new sn_hw.HistoryWalker(incGr.getTableName(), incGr.getUniqueValue());\nhw.setRecordLevelSecurity(false);\nhw.walkTo(0);\n",
                                "description": ":"
                            }
                        ],
                        "params": [
                            {
                                "name": "recordLevelSecurity",
                                "type": "Boolean",
                                "description": "If set to true, record-level read access security is enabled. The default value\n                is true."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_HW-setWithChanges_B",
                        "short_description": "Sets the âchangesâ data support for each element for a method that walks the record\n    from one update to another.",
                        "description": "",
                        "name": "setWithChanges(Boolean withChanges)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var hw = new sn_hw.HistoryWalker(incGr.getTableName(), incGr.getUniqueValue());\nhw.walkTo(0);\ndo {\n    printChangedFields(hw);\n} while (hw.walkForward());\n\nfunction printChangedFields(hw) {\n    var walkedGr = hw.getWalkedRecord();\n    var fields = GlideScriptRecordUtil.get(walkedGr).getChangedFieldNames();\n    gs.info(\"Fields changed at update \" + hw.getUpdateNumber() + \" were:\");\n    for (var j = 0; j &lt; fields.size(); j++)\n        gs.info(\" \" + fields.get(j));\n    gs.info(\"\");\n}\n",
                                "description": ": With the Changes data support"
                            }
                        ],
                        "params": [
                            {
                                "name": "withChanges",
                                "type": "Boolean",
                                "description": "If set to true, the âchangesâ data is supported for each element. The default\n                value is true."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "HW-setWithJournalFields_B",
                        "short_description": "Specifies if journal type fields are populated from the historical values.",
                        "description": "",
                        "name": "setWithJournalFields(Boolean withJournalFields)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var incGr = new GlideRecord('incident');\nincGr.get('number', 'INC0000015');\n\nvar hw = new sn_hw.HistoryWalker(incGr.getTableName(), incGr.getUniqueValue());\nhw.setWithJournalFields(true);\nif (hw.walkTo(0)) {\n    var workNotes = hw.getWalkedRecord().work_notes;\n    gs.info('Work Notes in update number ' + hw.getUpdateNumber() + ' was ' + workNotes);\n}\n",
                                "description": ":"
                            }
                        ],
                        "params": [
                            {
                                "name": "withJournalFields",
                                "type": "Boolean",
                                "description": "If set to true, include journal-type fields. Th default value is false."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "HW-setWithVariables_B",
                        "short_description": "Specifies if variables are populated from the historical values.",
                        "description": "",
                        "name": "setWithVariables(Boolean withVariables)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var incGr = new GlideRecord('incident');\nincGr.get('number', 'INC0000015');\n\nvar hw = new sn_hw.HistoryWalker(incGr.getTableName(), incGr.getUniqueValue());\nhw.setWithVariables(true);\nhw.walkTo(0);\nif (hw.walkTo(0)) {\n    var varUrgency = hw.getWalkedRecord().variables.urgency;\n    gs.info('Variable Urgency in update number ' + hw.getUpdateNumber() + ' was ' + varUrgency);\n}\n",
                                "description": ":"
                            }
                        ],
                        "params": [
                            {
                                "name": "withVariables",
                                "type": "Boolean",
                                "description": "If set to true, values are populated for variables. The default value is\n                false."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "HW-walkBackward",
                        "short_description": "Applies the appropriate history/audit data to get a walked GlideRecord to the state\n    when it was one update number backward. If the previous update count is missing from the\n    history/audit data, it will walk to the previous available update count.",
                        "description": "",
                        "name": "walkBackward()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var incGr = new GlideRecord('incident');\nincGr.get('number', 'INC0000015');\n\nvar hw = new sn_hw.HistoryWalker(incGr.getTableName(), incGr.getUniqueValue());\nhw.walkTo(incnow_GR.sys_mod_count);\ndo {\n    var oldPriority = hw.getWalkedRecord().priority;\n    gs.info('Incident priority in update number ' + hw.getUpdateNumber() + ' was ' + oldPriority);\n} while (hw.walkBackward())\n",
                                "description": ":"
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "Returns true if walking to the specified update number was possible. Else,\n                returns false, for example if already walked to the update number 0."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "HW-walkForward",
                        "short_description": "Applies the appropriate history/audit data to get a walked GlideRecord to the state\n    when it was one update number forward. If next update count is missing from the history/audit\n    data, it will walk to the next available update count.",
                        "description": "",
                        "name": "walkForward()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var incGr = new GlideRecord('incident');\nincGr.get('number', 'INC0000015');\n\nvar hw = new sn_hw.HistoryWalker(incGr.getTableName(), incGr.getUniqueValue());\nhw.walkTo(0);\ndo {\n    var oldPriority = hw.getWalkedRecord().priority;\n    gs.info('Incident priority in update number ' + hw.getUpdateNumber() + ' was ' + oldPriority);\n} while (hw.walkForward())\n",
                                "description": ":"
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "Returns true if walking to the specified update number was possible. Else,\n                returns false, for example if already walked to the GlideRecord update\n                count."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "HW-walkTo_B",
                        "short_description": "Applies the appropriate history/audit data to get a GlideRecord to the state it was in\n    a specific update count. Use getWalkedRecord() or getWalkedRecordCopy() after walking to an\n    update number to retrieve the âwalkedâ GlideRecord.",
                        "description": "",
                        "name": "walkTo(int updateCount)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var incGr = new GlideRecord('incident');\nincGr.get('number', 'INC0000015');\n\nvar hw = new sn_hw.HistoryWalker(incGr.getTableName(), incGr.getUniqueValue());\nif (hw.walkTo(3)) {\n    var oldPriority = hw.getWalkedRecord().priority;\n    gs.info('Incident priority in update number ' + hw.getUpdateNumber() + ' was ' + oldPriority);\n} else\n    gs.info('Incident does not have update number 3');",
                                "description": ":"
                            }
                        ],
                        "params": [
                            {
                                "name": "updateCount",
                                "type": "Integer",
                                "description": "The update number to walk to."
                            }
                        ],
                        "return": {
                            "type": "Boolean",
                            "description": "true if walking to the specified update number was possible, false otherwise,\n                for example if the requested update is greater than the update count of the\n                GlideRecord, or if there is no history/audit data of the requested update\n                number"
                        },
                        "extras": []
                    }
                ]
            }
        ]
    },
    {
        "identifier": "sn_ih-namespace",
        "namespace": "sn_ih",
        "classes": [
            {
                "description": "<p class=\"p\"><span class=\"ph\">Use these methods in the <span class=\"ph\">Flow Designer</span> script step with the <span class=\"keyword parmname\">sn_ih</span> namespace\n                identifier. For example, you can use this API to create a JSON payload in the <span class=\"ph\">Flow Designer</span> Script step and pass the returned value to the REST step\n                to send the request to a third-party service. For more information, see the <span class=\"ph\">Flow Designer</span>\n                <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-servicenow-platform/page/administer/flow-designer/reference/javascript-step-action-designer.html\" target=\"_blank\">Script\n              step</a>.</span></p>\n\n      <p class=\"p\"><span class=\"ph\">You can only use this API within the <span class=\"ph\">Flow Designer</span> environment.</span></p>\n\n      <p class=\"p\">To use this class, you must call the <span class=\"keyword apiname\">build()</span> method in the\n          <span class=\"keyword apiname\">JSONStreamingBuilder</span> class to return a JSONStreamingAPI object. See\n          <a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/sn_ih-namespace/JSONStreamingBuilderScopedAPI\" title=\"Create a builder object used to build a large streaming JSON payload to use in a REST or SOAP request to send bulk data to a third-party API. You can also create the payload as a JSON string for a non-streaming option.\">JSONStreamingBuilder</a>.</p><br/><br/><h2 class=\"title sectiontitle\">API call order</h2>\n      \n      <p class=\"p\">Generate JSON payloads using these APIs in the following order:</p>\n\n      <div class=\"p\">\n                <dl class=\"dl\">\n                  \n                    <dt class=\"dt dlterm\"><span class=\"keyword apiname\">JSONStreamingBuilder</span>: Creates a builder object</dt>\n\n                    <dd class=\"dd\">Use these methods in the following order to create a builder object:<div class=\"p\">\n                        <ol class=\"ol\" id=\"JSONStreamingAPIScopedAPI__d89554e221\">\n                          <li class=\"li\"><span class=\"keyword apiname\">JSONStreamingBuilder()</span>: <span class=\"ph\" id=\"JSONStreamingAPIScopedAPI__d89554e227\">Instantiates the JSONStreamingBuilder\n                              object.</span></li>\n\n                          <li class=\"li\"><span class=\"keyword apiname\">withAttachment()</span>: Optional. <span class=\"ph\" id=\"JSONStreamingAPIScopedAPI__d89554e234\">Creates the JSON object as a streaming\n                              attachment and stores it in the Streaming Attachments\n                              [streaming_attachment] table. If you do not call this method, the API\n                              creates the payload as a JSON string.</span></li>\n\n                          <li class=\"li\"><span class=\"keyword apiname\">expiresAt()</span>: Optional. <span class=\"ph\" id=\"JSONStreamingAPIScopedAPI__d89554e241\">Sets a\n                              time when the attachment expires. Must also call the\n                                <span class=\"keyword apiname\">withAttachment()</span> method.</span></li>\n\n                          <li class=\"li\"><span class=\"keyword apiname\">build()</span>: <span class=\"ph\" id=\"JSONStreamingAPIScopedAPI__d89554e251\">Returns a JSONStreamingAPI\n                              object.</span></li>\n\n                        </ol>\n\n                      </div>\n</dd>\n\n                  \n                  \n                    <dt class=\"dt dlterm\"><span class=\"keyword apiname\">JSONStreamingAPI</span>: Builds the JSON payload</dt>\n\n                    <dd class=\"dd\">Use these methods in the following order to create the JSON payload:<div class=\"p\">\n                        <ol class=\"ol\" id=\"JSONStreamingAPIScopedAPI__d89554e268\">\n                          <li class=\"li\"><span class=\"keyword apiname\">startObject()</span>: <span class=\"ph\" id=\"JSONStreamingAPIScopedAPI__d89554e274\">Creates the\n                              parent JSON object.</span></li>\n\n                          <li class=\"li\">Methods to generate the JSON key-value pairs, such as\n                              <span class=\"keyword apiname\">writeFieldName()</span>, <span class=\"keyword apiname\">writeString()</span>,\n                            and <span class=\"keyword apiname\">writeNumberField()</span>.</li>\n\n                          <li class=\"li\"><span class=\"keyword apiname\">endObject()</span>: <span class=\"ph\" id=\"JSONStreamingAPIScopedAPI__d89554e293\">Closes the parent\n                              JSON object.</span></li>\n\n                          <li class=\"li\"><span class=\"keyword apiname\">getJSONString()</span> or\n                              <span class=\"keyword apiname\">getAttachmentId()</span>: Returns the JSON string or\n                            attachment ID that you created. </li>\n\n                          <li class=\"li\"><span class=\"keyword apiname\">close()</span>: <span class=\"ph\" id=\"JSONStreamingAPIScopedAPI__d89554e308\">Closes the JSONStreamingAPI\n                              object.</span></li>\n\n                        </ol>\n\n                      </div>\n</dd>\n\n                  \n                </dl>\n\n              </div><br/><br/><h2 class=\"title sectiontitle\">Size limits</h2>\n      \n      <p class=\"p\">Payloads generated through this API cannot exceed these size limits:</p>\n\n      <div class=\"p\">\n        <ul class=\"ul\" id=\"JSONStreamingAPIScopedAPI__ul_syy_lsw_3lb\">\n                <li class=\"li\">Attachments: 200 MB</li>\n\n                <li class=\"li\">Strings: 5 MB</li>\n\n              </ul>\n\n      </div><br/><br/><h2 class=\"title sectiontitle\">Example</h2>\n      \n      <p class=\"p\">This example create a JSON object and stores it in the Attachment [sys_attachment] table\n        with a defined expiration date. You can use this option to create payloads under 5 MB.</p>\n\n      <div class=\"p\">\n        <pre><code class='language-javascript'>try {\n  var ttl = new GlideDateTime(\"2011-01-01 12:00:00\");\n  var builder = new sn_ih.JSONStreamingBuilder()\n    .withAttachment() // Creates the JSON object in streaming mode within an attachment.\n    .expiresAt(ttl) // Sets an expiration date for the attachment.\n    .build(); // Creates the JSONStreamingAPI object. \n\n  builder.startObject()  // Begins generating the JSON object.\n\t.writeFieldName(\"firstName\")  // Adds a \"firstName\" field \n\t.writeString(\"John\")          // Writes the value of the \"firstName\" field\n\t.writeFieldName(\"lastName\")\n\t.writeString(\"Smith\")\n\t.writeNumberField(\"age\",\"25\") // Write a number field named \"age\" with value \"25\"\n\t.writeFieldName(\"address\")\n\t.startObject()                // Start a new object nested under the parent object\n\t\t.writeStringField(\"streetAddress\", \"21 2nd Street\")\n\t\t.writeStringField(\"city\", \"Santa Clara\")\n\t\t.writeStringField(\"state\", \"CA\")\n\t\t.writeStringField(\"postalCode\", \"11111\")\n\t.endObject()\n\t.writeFieldName(\"phoneNumber\")\n\t.startArray()                    // Start an array \n\t\t.startObject()               // Add the first object to the array \n\t\t\t.writeFieldName(\"type\")\n\t\t\t.writeString(\"home\")\n\t\t\t.writeFieldName(\"number\")\n\t\t\t.writeString(\"212 555-1234\")\n\t\t.endObject()\n\t\t.startObject()               // Add another object to the array \n\t\t\t.writeFieldName(\"type\")\n\t\t\t.writeString(\"fax\")\n\t\t\t.writeFieldName(\"number\")\n\t\t\t.writeString(\"646 555-4567\")\n\t\t.endObject()\n\t.endArray()\n\t.endObject()\n\n  gs.log(builder.getAttachmentId()); // Returns the sys_id of the attachment.\n} \n\ncatch (err) {\n  gs.log(err);\n} \n\nfinally {\n  builder.close();\n}</code></pre>\n\n      </div>\n\n      <p class=\"p\">Alternatively, this example uses the API in the Script step and creates the payload as a\n        JSON string. You can use this option to create payloads under 5 MB.</p>\n\n      <div class=\"p\">\n        <pre><code class='language-javascript'>(function execute(inputs, outputs) {\n\n  var builder = new sn_ih.JSONStreamingBuilder().build();\n  \n  builder.startObject()\n    .enablePrettyPrint()\n    .writeFieldName(\"firstName\")\n    .writeString(\"John\")\n    .writeFieldName(\"lastName\")\n    .writeString(\"Smith\")\n    .writeNumberField(\"age\",\"25\")\n    .writeFieldName(\"address\")\n    .startObject()\n      .writeStringField(\"streetAddress\", \"21 2nd Street\")\n      .writeStringField(\"city\", \"Santa Clara\")\n      .writeStringField(\"state\", \"CA\")\n      .writeStringField(\"postalCode\", \"11111\")\n    .endObject()\n    .writeFieldName(\"phoneNumber\")\n    .startArray()\n      .startObject()\n        .writeFieldName(\"type\")\n        .writeString(\"home\")\n        .writeFieldName(\"number\")\n        .writeString(\"212 555-1234\")\n      .endObject()\n      .startObject()\n        .writeFieldName(\"type\")\n        .writeString(\"fax\")\n        .writeFieldName(\"number\")\n        .writeString(\"646 555-4567\")\n      .endObject()\n    .endArray()\n    .endObject()\n\n  outputs.payload = builder.getJSONString();\n  \n})(inputs, outputs);</code></pre>\n\n      </div>\n\n      <p class=\"p\">Output:</p>\n\n      <div class=\"p\">\n        <pre><code class='language-javascript'>{\n\"firstName\" : \"John\",\n\"lastName\" : \"Smith\",\n\"age\" : 25,\n\"address\" : {\n  \"streetAddress\" : \"21 2nd Street\",\n  \"city\" : \"Santa Clara\",\n  \"state\" : \"CA\",\n  \"postalCode\" : \"11111\"\n},\n\"phoneNumber\" : [ {\n  \"type\" : \"home\",\n  \"number\" : \"212 555-1234\"\n}, {\n  \"type\" : \"fax\",\n  \"number\" : \"646 555-4567\"\n} ]\n}</code></pre>\n\n      </div>",
                "short_description": "<span class=\"ph\">Build a large streaming JSON payload to use in a\n                REST or SOAP request to send bulk data to a third-party API. You can also create the\n                payload as a JSON string for a non-streaming option.</span>",
                "identifier": "JSONStreamingAPIScopedAPI",
                "name": "JSONStreamingAPI",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "JSA-close",
                        "short_description": "<span class=\"ph\">Closes the JSONStreamingAPI\n                              object.</span> Must call this method to close\n    the stream after building a JSON object.",
                        "description": "",
                        "name": "close()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "try {\n  var ttl = new GlideDateTime(\"2011-01-01 12:00:00\");\n  var builder = new sn_ih.JSONStreamingBuilder()\n    .withAttachment() // Creates the JSON object in streaming mode within an attachment.\n    .expiresAt(ttl) // Sets an expiration date for the attachment.\n    .build(); // Creates the JSONStreamingAPI object. \n\n  builder.startObject()  // Begins generating the JSON object.\n\t.writeFieldName(\"firstName\")  // Adds a \"firstName\" field \n\t.writeString(\"John\")          // Writes the value of the \"firstName\" field\n\t.writeFieldName(\"lastName\")\n\t.writeString(\"Smith\")\n\t.writeNumberField(\"age\",\"25\") // Write a number field named \"age\" with value \"25\"\n\t.writeFieldName(\"address\")\n\t.startObject()                // Start a new object nested under the parent object\n\t\t.writeStringField(\"streetAddress\", \"21 2nd Street\")\n\t\t.writeStringField(\"city\", \"Santa Clara\")\n\t\t.writeStringField(\"state\", \"CA\")\n\t\t.writeStringField(\"postalCode\", \"11111\")\n\t.endObject()\n\t.writeFieldName(\"phoneNumber\")\n\t.startArray()                    // Start an array \n\t\t.startObject()               // Add the first object to the array \n\t\t\t.writeFieldName(\"type\")\n\t\t\t.writeString(\"home\")\n\t\t\t.writeFieldName(\"number\")\n\t\t\t.writeString(\"212 555-1234\")\n\t\t.endObject()\n\t\t.startObject()               // Add another object to the array \n\t\t\t.writeFieldName(\"type\")\n\t\t\t.writeString(\"fax\")\n\t\t\t.writeFieldName(\"number\")\n\t\t\t.writeString(\"646 555-4567\")\n\t\t.endObject()\n\t.endArray()\n\t.endObject()\n\n  gs.log(builder.getAttachmentId()); // Returns the sys_id of the attachment.\n} \n\ncatch (err) {\n  gs.log(err);\n} \n\nfinally {\n  builder.close();\n}",
                                "description": "This example shows how to create a JSON object and store it in the Attachment\n        [sys_attachment] table with a defined expiration date."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "JSA-disablePrettyPrint",
                        "short_description": "Ends pretty print JSON formatting.",
                        "description": "<p>Before calling this method, you must first call <span class=\"keyword apiname\">enablePrettyPrint()</span> to\n        add JSON formatting to a specific section.</p>",
                        "name": "disablePrettyPrint()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "try {\n  var builder = new sn_ih.JSONStreamingBuilder().build();\n\n  builder.startObject()\n    .writeFieldName(\"firstName\")\n    .writeString(\"John\")\n    .writeFieldName(\"lastName\")\n    .writeString(\"Smith\")  \n    .writeNumberField(\"age\",\"25\")\n    .enablePrettyPrint()\n    .writeFieldName(\"address\")\n    .startObject()\n    .writeStringField(\"streetAddress\", \"21 2nd Street\")\n    .writeStringField(\"city\", \"Santa Clara\")\n    .writeStringField(\"state\", \"CA\")\n    .writeStringField(\"postalCode\", \"11111\")\n    .endObject()\n    .disablePrettyPrint()\n    .writeFieldName(\"phoneNumber\")\n    .startArray()\n    .startObject()\n    .writeFieldName(\"type\")\n    .writeString(\"home\")\n    .writeFieldName(\"number\")\n    .writeString(\"212 555-1234\")\n    .endObject()\n    .startObject()\n    .writeFieldName(\"type\")\n    .writeString(\"fax\")\n    .writeFieldName(\"number\")\n    .writeString(\"646 555-4567\")\n    .endObject()\n    .endArray()\n    .endObject()\n\n  gs.log(builder.getJSONString());\n} \n\ncatch (err) {\n  gs.log(\"Exception: \" + err);\n} \n\nfinally {\n  builder.close();\n}",
                                "description": "This example adds pretty print formatting to the <samp class=\"ph codeph\">address</samp> object."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "JSONStreamingAPI",
                            "description": "<span class=\"ph\">Streaming JSON object used to construct the\n              payload.</span>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "JSA-enablePrettyPrint",
                        "short_description": "Adds pretty print formatting to a JSON object, or a section of a JSON object.",
                        "description": "<p>To disable pretty print formatting in a JSON object section, use the\n          <span class=\"keyword apiname\">disablePrettyPrint()</span> method.</p>",
                        "name": "enablePrettyPrint()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "try {\n  var builder = new sn_ih.JSONStreamingBuilder().build();\n\n  builder.enablePrettyPrint()\n    .startObject()\n    .writeFieldName(\"firstName\")\n    .writeString(\"John\")\n    .writeFieldName(\"lastName\")\n    .writeString(\"Smith\")\n    .writeNumberField(\"age\",\"25\")\n    .writeFieldName(\"address\")\n    .startObject()\n    .writeStringField(\"streetAddress\", \"21 2nd Street\")\n    .writeStringField(\"city\", \"Santa Clara\")\n    .writeStringField(\"state\", \"CA\")\n    .writeStringField(\"postalCode\", \"11111\")\n    .endObject()\n    .writeFieldName(\"phoneNumber\")\n    .startArray()\n    .startObject()\n    .writeFieldName(\"type\")\n    .writeString(\"home\")\n    .writeFieldName(\"number\")\n    .writeString(\"212 555-1234\")\n    .endObject()\n    .startObject()\n    .writeFieldName(\"type\")\n    .writeString(\"fax\")\n    .writeFieldName(\"number\")\n    .writeString(\"646 555-4567\")\n    .endObject()\n    .endArray()\n    .endObject()\n\n  gs.log(builder.getJSONString());\n} \n\ncatch (err) {\n  gs.log(\"Exception: \" + err);\n} \n\nfinally {\n  builder.close();\n}\n",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "JSONStreamingAPI",
                            "description": "<span class=\"ph\">Streaming JSON object used to construct the\n              payload.</span>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "JSA-endArray",
                        "short_description": "Closes an array within the parent JSON object.",
                        "description": "<p>Call the <span class=\"keyword apiname\">startArray()</span> method first to open the array.</p>",
                        "name": "endArray()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "try {\n  var ttl = new GlideDateTime(\"2011-01-01 12:00:00\");\n  var builder = new sn_ih.JSONStreamingBuilder()\n    .withAttachment() // Creates the JSON object in streaming mode within an attachment.\n    .expiresAt(ttl) // Sets an expiration date for the attachment.\n    .build(); // Creates the JSONStreamingAPI object. \n\n  builder.startObject()  // Begins generating the JSON object.\n\t.writeFieldName(\"firstName\")  // Adds a \"firstName\" field \n\t.writeString(\"John\")          // Writes the value of the \"firstName\" field\n\t.writeFieldName(\"lastName\")\n\t.writeString(\"Smith\")\n\t.writeNumberField(\"age\",\"25\") // Write a number field named \"age\" with value \"25\"\n\t.writeFieldName(\"address\")\n\t.startObject()                // Start a new object nested under the parent object\n\t\t.writeStringField(\"streetAddress\", \"21 2nd Street\")\n\t\t.writeStringField(\"city\", \"Santa Clara\")\n\t\t.writeStringField(\"state\", \"CA\")\n\t\t.writeStringField(\"postalCode\", \"11111\")\n\t.endObject()\n\t.writeFieldName(\"phoneNumber\")\n\t.startArray()                    // Start an array \n\t\t.startObject()               // Add the first object to the array \n\t\t\t.writeFieldName(\"type\")\n\t\t\t.writeString(\"home\")\n\t\t\t.writeFieldName(\"number\")\n\t\t\t.writeString(\"212 555-1234\")\n\t\t.endObject()\n\t\t.startObject()               // Add another object to the array \n\t\t\t.writeFieldName(\"type\")\n\t\t\t.writeString(\"fax\")\n\t\t\t.writeFieldName(\"number\")\n\t\t\t.writeString(\"646 555-4567\")\n\t\t.endObject()\n\t.endArray()\n\t.endObject()\n\n  gs.log(builder.getAttachmentId()); // Returns the sys_id of the attachment.\n} \n\ncatch (err) {\n  gs.log(err);\n} \n\nfinally {\n  builder.close();\n}",
                                "description": "This example shows how to create a JSON object and store it in the Attachment\n        [sys_attachment] table with a defined expiration date."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "JSONStreamingAPI",
                            "description": "<span class=\"ph\">Streaming JSON object used to construct the\n              payload.</span>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "JSA-endObject",
                        "short_description": "Closes an object within the parent JSON object.",
                        "description": "<p>Call the <span class=\"keyword apiname\">startObject()</span> method first to open the object.</p>",
                        "name": "endObject()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "try {\n  var ttl = new GlideDateTime(\"2011-01-01 12:00:00\");\n  var builder = new sn_ih.JSONStreamingBuilder()\n    .withAttachment() // Creates the JSON object in streaming mode within an attachment.\n    .expiresAt(ttl) // Sets an expiration date for the attachment.\n    .build(); // Creates the JSONStreamingAPI object. \n\n  builder.startObject()  // Begins generating the JSON object.\n\t.writeFieldName(\"firstName\")  // Adds a \"firstName\" field \n\t.writeString(\"John\")          // Writes the value of the \"firstName\" field\n\t.writeFieldName(\"lastName\")\n\t.writeString(\"Smith\")\n\t.writeNumberField(\"age\",\"25\") // Write a number field named \"age\" with value \"25\"\n\t.writeFieldName(\"address\")\n\t.startObject()                // Start a new object nested under the parent object\n\t\t.writeStringField(\"streetAddress\", \"21 2nd Street\")\n\t\t.writeStringField(\"city\", \"Santa Clara\")\n\t\t.writeStringField(\"state\", \"CA\")\n\t\t.writeStringField(\"postalCode\", \"11111\")\n\t.endObject()\n\t.writeFieldName(\"phoneNumber\")\n\t.startArray()                    // Start an array \n\t\t.startObject()               // Add the first object to the array \n\t\t\t.writeFieldName(\"type\")\n\t\t\t.writeString(\"home\")\n\t\t\t.writeFieldName(\"number\")\n\t\t\t.writeString(\"212 555-1234\")\n\t\t.endObject()\n\t\t.startObject()               // Add another object to the array \n\t\t\t.writeFieldName(\"type\")\n\t\t\t.writeString(\"fax\")\n\t\t\t.writeFieldName(\"number\")\n\t\t\t.writeString(\"646 555-4567\")\n\t\t.endObject()\n\t.endArray()\n\t.endObject()\n\n  gs.log(builder.getAttachmentId()); // Returns the sys_id of the attachment.\n} \n\ncatch (err) {\n  gs.log(err);\n} \n\nfinally {\n  builder.close();\n}",
                                "description": "This example shows how to create a JSON object and store it in the Attachment\n        [sys_attachment] table with a defined expiration date."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "JSONStreamingAPI",
                            "description": "<span class=\"ph\">Streaming JSON object used to construct the\n              payload.</span>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "JSA-getAttachmentId",
                        "short_description": "Returns the sys_id of the attachment record in the Streaming Attachments\n    [streaming_attachment] table that contains the JSON payload.",
                        "description": "<p>You must call the <span class=\"keyword apiname\">withAttachment()</span> method in the\n          <span class=\"keyword apiname\">JSONStreamingBuilder</span> class to save the JSON payload as an attachment\n        before calling this method. See <a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/sn_ih-namespace/JSONStreamingBuilderScopedAPI\" title=\"Create a builder object used to build a large streaming JSON payload to use in a REST or SOAP request to send bulk data to a third-party API. You can also create the payload as a JSON string for a non-streaming option.\">JSONStreamingBuilder</a>.</p>",
                        "name": "getAttachmentId()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "try {\n  var ttl = new GlideDateTime(\"2011-01-01 12:00:00\");\n  var builder = new sn_ih.JSONStreamingBuilder()\n    .withAttachment() // Creates the JSON object in streaming mode within an attachment.\n    .expiresAt(ttl) // Sets an expiration date for the attachment.\n    .build(); // Creates the JSONStreamingAPI object. \n\n  builder.startObject()  // Begins generating the JSON object.\n\t.writeFieldName(\"firstName\")  // Adds a \"firstName\" field \n\t.writeString(\"John\")          // Writes the value of the \"firstName\" field\n\t.writeFieldName(\"lastName\")\n\t.writeString(\"Smith\")\n\t.writeNumberField(\"age\",\"25\") // Write a number field named \"age\" with value \"25\"\n\t.writeFieldName(\"address\")\n\t.startObject()                // Start a new object nested under the parent object\n\t\t.writeStringField(\"streetAddress\", \"21 2nd Street\")\n\t\t.writeStringField(\"city\", \"Santa Clara\")\n\t\t.writeStringField(\"state\", \"CA\")\n\t\t.writeStringField(\"postalCode\", \"11111\")\n\t.endObject()\n\t.writeFieldName(\"phoneNumber\")\n\t.startArray()                    // Start an array \n\t\t.startObject()               // Add the first object to the array \n\t\t\t.writeFieldName(\"type\")\n\t\t\t.writeString(\"home\")\n\t\t\t.writeFieldName(\"number\")\n\t\t\t.writeString(\"212 555-1234\")\n\t\t.endObject()\n\t\t.startObject()               // Add another object to the array \n\t\t\t.writeFieldName(\"type\")\n\t\t\t.writeString(\"fax\")\n\t\t\t.writeFieldName(\"number\")\n\t\t\t.writeString(\"646 555-4567\")\n\t\t.endObject()\n\t.endArray()\n\t.endObject()\n\n  gs.log(builder.getAttachmentId()); // Returns the sys_id of the attachment.\n} \n\ncatch (err) {\n  gs.log(err);\n} \n\nfinally {\n  builder.close();\n}",
                                "description": "This example shows how to create a JSON object and store it in the Attachment\n        [sys_attachment] table with a defined expiration date."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "Sys_id of the attachment record in the Streaming Attachments\n                [streaming_attachment] table that contains the JSON payload."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "JSA-getJSONString",
                        "short_description": "Returns the JSON object as a string.",
                        "description": "<p>To return the JSON object as a string, do not call the <span class=\"keyword apiname\">withAttachment()</span>\n        method in the <span class=\"keyword apiname\">JSONStreamingBuilder</span> class. See <a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/sn_ih-namespace/JSONStreamingBuilderScopedAPI\" title=\"Create a builder object used to build a large streaming JSON payload to use in a REST or SOAP request to send bulk data to a third-party API. You can also create the payload as a JSON string for a non-streaming option.\">JSONStreamingBuilder</a>.</p>",
                        "name": "getJSONString()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "try {\n  var builder = new sn_ih.JSONStreamingBuilder().build();\n\n  builder.startObject()\n    .writeFieldName(\"firstName\")\n    .writeString(\"John\")\n    .writeFieldName(\"lastName\")\n    .writeString(\"Smith\")\n    .writeNumberField(\"age\",\"25\")\n    .writeFieldName(\"address\")\n    .startObject()\n    .writeStringField(\"streetAddress\", \"21 2nd Street\")\n    .writeStringField(\"city\", \"Santa Clara\")\n    .writeStringField(\"state\", \"CA\")\n    .writeStringField(\"postalCode\", \"11111\")\n    .endObject()\n    .writeFieldName(\"phoneNumber\")\n    .startArray()\n    .startObject()\n    .writeFieldName(\"type\")\n    .writeString(\"home\")\n    .writeFieldName(\"number\")\n    .writeString(\"212 555-1234\")\n    .endObject()\n    .startObject()\n    .writeFieldName(\"type\")\n    .writeString(\"fax\")\n    .writeFieldName(\"number\")\n    .writeString(\"646 555-4567\")\n    .endObject()\n    .endArray()\n    .endObject()\n\n  gs.log(builder.getJSONString());\n} \n\ncatch (err) {\n  gs.log(\"Exception: \" + err);\n} \n\nfinally {\n  builder.close();\n}",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "Contains the JSON object built using the\n                <span class=\"keyword apiname\">JSONStreamingAPI</span>."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "JSA-startArray",
                        "short_description": "Opens an array within the parent JSON object.",
                        "description": "<p>Include the <span class=\"keyword apiname\">endArray()</span> method to close the array.</p>",
                        "name": "startArray()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "try {\n  var ttl = new GlideDateTime(\"2011-01-01 12:00:00\");\n  var builder = new sn_ih.JSONStreamingBuilder()\n    .withAttachment() // Creates the JSON object in streaming mode within an attachment.\n    .expiresAt(ttl) // Sets an expiration date for the attachment.\n    .build(); // Creates the JSONStreamingAPI object. \n\n  builder.startObject()  // Begins generating the JSON object.\n\t.writeFieldName(\"firstName\")  // Adds a \"firstName\" field \n\t.writeString(\"John\")          // Writes the value of the \"firstName\" field\n\t.writeFieldName(\"lastName\")\n\t.writeString(\"Smith\")\n\t.writeNumberField(\"age\",\"25\") // Write a number field named \"age\" with value \"25\"\n\t.writeFieldName(\"address\")\n\t.startObject()                // Start a new object nested under the parent object\n\t\t.writeStringField(\"streetAddress\", \"21 2nd Street\")\n\t\t.writeStringField(\"city\", \"Santa Clara\")\n\t\t.writeStringField(\"state\", \"CA\")\n\t\t.writeStringField(\"postalCode\", \"11111\")\n\t.endObject()\n\t.writeFieldName(\"phoneNumber\")\n\t.startArray()                    // Start an array \n\t\t.startObject()               // Add the first object to the array \n\t\t\t.writeFieldName(\"type\")\n\t\t\t.writeString(\"home\")\n\t\t\t.writeFieldName(\"number\")\n\t\t\t.writeString(\"212 555-1234\")\n\t\t.endObject()\n\t\t.startObject()               // Add another object to the array \n\t\t\t.writeFieldName(\"type\")\n\t\t\t.writeString(\"fax\")\n\t\t\t.writeFieldName(\"number\")\n\t\t\t.writeString(\"646 555-4567\")\n\t\t.endObject()\n\t.endArray()\n\t.endObject()\n\n  gs.log(builder.getAttachmentId()); // Returns the sys_id of the attachment.\n} \n\ncatch (err) {\n  gs.log(err);\n} \n\nfinally {\n  builder.close();\n}",
                                "description": "This example shows how to create a JSON object and store it in the Attachment\n        [sys_attachment] table with a defined expiration date."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "JSONStreamingAPI",
                            "description": "<span class=\"ph\">Streaming JSON object used to construct the\n              payload.</span>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "JSA-startArrayField_S",
                        "short_description": "Creates an array within the parent JSON object.",
                        "description": "<p>Surround this method with the <span class=\"keyword apiname\">startArray()</span> and\n          <span class=\"keyword apiname\">endArray()</span> methods to open and close the array.</p>",
                        "name": "startArrayField(String fieldName)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "try {\n  var builder = new sn_ih.JSONStreamingBuilder().build();\n\n  builder.startObject()\n    .writeFieldName(\"firstName\")\n    .writeString(\"John\")\n    .writeFieldName(\"lastName\")\n    .writeString(\"Smith\")\n    .writeNumberField(\"age\",\"25\")\n    .writeFieldName(\"address\")\n    .startObject()\n    .writeStringField(\"streetAddress\", \"21 2nd Street\")\n    .writeStringField(\"city\", \"Santa Clara\")\n    .writeStringField(\"state\", \"CA\")\n    .writeStringField(\"postalCode\", \"11111\")\n    .endObject()\n    .startArrayField(\"phoneNumber\")\n    .startArray()\n    .startObject()\n    .writeFieldName(\"type\")\n    .writeString(\"home\")\n    .writeFieldName(\"number\")\n    .writeString(\"212 555-1234\")\n    .endObject()\n    .startObject()\n    .writeFieldName(\"type\")\n    .writeString(\"fax\")\n    .writeFieldName(\"number\")\n    .writeString(\"646 555-4567\")\n    .endObject()\n    .endArray()\n    .endObject()\n\n  gs.log(builder.getJSONString());\n} \n\ncatch (err) {\n  gs.log(\"Exception: \" + err);\n} \n\nfinally {\n  builder.close();\n}\n",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "fieldName",
                                "type": "String",
                                "description": "The name of the array."
                            }
                        ],
                        "return": {
                            "type": "JSONStreamingAPI",
                            "description": "<span class=\"ph\">Streaming JSON object used to construct the\n              payload.</span>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "JSA-startObject",
                        "short_description": "Opens an object within the parent JSON object.",
                        "description": "<p>Requires the <span class=\"keyword apiname\">endObject()</span> method to close the object.</p>",
                        "name": "startObject()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "try {\n  var ttl = new GlideDateTime(\"2011-01-01 12:00:00\");\n  var builder = new sn_ih.JSONStreamingBuilder()\n    .withAttachment() // Creates the JSON object in streaming mode within an attachment.\n    .expiresAt(ttl) // Sets an expiration date for the attachment.\n    .build(); // Creates the JSONStreamingAPI object. \n\n  builder.startObject()  // Begins generating the JSON object.\n\t.writeFieldName(\"firstName\")  // Adds a \"firstName\" field \n\t.writeString(\"John\")          // Writes the value of the \"firstName\" field\n\t.writeFieldName(\"lastName\")\n\t.writeString(\"Smith\")\n\t.writeNumberField(\"age\",\"25\") // Write a number field named \"age\" with value \"25\"\n\t.writeFieldName(\"address\")\n\t.startObject()                // Start a new object nested under the parent object\n\t\t.writeStringField(\"streetAddress\", \"21 2nd Street\")\n\t\t.writeStringField(\"city\", \"Santa Clara\")\n\t\t.writeStringField(\"state\", \"CA\")\n\t\t.writeStringField(\"postalCode\", \"11111\")\n\t.endObject()\n\t.writeFieldName(\"phoneNumber\")\n\t.startArray()                    // Start an array \n\t\t.startObject()               // Add the first object to the array \n\t\t\t.writeFieldName(\"type\")\n\t\t\t.writeString(\"home\")\n\t\t\t.writeFieldName(\"number\")\n\t\t\t.writeString(\"212 555-1234\")\n\t\t.endObject()\n\t\t.startObject()               // Add another object to the array \n\t\t\t.writeFieldName(\"type\")\n\t\t\t.writeString(\"fax\")\n\t\t\t.writeFieldName(\"number\")\n\t\t\t.writeString(\"646 555-4567\")\n\t\t.endObject()\n\t.endArray()\n\t.endObject()\n\n  gs.log(builder.getAttachmentId()); // Returns the sys_id of the attachment.\n} \n\ncatch (err) {\n  gs.log(err);\n} \n\nfinally {\n  builder.close();\n}",
                                "description": "This example shows how to create a JSON object and store it in the Attachment\n        [sys_attachment] table with a defined expiration date."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "JSONStreamingAPI",
                            "description": "<span class=\"ph\">Streaming JSON object used to construct the\n              payload.</span>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "JSA-writeBoolean_B",
                        "short_description": "Adds a Boolean value to the parent JSON object.",
                        "description": "",
                        "name": "writeBoolean(Boolean state)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "try {\n  var builder = new sn_ih.JSONStreamingBuilder().build();\n\n  builder.startObject()\n    .writeFieldName(\"firstName\")\n    .writeString(\"John\")\n    .writeFieldName(\"lastName\")\n    .writeString(\"Smith\")\n    .writeFieldName(\"activeUser\")\n    .writeBoolean(true)\n    .writeNumberField(\"age\",\"25\")\n    .writeFieldName(\"address\")\n    .startObject()\n    .writeStringField(\"streetAddress\", \"21 2nd Street\")\n    .writeStringField(\"city\", \"Santa Clara\")\n    .writeStringField(\"state\", \"CA\")\n    .writeStringField(\"postalCode\", \"11111\")\n    .endObject()\n    .writeFieldName(\"phoneNumber\")\n    .startArray()\n    .startObject()\n    .writeFieldName(\"type\")\n    .writeString(\"home\")\n    .writeFieldName(\"number\")\n    .writeString(\"212 555-1234\")\n    .endObject()\n    .startObject()\n    .writeFieldName(\"type\")\n    .writeString(\"fax\")\n    .writeFieldName(\"number\")\n    .writeString(\"646 555-4567\")\n    .endObject()\n    .endArray()\n    .endObject()\n\n  gs.log(builder.getJSONString());\n} \n\ncatch (err) {\n  gs.log(\"Exception: \" + err);\n} \n\nfinally {\n  builder.close();\n}",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "state",
                                "type": "Boolean",
                                "description": "The boolean value to add to the parent JSON object.<div class=\"p\">Valid values:<ul class=\"ul\" id=\"JSA-writeBoolean_B__ul_js4_hzs_1mb\">\n                    <li class=\"li\">true</li>\n\n                    <li class=\"li\">false</li>\n\n                  </ul>\n</div>"
                            }
                        ],
                        "return": {
                            "type": "JSONStreamingAPI",
                            "description": "<span class=\"ph\">Streaming JSON object used to construct the\n              payload.</span>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "JSA-writeBooleanField_S_B",
                        "short_description": "Adds a Boolean field and value to the parent JSON object.",
                        "description": "",
                        "name": "writeBooleanField(String fieldName, Boolean value)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "try {\n  var builder = new sn_ih.JSONStreamingBuilder().build();\n\n  builder.startObject()\n    .writeFieldName(\"firstName\")\n    .writeString(\"John\")\n    .writeFieldName(\"lastName\")\n    .writeString(\"Smith\")\n    .writeBooleanField(\"activeUser\", true)\n    .writeNumberField(\"age\",\"25\")\n    .writeFieldName(\"address\")\n    .startObject()\n    .writeStringField(\"streetAddress\", \"21 2nd Street\")\n    .writeStringField(\"city\", \"Santa Clara\")\n    .writeStringField(\"state\", \"CA\")\n    .writeStringField(\"postalCode\", \"11111\")\n    .endObject()\n    .writeFieldName(\"phoneNumber\")  \n    .startArray()\n    .startObject()\n    .writeFieldName(\"type\")\n    .writeString(\"home\")\n    .writeFieldName(\"number\")\n    .writeString(\"212 555-1234\")\n    .endObject()\n    .startObject()\n    .writeFieldName(\"type\")\n    .writeString(\"fax\")\n    .writeFieldName(\"number\")\n    .writeString(\"646 555-4567\")\n    .endObject()\n    .endArray()\n    .endObject()\n\n  gs.log(builder.getJSONString());\n} \n\ncatch (err) {\n  gs.log(\"Exception: \" + err);\n} \n\nfinally {\n  builder.close();\n}",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "fieldName",
                                "type": "String",
                                "description": "The name of the field to add to the parent JSON object."
                            },
                            {
                                "name": "value",
                                "type": "Boolean",
                                "description": "The boolean value to add to the parent JSON object.<div class=\"p\">Valid values:<ul class=\"ul\" id=\"JSA-writeBooleanField_S_B__ul_js4_hzs_1mb\">\n                    <li class=\"li\">true</li>\n\n                    <li class=\"li\">false</li>\n\n                  </ul>\n</div>"
                            }
                        ],
                        "return": {
                            "type": "JSONStreamingAPI",
                            "description": "<span class=\"ph\">Streaming JSON object used to construct the\n              payload.</span>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "JSA-writeFieldName_S",
                        "short_description": "Adds a field name to the parent JSON object.",
                        "description": "",
                        "name": "writeFieldName(String name)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "try {\n  var ttl = new GlideDateTime(\"2011-01-01 12:00:00\");\n  var builder = new sn_ih.JSONStreamingBuilder()\n    .withAttachment() // Creates the JSON object in streaming mode within an attachment.\n    .expiresAt(ttl) // Sets an expiration date for the attachment.\n    .build(); // Creates the JSONStreamingAPI object. \n\n  builder.startObject()  // Begins generating the JSON object.\n\t.writeFieldName(\"firstName\")  // Adds a \"firstName\" field \n\t.writeString(\"John\")          // Writes the value of the \"firstName\" field\n\t.writeFieldName(\"lastName\")\n\t.writeString(\"Smith\")\n\t.writeNumberField(\"age\",\"25\") // Write a number field named \"age\" with value \"25\"\n\t.writeFieldName(\"address\")\n\t.startObject()                // Start a new object nested under the parent object\n\t\t.writeStringField(\"streetAddress\", \"21 2nd Street\")\n\t\t.writeStringField(\"city\", \"Santa Clara\")\n\t\t.writeStringField(\"state\", \"CA\")\n\t\t.writeStringField(\"postalCode\", \"11111\")\n\t.endObject()\n\t.writeFieldName(\"phoneNumber\")\n\t.startArray()                    // Start an array \n\t\t.startObject()               // Add the first object to the array \n\t\t\t.writeFieldName(\"type\")\n\t\t\t.writeString(\"home\")\n\t\t\t.writeFieldName(\"number\")\n\t\t\t.writeString(\"212 555-1234\")\n\t\t.endObject()\n\t\t.startObject()               // Add another object to the array \n\t\t\t.writeFieldName(\"type\")\n\t\t\t.writeString(\"fax\")\n\t\t\t.writeFieldName(\"number\")\n\t\t\t.writeString(\"646 555-4567\")\n\t\t.endObject()\n\t.endArray()\n\t.endObject()\n\n  gs.log(builder.getAttachmentId()); // Returns the sys_id of the attachment.\n} \n\ncatch (err) {\n  gs.log(err);\n} \n\nfinally {\n  builder.close();\n}",
                                "description": "This example shows how to create a JSON object and store it in the Attachment\n        [sys_attachment] table with a defined expiration date."
                            }
                        ],
                        "params": [
                            {
                                "name": "name",
                                "type": "String",
                                "description": "Field name to add to the parent JSON object."
                            }
                        ],
                        "return": {
                            "type": "JSONStreamingAPI",
                            "description": "<span class=\"ph\">Streaming JSON object used to construct the\n              payload.</span>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "JSA-writeNull",
                        "short_description": "Adds a null value to the parent JSON object.",
                        "description": "",
                        "name": "writeNull()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "try {\n  var builder = new sn_ih.JSONStreamingBuilder().build();\n\n  builder.startObject()\n    .writeFieldName(\"firstName\")\n    .writeString(\"John\")\n    .writeFieldName(\"lastName\")\n    .writeString(\"Smith\")\n    .writeFieldName(\"activeUser\")\n    .writeNull()\n    .writeNumberField(\"age\",\"25\")\n    .writeFieldName(\"address\")\n    .startObject()\n    .writeStringField(\"streetAddress\", \"21 2nd Street\")\n    .writeStringField(\"city\", \"Santa Clara\")\n    .writeStringField(\"state\", \"CA\")\n    .writeStringField(\"postalCode\", \"11111\")\n    .endObject()\n    .writeFieldName(\"phoneNumber\")\n    .startArray()\n    .startObject()\n    .writeFieldName(\"type\")\n    .writeString(\"home\")\n    .writeFieldName(\"number\")\n    .writeString(\"212 555-1234\")\n    .endObject()\n    .startObject()\n    .writeFieldName(\"type\")\n    .writeString(\"fax\")\n    .writeFieldName(\"number\")\n    .writeString(\"646 555-4567\")\n    .endObject()\n    .endArray()\n    .endObject()\n\n  gs.log(builder.getJSONString());\n} \n\ncatch (err) {\n  gs.log(\"Exception: \" + err);\n} \n\nfinally {\n  builder.close();\n}",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "JSONStreamingAPI",
                            "description": "<span class=\"ph\">Streaming JSON object used to construct the\n              payload.</span>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "JSA-writeNullField_S",
                        "short_description": "Adds a field with a null value to the parent JSON object.",
                        "description": "",
                        "name": "writeNullField(String fieldName)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "try {\n  var builder = new sn_ih.JSONStreamingBuilder().build();\n\n  builder.startObject()\n    .writeFieldName(\"firstName\")\n    .writeString(\"John\")\n    .writeFieldName(\"lastName\")\n    .writeString(\"Smith\")\n    .writeNullField(\"activeUser\")\n    .writeNumberField(\"age\",\"25\")\n    .writeFieldName(\"address\")\n    .startObject()\n    .writeStringField(\"streetAddress\", \"21 2nd Street\")\n    .writeStringField(\"city\", \"Santa Clara\")\n    .writeStringField(\"state\", \"CA\")\n    .writeStringField(\"postalCode\", \"11111\")\n    .endObject()\n    .writeFieldName(\"phoneNumber\")\n    .startArray()\n    .startObject()\n    .writeFieldName(\"type\")\n    .writeString(\"home\")\n    .writeFieldName(\"number\")\n    .writeString(\"212 555-1234\")\n    .endObject()\n    .startObject()\n    .writeFieldName(\"type\")\n    .writeString(\"fax\")\n    .writeFieldName(\"number\")\n    .writeString(\"646 555-4567\")\n    .endObject()\n    .endArray()  \n    .endObject()\n\n  gs.log(builder.getJSONString());\n} \n\ncatch (err) {\n  gs.log(\"Exception: \" + err);\n} \n\nfinally {\n  builder.close();\n}",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "fieldName",
                                "type": "String",
                                "description": "The name of the null field."
                            }
                        ],
                        "return": {
                            "type": "JSONStreamingAPI",
                            "description": "<span class=\"ph\">Streaming JSON object used to construct the\n              payload.</span>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "JSA-writeNumberField_S_S",
                        "short_description": "Adds a number field and value to the parent JSON object.",
                        "description": "",
                        "name": "writeNumberField(String fieldName, String encodedValue)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "try {\n  var ttl = new GlideDateTime(\"2011-01-01 12:00:00\");\n  var builder = new sn_ih.JSONStreamingBuilder()\n    .withAttachment() // Creates the JSON object in streaming mode within an attachment.\n    .expiresAt(ttl) // Sets an expiration date for the attachment.\n    .build(); // Creates the JSONStreamingAPI object. \n\n  builder.startObject()  // Begins generating the JSON object.\n\t.writeFieldName(\"firstName\")  // Adds a \"firstName\" field \n\t.writeString(\"John\")          // Writes the value of the \"firstName\" field\n\t.writeFieldName(\"lastName\")\n\t.writeString(\"Smith\")\n\t.writeNumberField(\"age\",\"25\") // Write a number field named \"age\" with value \"25\"\n\t.writeFieldName(\"address\")\n\t.startObject()                // Start a new object nested under the parent object\n\t\t.writeStringField(\"streetAddress\", \"21 2nd Street\")\n\t\t.writeStringField(\"city\", \"Santa Clara\")\n\t\t.writeStringField(\"state\", \"CA\")\n\t\t.writeStringField(\"postalCode\", \"11111\")\n\t.endObject()\n\t.writeFieldName(\"phoneNumber\")\n\t.startArray()                    // Start an array \n\t\t.startObject()               // Add the first object to the array \n\t\t\t.writeFieldName(\"type\")\n\t\t\t.writeString(\"home\")\n\t\t\t.writeFieldName(\"number\")\n\t\t\t.writeString(\"212 555-1234\")\n\t\t.endObject()\n\t\t.startObject()               // Add another object to the array \n\t\t\t.writeFieldName(\"type\")\n\t\t\t.writeString(\"fax\")\n\t\t\t.writeFieldName(\"number\")\n\t\t\t.writeString(\"646 555-4567\")\n\t\t.endObject()\n\t.endArray()\n\t.endObject()\n\n  gs.log(builder.getAttachmentId()); // Returns the sys_id of the attachment.\n} \n\ncatch (err) {\n  gs.log(err);\n} \n\nfinally {\n  builder.close();\n}",
                                "description": "This example shows how to create a JSON object and store it in the Attachment\n        [sys_attachment] table with a defined expiration date."
                            }
                        ],
                        "params": [
                            {
                                "name": "fieldName",
                                "type": "String",
                                "description": "The name of the number field."
                            },
                            {
                                "name": "encodedValue",
                                "type": "String",
                                "description": "The value of the number field."
                            }
                        ],
                        "return": {
                            "type": "JSONStreamingAPI",
                            "description": "<span class=\"ph\">Streaming JSON object used to construct the\n              payload.</span>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "JSA-writeRaw_S",
                        "short_description": "Adds a raw value to the parent JSON object.",
                        "description": "",
                        "name": "writeRaw(String text)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "try {\n  var builder = new sn_ih.JSONStreamingBuilder().build();\n\n  builder.startObject()\n    .writeFieldName(\"firstName\")\n    .writeString(\"John\")\n    .writeFieldName(\"lastName\")\n    .writeString(\"Smith\")\n    .writeFieldName(\"filePath\")\n    .writeRaw(\"C:\\Users\\profile\\aboutme.html\")\n    .writeNumberField(\"age\",\"25\")\n    .writeFieldName(\"address\")\n    .startObject()\n    .writeStringField(\"streetAddress\", \"21 2nd Street\")\n    .writeStringField(\"city\", \"Santa Clara\")\n    .writeStringField(\"state\", \"CA\")\n    .writeStringField(\"postalCode\", \"11111\")\n    .endObject()\n    .writeFieldName(\"phoneNumber\")\n    .startArray()\n    .startObject()\n    .writeFieldName(\"type\")\n    .writeString(\"home\")\n    .writeFieldName(\"number\")\n    .writeString(\"212 555-1234\")\n    .endObject()\n    .startObject()\n    .writeFieldName(\"type\")\n    .writeString(\"fax\")\n    .writeFieldName(\"number\")\n    .writeString(\"646 555-4567\")\n    .endObject()\n    .endArray()\n    .endObject()\n\n  gs.log(builder.getJSONString());\n} \n\ncatch (err) {\n  gs.log(\"Exception: \" + err);\n} \n\nfinally {\n  builder.close();\n}",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "text",
                                "type": "String",
                                "description": "Raw text to add to the parent JSON object."
                            }
                        ],
                        "return": {
                            "type": "JSONStreamingAPI",
                            "description": "<span class=\"ph\">Streaming JSON object used to construct the\n              payload.</span>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "JSA-writeString_S",
                        "short_description": "Adds a string value to the parent JSON object.",
                        "description": "",
                        "name": "writeString(String text)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "try {\n  var ttl = new GlideDateTime(\"2011-01-01 12:00:00\");\n  var builder = new sn_ih.JSONStreamingBuilder()\n    .withAttachment() // Creates the JSON object in streaming mode within an attachment.\n    .expiresAt(ttl) // Sets an expiration date for the attachment.\n    .build(); // Creates the JSONStreamingAPI object. \n\n  builder.startObject()  // Begins generating the JSON object.\n\t.writeFieldName(\"firstName\")  // Adds a \"firstName\" field \n\t.writeString(\"John\")          // Writes the value of the \"firstName\" field\n\t.writeFieldName(\"lastName\")\n\t.writeString(\"Smith\")\n\t.writeNumberField(\"age\",\"25\") // Write a number field named \"age\" with value \"25\"\n\t.writeFieldName(\"address\")\n\t.startObject()                // Start a new object nested under the parent object\n\t\t.writeStringField(\"streetAddress\", \"21 2nd Street\")\n\t\t.writeStringField(\"city\", \"Santa Clara\")\n\t\t.writeStringField(\"state\", \"CA\")\n\t\t.writeStringField(\"postalCode\", \"11111\")\n\t.endObject()\n\t.writeFieldName(\"phoneNumber\")\n\t.startArray()                    // Start an array \n\t\t.startObject()               // Add the first object to the array \n\t\t\t.writeFieldName(\"type\")\n\t\t\t.writeString(\"home\")\n\t\t\t.writeFieldName(\"number\")\n\t\t\t.writeString(\"212 555-1234\")\n\t\t.endObject()\n\t\t.startObject()               // Add another object to the array \n\t\t\t.writeFieldName(\"type\")\n\t\t\t.writeString(\"fax\")\n\t\t\t.writeFieldName(\"number\")\n\t\t\t.writeString(\"646 555-4567\")\n\t\t.endObject()\n\t.endArray()\n\t.endObject()\n\n  gs.log(builder.getAttachmentId()); // Returns the sys_id of the attachment.\n} \n\ncatch (err) {\n  gs.log(err);\n} \n\nfinally {\n  builder.close();\n}",
                                "description": "This example shows how to create a JSON object and store it in the Attachment\n        [sys_attachment] table with a defined expiration date."
                            }
                        ],
                        "params": [
                            {
                                "name": "text",
                                "type": "String",
                                "description": "The string value to add to the parent JSON object."
                            }
                        ],
                        "return": {
                            "type": "JSONStreamingAPI",
                            "description": "<span class=\"ph\">Streaming JSON object used to construct the\n              payload.</span>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "JSA-writeStringField_S_S",
                        "short_description": "Adds a string field and value to the parent JSON object.",
                        "description": "",
                        "name": "writeStringField(String fieldName, String value)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "try {\n  var ttl = new GlideDateTime(\"2011-01-01 12:00:00\");\n  var builder = new sn_ih.JSONStreamingBuilder()\n    .withAttachment() // Creates the JSON object in streaming mode within an attachment.\n    .expiresAt(ttl) // Sets an expiration date for the attachment.\n    .build(); // Creates the JSONStreamingAPI object. \n\n  builder.startObject()  // Begins generating the JSON object.\n\t.writeFieldName(\"firstName\")  // Adds a \"firstName\" field \n\t.writeString(\"John\")          // Writes the value of the \"firstName\" field\n\t.writeFieldName(\"lastName\")\n\t.writeString(\"Smith\")\n\t.writeNumberField(\"age\",\"25\") // Write a number field named \"age\" with value \"25\"\n\t.writeFieldName(\"address\")\n\t.startObject()                // Start a new object nested under the parent object\n\t\t.writeStringField(\"streetAddress\", \"21 2nd Street\")\n\t\t.writeStringField(\"city\", \"Santa Clara\")\n\t\t.writeStringField(\"state\", \"CA\")\n\t\t.writeStringField(\"postalCode\", \"11111\")\n\t.endObject()\n\t.writeFieldName(\"phoneNumber\")\n\t.startArray()                    // Start an array \n\t\t.startObject()               // Add the first object to the array \n\t\t\t.writeFieldName(\"type\")\n\t\t\t.writeString(\"home\")\n\t\t\t.writeFieldName(\"number\")\n\t\t\t.writeString(\"212 555-1234\")\n\t\t.endObject()\n\t\t.startObject()               // Add another object to the array \n\t\t\t.writeFieldName(\"type\")\n\t\t\t.writeString(\"fax\")\n\t\t\t.writeFieldName(\"number\")\n\t\t\t.writeString(\"646 555-4567\")\n\t\t.endObject()\n\t.endArray()\n\t.endObject()\n\n  gs.log(builder.getAttachmentId()); // Returns the sys_id of the attachment.\n} \n\ncatch (err) {\n  gs.log(err);\n} \n\nfinally {\n  builder.close();\n}",
                                "description": "This example shows how to create a JSON object and store it in the Attachment\n        [sys_attachment] table with a defined expiration date."
                            }
                        ],
                        "params": [
                            {
                                "name": "fieldName",
                                "type": "String",
                                "description": "The name of the field to add to the parent JSON object."
                            },
                            {
                                "name": "value",
                                "type": "String",
                                "description": "The value of the field."
                            }
                        ],
                        "return": {
                            "type": "JSONStreamingAPI",
                            "description": "<span class=\"ph\">Streaming JSON object used to construct the\n              payload.</span>"
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "<p class=\"p\"><span class=\"ph\">Use these methods in the <span class=\"ph\">Flow Designer</span> script step with the <span class=\"keyword parmname\">sn_ih</span> namespace\n                identifier. For example, you can use this API to create a JSON payload in the <span class=\"ph\">Flow Designer</span> Script step and pass the returned value to the REST step\n                to send the request to a third-party service. For more information, see the <span class=\"ph\">Flow Designer</span>\n                <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-servicenow-platform/page/administer/flow-designer/reference/javascript-step-action-designer.html\" target=\"_blank\">Script\n              step</a>.</span></p>\n\n      <p class=\"p\"><span class=\"ph\">You can only use this API within the <span class=\"ph\">Flow Designer</span> environment.</span></p><br/><br/><h2 class=\"title sectiontitle\">API call order</h2>\n      \n      <p class=\"p\">Generate JSON payloads using these APIs in the following order:</p>\n\n      <div class=\"p\">\n                <dl class=\"dl\">\n                  \n                    <dt class=\"dt dlterm\"><span class=\"keyword apiname\">JSONStreamingBuilder</span>: Creates a builder object</dt>\n\n                    <dd class=\"dd\">Use these methods in the following order to create a builder object:<div class=\"p\">\n                        <ol class=\"ol\" id=\"JSONStreamingBuilderScopedAPI__d90041e221\">\n                          <li class=\"li\"><span class=\"keyword apiname\">JSONStreamingBuilder()</span>: <span class=\"ph\" id=\"JSONStreamingBuilderScopedAPI__d90041e227\">Instantiates the JSONStreamingBuilder\n                              object.</span></li>\n\n                          <li class=\"li\"><span class=\"keyword apiname\">withAttachment()</span>: Optional. <span class=\"ph\" id=\"JSONStreamingBuilderScopedAPI__d90041e234\">Creates the JSON object as a streaming\n                              attachment and stores it in the Streaming Attachments\n                              [streaming_attachment] table. If you do not call this method, the API\n                              creates the payload as a JSON string.</span></li>\n\n                          <li class=\"li\"><span class=\"keyword apiname\">expiresAt()</span>: Optional. <span class=\"ph\" id=\"JSONStreamingBuilderScopedAPI__d90041e241\">Sets a\n                              time when the attachment expires. Must also call the\n                                <span class=\"keyword apiname\">withAttachment()</span> method.</span></li>\n\n                          <li class=\"li\"><span class=\"keyword apiname\">build()</span>: <span class=\"ph\" id=\"JSONStreamingBuilderScopedAPI__d90041e251\">Returns a JSONStreamingAPI\n                              object.</span></li>\n\n                        </ol>\n\n                      </div>\n</dd>\n\n                  \n                  \n                    <dt class=\"dt dlterm\"><span class=\"keyword apiname\">JSONStreamingAPI</span>: Builds the JSON payload</dt>\n\n                    <dd class=\"dd\">Use these methods in the following order to create the JSON payload:<div class=\"p\">\n                        <ol class=\"ol\" id=\"JSONStreamingBuilderScopedAPI__d90041e268\">\n                          <li class=\"li\"><span class=\"keyword apiname\">startObject()</span>: <span class=\"ph\" id=\"JSONStreamingBuilderScopedAPI__d90041e274\">Creates the\n                              parent JSON object.</span></li>\n\n                          <li class=\"li\">Methods to generate the JSON key-value pairs, such as\n                              <span class=\"keyword apiname\">writeFieldName()</span>, <span class=\"keyword apiname\">writeString()</span>,\n                            and <span class=\"keyword apiname\">writeNumberField()</span>.</li>\n\n                          <li class=\"li\"><span class=\"keyword apiname\">endObject()</span>: <span class=\"ph\" id=\"JSONStreamingBuilderScopedAPI__d90041e293\">Closes the parent\n                              JSON object.</span></li>\n\n                          <li class=\"li\"><span class=\"keyword apiname\">getJSONString()</span> or\n                              <span class=\"keyword apiname\">getAttachmentId()</span>: Returns the JSON string or\n                            attachment ID that you created. </li>\n\n                          <li class=\"li\"><span class=\"keyword apiname\">close()</span>: <span class=\"ph\" id=\"JSONStreamingBuilderScopedAPI__d90041e308\">Closes the JSONStreamingAPI\n                              object.</span></li>\n\n                        </ol>\n\n                      </div>\n</dd>\n\n                  \n                </dl>\n\n              </div><br/><br/><h2 class=\"title sectiontitle\">Size limits</h2>\n      \n      <p class=\"p\">Payloads generated through this API cannot exceed these size limits:</p>\n\n      <div class=\"p\">\n        <ul class=\"ul\" id=\"JSONStreamingBuilderScopedAPI__ul_llq_msw_3lb\">\n                <li class=\"li\">Attachments: 200 MB</li>\n\n                <li class=\"li\">Strings: 5 MB</li>\n\n              </ul>\n\n      </div><br/><br/><h2 class=\"title sectiontitle\">Examples</h2>\n      \n      <p class=\"p\">This example shows how to create a JSON object and store it in the Attachment\n        [sys_attachment] table with a defined expiration date.</p>\n\n      <div class=\"p\">\n        <pre><code class='language-javascript'>try {\n  var ttl = new GlideDateTime(\"2011-01-01 12:00:00\");\n  var builder = new sn_ih.JSONStreamingBuilder()\n    .withAttachment() // Creates the JSON object in streaming mode within an attachment.\n    .expiresAt(ttl) // Sets an expiration date for the attachment.\n    .build(); // Creates the JSONStreamingAPI object. \n\n  builder.startObject()  // Begins generating the JSON object.\n\t.writeFieldName(\"firstName\")  // Adds a \"firstName\" field \n\t.writeString(\"John\")          // Writes the value of the \"firstName\" field\n\t.writeFieldName(\"lastName\")\n\t.writeString(\"Smith\")\n\t.writeNumberField(\"age\",\"25\") // Write a number field named \"age\" with value \"25\"\n\t.writeFieldName(\"address\")\n\t.startObject()                // Start a new object nested under the parent object\n\t\t.writeStringField(\"streetAddress\", \"21 2nd Street\")\n\t\t.writeStringField(\"city\", \"Santa Clara\")\n\t\t.writeStringField(\"state\", \"CA\")\n\t\t.writeStringField(\"postalCode\", \"11111\")\n\t.endObject()\n\t.writeFieldName(\"phoneNumber\")\n\t.startArray()                    // Start an array \n\t\t.startObject()               // Add the first object to the array \n\t\t\t.writeFieldName(\"type\")\n\t\t\t.writeString(\"home\")\n\t\t\t.writeFieldName(\"number\")\n\t\t\t.writeString(\"212 555-1234\")\n\t\t.endObject()\n\t\t.startObject()               // Add another object to the array \n\t\t\t.writeFieldName(\"type\")\n\t\t\t.writeString(\"fax\")\n\t\t\t.writeFieldName(\"number\")\n\t\t\t.writeString(\"646 555-4567\")\n\t\t.endObject()\n\t.endArray()\n\t.endObject()\n\n  gs.log(builder.getAttachmentId()); // Returns the sys_id of the attachment.\n} \n\ncatch (err) {\n  gs.log(err);\n} \n\nfinally {\n  builder.close();\n}</code></pre>\n\n      </div>\n\n      <p class=\"p\">Alternatively, this example shows how to use the API in the Script step and create the\n        payload as a JSON string. You can use this option to create payloads under 5 MB.</p>\n\n      <div class=\"p\">\n        <pre><code class='language-javascript'>(function execute(inputs, outputs) {\n\n  var builder = new sn_ih.JSONStreamingBuilder().build();\n  \n  builder.startObject()\n    .enablePrettyPrint()\n    .writeTextElement(\"firstName\",\"John\")\n    .writeString(\"John\")\n    .writeFieldName(\"lastName\")\n    .writeString(\"Smith\")\n    .writeNumberField(\"age\",\"25\")\n    .writeFieldName(\"address\")\n    .startObject()\n      .writeStringField(\"streetAddress\", \"21 2nd Street\")\n      .writeStringField(\"city\", \"Santa Clara\")\n      .writeStringField(\"state\", \"CA\")\n      .writeStringField(\"postalCode\", \"11111\")\n    .endObject()\n    .writeFieldName(\"phoneNumber\")\n    .startArray()\n      .startObject()\n        .writeFieldName(\"type\")\n        .writeString(\"home\")\n        .writeFieldName(\"number\")\n        .writeString(\"212 555-1234\")\n      .endObject()\n      .startObject()\n        .writeFieldName(\"type\")\n        .writeString(\"fax\")\n        .writeFieldName(\"number\")\n        .writeString(\"646 555-4567\")\n      .endObject()\n    .endArray()\n    .endObject()\n\n  outputs.payload = builder.getJSONString();\n  \n})(inputs, outputs);</code></pre>\n\n      </div>\n\n      <p class=\"p\">Output:</p>\n\n      <div class=\"p\">\n        <pre><code class='language-javascript'>{\n\"firstName\" : \"John\",\n\"lastName\" : \"Smith\",\n\"age\" : 25,\n\"address\" : {\n  \"streetAddress\" : \"21 2nd Street\",\n  \"city\" : \"Santa Clara\",\n  \"state\" : \"CA\",\n  \"postalCode\" : \"11111\"\n},\n\"phoneNumber\" : [ {\n  \"type\" : \"home\",\n  \"number\" : \"212 555-1234\"\n}, {\n  \"type\" : \"fax\",\n  \"number\" : \"646 555-4567\"\n} ]\n}</code></pre>\n\n      </div>",
                "short_description": "<span class=\"ph\">Create a builder object used to build a large\n                streaming JSON payload to use in a REST or SOAP request to send bulk data to a\n                third-party API. You can also create the payload as a JSON string for a\n                non-streaming option.</span>",
                "identifier": "JSONStreamingBuilderScopedAPI",
                "name": "JSONStreamingBuilder",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "JSB-JSONStreamingBuilder",
                        "short_description": "<span class=\"ph\">Instantiates the JSONStreamingBuilder\n                              object.</span>",
                        "description": "",
                        "name": "JSONStreamingBuilder()",
                        "type": "Constructor",
                        "examples": [
                            {
                                "script": "var builder = new sn_ih.JSONStreamingBuilder()",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "JSB-build",
                        "short_description": "<span class=\"ph\">Returns a JSONStreamingAPI\n                              object.</span>",
                        "description": "",
                        "name": "build()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "try {\n  var ttl = new GlideDateTime(\"2011-01-01 12:00:00\");\n  var builder = new sn_ih.JSONStreamingBuilder()\n    .withAttachment() // Creates the JSON object in streaming mode within an attachment.\n    .expiresAt(ttl) // Sets an expiration date for the attachment.\n    .build(); // Creates the JSONStreamingAPI object. \n\n  builder.startObject()  // Begins generating the JSON object.\n\t.writeFieldName(\"firstName\")  // Adds a \"firstName\" field \n\t.writeString(\"John\")          // Writes the value of the \"firstName\" field\n\t.writeFieldName(\"lastName\")\n\t.writeString(\"Smith\")\n\t.writeNumberField(\"age\",\"25\") // Write a number field named \"age\" with value \"25\"\n\t.writeFieldName(\"address\")\n\t.startObject()                // Start a new object nested under the parent object\n\t\t.writeStringField(\"streetAddress\", \"21 2nd Street\")\n\t\t.writeStringField(\"city\", \"Santa Clara\")\n\t\t.writeStringField(\"state\", \"CA\")\n\t\t.writeStringField(\"postalCode\", \"11111\")\n\t.endObject()\n\t.writeFieldName(\"phoneNumber\")\n\t.startArray()                    // Start an array \n\t\t.startObject()               // Add the first object to the array \n\t\t\t.writeFieldName(\"type\")\n\t\t\t.writeString(\"home\")\n\t\t\t.writeFieldName(\"number\")\n\t\t\t.writeString(\"212 555-1234\")\n\t\t.endObject()\n\t\t.startObject()               // Add another object to the array \n\t\t\t.writeFieldName(\"type\")\n\t\t\t.writeString(\"fax\")\n\t\t\t.writeFieldName(\"number\")\n\t\t\t.writeString(\"646 555-4567\")\n\t\t.endObject()\n\t.endArray()\n\t.endObject()\n\n  gs.log(builder.getAttachmentId()); // Returns the sys_id of the attachment.\n} \n\ncatch (err) {\n  gs.log(err);\n} \n\nfinally {\n  builder.close();\n}",
                                "description": "This example shows how to create a JSON object and store it in the Attachment\n        [sys_attachment] table with a defined expiration date."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "<a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/sn_ih-namespace/JSONStreamingAPIScopedAPI\" title=\"Build a large streaming JSON payload to use in a REST or SOAP request to send bulk data to a third-party API. You can also create the payload as a JSON string for a non-streaming option.\">JSONStreamingAPI</a>",
                            "description": "<span class=\"ph\">Streaming JSON object used to construct the\n              payload.</span>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "JSB-expiresAt_O",
                        "short_description": "<span class=\"ph\">Sets a\n                              time when the attachment expires. Must also call the\n                                <span class=\"keyword apiname\">withAttachment()</span> method.</span> If you do not call this\n    method, the attachment expires two hours from the time the attachment is created.",
                        "description": "",
                        "name": "expiresAt(Object expiresAt)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "try {\n  var ttl = new GlideDateTime(\"2011-01-01 12:00:00\");\n  var builder = new sn_ih.JSONStreamingBuilder()\n    .withAttachment() // Creates the JSON object in streaming mode within an attachment.\n    .expiresAt(ttl) // Sets an expiration date for the attachment.\n    .build(); // Creates the JSONStreamingAPI object. \n\n  builder.startObject()  // Begins generating the JSON object.\n\t.writeFieldName(\"firstName\")  // Adds a \"firstName\" field \n\t.writeString(\"John\")          // Writes the value of the \"firstName\" field\n\t.writeFieldName(\"lastName\")\n\t.writeString(\"Smith\")\n\t.writeNumberField(\"age\",\"25\") // Write a number field named \"age\" with value \"25\"\n\t.writeFieldName(\"address\")\n\t.startObject()                // Start a new object nested under the parent object\n\t\t.writeStringField(\"streetAddress\", \"21 2nd Street\")\n\t\t.writeStringField(\"city\", \"Santa Clara\")\n\t\t.writeStringField(\"state\", \"CA\")\n\t\t.writeStringField(\"postalCode\", \"11111\")\n\t.endObject()\n\t.writeFieldName(\"phoneNumber\")\n\t.startArray()                    // Start an array \n\t\t.startObject()               // Add the first object to the array \n\t\t\t.writeFieldName(\"type\")\n\t\t\t.writeString(\"home\")\n\t\t\t.writeFieldName(\"number\")\n\t\t\t.writeString(\"212 555-1234\")\n\t\t.endObject()\n\t\t.startObject()               // Add another object to the array \n\t\t\t.writeFieldName(\"type\")\n\t\t\t.writeString(\"fax\")\n\t\t\t.writeFieldName(\"number\")\n\t\t\t.writeString(\"646 555-4567\")\n\t\t.endObject()\n\t.endArray()\n\t.endObject()\n\n  gs.log(builder.getAttachmentId()); // Returns the sys_id of the attachment.\n} \n\ncatch (err) {\n  gs.log(err);\n} \n\nfinally {\n  builder.close();\n}",
                                "description": "This example shows how to create a JSON object and store it in the Attachment\n        [sys_attachment] table with a defined expiration date."
                            }
                        ],
                        "params": [
                            {
                                "name": "expiresAt",
                                "type": "<a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/c_APIRef\" title=\"The scoped GlideDateTime class provides methods for performing operations on GlideDateTime objects, such as instantiating GlideDateTime objects or working with glide_date_time fields.\">GlideDateTime</a>",
                                "description": "Object that is set when the attachment expires. <div class=\"p\">\n                  <ul class=\"ul\" id=\"JSB-expiresAt_O__ul_xsc_trx_3lb\">\n                    <li class=\"li\">Minimum value: 7200 seconds, or two hours, from the time the attachment is\n                      created. Default.</li>\n\n                    <li class=\"li\">Maximum value: 172800 seconds, or 48 hours, from the time the attachment is\n                      created.</li>\n\n                  </ul>\n\n                </div>"
                            }
                        ],
                        "return": {
                            "type": "JSONStreamingBuilder",
                            "description": "Builder object used to initiate the JSON payload."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "JSB-withAttachment",
                        "short_description": "<span class=\"ph\">Creates the JSON object as a streaming\n                              attachment and stores it in the Streaming Attachments\n                              [streaming_attachment] table. If you do not call this method, the API\n                              creates the payload as a JSON string.</span>",
                        "description": "",
                        "name": "withAttachment()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "try {\n  var ttl = new GlideDateTime(\"2011-01-01 12:00:00\");\n  var builder = new sn_ih.JSONStreamingBuilder()\n    .withAttachment() // Creates the JSON object in streaming mode within an attachment.\n    .expiresAt(ttl) // Sets an expiration date for the attachment.\n    .build(); // Creates the JSONStreamingAPI object. \n\n  builder.startObject()  // Begins generating the JSON object.\n\t.writeFieldName(\"firstName\")  // Adds a \"firstName\" field \n\t.writeString(\"John\")          // Writes the value of the \"firstName\" field\n\t.writeFieldName(\"lastName\")\n\t.writeString(\"Smith\")\n\t.writeNumberField(\"age\",\"25\") // Write a number field named \"age\" with value \"25\"\n\t.writeFieldName(\"address\")\n\t.startObject()                // Start a new object nested under the parent object\n\t\t.writeStringField(\"streetAddress\", \"21 2nd Street\")\n\t\t.writeStringField(\"city\", \"Santa Clara\")\n\t\t.writeStringField(\"state\", \"CA\")\n\t\t.writeStringField(\"postalCode\", \"11111\")\n\t.endObject()\n\t.writeFieldName(\"phoneNumber\")\n\t.startArray()                    // Start an array \n\t\t.startObject()               // Add the first object to the array \n\t\t\t.writeFieldName(\"type\")\n\t\t\t.writeString(\"home\")\n\t\t\t.writeFieldName(\"number\")\n\t\t\t.writeString(\"212 555-1234\")\n\t\t.endObject()\n\t\t.startObject()               // Add another object to the array \n\t\t\t.writeFieldName(\"type\")\n\t\t\t.writeString(\"fax\")\n\t\t\t.writeFieldName(\"number\")\n\t\t\t.writeString(\"646 555-4567\")\n\t\t.endObject()\n\t.endArray()\n\t.endObject()\n\n  gs.log(builder.getAttachmentId()); // Returns the sys_id of the attachment.\n} \n\ncatch (err) {\n  gs.log(err);\n} \n\nfinally {\n  builder.close();\n}",
                                "description": "This example shows how to build the JSON payload and save it as an attachment."
                            },
                            {
                                "script": "try {\n  var builder = new sn_ih.JSONStreamingBuilder().build();\n\n  builder.startObject()\n    .writeFieldName(\"firstName\")\n    .writeString(\"John\")\n    .writeFieldName(\"lastName\")\n    .writeString(\"Smith\")\n    .writeNumberField(\"age\",\"25\")\n    .writeFieldName(\"address\")\n    .startObject()\n    .writeStringField(\"streetAddress\", \"21 2nd Street\")\n    .writeStringField(\"city\", \"Santa Clara\")\n    .writeStringField(\"state\", \"CA\")\n    .writeStringField(\"postalCode\", \"11111\")\n    .endObject()\n    .writeFieldName(\"phoneNumber\")\n    .startArray()\n    .startObject()\n    .writeFieldName(\"type\")\n    .writeString(\"home\")\n    .writeFieldName(\"number\")\n    .writeString(\"212 555-1234\")\n    .endObject()\n    .startObject()\n    .writeFieldName(\"type\")\n    .writeString(\"fax\")\n    .writeFieldName(\"number\")\n    .writeString(\"646 555-4567\")\n    .endObject()\n    .endArray()\n    .endObject()\n\n  gs.log(builder.getJSONString());\n} \n\ncatch (err) {\n  gs.log(\"Exception: \" + err);\n} \n\nfinally {\n  builder.close();\n}",
                                "description": "This example shows how to build the JSON payload and save it as a string."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "JSONStreamingBuilder",
                            "description": "Builder object used to initiate the JSON payload."
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "<div class=\"p\"><span class=\"ph\">Use these methods in a <span class=\"ph\">Flow Designer</span> Script step with the <span class=\"keyword parmname\">sn_ih</span> namespace identifier. For\n                example, you can use this API to create an XML payload in the <span class=\"ph\">Flow Designer</span> Script step and pass the returned value to the REST step\n                to send the request to a third-party service. For more information, see the <span class=\"ph\">Flow Designer</span>\n                <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-servicenow-platform/page/administer/flow-designer/reference/javascript-step-action-designer.html\" target=\"_blank\">Script\n              step</a>.</span><div class=\"note note\"><span class=\"notetitle\">Note:</span> <span class=\"ph\">You can only use this API within the <span class=\"ph\">Flow Designer</span> environment.</span></div>\n</div>\n\n      <p class=\"p\">There is no constructor for this class. Instead, you must call the build() method in the\n        XMLStreamingBuilder class to return an XMLStreamingAPI object. For more information, see\n          <a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/sn_ih-namespace/XMLStreamingBuilderScopedAPI\" title=\"Create a builder object to build a large XML payload for use in a REST or SOAP request to send bulk data to a third-party API. You can also create the payload as an XML string for a non-streaming option.\">XMLStreamingBuilder</a>.</p><br/><br/><h2 class=\"title sectiontitle\">API call order</h2>\n      \n      <p class=\"p\">Generate XML payloads by first instantiating a builder object with\n          <span class=\"keyword apiname\">XMLStreamingBuilder</span> and then calling the methods in the\n          <span class=\"keyword apiname\">XMLStreamingAPI</span>\n        class:</p>\n\n      <div class=\"p\">\n                <dl class=\"dl\">\n                  \n                    <dt class=\"dt dlterm\">1. <span class=\"keyword apiname\">XMLStreamingBuilder</span>: Creates a builder object</dt>\n\n                    <dd class=\"dd\">Use these method in the following order to create a builder object:<div class=\"p\">\n                        <ol class=\"ol\" id=\"XMLStreamingAPIScopedAPI__d95731e447\">\n                          <li class=\"li\"><span class=\"keyword apiname\">XMLStreamingBuilder()</span>: <span class=\"ph\">Instantiates the\n                              XMLStreamingBuilder object.</span></li>\n\n                          <li class=\"li\"><span class=\"keyword apiname\">withAttachment()</span>: Optional. <span class=\"ph\">Creates an XML\n                              document as an attachment and stores it in the Streaming Attachments\n                              [streaming_attachment] table. If you don't call this method, the API\n                              builds the payload as an XML string.</span></li>\n\n                          <li class=\"li\"><span class=\"keyword apiname\">expiresAt()</span>: Optional. <span class=\"ph\">Sets a time when the\n                              attachment expires. False is the default. Must also call the\n                                <span class=\"keyword apiname\">withAttachment()</span> method.</span>\n                            </li>\n\n                          <li class=\"li\"><span class=\"keyword apiname\">build()</span>: <span class=\"ph\">Returns an XMLStreamingAPI\n                              object.</span></li>\n\n                        </ol>\n\n                      </div>\n</dd>\n\n                  \n                  \n                    <dt class=\"dt dlterm\">2. <span class=\"keyword apiname\">XMLStreamingAPI</span>: Builds the XML payload</dt>\n\n                    <dd class=\"dd\">Use these methods in the following order to create the XML payload:<div class=\"p\">\n                        <ol class=\"ol\" id=\"XMLStreamingAPIScopedAPI__d95731e498\">\n                          <li class=\"li\"><span class=\"keyword apiname\">startDocument()</span>: <span class=\"ph\">Creates the top-level parent\n                              element in the XML document.</span></li>\n\n                          <li class=\"li\">Methods to generate child elements in the XML document, such as\n                              <span class=\"keyword apiname\">writeTextElement()</span>,\n                              <span class=\"keyword apiname\">startElement()</span>, and\n                            <span class=\"keyword apiname\">writeArray()</span>.</li>\n\n                          <li class=\"li\">Methods to generate attributes for an element, such as\n                              <span class=\"keyword apiname\">writeAttribute()</span>,\n                              <span class=\"keyword apiname\">writeNamespace()</span>, and\n                            <span class=\"keyword apiname\">writeDtd()</span>.</li>\n\n                          <li class=\"li\"><span class=\"keyword apiname\">endElement()</span>: <span class=\"ph\">Closes an XML element.</span></li>\n\n                          <li class=\"li\"><span class=\"keyword apiname\">endDocument</span>: <span class=\"ph\">Closes the top-level parent\n                              element.</span></li>\n\n                          <li class=\"li\"><span class=\"keyword apiname\">getXMLString()</span> or\n                              <span class=\"keyword apiname\">getAttachmentId()</span>: Returns the XML string or\n                            attachment ID that you created. </li>\n\n                          <li class=\"li\"><span class=\"keyword apiname\">close()</span>: <span class=\"ph\">Closes the XMLStreamingAPI\n                              object.</span></li>\n\n                        </ol>\n\n                      </div>\n</dd>\n\n                  \n                </dl>\n\n              </div><br/><br/><h2 class=\"title sectiontitle\">Size limits</h2>\n      \n      \n      <p class=\"p\">Payloads generated through this API cannot exceed these size limits:</p>\n\n      <div class=\"p\">\n        <ul class=\"ul\" id=\"XMLStreamingAPIScopedAPI__ul_syy_lsw_3lb\">\n                <li class=\"li\">Attachments: 200 MB</li>\n\n                <li class=\"li\">Strings: 5 MB</li>\n\n              </ul>\n\n      </div><br/><br/><p class=\"p\">The following example shows how to create an XML document and store it in the Streaming\n        Attachments [streaming_attachment] table with a defined expiration\n        date.</p>\n\n      <div class=\"p\">\n        <pre><code class='language-javascript'>\ntry {\n  var ttl = new GlideDateTime(\"2011-01-01 12:00:00\");\n  var builder = new sn_ih.XMLStreamingBuilder()\n    .withAttachment() // Creates the XML document in streaming mode within an attachment.\n    .expiresAt(ttl) // Sets an expiration date for the attachment.\n    .build(); // Creates the XMLStreamingAPI object.\n\n  builder.startDocument() // Begins generating the XML document.\n    .writeTextElement(\"firstName\",\"John\") // Writes a \"firstName\" element and value.\n    .writeTextElement(\"lastName\",\"Smith\")\n    .writeTextElement(\"age\",\"25\")\n    .startElement(\"address\") // Adds an \"address\" parent element.\n      .writeTextElement(\"streetAddress\", \"21 2nd Street\") // Writes a child element and value.\n      .writeTextElement(\"city\", \"Santa Clara\")\n      .writeTextElement(\"state\", \"CA\")\n      .writeTextElement(\"postalCode\", \"11111\")\n    .endElement() // Adds a closing tag for the \"address\" element.\n    .startElement(\"phoneNumber\")\n      .writeTextElement(\"type\",\"home\")\n      .writeTextElement(\"number\",\"212 555-1234\")\n      .writeTextElement(\"type\",\"fax\")\n      .writeTextElement(\"number\",\"646 555-4567\")\n    .endElement()\n  .endDocument() // Stops generating the XML document.\n      \n  gs.log(builder.getAttachmentId()); // Returns the sys_id of the attachment.\n} catch (err) {\n  gs.log(err);\n} finally {\n  builder.close();\n}</code></pre>\n\n      </div>\n\n      <p class=\"p\">Alternatively, this example shows how to use the API in the Script step and create the\n        payload as an XML string. You can use this option to create payloads under\n        5\n        MB.</p>\n\n      <div class=\"p\" id=\"XMLStreamingAPIScopedAPI__xml-non-streaming-example\">\n        <pre><code class='language-javascript'>(function execute(inputs, outputs) {\n\n  var builder = new sn_ih.XMLStreamingBuilder().build();\n  \n  builder.startDocument()\n    .enablePrettyPrint()\n    .writeTextElement(\"firstName\",\"John\")\n    .writeTextElement(\"lastName\",\"Smith\")\n    .writeTextElement(\"age\",\"25\")\n    .startElement(\"address\")\n      .writeTextElement(\"streetAddress\", \"21 2nd Street\")\n      .writeTextElement(\"city\", \"Santa Clara\")\n      .writeTextElement(\"state\", \"CA\")\n      .writeTextElement(\"postalCode\", \"11111\")\n    .endElement()\n    .startElement(\"phoneNumber\")\n      .writeTextElement(\"type\",\"home\")\n      .writeTextElement(\"number\",\"212 555-1234\")\n      .writeTextElement(\"type\",\"fax\")\n      .writeTextElement(\"number\",\"646 555-4567\")\n    .endElement()\n  .endDocument()\n\n  outputs.payload = builder.getXMLString();\n  \n})(inputs, outputs);</code></pre>\n\n      </div>\n\n      <p class=\"p\">Output:</p>\n\n      <div class=\"p\" id=\"XMLStreamingAPIScopedAPI__xml-non-streaming-example-output\">\n        <pre><code class='language-javascript'>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;firstName&gt;John&lt;/firstName&gt;\n&lt;lastName&gt;Smith&lt;/lastName&gt;\n&lt;age&gt;25&lt;/age&gt;\n&lt;address&gt;\n  &lt;streetAddress&gt;21 2nd Street&lt;/streetAddress&gt;\n  &lt;city&gt;Santa Clara&lt;/city&gt;\n  &lt;state&gt;CA&lt;/state&gt;\n  &lt;postalCode&gt;11111&lt;/postalCode&gt;\n&lt;/address&gt;\n&lt;phoneNumber&gt;\n  &lt;type&gt;home&lt;/type&gt;\n  &lt;number&gt;212 555-1234&lt;/number&gt;\n  &lt;type&gt;fax&lt;/type&gt;\n  &lt;number&gt;646 555-4567&lt;/number&gt;\n&lt;/phoneNumber&gt;</code></pre>\n\n      </div>",
                "short_description": "<span class=\"ph\">Build a large streaming XML payload for use in a REST\n                or SOAP request to send bulk data to a third-party API. You can also create the\n                payload as an XML string for a non-streaming option.</span>",
                "identifier": "XMLStreamingAPIScopedAPI",
                "name": "XMLStreamingAPI",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "XSA-close",
                        "short_description": "Closes the XMLStreamingAPI object. You must call this method to close the stream after\n    building your XML document.",
                        "description": "<p>The following example shows how to create an XML document and store it in the Streaming\n        Attachments [streaming_attachment] table with a defined expiration date.</p>",
                        "name": "close()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "XSA-disablePrettyPrint",
                        "short_description": "Ends pretty print XML formatting.",
                        "description": "<p>Before calling this method, you must first call <span class=\"keyword apiname\">enablePrettyPrint()</span> to\n        add XML formatting to a section.</p>",
                        "name": "disablePrettyPrint()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "try {\n  var ttl = new GlideDateTime(\"2011-01-01 12:00:00\");\n  var builder = new sn_ih.XMLStreamingBuilder()\n    .withAttachment()\n    .expiresAt(ttl)\n    .build();\n\n  builder.startDocument()\n    .writeTextElement(\"firstName\",\"John\")\n    .writeTextElement(\"lastName\",\"Smith\")\n    .writeTextElement(\"age\",\"25\")\n    .enablePrettyPrint()\n    .startElement(\"address\")\n      .writeTextElement(\"streetAddress\", \"21 2nd Street\")\n      .writeTextElement(\"city\", \"Santa Clara\")\n      .writeTextElement(\"state\", \"CA\")\n      .writeTextElement(\"postalCode\", \"11111\")\n    .endElement()\n    .disablePrettyPrint()\n    .startElement(\"phoneNumber\")\n      .writeTextElement(\"type\",\"home\")\n      .writeTextElement(\"number\",\"212 555-1234\")\n      .writeTextElement(\"type\",\"fax\")\n      .writeTextElement(\"number\",\"646 555-4567\")\n    .endElement()\n  .endDocument()\n      \n  gs.log(builder.getAttachmentId());\n} catch (err) {\n  gs.log(err);\n} finally {\n  builder.close();\n}",
                                "description": "The following example shows how to add pretty print formatting to the\n          <samp class=\"ph codeph\">address</samp> element."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "XMLStreamingAPI",
                            "description": "<span class=\"ph\">Streaming XML object for constructing the\n                payload.</span>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "XSA-enablePrettyPrint",
                        "short_description": "Adds pretty print formatting to an XML element or tree of elements.",
                        "description": "<p>Use the <span class=\"keyword apiname\">disablePrettyPrint()</span> method to end the formatting.</p>",
                        "name": "enablePrettyPrint()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "try {\n  var ttl = new GlideDateTime(\"2011-01-01 12:00:00\");\n  var builder = new sn_ih.XMLStreamingBuilder()\n    .withAttachment()\n    .expiresAt(ttl)\n    .build();\n\n  builder.startDocument()\n    .writeTextElement(\"firstName\",\"John\")\n    .writeTextElement(\"lastName\",\"Smith\")\n    .writeTextElement(\"age\",\"25\")\n    .enablePrettyPrint()\n    .startElement(\"address\")\n      .writeTextElement(\"streetAddress\", \"21 2nd Street\")\n      .writeTextElement(\"city\", \"Santa Clara\")\n      .writeTextElement(\"state\", \"CA\")\n      .writeTextElement(\"postalCode\", \"11111\")\n    .endElement()\n    .disablePrettyPrint()\n    .startElement(\"phoneNumber\")\n      .writeTextElement(\"type\",\"home\")\n      .writeTextElement(\"number\",\"212 555-1234\")\n      .writeTextElement(\"type\",\"fax\")\n      .writeTextElement(\"number\",\"646 555-4567\")\n    .endElement()\n  .endDocument()\n      \n  gs.log(builder.getAttachmentId());\n} catch (err) {\n  gs.log(err);\n} finally {\n  builder.close();\n}",
                                "description": "The following example shows how to add pretty print formatting to the\n          <samp class=\"ph codeph\">address</samp> element."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "XMLStreamingAPI",
                            "description": "<span class=\"ph\">Streaming XML object for constructing the\n                payload.</span>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "XSA-endDocument",
                        "short_description": "Ends the structure of your XML document.",
                        "description": "<p>After calling the <span class=\"keyword apiname\">startDocument()</span> method and organizing your streaming\n        XML document, call the <span class=\"keyword apiname\">endDocument()</span> method at the end of your document's\n        structure. You must use these two methods together to successfully build your streaming XML\n        document's structure.</p>",
                        "name": "endDocument()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "try {\n    var ttl = new GlideDateTime('2011-01-01 12:00:00');\n    var builder = new sn_ih.XMLStreamingBuilder().withAttachment().expiresAt(ttl);\n    var streamingDocument = builder.build();\n\n    streamingDocument.startDocument('Employee')\n        .writeTextElement('firstName', 'John')\n        .writeTextElement('lastName', 'Smith')\n        .writeTextElement('age', '25')\n        .endDocument();\n    gs.log(streamingDocument.getAttachmentId());\n} catch (err) {\n    gs.log(err);\n} finally {\n    streamingDocument.close();\n}",
                                "description": "The following example shows how to create an XML document containing elements about a\n        user."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "XMLStreamingAPI",
                            "description": "<span class=\"ph\">Streaming XML object for constructing the\n                payload.</span>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "XSA-endElement",
                        "short_description": "Adds a closing tag to an XML element.",
                        "description": "<p>Use the following methods in this sequence to create a valid XML element:<ol class=\"ol\" id=\"XSA-endElement__ol_uwy_qb3_bmb\">\n          <li class=\"li\">Use the <span class=\"keyword apiname\">startElement()</span> method to add a starting tag.</li>\n\n          <li class=\"li\">Use the <span class=\"keyword apiname\">endElement()</span> method to add the closing tag.</li>\n\n        </ol></p>",
                        "name": "endElement()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "try {\n  var ttl = new GlideDateTime(\"2011-01-01 12:00:00\");\n  var builder = new sn_ih.XMLStreamingBuilder()\n    .withAttachment()\n    .expiresAt(ttl)\n    .build();\n\n  builder.startDocument()\n      .startElement(\"address\")\n      .writeTextElement(\"streetAddress\", \"21 2nd Street\")\n      .writeTextElement(\"city\", \"Santa Clara\")\n      .writeTextElement(\"state\", \"CA\")\n      .writeTextElement(\"postalCode\", \"11111\")\n    .endElement()\n  .endDocument()\n      \n  gs.log(builder.getAttachmentId());\n} catch (err) {\n  gs.log(err);\n} finally {\n  builder.close();\n}",
                                "description": "The following example shows how to build a parent element named <samp class=\"ph codeph\">address</samp>\n        and then write four child elements."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "XMLStreamingAPI",
                            "description": "<span class=\"ph\">Streaming XML object for constructing the\n                payload.</span>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "XSA-getXMLString",
                        "short_description": "Returns the XML document as a\n    string.",
                        "description": "<p>To return the XML document as a string, don't call the\n          <span class=\"keyword apiname\">getAttachementId()</span> method in the <span class=\"keyword apiname\">XMLStreamingBuilder</span>\n        class. For more information, see <a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/sn_ih-namespace/XMLStreamingBuilderScopedAPI\" title=\"Create a builder object to build a large XML payload for use in a REST or SOAP request to send bulk data to a third-party API. You can also create the payload as an XML string for a non-streaming option.\">XMLStreamingBuilder -\n        Scoped</a>.</p>",
                        "name": "getXMLString()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "XML document created using the <span class=\"keyword apiname\">XMLStreamingAPI</span> methods, as a\n                string."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "XSA-startDocument_S_O",
                        "short_description": "Begins building an XML document.",
                        "description": "<p>After calling the <span class=\"keyword apiname\">build()</span> method, call the\n          <span class=\"keyword apiname\">startDocument()</span> method to start organizing your XML document. You must\n        also call the <span class=\"keyword apiname\">endDocument</span> method at the end of your document's\n        structure.</p>",
                        "name": "startDocument(String rootElement, Object namespaceDefinitionMap)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "try {\n    var ttl = new GlideDateTime('2011-01-01 12:00:00');\n    var builder = new sn_ih.XMLStreamingBuilder().withAttachment().expiresAt(ttl);\n    var streamingDocument = builder.build();\n\n    streamingDocument.startDocument('Employee')\n        .writeTextElement('firstName', 'John')\n        .writeTextElement('lastName', 'Smith')\n        .writeTextElement('age', '25')\n        .endDocument();\n    gs.log(streamingDocument.getAttachmentId());\n} catch (err) {\n    gs.log(err);\n} finally {\n    streamingDocument.close();\n}",
                                "description": "The following example shows how to create an XML document containing elements with\n        information about an employee."
                            }
                        ],
                        "params": [
                            {
                                "name": "rootElement",
                                "type": "String",
                                "description": "Optional. Root element, or top-level parent element, for your XML\n                document."
                            },
                            {
                                "name": "namespaceDefinitionMap",
                                "type": "Object",
                                "description": "Optional. Map of keys and values for the namespaces and their associated values\n                in a subsequent list of elements. For example:\n                <pre class=\"pre codeblock\">{\n'namespaceOne':'namespaceValue',\n'namespaceTwo':'namespaceValue'\n}</pre>"
                            }
                        ],
                        "return": {
                            "type": "XMLStreamingAPI",
                            "description": "<span class=\"ph\">Streaming XML object for constructing the\n                payload.</span>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "XSA-startElement_S_O_O_S",
                        "short_description": "Adds a starting tag for an XML element.",
                        "description": "<p>Use the following methods in this sequence to create a valid XML element:<ol class=\"ol\" id=\"XSA-startElement_S_O_O_S__ol_uwy_qb3_bmb\">\n          <li class=\"li\">Use the <span class=\"keyword apiname\">startElement()</span> method to add a starting tag.</li>\n\n          <li class=\"li\">Use the <span class=\"keyword apiname\">endElement()</span> method to add the closing tag.</li>\n\n        </ol></p>",
                        "name": "startElement(String name, Object namespaceMap, Object attributeMap, String prefix)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "try {\n  var ttl = new GlideDateTime(\"2011-01-01 12:00:00\");\n  var builder = new sn_ih.XMLStreamingBuilder()\n    .withAttachment()\n    .expiresAt(ttl)\n    .build();\n\n  builder.startDocument()\n      .startElement(\"address\")\n      .writeTextElement(\"streetAddress\", \"21 2nd Street\")\n      .writeTextElement(\"city\", \"Santa Clara\")\n      .writeTextElement(\"state\", \"CA\")\n      .writeTextElement(\"postalCode\", \"11111\")\n    .endElement()\n  .endDocument()\n      \n  gs.log(builder.getAttachmentId());\n} catch (err) {\n  gs.log(err);\n} finally {\n  builder.close();\n}",
                                "description": "The following example shows how to build a parent element named <span class=\"keyword apiname\">address</span>\n        and then write four child elements."
                            }
                        ],
                        "params": [
                            {
                                "name": "name",
                                "type": "String",
                                "description": "Name of the XML element."
                            },
                            {
                                "name": "namespaceMap",
                                "type": "Object",
                                "description": "Optional. Map of keys and values for the namespaces and their associated values\n                in a subsequent list of elements. For\n                example:<pre class=\"pre codeblock\">{\n'namespaceOne':'namespaceValue',\n'namespaceTwo':'namespaceValue'\n}</pre>"
                            },
                            {
                                "name": "attributeMap",
                                "type": "Object",
                                "description": "Optional. Map of keys and values for the attributes and their associated values\n                in a subsequent list of elements."
                            },
                            {
                                "name": "prefix",
                                "type": "String",
                                "description": "Optional. Prefix for the XML element."
                            }
                        ],
                        "return": {
                            "type": "XMLStreamingAPI",
                            "description": "<span class=\"ph\">Streaming XML object for constructing the\n                payload.</span>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "XSA-writeArray_S_O_O",
                        "short_description": "Adds a list of nested elements with predefined text to your streaming XML\n    document.",
                        "description": "<p>After calling the <span class=\"keyword apiname\">startDocument()</span> method, you can call the\n          <span class=\"keyword apiname\">writeArray()</span> method to add a block of nested elements to your streaming\n        XML document.</p>",
                        "name": "writeArray(String elementName, Array data, String wrappingElement)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "try {\n  var ttl = new GlideDateTime(\"2011-01-01 12:00:00\");\n  var builder = new sn_ih.XMLStreamingBuilder()\n    .withAttachment()\n    .expiresAt(ttl)\n    .build();\n\n  builder.startDocument()\n      .writeArray('city', ['Santa Clara','San Diego','Chicago','Sydney','London'], 'officeLocations')\n  .endDocument()\n      \n  gs.log(builder.getAttachmentId());\n} catch (err) {\n  gs.log(err);\n} finally {\n  builder.close();\n}",
                                "description": "The following example shows how to build a parent element named\n          <samp class=\"ph codeph\">officeLocations</samp>, and then nest an array of five <samp class=\"ph codeph\">city</samp>\n        elements."
                            }
                        ],
                        "params": [
                            {
                                "name": "elementName",
                                "type": "String",
                                "description": "Name of the XML element associated with each string listed in the\n                  <span class=\"keyword parmname\">data</span>\n                array."
                            },
                            {
                                "name": "data",
                                "type": "Array",
                                "description": "List of values to assign to each element nested inside\n                  <span class=\"keyword parmname\">wrappingElement</span>."
                            },
                            {
                                "name": "wrappingElement",
                                "type": "String",
                                "description": "Parent element containing each\n                <span class=\"keyword parmname\">elementName</span>."
                            }
                        ],
                        "return": {
                            "type": "XMLStreamingAPI",
                            "description": "<span class=\"ph\">Streaming XML object for constructing the\n                payload.</span>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "XSA-writeAttribute_S_S",
                        "short_description": "Adds an attribute to an element in your XML document.",
                        "description": "<p>After calling the <span class=\"keyword apiname\">startDocument()</span>, <span class=\"keyword apiname\">startElement()</span>, or\n          <span class=\"keyword apiname\">writeTextElement()</span> method, you can call the\n          <span class=\"keyword apiname\">writeAttribute()</span> method to add an attribute to the associated XML\n        element.</p>",
                        "name": "writeAttribute(String name, String value)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "try {\n    var ttl = new GlideDateTime('2011-01-01 12:00:00');\n    var builder = new sn_ih.XMLStreamingBuilder().withAttachment().expiresAt(ttl);\n    var streamingDocument = builder.build();\n\n    streamingDocument.startDocument('Employee')\n    .writeAttribute('idNumber','12345')\n        .writeTextElement('firstName', 'John')\n        .writeTextElement('lastName', 'Smith')\n        .writeTextElement('age', '25')\n    .endDocument();\n    gs.log(streamingDocument.getAttachmentId());\n} catch (err) {\n    gs.log(err);\n} finally {\n    streamingDocument.close();\n}",
                                "description": "This example adds an attribute named <span class=\"keyword apiname\">idNumber</span> to the\n          <span class=\"keyword apiname\">employee</span> element."
                            }
                        ],
                        "params": [
                            {
                                "name": "name",
                                "type": "String",
                                "description": "Name of the XML element's attribute."
                            },
                            {
                                "name": "value",
                                "type": "String",
                                "description": "Value for the XML element's attribute."
                            }
                        ],
                        "return": {
                            "type": "XMLStreamingAPI",
                            "description": "<span class=\"ph\">Streaming XML object for constructing the\n                payload.</span>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "XSA-writeAttributes_O",
                        "short_description": "Adds attributes to an element in your XML document.",
                        "description": "<p>After calling the <span class=\"keyword apiname\">startDocument()</span>, <span class=\"keyword apiname\">startElement()</span>, or\n          <span class=\"keyword apiname\">writeTextElement()</span> method, you can call the\n          <span class=\"keyword apiname\">writeAttributes()</span> method to add attributes to the associated XML\n        element.</p>",
                        "name": "writeAttributes(Object attributeMap)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "try {\n    var ttl = new GlideDateTime('2011-01-01 12:00:00');\n    var builder = new sn_ih.XMLStreamingBuilder().withAttachment().expiresAt(ttl);\n    var streamingDocument = builder.build();\n\n    streamingDocument.startDocument('Employee')\n    .writeAttributes({'idNumber':'12345', 'officeLocation':'San Diego', 'department':'Sales'})\n        .writeTextElement('firstName', 'John')\n        .writeTextElement('lastName', 'Smith')\n        .writeTextElement('age', '25')\n    .endDocument();\n    gs.log(streamingDocument.getAttachmentId());\n} catch (err) {\n    gs.log(err);\n} finally {\n    streamingDocument.close();\n}",
                                "description": "This example adds attributes named <span class=\"keyword apiname\">idNumber</span>,\n          <span class=\"keyword apiname\">officeLocation</span>, and <span class=\"keyword apiname\">department</span> to the\n          <span class=\"keyword apiname\">employee</span> element."
                            }
                        ],
                        "params": [
                            {
                                "name": "attributeMap",
                                "type": "Object",
                                "description": "Map of keys and values containing attribute names and values to associate with\n                the XML element. For\n                example:<pre class=\"pre codeblock\">{\n'attributeOne':'attributeValue',\n'attributeTwo':'attributeValue'\n}</pre>"
                            }
                        ],
                        "return": {
                            "type": "XMLStreamingAPI",
                            "description": "<span class=\"ph\">Streaming XML object for constructing the\n                payload.</span>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "XSA-writeCData_S",
                        "short_description": "Adds CDATA to your XML document.",
                        "description": "<p>After calling the <span class=\"keyword apiname\">writeCDataElement()</span> method, you can call the\n          <span class=\"keyword apiname\">writeCData()</span> method to add CDATA within the element.</p>",
                        "name": "writeCData(String data)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "try {\n    var ttl = new GlideDateTime('2011-01-01 12:00:00');\n    var builder = new sn_ih.XMLStreamingBuilder().withAttachment().expiresAt(ttl);\n    var streamingDocument = builder.build();\n\n    streamingDocument.startDocument('Employee')\n        .writeTextElement('firstName', 'John')\n        .writeTextElement('lastName', 'Smith')\n        .writeTextElement('age', '25')\n        .writeCDataElement('timeWorked')\n        .writeCData('&lt; 2 years')\n    .endDocument();\n    gs.log(streamingDocument.getAttachmentId());\n} catch (err) {\n    gs.log(err);\n} finally {\n    streamingDocument.close();\n}",
                                "description": "This example adds CDATA to the CDATA element\n        <samp class=\"ph codeph\">timeWorked</samp>."
                            }
                        ],
                        "params": [
                            {
                                "name": "data",
                                "type": "String",
                                "description": "Value to include after the CDATA keyword in your CDATA element."
                            }
                        ],
                        "return": {
                            "type": "XMLStreamingAPI",
                            "description": "<span class=\"ph\">Streaming XML object for constructing the\n                payload.</span>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "XSA-writeCDataElement_S_S_O",
                        "short_description": "Adds a CDATA element to your XML document.",
                        "description": "<p>After calling the <span class=\"keyword apiname\">startDocument()</span> method, you can call the\n          <span class=\"keyword apiname\">writeCDataElement()</span> method to add a CDATA element to your XML\n        document.</p>",
                        "name": "writeCDataElement(String name, String data, Object prefix)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "try {\n  var ttl = new GlideDateTime(\"2011-01-01 12:00:00\");\n  var builder = new sn_ih.XMLStreamingBuilder()\n    .withAttachment()\n    .expiresAt(ttl)\n    .build();\n\n  builder.startDocument()\n  .writeDtd('address')\n  .writeCDataElement('home', '#PCDATA', {'streetAddress', 'city', 'state', 'postalCode'})\n      .writeTextElement(\"streetAddress\", \"21 2nd Street\")\n      .writeTextElement(\"city\", \"Santa Clara\")\n      .writeTextElement(\"state\", \"CA\")\n      .writeTextElement(\"postalCode\", \"11111\")\n  .endDocument()\n      \n  gs.log(builder.getAttachmentId());\n} catch (err) {\n  gs.log(err);\n} finally {\n  builder.close();\n}",
                                "description": "This example uses a document type definition named <samp class=\"ph codeph\">address</samp>\n        to\n        define an internal document type definition for the XML document."
                            }
                        ],
                        "params": [
                            {
                                "name": "name",
                                "type": "String",
                                "description": "Name of the CDATA element."
                            },
                            {
                                "name": "data",
                                "type": "String",
                                "description": "Optional. Type of data to parse the CDATA element\n                as."
                            },
                            {
                                "name": "prefix",
                                "type": "Object",
                                "description": "Optional. Map of child elements and values that the CDATA element includes. For\n                example:\n                <pre class=\"pre codeblock\">{\n'prefixOne':'prefixValue',\n'prefixTwo':'prefixValue'\n}</pre>\nYou\n                must associate an XML element's prefix with a namespace using <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-application-development/page/app-store/dev_portal/API_reference/XMLStreamingAPI/concept/XMLStreamingAPIScopedAPI.html#XSA-writeNamespace\" target=\"_blank\">writeNamespace()</a>."
                            }
                        ],
                        "return": {
                            "type": "XMLStreamingAPI",
                            "description": "<span class=\"ph\">Streaming XML object for constructing the\n                payload.</span>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "XSA-writeCharacters_S",
                        "short_description": "Adds text to your XML document.",
                        "description": "<p>Use the <span class=\"keyword apiname\">writeCharacters()</span> method to insert string data to a section in\n        your XML document.</p>",
                        "name": "writeCharacters(String text)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "try {\n    var ttl = new GlideDateTime('2011-01-01 12:00:00');\n    var builder = new sn_ih.XMLStreamingBuilder().withAttachment().expiresAt(ttl);\n    var streamingDocument = builder.build();\n\n    streamingDocument.startDocument('Employee')\n        .startElement('firstName')\n        .writeCharacters('John')\n        .EndElement()\n        .startElement('lastName')\n        .writeCharacters('Smith')\n        .endElement()\n    .endDocument();\n    gs.log(streamingDocument.getAttachmentId());\n} catch (err) {\n    gs.log(err);\n} finally {\n    streamingDocument.close();\n}",
                                "description": "The following example shows how to add text values to elements in your XML document."
                            }
                        ],
                        "params": [
                            {
                                "name": "text",
                                "type": "String",
                                "description": "Text to add to a section of your XML document."
                            }
                        ],
                        "return": {
                            "type": "XMLStreamingAPI",
                            "description": "<span class=\"ph\">Streaming XML object for constructing the\n                payload.</span>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "XSA-writeComment_S",
                        "short_description": "Adds a comment to your XML document.",
                        "description": "<p>After calling the <span class=\"keyword apiname\">startDocument()</span> method, you can call the\n          <span class=\"keyword apiname\">writeComment()</span> method to add a comment to your XML document.</p>",
                        "name": "writeComment(String comment)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "try {\n    var ttl = new GlideDateTime('2011-01-01 12:00:00');\n    var builder = new sn_ih.XMLStreamingBuilder().withAttachment().expiresAt(ttl);\n    var streamingDocument = builder.build();\n\n    streamingDocument.startDocument('Employee')\n        .writeComment('Element for information related to active employees.')\n        .writeTextElement('firstName', 'John')\n        .writeTextElement('lastName', 'Smith')\n        .writeTextElement('age', '25')\n    .endDocument();\n    gs.log(streamingDocument.getAttachmentId());\n} catch (err) {\n    gs.log(err);\n} finally {\n    streamingDocument.close();\n}",
                                "description": "The following example shows how to add a comment to an XML document."
                            }
                        ],
                        "params": [
                            {
                                "name": "comment",
                                "type": "String",
                                "description": "Comment text to include."
                            }
                        ],
                        "return": {
                            "type": "XMLStreamingAPI",
                            "description": "<span class=\"ph\">Streaming XML object for constructing the\n                payload.</span>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "XSA-writeDtd_S",
                        "short_description": "Adds a document type definition to your XML document.",
                        "description": "<p>After calling the <span class=\"keyword apiname\">startDocument()</span> method, you can call the\n          <span class=\"keyword apiname\">writeDtd()</span> method to add a valid XML document type definition to your\n        XML document.</p>",
                        "name": "writeDtd(String dtd)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "try {\n  var ttl = new GlideDateTime(\"2011-01-01 12:00:00\");\n  var builder = new sn_ih.XMLStreamingBuilder()\n    .withAttachment()\n    .expiresAt(ttl)\n    .build();\n\n  builder.startDocument()\n  .writeDtd('address')\n  .writeCDataElement('home', '#PCDATA', {'streetAddress', 'city', 'state', 'postalCode'})\n      .writeTextElement(\"streetAddress\", \"21 2nd Street\")\n      .writeTextElement(\"city\", \"Santa Clara\")\n      .writeTextElement(\"state\", \"CA\")\n      .writeTextElement(\"postalCode\", \"11111\")\n  .endDocument()\n      \n  gs.log(builder.getAttachmentId());\n} catch (err) {\n  gs.log(err);\n} finally {\n  builder.close();\n}",
                                "description": "This example uses a document type definition named <span class=\"keyword apiname\">address</span> to define an\n        internal document type definition for the XML document."
                            }
                        ],
                        "params": [
                            {
                                "name": "dtd",
                                "type": "String",
                                "description": "Name of a valid XML document type definition."
                            }
                        ],
                        "return": {
                            "type": "XMLStreamingAPI",
                            "description": "<span class=\"ph\">Streaming XML object for constructing the\n                payload.</span>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "XSA-writeNamespace",
                        "short_description": "Adds a namespace to an element in your XML document.",
                        "description": "<p>After calling the <span class=\"keyword apiname\">startDocument()</span>, <span class=\"keyword apiname\">startElement()</span>, or\n          <span class=\"keyword apiname\">writeTextElement()</span> method, you can call the\n          <span class=\"keyword apiname\">writeNamespace()</span> method to add a namespace to the associated XML\n        element.</p>",
                        "name": "writeNamespace(String prefix, String namespaceURI)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "try {\n    var ttl = new GlideDateTime('2011-01-01 12:00:00');\n    var builder = new sn_ih.XMLStreamingBuilder().withAttachment().expiresAt(ttl);\n    var streamingDocument = builder.build();\n\n    streamingDocument.startDocument('company')\n    .writeNamespace('x','https://www.servicenow.com')\n        .writeTextElement('companyName', 'ServiceNow')\n        .writeNamespace('x')\n    .endDocument();\n    gs.log(streamingDocument.getAttachmentId());\n} catch (err) {\n    gs.log(err);\n} finally {\n    streamingDocument.close();\n}",
                                "description": "The following example shows how to add a namespace and URI to the <samp class=\"ph codeph\">company</samp>\n        root element, and then assign the prefix to the nested <samp class=\"ph codeph\">companyName</samp>\n        element."
                            }
                        ],
                        "params": [
                            {
                                "name": "prefix",
                                "type": "String",
                                "description": "Prefix for the XML namespace."
                            },
                            {
                                "name": "namespaceURI",
                                "type": "String",
                                "description": "Optional. URI for the namespace."
                            }
                        ],
                        "return": {
                            "type": "XMLStreamingAPI",
                            "description": "<span class=\"ph\">Streaming XML object for constructing the\n                payload.</span>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "XSA-writeNamespaces_O",
                        "short_description": "Adds namespaces to the\n    root\n    element in your XML document.",
                        "description": "<p>After calling the <span class=\"keyword apiname\">startDocument()</span> or <span class=\"keyword apiname\">startElement()</span>\n        method, you can call the <span class=\"keyword apiname\">writeNamespaces()</span> method to declare namespaces\n        for the associated XML element.</p>",
                        "name": "writeNamespaces(Object namespaceMap)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "try {\n    var ttl = new GlideDateTime('2011-01-01 12:00:00');\n    var builder = new sn_ih.XMLStreamingBuilder().withAttachment().expiresAt(ttl);\n    var streamingDocument = builder.build();\n\n    streamingDocument.startDocument('company')\n    .writeNamespaces({'x':'https://www.servicenow.com', 'y':'https://www.developer.servicenow.com'})\n        .writeTextElement('companyName', 'ServiceNow')\n        .writeNamespace('x')\n        .writeTextElement('devFramework', 'Now Experience UI Framework')\n        .writeNamespace('y')\n    .endDocument();\n    gs.log(streamingDocument.getAttachmentId());\n} catch (err) {\n    gs.log(err);\n} finally {\n    streamingDocument.close();\n}",
                                "description": "This example adds two namespaces and URIs to the <span class=\"keyword apiname\">company</span> root element,\n        and then assigns the appropriate prefixes to the nested elements."
                            }
                        ],
                        "params": [
                            {
                                "name": "namespaceMap",
                                "type": "Object",
                                "description": "Map of keys and values containing namespace prefixes and URIs to associate with\n                the root element of the\n                XML\n                document. For example:\n                <pre class=\"pre codeblock\">{\n'namespaceOne':'namespaceValue',\n'namespaceTwo':'namespaceValue'\n}</pre>"
                            }
                        ],
                        "return": {
                            "type": "XMLStreamingAPI",
                            "description": "<span class=\"ph\">Streaming XML object for constructing the\n                payload.</span>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "XSA-writeTextElement_S_S_O",
                        "short_description": "Adds a single XML element to your XML document.",
                        "description": "<p>After calling the <span class=\"keyword apiname\">startDocument()</span> method, you can call the\n          <span class=\"keyword apiname\">writeTextElement()</span> method to add a single XML element to your  XML\n        document's structure.</p>",
                        "name": "writeTextElement(String name, String text, Object prefix)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "try {\n    var ttl = new GlideDateTime('2011-01-01 12:00:00');\n    var builder = new sn_ih.XMLStreamingBuilder().withAttachment().expiresAt(ttl);\n    var streamingDocument = builder.build();\n\n    streamingDocument.startDocument('Employee')\n        .writeTextElement('firstName', 'John')\n        .writeTextElement('lastName', 'Smith')\n        .writeTextElement('age', '25')\n    .endDocument();\n    gs.log(streamingDocument.getAttachmentId());\n} catch (err) {\n    gs.log(err);\n} finally {\n    streamingDocument.close();\n}",
                                "description": "The following example shows how to create an XML document containing three elements with\n        information about an employee."
                            }
                        ],
                        "params": [
                            {
                                "name": "name",
                                "type": "String",
                                "description": "Name of the XML element."
                            },
                            {
                                "name": "text",
                                "type": "String",
                                "description": "Value for the XML element."
                            },
                            {
                                "name": "prefix",
                                "type": "Object",
                                "description": "Optional. Map of prefixes and values associated with the XML element. For\n                example:\n                <pre class=\"pre codeblock\">{\n'prefixOne':'prefixValue',\n'prefixTwo':'prefixValue'\n}</pre>\nYou\n                must associate an XML element's prefix with a namespace using <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-application-development/page/app-store/dev_portal/API_reference/XMLStreamingAPI/concept/XMLStreamingAPIScopedAPI.html#XSA-writeNamespace\" target=\"_blank\">writeNamespace()</a>."
                            }
                        ],
                        "return": {
                            "type": "XMLStreamingAPI",
                            "description": "<span class=\"ph\">Streaming XML object for constructing the\n                payload.</span>"
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "<div class=\"p\"><span class=\"ph\">Use these methods in a <span class=\"ph\">Flow Designer</span> Script step with the <span class=\"keyword parmname\">sn_ih</span> namespace identifier. For\n                example, you can use this API to create an XML payload in the <span class=\"ph\">Flow Designer</span> Script step and pass the returned value to the REST step\n                to send the request to a third-party service. For more information, see the <span class=\"ph\">Flow Designer</span>\n                <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-servicenow-platform/page/administer/flow-designer/reference/javascript-step-action-designer.html\" target=\"_blank\">Script\n              step</a>.</span><div class=\"note note\"><span class=\"notetitle\">Note:</span> <span class=\"ph\">You can only use this API within the <span class=\"ph\">Flow Designer</span> environment.</span></div>\n</div><br/><br/><h2 class=\"title sectiontitle\">API call order</h2>\n      \n      <p class=\"p\">Generate XML payloads by first instantiating a builder object with\n          <span class=\"keyword apiname\">XMLStreamingBuilder</span> and then calling the methods in the\n          <span class=\"keyword apiname\">XMLStreamingAPI</span>\n        class:</p>\n\n      <div class=\"p\">\n                <dl class=\"dl\">\n                  \n                    <dt class=\"dt dlterm\">1. <span class=\"keyword apiname\">XMLStreamingBuilder</span>: Creates a builder object</dt>\n\n                    <dd class=\"dd\">Use these method in the following order to create a builder object:<div class=\"p\">\n                        <ol class=\"ol\" id=\"XMLStreamingBuilderScopedAPI__d96210e447\">\n                          <li class=\"li\"><span class=\"keyword apiname\">XMLStreamingBuilder()</span>: <span class=\"ph\">Instantiates the\n                              XMLStreamingBuilder object.</span></li>\n\n                          <li class=\"li\"><span class=\"keyword apiname\">withAttachment()</span>: Optional. <span class=\"ph\">Creates an XML\n                              document as an attachment and stores it in the Streaming Attachments\n                              [streaming_attachment] table. If you don't call this method, the API\n                              builds the payload as an XML string.</span></li>\n\n                          <li class=\"li\"><span class=\"keyword apiname\">expiresAt()</span>: Optional. <span class=\"ph\">Sets a time when the\n                              attachment expires. False is the default. Must also call the\n                                <span class=\"keyword apiname\">withAttachment()</span> method.</span>\n                            </li>\n\n                          <li class=\"li\"><span class=\"keyword apiname\">build()</span>: <span class=\"ph\">Returns an XMLStreamingAPI\n                              object.</span></li>\n\n                        </ol>\n\n                      </div>\n</dd>\n\n                  \n                  \n                    <dt class=\"dt dlterm\">2. <span class=\"keyword apiname\">XMLStreamingAPI</span>: Builds the XML payload</dt>\n\n                    <dd class=\"dd\">Use these methods in the following order to create the XML payload:<div class=\"p\">\n                        <ol class=\"ol\" id=\"XMLStreamingBuilderScopedAPI__d96210e498\">\n                          <li class=\"li\"><span class=\"keyword apiname\">startDocument()</span>: <span class=\"ph\">Creates the top-level parent\n                              element in the XML document.</span></li>\n\n                          <li class=\"li\">Methods to generate child elements in the XML document, such as\n                              <span class=\"keyword apiname\">writeTextElement()</span>,\n                              <span class=\"keyword apiname\">startElement()</span>, and\n                            <span class=\"keyword apiname\">writeArray()</span>.</li>\n\n                          <li class=\"li\">Methods to generate attributes for an element, such as\n                              <span class=\"keyword apiname\">writeAttribute()</span>,\n                              <span class=\"keyword apiname\">writeNamespace()</span>, and\n                            <span class=\"keyword apiname\">writeDtd()</span>.</li>\n\n                          <li class=\"li\"><span class=\"keyword apiname\">endElement()</span>: <span class=\"ph\">Closes an XML element.</span></li>\n\n                          <li class=\"li\"><span class=\"keyword apiname\">endDocument</span>: <span class=\"ph\">Closes the top-level parent\n                              element.</span></li>\n\n                          <li class=\"li\"><span class=\"keyword apiname\">getXMLString()</span> or\n                              <span class=\"keyword apiname\">getAttachmentId()</span>: Returns the XML string or\n                            attachment ID that you created. </li>\n\n                          <li class=\"li\"><span class=\"keyword apiname\">close()</span>: <span class=\"ph\">Closes the XMLStreamingAPI\n                              object.</span></li>\n\n                        </ol>\n\n                      </div>\n</dd>\n\n                  \n                </dl>\n\n              </div><br/><br/><h2 class=\"title sectiontitle\">Size\n        limits</h2>\n      \n      <p class=\"p\">Payloads generated through this API cannot exceed these size limits:</p>\n\n      <div class=\"p\">\n        <ul class=\"ul\" id=\"XMLStreamingBuilderScopedAPI__ul_llq_msw_3lb\">\n                <li class=\"li\">Attachments: 200 MB</li>\n\n                <li class=\"li\">Strings: 5 MB</li>\n\n              </ul>\n\n      </div><br/><br/><p class=\"p\">The following example shows how to create an XML document and store it in the Streaming\n        Attachments [streaming_attachment] table with a defined expiration\n        date.</p>\n\n      <div class=\"p\">\n        <pre><code class='language-javascript'>\ntry {\n  var ttl = new GlideDateTime(\"2011-01-01 12:00:00\");\n  var builder = new sn_ih.XMLStreamingBuilder()\n    .withAttachment() // Creates the XML document in streaming mode within an attachment.\n    .expiresAt(ttl) // Sets an expiration date for the attachment.\n    .build(); // Creates the XMLStreamingAPI object.\n\n  builder.startDocument() // Begins generating the XML document.\n    .writeTextElement(\"firstName\",\"John\") // Writes a \"firstName\" element and value.\n    .writeTextElement(\"lastName\",\"Smith\")\n    .writeTextElement(\"age\",\"25\")\n    .startElement(\"address\") // Adds an \"address\" parent element.\n      .writeTextElement(\"streetAddress\", \"21 2nd Street\") // Writes a child element and value.\n      .writeTextElement(\"city\", \"Santa Clara\")\n      .writeTextElement(\"state\", \"CA\")\n      .writeTextElement(\"postalCode\", \"11111\")\n    .endElement() // Adds a closing tag for the \"address\" element.\n    .startElement(\"phoneNumber\")\n      .writeTextElement(\"type\",\"home\")\n      .writeTextElement(\"number\",\"212 555-1234\")\n      .writeTextElement(\"type\",\"fax\")\n      .writeTextElement(\"number\",\"646 555-4567\")\n    .endElement()\n  .endDocument() // Stops generating the XML document.\n      \n  gs.log(builder.getAttachmentId()); // Returns the sys_id of the attachment.\n} catch (err) {\n  gs.log(err);\n} finally {\n  builder.close();\n}</code></pre>\n\n      </div>\n\n      <p class=\"p\">Alternatively, this example shows how to use the API in the Script step and create the\n        payload as an XML string. You can use this option to create payloads under\n        5\n        MB.</p>\n\n      <div class=\"p\" id=\"XMLStreamingBuilderScopedAPI__xml-non-streaming-example\">\n        <pre><code class='language-javascript'>(function execute(inputs, outputs) {\n\n  var builder = new sn_ih.XMLStreamingBuilder().build();\n  \n  builder.startDocument()\n    .enablePrettyPrint()\n    .writeTextElement(\"firstName\",\"John\")\n    .writeTextElement(\"lastName\",\"Smith\")\n    .writeTextElement(\"age\",\"25\")\n    .startElement(\"address\")\n      .writeTextElement(\"streetAddress\", \"21 2nd Street\")\n      .writeTextElement(\"city\", \"Santa Clara\")\n      .writeTextElement(\"state\", \"CA\")\n      .writeTextElement(\"postalCode\", \"11111\")\n    .endElement()\n    .startElement(\"phoneNumber\")\n      .writeTextElement(\"type\",\"home\")\n      .writeTextElement(\"number\",\"212 555-1234\")\n      .writeTextElement(\"type\",\"fax\")\n      .writeTextElement(\"number\",\"646 555-4567\")\n    .endElement()\n  .endDocument()\n\n  outputs.payload = builder.getXMLString();\n  \n})(inputs, outputs);</code></pre>\n\n      </div>\n\n      <p class=\"p\">Output:</p>\n\n      <div class=\"p\" id=\"XMLStreamingBuilderScopedAPI__xml-non-streaming-example-output\">\n        <pre><code class='language-javascript'>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;firstName&gt;John&lt;/firstName&gt;\n&lt;lastName&gt;Smith&lt;/lastName&gt;\n&lt;age&gt;25&lt;/age&gt;\n&lt;address&gt;\n  &lt;streetAddress&gt;21 2nd Street&lt;/streetAddress&gt;\n  &lt;city&gt;Santa Clara&lt;/city&gt;\n  &lt;state&gt;CA&lt;/state&gt;\n  &lt;postalCode&gt;11111&lt;/postalCode&gt;\n&lt;/address&gt;\n&lt;phoneNumber&gt;\n  &lt;type&gt;home&lt;/type&gt;\n  &lt;number&gt;212 555-1234&lt;/number&gt;\n  &lt;type&gt;fax&lt;/type&gt;\n  &lt;number&gt;646 555-4567&lt;/number&gt;\n&lt;/phoneNumber&gt;</code></pre>\n\n      </div>",
                "short_description": "<span class=\"ph\">Create a builder object to build a large XML\n                payload for use in a REST or SOAP request to send bulk data to a third-party API.\n                You can also create the payload as an XML string for a non-streaming\n              option.</span>",
                "identifier": "XMLStreamingBuilderScopedAPI",
                "name": "XMLStreamingBuilder",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "XSB-StreamingXMLBuilder",
                        "short_description": "Instantiates the XMLStreamingBuilder object.",
                        "description": "",
                        "name": "XMLStreamingBuilder()",
                        "type": "Constructor",
                        "examples": [
                            {
                                "script": "var builder = new sn_ih.XMLStreamingBuilder()",
                                "description": "This example shows how to instantiate a <samp class=\"ph codeph\">builder</samp> object."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "XSB-build",
                        "short_description": "Returns an XMLStreamingAPI object.",
                        "description": "",
                        "name": "build()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "\ntry {\n  var ttl = new GlideDateTime(\"2011-01-01 12:00:00\");\n  var builder = new sn_ih.XMLStreamingBuilder()\n    .withAttachment() // Creates the XML document in streaming mode within an attachment.\n    .expiresAt(ttl) // Sets an expiration date for the attachment.\n    .build(); // Creates the XMLStreamingAPI object.\n\n  builder.startDocument() // Begins generating the XML document.\n    .writeTextElement(\"firstName\",\"John\") // Writes a \"firstName\" element and value.\n    .writeTextElement(\"lastName\",\"Smith\")\n    .writeTextElement(\"age\",\"25\")\n    .startElement(\"address\") // Adds an \"address\" parent element.\n      .writeTextElement(\"streetAddress\", \"21 2nd Street\") // Writes a child element and value.\n      .writeTextElement(\"city\", \"Santa Clara\")\n      .writeTextElement(\"state\", \"CA\")\n      .writeTextElement(\"postalCode\", \"11111\")\n    .endElement() // Adds a closing tag for the \"address\" element.\n    .startElement(\"phoneNumber\")\n      .writeTextElement(\"type\",\"home\")\n      .writeTextElement(\"number\",\"212 555-1234\")\n      .writeTextElement(\"type\",\"fax\")\n      .writeTextElement(\"number\",\"646 555-4567\")\n    .endElement()\n  .endDocument() // Stops generating the XML document.\n      \n  gs.log(builder.getAttachmentId()); // Returns the sys_id of the attachment.\n} catch (err) {\n  gs.log(err);\n} finally {\n  builder.close();\n}",
                                "description": "The following example shows how to create an XML document and store it in the Streaming\n        Attachments [streaming_attachment] table with a defined expiration date."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "<a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/sn_ih-namespace/XMLStreamingAPIScopedAPI\" title=\"Build a large streaming XML payload for use in a REST or SOAP request to send bulk data to a third-party API. You can also create the payload as an XML string for a non-streaming option.\">XMLStreamingAPI</a>",
                            "description": "<span class=\"ph\">Streaming XML object for constructing the\n                payload.</span>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "XSB-expiresAt_O",
                        "short_description": "<span class=\"ph\">Sets a\n                              time when the attachment expires. Must also call the\n                                <span class=\"keyword apiname\">withAttachment()</span> method.</span>",
                        "description": "",
                        "name": "expiresAt(Object expiresAt)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "\ntry {\n  var ttl = new GlideDateTime(\"2011-01-01 12:00:00\");\n  var builder = new sn_ih.XMLStreamingBuilder()\n    .withAttachment() // Creates the XML document in streaming mode within an attachment.\n    .expiresAt(ttl) // Sets an expiration date for the attachment.\n    .build(); // Creates the XMLStreamingAPI object.\n\n  builder.startDocument() // Begins generating the XML document.\n    .writeTextElement(\"firstName\",\"John\") // Writes a \"firstName\" element and value.\n    .writeTextElement(\"lastName\",\"Smith\")\n    .writeTextElement(\"age\",\"25\")\n    .startElement(\"address\") // Adds an \"address\" parent element.\n      .writeTextElement(\"streetAddress\", \"21 2nd Street\") // Writes a child element and value.\n      .writeTextElement(\"city\", \"Santa Clara\")\n      .writeTextElement(\"state\", \"CA\")\n      .writeTextElement(\"postalCode\", \"11111\")\n    .endElement() // Adds a closing tag for the \"address\" element.\n    .startElement(\"phoneNumber\")\n      .writeTextElement(\"type\",\"home\")\n      .writeTextElement(\"number\",\"212 555-1234\")\n      .writeTextElement(\"type\",\"fax\")\n      .writeTextElement(\"number\",\"646 555-4567\")\n    .endElement()\n  .endDocument() // Stops generating the XML document.\n      \n  gs.log(builder.getAttachmentId()); // Returns the sys_id of the attachment.\n} catch (err) {\n  gs.log(err);\n} finally {\n  builder.close();\n}",
                                "description": "The following example shows how to create an XML document and store it in the Streaming\n        Attachments [streaming_attachment] table with a defined expiration date."
                            }
                        ],
                        "params": [
                            {
                                "name": "expiresAt",
                                "type": "<a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/no-namespace/c_APIRef\" title=\"The scoped GlideDateTime class provides methods for performing operations on GlideDateTime objects, such as instantiating GlideDateTime objects or working with glide_date_time fields.\">GlideDateTime</a>",
                                "description": "Object that is set when the attachment expires. <div class=\"p\">\n                  <ul class=\"ul\" id=\"XSB-expiresAt_O__ul_xsc_trx_3lb\">\n                    <li class=\"li\">Minimum value: 7200 seconds, or two hours, from the time the attachment is\n                      created. This is the default value if you don't call the\n                        <span class=\"keyword apiname\">expiresAt()</span> method.</li>\n\n                    <li class=\"li\">Maximum value: 172800 seconds, or 48 hours, from the time the attachment is\n                      created.</li>\n\n                  </ul>\n\n                </div>"
                            }
                        ],
                        "return": {
                            "type": "XMLStreamingBuilder",
                            "description": "Builder object used to initiate the XML payload."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "XSB-withAttachment",
                        "short_description": "Creates an XML document as an attachment and stores it in the Streaming Attachments\n    [streaming_attachment] table. If you don't call this method, the API creates the XML document as\n    a string.",
                        "description": "",
                        "name": "withAttachment()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "XMLStreamingBuilder",
                            "description": "Builder object used to initiate the XML payload."
                        },
                        "extras": []
                    }
                ]
            }
        ]
    },
    {
        "identifier": "sn_impex-namespace",
        "namespace": "sn_impex",
        "classes": [
            {
                "description": "The <span class=\"keyword apiname\">CSVParser</span> API is in the <span class=\"keyword parmname\">sn_impex</span> namespace.",
                "short_description": "This API provides methods for parsing comma-separated value (CSV) formatted records\n    into an object or an array.",
                "identifier": "CSVParserScopedAPI",
                "name": "CSVParser",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "CSVParser-parseLineToArray_S_S_S",
                        "short_description": "Parses passed in CSV formatted content into an array.",
                        "description": "",
                        "name": "parseLineToArray(String cvsLine, String delimiter, String quoteCharacter)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var csvLine = '\\\"Joe\\\",\\\"Smith\\\",\\\"1470 W Carmen, Chicago IL, 60640\\\"';\nvar delimiter = ',';\nvar quoteCharacter = '\"';\n\nvar x = new sn_impex.CSVParser().parseLineToArray(csvLine, delimiter, quoteCharacter);\n\ngs.log(x[0]);\ngs.log(x[1]);\ngs.log(x[2]);\n",
                                "description": "This example shows simple CSV formatted content parsed into a returned array."
                            }
                        ],
                        "params": [
                            {
                                "name": "csvLine",
                                "type": "String",
                                "description": "CSV content to parse."
                            },
                            {
                                "name": "delimiter",
                                "type": "String",
                                "description": "Optional. Character used to delineate the fields in the source CSV\n                  content.<p class=\"p\">Default: Comma ','</p>"
                            },
                            {
                                "name": "quoteCharacter",
                                "type": "String",
                                "description": "Optional. Character used as the quote character in the source CSV content.\n                  <p class=\"p\">Default: Double quote '\"'</p>"
                            }
                        ],
                        "return": {
                            "type": "Array",
                            "description": "Array containing the parsed values for each element in the passed-in CSV\n                  content.<p class=\"p\">For\n                example:</p>\n<pre class=\"pre codeblock\">{\nJoe,\nSmith,\n470 W Carmen, Chicago IL, 60640\n}</pre>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "CSVParser-parseLineToObject_S_A_S_S",
                        "short_description": "Parses passed in CSV formatted content into an object.",
                        "description": "",
                        "name": "parseLineToObject(String cvsLine, Array headers, String delimiter, String quoteCharacter)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var csvLine = '\\\"Joe\\\",\\\"Smith\\\",\\\"1470 W Carmen, Chicago IL, 60640\\\"';\nvar headers = ['first_name', 'last_name', 'address'];\nvar delimiter = ',';\nvar quoteCharacter = '\"';\n\nvar x = new sn_impex.CSVParser().parseLineToObject(csvLine, headers, delimiter, quoteCharacter);\n\ngs.log(x.first_name);\ngs.log(x.last_name);\ngs.log(x.address);\n",
                                "description": "This example shows CSV formatted content parsed into a returned object."
                            },
                            {
                                "script": "var csvLine = '\\\"Joe\\\",\\\"Smith\\\",\\\"1470 W Carmen, Chicago IL, 60640\\\"';\nvar headers = null;\nvar delimiter = ',';\nvar quoteCharacter = '\"';\ntry {\nvar x = new sn_impex.CSVParser().parseLineToObject(csvLine, headers, delimiter, quoteCharacter);\n\ngs.log(x.first_name);\ngs.log(x.last_name);\ngs.log(x.address);\n}\ncatch(ex) {\n      gs.info(ex.message);\n}\n",
                                "description": "This example shows an exception response because of an invalid pass of the header\n        parameter."
                            }
                        ],
                        "params": [
                            {
                                "name": "csvLine",
                                "type": "String",
                                "description": "CSV content to parse."
                            },
                            {
                                "name": "headers",
                                "type": "Array of Strings",
                                "description": "Headers associated with the CSV content. These headers must be specified in the\n                same order as the corresponding content in <span class=\"keyword parmname\">csvLine</span>. For\n                example, <samp class=\"ph codeph\">var headers = ['first_name', 'last_name',\n                'address'];</samp>"
                            },
                            {
                                "name": "delimiter",
                                "type": "String",
                                "description": "Optional. Character used to delineate the fields in the source CSV\n                  content.<p class=\"p\">Default: Comma ','</p>"
                            },
                            {
                                "name": "quoteCharacter",
                                "type": "String",
                                "description": "Optional. Character used as the quote character in the source CSV content.\n                  <p class=\"p\">Default: Double quote '\"'</p>"
                            }
                        ],
                        "return": {
                            "type": "Object",
                            "description": "Object containing the header and corresponding value for each element in the\n                passed-in CSV content.<p class=\"p\">For\n                example:</p>\n<pre class=\"pre codeblock\">{\nfirst_name: Joe,\nlast_name: Smith,\naddress: 1470 W Carmen, Chicago IL, 60640\n}</pre>"
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "The <span class=\"keyword apiname\">GlideExcelParser</span> methods can be used in global and scoped scripts. Use\n      the <span class=\"keyword parmname\">sn_impex</span> namespace identifier to create a GlideExcelParser\n      object.",
                "short_description": "Parse .xlsx formatted Excel files and access file data in script.",
                "identifier": "GlideExcelParserScopedAPI",
                "name": "GlideExcelParser - Scoped, Global",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "GEPS-GlideExcelParser",
                        "short_description": "Creates an instance of GlideExcelParser.",
                        "description": "<p>The API name space identifier \"sn_impex\" must be used when creating a GlideExcelParser\n        object.</p>",
                        "name": "GlideExcelParser()",
                        "type": "Constructor",
                        "examples": [
                            {
                                "script": "var parser = new sn_impex.GlideExcelParser();Â \nvar attachment = new GlideSysAttachment();\n// use attachment sys id of an excel file\nvar attachmentStream = attachment.getContentStream(&lt;attachment sys id&gt;);\n\nparser.parse(attachmentStream);Â \n\n//retrieve the column headers\nvar headers = parser.getColumnHeaders(); Â \nvar header1 = headers[0];Â \nvar header2 = headers[1];Â \n\n//print headers\ngs.info(header1 + \" \" + header2); \n\nwhile(parser.next()) {Â \nÂ  var row = parser.getRow();Â \n  //print row value for both columnsÂ   \n  gs.info(row[header1] + ' ' + row[header2]) \n}",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GEPS-close",
                        "short_description": "Close the connection to the input stream and release the document.",
                        "description": "",
                        "name": "close()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GEPS-getColumnHeaders",
                        "short_description": "Returns a list of column headers from the parsed document.",
                        "description": "",
                        "name": "getColumnHeaders()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "Array",
                            "description": "An array of strings of column headers from the parsed document."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GEPS-getErrorMessage",
                        "short_description": "Returns the error message when the <span class=\"keyword apiname\">parse()</span> method fails.",
                        "description": "",
                        "name": "getErrorMessage()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The error message."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GEPS-getRow",
                        "short_description": "Get the current row values and headers.",
                        "description": "",
                        "name": "getRow()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "Object",
                            "description": "The row headers are property names and the row values are property\n                values."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GEPS-getTableInfo",
                        "short_description": "Gets table column types and max character length from a spreadsheet or CSV\n    attachment.",
                        "description": "<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This method is restricted to scoped applications.</div></p>",
                        "name": "getTableInfo()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var attachmentSysId = \"&lt;sys_id&gt;\";\nvar headerRowNumber = 6;\n\nvar attachmentStream = new GlideSysAttachment().getContentStream(attachmentSysId);\nvar parser = new sn_impex.GlideExcelParser();\nparser.setHeaderRowNumber(headerRowNumber);\nif (!parser.parse(attachmentStream)) {\n    throw \"Attachment could not be parsed as an Excel Spreadsheet \" + attachmentSysId;\n}\nvar tableInfo = parser.getTableInfo();\nfor (var name in tableInfo) {\ngs.info('Column Name : ' + name + ', Type : ' + tableInfo[name].getType() + ', Max Length : ' + tableInfo[name].getLength());\n}",
                                "description": "This example shows how to data from a 7-column spreadsheet attachment including row data\n        such as 1, Meghan, 1/1/85, 1:00 AM, 10.00%, 224-432-8582, Â½."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Object",
                            "description": "Returns attachment data as a map in which the key is column name. Values\n                contain column type and maximum length of a character string in the column. Access\n                return values using the <span class=\"keyword apiname\">getType()</span> and\n                  <span class=\"keyword apiname\">getLength()</span> methods."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GEPS-next",
                        "short_description": "Moves to the next row.",
                        "description": "",
                        "name": "next()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "Returns true if there is a next row, otherwise, returns false."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GEPS-parse_GSIS",
                        "short_description": "Parse an XLSX formatted Excel document.",
                        "description": "",
                        "name": "parse(GlideScriptableInputStream inputStream)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var parser = new sn_impex.GlideExcelParser();\nparser.parse(request.body.dataStream); ",
                                "description": " from a scripted REST API script where the Excel file is sent in the request\n        payload."
                            }
                        ],
                        "params": [
                            {
                                "name": "inputStream",
                                "type": "GlideScriptableInputStream",
                                "description": "The Excel document to be parsed."
                            }
                        ],
                        "return": {
                            "type": "Boolean",
                            "description": "Returns true if the parse was successful, otherwise, returns false."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GEPS-setHeaderRowNumber_N",
                        "short_description": "Set the number of the header row to be retrieved.",
                        "description": "",
                        "name": "setHeaderRowNumber(Number headerRowNumber)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "headerRowNumber",
                                "type": "Number",
                                "description": "The header row to be retrieved."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GEPS-setNullToEmpty_B",
                        "short_description": "Return an empty value instead of null when an Excel cell is not present.",
                        "description": "",
                        "name": "setNullToEmpty(Boolean empty)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "empty",
                                "type": "Boolean",
                                "description": "When true, cells that are not present return an empty value. When false, cells\n                that are not present return null."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GEPS-setSheetName_S",
                        "short_description": "Set the name of the sheet to be retrieved.",
                        "description": "<p>If both <span class=\"keyword apiname\">setSheetNumber()</span> and <span class=\"keyword apiname\">setSheetName()</span> are set,\n          <span class=\"keyword apiname\">setSheetName()</span> is used.</p>",
                        "name": "setSheetName(String sheetName)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "sheetName",
                                "type": "String",
                                "description": "The name of the sheet to be retrieved."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GEPS-setSheetNumber_N",
                        "short_description": "Set the number of the Excel sheet to be retrieved.",
                        "description": "<p>If both <span class=\"keyword apiname\">setSheetNumber()</span> and <span class=\"keyword apiname\">setSheetName()</span> are set,\n          <span class=\"keyword apiname\">setSheetNumber()</span> is ignored.</p>",
                        "name": "setSheetNumber(Number sheetNumber)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "sheetNumber",
                                "type": "Number",
                                "description": "The Excel sheet number to retrieve."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "These methods create the Import Set table using a dynamic, standard naming convention. Tables\n      must have at least one defined column. Modification and deletion of existing Import Set tables\n      is not supported.<br/><br/>A scheduled job named Scripted Import Set Deleter runs every seven days by default. Scripted\n      Import Set Deleter deletes all Import Sets, Transform Maps, Transform Entries, and drops the\n      Import Set Tables associated with the tables created by this\n      API.<br/><br/>You can use the <span class=\"keyword apiname\">GlideImportSetTable</span> methods in global and scoped scripts.\n      Use the <span class=\"keyword parmname\">sn_impex</span> namespace identifier to create a GlideImportSetTable\n      object.",
                "short_description": "The <span class=\"keyword apiname\">GlideImportSetTable</span> API provides methods to create temporary\n    Import Set tables.",
                "identifier": "GlideImportSetTableAPI",
                "name": "GlideImportSetTable - Scoped, Global",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "GImpSetTbl-GlideImportSetTable_S",
                        "short_description": "Instantiates a GlideImportSetTable object.",
                        "description": "",
                        "name": "GlideImportSetTable(String tableLabel)",
                        "type": "Constructor",
                        "examples": [
                            {
                                "script": "var importSetTable = new sn_impex.GlideImportSetTable(\"temp user table\");",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "tableLabel",
                                "type": "String",
                                "description": "Label of the Import Set table created upon calling the\n                  <span class=\"keyword apiname\">create()</span> method."
                            }
                        ],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GImpSetTbl-addDateTimeColumn_S",
                        "short_description": "Creates a GlideDateTime column.",
                        "description": "",
                        "name": "addDateTimeColumn(String columnLabel)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var importSetTable = new sn_impex.GlideImportSetTable(\"temp user table\");\nimportSetTable.addDateTimeColumn('start date');\nvar tableStructure = importSetTable.create();\n",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "columnLabel",
                                "type": "String",
                                "description": "Label of the GlideDateTime column to create in the Import Set table."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GImpSetTbl-addStringColumn_S_N",
                        "short_description": "Creates a string column.",
                        "description": "",
                        "name": "addStringColumn(String columnLabel, Number length)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var importSetTable = new sn_impex.GlideImportSetTable(\"temp user table\");\nimportSetTable.addStringColumn('first name', 50);\nimportSetTable.addStringColumn('last name', 50);\nvar tableStructure = importSetTable.create();\n",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "columnLabel",
                                "type": "String",
                                "description": "Label of the string column to create in the Import Set table."
                            },
                            {
                                "name": "length",
                                "type": "Number",
                                "description": "Optional. Maximum column length. <p class=\"p\">Default: 40 characters</p>"
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GImpSetTbl-create",
                        "short_description": "Creates the Import Set table.",
                        "description": "",
                        "name": "create()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "// Create Import Set table\nvar importSetTable = new sn_impex.GlideImportSetTable(\"temp user table\");\nimportSetTable.addStringColumn('first name', 40);\nimportSetTable.addStringColumn('last name', 40);\nimportSetTable.addDateTimeColumn(âstart dateâ);\nvar tableStructure = importSetTable.create();\n\n/*\ntableStructure = {\n\"tableName\": \"imp_staging_table_1417601730000\",\n\"tableLabel\": âtemp user table\",\n\"columns\": {\n\t\t\"first name\": \"u_first_name\",\n\t\t\"last name\": \"u_last_name\",\n\t\t\"start date\": \"u_start_date\"\n\t}\n}\n*/\n\nvar importSetTableName = tableStructure[\"tableName\"];\nvar columns = tableStructure[\"columns\"];\n",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Object",
                            "description": "JSON object in the following format:<div class=\"p\">\n                  <ul class=\"ul\" id=\"GImpSetTbl-create__ul_ebc_ft2_vjb\">\n                    <li class=\"li\">tableName: String. Database name of the table.</li>\n\n                    <li class=\"li\">tableLabel: String. User-friendly label of the table (rewriteable).</li>\n\n                    <li class=\"li\">columns: Object. Map of  table column labels to column names provided by the\n                        <span class=\"keyword apiname\">addDateTimeColumn()</span> and\n                        <span class=\"keyword apiname\">addStringColumn()</span> methods.<ul class=\"ul\" id=\"GImpSetTbl-create__ul_tgt_t52_vjb\">\n                        <li class=\"li\">column_label: String. Label of the string column in the Import Set\n                          table.</li>\n\n                        <li class=\"li\">column_name: String. Name of the string column in the Import Set\n                          table.</li>\n\n                      </ul>\n</li>\n\n                  </ul>\n\n                </div>\n<pre class=\"pre codeblock\">{\"tableName\": \"&lt;table_name&gt;\", \"tableLabel\": \"&lt;table label&gt;\", \"columns\": StringMap(&lt;column_label&gt;: &lt;column_name&gt;)}</pre>"
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "You can use the <span class=\"keyword apiname\">GlideImportSetTransformMap</span> methods in global and scoped\n      scripts. Use the <span class=\"keyword parmname\">sn_impex</span> namespace identifier to create a\n      GlideImportSetTransformMap object.",
                "short_description": "Provides methods to create transform maps and transform entries.",
                "identifier": "GlideImportSetTransformMapAPI",
                "name": "GlideImportSetTransformMap - Scoped, Global",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "GImpSetTMp-GlImportSetTransformMap",
                        "short_description": "Instantiates a GlideImportSetTransformMap object.",
                        "description": "",
                        "name": "GlideImportSetTransformMap(String transformMapName, String importSetTableName, String targetTableName)",
                        "type": "Constructor",
                        "examples": [
                            {
                                "script": "var transformMap = new sn_impex.GlideImportSetTransformMap(\"temp user map name\", importSetTableName, targetTableName);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "transformMapName",
                                "type": "String",
                                "description": "Name of the map."
                            },
                            {
                                "name": "importSetTableName",
                                "type": "String",
                                "description": "Name of the Import Set table."
                            },
                            {
                                "name": "targetTableName",
                                "type": "String",
                                "description": "Name of the target table."
                            }
                        ],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GImpSetTMp-addGDTTrnsEntry_S_S_B_S",
                        "short_description": "Add a GlideDateTime transform entry to a transform map.",
                        "description": "",
                        "name": "addDateTimeTransformEntry(String sourceColumn, String targetColumn, Boolean coalesce, String dateTimeFormat)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var transformMap = new sn_impex.GlideImportSetTransformMap(\"temp user map name\", importSetTableName, targetTableName,);\ntransformMap.addDateTimeTransformEntry(\"u_start date\", \"first day\", true, \"yyyy-MM-dd HH:mm:ss\");\nvar transformMapId = transformMap.create();",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "targetColumn",
                                "type": "String",
                                "description": "<span class=\"ph\">Target column from target table to transform\n                  to.</span>"
                            },
                            {
                                "name": "coalesce",
                                "type": "Boolean",
                                "description": "<div class=\"p\">Optional. Flag that indicates whether to insert the\n                  record into the target table<ul class=\"ul\" id=\"GImpSetTMp-addGDTTrnsEntry_S_S_B_S__d85100e753\">\n                    <li class=\"li\">true: If true and target table contains a record with the same value in this\n                      field, the record is updated, that is, not inserted.</li>\n\n                    <li class=\"li\">false: Default. Record is inserted into the target table.</li>\n\n                  </ul>\n</div>"
                            },
                            {
                                "name": "sourceColumn",
                                "type": "String",
                                "description": "<span class=\"ph\">Source column from Import Set table to\n                  transform from.</span>"
                            },
                            {
                                "name": "dateTimeFormat",
                                "type": "String",
                                "description": "Optional. GlideDateTime format of the transform, for example, yyyy-MM-dd\n                HH:mm:ss. If empty, the default value is the system date time format."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GImpSetTMp-addTransformEntry_S_S_B",
                        "short_description": "Adds a string transform entry to a transform map.",
                        "description": "",
                        "name": "addTransformEntry(String sourceColumn, String targetColumn, Boolean coalesce)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var transformMap = new sn_impex.GlideImportSetTransformMap(\"temp user map name\", importSetTableName, targetTableName); \ntransformMap.addTransformEntry(\"first_name\", \"first_name\", true);\ntransformMap.addTransformEntry(\"last_name\", \"last_name\", false);\ntransformMap.addTransformEntry(\"age\", \"age\", false); \nvar transformMapId = transformMap.create();\n",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "targetColumn",
                                "type": "String",
                                "description": "<span class=\"ph\">Source column from Import Set table to\n                  transform from.</span>"
                            },
                            {
                                "name": "coalesce",
                                "type": "String",
                                "description": "<span class=\"ph\">Target column from target table to transform\n                  to.</span>"
                            },
                            {
                                "name": "sourceColumn",
                                "type": "Boolean",
                                "description": "<div class=\"p\">Optional. Flag that indicates whether to insert the\n                  record into the target table<ul class=\"ul\" id=\"GImpSetTMp-addTransformEntry_S_S_B__d85100e753\">\n                    <li class=\"li\">true: If true and target table contains a record with the same value in this\n                      field, the record is updated, that is, not inserted.</li>\n\n                    <li class=\"li\">false: Default. Record is inserted into the target table.</li>\n\n                  </ul>\n</div>"
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "GImpSetTMp-create",
                        "short_description": "Creates a new transform map.",
                        "description": "<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> To create a transform map you must have defined at least one transform entry using\n          either <span class=\"keyword apiname\">addDateTimeTransformEntry()</span>  or\n            <span class=\"keyword apiname\">addTransformEntry()</span>.</div></p>",
                        "name": "create()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var transformMap = new sn_impex.GlideImportSetTransformMap(\"temp user map name\", importSetTableName, targetTableName);\ntransformMap.addTransformEntry(\"u_first_name\", \"first_name\");\nvar transformMapId = transformMap.create();\n",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The sys_id of the created transform map."
                        },
                        "extras": []
                    }
                ]
            }
        ]
    },
    {
        "identifier": "sn_interaction-namespace",
        "namespace": "sn_interaction",
        "classes": [
            {
                "description": "<div class=\"note note\"><span class=\"notetitle\">Note:</span> This method has been deprecated.</div><br/><br/>This class requires the Interaction Logging, Routing, and Queueing plugin\n      (com.glide.interaction).<br/><br/>To use this class in a scoped API, use the <span class=\"keyword parmname\">sn_interaction</span> namespace\n      identifier.",
                "short_description": "Use the <span class=\"keyword apiname\">Interaction</span> API to define the behavior for interaction\n    records.",
                "identifier": "InteractionScopedAPI",
                "name": "Interaction",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "InteractionScoped-accept",
                        "short_description": "Accept a new interaction.",
                        "description": "<p>Accepting a transfer only works for pending transfers. Find any pending transfers in the\n        Interaction Agent Transfer [interaction_agent_transfer] table.</p>",
                        "name": "accept()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var now_GR = new GlideRecord('interaction');\nnow_GR.get('b2c0a3af202a1300964f959e0488de75');\nvar interaction = sn_interaction.Interaction.getInteraction(GR).accept();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "Returns true if the transfer is accepted."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "interaction-create_Object",
                        "short_description": "Create an interaction.",
                        "description": "",
                        "name": "create(Object options)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var interactionObj = sn_interaction.Interaction.create({\n\tchannel: '28a59893873103002ae97e2526cb0b5d',\n\tchannel_metadata:{},\n\topened_for: '46d44a23a9fe19810012d100cca80666',\n\tqueue: 'f3a50867b30303002186a72256a8dcb7'\n});",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "options",
                                "type": "Object",
                                "description": "Field values for an interaction record. The channel field with the channel\n                sys_id and channel metadata are required. <p class=\"p\">If a queue is not included in the\n                  parameter, the system returns <samp class=\"ph codeph\">Interaction b2c0a3af202a1300964f959e0488de75\n                    has no queue specified... running queue matching rules.</samp></p>"
                            }
                        ],
                        "return": {
                            "type": "Object",
                            "description": "Interaction"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "InteractionScoped-getInteraction_GlideRecord",
                        "short_description": "Get an interaction record.",
                        "description": "",
                        "name": "getInteraction(GlideRecord interaction)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var now_GR = new GlideRecord('interaction');\nnow_GR.get('608a21bd096a9300964ffbd57ba7dd8d');\nvar interaction = sn_interaction.Interaction.getInteraction(now_GR);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "interaction",
                                "type": "GlideRecord",
                                "description": "Interaction record from the interaction table [interaction] that is retrieved\n                from the system."
                            }
                        ],
                        "return": {
                            "type": "Object",
                            "description": "Interaction"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "InteractionScoped-transferToAgent-String",
                        "short_description": "Transfer an interaction record to an agent using the sys_id for the agent.",
                        "description": "<p>When an interaction is transferred from one agent to another, the interaction needs to be\n        accepted or rejected using GlideRecord APIs. Use the GlideRecord API to change the state of\n        the interaction and update. For more information, see the GlideRecord - update method.</p><p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This method has been deprecated.</div></p>",
                        "name": "transferToAgent(String sysID)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var now_GR = new GlideRecord('interaction');\nnow_GR.get('24b927ef202a1300964f959e0488de2d');\nvar interaction = sn_interaction.Interaction.getInteraction(GR);\ninteraction.transferToAgent('6816f79cc0a8016401c5a33be04be441');",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "SysID",
                                "type": "String",
                                "description": "The sys_id of the user you want to transfer an interaction record to."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "InteractionScoped-transferToQueue_String",
                        "short_description": "Transfer an interaction record to an interaction queue.",
                        "description": "<p>Transferring an interaction from one queue to another closes the original interaction and\n        creates an interaction in the new queue.</p><p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This method has been deprecated.</div></p>",
                        "name": "transferToQueue(String sysID)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var now_GR = new GlideRecord('interaction');\nnow_GR.get('24b927ef202a1300964f959e0488de2d');\nvar interaction = sn_interaction.Interaction.getInteraction(GR);\ninteraction.transferToQueue('86fee1933b101300088d832b44efc474');",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "SysID",
                                "type": "String",
                                "description": "The sys_id of the interaction queue you want to transfer the interaction record\n                to."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "<div class=\"note note\"><span class=\"notetitle\">Note:</span> This API has been deprecated, use the Queue and Agent APIs instead.</div><br/><br/>This class requires the Interaction Logging, Routing, and Queueing plugin\n      (com.glide.interaction).<br/><br/>To use this class in a scoped API, use the <span class=\"keyword parmname\">sn_interaction</span> namespace\n      identifier.",
                "short_description": "Use the <span class=\"keyword apiname\">InteractionQueue</span> API to configure the behavior for\n    interaction queues and connectors.",
                "identifier": "InteractionQueueScopedAPI",
                "name": "InteractionQueue",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "ScopedInteractionQueue-acceptNext",
                        "short_description": "Assign the next interaction in a queue to the current user.",
                        "description": "",
                        "name": "acceptNext()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var queueGR = new GlideRecord('interaction_queue');\nqueueGR.get('86fee1933b101300088d832b44efc474');\nvar queue = sn_interaction.InteractionQueue.getQueue(queueGR).acceptNext();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Object",
                            "description": "Interaction"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "InteractionQueueScoped-get_GlideRecord",
                        "short_description": "Get an existing interaction queue by sys_id.",
                        "description": "",
                        "name": "get(GlideRecord sysID)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var queueGR = new GlideRecord(\"interaction_queue\");\nqueueGR.get('86fee1933b101300088d832b44efc474');\nvar queue = sn_interaction.InteractionQueue.getQueue(queueGR);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "queue",
                                "type": "GlideRecord",
                                "description": "Queue from the interaction_queue table."
                            }
                        ],
                        "return": {
                            "type": "Object",
                            "description": "Interaction Queue"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "InteractionQueueScoped-getAvailableAgents",
                        "short_description": "Returns a list of agents who are online and assigned to a particular queue.",
                        "description": "<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This API has been deprecated, use the Agent API instead.</div></p>",
                        "name": "getAvailableAgents()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var queueGR = new GlideRecord('interaction_queue');\nqueueGR.get('86fee1933b101300088d832b44efc474');\nvar queue = sn_interaction.InteractionQueue.getQueue(queueGR);\nqueue.getAvailableAgents();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Array",
                            "description": "List of available agents by sys_id."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "InteractionQueueScoped-isAgentFor_GlideRecord",
                        "short_description": "Check if a user is an agent for a queue.",
                        "description": "",
                        "name": "isAgentFor(GlideRecord sysID)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "queue",
                                "type": "GlideRecord",
                                "description": "Sys ID for a queue in the interaction_queue table."
                            }
                        ],
                        "return": {
                            "type": "Boolean",
                            "description": "Returns either true or false"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "InteractionQueueScoped-isInSchedule",
                        "short_description": "Find out whether the queue is in schedule.",
                        "description": "",
                        "name": "isInSchedule()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var queueRecord = new GlideRecord('interaction_queue');\nqueueRecord.get('f3a50867b30303002186a72256a8dcb7');\nvar queueInSchedule = sn_interaction.InteractionQueue.getQueue(queueRecord);\nqueueInSchedule.isInSchedule();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "object",
                            "description": "InteractionQueue"
                        },
                        "extras": []
                    }
                ]
            }
        ]
    },
    {
        "identifier": "sn_nlp_sentiment-namespace",
        "namespace": "sn_nlp_sentiment",
        "classes": [
            {
                "description": "The <span class=\"keyword apiname\">Sentiment Analysis</span> API should be used in a script that is treated as\n      an admin-executing script. For example, we should use the <span class=\"keyword apiname\">Sentiment\n        Analysis</span> API in Script Action or Scheduled Job.<br/><br/>To use this class in a scoped application, use the <span class=\"keyword parmname\">sn_nlp_sentiment</span>\n      namespace identifier. The Sentiment Analysis plugin ( com.snc.sentiment_analysis) must be\n      enabled to access the <span class=\"keyword apiname\">SentimentAnalyser</span> API.",
                "short_description": "The\n    <span class=\"keyword apiname\">SentimentAnalyser</span> API performs sentiment analysis on a\n    string value.",
                "identifier": "SentimentAnalyserScoped",
                "name": "SentimentAnalyser",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "SA-SentimentAnalyser",
                        "short_description": "Creates an instance of the SentimentAnalyser class with the default connector\n    configuration that is used for sentiment analysis.",
                        "description": "",
                        "name": "SentimentAnalyser()",
                        "type": "Constructor",
                        "examples": [
                            {
                                "script": "var sa = new sn_nlp_sentiment.SentimentAnalyser();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SA-SentimentAnalyser_G",
                        "short_description": "Creates an instance of the SentimentAnalyser class with the specified connector\n    configuration that is used for sentiment analysis.",
                        "description": "",
                        "name": "SentimentAnalyser(GlideRecord configGR)",
                        "type": "Constructor",
                        "examples": [
                            {
                                "script": "var sa = new sn_nlp_sentiment.SentimentAnalyser(configGR);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "configGR",
                                "type": "GlideRecord",
                                "description": "GlideRecord object of a connector configuration"
                            }
                        ],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SA-analyze_S",
                        "short_description": "Performs sentiment analysis on the specified text.",
                        "description": "",
                        "name": "analyze(String inputText)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "\n        var sa = new sn_nlp_sentiment.SentimentAnalyser();\n        var result = sa.analyze (\"Example string\");",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "inputText",
                                "type": "String",
                                "description": "Text on which sentiment analysis should be performed."
                            }
                        ],
                        "return": {
                            "type": "JSON object",
                            "description": "Result of the sentiment analysis specifying the status, score, normalised\n                score, sys_id of the relevant connector configuration, and error message."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SA-analyzeMultiple_A",
                        "short_description": "Performs sentiment analysis on an array of strings.",
                        "description": "",
                        "name": "analyzeMultiple(Array inputTextArray)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "\n        var sa = new sn_nlp_sentiment.SentimentAnalyser();\n        var result = sa.analyzeMultiple ([\"Example string1\",\"Example string2\"]);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "inputTextArray",
                                "type": "Array",
                                "description": "Array of text (string) on which sentiment analysis should be performed."
                            }
                        ],
                        "return": {
                            "type": "JSON Array",
                            "description": "An array that gives the result of the sentiment analysis performed on multiple\n                texts specifying the status, score, normalized score, sys_id of the relevant\n                connector configuration, and error message."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SA-analyzeMultipleWithLanguage_A_S",
                        "short_description": "Performs sentiment analysis on an array of strings in the specified\n    language.",
                        "description": "",
                        "name": "analyzeMultipleWithLanguage(Array inputTextArray, String language)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "\n        var sa = new sn_nlp_sentiment.SentimentAnalyser();\n        var result = sa.analyzeMultipleWithLanguage ([\"Example string1\",\"Example string2\"], \"en\");",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "inputTextArray",
                                "type": "Array",
                                "description": "Array of text (string) on which sentiment analysis should be performed."
                            },
                            {
                                "name": "language",
                                "type": "String",
                                "description": "Language for the input text. This can very for different sentiment\n                services."
                            }
                        ],
                        "return": {
                            "type": "JSON Array",
                            "description": "An array with the result of the sentiment analysis performed on multiple texts\n                of the mentioned language, specifying the status, score, normalized score, sys_id of\n                the relevant connector configuration, and error message."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SA-analyzeWithLanguag_S_S",
                        "short_description": "Performs sentiment analysis on a specified text and language.",
                        "description": "",
                        "name": "analyzeWithLanguage(String inputText, String language)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "\n        var sa = new sn_nlp_sentiment.SentimentAnalyser();\n        var result = sa.analyze (\"Example string\", \"en\");",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "inputText",
                                "type": "String",
                                "description": "Text on which sentiment analysis should be performed."
                            },
                            {
                                "name": "language",
                                "type": "String",
                                "description": "Language for the input text. This can very for different sentiment\n                services."
                            }
                        ],
                        "return": {
                            "type": "JSON object",
                            "description": "Result of the sentiment analysis specifying the status, score, normalized\n                score, sys_id of the relevant connector configuration, and error message."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SA-getConnectorByName_S",
                        "short_description": "Returns the GlideRecord of the specified connector configuration.",
                        "description": "",
                        "name": "getConnectorByName(String connectorName)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "\n      var sa = new sn_nlp_sentiment.SentimentAnalyser();\n      var connector = sa.getConnectorByName(\"xxx\");",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "connectorName",
                                "type": "String",
                                "description": "Name of the connector configuration."
                            }
                        ],
                        "return": {
                            "type": "GlideRecord object",
                            "description": "GlideRecord of the specified connector configuration."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SA-getDefaultConnector",
                        "short_description": "Returns the GlideRecord of the default connector configuration.",
                        "description": "",
                        "name": "getDefaultConnector()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "\n        var sa = new sn_nlp_sentiment.SentimentAnalyser();\n        var defaultConnector = sa.getDefaultConnector();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "GlideRecord object",
                            "description": "GlideRecord of the default connector configuration."
                        },
                        "extras": []
                    }
                ]
            }
        ]
    },
    {
        "identifier": "sn_notification-namespace",
        "namespace": "sn_notification",
        "classes": [
            {
                "description": "This class requires the Messaging Notification plugin (com.glide.notification.messaging) and\n      an integration with a third-party messaging application such as Slack or Teams. Use these\n      methods in an action script in the Message Actions [messaging_observer_handler] table.<br/><br/>Use the <span class=\"keyword parmname\">sn_notification</span> namespace to access the\n        <span class=\"keyword apiname\">Messaging</span> API.",
                "short_description": "Perform actions in a third-party messaging application.",
                "identifier": "MessagingScopedAPI",
                "name": "Messaging",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "MessagingScoped-send_O_S_O_O",
                        "short_description": "Sends a custom message to a third-party application in response to a messaging event.\n    For example, you can send a custom welcome message to a Slack channel when the Now Actions\n    application installs.",
                        "description": "<p>Use this method in an action script in the Message Actions [messaging_observer_handler]\n        table.</p>",
                        "name": "send(GlideRecord messagingApplication, String recipient, GlideRecord messagingContent, GlideRecord target)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "//Send a message to a Teams user\nvar app = new GlideRecord('messaging_application');\napp.get('1f2d26527f4213007f005212bdfa9102');\n\nvar content = new GlideRecord('messaging_content');\ncontent.get('17f1f9617320130082999cfd7bf6a706');\n\nsn_notification.Messaging.send(app, '29:1ojsgDg1xuA_jZ70PDI2_6E7mn7P6Mc0wK7z0n2lblL-SaNXYVI1cR7i6qncllAGvdmhy2-kXh76IEVpUHXdz3w', content, null);\n\n//Send a message to a Slack user\nvar app = new GlideRecord('messaging_application');\napp.get('5d2e38c07f6113007f005212bdfa9160');\n\nvar content = new GlideRecord('messaging_content');\ncontent.get('69c48ba77310130082999cfd7bf6a7af');\n\nsn_notification.Messaging.send(app, 'U8P706QFQ', content, null);\n\n//Send a message to a Slack channel\nvar app = new GlideRecord('messaging_application');\napp.get('5d2e38c07f6113007f005212bdfa9160');\n\nvar content = new GlideRecord('messaging_content');\ncontent.get('69c48ba77310130082999cfd7bf6a7af');\n\nsn_notification.Messaging.send(app, 'CA6232N65', content, null);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "messagingApplication",
                                "type": "GlideRecord",
                                "description": "Third-party application to send a message to from the Messaging Entities\n                [messaging_application] table."
                            },
                            {
                                "name": "recipient",
                                "type": "String",
                                "description": "Recipient of the message. When the instance receives an inbound message, you\n                can send a response to a Slack channel, Team, or individual user ID found in the\n                inbound payload."
                            },
                            {
                                "name": "messagingContent",
                                "type": "GlideRecord",
                                "description": "Message content to send from the Messaging Contents [messaging_content] table."
                            },
                            {
                                "name": "target",
                                "type": "GlideRecord",
                                "description": "Record used to define dynamic field values in the message. Table must match the\n                  <span class=\"ph uicontrol\">Target table</span> field in the Messaging Contents record. If the\n                Messaging Contents record does not use a target table, set the value to null."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    }
                ]
            }
        ]
    },
    {
        "identifier": "sn_notify-namespace",
        "namespace": "sn_notify",
        "classes": [
            {
                "description": "Access the scoped <span class=\"keyword apiname\">Notify</span> class and its associated methods from the\n        <span class=\"keyword parmname\">sn_notify</span> namespace.",
                "short_description": "The <span class=\"keyword apiname\">NotifyScoped</span> API allows you to interact with Notify calls and\n    SMS messages using scripts.",
                "identifier": "notifyScopedAPI",
                "name": "Notify",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "NotifyScoped-call_S_S_GR_GR_S_S_GR",
                        "short_description": "Calls the specified E.164-compliant telephone number.",
                        "description": "",
                        "name": "call(String notifyPhoneNumber, String toPhoneNumber, GlideRecord conferenceCall, GlideRecord conferenceCallRecord, String userSysId, String groupSysId, GlideRecord sourceRecord)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var from = '+14048007337';\nvar to = '+31646810495';\n\n// set up call\nnew sn_notify.NotifyScoped().call(from, to);",
                                "description": "This example illustrates how to initiate a call to another phone number."
                            },
                            {
                                "script": "var notify = new sn_notify.NotifyScoped();\nvar from = '+14041234567';\nvar participants = ['+31612345678', '+31623456789', '+31687654321'];\n\n// set up a conference call\nvar conferenceCall = notify.conferenceCall();\n\n// set up the outbound calls for all conference call participants\nfor (var i in participants) {\n    var to = participants[i];\n    notify.call(from, to, conferenceCall);\n}\n\n",
                                "description": "This example illustrates how to initiate a call to a list of telephone numbers and\n        automatically join those numbers into a new conference call."
                            }
                        ],
                        "params": [
                            {
                                "name": "notifyPhoneNumber",
                                "type": "String",
                                "description": "Notify phone number from which to make the call. When you initiate a call, the\n                outgoing call workflow for the number group associated with this number runs. Ensure\n                this workflow includes a <span class=\"ph uicontrol\">join conference call</span> activity to\n                connect the user to the conference call."
                            },
                            {
                                "name": "toPhoneNumber",
                                "type": "String",
                                "description": "Phone number to call. Called numbers are added to the conference call."
                            },
                            {
                                "name": "conferenceCall",
                                "type": "GlideRecord",
                                "description": "Optional. If this parameter is passed in, the callers identified in the\n                  <span class=\"keyword parmname\">toPhoneNumber</span> parameter are automatically joined into the\n                conference call identified by this record. <p class=\"p\">GlideRecord for the Notify Call\n                  [notify_call] table which identifies the conference call record. This record is\n                  automatically added to the outgoing call workflow scratchpad as the\n                  workflow.scratchpad.conference_call variable.</p>"
                            },
                            {
                                "name": "userSysId",
                                "type": "String",
                                "description": "Optional. Unique identifier (sys_id) of the user associated with the\n                call."
                            },
                            {
                                "name": "groupSysId",
                                "type": "String",
                                "description": "Optional. Unique identifier (sys_id) of the group associated with the\n                call."
                            },
                            {
                                "name": "sourceRecord",
                                "type": "GlideRecord",
                                "description": "Optional. Source record that prompted this call."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "NotifyScoped-conferenceCall",
                        "short_description": "Creates a new conference call GlideRecord.",
                        "description": "",
                        "name": "conferenceCall(GlideRecord sourceRecord)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var notify = new sn_notify.NotifyScoped();\nvar from = '+14041234567';\nvar participants = ['+31612345678', '+31623456789', '+31687654321'];\n\n// set up a conference call\nvar conferenceCall = notify.conferenceCall();\n\n// set up the outbound calls for all conference call participants\nfor (var i in participants) {\n    var to = participants[i];\n    notify.call(from, to, conferenceCall);\n}",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "sourceRecord",
                                "type": "GlideRecord",
                                "description": "Optional. Record that initiated the request to create the conference call. Used\n                to populate the source and table fields on notify_conference_call record."
                            }
                        ],
                        "return": {
                            "type": "GlideRecord",
                            "description": "New Notify conference call [notify_conference_call] record."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "NotifyScoped-dequeueCall_GR",
                        "short_description": "Resumes a call after it was put in a queue (on hold).",
                        "description": "<p>Use this method to resume calls that were put in a queue with the\n          <span class=\"keyword apiname\">queueCall()</span> method.</p>",
                        "name": "dequeueCall(GlideRecord callRecord)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var notifyCallGr = new GlideRecord('notify_call');\nnotifyCallGr.get('active participant sys id');\n \nif (notifyCallGr.isValid) {\n    sn_notify.NotifyScoped.dequeueCall(notifyCallGr);\n}",
                                "description": "The following example shows how to reactivate a call that was put on hold."
                            }
                        ],
                        "params": [
                            {
                                "name": "callRecord",
                                "type": "GlideRecord",
                                "description": "GlideRecord object on the Notify Call [notify_call] table with the held call\n                you want to resume."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "NotifyScoped-forwardCall_GR_S_S",
                        "short_description": "Forwards the specified call to a different call recipient.",
                        "description": "",
                        "name": "forwardCall(GlideRecord call, String destination, String dtmf)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var callID = 'CA92374b5aa561dab476a7001db6026edc'; // Twilio Call ID\nvar phoneNumber = '+91406xxxxxxx';\nvar dtmfTones = null;\n \nvar notifyCallGr = new GlideRecord('notify_call');\nnotifyCallGr.get('active participant sys id');\n \nif (notifyCallGr.isValid) {\n    sn_notify.NotifyScoped.forwardCall(notifyCallGr(or) callID, phoneNumber, dtmfTones)\n}",
                                "description": "The following example shows how to forward a call to another phone number."
                            }
                        ],
                        "params": [
                            {
                                "name": "call",
                                "type": "GlideRecord or String",
                                "description": "Notify call record or the telephony provider call ID, of the call to be\n                forwarded."
                            },
                            {
                                "name": "destination",
                                "type": "GlideRecord or String",
                                "description": "Notify phone number record or an E.164-compliant phone number, of the caller to\n                which to forward the call."
                            },
                            {
                                "name": "dtmf",
                                "type": "String",
                                "description": "Dual Tone - Multi Frequency (DTMF) code to send upon call connection."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "NotifyScoped-getAvailableClients_S",
                        "short_description": "Returns a list of client sessions that are available to receive calls.",
                        "description": "",
                        "name": "getAvailableClients(String notifyNumber)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var clientSessionGr = sn_notify.NotifyScoped.getAvailableClients('+185xxxxxxxx'); \n// Here clientSessionGr is of type GlideRecord on 'notify_client_session' table.\n \nvar isLoggedInUserAvailable = false;\nwhile (clientSessionGr.next()) {\n  if (clientSessionGr.user == gs.getUserID())\n    isLoggedInUserAvailable = clientSessionGr.available;\n}\ngs.info('isLoggedInUserAvailable - ' + isLoggedInUserAvailable);",
                                "description": "The following example shows how to use the getAvailableClients() method to index into the\n        notify_client_session table and then iterate across all available Notify clients."
                            }
                        ],
                        "params": [
                            {
                                "name": "notifyNumber",
                                "type": "String",
                                "description": "Valid Notify phone number."
                            }
                        ],
                        "return": {
                            "type": "Array",
                            "description": "GlideRecord from the notify_client_session table for the specified phone\n                number. <p class=\"p\">Returns \"0\" if there are no available client sessions.</p>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "NotifyScoped-getPhoneNumbers",
                        "short_description": "Returns all phone numbers and short codes available to Notify.",
                        "description": "",
                        "name": "getPhoneNumbers()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "// instantiate notify\nvar notify = new sn_notify.NotifyScoped();\n\n// get all available phone numbers\nvar phoneNumbers = notify.getPhoneNumbers();\n\n// iterate over phone numbers\nfor (var i = 0; i &lt; phoneNumbers.size(); i++) {\n\n  var number = phoneNumbers.get(i);\n\n//perform any actions using each phone number\n\n}",
                                "description": "This example illustrates how to obtain the Notify phone numbers and then iterate over the\n        list."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "List",
                            "description": "List of NotifyPhoneNumber objects, each object representing one phone number\n                available to Notify."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "NotifyScoped-getShortCodes",
                        "short_description": "Returns all short codes available to Notify.",
                        "description": "",
                        "name": "getShortCodes()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "// instantiate notify\nvar notify = new sn_notify.NotifyScoped();\n\n// get all available shortcodes\nvar shortCodes = notify.getShortCodes();\n\n// iterate over phone numbers\nfor (var i = 0; i &lt; shortCodes.size(); i++) {\n\nvar shortCode = shortCodes.get(i);\n\ngs.log(shortCode.getNumber());\n\n//perform any actions using each shortcode\n}",
                                "description": "This example illustrates how to obtain the Notify short codes and then iterate over the\n        list."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "NotifyScoped-getTokens_GR",
                        "short_description": "Returns client tokens for any active telephony drivers for use in WebRTC or mobile\n    clients.",
                        "description": "<p>This method uses the currently logged-in user record as the client.</p>",
                        "name": "getTokens(GlideRecord, record)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "// get Notify client Tokens per active Notify driver for the currently logged in user\nvar json = new sn_notify.NotifyScoped().getTokens();\n \n// Parse the JSON that was return into a tokens object\nvar tokens = JSON.parse(json);\n\n// Log line\ngs.log('Notify client tokens for the currently logged in user');\n\n // iterate over the driver tokens\nfor (var driver in tokens) {\n \tgs.log(driver + ' Driver token: ' + tokens[driver]);\n}",
                                "description": "This example shows how to obtain the client tokens for the currently logged in user."
                            },
                            {
                                "script": "// instantiate Notify\nvar notify = new sn_notify.NotifyScoped.Notify();\n \n// get all Notify Groups\nvar notifyGroup = new GlideRecord(\"notify_group\");\nnotifyGroup.query();\n \n// iterate over all notify groups\nwhile (notifyGroup.next()) {\n  // generate Notify Client tokens per active Notify Driver for this group\n  var json = notify.getTokens(notifyGroup);\n  var tokens = JSON.parse(json);\n \n  for (var driver in tokens) {\n    gs.log(gs.getMessage(\"Notify Client token for {0} driver and Notify Group '{1}': {2}\", [driver, notifyGroup.getValue('name'), tokens[driver]]));\n  }\n}",
                                "description": "This example shows how to obtain the client tokens for every Notify group."
                            },
                            {
                                "script": "var notify = new sn_notify.NotifyScoped();\nvar now_GR = new GlideRecord('sys_user');\nif (now_GR.get(gs.getUserID())) {\n  gs.info(notify.getTokens(now_GR));\n}",
                                "description": "This example illustrates how to obtain the client tokens for the active telephony\n        drivers."
                            }
                        ],
                        "params": [
                            {
                                "name": "record",
                                "type": "GlideRecord",
                                "description": "GlideRecord to use to identify the Notify client, such as a group record or a\n                user record."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "Web RTC tokens for the supported drivers, as a JSON string with the following\n                format: {driverName1: âtoken1â, driverName2: âtoken2â}, such as\n                \"TwilioDirect\":\"eyJhxxxx.eyJleHAiOiIxxxx.7fejxxx_mbLxxx\""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "NotifyScoped-getTokenTTL_S",
                        "short_description": "Returns the maximum amount of time that a client session stays active for a specified\n    telephony driver before automatically timing out.",
                        "description": "",
                        "name": "getTokenTTL(String owner)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var owner = \"TwilioDirect\";  // Valid driver\nvar ttl = SNC.Notify.getTokenTTL(owner);\ngs.info(\"Token TTL for \" + owner + \" --&gt; \" + ttl);\n \nowner = \"Abcxyz\";  // Invalid driver\nttl = SNC.Notify.getTokenTTL(owner);\n// For an invalid driver, we throw NoSuchNotifyDriverException saying that Abcxyzdriver is not available\n// and return the default value of TTL\ngs.info(\"Token TTL for \" + owner + \" --&gt; \" + ttl); ",
                                "description": "The following example shows how to properly call this method and the associated response.\n        It also shows what is returned if an invalid driver is passed."
                            }
                        ],
                        "params": [
                            {
                                "name": "owner",
                                "type": "String",
                                "description": "Name of the telephony driver for which to retrieve the session length. <p class=\"p\">Valid\n                  values:</p>\n<ul class=\"ul\" id=\"NotifyScoped-getTokenTTL_S__ul_ql5_vgc_1gb\">\n                  <li class=\"li\">Twilio: for the old driver</li>\n\n                  <li class=\"li\">TwilioDirect: for the new driver</li>\n\n                </ul>"
                            }
                        ],
                        "return": {
                            "type": "Integer",
                            "description": "Maximum length of the session (in seconds). <p class=\"p\">Default: 1800\n                seconds</p>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "NotifyScoped-hasCapabilitiy_S_S",
                        "short_description": "Determines whether the specified phone number has the specified capability.",
                        "description": "<p>The telephony driver associated with the phone number contains a list of all of the\n        capabilities of the phone.</p><p><div class=\"note note\"><span class=\"notetitle\">Note:</span> In the base system, the Notify JS driver only has 'show_speakers' as a capability;\n          this can be modified.</div></p>",
                        "name": "hasCapability(String notifyPhoneNumber, String capability)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "// Each driver has a defined set of capabilities.\n\nvar capability = 'show_speakers';\ngs.info(sn_notify.NotifyScoped.hasCapability('+185xxxxxxxx', capability)); // true\n \ncapability = 'send_sms';\ngs.info(sn_notify.NotifyScoped.hasCapability('+185xxxxxxxx', capability)); // false",
                                "description": "This example shows how to check if a phone has a specific capability."
                            }
                        ],
                        "params": [
                            {
                                "name": "notifyPhoneNumber",
                                "type": "String",
                                "description": "Phone number for which to check for the specified capability."
                            },
                            {
                                "name": "capability",
                                "type": "String",
                                "description": "Capability to detect. The string text must be an exact match to what is in the\n                phone."
                            }
                        ],
                        "return": {
                            "type": "Boolean",
                            "description": "Flag that indicates whether the specified phone has the specified\n                  capability.<ul class=\"ul\" id=\"NotifyScoped-hasCapabilitiy_S_S__ul_ryg_y2g_yfb\">\n                  <li class=\"li\">true: phone has the capability</li>\n\n                  <li class=\"li\">false: phone does not have the capability</li>\n\n                </ul>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "NotifyScoped-kick_GR",
                        "short_description": "Removes the specified caller from the current Notify conference call.",
                        "description": "",
                        "name": "kick(GlideRecord participant)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var participant = new GlideRecord('notify_participant');\nparticipant.get('&lt;sys_id&gt;');\nif (participant.isValid()) {\n    new sn_notify.NotifyScoped().kick(participant);\n}",
                                "description": "This example shows how to remove a participant from a call."
                            }
                        ],
                        "params": [
                            {
                                "name": "participant",
                                "type": "GlideRecord",
                                "description": "GlideRecord object containing the Notify Participant [notify_participant]\n                record of the caller to remove from the conference call."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "NotifyScoped-modifyCall_GR_NA",
                        "short_description": "Performs one or more activities on an active Notify phone call.",
                        "description": "<p>Use this method to change the behavior of a call. For example, transferring a call, playing\n        audio, or forcing a hangup.<div class=\"note note\"><span class=\"notetitle\">Note:</span> The scoped implementation of this method only supports\n          custom Notify activities. Unlike the global implementation, it does not provide a\n          <span class=\"keyword apiname\">NotifyAction</span> API. For details on how to create a custom Notify\n          activity, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-servicenow-platform/page/administer/workflow-activities/concept/c_NotifyActivities.html\" target=\"_blank\">Notify workflow\n            activities</a>.</div></p>",
                        "name": "modifyCall(GlideRecord callRecord, NotifyAction notifyAction)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "callRecord",
                                "type": "GlideRecord",
                                "description": "Notify Call [notify_call] record of the call for which to apply the\n                actions."
                            },
                            {
                                "name": "notifyAction",
                                "type": "NotifyAction",
                                "description": "NotifyAction object describing one or more activities to perform on the\n                call."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "NotifyScoped-mute_GR",
                        "short_description": "Mutes the specified conference call participant.",
                        "description": "",
                        "name": "mute(GlideRecord participantRecord)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var notifyParticipantGr = new GlideRecord('notify_participant');\nnotifyParticipantGr.get('active participant sys id');\n \nif (notifyParticipantGrisValid) {\n    sn_notify.NotifyScoped.mute(notifyParticipantGr);\n}",
                                "description": "The following example shows how to mute a caller."
                            }
                        ],
                        "params": [
                            {
                                "name": "participantRecord",
                                "type": "GlideRecord",
                                "description": "GlideRecord from the notify_participant table for the participant to\n                mute."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "NotifyScoped-queueCall_GR",
                        "short_description": "Puts the specified call into a queue (on hold).",
                        "description": "<p>Resume a queued call using the <span class=\"keyword apiname\">dequeueCall()</span> method.</p>",
                        "name": "queueCall(GlideRecord callRecord)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var call = new GlideRecord('notify_call');\ncall.get('&lt;call record sys_id&gt;');\nif (call.isValid()) {\n    new sn_notify.NotifyScoped().queueCall(call);\n}",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "callRecord",
                                "type": "GlideRecord",
                                "description": "GlideRecord object of the Notify Call  record (notify_call table) to put on\n                hold."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "NotifyScoped-sendBulkSMS_NPN_S_S_GR",
                        "short_description": "Sends a specified SMS message to the specified list of Notify clients (phone\n    numbers).",
                        "description": "",
                        "name": "sendBulkSMS(NotifyPhoneNumber notifyPhoneNumber, String toPhoneNumbers, String messageBody, GlideRecord source)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var incidentGr = new GlideRecord('incident');\nincidentGr.get(active incident sys_id');\nif (incidentGr.isValid()) {\n    sn_notify.NotifyScoped.sendBulkSMS('+15413970605', ['+919885XXXXXX', '+919775XXXXXX'], 'Test automation message', incidentGr);\n}",
                                "description": "This example shows how to send an SMS message to multiple phone numbers (bulk SMS)."
                            }
                        ],
                        "params": [
                            {
                                "name": "notifyPhoneNumber",
                                "type": "NotifyPhoneNumber",
                                "description": "Phone number from which the SMS message is being sent."
                            },
                            {
                                "name": "toPhoneNumbers",
                                "type": "String",
                                "description": "Comma separated list phone numbers to which to send the SMS message.<p class=\"p\">Format:\n                  E.164-compliant</p>"
                            },
                            {
                                "name": "messageBody",
                                "type": "String",
                                "description": "SMS text to send."
                            },
                            {
                                "name": "source",
                                "type": "GlideRecord",
                                "description": "Source record that prompted this SMS message, such as an incident."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "Null"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "NotifyScoped-sendSMS_NPN_S_S_GR",
                        "short_description": "Sends an SMS text message to an E.164-compliant phone number.",
                        "description": "<p>This method creates a new record on the Notify Message [notify_message] table and\n        associates it with the source record.</p>",
                        "name": "sendSMS(NotifyPhoneNumber notifyPhoneNumber, String toPhoneNumber, String messageBody, GlideRecord source)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var incidentGr = new GlideRecord('incident');\nincidentGr.get(active incident sys_id');\nif (incidentnow_GR.isValid()) {\n    sn_notify.NotifyScoped.sendSMS('+15413970605', '+919885XXXXXX', 'Test automation message', incidentGr);\n}",
                                "description": "The following example shows how to send an SMS message."
                            }
                        ],
                        "params": [
                            {
                                "name": "notifyPhoneNumber",
                                "type": "NotifyPhoneNumber",
                                "description": "Notify phone number or short code to which to send this SMS message."
                            },
                            {
                                "name": "toPhoneNumber",
                                "type": "String",
                                "description": "E.164-compliant phone number to which to send the SMS message."
                            },
                            {
                                "name": "messageBody",
                                "type": "String",
                                "description": "SMS text message."
                            },
                            {
                                "name": "source",
                                "type": "GlideRecord",
                                "description": "Source record that prompted this SMS message, such as an incident."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "Unique message SID; stored in the Notify Message [notify_message] record as\n                message_id."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "NotifyScoped-unmute_GR",
                        "short_description": "Unmutes the specified conference call participant.",
                        "description": "",
                        "name": "unmute(GlideRecord participantRecord)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var notifyParticipantGr = new GlideRecord('notify_participant');\nnotifyParticipantGr.get('active participant sys id');\n \nif (notifyParticipantGrisValid) {\n    sn_notify.NotifyScoped.unmute(notifyParticipantGr);\n}",
                                "description": "This example shows how to unmute a specified call participant."
                            }
                        ],
                        "params": [
                            {
                                "name": "participantRecord",
                                "type": "GlideRecord",
                                "description": "GlideRecord from the notify_participant table for the participant to\n                unmute."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "Access the scoped <span class=\"keyword apiname\">NotifyPhoneNumber</span> API and its associated methods in the\n        <span class=\"keyword parmname\">sn_notify</span> namespace.",
                "short_description": "The <span class=\"keyword apiname\">NotifyPhoneNumber</span> API allows you to query information about a\n    Notify phone number.",
                "identifier": "NPNScopedAPI",
                "name": "NotifyPhoneNumber",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "NPNScoped-getDialCode",
                        "short_description": "Returns the international dialing code for a Notify phone number.",
                        "description": "",
                        "name": "getDialCode()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var numbers = sn_notify.NotifyScoped.getPhoneNumbers();\n \n// Here numbers is of type List\nif (numbers.size() &gt; 0) {\n   var number = numbers.get(0);\n \n   // Here number is of type NotifyPhoneNumber\n  gs.info(number.getDialCode());\n}",
                                "description": "This example shows how to obtain the dial code for a phone number."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "International phone code for a country."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "NPNScoped-getID",
                        "short_description": "Returns the ID of this phone number as defined by the telephony provider.",
                        "description": "",
                        "name": "getID()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var numbers = sn_notify.NotifyScoped.getPhoneNumbers();\n \n// Here numbers is of type List\nif (numbers.size() &gt; 0) {\n   var number = numbers.get(0);\n \n   // Here number is of type NotifyPhoneNumber\n  gs.info(number.getID());\n}",
                                "description": "This example shows how to obtain the unique identifier for a phone number."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "Identifier of the number within the telephony provider."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "NPNScoped-getNumber",
                        "short_description": "Returns the numerical phone number for the current Notify caller.",
                        "description": "",
                        "name": "getNumber()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var numbers = sn_notify.NotifyScoped.getPhoneNumbers();\n \n// Here numbers is of type List\nif (numbers.size() &gt; 0) {\n   var number = numbers.get(0);\n \n   // Here number is of type NotifyPhoneNumber\n  gs.info(number.getNumber());\n}",
                                "description": "This example shows how to obtain a Notify caller's phone number."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "E.164-compliant phone number."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "NPNScoped-getOwner",
                        "short_description": "Returns the telephony provider associated with this phone number.",
                        "description": "",
                        "name": "getOwner()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var numbers = sn_notify.NotifyScoped.getPhoneNumbers();\n \n// Here numbers is of type List\nif (numbers.size() &gt; 0) {\n   var number = numbers.get(0);\n \n   // Here number is of type NotifyPhoneNumber\n  gs.info(number.getOwner());\n}",
                                "description": "This example shows how to obtain the telephony provide that owns the specified phone\n        number."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "Telephony provider associated with the number: Twilio."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "NPNScoped-getTerritory",
                        "short_description": "Returns the country associated with the phone number.",
                        "description": "",
                        "name": "getTerritory()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var numbers = sn_notify.NotifyScoped.getPhoneNumbers();\n \n// Here numbers is of type List\nif (numbers.size() &gt; 0) {\n   var number = numbers.get(0);\n \n   // Here number is of type NotifyPhoneNumber\n  gs.info(number.getTerritory());\n}",
                                "description": "This example shows how to obtain the country of a Notify caller."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "Name of the country to which the phone number belongs."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "NPNScoped-supportsConferenceCall",
                        "short_description": "Determines if the Notify phone number supports conference calls.",
                        "description": "",
                        "name": "supportsConferenceCall()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var numbers = sn_notify.NotifyScoped.getPhoneNumbers();\n \n// Here numbers is of type List\nif (numbers.size() &gt; 0) {\n   var number = numbers.get(0);\n \n   // Here number is of type NotifyPhoneNumber\n  gs.info(number.supportsConferenceCall());\n}",
                                "description": "This example shows how to determine if a Notify caller supports conference calls."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "Value that indicates whether the Notify phone number supports conference\n                  calling.<ul class=\"ul\" id=\"NPNScoped-supportsConferenceCall__ul_xkc_qmv_bgb\">\n                  <li class=\"li\">true: phone number does support conference calling</li>\n\n                  <li class=\"li\">false: phone number does not support conference calling</li>\n\n                </ul>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "NPNScoped-supportsIncomingPhoneCall",
                        "short_description": "Determines if the Notify phone number supports receiving phone calls.",
                        "description": "",
                        "name": "supportsIncomingPhoneCall()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var numbers = sn_notify.NotifyScoped.getPhoneNumbers();\n \n// Here numbers is of type List\nif (numbers.size() &gt; 0) {\n   var number = numbers.get(0);\n \n   // Here number is of type NotifyPhoneNumber\n  gs.info(number.supportsIncomingPhoneCall());\n}",
                                "description": "This example shows how to determine if a Notify caller can receive incoming phone\n        calls."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "Value that indicates whether the Notify phone number supports incoming phone\n                  calls.<ul class=\"ul\" id=\"NPNScoped-supportsIncomingPhoneCall__ul_xkc_qmv_bgb\">\n                  <li class=\"li\">true: phone number does support incoming phone calls</li>\n\n                  <li class=\"li\">false: phone number does not support incoming phone calls</li>\n\n                </ul>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "NPNScoped-supportsIncomingSMS",
                        "short_description": "Determines if the Notify phone number supports receiving SMS messages.",
                        "description": "",
                        "name": "supportsIncomingSMS()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var numbers = sn_notify.NotifyScoped.getPhoneNumbers();\n \n// Here numbers is of type List\nif (numbers.size() &gt; 0) {\n   var number = numbers.get(0);\n \n   // Here number is of type NotifyPhoneNumber\n  gs.info(number.supportsIncomingSMS());\n}",
                                "description": "This example shows how to determine if a Notify caller can receive incoming SMS\n        messages."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "Value that indicates whether the Notify phone number supports incoming SMS\n                  messages.<ul class=\"ul\" id=\"NPNScoped-supportsIncomingSMS__ul_xkc_qmv_bgb\">\n                  <li class=\"li\">true: phone number does support incoming SMS messages</li>\n\n                  <li class=\"li\">false: phone number does not support incoming SMS messages</li>\n\n                </ul>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "NPNScoped-supportsOutgoingPhoneCall",
                        "short_description": "Determines if the Notify phone number supports initiating phone calls.",
                        "description": "",
                        "name": "supportsOutgoingPhoneCall()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var numbers = sn_notfy.Notify.getPhoneNumbers();\n \n// Here numbers is of type List\nif (numbers.size() &gt; 0) {\n   var number = numbers.get(0);\n \n   // Here number is of type NotifyPhoneNumber\n  gs.info(number.supportsOutgoingPhoneCall());\n}",
                                "description": "This example shows how to determine if a Notify caller can make outgoing phone calls."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "Value that indicates whether the Notify phone number supports initiating\n                outgoing phone calls.<ul class=\"ul\" id=\"NPNScoped-supportsOutgoingPhoneCall__ul_xkc_qmv_bgb\">\n                  <li class=\"li\">true: phone number does support initiating outgoing phone calls</li>\n\n                  <li class=\"li\">false: phone number does not support initiating outgoing phone calls</li>\n\n                </ul>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "NPNScoped-supportsOutgoingSMS",
                        "short_description": "Determines if the Notify phone number supports sending SMS messages.",
                        "description": "",
                        "name": "supportsOutgoingSMS()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var numbers = sn_notify.NotifyScoped.getPhoneNumbers();\n \n// Here numbers is of type List\nif (numbers.size() &gt; 0) {\n   var number = numbers.get(0);\n \n   // Here number is of type NotifyPhoneNumber\n  gs.info(number.supportsOutgoingSMS());\n}",
                                "description": "This example shows how to determine if a Notify caller can initiate outgoing SMS\n        messages."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "Value that indicates whether the Notify phone number supports sending SMS\n                  messages.<ul class=\"ul\" id=\"NPNScoped-supportsOutgoingSMS__ul_xkc_qmv_bgb\">\n                  <li class=\"li\">true: phone number does support sending SMS messages</li>\n\n                  <li class=\"li\">false: phone number does not support sending SMS messages</li>\n\n                </ul>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "NPNScoped-supportsRecording",
                        "short_description": "Determines if the Notify phone number supports recording phone calls.",
                        "description": "",
                        "name": "supportsRecording()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var numbers = sn_notify.Notify.getPhoneNumbers();\n \n// Here numbers is of type List\nif (numbers.size() &gt; 0) {\n   var number = numbers.get(0);\n \n   // Here number is of type NotifyPhoneNumber\n  gs.info(number.supportsRecording());\n}",
                                "description": "This example shows how to determine if a Notify caller can record calls."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "Value that indicates whether the Notify phone number supports recording phone\n                  calls.<ul class=\"ul\" id=\"NPNScoped-supportsRecording__ul_xkc_qmv_bgb\">\n                  <li class=\"li\">true: phone number does support recording phone calls</li>\n\n                  <li class=\"li\">false: phone number does not support recording phone calls</li>\n\n                </ul>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "NPNScoped-supportsWebRTC",
                        "short_description": "Determines if the Notify phone number supports calls to a browser, such as in a WebRTC\n    implementation.",
                        "description": "",
                        "name": "supportsWebRTC()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var numbers = sn_notify.Notify.getPhoneNumbers();\n \n// Here numbers is of type List\nif (numbers.size() &gt; 0) {\n   var number = numbers.get(0);\n \n   // Here number is of type NotifyPhoneNumber\n  gs.info(number.supportsWebRTC());\n}",
                                "description": "This example shows how to determine if a Notify caller can initiate/accept\n        browser-to-browser calls."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "Value that indicates whether the Notify phone number supports\n                browser-to-browser (WebRTC) calls.<ul class=\"ul\" id=\"NPNScoped-supportsWebRTC__ul_xkc_qmv_bgb\">\n                  <li class=\"li\">true: phone number does support browser-to-browser (WebRTC) calls</li>\n\n                  <li class=\"li\">false: phone number does not support browser-to-browser (WebRTC) calls</li>\n\n                </ul>"
                        },
                        "extras": []
                    }
                ]
            }
        ]
    },
    {
        "identifier": "sn_sc-namespace",
        "namespace": "sn_sc",
        "classes": [
            {
                "description": "To use this class in a scoped application, use the <span class=\"keyword parmname\">sn_sc</span> namespace\n      identifier. The Service Catalog Scoped API plugin (ID: com.glideapp.servicecatalog.scoped.api)\n      that is enabled by default is required to access the <span class=\"keyword apiname\">CartJS</span> API.",
                "short_description": "<span class=\"keyword apiname\">CartJS</span> API enables you to access the shopping cart for a user.",
                "identifier": "c_CartJSScoped",
                "name": "CartJS",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "r_CJSS-CartJS_S",
                        "short_description": "Creates an instance of the CartJS class with the name of a defined cart for the user\n    who is currently logged in.",
                        "description": "",
                        "name": "CartJS(String cartName)",
                        "type": "Constructor",
                        "examples": [
                            {
                                "script": "var cart = new sn_sc.CartJS(cart1);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "cartName",
                                "type": "String",
                                "description": "Optional. Name of a defined cart for the user who is currently logged\n                in."
                            }
                        ],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_CJSS-addToCart_O",
                        "short_description": "Adds the request for a catalog item to the current cart.",
                        "description": "",
                        "name": "addToCart(Map request)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "\nvar cart = new sn_sc.CartJS();\nvar item =\n{\n'sysparm_id': '0d08837237153000158bbfc8bcbe5d02',\n'sysparm_quantity': '1',\n'variables':{\n'carrier': 'at_and_t_mobility',\n'data_plan': '500MB',\n'duration': 'eighteen_months',\n'color': 'slate',\n'storage': 'sixtyfour' \n}};\nvar cartDetails = cart.addToCart(item);\ngs.info(cartDetails);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "request",
                                "type": "Map",
                                "description": "A JSON object that contains the details of the catalog item to be added to the\n                  cart.<p class=\"p\">The structure of the request object\n                  is:</p>\n<pre class=\"pre codeblock\">{\n'sysparm_id': item_id,\n'sysparm_quantity': item_quantity,\n'variables':{\n'var_name': 'var_value',\n...\n}\n}</pre>\n<ul class=\"ul\" id=\"r_CJSS-addToCart_O__ul_tdn_1ly_5z\">\n                  <li class=\"li\">item_id: sys_id of the item to be added to the cart</li>\n\n                  <li class=\"li\">item_quantity: Number of items to be added. Default value is 1.</li>\n\n                  <li class=\"li\">var_name: Name of the question.</li>\n\n                  <li class=\"li\">var_value: Value of the answer (Not the display value).</li>\n\n                </ul>"
                            }
                        ],
                        "return": {
                            "type": "JSON",
                            "description": "Structure of the current\n                cart.<pre class=\"pre codeblock\">{\n'subtotal': value,\n'items':[\n{\nitemName:'',\nquantity:'', \nprice:'', \nrecurring_price:''\n} ...]\n}</pre>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "CJSS-canViewRF",
                        "short_description": "Specifies if the current user has the required role to edit the <span class=\"ph uicontrol\">Request\n      for</span> field.",
                        "description": "",
                        "name": "canViewRF()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var cart=new sn_sc.CartJS();\nconsole.log(cart.canViewRF());",
                                "description": "This example checks if the user has the role needed to edit the requested for field."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "Flag that indicates whether the user has the required role to edit the\n                requested for field.<p class=\"p\">Valid values:</p>\n<ul class=\"ul\" id=\"CJSS-canViewRF__ul_uzz_1hw_shb\">\n                  <li class=\"li\">true: user has the required role</li>\n\n                  <li class=\"li\">false: user does not have the required role</li>\n\n                </ul>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_CJSS-checkoutCart",
                        "short_description": "Performs the cart checkout. If the two-step checkout is enabled, returns the order\n    summary. If the two-step checkout is disabled, the cart is submitted and details of the\n    generated request are returned.",
                        "description": "",
                        "name": "checkoutCart()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var cart = new sn_sc.CartJS();\nvar checkoutInfo = cart.checkoutCart();\ngs.info(checkoutInfo);\n",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "JSON",
                            "description": "If the two-step checkout is enabled, the summary of the items in the cart is\n                  returned.<pre class=\"pre codeblock\">{ \"subtotal_price\":\"\",\n  \"subtotal_recurring_frequency\":\"\",\n  \"delivery_address\":\"\",\n  \"special_instructions\":\"\",\n  \"total_title\":\"\",\n  \"requested_for_user\":\"System Administrator\",\n  \"requested_for\":\"6816f79cc0a8016401c5a33be04be441\",\n  âdailyâ: [\"frequency_subtotal\":\"\", \"items\":[{}, {}, ...], â¦],\n  âmonthlyâ:[\"frequency_subtotal\":\"\", \"items\":[{}, {}, ...], â¦],\n  âannuallyâ:[\"frequency_subtotal\":\"\", \"items\":[{}, {}, ...], â¦],\n  \"none\":[\"frequency_subtotal\":\"\", \"items\":[{}, {}, ...], â¦],\n}</pre>\n<div class=\"p\">If\n                  the two-step checkout is\n                  disabled:<pre class=\"pre codeblock\">{\n  'request_id' : \"sys_id of the generated request\",\n  \"request_number\" : \"Number of the generated request\"\n}</pre>\n</div>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_CJSS-empty",
                        "short_description": "Deletes the current cart.",
                        "description": "",
                        "name": "empty()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var cart = new sn_sc.CartJS();\n      cart.empty();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "CJSS-getCartDetails",
                        "short_description": "Returns the cart details.",
                        "description": "",
                        "name": "getCartDetails()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var cart=new sn_sc.CartJS();\n\tconsole.log (cart.getCartDetails());",
                                "description": ":"
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Object",
                            "description": "Object pointing to the current cart details."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_CJSS-getCartID",
                        "short_description": "Returns the cart id of the current cart.",
                        "description": "",
                        "name": "getCartID()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "\n      var cart = new sn_sc.CartJS();\n      cart.getCartID(); \n      gs.info(cartId);\n",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "sys_id for the current cart."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_CJSS-getCartItems",
                        "short_description": "Returns the GlideRecord for the cart item (sc_cart_item) in the current\n    cart.",
                        "description": "",
                        "name": "getCartItems()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "\n      var cart = new sn_sc.CartJS();\n      cart.getCartItems(); \n      gs.info(CartItems)\n",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "GlideRecord",
                            "description": "GlideRecord pointing to cart items in the current cart."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_CJSS-getDeliveryAddress",
                        "short_description": "Gets the delivery address for the current cart.",
                        "description": "",
                        "name": "getDeliveryAddress()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "\n      var cart = new sn_sc.CartJS();\n      cart.setDeliveryAddress(\"Brasilia, Brasil\");\n      cart.getDeliveryAddress(); \n      gs.info(DeliveryAddress);\n",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "Delivery address for the current cart."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_CJSS-getRequestedFor",
                        "short_description": "Gets the sys_id from the sys_user record of the user for whom the cart is\n    requested.",
                        "description": "",
                        "name": "getRequestedFor()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "\nvar cart = new sn_sc.CartJS();\ncart.setRequestedFor(\"039c516237b1300054b6a3549dbe5dfc\")\ncart.getRequestedFor(); \ngs.info(cartId);\n",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "sys_id from the sys_user record of the user for whom the cart is\n                requested."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_CJSS-getRequestedForDisplayName",
                        "short_description": "Gets the name from the user record of the user for whom the current cart is\n    requested.",
                        "description": "",
                        "name": "getRequestedForDisplayName()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "\n      var cart = new sn_sc.CartJS();\n      cart.getRequestedForDisplayName(); \n      gs.info(DisplayName);\n",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "Name from the user record of the user for whom the current cart is\n                requested."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_CJSS-getSpecialInstructions",
                        "short_description": "Gets the special instructions for the current cart.",
                        "description": "",
                        "name": "getSpecialInstructions()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "\n      var cart = new sn_sc.CartJS();\n      cart.setSpecialInstructions(\"Delivery before 8 AM.\");\n      cart.getSpecialInstructions(); \n      gs.info(SpecialInstructions);\n",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "Special instructions for the current cart."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_CJSS-orderNow_O",
                        "short_description": "Orders a single item. If two-step checkout is enabled, the method adds the specified\n    item to the cart and returns the sys_id of the cart. If two-step checkout is disabled, the\n    method completes the purchase of the specified item and returns the sys_id of the generated\n    request.",
                        "description": "",
                        "name": "orderNow(Map request)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "\nvar cart = new sn_sc.CartJS();\nvar request =\n{\n  'sysparm_id': '0d08837237153000158bbfc8bcbe5d02',\n  'sysparm_quantity': '1',\n  'variables':{\n    'carrier': 'at_and_t_mobility',\n    'data_plan': '500MB',\n    'duration': 'eighteen_months',\n    'color': 'slate',\n    'storage': 'sixtyfour'\n  }\n}\nvar cartDetails = cart.orderNow(request);\ngs.info(cartDetails);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "request",
                                "type": "Map",
                                "description": "JSON object that contains details of the catalog item to order."
                            },
                            {
                                "name": "request.delivery_address",
                                "type": "String",
                                "description": "Address to which to deliver the items.<p class=\"p\">Default: Address of user</p>"
                            },
                            {
                                "name": "request.sysparm_id",
                                "type": "String",
                                "description": "Required. The sys_id of the item to purchase."
                            },
                            {
                                "name": "request.special_instructions",
                                "type": "String",
                                "description": "Instructions to follow when processing the order."
                            },
                            {
                                "name": "request.sysparm_quantity",
                                "type": "String",
                                "description": "Quantity of the specified item to purchase.<p class=\"p\">Default: 1</p>"
                            },
                            {
                                "name": "request.sysparm_requested_for",
                                "type": "String",
                                "description": "The sys_id of the user for whom the item is requested.<p class=\"p\">Default: Session\n                  user</p>"
                            },
                            {
                                "name": "request.variables",
                                "type": "Array",
                                "description": "Questions and customer answers associated with the item."
                            },
                            {
                                "name": "request.variables.var_name",
                                "type": "String",
                                "description": "Name of the question."
                            },
                            {
                                "name": "request.variables.var_value",
                                "type": "String",
                                "description": "Customer's response to the associated question."
                            }
                        ],
                        "return": {
                            "type": "JSON key/value pairs",
                            "description": "Output if two-step checkout is\n                  enabled:<pre class=\"pre codeblock\">{\n  'cart_id' : '&lt;sys_id of the cart to which the items were added&gt;'\n}</pre>\n<p class=\"p\">Output\n                  if two-step checkout is\n                disabled:</p>\n<pre class=\"pre codeblock\">{\n  'request_id' : '&lt;sys_id of the generated request&gt;',\n  'request_number' : '&lt;Number of the generated request&gt;'\n}</pre>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_CJSS-setDeliveryAddress_S",
                        "short_description": "Sets the delivery address for the current cart.",
                        "description": "",
                        "name": "setDeliveryAddress(String address)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "\n      var cart = new sn_sc.CartJS();\n      cart.setDeliveryAddress(\"Brasilia, Brasil\"); \n      ",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "address",
                                "type": "String",
                                "description": "Delivery address for the current cart."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "CJSS-setRequestedFor_S",
                        "short_description": "Sets the sys_id in the sys_user record of the user for whom the cart is\n    requested.",
                        "description": "",
                        "name": "setRequestedFor(String user)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "\nvar cart = new sn_sc.CartJS();\ncart.setRequestedFor(\"039c516237b1300054b6a3549dbe5dfc\")\n",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "user",
                                "type": "String",
                                "description": "sys_id to be set in the sys_user record of the user for whom the cart is\n                requested."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_CJSS-setSpecialInstructions_S",
                        "short_description": "Sets the special instructions for the current cart.",
                        "description": "",
                        "name": "setSpecialInstructions(String specialInstructions)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "\n      var cart = new sn_sc.CartJS();\n      cart.setSpecialInstructions(\"Delivery before 8 AM.\"); \n   ",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "specialInstructions",
                                "type": "String",
                                "description": "Special instructions for the current cart."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_CJSS-submitOrder-O",
                        "short_description": "Updates special instructions, requested for, and delivery address from the\n      <span class=\"keyword parmname\">request</span> parameter and performs the cart checkout. Use this API to modify\n    the mentioned parameters of the cart and perform the cart checkout simultaneously. Missing\n    parameters in the <span class=\"keyword parmname\">request</span> object will have their default value.",
                        "description": "",
                        "name": "submitOrder(Map request)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var cart = new sn_sc.CartJS();\nvar request =\n{\n  'special_instructions' : 'Delivery only in working hours',\n  'requested_for' : '62826bf03710200044e0bfc8bcbe5df1',\n  'delivery_address' : \"Brasilia, Brasil\",\n};\nvar requestDetails = cart.submitOrder(request);\ngs.info(requestDetails);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "request",
                                "type": "Map",
                                "description": "A JSON object that contains details of the cart to be submitted.<p class=\"p\">The\n                  structure of the request object\n                  is:</p>\n<pre class=\"pre codeblock\">{\n  'special_instructions' : 'instructions',\n  'sysparm_requested_for' : requested_for,\n  'delivery_address' : 'address'\n}</pre>\n<ul class=\"ul\" id=\"r_CJSS-submitOrder-O__ul_iky_vrd_zz\">\n                  <li class=\"li\">instructions: Special instructions for the request.</li>\n\n                  <li class=\"li\">requested_for : sys_id of the requested_for user.</li>\n\n                  <li class=\"li\">address: Delivery address for the request.</li>\n\n                </ul>"
                            }
                        ],
                        "return": {
                            "type": "JSON",
                            "description": "Structure of the\n                cart.<pre class=\"pre codeblock\">{\n  'request_id' : 'sys_id of the generated Request',\n  'request_number' : 'Number of the generated Request'\n}</pre>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_CJSS-updateItem_M_S",
                        "short_description": "Updates an item in the cart.",
                        "description": "",
                        "name": "updateItem(Map request, String cart_item_id)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var cart = new sn_sc.CartJS();\nvar request =\n{\n  'sysparm_quantity': '1',\n  'variables':{\n    'carrier': 'at_and_t_mobility',\n    'data_plan': '500MB',\n    'duration': 'eighteen_months',\n    'color': 'slate',\n    'storage': 'sixtyfour'\n  }\n};\nvar cart_item_id = \"4d69b672c322320076173b0ac3d3ae79\";\nvar cartDetails = cart.updateItem(request, cart_item_id);\ngs.info(cartDetails);\n",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "request",
                                "type": "Map",
                                "description": "A JSON object that contains details of the catalog item to be updated.<p class=\"p\">The\n                  structure of the request object\n                  is:</p>\n<pre class=\"pre codeblock\">{\n    'sysparm_quantity' : item_quantity,\n  'sysparm_requested_for' : requested_for,\n  'variables' : {\n    'var_name' : 'var_value',\n    ...\n  }\n}</pre>\n<ul class=\"ul\" id=\"r_CJSS-updateItem_M_S__ul_agy_ypd_zz\">\n                  <li class=\"li\">item_quantity: Number of items to be added. Default value is 1.</li>\n\n                  <li class=\"li\">var_name: Name of the question.</li>\n\n                  <li class=\"li\">var_value: Value of the answer (Not the display value).</li>\n\n                </ul>"
                            },
                            {
                                "name": "cart_item_id",
                                "type": "String",
                                "description": "sys_id of the cart item to be modified."
                            }
                        ],
                        "return": {
                            "type": "JSON",
                            "description": "Details of the\n                cart.<pre class=\"pre codeblock\">{\n  'subtotal': value,\n  'items':[\n    {\n    itemName:'',\n    quantity:'',\n    price:'',\n    recurring_price:''\n    }\n    ...],\n  ...\n}</pre>"
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "To use this class in a scoped application, use the <span class=\"keyword parmname\">sn_sc</span> namespace\n   identifier. The Service Catalog Scoped API plugin (ID: com.glideapp.servicecatalog.scoped.api)\n   that is enabled by default is required to access the <span class=\"keyword apiname\">CatalogClientScript</span>\n   API.",
                "short_description": "<span class=\"keyword apiname\">CatalogClientScript</span> API enables you to create, modify, or delete\n  catalog client script records.",
                "identifier": "c_CatalogClientScriptScoped",
                "name": "CatalogClientScript",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "r_CCSS-CatalogClientScript",
                        "short_description": "Creates an instance of the CatalogClientScript class.",
                        "description": "",
                        "name": "CatalogClientScript()",
                        "type": "Constructor",
                        "examples": [
                            {
                                "script": "var catalogClientScript = new sn_sc.CatalogClientScript();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_CCSS-addScript_S",
                        "short_description": "Adds a script to the catalog client script.",
                        "description": "",
                        "name": "addScript(String script)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var catalogClientScript = new sn_sc.CatalogClientScript();\ncatalogClientScript.addScript(\"function onLoad(){Enter the script}\");",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "script",
                                "type": "String",
                                "description": "Script to be added to the catalog client script."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_CCSS-appliesToCatalogItem_B",
                        "short_description": "Specifies if the catalog client script runs on a catalog item.",
                        "description": "",
                        "name": "appliesToCatalogItem(Boolean flag)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var catalogClientScript = new sn_sc.CatalogClientScript();\ncatalogClientScript.appliesToCatalogItem(true);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "flag",
                                "type": "Boolean",
                                "description": "If true, the catalog client script runs on the catalog item. If false, the\n                catalog client script does not run on the catalog item."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_CCSS-appliesToCatalogTask_B",
                        "short_description": "Specifies if the catalog client script runs on a catalog task.",
                        "description": "",
                        "name": "appliesToCatalogTask(Boolean flag)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var catalogClientScript = new sn_sc.CatalogClientScript();\ncatalogClientScript.appliesToCatalogTask(true);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "flag",
                                "type": "Boolean",
                                "description": "If true, the catalog client script runs on the catalog task. If false, the\n                catalog client script does not run on the catalog task."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_CCSS-appliesToRequestedItem_B",
                        "short_description": "Specifies if the catalog client script runs on a requested item.",
                        "description": "",
                        "name": "appliesToRequestedItem(Boolean flag)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var catalogClientScript = new sn_sc.CatalogClientScript();\ncatalogClientScript.appliesToRequestedItem(true);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "flag",
                                "type": "Boolean",
                                "description": "If true, the catalog client script runs on the requested item. If false, the\n                catalog client script does not run on the requested item."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_CCSS-appliesToTargetRecord_B",
                        "short_description": "Specifies if the catalog client script runs on a requested item.",
                        "description": "",
                        "name": "appliesToTargetRecord(Boolean flag)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var catalogClientScript = new sn_sc.CatalogClientScript();\ncatalogClientScript.appliesToTargetRecord(true);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "flag",
                                "type": "Boolean",
                                "description": "If true, the catalog client script runs on the target record. If false, the\n                catalog client script does not run on the target record."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_CCSS-create_B",
                        "short_description": "Inserts the defined catalog client script in the catalog_script_client table.",
                        "description": "",
                        "name": "create(Boolean standardUpdate)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "\n        var catalogClientScript = new sn_sc.CatalogClientScript();\n        catalogClientScript.setAttributes({\"name\": \"My Catalog Item\", \"applies_to\": \"item\", \"ui_type\": \"desktop\", \"type\": \"onLoad\"});\n        catalogClientScript.appliesToCatalogItem(true);\n        catalogClientScript.appliesToRequestedItem(true);\n        catalogClientScript.appliesToCatalogTask(true);\n        catalogClientScript.appliesToTargetRecord(true);\n        var catalogClientScriptId = catalogClientScript.create();\n        gs.info(catalogClientScriptId);\n      \n      \n      \n      ",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "standardUpdate",
                                "type": "Boolean",
                                "description": "Set to true to enable the running of engines and workflow."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "sys_id of the catalog client script."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_CCSS-deleteRecord_S_B",
                        "short_description": "Deletes the defined catalog client script.",
                        "description": "",
                        "name": "deleteRecord(String sys_id, Boolean standardUpdate)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "\n        var sys_id = \"039c516237b1300054b6a3549dbe5dfc\"; \n        var catalogClientScript = new sn_sc.CatalogClientScript();\n        catalogClientScript.deleteRecord(\"039c516237b1300054b6a3549dbe5dfc\");",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "sys_id",
                                "type": "String",
                                "description": "sys_id of the catalog client script."
                            },
                            {
                                "name": "standardUpdate",
                                "type": "Boolean",
                                "description": "Set to true to enable the running of engines and workflow."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_CCSS-setAttributes_M",
                        "short_description": "Defines attribute values for the catalog client script.",
                        "description": "",
                        "name": "setAttributes(Map attributes)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var catalogClientScript = new sn_sc.CatalogClientScript();\ncatalogClientScript.setAttributes({\"name\": \"My Catalog Item\", \"applies_to\": \"catalog_item\", \"ui_type\": \"desktop\", \"type\": \"onLoad\"});",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "attributes",
                                "type": "Map",
                                "description": "A JSON object that has mapping for the field and value pairs."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_CCSS-setCatalogItem_S",
                        "short_description": "Associates a catalog item with the catalog client script.",
                        "description": "",
                        "name": "setCatalogItem(String sys_id)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var catalogClientScript = new sn_sc.CatalogClientScript();\ncatalogClientScript.setCatalogItem(\"039c516237b1300054b6a3549dbe5dfc\");",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "sys_id",
                                "type": "String",
                                "description": "sys_id of the catalog item."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_CCSS-setOnChangeVariable_S",
                        "short_description": "Runs the catalog client script when a variable value is updated.",
                        "description": "",
                        "name": "setOnChangeVariable(String sys_id)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var catalogClientScript = new sn_sc.CatalogClientScript();\ncatalogClientScript.setOnChangeVariable(\"039c516237b1300054b6a3549dbe5dfc\");",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "sys_id",
                                "type": "String",
                                "description": "sys_id of the variable."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_CCSS-setVariableSet_S",
                        "short_description": "Associates a variable set with the catalog client script.",
                        "description": "",
                        "name": "setVariableSet(String sys_id)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var catalogClientScript = new sn_sc.CatalogClientScript();\ncatalogClientScript.setVariableSet(\"039c516237b1300054b6a3549dbe5dfc\");",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "sys_id",
                                "type": "String",
                                "description": "sys_id of the variable set."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "",
                "short_description": "<span class=\"keyword apiname\">CatalogItemVariable</span> API enables you to create and modify service\n  catalog item variables using scripts.",
                "identifier": "c_CatalogItemVariable",
                "name": "CatalogItemVariable",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "r_CatalogItemVariable-create_Boolean",
                        "short_description": "Insert the defined catalog item variable.",
                        "description": "",
                        "name": "create(Boolean standardUpdate)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "standardUpdate",
                                "type": "Boolean",
                                "description": "Set to true to enable the running of engines and workflow."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "Return the sys_id of the inserted variable record."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_CatalogItemVariable-deleteRecord_Boolean",
                        "short_description": "Delete the defined catalog item variable.",
                        "description": "",
                        "name": "deleteRecord(Boolean standardUpdate)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "standardUpdate",
                                "type": "Boolean",
                                "description": "Set to true to enable the running of engines and workflow."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_CatalogItemVariable-read_Object_Boolean",
                        "short_description": "Get a mapping of catalog item variable attribute values.",
                        "description": "",
                        "name": "read(Object columns, Boolean standardUpdate)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "columns",
                                "type": "Object",
                                "description": "Specify the set of columns that you would like the values for."
                            },
                            {
                                "name": "standardUpdate",
                                "type": "Boolean",
                                "description": "Set to true to enable the running of engines and workflow."
                            }
                        ],
                        "return": {
                            "type": "Object",
                            "description": "An object mapping column names to values."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_CatalogItemVariable-setAttributes_Map",
                        "short_description": "Define attribute values for this catalog item variable.",
                        "description": "",
                        "name": "setAttributes(Object attributes)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "attributes",
                                "type": "Object",
                                "description": "An object mapping column names to values."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_CatalogItemVariable-update_Object_Boolean",
                        "short_description": "Use to update current catalog item variable with set values.",
                        "description": "",
                        "name": "update(Object columnValues, Boolean standardUpdate)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "columnValues",
                                "type": "Object",
                                "description": "An object mapping column names to values."
                            },
                            {
                                "name": "standardUpdate",
                                "type": "Boolean",
                                "description": "Set to true to enable the running of engines and workflow."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "",
                "short_description": "<span class=\"keyword apiname\">CatalogItemVariableSet</span> API enables you to create and modify service\n  catalog item variable sets using scripts.",
                "identifier": "c_CatalogItemVariableSet",
                "name": "CatalogItemVariableSet",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "r_CatalogItemVariableSet-create_Boolean",
                        "short_description": "Inserts the defined catalog item variable set.",
                        "description": "",
                        "name": "create(Boolean standardUpdate)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "// Given an existing catalog item\nvar catItemSysId = \"e0d08b13c3330100c8b837659bba8fb4\";\naddVariableSets(catItemSysId);\n\nfunction addVariableSets(catItemSysId) {\n  // List of all variable sets to attach\n  var myVarSets = [];\n\n  // Create variable set\n  var myVarSetAttrs = {\"name\": \"Requester details\", \"order\": \"100\"};\n  var myVarSet = new sn_sc.CatalogItemVariableSet();\n  myVarSet.setAttributes(myVarSetAttrs);\n  var myVarSetId = myVarSet.create(true);\n  myVarSets.push(myVarSetId);\n}",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "standardUpdate",
                                "type": "Boolean",
                                "description": "Flag indicating whether to enable the  running of engines and workflow.<div class=\"p\">Valid\n                    values:<ul class=\"ul\" id=\"r_CatalogItemVariableSet-create_Boolean__ul_ygw_ztp_lnb\">\n                    <li class=\"li\">true: Enable the  running of engines and workflow.</li>\n\n                    <li class=\"li\">false: Do not enable the  running of engines and workflow.</li>\n\n                  </ul>\n</div>"
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "Sys_id of the inserted variable record."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_CatalogItemVariableSet-deleteRecord_Boolean",
                        "short_description": "Delete the defined catalog item variable.",
                        "description": "",
                        "name": "deleteRecord(Boolean standardUpdate)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "standardUpdate",
                                "type": "Boolean",
                                "description": "Set to true to enable the running of engines and workflow."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_CatalogItemVariableSet-read_Object_Boolean",
                        "short_description": "Get a mapping of catalog item variable set attribute values.",
                        "description": "",
                        "name": "read(Object columns, Boolean standardUpdate)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "columns",
                                "type": "Object",
                                "description": "Specify the set of columns that you would like the values for."
                            },
                            {
                                "name": "standardUpdate",
                                "type": "Boolean",
                                "description": "Set to true to enable the running of engines and workflow."
                            }
                        ],
                        "return": {
                            "type": "Object",
                            "description": "An object mapping column names to values."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_CatalogItemVariableSet-setAttributes_Object",
                        "short_description": "Define attribute values for this catalog item variable set.",
                        "description": "",
                        "name": "setAttributes(Object attributes)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "attributes",
                                "type": "Object",
                                "description": "An object mapping column names to values."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_CatalogItemVariableSet-update_Object_Boolean",
                        "short_description": "Use to update current catalog item variable set with set values.",
                        "description": "",
                        "name": "update(Object columnValues, Boolean standardUpdate)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "columnValues",
                                "type": "Object",
                                "description": "An object mapping column names to values."
                            },
                            {
                                "name": "standardUpdate",
                                "type": "Boolean",
                                "description": "Set to true to enable the running of engines and workflow."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "",
                "short_description": "<span class=\"keyword apiname\">CatalogItemVariableSetM2M</span> API enables you to create and modify\n  service catalog item variable set many-to-many (M2Ms) using scripts.",
                "identifier": "c_CatalogItemVariableSetM2M",
                "name": "CatalogItemVariableSetM2M",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "r_CatalogItemVariableSetM2M-create_Boolean",
                        "short_description": "Insert the defined catalog item variable set M2M.",
                        "description": "",
                        "name": "create(Boolean standardUpdate)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "standardUpdate",
                                "type": "Boolean",
                                "description": "Set to true to enable the running of engines and workflow."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "Return the sys_id of the inserted variable record."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_CatalogItemVariableSetM2M-deleteRecord_Boolean",
                        "short_description": "Delete the defined catalog item variable set M2M.",
                        "description": "",
                        "name": "deleteRecord(Boolean standardUpdate)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "standardUpdate",
                                "type": "Boolean",
                                "description": "Set to true to enable the running of engines and workflow."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_CatalogItemVariableSetM2M-read_Object_Boolean",
                        "short_description": "Get a mapping of catalog item variable set M2M attribute values.",
                        "description": "",
                        "name": "read(Object columns, Boolean standardUpdate)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "columns",
                                "type": "Object",
                                "description": "Specify the set of columns that you would like the values for."
                            },
                            {
                                "name": "standardUpdate",
                                "type": "Boolean",
                                "description": "Set to true to enable the running of engines and workflow."
                            }
                        ],
                        "return": {
                            "type": "Object",
                            "description": "An object mapping column names to values."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_CatalogItemVariableSetM2M-setAttributes_Map",
                        "short_description": "Define attribute values for this catalog item variable set M2M.",
                        "description": "",
                        "name": "setAttributes(Object attributes)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "attributes",
                                "type": "Object",
                                "description": "An object mapping column names to values."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_CatalogItemVariableSetM2M-update_Object_Boolean",
                        "short_description": "Updates current catalog item variable set M2M with set values.",
                        "description": "<p>Consistency across all API ref topics is critical. Follow the template exactly or the\n        importer script will fail.</p>",
                        "name": "update(Object columnValues, Boolean standardUpdate)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "columnValues",
                                "type": "Object",
                                "description": "An object mapping column names to values."
                            },
                            {
                                "name": "standardUpdate",
                                "type": "Boolean",
                                "description": "Set to true to enable the running of engines and workflow."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "To use this class in a scoped application, use the <span class=\"keyword parmname\">sn_sc</span> namespace\n      identifier. The Service Catalog Scoped API plugin (com.glideapp.servicecatalog.scoped.api)\n      that is enabled by default is required to access the <span class=\"keyword apiname\">CatalogJS</span> API.",
                "short_description": "The <span class=\"keyword apiname\">CatalogJS</span> API enables you to use methods to check and retrieve\n    catalog-specific properties.",
                "identifier": "CatalogJSScopedAPI",
                "name": "CatalogJS",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "CJS-Catalog_G",
                        "short_description": "Creates an instance of the catalog class for the specified glide record\n    object.",
                        "description": "",
                        "name": "Catalog(GlideRecord gr)",
                        "type": "Constructor",
                        "examples": [
                            {
                                "script": "varÂ gr =Â newÂ GlideRecord('sc_catalog');\n now_GR.addQuery('sys_id','e0d08b13c3330100c8b837659bba8fb4');\nnow_GR.query();\nvar Catalog = new sn_sc.Catalog(now_GR);",
                                "description": ":"
                            }
                        ],
                        "params": [
                            {
                                "name": "gr",
                                "type": "Object",
                                "description": "Glide Record pointing to the sc_catalog table."
                            }
                        ],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "CJS-Catalog_S",
                        "short_description": "Creates an instance of the Catalog class with the specified sys_id.",
                        "description": "",
                        "name": "Catalog(String sys_id)",
                        "type": "Constructor",
                        "examples": [
                            {
                                "script": "new sn_sc.Catalog(catalog_sys_id);\nvar Catalog = new sn_sc.Catalog(\"31bea3d53790200044e0bfc8bcbe5dec\");\n\n",
                                "description": ":"
                            }
                        ],
                        "params": [
                            {
                                "name": "sys_id",
                                "type": "String",
                                "description": "sys_id of the Catalog."
                            }
                        ],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "CJS-canView_B",
                        "short_description": "Specifies if the catalog is viewable for the user.",
                        "description": "",
                        "name": "canView(boolean mobile)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var catalog=new sn_sc.Catalog(\"e0d08b13c3330100c8b837659bba8fb4\");;\t\n\t         console.log (catalog.canView(true));",
                                "description": ":"
                            }
                        ],
                        "params": [
                            {
                                "name": "mobile",
                                "type": "Boolean",
                                "description": "True if the view is mobile view. Else, false."
                            }
                        ],
                        "return": {
                            "type": "Boolean",
                            "description": "Returns true if the catalog is viewable for the user."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "CJS-getAvailableCatalog",
                        "short_description": "If only one active catalog exists, that catalog is returned. Else, the earliest catalog\n    created is returned, from the list of the catalogs that the user can view. If no catalog is\n    available, null is returned.",
                        "description": "",
                        "name": "getAvailableCatalog()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var catalog = sn_sc.Catalog. getAvailableCatalog()",
                                "description": ":"
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Object",
                            "description": "Object pointing to the earliest catalog that the user can view."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "CJS-getBackgroundColor",
                        "short_description": "Returns the catalog background color.",
                        "description": "",
                        "name": "getBackgroundColor()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var catalog=new sn_sc.Catalog(\"e0d08b13c3330100c8b837659bba8fb4\");\nconsole.log(catalog.getBackgroundColor());",
                                "description": ":"
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "Background color of the catalog."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "CJS-getCatalogCount",
                        "short_description": "Specifies the number of catalogs active in the catalog table.",
                        "description": "",
                        "name": "getCatalogCount()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "console.log (sn_sc.Catalog.getCatalogCount());",
                                "description": ":"
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Integer",
                            "description": "Number of catalogs available in the catalog table."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "CJS-getCategories",
                        "short_description": "Returns the categories for the specified catalog.",
                        "description": "",
                        "name": "getCategories()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var catalog=new sn_sc.Catalog(\"e0d08b13c3330100c8b837659bba8fb4\");\t\n\t         console.log(catalog.getCategories());",
                                "description": ":"
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "ArrayList",
                            "description": "Returns the categories for the specified catalog."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "CJS-getCategoryIds",
                        "short_description": "Specifies the sys_ids of the categories in the specified catalog.",
                        "description": "",
                        "name": "getCategoryIds()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var catalog=new sn_sc.Catalog(\"e0d08b13c3330100c8b837659bba8fb4\");\n\tconsole.log(catalog.getCategoryIds());",
                                "description": ":"
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "ArrayList",
                            "description": "Returns the sys_ids of the categories in the specified catalog."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "CJS-getDescription",
                        "short_description": "Specifies the catalog description.",
                        "description": "",
                        "name": "getDescription()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var catalog=new sn_sc.Catalog(\"e0d08b13c3330100c8b837659bba8fb4\");\n\tconsole.log(catalog.getDescription());",
                                "description": ":"
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "Catalog description."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "CJS-getDesktopImageSRC",
                        "short_description": "Returns the catalog desktop image value.",
                        "description": "",
                        "name": "getDesktopImageSRC()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var catalog=new sn_sc.Catalog(\"e0d08b13c3330100c8b837659bba8fb4\");\n\tconsole.log(catalog.getDesktopImageSRC());",
                                "description": ":"
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "Catalog desktop image value."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "CJS-getGr",
                        "short_description": "Returns the catalog gliderecord.",
                        "description": "",
                        "name": "getGr()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var catalog=new sn_sc.Catalog(\"e0d08b13c3330100c8b837659bba8fb4\");\t\n\tdata.history=catalog.getGr();",
                                "description": ":"
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "GlideRecord",
                            "description": "GlideRecord of the catalog."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "CJS-getHeaderIconSRC",
                        "short_description": "Returns the catalog header icon.",
                        "description": "",
                        "name": "getHeaderIconSRC()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var catalog=new sn_sc.Catalog(\"e0d08b13c3330100c8b837659bba8fb4\");\nconsole.log(catalog.getHeaderIconSRC());",
                                "description": ":"
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "Catalog header icon."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "CJS-getID",
                        "short_description": "Specifies the sys_id of the catalog.",
                        "description": "",
                        "name": "getID()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var catalog=new sn_sc.Catalog(\"e0d08b13c3330100c8b837659bba8fb4\");\n\tconsole.log(catalog.getId());",
                                "description": ":"
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "sys_id of the catalog."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "CJS-getTitle",
                        "short_description": "Returns the title of the catalog.",
                        "description": "",
                        "name": "getTitle()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var catalog=new sn_sc.Catalog(\"e0d08b13c3330100c8b837659bba8fb4\");\n\tconsole.log(catalog.getTitle());",
                                "description": ":"
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "Title of the catalog"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "CJS-hasCategories",
                        "short_description": "Specifies if the catalog has categories.",
                        "description": "",
                        "name": "hasCategories()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var catalog=new sn_sc.Catalog(\"e0d08b13c3330100c8b837659bba8fb4\");\n\tconsole.log(catalog.hasCategories());",
                                "description": ":"
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "Returns true if the catalog has categories. Else returns false."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "CJS-hasItems",
                        "short_description": "Specifies if the catalog has catalog items.",
                        "description": "",
                        "name": "hasItems()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var catalog=new sn_sc.Catalog(\"e0d08b13c3330100c8b837659bba8fb4\");\n\tconsole.log(catalog.hasItems());\n",
                                "description": ":"
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "Returns true if the catalog has catalog items. Else returns false."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "CJS-isWishlistEnabled",
                        "short_description": "Specifies if the wish list is enabled for a catalog.",
                        "description": "",
                        "name": "isWishlistEnabled()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var catalog=new sn_sc.Catalog(\"e0d08b13c3330100c8b837659bba8fb4\");\t\n\tconsole.log(catalog.isWishlistEnabled());\n",
                                "description": ":"
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "Returns true if wish list is enabled for a catalog. Else returns false."
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "To use this class in a scoped application, use the <span class=\"keyword parmname\">sn_sc</span> namespace\n      identifier. The Service Catalog Scoped API plugin (ID: com.glideapp.servicecatalog.scoped.api)\n      that is enabled by default is required to access the <span class=\"keyword apiname\">CatalogSearch</span> API.",
                "short_description": "<span class=\"keyword apiname\">CatalogSearch</span> API enables you to search catalog item.",
                "identifier": "c_CatalogSearchScoped",
                "name": "CatalogSearch",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "r_CSS-CatalogSearch",
                        "short_description": "Creates an instance of the CatalogSearch class.",
                        "description": "",
                        "name": "CatalogSearch()",
                        "type": "Constructor",
                        "examples": [
                            {
                                "script": "var catSearchGR = new sn_sc.CatalogSearch().search('', '', 'Apple', false, true);\ncatSearchGR.query();\nwhile(catSearchGR.next()) {\n  gs.info(catSearchGR.getValue('name'));\n}",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_CSS-search_S_S_S_B_B",
                        "short_description": "Searches a catalog item based on a search term. The search can be narrowed down to a\n    catalog category level.",
                        "description": "",
                        "name": "search (String catalogID, String categoryID, String term, Boolean mobile, Boolean depthSearch)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var now_GR = new sn_sc.CatalogSearch().search('', '', 'ServiceNow', false, true);\nnow_GR.query();\nwhile(now_GR.next()) {\n  gs.log(now_GR.name);\n}",
                                "description": "This example shows how to search all catalogs and all categories for term: ServiceNow."
                            }
                        ],
                        "params": [
                            {
                                "name": "catalogID",
                                "type": "String",
                                "description": "Identifier of the catalog that is searched."
                            },
                            {
                                "name": "categoryID",
                                "type": "String",
                                "description": "Identifier of the catalog category that is searched."
                            },
                            {
                                "name": "depthSearch",
                                "type": "Boolean",
                                "description": "If true, subcategories are also searched."
                            },
                            {
                                "name": "mobile",
                                "type": "Boolean",
                                "description": "If true, only catalog items exposed for mobile are searched."
                            },
                            {
                                "name": "term",
                                "type": "String",
                                "description": "Search term."
                            }
                        ],
                        "return": {
                            "type": "GlideRecord",
                            "description": "Returns the GlideRecord on sc_cat_item matching the search result."
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "",
                "short_description": "<span class=\"keyword apiname\">CatCategory</span> API enables you to create and modify service catalog\n  categories using scripts.",
                "identifier": "c_CatCategory",
                "name": "CatCategory",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "r_CCS-availableForUserCriteria_S_A",
                        "short_description": "Adds the <span class=\"keyword parmname\">Available For</span> user criteria to a catalog\n    category.",
                        "description": "",
                        "name": "availableForUserCriteria(String action, Array[] criteriaIDs)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "\nvar item = new sn_sc.CatCategory(\"31bea3d53790200044e0bfc8bcbe5dec\");\nitem. availableForUserCriteria(\"add\", [\"0c441abbc6112275000025157c651c89\"]);\n",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "action",
                                "type": "String",
                                "description": "Specify <kbd class=\"ph userinput\">add</kbd> to add the user criteria to the\n                  <span class=\"ph uicontrol\">Available For</span> list. <p class=\"p\">Specify\n                    <kbd class=\"ph userinput\">delete</kbd> to delete the user criteria from the\n                    <span class=\"ph uicontrol\">Available For</span> list.</p>"
                            },
                            {
                                "name": "criteriaIDs",
                                "type": "Array",
                                "description": "Array of the user criteria sys_ids."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "CCS-canView_B_S",
                        "short_description": "Determines whether a specified user can view a specified category on a mobile device or\n    desktop.",
                        "description": "",
                        "name": "canView(Boolean isMobile, String userSysId)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var scopedCategoryObj = new sn_sc.CatCategory('7b1262b9530033007444ddeeff7b12ae');\nscopedCategoryObj.canView(false, '62826bf03710200044e0bfc8bcbe5df1');",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "isMobile",
                                "type": "Boolean",
                                "description": "Flag that indicates whether to verify the user for access on a mobile device or\n                  desktop.<ul class=\"ul\" id=\"CCS-canView_B_S__ul_zpd_3nk_chb\">\n                  <li class=\"li\">true: validate for mobile.</li>\n\n                  <li class=\"li\">false: validate for desktop.</li>\n\n                </ul>"
                            },
                            {
                                "name": "userSysId",
                                "type": "String",
                                "description": "Unique identifier of the user to validate."
                            }
                        ],
                        "return": {
                            "type": "Boolean",
                            "description": "Flag that indicates whether the user can view the associated category.<ul class=\"ul\" id=\"CCS-canView_B_S__ul_iwk_ynk_chb\">\n                  <li class=\"li\">true: user can view the category.</li>\n\n                  <li class=\"li\">false: user cannot view the category.</li>\n\n                </ul>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_CatCategory-create_Boolean",
                        "short_description": "Insert the defined category.",
                        "description": "",
                        "name": "create(Boolean standardUpdate)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var categoryCreate = new sn_sc.CatCategory();\ncategoryCreate.setAttributes({\"title\" : \"test a scoped category\", \"sc_catalog\" : \"e0d08b13c3330100c8b837659bba8fb4\"});\nvar categorySysId = categoryCreate.create();\nvar isValidSysId = categorySysId.match(/^[0-9a-fA-F]{32}$/) == null ? false : true;\nglobal.Assert.assertEquals(true, isValidSysId,\"CategorySysId: [\"+ categorySysId +\"] is not valid\", true, isValidSysId);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "standardUpdate",
                                "type": "Boolean",
                                "description": "Set to true to enable the running of engines and workflow."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "Return the sys_id of the inserted variable record."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_CatCategory-deleteRecord_Boolean",
                        "short_description": "Deletes the category record on which the CatCategory class was initially\n    instantiated.",
                        "description": "",
                        "name": "deleteRecord(Boolean standardUpdate)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var categoryDelete = new sn_sc.CatCategory(categorySysId);\ncategoryDelete.deleteRecord();\nvar category = new sn_sc.CatCategory(categorySysId);\nvalues = category.read({\"title\" : \"\", \"sc_catalog\":\"\"}, false);\nglobal.Assert.assertEquals(\"\", values.title,\"Category should title\");",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "standardUpdate",
                                "type": "Boolean",
                                "description": "Set to true to enable the running of engines and workflow."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "CCS-getID",
                        "short_description": "Returns the sys_id of the category.",
                        "description": "",
                        "name": "getID()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var cart = new sn_sc.CatCategory(\"2809952237b1300054b6a3549dbe5dd4\");\nvar categoryID = cart.getID();\ngs.info(categoryID);",
                                "description": ":"
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "sys_id of the category."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_CCS-notAvailableForUserCriteria_S_A",
                        "short_description": "Adds the <span class=\"keyword parmname\">Not Available For</span> user criteria to a catalog\n    category.",
                        "description": "",
                        "name": "notAvailableForUserCriteria(String action, Array[] criteriaIDs)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "\nvar item = new sn_sc.CatCategory(\"31bea3d53790200044e0bfc8bcbe5dec\");\nitem. notAvailableForUserCriteria(\"add\", [\"0c441abbc6112275000025157c651c89\"]);\n",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "action",
                                "type": "String",
                                "description": "Specify <kbd class=\"ph userinput\">add</kbd> to add the user criteria to the\n                  <span class=\"ph uicontrol\">Not Available For</span> list. <p class=\"p\">Specify\n                    <kbd class=\"ph userinput\">delete</kbd> to delete the user criteria from the\n                    <span class=\"ph uicontrol\">Not Available For</span> list.</p>"
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_CatCategory-read_Object_Boolean",
                        "short_description": "Get a mapping of the category.",
                        "description": "",
                        "name": "read(Object columns, Boolean standardUpdate)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var category = new sn_sc.CatCategory(\"a96277509f300200b407b89a442e704e\");\nvar values = category.read({\"title\" : \"\"}, true);\ngs.log(values.title);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "columns",
                                "type": "Object",
                                "description": "Specify the set of columns that you would like the values for."
                            },
                            {
                                "name": "standardUpdate",
                                "type": "Boolean",
                                "description": "Set to true to enable the running of engines and workflow."
                            }
                        ],
                        "return": {
                            "type": "Object",
                            "description": "An object mapping column names to values."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_CatCategory-setAttributes_Object",
                        "short_description": "Define attribute values for this category.",
                        "description": "",
                        "name": "setAttributes(Object attributes)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var categoryCreate = new sn_sc.CatCategory();\ncategoryCreate.setAttributes({\"title\" : \"test a scoped category\", \"sc_catalog\" : \"e0d08b13c3330100c8b837659bba8fb4\"});\nvar categorySysId = categoryCreate.create();\nvar isValidSysId = categorySysId.match(/^[0-9a-fA-F]{32}$/) == null ? false : true;\nglobal.Assert.assertEquals(true, isValidSysId,\"CategorySysId: [\"+ categorySysId +\"] is not valid\", true, isValidSysId);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "attributes",
                                "type": "Object",
                                "description": "Set the attributes for new field and value pairs."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_CatCategory-setTableName_String",
                        "short_description": "Define the table name for this category.",
                        "description": "",
                        "name": "setTableName(String tableName)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var categoryRead = new sn_sc.CatCategory(categorySysId);\ncategoryRead.setTableName(\"test_category\");\nvar values = categoryRead.read({\"title\" : \"\", \"sc_catalog\":\"\", \"test\": \"\"}, false);\ngs.info(categorySysId);\ngs.info(values.title);\ngs.info(values.test);\nglobal.Assert.assertEquals(\"testValue\", values.test,\"Category extends sc_category and stores its extended value\");",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "tableName",
                                "type": "String",
                                "description": "Specify the name of the table that extends sc_category."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_CatCategory-update_Object_Boolean",
                        "short_description": "Use to update current category.",
                        "description": "",
                        "name": "update(Object columnValues, Boolean standardUpdate)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var categoryUpdate = new sn_sc.CatCategory(categorySysId);\ncategoryUpdate.update({\"title\" : \"test changed scoped category\"}, true);\nvalues = categoryUpdate.read({\"title\" : \"\", \"sc_catalog\":\"\"}, false);\nglobal.Assert.assertEquals(\"test changed scoped category\", values.title,\"Category should title\");",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "columnValues",
                                "type": "Object",
                                "description": "Object mapping column names to values."
                            },
                            {
                                "name": "standardUpdate",
                                "type": "Boolean",
                                "description": "Set to true to enable the running of engines and workflow."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "",
                "short_description": "<span class=\"keyword apiname\">CatItem</span> API enables you to create and modify service catalog items\n  using scripts.",
                "identifier": "c_CatItem",
                "name": "CatItem",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "r_CIS-availableForUserCriteria_S_A",
                        "short_description": "Adds the <span class=\"keyword parmname\">Available For</span> user criteria to a catalog\n    item.",
                        "description": "",
                        "name": "availableForUserCriteria(String action, Array criteriaIDs)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "\nvar item = new sn_sc.CatItem(\"31bea3d53790200044e0bfc8bcbe5dec\");\nitem. availableForUserCriteria(\"add\", [\"0c441abbc6112275000025157c651c89\"]);\n",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "action",
                                "type": "string",
                                "description": "Specify <kbd class=\"ph userinput\">add</kbd> to add the user criteria to the\n                  <span class=\"ph uicontrol\">Available For</span> list. <p class=\"p\">Specify\n                    <kbd class=\"ph userinput\">delete</kbd> to delete the user criteria from the\n                    <span class=\"ph uicontrol\">Available For</span> list.</p>"
                            },
                            {
                                "name": "criteriaIDs",
                                "type": "Array",
                                "description": "Array of the user criteria sys_ids."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "CI-canViewInDomain",
                        "short_description": "Verifies whether the current catalog item is viewable in the selected domain (domain\n    selected in the domain picker).",
                        "description": "<p>Catalog items in the global domain are available across all domains.</p>",
                        "name": "canViewInDomain()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var catItem = new sn_sc.CatItem(\"060f3afa3731300054b6a3549dbe5d3e\");\ngs.info(catItem.canViewInDomain());",
                                "description": "This example shows how to verify whether a catalog item is viewable in the currently\n        selected domain."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "Flag that validates whether the current catalog item is viewable in the\n                selected domain.<p class=\"p\">Valid values:</p>\n<ul class=\"ul\" id=\"CI-canViewInDomain__ul_sfm_gdy_shb\">\n                  <li class=\"li\">true: Catalog item is viewable in the domain</li>\n\n                  <li class=\"li\">false: Catalog item is not viewable in the domain</li>\n\n                </ul>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "CI-canViewOnSearch_B",
                        "short_description": "Specifies if the user has access to view the catalog item on global search.",
                        "description": "",
                        "name": "canViewOnSearch(boolean isMobile)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var cart=new sn_sc.CatItem(\"04b7e94b4f7b4200086eeed18110c7fd\");\t\n\tdata.history=cart.canViewOnSearch('false');",
                                "description": ":"
                            }
                        ],
                        "params": [
                            {
                                "name": "isMobile",
                                "type": "Boolean",
                                "description": "True if the search is in mobile view. Else, false."
                            }
                        ],
                        "return": {
                            "type": "Boolean",
                            "description": "Returns true if the user has access to view the catalog item on global search.\n                Else, returns false."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_CatItem-create_Boolean",
                        "short_description": "Inserts the defined catalog item.",
                        "description": "",
                        "name": "create(Boolean standardUpdate)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var catalogItem = new sn_sc.CatItem();\ncatalogItem.setAttributes({\"name\":\"My FirstCatItem\"});\ncatalogItem.setCatalogs(catalogSysId); // Service catalog\ncatalogItem.setCategories(categorySysId); // Use scoped category\n\nvar catItemSysId = catalogItem.create(true); // Returns sys_id of created item",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "standardUpdate",
                                "type": "Boolean",
                                "description": "Flag that indicates whether to enable the running of engines and\n                  workflow.<div class=\"p\">Valid values:<ul class=\"ul\" id=\"r_CatItem-create_Boolean__ul_olr_kf4_pnb\">\n                    <li class=\"li\">true: Enable the running of engines and workflow.</li>\n\n                    <li class=\"li\">false: Do not enable the running of engines and workflow. Note that the\n                      created and updated system date columns on the table are not updated.</li>\n\n                  </ul>\n</div>"
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "Sys_id of the newly created catalog item."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_CatItem-delete_Boolean",
                        "short_description": "Delete the defined catalog item.",
                        "description": "",
                        "name": "deleteRecord(Boolean standardUpdate)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "standardUpdate",
                                "type": "Boolean",
                                "description": "Set to true to enable the running of engines and workflow."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "CI-getFirstAccessibleCategoryForSearch_S",
                        "short_description": "Specifies the first category that the user can view in a catalog.",
                        "description": "",
                        "name": "getFirstAccessibleCategoryForSearch(String catalogId)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var CatItem=new sn_sc.CatItem(\"04b7e94b4f7b4200086eeed18110c7fd\");\t\n\tconsole.log(CatItem.getFirstAccessibleCategoryForSearch(\"e0d08b13c3330100c8b837659bba8fb4â));",
                                "description": ":"
                            }
                        ],
                        "params": [
                            {
                                "name": "catalogId",
                                "type": "String",
                                "description": "sys_id of the catalog."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "sys_id of the first category that the user can view in a catalog."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "CI-getInvalidDelegatedUsers_A",
                        "short_description": "Returns an array of users for whom the associated item cannot be delegated (requested\n    on behalf of).",
                        "description": "<p>The method verifies each of the users passed in the array.</p>",
                        "name": "getInvalidDelegatedUsers(Array requestForUsers)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "function getInvalidDelegatedUsers(itemId, userIds) {\nvar catItem = new sn_sc.CatItem(itemId);\nvar invalidUsers = catItem.getInvalidDelegatedUsers(userIds);\nreturn invalidUsers;\n}\n",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "requestForUsers",
                                "type": "Object",
                                "description": "Array of user sys_ids to check whether the associated user can acquire the\n                current item and that the item can be requested on behalf of them. User sys_ids are\n                located in the Users [sys_user] table."
                            }
                        ],
                        "return": {
                            "type": "Array",
                            "description": "List of user names (Name column from Users [sys_user] table) for whom the item\n                cannot be requested for by a delegate."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "CI-getRecordClass",
                        "short_description": "Returns the class name for the current catalog item record.",
                        "description": "",
                        "name": "getRecordClass()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var CatItem=new sn_sc.CatItem(\"04b7e94b4f7b4200086eeed18110c7fd\");\t\n\tconsole.log(CatItem.getRecordClass());",
                                "description": ":"
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "Class name for the current catalog item record."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "CI-isDelegationAllowed_S",
                        "short_description": "Verifies whether the specified delegated user has acquisition rights to the current\n    service catalog item.",
                        "description": "",
                        "name": "isDelegationAllowed(String delegatedUser)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "function canRequestFor(itemId, user) {\n  var catItem = new sn_sc.CatItem(itemId);\n  var result = catItem.isDelegationAllowed(user);\n  return result;\n}\n",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "delegatedUser",
                                "type": "String",
                                "description": "Optional. Sys_id of the user to request the service catalog item for\n                (delegate). The method verifies whether the user has acquisition rights to the\n                  item.<p class=\"p\"> Default: Checks whether the calling user has acquisition rights to the\n                  item.</p>"
                            }
                        ],
                        "return": {
                            "type": "Boolean",
                            "description": "Flag that indicates whether the user has acquisition rights to the current\n                service catalog item.<div class=\"p\">Valid values:<ul class=\"ul\" id=\"CI-isDelegationAllowed_S__ul_sxh_kqq_nlb\">\n                    <li class=\"li\">true: User has acquisition rights to the item.</li>\n\n                    <li class=\"li\">false: User does not have acquisition rights to the item.</li>\n\n                  </ul>\n</div>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "CI-isVisibleServicePortal",
                        "short_description": "Specifies if the catalog item is available in service portal.",
                        "description": "",
                        "name": "isVisibleServicePortal()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var CatItem=new sn_sc.CatItem(\"04b7e94b4f7b4200086eeed18110c7fd\");\t\n\tdata.history=CatItem.isVisibleServicePortal();",
                                "description": ":"
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "Returns true if the catalog item is available in service portal.  Else, returns\n                false."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_CIS-notAvailableForUserCriteria_S_A",
                        "short_description": "Adds the <span class=\"keyword parmname\">Not Available For</span> user criteria to a catalog\n    item.",
                        "description": "",
                        "name": "notAvailableForUserCriteria(String action, Array criteriaIDs)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "\nvar item = new sn_sc.CatItem(\"31bea3d53790200044e0bfc8bcbe5dec\");\nitem. notAvailableForUserCriteria(\"add\", [\"0c441abbc6112275000025157c651c89\"]);\n",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "action",
                                "type": "String",
                                "description": "Specify <kbd class=\"ph userinput\">add</kbd> to add the user criteria to the\n                  <span class=\"ph uicontrol\">Not Available For</span> list. <p class=\"p\">Specify\n                    <kbd class=\"ph userinput\">delete</kbd> to delete the user criteria from the\n                    <span class=\"ph uicontrol\">Not Available For</span> list.</p>"
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_CatItem-read_Object_Boolean",
                        "short_description": "Get a mapping of catalog item attribute values.",
                        "description": "",
                        "name": "read(Object columns, Boolean standardUpdate)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "standardUpdate",
                                "type": "Boolean",
                                "description": "Set to true to enable the running of engines and workflow."
                            },
                            {
                                "name": "columns",
                                "type": "Object",
                                "description": "Specify the set of columns that you would like the values for."
                            }
                        ],
                        "return": {
                            "type": "Object",
                            "description": "An object mapping column names to values."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_CatItem-setAttributes_Object",
                        "short_description": "Define attribute values for this catalog item.",
                        "description": "",
                        "name": "setAttributes(Object attributes)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "attributes",
                                "type": "Object",
                                "description": "An object mapping column names to values."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_CatItem-setCatalogs_String",
                        "short_description": "Define the catalogs that this catalog item is associated with.",
                        "description": "",
                        "name": "setCatalogs(String catalogs)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "catalogs",
                                "type": "String",
                                "description": "Specify comma-separated list of catalogs that you would like the item to be\n                associated with."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_CatItem-setCategories_String",
                        "short_description": "Define the categories that this catalog item is associated with.",
                        "description": "",
                        "name": "setCategories(String categories)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "categories",
                                "type": "String",
                                "description": "Specify comma-separated list of categories that you would like the item to be\n                associated with."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_CatItem-setImage_String_String",
                        "short_description": "Set the image of a catalog item to a database image record.",
                        "description": "",
                        "name": "setImage(String dbImageSysId, String type)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "dbImageSysId",
                                "type": "String",
                                "description": "sys_id of an attachment referencing the db_image."
                            },
                            {
                                "name": "type",
                                "type": "String",
                                "description": "Type can be picture or an icon."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_CatItem-setTableName_String",
                        "short_description": "Define the table name for this catalog item.",
                        "description": "",
                        "name": "setTableName(String tableName)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "tableName",
                                "type": "String",
                                "description": "Specify the name of the table that extends sc_cat_item."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_CatItem-update_Object_Boolean",
                        "short_description": "Use to update current catalog item with set values.",
                        "description": "",
                        "name": "update(Object columnValues, Boolean standardUpdate)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "columnValues",
                                "type": "Object",
                                "description": "An object mapping column names to values."
                            },
                            {
                                "name": "standardUpdate",
                                "type": "Boolean",
                                "description": "Set to true to enable the running of engines and workflow."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "To use this class in a scoped application, use the <span class=\"keyword parmname\">sn_sc</span> namespace\n      identifier. The Service Catalog Scoped API plugin (com.glideapp.servicecatalog.scoped.api)\n      that is enabled by default is required to access the <span class=\"keyword apiname\">OrderGuide</span> API.",
                "short_description": "The <span class=\"keyword apiname\">OrderGuide</span> API enables you to initialize and view order guide\n    details.",
                "identifier": "OrderGuideScopedAPI",
                "name": "OrderGuide",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "OG-OrderGuide_S",
                        "short_description": "Creates an instance of the OrderGuide class with the specified sys_id.",
                        "description": "",
                        "name": "OrderGuide(String sys_id)",
                        "type": "Constructor",
                        "examples": [
                            {
                                "script": "var cart=new sn_sc.OrderGuide(\"6690750f4f7b4200086eeed18110c761\");",
                                "description": ":"
                            }
                        ],
                        "params": [
                            {
                                "name": "sys_id",
                                "type": "String",
                                "description": "sys_id of the OrderGuide."
                            }
                        ],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "OG-getID",
                        "short_description": "Returns the sys_id of the order guide.",
                        "description": "",
                        "name": "getID()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var cart=new sn_sc.OrderGuide(\"6690750f4f7b4200086eeed18110c761\");\t\n\tconsole.log(cart.getID());\n",
                                "description": ":"
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "sys_id of the order guide."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "OG-init_M",
                        "short_description": "Initialises the order guide with the specified catalog items and the variables, and\n    returns the order guide.",
                        "description": "",
                        "name": "init(Map request)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var guide = new sn_sc.OrderGuide('6690750f4f7b4200086eeed18110c761');\n \nvar map = {};\nmap.variables = {};\n//map.sysparm_id = '6690750f4f7b4200086eeed18110c761';\nmap.variables['IOce433d0f4f7b4200086eeed18110c74d'] = '221f3db5c6112284009f4becd3039cc9'; //Here ce433d0f4f7b4200086eeed18110c74d is the sys_id of the variable and 221f3db5c6112284009f4becd3039cc9 is its value\nvar includedItems = guide.init(map)",
                                "description": ":"
                            }
                        ],
                        "params": [
                            {
                                "name": "request",
                                "type": "Map",
                                "description": "A JSON object with the Catalog item and variable details."
                            }
                        ],
                        "return": {
                            "type": "Map",
                            "description": "A JSON object with the initialised order guide details."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "OG-isIncludeItems",
                        "short_description": "Specifies if the <span class=\"ph uicontrol\">Show Include Toggle</span> (include_items) check box\n    is selected for the specified order guide.",
                        "description": "<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> The <span class=\"ph uicontrol\">Show Include Toggle</span> field does not appear on the Order\n          guide form by default.</div></p>",
                        "name": "isIncludeItems()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var orderGuide=new sn_sc.OrderGuide(\"6690750f4f7b4200086eeed18110c761\");\t\n\tconsole.log(orderGuide.isIncludeItems());",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "Returns true if the <span class=\"ph uicontrol\">Show Include Toggle</span> check box is\n                selected for the specified order guide. Else, returns false."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "OG-isTwoStep",
                        "short_description": "Specifies if the two-step checkout is enabled.",
                        "description": "",
                        "name": "isTwoStep()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var orderGuide=new sn_sc.OrderGuide(\"6690750f4f7b4200086eeed18110c761\");\t\n\tconsole.log(orderGuide.isTwoStep());",
                                "description": ":"
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "Returns true if the two-step checkout is enabled. Else returns false."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "OG-isUseCustomCart",
                        "short_description": "Specifies if a separate cart (different from that for catalog items) usage is enabled\n    for a two-step order guide.",
                        "description": "",
                        "name": "isUseCustomCart()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var orderGuide=new sn_sc.OrderGuide(\"6690750f4f7b4200086eeed18110c761\");\t\n\tconsole.log (orderGuide.isUseCustomCart());",
                                "description": ":"
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "Returns true if a separate cart usage is enabled for a two-step order guide.\n                Else, returns false."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "OG-navigateFromMap_M",
                        "short_description": "Navigates to the catalog items of an order guide.",
                        "description": "",
                        "name": "navigateFromMap(Map itemDetails)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var orderGuide=new sn_sc.OrderGuide.navigateFromMap(itemdetails);",
                                "description": ":"
                            }
                        ],
                        "params": [
                            {
                                "name": "itemDetails",
                                "type": "Map",
                                "description": "A JSON object with details of catalog items in the order guide."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    }
                ]
            }
        ]
    },
    {
        "identifier": "sn_skill_rule",
        "namespace": "sn_skill_rule",
        "classes": [
            {
                "description": "The <span class=\"keyword apiname\">SkillDeterminationUtils</span> API requires the Skill Determination\n      (com.snc.skill_determination) plugin and is provided within the\n        <span class=\"keyword parmname\">sn_skill_rule</span> namespace.",
                "short_description": "Provides utility methods to get or set work item skill data.",
                "identifier": "SkillDeterminationUtilsAPI",
                "name": "SkillDeterminationUtils",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "SkillDeterminationUtilsConstructor",
                        "short_description": "Constructor to create an instance of SkillDeterminationUtils.",
                        "description": "",
                        "name": "SkillDeterminationUtils()",
                        "type": "Constructor",
                        "examples": [
                            {
                                "script": "var util = new sn_skill_rule.SkillDeterminationUtils();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "assignSkillsToWorkItem_A_GR",
                        "short_description": "Assigns an array of active skill objects to a work item.",
                        "description": "",
                        "name": "assignSkillsToWorkItem(Array skills, GlideRecord gr)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "// Create an interaction record\nvar now_GR = new GlideRecord('interaction');\nnow_GR.insert();\n\nvar util = new sn_skill_rule.SkillDeterminationUtils();\n\n// Get interaction skills interaction \n// and specify if any are mandatory\nvar result = util.determineWorkItemSkills(now_GR);\n\n// Assign skills determined by result and \n// assign them to the interaction work item\nutil.assignSkillsToWorkItem(result, gr);",
                                "description": "The examples below create an Interaction record using the table name (interaction) and show\n        how to assign skills to the interaction work item, creating a record in the Interaction\n        Skills [interaction_m2m_skill] table."
                            },
                            {
                                "script": "var now_GR = new GlideRecord('interaction');\nnow_GR.insert();\n\nvar util = new sn_skill_rule.SkillDeterminationUtils();\n\nvar skills = [{\"skillSysId\":\"2eb1c2029f100200a3bc1471367fcfe4\", \"skillName\":\"IT\", \"mandatory\":true, \"skillLevelName\":\"\", \"skillLevelSysId\":null}];\n\nutil.assignSkillsToWorkItem(skills, gr);",
                                "description": "Use case 2: Manually insert skills array. In this case, assign IT skills to the Interaction\n        work item."
                            }
                        ],
                        "params": [
                            {
                                "name": "skills",
                                "type": "Array",
                                "description": "Array of active skill objects to be assigned."
                            },
                            {
                                "name": "skill.skillName",
                                "type": "String",
                                "description": "Name of the skill."
                            },
                            {
                                "name": "skill.skillSysId",
                                "type": "String",
                                "description": "Sys ID of the skill."
                            },
                            {
                                "name": "skill.mandatory",
                                "type": "Boolean",
                                "description": "True if the skill is mandatory, false otherwise."
                            },
                            {
                                "name": "skill.skillLevelName",
                                "type": "String",
                                "description": "Optional skill level name."
                            },
                            {
                                "name": "skill.skillLevelSysId",
                                "type": "String",
                                "description": "Optional skill level Sys ID."
                            },
                            {
                                "name": "gr",
                                "type": "GlideRecord",
                                "description": "GlideRecord of the work item on which to assign skills."
                            }
                        ],
                        "return": {
                            "type": "None",
                            "description": "Â "
                        },
                        "extras": []
                    },
                    {
                        "identifier": "determineWorkItemSkills_GR",
                        "short_description": "Gets skills for a specified work item, indicates if the skills are mandatory, and lists\n    any skill levels.",
                        "description": "",
                        "name": "determineWorkItemSkills(GlideRecord gr)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "// Create an interaction record\nvar now_GR = new GlideRecord('interaction');\nnow_GR.insert();\n\nvar util = new sn_skill_rule.SkillDeterminationUtils();\n\nvar result = util.determineWorkItemSkills(now_GR);\ngs.info(JSON.stringify(result));",
                                "description": "The following script creates an interaction record, gets skills for the interaction work\n        item, and indicates if the skills are mandatory."
                            }
                        ],
                        "params": [
                            {
                                "name": "gr",
                                "type": "GlideRecord",
                                "description": "GlideRecord of a work item from any interaction or task table\n                extension."
                            }
                        ],
                        "return": {
                            "type": "Array",
                            "description": "One or more skill objects.<ul class=\"ul\" id=\"determineWorkItemSkills_GR__ul_bwb_5nb_j3b\">\n                  <li class=\"li\">skillSysId: String. Sys ID of the skill from the Skills  [cmn_skill]\n                    table.</li>\n\n                  <li class=\"li\">skillName: String. Name of the skill.</li>\n\n                  <li class=\"li\">mandatory: Boolean. True if mandatory, false otherwise.</li>\n\n                  <li class=\"li\">skillLevelName: If skill exists, name of the skill level. </li>\n\n                  <li class=\"li\">skillLevelSysId: If skill exists, Sys ID of the skill level from the Skill\n                    Levels  [cmn_skill_level] table. </li>\n\n                </ul>"
                        },
                        "extras": []
                    }
                ]
            }
        ]
    },
    {
        "identifier": "sn_sms_pref-namespace",
        "namespace": "sn_sms_pref",
        "classes": [
            {
                "description": "This API is implemented as the script include SMSPreferenceHandlerSNC and resides in the\n        <span class=\"keyword parmname\">sn_sms_pref</span> namespace. To use this API you must install the Notify\n      plugin (com.snc.notify) which requires a separate subscription. You can activate this plugin\n      if you have the admin role.",
                "short_description": "The <span class=\"keyword apiname\">SMSPreferenceHandler</span> API provides methods to manage SMS\n    configurations.",
                "identifier": "SMSPreferenceHandlerAPI",
                "name": "SMSPreferenceHandler - Scoped, Global",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "SPH-SMSPreferenceHandler_S",
                        "short_description": "Instantiates the SMSPreferenceHandler script include object.",
                        "description": "",
                        "name": "SMSPreferenceHandler(String provider)",
                        "type": "Constructor",
                        "examples": [
                            {
                                "script": "var handler = new sn_sms_pref.SMSPreferenceHandler('TwilioDirect'); // Pass the provider name\nvar config = handler.getConfig();",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "provider",
                                "type": "String",
                                "description": "Name of the telephony service provider."
                            }
                        ],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SPH-getConfig",
                        "short_description": "Returns the preferences configuration record for the current telephony service\n    provider.",
                        "description": "<p>The method queries all preference configuration records from the SMS Preference\n        Configuration [sn_sms_pref_configuration] table for the current telephony service provider,\n        sorts the results by the Order field (lowest to highest), and then returns the first\n        record.</p>",
                        "name": "getConfig()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var handler = new sn_sms_pref.SMSPreferenceHandler('TwilioDirect'); // Pass the provider name\nvar config = handler.getConfig();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "GlideRecord",
                            "description": "Preference configuration record for the current telephony service provider. If\n                no record exists, then null."
                        },
                        "extras": []
                    }
                ]
            }
        ]
    },
    {
        "identifier": "sn_templated_snip-namespace",
        "namespace": "sn_templated_snip",
        "classes": [
            {
                "description": "Response templates are reusable messages that agents can copy to case or task forms. They\n      provide quick and consistent messages to users and display standard chat response messages to\n      requesters in <span class=\"ph\">Agent Chat</span>. <span class=\"ph\">This API requires the Templated Responses\n                plugin (com.sn_templated_snip), which is activated by default. This API is provided\n                within the <span class=\"keyword parmname\">sn_templated_snip</span> namespace.</span><br/><br/>For additional information on response templates,\n                see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-servicenow-platform/page/product/human-resources/concept/response-templates-templated-snippets.html\" target=\"_blank\">Response templates</a>.",
                "short_description": "Provides methods for managing response templates.",
                "identifier": "ResponseTemplateAPI",
                "name": "ResponseTemplate - Scoped, Global",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "RT-ResponseTemplate",
                        "short_description": "Instantiates a new ResponseTemplate object.",
                        "description": "",
                        "name": "ResponseTemplate()",
                        "type": "Constructor",
                        "examples": [
                            {
                                "script": "new sn_templated_snip.ResponseTemplate().query(\"incident\",\"ef4225a40a0a0b5700d0b8a790747812\", \"\", 0, 0, true, \"\"); ",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "RT-query_S_S_S_N_N_B_S_O",
                        "short_description": "Returns all response templates from a specified table that match the passed in query\n    criteria.",
                        "description": "",
                        "name": "query(String tableName, String recordId, String searchTerm, Number limit, Number offset, Boolean includeEvaluatedBody, String errorFormat, Object opts)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "query(\"incident\",\"ef4225a40a0a0b5700d0b8a790747812\", \"\", 0, 0, false, \"\");",
                                "description": "This example shows how to query for response templates associated with the incident\n        table."
                            },
                            {
                                "script": "query(\"incident\",\"fe4225a40a0a0b5700d0b8a790747812\", \"\", 0, 0, false, \"\");",
                                "description": "Same query with an error response."
                            }
                        ],
                        "params": [
                            {
                                "name": "tableName",
                                "type": "String",
                                "description": "Name of the table to use to search the sn_templated_snip_note_template table to\n                locate corresponding response templates. For example, incident or\n                sn_hr_core_case."
                            },
                            {
                                "name": "recordId",
                                "type": "String",
                                "description": "Sys ID of the record to use to render the variables in the response\n                template."
                            },
                            {
                                "name": "searchTerm",
                                "type": "String",
                                "description": "Optional. Text to use to filter the list of matching response templates. <p class=\"p\">The\n                  method performs a CONTAINS search of this text on the name and body fields and a\n                  STARTS WITH search on the short name field. For example, if the search term is\n                  \"crash\", the method returns any response template that matches the query criteria\n                  and has crash in the name or body or the short name starts with\n                  crash.</p>\n<p class=\"p\">Response templates with exact matches on short name appear first in\n                  the return results. All other returned response templates are sorted by\n                  name.</p>\n<p class=\"p\">Default: Return all matching response templates.</p>"
                            },
                            {
                                "name": "limit",
                                "type": "Number",
                                "description": "Optional. Maximum number of response templates to return.<p class=\"p\">Default:\n                50</p>"
                            },
                            {
                                "name": "offset",
                                "type": "Number",
                                "description": "Optional. For pagination, the index at which to start the search.<p class=\"p\">Default:\n                  0</p>"
                            },
                            {
                                "name": "includeEvaluatedBody",
                                "type": "Boolean",
                                "description": "Optional. Flag that indicates whether to render the template variables.<p class=\"p\">Valid\n                  values:</p>\n<ul class=\"ul\" id=\"RT-query_S_S_S_N_N_B_S_O__ul_msx_dpx_c3b\">\n                  <li class=\"li\">false: Do not render the template variables. The response contains the message\n                      variables.<div class=\"p\">For example:\n                      <pre class=\"pre msgblock\">Please note that your case ${number} has been escalated to ${assignment_group}.</pre>\n</div>\n</li>\n\n                  <li class=\"li\">true: Renders the template variables and returns <span class=\"keyword parmname\">evaluated_response\n                    </span> in the return results. <div class=\"p\">For example:\n                      <pre class=\"pre msgblock\">Please note that your case INC100001 has been escalated to Facilities.</pre>\n</div>\n</li>\n\n                </ul>\n<p class=\"p\">Default: false</p>"
                            },
                            {
                                "name": "errorFormat",
                                "type": "String",
                                "description": "Optional. HTML formatting to use for errors. <p class=\"p\">For\n                example:</p>\n<p class=\"p\"><samp class=\"ph codeph\">\"&lt;span\n                style='color:#ffff00'&gt;${%s}&lt;/span&gt;\"</samp></p>\n<p class=\"p\">Default: <samp class=\"ph codeph\">\"&lt;span\n                  style='color:#ff0000'&gt;${%s}&lt;/span&gt;\"</samp></p>"
                            },
                            {
                                "name": "opts",
                                "type": "Object",
                                "description": "Optional. Parameters to pass to the\n              sn_templated_snip.response_template extension point. The format and content of these\n              parameters are dependent on the implementation of the extension point. For additional\n              information on extension points, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-application-development/page/build/applications/concept/extension-points.html\" target=\"_blank\">Using extension points to extend\n                application functionality</a>."
                            }
                        ],
                        "return": {
                            "type": "Object",
                            "description": "Array of all templates that match the specified search criteria. Response\n                templates with exact matches on short name appear first in the return results. All\n                other returned response templates are sorted by name.<p class=\"p\">Each node in the Array may\n                  contain the following parameters:</p>\n<ul class=\"ul\" id=\"RT-query_S_S_S_N_N_B_S_O__ul_dcs_nxx_c3b\">\n                  <li class=\"li\"><span class=\"keyword parmname\">sys_id</span>: String. Unique identifier of the response\n                    template.</li>\n\n                  <li class=\"li\"><span class=\"keyword parmname\">name</span>: String. Name of the response template.</li>\n\n                  <li class=\"li\"><span class=\"keyword parmname\">short_name</span>: String. Short name of the response\n                    template.</li>\n\n                  <li class=\"li\"><span class=\"keyword parmname\">body</span>: HTML. Body of the response template.</li>\n\n                  <li class=\"li\"><span class=\"keyword parmname\">short_name_match</span>: Boolean. Flag that indicates whether an\n                    exact match occurred on the short name of the response template.</li>\n\n                  <li class=\"li\"><span class=\"keyword parmname\">evaluated_response</span>: Array. Results of the template\n                      evaluation.<ul class=\"ul\" id=\"RT-query_S_S_S_N_N_B_S_O__ul_hyc_myx_c3b\">\n                      <li class=\"li\"><span class=\"keyword parmname\">success</span>: Boolean. Flag that indicates whether all\n                        variables rendered properly.</li>\n\n                      <li class=\"li\"><span class=\"keyword parmname\">evaluated_body</span>: HTML. Rendered response template\n                        body.</li>\n\n                      <li class=\"li\"><span class=\"keyword parmname\">error</span>: Array. Entry for each evaluation error that\n                          occurred.<ul class=\"ul\" id=\"RT-query_S_S_S_N_N_B_S_O__ul_qlb_bzx_c3b\">\n                          <li class=\"li\"><span class=\"keyword parmname\">inAccessibleVariables</span>: String. Variables in the\n                            response template body that could not be resolved.</li>\n\n                          <li class=\"li\"><span class=\"keyword parmname\">unEvaluatedVariables</span>: String. Variablesin the\n                            response template body that were not evaluated.</li>\n\n                          <li class=\"li\"><span class=\"keyword parmname\">message</span>: String. Error message.</li>\n\n                        </ul>\n</li>\n\n                    </ul>\n</li>\n\n                </ul>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "RT-render_S_S_S_S_O",
                        "short_description": "Renders the HTML body of a specified response template.",
                        "description": "<p>During rendering, all variables are resolved using the information from the specified table\n        and record. If variables cannot be resolved, or any other problem occurs during rendering,\n        the method returns an error message in the results.</p>",
                        "name": "render(String templateId, String tableName, String recordId, String errorFormat, Object opts)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "render(\"5fc1d65993003300a9bc1d1e867ffb9c\",\"incident\",\"ef4225a40a0a0b5700d0b8a790747812\", \"\")",
                                "description": "This code example shows how to request a rendered response template for the incident\n        table."
                            },
                            {
                                "script": "render(\"5fc1d65993003300a9bc1d1e867ffb9c\",\"incident\",\"ef4225a40a0a0b5700d0b8a790747812\", \"\")",
                                "description": "Same render request but returning an error response."
                            }
                        ],
                        "params": [
                            {
                                "name": "templateId",
                                "type": "String",
                                "description": "Sys ID of the response template to render."
                            },
                            {
                                "name": "tableName",
                                "type": "String",
                                "description": "Name of the table to use when rendering the variables on the response\n                template."
                            },
                            {
                                "name": "recordId",
                                "type": "String",
                                "description": "Sys ID of the record to use when rendering the variables on the response\n                template. This record must be in the table specified by\n                  <span class=\"keyword parmname\">tableName</span>."
                            },
                            {
                                "name": "errorFormat",
                                "type": "String",
                                "description": "Optional. HTML formatting to use for errors. <p class=\"p\">For\n                example:</p>\n<p class=\"p\"><samp class=\"ph codeph\">\"&lt;span\n                style='color:#ffff00'&gt;${%s}&lt;/span&gt;\"</samp></p>\n<p class=\"p\">Default: <samp class=\"ph codeph\">\"&lt;span\n                  style='color:#ff0000'&gt;${%s}&lt;/span&gt;\"</samp></p>"
                            },
                            {
                                "name": "opts",
                                "type": "Object",
                                "description": "Optional. Parameters to pass to the\n              sn_templated_snip.response_template extension point. The format and content of these\n              parameters are dependent on the implementation of the extension point. For additional\n              information on extension points, see <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-application-development/page/build/applications/concept/extension-points.html\" target=\"_blank\">Using extension points to extend\n                application functionality</a>."
                            }
                        ],
                        "return": {
                            "type": "Object",
                            "description": "Results of the render.<ul class=\"ul\" id=\"RT-render_S_S_S_S_O__ul_q1m_d3y_c3b\">\n                  <li class=\"li\"><span class=\"keyword parmname\">success</span>: Flag that indicates whether the render was\n                    successful.</li>\n\n                  <li class=\"li\"><span class=\"keyword parmname\">evaluated_body</span>: String. For success, rendered response\n                    template body. For error, response template body which includes both rendered\n                    and non-renderable variables.</li>\n\n                  <li class=\"li\"><span class=\"keyword parmname\">error</span>: Object. Error message if render was\n                      unsuccessful.<ul class=\"ul\" id=\"RT-render_S_S_S_S_O__ul_cdl_d14_d3b\">\n                      <li class=\"li\"><span class=\"keyword parmname\">unEvaluatedVariables</span>: Variables that could not be\n                        rendered.</li>\n\n                      <li class=\"li\"><span class=\"keyword parmname\">message</span>: Error message.</li>\n\n                    </ul>\n</li>\n\n                </ul>"
                        },
                        "extras": []
                    }
                ]
            }
        ]
    },
    {
        "identifier": "sn_tfrm-namespace",
        "namespace": "sn_tfrm",
        "classes": [
            {
                "description": "The scripted <span class=\"keyword apiname\">Transformer</span> API works along with the\n        <span class=\"keyword apiname\">TransformerDefinition</span> and <span class=\"keyword apiname\">TransformerRuleList</span> APIs.\n      Together, these APIs transform XML nodes or any entity in a structured JSON document into an\n      output of name-value pairs. Supported JSON entities including objects and elements within an\n      array, such as strings, numbers, and other arrays.<br/><br/><ul class=\"ul\" id=\"TransformerScriptedAPI__ul_nsk_xfv_bkb\">\n        <li class=\"li\">\n          <p class=\"p\">The\n                  <span class=\"keyword apiname\">TransformerRuleList</span> API enables you to create transformation\n                rule lists that define what data in the source document to include in the output and\n                how to transform the source data.</p>\n\n        </li>\n\n        <li class=\"li\">\n          <p class=\"p\">The\n                  <span class=\"keyword apiname\">TransformerDefinition</span> API associates a transformation rule list\n                with a JSON/XML record path to define reusable transform definition objects. You can\n                use a transform definition object to transform one or more source documents.</p>\n\n        </li>\n\n        <li class=\"li\">\n          <p class=\"p\">The <span class=\"keyword apiname\">Transformer</span> API performs\n                the actual data transformation, one data entity at a time, using the specified\n                transformation rule list to create the desired output data.</p>\n\n        </li>\n\n      </ul><br/><br/>You can use the <span class=\"keyword apiname\">Transformer</span> class in both scoped and global server\n      scripts. When using this class, use the <span class=\"keyword parmname\">sn_tfrm</span> namespace identifier.\n      Before this API is available in an instance, you must activate the Transformation Service\n      plugin (com.glide.transform).<br/><br/>The following example illustrates how to use the <span class=\"keyword apiname\">TransformerRuleList</span> API\n      to define the transformation rules, the <span class=\"keyword apiname\">TransformerDefinition</span> API to define\n      the transformation criteria, and the <span class=\"keyword apiname\">Transformer</span> API to actually perform\n      the transformation.<br/><br/>This code example retrieves an external JSON-based stock details document, creates rules for\n      transforming that data into a tabular table, and then transforms the source document, one row\n      at a time. The following is a snippet of the JSON source document being transformed:<br/><br/><pre><code class='language-javascript'>{\n  \"NOW\": {\n    \"quote\": {\n      \"symbol\": \"NOW\",\n      \"companyName\": \"ServiceNow Inc.\",\n      \"primaryExchange\": \"New York Stock Exchange\",\n      \"sector\": \"Technology\",\n      \"open\": 166.78,\n      \"openTime\": 1522935000556,\n      \"close\": 165.77,\n      \"changePercent\": 0.00656,\n       ...\n     },\n ...}</code></pre><br/><br/><pre><code class='language-javascript'>var stockAPI = new sn_ws.RESTMessageV2('Stock Details', 'Default GET'); \nvar response = stockAPI.execute(); \nvar responseBody = response.getBody(); // obtain the source JSON document\n\n/* Define the list of rules to use to transform the acquired JSON stock detail \ninformation into a tabular table */\n\nvar transformerRuleList = new sn_tfrm.TransformerRuleList() // instantiate the rule list object\n  .fromJSON() // indicate that the source document is JSON\n  .addRule('ticker', '$.quote.symbol') // add a rule to copy the value in the \"symbol\" field of the source document to the ticker field in the output document (no changes)\n  .addRule('change_percentage', '$.quote.changePercent') // copy the \"changePercent\" field from source into the change_percentage field of output document\n  .thenMultiply('100') // multiply the change_percentage value by 100\n  .thenRoundDown('0') // addthen round it down to a whole number \n  .addRule('close_price', '$.quote.close') // copy the \"close\" field to the close_price field in the 21=-[';output\n  .thenAdaptCurrency('USD', false) // attach the US dollar code to the close_price field, but do not display the symbol\n  .addRule('summary') // add a blank \"summary\" field to the output (no corresponding source field)\n  .thenConcat('Shares of ') // in the summary field concatenate the string \"Shares of \"\n  .thenConcatSymbol('ticker') // then concatenate the \"ticker\" field from the source document\n  .thenConcat(' closed at ') // then concatenate the string \" closed at \"\n  .thenConcatSymbol('close_price'); // then concatenate the \"close_price\" field from the source document\n\n// Create a transformer definition that associates the rule list to use and the record path of the set of records in the source document to transform.  \nvar path = '$.*'; \nvar transformerDefinition = new sn_tfrm.TransformerDefinition(transformerRuleList, path);\n \n// Instantiate the transformer object.\nvar transformer = new sn_tfrm.Transformer(transformerDefinition, responseBody); \n\n// Transform the source data, one row at a time, until all rows are processed.\nvar results = []; \nwhile (transformer.transform()) { \n  results.push(transformer.getRow());\n} </code></pre>\n\n      <p class=\"p\">Output:</p>\n\n      <pre><code class='language-javascript'> {ticker: \"Now\", change_percentage: \"0\", close_price: \"165.77 USD\", summary: \"Shares of Now closed at 165.77\" }</code></pre>",
                "short_description": "Parses and transforms structured JSON or XML source content into structured key/value\n    pair output, using a defined set of rules.",
                "identifier": "TransformerScriptedAPI",
                "name": "Transformer - Scoped, Global",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "Transformer-Transformer_O_S",
                        "short_description": "Instantiates a Transformer object (constructor).",
                        "description": "",
                        "name": "Transformer(Object transformerDefinition, String document)",
                        "type": "Constructor",
                        "examples": [
                            {
                                "script": "var stockAPI = new sn_ws.RESTMessageV2('Stock Details', 'Default GET'); \nvar response = stockAPI.execute(); \nvar responseBody = response.getBody(); \n\nvar transformerRuleList = new sn_tfrm.TransformerRuleList()\n  .fromJSON()\n  .addRule('ticker', 'quote.symbol') \n  .addRule('change_percentage', 'quote.change') \n  .thenMultiply('100') \n  .thenRoundDown('0') \n  .addRule('close_price', 'quote.close') \n  .thenAdaptCurrency('USD', false) \n  .addRule('summary') \n  .thenConcat('Shares of ') \n  .thenConcatSymbol('ticker') \n  .thenConcat(' closed at ') \n  .thenConcatSymbol('close') \n\n \nvar path = '$.*'; \nvar transformerDefinition = new sn_tfrm.TransformerDefinition(transformerRuleList, path); \nvar transformer = new sn_tfrm.Transformer(transformerDefinition, responseBody); \n\nvar results = []; \nwhile (transformer.transform()) { \n  results.push(transformer.getRow());\n}",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "transformerDefinition",
                                "type": "Object",
                                "description": "Object that describes the content transformation; includes rule list and\n                JSONPath/XPath record path. <p class=\"p\">Use the <span class=\"keyword apiname\">TransformerRuleList()</span> and\n                    <span class=\"keyword apiname\">TransformerDefinition()</span> APIs to generate this\n                object.</p>"
                            },
                            {
                                "name": "document",
                                "type": "String",
                                "description": "Source document to translate."
                            }
                        ],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "Trans-getRow",
                        "short_description": "Returns\n    the row resulting from the last transformation (or null if no row\n    exists).",
                        "description": "",
                        "name": "getRow()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var results = []; \nwhile (transformer.transform()) { \n  results.push(transformer.getRow());\n",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Object",
                            "description": "Object containing one transformed\n                row/node\n                of data."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "Trans-transform",
                        "short_description": "Transforms the next available\n    row/node\n    in the source document.",
                        "description": "",
                        "name": "transform()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var results = []; \nwhile (transformer.transform()) { \n  results.push(transformer.getRow());\n",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "Flag that indicates whether there is a valid next row to transform.<ul class=\"ul\" id=\"Trans-transform__ul_zcn_2qh_phb\">\n                  <li class=\"li\">true: Valid next row</li>\n\n                  <li class=\"li\">false: No additional rows</li>\n\n                </ul>"
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "The <span class=\"keyword apiname\">TransformerDefinition</span> API works along with the\n        <span class=\"keyword apiname\">Transformer</span> and <span class=\"keyword apiname\">TransformerRuleList</span> APIs. <span class=\"ph\">Together, these APIs transform XML nodes or\n                any entity in a structured JSON document into an output of name-value pairs.\n                Supported JSON entities including objects and elements within an array, such as\n                strings, numbers, and other arrays.</span><br/><br/><ul class=\"ul\" id=\"TransformerDefinitionAPI__ul_otj_sgv_bkb\">\n        <li class=\"li\">\n          <p class=\"p\">The\n                  <span class=\"keyword apiname\">TransformerRuleList</span> API enables you to create transformation\n                rule lists that define what data in the source document to include in the output and\n                how to transform the source data.</p>\n\n        </li>\n\n        <li class=\"li\">\n          <p class=\"p\">The\n                  <span class=\"keyword apiname\">TransformerDefinition</span> API associates a transformation rule list\n                with a JSON/XML record path to define reusable transform definition objects. You can\n                use a transform definition object to transform one or more source documents.</p>\n\n        </li>\n\n      </ul><br/><br/>In addition, this object provides methods that enable you to obtain the record path of the\n      TransformerDefinition object. It can also validate whether the definition has a valid\n      TransformerRuleList associated with it.<br/><br/>The <span class=\"keyword apiname\">Transformer</span> API performs\n                the actual data transformation, one data entity at a time, using the specified\n                transformation rule list to create the desired output data.<br/><br/>You can use the <span class=\"keyword apiname\">TransformerDefinition</span> class in both scoped and global\n      server scripts. When using this class, use the <span class=\"keyword parmname\">sn_tfrm</span> namespace\n      identifier. Also, before this API is available in an instance, you must activate the\n      Transformation Service plugin (com.glide.transform).",
                "short_description": "Provides methods to instantiate and manage the TransformerDefinition object, which\n    associates a transformation rules list and a record path.",
                "identifier": "TransformerDefinitionAPI",
                "name": "TransformerDefinition - Scoped, Global",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "TRD-transformerDefinition_O_S",
                        "short_description": "Instantiates a TransformerDefinition object.",
                        "description": "",
                        "name": "transformerDefinition(Object transformerRuleList, String recordPath)",
                        "type": "Constructor",
                        "examples": [
                            {
                                "script": "var stockAPI = new sn_ws.RESTMessageV2('Stock Details', 'Default GET'); \nvar response = stockAPI.execute(); \nvar responseBody = response.getBody(); \n\nvar transformerRuleList = new sn_tfrm.TransformerRuleList()\n  .fromJSON()\n  .addSymbol('ticker', 'quote.symbol') \n  .addSymbol('change_percentage', 'quote.change_change') \n  .thenMultiply('100') \n  .thenRoundDown('0') \n  .addSymbol('close_price', 'quote.close') \n  .thenAdaptCurrency('USD', false) \n  .addSymbol('summary') \n  .thenConcat('Shares of ') \n  .thenConcatSymbol('ticker') \n  .thenConcat(' closed at ') \n  .thenConcatSymbol('close'); \n\n \nvar path = '$.*'; // Transform all objects in the JSON document\nvar transformerDefinition = new sn_tfrm.TransformerDefinition(transformerRuleList, recordPath); \nvar transformer = new sn_tfrm.Transformer(transformerDefinition, responseBody); \n\nvar results = []; \nwhile (transformer.transform()) { \n  results.push(transformer.getRow());\n}",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "transformerRuleList",
                                "type": "Object",
                                "description": "TransformerRuleList to associate with this transformer definition."
                            },
                            {
                                "name": "recordPath",
                                "type": "String",
                                "description": "<p class=\"p\">Optional. The path (JSONPath for JSON, XPath for XML) that identifies the\n                  container (parent) of nodes to parse as records in the source document.</p>\n\n                <p class=\"p\">For JSON documents, these nodes can be any object, array, or JSON primitive\n                  (string, number, boolean). For XML documents, these nodes are the child elements\n                  of the container.</p>\n\n                <p class=\"p\">If <span class=\"keyword parmname\">recordPath</span> is unspecified, the entire document is\n                  inferred as a single record. For JSON documents, if the top node is an array and\n                    <span class=\"keyword parmname\">recordPath</span> is unspecified, then the top array is the\n                  record's container, and each of its entries is a record.</p>"
                            }
                        ],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "TRD-recordPath",
                        "short_description": "If set when the TransformerDefinition object was instantiated, returns the record path\n    for the source data file associated with the TransformerDefinition object.",
                        "description": "<p>A record path (JSONPath for JSON, XPath for XML) identifies the container\n              (parent) of nodes to parse as records in the source document.</p><p>For JSON\n                documents, these nodes can be any object, array, or JSON primitive (string, number,\n                boolean). For XML documents, these nodes are the child elements of the\n                container.</p><p>If <span class=\"keyword parmname\">recordPath</span> is unspecified, the entire\n                document is inferred as a single record. For JSON documents, if the top node is an\n                array and <span class=\"keyword parmname\">recordPath</span> is unspecified, then the top array is the\n                record's container, and each of its entries is a record.</p>",
                        "name": "recordPath()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var path = '$.records'; \nvar transformerDefinition = new sn_tfrm.TransformerDefinition(transformerRuleList, recordPath); \nvar transformer = new sn_tfrm.Transformer(transformerDefinition, responseBody);  \n.\n.\n.\n\nvar recordPath = transformerDefinition.recordfPath();\n\nvar results = []; \nwhile (transformer.transform()) { \n  results.push(transformer.getRow());\n}",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "If set, the record path associated with the transformer definition. If not set,\n                returns null."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "TRD-validate",
                        "short_description": "Validates whether a valid TransformerRuleList is associated with the\n    TransformerDefintion object.",
                        "description": "",
                        "name": "validate()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var transformerDefinition = new sn_tfrm.TransformerDefinition(transformerRuleList, recordPath);\nvar transformer = new sn_tfrm.Transformer(transformerDefinition, responseBody); \n.\n.\n.\n\nif (transformerDefinition.validate()) {\n\n  var results = []; \n  while (transformer.transform()) { \n    results.push(transformer.getRow());\n  }\n}",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "Flag that indicates whether a valid TransformerRuleList is associated with the\n                specified TransformerDefintion object.<p class=\"p\">Valid values:</p>\n<ul class=\"ul\" id=\"TRD-validate__ul_d4k_wgy_qhb\">\n                  <li class=\"li\">true: Valid TransformerRuleList associated</li>\n\n                  <li class=\"li\">false: Invalid or no TransformerRulList associated</li>\n\n                </ul>"
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "The <span class=\"keyword apiname\">TransformerRuleList</span> API works along with the\n        <span class=\"keyword apiname\">Transformer</span> and <span class=\"keyword apiname\">TransformerDefinition</span> APIs. <span class=\"ph\">Together, these APIs transform XML nodes or\n                any entity in a structured JSON document into an output of name-value pairs.\n                Supported JSON entities including objects and elements within an array, such as\n                strings, numbers, and other arrays.</span><br/><br/><ul class=\"ul\" id=\"TransformerRuleListAPI__ul_odh_ghv_bkb\">\n        <li class=\"li\">\n          <p class=\"p\">The\n                  <span class=\"keyword apiname\">TransformerRuleList</span> API enables you to create transformation\n                rule lists that define what data in the source document to include in the output and\n                how to transform the source data.</p>\n\n        </li>\n\n        <li class=\"li\">\n          <p class=\"p\">The\n                  <span class=\"keyword apiname\">TransformerDefinition</span> API associates a transformation rule list\n                with a JSON/XML record path to define reusable transform definition objects. You can\n                use a transform definition object to transform one or more source documents.</p>\n\n        </li>\n\n        <li class=\"li\">\n          <p class=\"p\">The <span class=\"keyword apiname\">Transformer</span> API performs\n                the actual data transformation, one data entity at a time, using the specified\n                transformation rule list to create the desired output data.</p>\n\n        </li>\n\n      </ul><br/><br/>When you instantiate the <span class=\"keyword apiname\">TransformRuleList</span> object, you must define whether\n      it describes a JSON or XML source document using the <span class=\"keyword apiname\">.fromJSON()</span> or\n        <span class=\"keyword apiname\">.fromXML()</span> methods. For example:<br/><br/><samp class=\"ph codeph\">var trl = sn_tfrm.TransformerRuleList().fromJSON();</samp> or <samp class=\"ph codeph\">var trl =\n        sn_tfrm.TransformerRuleList().fromXML();</samp><br/><br/>Then use the <span class=\"keyword apiname\">addRule()</span> method to define a transformation rule for each\n      element in the source document that you want to include as a name-value pair in the\n      output.<br/><br/>Use \"adapter methods\", such as <span class=\"keyword apiname\">setName()</span> or <span class=\"keyword apiname\">thenAdd()</span>,\n      to define how to manipulate data elements when the transformation is performed. Adapter\n      methods work along with the <span class=\"keyword apiname\">addRule()</span> method. They define adaptations to\n      apply to the output field defined by the <span class=\"keyword apiname\">addRule()</span> method such as\n      formatting, rounding, and applying patterns. You can apply one or more adapter methods to each\n      data transformation. Adapter methods enable you to do things such as:<ul class=\"ul\" id=\"TransformerRuleListAPI__ul_nrx_yvv_phb\">\n        <li class=\"li\">Concatenate text.</li>\n\n        <li class=\"li\">Perform mathematical functions, such as add, subtract, divide, and multiply.</li>\n\n        <li class=\"li\">Round values up or down (round up/down, ceiling/floor).</li>\n\n        <li class=\"li\">Define whether to use the minimum or maximum value when comparing a source data element\n          to a specified value.</li>\n\n        <li class=\"li\">Apply a currency code.</li>\n\n        <li class=\"li\">Convert between different units of measure.</li>\n\n        <li class=\"li\">Format data elements.</li>\n\n        <li class=\"li\">Apply patterns.</li>\n\n        <li class=\"li\">Replace specified data elements with a specified value.</li>\n\n        <li class=\"li\">Split and rearrange strings.</li>\n\n      </ul><br/><br/>You can use the <span class=\"keyword apiname\">TransformerRuleList</span> class in both scoped and global server\n      scripts. When using this class, use the <span class=\"keyword parmname\">sn_tfrm</span> namespace identifier.\n      Also, before this API is available in an instance, you must activate the Transformation\n      Service plugin (com.glide.transform).",
                "short_description": "Enables you to create a list of rules for transforming various types of JSON and XML\n    data into name-value pair output.",
                "identifier": "TransformerRuleListAPI",
                "name": "TransformerRuleList - Scoped, Global",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "TRL-addRule_S_S",
                        "short_description": "Creates an entry in the associated transformation rules list which defines a field to\n    create in the output.",
                        "description": "<p>You can create rules for any element in a source document. For example,\n          <samp class=\"ph codeph\">.addRule('ticker', '$.quote.symbol')</samp> creates the field \"ticker\" in the\n        output and copies over the value in quote.symbol of the source.</p><p>Once you define a rule using <span class=\"keyword apiname\">addRule()</span>, you then use adaptor methods,\n        such as <span class=\"keyword apiname\">thenAdd()</span>, <span class=\"keyword apiname\">thenReplace()</span>, and\n          <span class=\"keyword apiname\">thenFloor()</span> to manipulate the rule's output data. You can define as\n        many adaptor methods as needed for a single rule. All adapter methods directly after an\n          <span class=\"keyword apiname\">addRule()</span> call, until the next <span class=\"keyword apiname\">addRule()</span> call, apply\n        to that rule. Adapter methods are cumulative with the result of all adapter methods being\n        the final value saved in the output field.</p><p>For example, in the following code snippet, <span class=\"keyword apiname\">thenMultiply()</span> and\n          <span class=\"keyword apiname\">thenRoundDown()</span> apply to <span class=\"keyword apiname\">addRule('change_percentage',\n          '$.quote.changePercent')</span>; <span class=\"keyword apiname\">addRule('close_price',\n          '$.quote.close')</span> starts a new rule. If the value in\n          <span class=\"keyword parmname\">$.quote.changePercent</span> is .011, then the final output value is \"1\" (\n        .011 * 100 rounded down to the ones position).</p><p><pre class=\"pre codeblock\">\n  .addRule('change_percentage', '$.quote.changePercent') \n  .thenMultiply('100') \n  .thenRoundDown('0') \n  .addRule('close_price', '$.quote.close') </pre></p><p>The <span class=\"keyword apiname\">addRule()</span> method also supports the parameter\n          <span class=\"keyword parmname\">summary</span>; <samp class=\"ph codeph\">.addRule('summary')</samp>. This implementation\n        creates the name field \"summary:\" in the output, but does not correlate it to any field in\n        the source. You can then use the adaptor methods <span class=\"keyword apiname\">thenConcat()</span> and\n          <span class=\"keyword apiname\">thenConcatSymbol()</span> to modify the contents of the summary field.</p>",
                        "name": "addRule(String rule, String path)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var transformerRuleList = new sn_tfrm.TransformerRuleList()\n  .fromJSON()\n  .setName('Stock Report 05022019 JSON')\n  .addRule('ticker', '$.quote.symbol') \n  .addRule('change_percentage', '$.quote.changePercent') \n  .thenMultiply('100') \n  .thenRoundDown('0') \n  .addRule('close_price', '$.quote.close') \n  .thenAdaptCurrency('USD', false) \n  .addRule('summary') \n  .thenConcat('Shares of ') \n  .thenConcatSymbol('ticker') \n  .thenConcat(' closed at ') \n  .thenConcatSymbol('close_price'); \n",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "rule",
                                "type": "String",
                                "description": "Name of the element in the destination output."
                            },
                            {
                                "name": "path",
                                "type": "String",
                                "description": "Optional. JSONPath or XPath to the data element in the source document.<p class=\"p\">The\n                  adapter methods <span class=\"keyword apiname\">thenConcat()</span> and\n                    <span class=\"keyword apiname\">thenConcatSymbol()</span> do not require you to define this\n                  parameter if no other adapter methods are defined for the rule. All other adapter\n                  methods require this parameter.</p>"
                            }
                        ],
                        "return": {
                            "type": "Object",
                            "description": "Current TransformerRuleList object."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "TRL-setName_S",
                        "short_description": "Defines a name for the associated TransformerRuleList object for logging\n    purposes.",
                        "description": "",
                        "name": "setName(String name)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var transformerRuleList = new sn_tfrm.TransformerRuleList()\n  .fromJSON()\n  .setName('Stock Report 05022019 JSON')\n  .addRule('ticker', '$.quote.symbol') \n  .addRule('change_percentage', '$.quote.changePercent') \n  .thenMultiply('100') \n  .thenRoundDown('0') \n  .addRule('close_price', '$.quote.close') \n  .thenAdaptCurrency('USD', false) \n  .addRule('summary') \n  .thenConcat('Shares of ') \n  .thenConcatSymbol('ticker') \n  .thenConcat(' closed at ') \n  .thenConcatSymbol('close_price'); \n",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "name",
                                "type": "String",
                                "description": "Name to use to identify the associated TransformerRuleList object. <p class=\"p\">Although\n                  the API does not force this name to be unique, it is helpful if they are unique\n                  within an instance.</p>"
                            }
                        ],
                        "return": {
                            "type": "Object",
                            "description": "Current TransformerRuleList object."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "TRL-thenAdaptCurrency_S_B",
                        "short_description": "Adds an adapter to the current rule that ties the specified currency code to the output\n    field defined in the associated <span class=\"keyword apiname\">addRule()</span> call.",
                        "description": "<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This is an adapter method and cannot be used on its own. Adapter methods work\n                  in conjunction with the<span class=\"keyword apiname\">addRule()</span> method. They define\n                  adaptations to apply to the output field defined by the\n                    <span class=\"keyword apiname\">addRule()</span> method such as formatting, rounding, and applying\n                  patterns.</div></p>",
                        "name": "thenAdaptCurrency(String currencyCode, Boolean outputNumericCurrencyValue)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var transformerRuleList = new sn_tfrm.TransformerRuleList()\n  .fromJSON()\n  .setName('Stock Report 05022019 JSON')\n  .addRule('ticker', '$.quote.symbol') \n  .addRule('change_percentage', '$.quote.changePercent') \n  .thenMultiply('100') \n  .thenRoundDown('0') \n  .addRule('close_price', '$.quote.close') \n  .thenAdaptCurrency('USD', false) \n  .addRule('summary') \n  .thenConcat('Shares of ') \n  .thenConcatSymbol('ticker') \n  .thenConcat(' closed at ') \n  .thenConcatSymbol('close_price'); \n",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "currencyCode",
                                "type": "String",
                                "description": "Currency code to tie to the destination data element, such as USD, EUR, and\n                GBP."
                            },
                            {
                                "name": "outputNumericCurrencyValue",
                                "type": "Boolean",
                                "description": "Optional. Flag that indicates whether to display the currency code.<p class=\"p\">Valid\n                  values:</p>\n<ul class=\"ul\" id=\"TRL-thenAdaptCurrency_S_B__ul_djt_wlw_qhb\">\n                  <li class=\"li\">true: do not display the country code; numeric value only</li>\n\n                  <li class=\"li\">false: display the country code</li>\n\n                </ul>\n<p class=\"p\">Default: false</p>"
                            }
                        ],
                        "return": {
                            "type": "Object",
                            "description": "Current TransformerRuleList object."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "TRL-thenAdaptDuration_S_S",
                        "short_description": "Adds an adapter to the current rule that converts the source field from one unit of\n    measure to another, such as from minutes to seconds or weeks to days.",
                        "description": "<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This is an adapter method and cannot be used on its own. Adapter methods work\n                  in conjunction with the<span class=\"keyword apiname\">addRule()</span> method. They define\n                  adaptations to apply to the output field defined by the\n                    <span class=\"keyword apiname\">addRule()</span> method such as formatting, rounding, and applying\n                  patterns.</div></p>",
                        "name": "thenAdaptDuration(String inputDuration, String outputDuration)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var transformerRuleList = new sn_tfrm.TransformerRuleList()\n  .fromJSON()\n  .setName('Stock Report 05022019 JSON')\n  .addRule('ticker', '$.quote.symbol') \n  .addRule('change_percentage', '$.quote.changePercent') \n  .thenMultiply('100') \n  .thenRoundDown('0') \n  .addRule('close_price', '$.quote.close') \n  .thenAdaptCurrency('USD', false) \n  .addRule('daily', '$.quote.weekly') \n  .thenAdaptDuration('WEEK', 'DAY'); \n",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "inputDuration",
                                "type": "String",
                                "description": "Current unit of measure of the source field.<p class=\"p\">Valid values:</p>\n<ul class=\"ul\" id=\"TRL-thenAdaptDuration_S_S__ul_nwd_nnw_qhb\">\n                  <li class=\"li\">NANOSECOND</li>\n\n                  <li class=\"li\">MICROSECOND</li>\n\n                  <li class=\"li\">MILLISECOND</li>\n\n                  <li class=\"li\">SECOND</li>\n\n                  <li class=\"li\">MINUTE</li>\n\n                  <li class=\"li\">HOUR</li>\n\n                  <li class=\"li\">DAY</li>\n\n                  <li class=\"li\">WEEK</li>\n\n                </ul>"
                            },
                            {
                                "name": "outputDuration",
                                "type": "String",
                                "description": "Unit of measure to convert the source field to in the output.<p class=\"p\">Valid\n                  values:</p>\n<ul class=\"ul\" id=\"TRL-thenAdaptDuration_S_S__ul_aly_tnw_qhb\">\n                  <li class=\"li\">NANOSECOND</li>\n\n                  <li class=\"li\">MICROSECOND</li>\n\n                  <li class=\"li\">MILLISECOND</li>\n\n                  <li class=\"li\">SECOND</li>\n\n                  <li class=\"li\">MINUTE</li>\n\n                  <li class=\"li\">HOUR</li>\n\n                  <li class=\"li\">DAY</li>\n\n                  <li class=\"li\">WEEK</li>\n\n                </ul>"
                            }
                        ],
                        "return": {
                            "type": "Object",
                            "description": "Current TransformerRuleList object."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "TRL-thenAdd_N",
                        "short_description": "Adds an adapter to the current rule that adds the passed in value to the source\n    field.",
                        "description": "<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This is an adapter method and cannot be used on its own. Adapter methods work\n                  in conjunction with the<span class=\"keyword apiname\">addRule()</span> method. They define\n                  adaptations to apply to the output field defined by the\n                    <span class=\"keyword apiname\">addRule()</span> method such as formatting, rounding, and applying\n                  patterns.</div></p>",
                        "name": "thenAdd(Number operand)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var transformerRuleList = new sn_tfrm.TransformerRuleList.fromJSON()\n  .setName('Stock Report 05182019 JSON')\n  .addSymbol('ticker', '$.symbol') \n  .addSymbol('change_percentage', '$.changePercent') \n  .thenMultiply('100') \n  .thenRoundDown('0') \n  .addSymbol('trade_price', '$.current_price')\n  .thenAdaptCurrency('USD', false) \n  .addMultiply('$.trade_quantity')\n  .thenAdd('4.5'); \n",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "operand",
                                "type": "Number",
                                "description": "Value to add to the source field."
                            }
                        ],
                        "return": {
                            "type": "Object",
                            "description": "Current TransformerRuleList object."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "TRL-thenApplyMap_O",
                        "short_description": "Adds an adapter to the current rule that searches the associated source field for a\n    list of strings and replaces them in the output with the specified replacement\n    values.",
                        "description": "<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This is an adapter method and cannot be used on its own. Adapter methods work\n                  in conjunction with the<span class=\"keyword apiname\">addRule()</span> method. They define\n                  adaptations to apply to the output field defined by the\n                    <span class=\"keyword apiname\">addRule()</span> method such as formatting, rounding, and applying\n                  patterns.</div></p>",
                        "name": "thenApplyMap(Object map)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var transformerRuleList = new sn_tfrm.TransformerRuleList()\n  .fromJSON()\n  .setName('Stock Report 05022019 JSON')\n  .addRule('ticker', '$.quote.symbol') \n  .addRule('change_percentage', '$.quote.changePercent') \n  .thenMultiply('100') \n  .thenRoundDown('0') \n  .addRule('close_price', '$.quote.close') \n  .thenAdaptCurrency('USD', false) \n  .addRule('company_info', '$.quote.company_info') \n  .thenApplyMap({'Inc.': 'Incorporated', 'St.': 'Street'});\n",
                                "description": "In this example, the <span class=\"keyword apiname\">thenApplyMap()</span> call searches the source text in the\n        company_info field for Inc. and St. and replaces them with Incorporated and Street in the\n        company_info field in the output."
                            }
                        ],
                        "params": [
                            {
                                "name": "map",
                                "type": "Object",
                                "description": "Name/value pairs.<ul class=\"ul\" id=\"TRL-thenApplyMap_O__ul_vtw_jbz_qhb\">\n                  <li class=\"li\">name: text to locate in the source data element</li>\n\n                  \n                  <li class=\"li\">value: text to replace it with in the output</li>\n\n                </ul>"
                            }
                        ],
                        "return": {
                            "type": "Object",
                            "description": "Current TransformerRuleList object."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "TRL-thenApplyPattern_S_S",
                        "short_description": "Adds an adapter to the current rule that matches a specified regex pattern to content\n    in the source field and then replaces/reformats that content with a second regex pattern and\n    stores that value in the output.",
                        "description": "<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This is an adapter method and cannot be used on its own. Adapter methods work\n                  in conjunction with the<span class=\"keyword apiname\">addRule()</span> method. They define\n                  adaptations to apply to the output field defined by the\n                    <span class=\"keyword apiname\">addRule()</span> method such as formatting, rounding, and applying\n                  patterns.</div></p>",
                        "name": "thenApplyPattern(String matchPattern, String outputPattern",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var transformerRuleList = new sn_tfrm.TransformerRuleList()\n  .fromJSON()\n  .setName('Stock Report 05022019 JSON')\n  .addRule('ticker', '$.quote.symbol') \n  .addRule('change_percentage', '$.quote.changePercent') \n  .thenMultiply('100') \n  .thenRoundDown('0') \n  .addRule('close_price', '$.quote.close') \n  .thenAdaptCurrency('USD', false) \n  .addRule('company', '$.quote.company') \n  .thenApplyPattern('(.+)(\\\\w{3}\\\\.)', '$1Incorporated');\n",
                                "description": "In this example, any company name that ends with \"Inc.\" is transformed to \"Incorporated\",\n        such as Company Inc. to Company Incorporated."
                            }
                        ],
                        "params": [
                            {
                                "name": "matchPattern",
                                "type": "String",
                                "description": "Regex pattern to use to locate the text to replace/reformat."
                            },
                            {
                                "name": "outputPattern",
                                "type": "String",
                                "description": "Regex pattern to use to update the located text."
                            }
                        ],
                        "return": {
                            "type": "Object",
                            "description": "Current TransformerRuleList object."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "TRL-thenCeiling_N",
                        "short_description": "Adds an action to the current rule to round the source field up at the decimal position\n    specified by the passed in value.",
                        "description": "<p>Unlike straight rounding where the number is rounded based on the value of the digit in the\n        specified decimal position (0-4 round down, 5-9 round up), ceiling always rounds up. For\n        example, the ceiling value for 2.156 and 2.152 is always 2.16 for the passed in decimal\n        position of 2; whereas for straight rounding the values would be 2.16 and 2.15 respectively.\n        For negative numbers, the ceiling operation makes the number more positive, as in the\n        ceiling value of -2.156 is -2.15; whereas the same number rounded up makes the value more\n        negative, -2.16.</p><p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This is an adapter method and cannot be used on its own. Adapter methods work\n                  in conjunction with the<span class=\"keyword apiname\">addRule()</span> method. They define\n                  adaptations to apply to the output field defined by the\n                    <span class=\"keyword apiname\">addRule()</span> method such as formatting, rounding, and applying\n                  patterns.</div></p>",
                        "name": "thenCeiling(Number operand)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var transformerRuleList = new sn_tfrm.TransformerRuleList()\n  .fromJSON()\n  .setName('Mortgage Rates 05022019 JSON')\n  .addRule('interest_rate', '$.quote.interest_rate') \n  .thenCeiling('2') // Always round the interest rate up to the hundredths place \n  .addRule('monthly_payment', '$.quote.total_loan_amount') \n  .thenDivideBy('180'); \n",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "operand",
                                "type": "Number",
                                "description": "Decimal position to the right of the decimal point at which to round the number\n                up (apply ceiling). <p class=\"p\">For example, if this value is 2 and the source data element\n                  is 6.421, the resulting value is 6.43.</p>"
                            }
                        ],
                        "return": {
                            "type": "Object",
                            "description": "Current TransformerRuleList object."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "TRL-thenConcat_S",
                        "short_description": "Adds an adapter to the current rule that concatenates the passed in string to the\n    output field.",
                        "description": "<p>Unlike other adapter methods, this method does not have to be applied to a source field.\n        You can use this method to create completely new data strings in the output.</p><p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This is an adapter method and cannot be used on its own. Adapter methods work\n                  in conjunction with the<span class=\"keyword apiname\">addRule()</span> method. They define\n                  adaptations to apply to the output field defined by the\n                    <span class=\"keyword apiname\">addRule()</span> method such as formatting, rounding, and applying\n                  patterns.</div></p>",
                        "name": "thenConcat(String value)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var transformerRuleList = new sn_tfrm.TransformerRuleList()\n  .fromJSON()\n  .setName('Stock Report 05022019 JSON')\n  .addRule('ticker', '$.quote.symbol') \n  .addRule('change_percentage', '$.quote.changePercent') \n  .thenMultiply('100') \n  .thenRoundDown('0') \n  .addRule('close_price', '$.quote.close') \n  .thenAdaptCurrency('USD', false) \n  .addRule('summary') \n  .thenConcat('Shares of ') \n  .thenConcatSymbol('ticker') \n  .thenConcat(' closed at ') \n  .thenConcatSymbol('close_price'); \n",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "value",
                                "type": "String",
                                "description": "Text to concatenate to the end of the current data element."
                            }
                        ],
                        "return": {
                            "type": "Object",
                            "description": "Current TransformerRuleList object."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "TRL-thenConcatSymbol_S",
                        "short_description": "Adds an adapter to the current rule that concatenates the value of a field previously\n    defined in the rules list to the current output field.",
                        "description": "<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This is an adapter method and cannot be used on its own. Adapter methods work\n                  in conjunction with the<span class=\"keyword apiname\">addRule()</span> method. They define\n                  adaptations to apply to the output field defined by the\n                    <span class=\"keyword apiname\">addRule()</span> method such as formatting, rounding, and applying\n                  patterns.</div></p>",
                        "name": "thenConcatSymbol(String symbol)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var transformerRuleList = new sn_tfrm.TransformerRuleList()\n  .fromJSON()\n  .setName('Stock Report 05022019 JSON')\n  .addRule('ticker', '$.quote.symbol') \n  .addRule('change_percentage', '$.quote.changePercent') \n  .thenMultiply('100') \n  .thenRoundDown('0') \n  .addRule('close_price', '$.quote.close') \n  .thenAdaptCurrency('USD', false) \n  .addRule('summary') \n  .thenConcat('Shares of ') \n  .thenConcatSymbol('ticker') \n  .thenConcat(' closed at ') \n  .thenConcatSymbol('close_price'); \n",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "symbol",
                                "type": "String",
                                "description": "Name of the rules list element to append to the output field."
                            }
                        ],
                        "return": {
                            "type": "Object",
                            "description": "Current TransformerRuleList object."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "TRL-thenDivideBy_N",
                        "short_description": "Adds an adapter to the current rule that divides the source field by the passed in\n    value.",
                        "description": "<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This is an adapter method and cannot be used on its own. Adapter methods work\n                  in conjunction with the<span class=\"keyword apiname\">addRule()</span> method. They define\n                  adaptations to apply to the output field defined by the\n                    <span class=\"keyword apiname\">addRule()</span> method such as formatting, rounding, and applying\n                  patterns.</div></p>",
                        "name": "thenDivideBy(Number operand)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var transformerRuleList = new sn_tfrm.TransformerRuleList()\n  .fromJSON()\n  .setName('Stock Report 05022019 JSON')\n  .addRule('ticker', '$.quote.symbol') \n  .addRule('change_percentage', '$.quote.changePercent') \n  .thenMultiply('100') \n  .thenRoundDown('0') \n  .addRule('dividend_per_share', '$.quote.total_dividend') \n  .thenDivideBy('$.quote.total_shares'); \n",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "operand",
                                "type": "Number",
                                "description": "Value by which to divide the source field."
                            }
                        ],
                        "return": {
                            "type": "Object",
                            "description": "Current TransformerRuleList object."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "TRL-thenDivideInto_N",
                        "short_description": "Adds an adapter to the current rule that divides the passed in value by the source\n    field.",
                        "description": "<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This is an adapter method and cannot be used on its own. Adapter methods work\n                  in conjunction with the<span class=\"keyword apiname\">addRule()</span> method. They define\n                  adaptations to apply to the output field defined by the\n                    <span class=\"keyword apiname\">addRule()</span> method such as formatting, rounding, and applying\n                  patterns.</div></p>",
                        "name": "thenDivideInto(Number operand)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var transformerRuleList = new sn_tfrm.TransformerRuleList()\n  .fromJSON()\n  .setName('Stock Report 05022019 JSON')\n  .addRule('ticker', '$.quote.symbol') \n  .addRule('change_percentage', '$.quote.changePercent') \n  .thenMultiply('100') \n  .thenRoundDown('0') \n  .addRule('dividend_per_share', '$.quote.total_shares') \n  .thenDivideInto('$.quote.total_dividends'); \n",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "operand",
                                "type": "Number",
                                "description": "Value into which to divide the source field."
                            }
                        ],
                        "return": {
                            "type": "Object",
                            "description": "Current TransformerRuleList object."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "TRL-thenFloor_N",
                        "short_description": "Adds an adapter to the current rule that rounds the source field down at the decimal\n    position specified by the passed in value and stores it in the output.",
                        "description": "<p>Unlike straight rounding where the number is rounded based on the value of the digit in the\n        specified decimal position (0-4 round down, 5-9 round up), floor always rounds down. For\n        example, the floor value for 2.156 and 2.152 is always 2.15 for the passed in decimal\n        position of 2; whereas for straight rounding the values would be 2.16 and 2.15 respectively.\n        For negative numbers, the floor operation makes the number more negative, as in the floor\n        value of -2.156 is -2.16; whereas the same number rounded down makes the value more\n        positive, -2.15.</p><p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This is an adapter method and cannot be used on its own. Adapter methods work\n                  in conjunction with the<span class=\"keyword apiname\">addRule()</span> method. They define\n                  adaptations to apply to the output field defined by the\n                    <span class=\"keyword apiname\">addRule()</span> method such as formatting, rounding, and applying\n                  patterns.</div></p>",
                        "name": "thenFloor(Number operand)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var transformerRuleList = new sn_tfrm.TransformerRuleList()\n  .fromJSON()\n  .setName('Mortgage Rates 05022019 JSON')\n  .addRule('interest_rate', '$.quote.interest_rate') \n  .thenFloor('2') // Always round the interest rate down to the hundreths place \n  .addRule('monthly_payment', '$.quote.total_loan_amount') \n  .thenDivideBy('180'); \n",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "operand",
                                "type": "Number",
                                "description": "Decimal position to the right of the decimal point at which to round the number\n                down (apply floor). <p class=\"p\">For example, if this value is 2 and the source data element\n                  is 6.427, the resulting value is 6.42.</p>"
                            }
                        ],
                        "return": {
                            "type": "Object",
                            "description": "Current TransformerRuleList object."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "TRL-thenFormat_S_S",
                        "short_description": "Adds an adapter to the current rule that reformats the content in the source field that\n    matches the specified match pattern, with the specified output pattern.",
                        "description": "<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This is an adapter method and cannot be used on its own. Adapter methods work\n                  in conjunction with the<span class=\"keyword apiname\">addRule()</span> method. They define\n                  adaptations to apply to the output field defined by the\n                    <span class=\"keyword apiname\">addRule()</span> method such as formatting, rounding, and applying\n                  patterns.</div></p>",
                        "name": "thenFormat(String matchPattern, String outputPattern)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var transformerRuleList = new sn_tfrm.TransformerRuleList()\n  .fromJSON()\n  .setName('Stock Report 05022019 JSON')\n  .addRule('ticker', '$.quote.symbol') \n  .addRule('change_percentage', '$.quote.changePercent') \n  .thenMultiply('100') \n  .thenRoundDown('0') \n  .addRule('close_price', '$.quote.close') \n  .thenAdaptCurrency('USD', false) \n  .addRule('date', '$.quote.date') \n  .thenFormat('####/##/##', '#### ##-##'); \n",
                                "description": "This example reformats the quote date from YYYY/MM/DD to YYYY MM-DD."
                            }
                        ],
                        "params": [
                            {
                                "name": "matchPattern",
                                "type": "String",
                                "description": "Pattern to match against the source field.<p class=\"p\">Valid values:</p>\n<ul class=\"ul\" id=\"TRL-thenFormat_S_S__ul_zyx_p5w_qhb\">\n                  <li class=\"li\">@: any character</li>\n\n                  <li class=\"li\">#: decimal digit</li>\n\n                  <li class=\"li\">\\: literal escape (\\@ for the @ symbol)</li>\n\n                </ul>"
                            },
                            {
                                "name": "outputPattern",
                                "type": "String",
                                "description": "Pattern to replace the content with in the output.<p class=\"p\">Valid values:</p>\n<ul class=\"ul\" id=\"TRL-thenFormat_S_S__ul_nth_jvw_qhb\">\n                  <li class=\"li\">@: any character</li>\n\n                  <li class=\"li\">#: decimal digit</li>\n\n                  <li class=\"li\">\\: literal escape (\\@ for the @ symbol)</li>\n\n                </ul>"
                            }
                        ],
                        "return": {
                            "type": "Object",
                            "description": "Current TransformerRuleList object."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "TRL-thenMax_N",
                        "short_description": "Adds an adapter to the current rule that compares the passed in value against the\n    source field and copies the greater of the two values to the output field.",
                        "description": "<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This is an adapter method and cannot be used on its own. Adapter methods work\n                  in conjunction with the<span class=\"keyword apiname\">addRule()</span> method. They define\n                  adaptations to apply to the output field defined by the\n                    <span class=\"keyword apiname\">addRule()</span> method such as formatting, rounding, and applying\n                  patterns.</div></p>",
                        "name": "thenMax(Number operand)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var transformerRuleList = new sn_tfrm.TransformerRuleList()\n  .fromJSON()\n  .setName('Mortgage Rates 05022019 JSON')\n  .addRule('lowest_interest_rate', '$.quote.interest_rate') \n  .thenMax('3.5') // Interest rate cannot be less than 3.5%\n  .addRule('dividend_per_share', '$.quote.total_shares') \n  .thenDivideInto('$.quote.total_dividends'); \n",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "operand",
                                "type": "Number",
                                "description": "Value to compare to the source field."
                            }
                        ],
                        "return": {
                            "type": "Object",
                            "description": "Current TransformerRuleList object."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "TRL-thenMin_N",
                        "short_description": "Adds an adapter to the current rule that compares the passed in value against the\n    source field and copies the lower of the two values to the output field.",
                        "description": "<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This is an adapter method and cannot be used on its own. Adapter methods work\n                  in conjunction with the<span class=\"keyword apiname\">addRule()</span> method. They define\n                  adaptations to apply to the output field defined by the\n                    <span class=\"keyword apiname\">addRule()</span> method such as formatting, rounding, and applying\n                  patterns.</div></p>",
                        "name": "thenMin(Number operand)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var transformerRuleList = new sn_tfrm.TransformerRuleList()\n  .fromJSON()\n  .setName('Stock Report 05022019 JSON')\n  .addSymbol('broker_fee_percentage', '$.quote.broker_fee') \n  .thenMin('10') // Maximum of 10% broker fee\n  .addSymbol('dividend_per_share', '$.quote.total_shares') \n  .thenDivideInto('$.quote.total_dividends'); \n",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "operand",
                                "type": "Number",
                                "description": "Value to compare to the source field."
                            }
                        ],
                        "return": {
                            "type": "Object",
                            "description": "Current TransformerRuleList object."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "TRL-thenMultiply_N",
                        "short_description": "Adds an adapter to the current rule that multiplies the source field by the passed in\n    value.",
                        "description": "<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This is an adapter method and cannot be used on its own. Adapter methods work\n                  in conjunction with the<span class=\"keyword apiname\">addRule()</span> method. They define\n                  adaptations to apply to the output field defined by the\n                    <span class=\"keyword apiname\">addRule()</span> method such as formatting, rounding, and applying\n                  patterns.</div></p>",
                        "name": "thenMultiply(Number operand)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var transformerRuleList = new sn_tfrm.TransformerRuleList()\n  .fromJSON()\n  .setName('Stock Report 05022019 JSON')\n  .addRule('ticker', '$.quote.symbol') \n  .addRule('change_percentage', '$.quote.changePercent') \n  .thenMultiply('100') \n  .thenRoundDown('0') \n  .addRule('close_price', '$.quote.close') \n  .thenAdaptCurrency('USD', false) \n  .addRule('summary') \n  .thenConcat('Shares of ') \n  .thenConcatSymbol('ticker') \n  .thenConcat(' closed at ') \n  .thenConcatSymbol('close_price'); \n",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "operand",
                                "type": "Number",
                                "description": "Value by which to multiply the source field."
                            }
                        ],
                        "return": {
                            "type": "Object",
                            "description": "Current TransformerRuleList object."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "TRL-thenReplace_S_S",
                        "short_description": "Adds an adapter to the current rule that finds all text within the source field that\n    matches a specified string and replaces it with an updated string.",
                        "description": "<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This is an adapter method and cannot be used on its own. Adapter methods work\n                  in conjunction with the<span class=\"keyword apiname\">addRule()</span> method. They define\n                  adaptations to apply to the output field defined by the\n                    <span class=\"keyword apiname\">addRule()</span> method such as formatting, rounding, and applying\n                  patterns.</div></p>",
                        "name": "thenReplace(String matchString, String replaceString)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var transformerRuleList = new sn_tfrm.TransformerRuleList()\n  .fromJSON()\n  .setName('Stock Report 05022019 JSON')\n  .addRule('ticker', '$.quote.symbol') \n  .addRule('change_percentage', '$.quote.changePercent') \n  .thenMultiply('100') \n  .thenRoundDown('0') \n  .addRule('close_price', '$.quote.close') \n  .thenAdaptCurrency('USD', false) \n  .addRule('company', '$.quote.company') \n  .thenReplace('Inc.', 'Incorporated');\n",
                                "description": "In this example, any company name that ends with \"Inc.\" is transformed to \"Incorporated\",\n        such as Company Inc. to Company Incorporated."
                            }
                        ],
                        "params": [
                            {
                                "name": "matchString",
                                "type": "String",
                                "description": "String to match against the source field to identify the text to\n                replace."
                            },
                            {
                                "name": "replaceString",
                                "type": "String",
                                "description": "String with which to replace the matching text."
                            }
                        ],
                        "return": {
                            "type": "Object",
                            "description": "Current TransformerRuleList object."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "TRL-thenRoundUp_N",
                        "short_description": "Adds an adapter to the current rule that rounds the source data element up at the\n    decimal position specified by the passed in value.",
                        "description": "<p>For negative numbers, the <span class=\"keyword apiname\">thenRoundUp()</span> method makes the number more\n        negative; the round up value of -2.156 is -2.16. The <span class=\"keyword apiname\">thenCeiling()</span> method\n        makes the same number more positive, -2.15.</p><p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This is an adapter method and cannot be used on its own. Adapter methods work\n                  in conjunction with the<span class=\"keyword apiname\">addRule()</span> method. They define\n                  adaptations to apply to the output field defined by the\n                    <span class=\"keyword apiname\">addRule()</span> method such as formatting, rounding, and applying\n                  patterns.</div></p>",
                        "name": "thenRound Up(Number operand)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var transformerRuleList = new sn_tfrm.TransformerRuleList()\n  .fromJSON()\n  .setName('Mortgage Rates 05022019 JSON')\n  .addRule('interest_rate', '$.quote.interest_rate') \n  .thenRoundUp('2') // Always round the interest rate up to the hundredths place \n  .addRule('monthly_payment', '$.quote.total_loan_amount') \n  .thenDivideBy('180'); \n",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "operand",
                                "type": "Number",
                                "description": "Decimal position to the right of the decimal point at which to round the number\n                up. <p class=\"p\">For example, if this value is 2 and the source data element is 6.422, the\n                  resulting value is 6.43.</p>"
                            }
                        ],
                        "return": {
                            "type": "Object",
                            "description": "Current TransformerRuleList object."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "TRL-thenRoundDown_N",
                        "short_description": "Adds an adapter to the current rule that rounds the source field down at the decimal\n    position specified by the passed in value.",
                        "description": "<p>For negative numbers, the <span class=\"keyword apiname\">thenRoundDown()</span> method makes the number more\n        positive; the round down value of -2.156 is -2.15. The <span class=\"keyword apiname\">thenFloor()</span> method\n        makes the same number more negative, -2.16.</p><p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This is an adapter method and cannot be used on its own. Adapter methods work\n                  in conjunction with the<span class=\"keyword apiname\">addRule()</span> method. They define\n                  adaptations to apply to the output field defined by the\n                    <span class=\"keyword apiname\">addRule()</span> method such as formatting, rounding, and applying\n                  patterns.</div></p>",
                        "name": "thenRoundDown(Number operand)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var transformerRuleList = new sn_tfrm.TransformerRuleList90\n  .fromJSON()\n  .setName('Mortgage Rates 05022019 JSON')\n  .addRule('interest_rate', '$.quote.interest_rate') \n  .thenRoundDown('2') // Always round the interest rate down to the hundredths place \n  .addRule('monthly_payment', '$.quote.total_loan_amount') \n  .thenDivideBy('180'); \n",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "operand",
                                "type": "Number",
                                "description": "Decimal position to the right of the decimal point at which to round the number\n                down. <p class=\"p\">For example, if this value is 2 and the source data element is 6.427, the\n                  resulting value is 6.42.</p>"
                            }
                        ],
                        "return": {
                            "type": "Object",
                            "description": "Current TransformerRuleList object."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "TRL-thenSplit_S_S",
                        "short_description": "Adds an adapter to the current rule that splits, reorganizes, and replaces strings\n    within the source field and saves them in the output field.",
                        "description": "<p>The <span class=\"keyword parmname\">splitPattern</span> parameter denotes how to divide the source text\n        string into segments. This parameter can be a typical word separator such as a space (' '),\n        comma (','), or semicolon (';'), and can also be any string, such as 'name'. For example, if\n        the source text is \"Smith John Michael\" and the <span class=\"keyword parmname\">splitPattern</span> is a\n        space, then the available segments are \"Smith\", \"John\", and \"Michael\". To reference a\n        segment, use $#, where # is the number of the order of the segment in the source text\n        string. For example, if the method call is <samp class=\"ph codeph\">thenSplit(' ', '$2 $3 $1')</samp>, then\n        the output is \"John Michael Smith\". In addition, you can add constants within the output\n        pattern, such as <samp class=\"ph codeph\">thenSplit(' ', 'First name: $2 Middle name: $3 Last name:\n          $1')</samp>.</p><p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This is an adapter method and cannot be used on its own. Adapter methods work\n                  in conjunction with the<span class=\"keyword apiname\">addRule()</span> method. They define\n                  adaptations to apply to the output field defined by the\n                    <span class=\"keyword apiname\">addRule()</span> method such as formatting, rounding, and applying\n                  patterns.</div></p>",
                        "name": "thenSplit(String splitPattern, String replaceString)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var transformerRuleList = new sn_tfrm.TransformerRuleList()\n  .fromJSON()\n  .setName('Stock Report 05022019 JSON')\n  .addRule('ticker', '$.quote.symbol') \n  .addRule('change_percentage', '$.quote.changePercent') \n  .thenMultiply('100') \n  .thenRoundDown('0') \n  .addRule('close_price', '$.quote.close') \n  .thenAdaptCurrency('USD', false) \n  .addRule('CEO', '$.quote.CEO') \n  .thenSplit(',', '$2 $1');\n",
                                "description": "In this example, the CEO name is last name, first name in the source data and in the output\n        it will be transformed to first name last name."
                            }
                        ],
                        "params": [
                            {
                                "name": "splitPattern",
                                "type": "String",
                                "description": "String that denotes how to split the text into segments."
                            },
                            {
                                "name": "replaceString",
                                "type": "String",
                                "description": "String that defines the output string, including segment references and\n                constants. Not all segments need to be referenced. <p class=\"p\">Reference the segments defined\n                  by the <span class=\"keyword parmname\">splitPattern</span> using $#, where # is the number of the\n                  order of the segment in the source data element. Reference the entire source data\n                  element using $0.</p>"
                            }
                        ],
                        "return": {
                            "type": "Object",
                            "description": "Current TransformerRuleList object."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "TRL-thenSubtract_N",
                        "short_description": "Adds an adapter to the current rule that subtracts the passed in value from the source\n    field and stores it in the output field.",
                        "description": "<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> This is an adapter method and cannot be used on its own. Adapter methods work\n                  in conjunction with the<span class=\"keyword apiname\">addRule()</span> method. They define\n                  adaptations to apply to the output field defined by the\n                    <span class=\"keyword apiname\">addRule()</span> method such as formatting, rounding, and applying\n                  patterns.</div></p>",
                        "name": "thenSubtract(Number operand)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var transformerRuleList = new sn_tfrm.TransformerRuleList()\n  .fromJSON()\n  .setName('Stock 05182019 JSON')\n  .addRule('ticker', '$.quote.symbol') \n  .addRule('change_percentage', '$.quote.changePercent') \n  .thenMultiply('100') \n  .thenRoundDown('0') \n  .addRule('close_price', '$.quote.close') \n  .thenAdaptCurrency('USD', false) \n  .addRule('trade_price', '$.quote.current_price') \n  .addMultiply('$.quote.trade_quantity')\n  .thenSubtract('$.quote.discount_dollars'); \n",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "operand",
                                "type": "Number",
                                "description": "Value to subtract from the source data element."
                            }
                        ],
                        "return": {
                            "type": "Object",
                            "description": "Current TransformerRuleList object."
                        },
                        "extras": []
                    }
                ]
            }
        ]
    },
    {
        "identifier": "sn_uc-namespace",
        "namespace": "sn_uc",
        "classes": [
            {
                "description": "To use this class in a scoped application, use the <span class=\"keyword parmname\">sn_uc</span> namespace\n      identifier. The User Criteria Scoped API plugin (ID: com.glideapp.user_criteria.scoped.api)\n      should be enabled to access the <span class=\"keyword apiname\">UserCriteria</span> API.",
                "short_description": "The <span class=\"keyword apiname\">UserCriteria</span> API enables you to create, modify, or delete user\n    criteria records using scripts.",
                "identifier": "c_UserCriteriaScoped",
                "name": "UserCriteria",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "r_UCS-UserCriteria",
                        "short_description": "Creates an instance of the UserCriteria class.",
                        "description": "",
                        "name": "UserCriteria()",
                        "type": "Constructor",
                        "examples": [
                            {
                                "script": "var uc = new sn_uc.UserCriteria();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_UCS-UserCriteria_S",
                        "short_description": "Creates an instance of the UserCriteria class with the specified sys_id.",
                        "description": "",
                        "name": "UserCriteria(String sys_id)",
                        "type": "Constructor",
                        "examples": [
                            {
                                "script": "var uc = new sn_uc.UserCriteria(\"31bea3d53790200044e0bfc8bcbe5dec\");",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "sys_id",
                                "type": "String",
                                "description": "sys_id of the user criteria."
                            }
                        ],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_UCS-create_O_B",
                        "short_description": "Creates a user criteria with specified values in the user_criteria table. Values\n    specified in columnValues override the values provided via setters.",
                        "description": "",
                        "name": "create(Object columnValues, Boolean standardUpdate)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "\nvar uc = new sn_uc.UserCriteria(); \nuc.setCompanies(\"31bea3d53790200044e0bfc8bcbe5dec,0c441abbc6112275000025157c651c89â);\nuc.setActive(true); \nuc.setUsers(\"31bea3d53790200044e0bfc8bcbe5dec,0c441abbc6112275000025157c651c89\");\nvar UserCriteriaId = UserCriteria.create();\ngs.info(UserCriteriaId);\n",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "columnValues",
                                "type": "Object",
                                "description": "Key and value pairs for a column and its value."
                            },
                            {
                                "name": "standardUpdate",
                                "type": "Boolean",
                                "description": "Set to true to enable the running of engines and workflow."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "sys_id of the created user criteria."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_UCS-deleteRecord",
                        "short_description": "Deletes the current user criteria.",
                        "description": "",
                        "name": "deleteRecord()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var uc = new sn_uc.UserCriteria(\"31bea3d53790200044e0bfc8bcbe5dec\");\nuc.deleteRecord();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Boolean",
                            "description": "If true,  the user criteria is deleted.<p class=\"p\">If false, no user criteria is found\n                  to delete.</p>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_UCS-read_S",
                        "short_description": "Displays the mapping for the attribute and value pairs of the catalog item.",
                        "description": "",
                        "name": "read(String columns)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var uc = new sn_uc.UserCriteria(\"7b8a6927ef732100438236caa5c0fb89\");\nvar obj = uc.read([\"company\",\"name\"]);\ngs.info(JSON.stringify(obj));",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "columns",
                                "type": "String",
                                "description": "Array of catalog item attributes."
                            }
                        ],
                        "return": {
                            "type": "Object",
                            "description": "Mapping for the attribute and value pairs of the catalog item."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_UCS-setActive_B",
                        "short_description": "Specifies if the user criteria is active.",
                        "description": "",
                        "name": "setActive(Boolean active)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var uc = new sn_uc.UserCriteria();\nuc.setActive(true); \n",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "active",
                                "type": "Boolean",
                                "description": "If true, the user criteria is active. <p class=\"p\">If false, the user criteria is\n                  inactive.</p>"
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_UCS-setAdvanced_B",
                        "short_description": "Specifies if the user criteria has an advanced script.",
                        "description": "",
                        "name": "setAdvanced(boolean advanced)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var uc = new sn_uc.UserCriteria();\nuc.setAdvanced(true); \n",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "advanced",
                                "type": "Boolean",
                                "description": "If true, the user criteria has an advanced script.<p class=\"p\">If false, the user\n                  criteria does not have an advanced script.</p>"
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_UCS-setCompanies_S",
                        "short_description": "Sets the company property for the user criteria.",
                        "description": "",
                        "name": "setCompanies(String companies)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var uc = new sn_uc.UserCriteria();\nuc.setCompanies(\"31bea3d53790200044e0bfc8bcbe5dec,0c441abbc6112275000025157c651c89\"); \n",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "companies",
                                "type": "String",
                                "description": "Comma-separated list of the company sys_ids to be set for the user\n                criteria."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_UCS-setDepartments_S",
                        "short_description": "Sets the department property for the user criteria.",
                        "description": "",
                        "name": "setDepartments(String departments)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var uc = new sn_uc.UserCriteria();\nuc.setDepartments(\"31bea3d53790200044e0bfc8bcbe5dec,0c441abbc6112275000025157c651c89\"); \n",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "departments",
                                "type": "String",
                                "description": "Comma-separated list of the department sys_ids to be set for the user\n                criteria."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_UCS-setGroups_S",
                        "short_description": "Sets the group property for the user criteria.",
                        "description": "",
                        "name": "setGroups(String groups)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var uc = new sn_uc.UserCriteria();\nuc.setGroups(\"31bea3d53790200044e0bfc8bcbe5dec,0c441abbc6112275000025157c651c89\"); \n",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "groups",
                                "type": "String",
                                "description": "Comma-separated list of the group sys_ids to be set for the user\n                criteria."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_UCS-setLocations_S",
                        "short_description": "Sets the location property for the user criteria.",
                        "description": "",
                        "name": "setLocations(String locations)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var uc = new sn_uc.UserCriteria();\nuc.setLocations(\"31bea3d53790200044e0bfc8bcbe5dec,0c441abbc6112275000025157c651c89\"); \n",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "locations",
                                "type": "String",
                                "description": "Comma-separated list of the location sys_ids to be set for the user\n                criteria."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_UCS-setMatchAll_B",
                        "short_description": "Sets the match_all property for the user criteria.",
                        "description": "",
                        "name": "setMatchAll(Boolean match_all)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var uc = new sn_uc.UserCriteria();\nuc.setMatchAll(true); \n",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_UCS-setName_S",
                        "short_description": "Sets the name property for the user criteria.",
                        "description": "",
                        "name": "setName(String name)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var uc = new sn_uc.UserCriteria();\nuc.setName(\"Property1\"); \n",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "name",
                                "type": "String",
                                "description": "Name of the user criteria."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_UCS-setRoles_S",
                        "short_description": "Sets the role property for the user criteria.",
                        "description": "",
                        "name": "setRoles(String roles)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var uc = new sn_uc.UserCriteria();\nuc.setRoles(\"31bea3d53790200044e0bfc8bcbe5dec,0c441abbc6112275000025157c651c89\"); \n",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "roles",
                                "type": "String",
                                "description": "Comma-separated list of the role sys_ids to be set for the user\n                criteria."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_UCS-setScript_S",
                        "short_description": "Sets the script for the user criteria.",
                        "description": "",
                        "name": "setScript(String script)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var uc = new sn_uc.UserCriteria();\nuc.setScript(\"function scriptTest() {\n  var retVal;\n  if (gs.getUser().getRecord().getDisplayValue('department') == 'Product Management') {\n      retVal = true;\n  } else {\n      retVal = false;\n  }\n  return retVal;\n}\"); \n",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "script",
                                "type": "String",
                                "description": "Script to be set for the advanced user criteria."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_UCS-setUsers_S",
                        "short_description": "Sets the user property for the user criteria.",
                        "description": "",
                        "name": "setUsers(String users)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var uc = new sn_uc.UserCriteria();\nuc.setUsers(\"31bea3d53790200044e0bfc8bcbe5dec,0c441abbc6112275000025157c651c89\"); \n",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "users",
                                "type": "String",
                                "description": "Comma-separated list of the user sys_ids to be set for the user\n                criteria."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_UCS-update_O_S",
                        "short_description": "Updates the current catalog item with the specified values.",
                        "description": "",
                        "name": "update(Object columnValues, String reason)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var uc = new sn_uc.UserCriteria();\nuc.update(\"name\": \"Updated name\", \"The existing name is not relevant. Setting a relevant name\"); \n",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "columnValues",
                                "type": "Object",
                                "description": "Mapping for the column name and the value pairs."
                            },
                            {
                                "name": "reason",
                                "type": "String",
                                "description": "Reason for updating the catalog item."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "Returns the sys_id of  the created user criteria."
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "To use this class in a scoped application, use the <span class=\"keyword parmname\">sn_uc</span> namespace\n      identifier. The User Criteria Scoped API plugin (ID: com.glideapp.user_criteria.scoped.api)\n      should be enabled to access the <span class=\"keyword apiname\">UserCriteriaLoader</span> API.",
                "short_description": "The <span class=\"keyword apiname\">UserCriteriaLoader</span> API enables you to get the user criteria\n    associated with a specific user, or a user associated with a specific linkTable.",
                "identifier": "UserCriteriaLoaderScoped",
                "name": "UserCriteriaLoader",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "UCLS-getAllUserCriteria",
                        "short_description": "Returns all user criteria associated with the logged in user.",
                        "description": "",
                        "name": "getAllUserCriteria()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var result = new sn_uc.UserCriteriaLoader.getAllUserCriteria();\ngs.info(result);",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "ArrayList&lt;String&gt;",
                            "description": "An array list containing the sys_ids of the user criteria associated with the\n                user."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "UCLS-getAllUserCriteria_S",
                        "short_description": "Returns all user criteria associated with the specified user.",
                        "description": "",
                        "name": "getAllUserCriteria(String userId)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var result = new sn_uc.UserCriteriaLoader.getAllUserCriteria('62826bf03710200044e0bfc8bcbe5df1');\ngs.log(result);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "userId",
                                "type": "String",
                                "description": "sys_id of the user."
                            }
                        ],
                        "return": {
                            "type": "ArrayList&lt;String&gt;",
                            "description": "An array list containing the sys_ids of the user criteria associated with the\n                specified user."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "UCLS-getUserCriteria_S",
                        "short_description": "Returns the user criteria associated with the specified linkTable for the logged in\n    user.",
                        "description": "",
                        "name": "getUserCriteria(String linkTable)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var result = new sn_uc.UserCriteriaLoader.getUserCriteria('sc_cat_item_user_criteria_mtom');\ngs.log(result);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "linkTable",
                                "type": "String",
                                "description": "Mtom link table between the record and the Available For or Not Available For\n                User Criteria."
                            }
                        ],
                        "return": {
                            "type": "ArrayList&lt;String&gt;",
                            "description": "An array list containing the sys_id of the user criteria associated with the\n                logged in user for the specified link table."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "UCLS-getUserCriteria_S_S",
                        "short_description": "Returns the user criteria of the specified user and the linkTable.",
                        "description": "",
                        "name": "getUserCriteria(String userId, String linkTable)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var result = new sn_uc.UserCriteriaLoader.getUserCriteria('62826bf03710200044e0bfc8bcbe5df1',             \n'sc_cat_item_user_criteria_mtom');\ngs.log(result);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "userId",
                                "type": "String",
                                "description": "sys_id of the user."
                            },
                            {
                                "name": "linkTable",
                                "type": "String",
                                "description": "Mtom link table between the record and the Available For or Not Available For\n                User Criteria."
                            }
                        ],
                        "return": {
                            "type": "ArrayList&lt;String&gt;",
                            "description": "An array list containing the sys_id of the user criteria associated with the\n                specified user and link table."
                        },
                        "extras": []
                    }
                ]
            }
        ]
    },
    {
        "identifier": "sn_ws-namespace",
        "namespace": "sn_ws",
        "classes": [
            {
                "description": "<div class=\"note note\" id=\"c_RESTAPIRequest__note_non_instantiable_ws\"><span class=\"notetitle\">Note:</span> You cannot instantiate objects of this type. Objects of this\n    type are created automatically and are accessible only in scripted REST API resource\n    scripts.</div>",
                "short_description": "A RESTAPIRequest object allows you to access scripted REST API request details in\n  scripts.",
                "identifier": "c_RESTAPIRequest",
                "name": "RESTAPIRequest - Scoped, Global",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "r_RESTAPIRequest_body",
                        "short_description": "The body of the request.",
                        "description": "",
                        "name": "body",
                        "type": "Property",
                        "examples": [
                            {
                                "script": "var requestBody = request.body // Returns instance of RESTAPIRequestBody",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "body",
                                "type": "<a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/sn_ws-namespace/c_RESTAPIRequestBody\" title=\"A RESTAPIRequestBody object allows you to access the body content of a scripted REST API request in scripts.\">RESTAPIRequestBody</a>",
                                "description": "The body of the request. You can access data from the body object using the\n                RESTAPIRequestBody API."
                            }
                        ],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_RESTAPIRequest_headers",
                        "short_description": "All headers from the request.",
                        "description": "",
                        "name": "headers",
                        "type": "Property",
                        "examples": [
                            {
                                "script": "var headers = request.headers; \nvar acceptHeader = headers.Accept;\nvar myCustomHeader = headers.myCustom; \nvar specialHeader = headers['special - header'];",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "headers",
                                "type": "object",
                                "description": "All headers from the request, and their values."
                            }
                        ],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_RESTAPIRequest_pathParams",
                        "short_description": "The path parameters passed in the request URI.",
                        "description": "",
                        "name": "pathParams",
                        "type": "Property",
                        "examples": [
                            {
                                "script": "var pathParams = request.pathParams; \nvar tableName = pathParams.tableName; //âmyApp_tableâ \nvar id = pathParams.id; //â1234â",
                                "description": "In this example, the scripted REST API endpoint follows this format:\n          <span class=\"ph filepath\">https://instance.service-now.com/api/now/myservice/{tableName}/{id}</span>.\n        The request being processed uses this URL:\n          <span class=\"ph filepath\">https://instance.service-now.com/api/now/myservice/myApp_table/1234</span>."
                            }
                        ],
                        "params": [
                            {
                                "name": "pathParams",
                                "type": "Object",
                                "description": "The path parameters as a script object. Available path parameters depend on the\n                web service configuration."
                            }
                        ],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_RESTAPIRequest_queryParams",
                        "short_description": "The query parameters from the web service request.",
                        "description": "",
                        "name": "queryParams",
                        "type": "Property",
                        "examples": [
                            {
                                "script": "var queryParams = request.queryParams; \nvar isActiveQuery = queryParams.active; //false \nvar nameQueryVal = queryParams.name; //ânowâ",
                                "description": "In this example, the request being processed uses this URL:\n          <span class=\"ph filepath\">https://&lt;instance_rest_endpoint&gt;?active=false&amp;name=now</span>. Note\n        the <span class=\"keyword parmname\">active</span> and <span class=\"keyword parmname\">name</span> parameters."
                            }
                        ],
                        "params": [
                            {
                                "name": "queryParams",
                                "type": "Object",
                                "description": "The query parameters from the web service request."
                            }
                        ],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_RESTAPIRequest_queryString",
                        "short_description": "The entire query added to the endpoint URI.",
                        "description": "",
                        "name": "queryString",
                        "type": "Property",
                        "examples": [
                            {
                                "script": "var query = request.queryString; //\"active=false&amp;name=now\"",
                                "description": "In this example, the request being processed uses this URL:\n          <span class=\"ph filepath\">https://&lt;instance_rest_endpoint&gt;?active=false&amp;name=now</span>. Note\n        the query <samp class=\"ph codeph\">active=false&amp;name=now</samp>."
                            }
                        ],
                        "params": [
                            {
                                "name": "queryString",
                                "type": "String",
                                "description": "The entire query for the request."
                            }
                        ],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_RESTAPIRequest_uri",
                        "short_description": "The request URI, excluding domain information.",
                        "description": "",
                        "name": "uri",
                        "type": "Property",
                        "examples": [
                            {
                                "script": "var query = request.uri; //\"api/now/table/myTable\"",
                                "description": "In this example, the request being processed uses this URL:\n          <span class=\"ph filepath\">https://instance.service-now.com/api/now/table/myTable?active=false&amp;name=now</span>."
                            }
                        ],
                        "params": [
                            {
                                "name": "uri",
                                "type": "String",
                                "description": "The request URI, excluding domain information."
                            }
                        ],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_RESTAPIRequest_url",
                        "short_description": "The entire request URL.",
                        "description": "",
                        "name": "url",
                        "type": "Property",
                        "examples": [
                            {
                                "script": "var query = request.url; //\"https://instance.service-now.com/api/now/table/myTable?active=false&amp;name=now\"",
                                "description": "In this example, the request being processed uses this URL:\n          <span class=\"ph filepath\">https://instance.service-now.com/api/now/table/myTable?active=false&amp;name=now</span>."
                            }
                        ],
                        "params": [
                            {
                                "name": "url",
                                "type": "String",
                                "description": "The entire request URL."
                            }
                        ],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_RESTAPIRequest-geviceRequestHeader_String",
                        "short_description": "Returns the value of a specific header from the web service request.",
                        "description": "",
                        "name": "getHeader(String header)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var acceptHeader = request.getHeader('accept');",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "header",
                                "type": "String",
                                "description": "The name of the header, such as <span class=\"keyword parmname\">accept</span> or\n                  <span class=\"keyword parmname\">content-type</span>."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "The value of the specified header."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SSR-getSupportedRespContentTypes",
                        "short_description": "Get the content types specified in the request Accept header.",
                        "description": "",
                        "name": "getSupportedResponseContentTypes()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "Array",
                            "description": "An array of string values where each string is a content type, such as\n                application/json."
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "The format of a RESTAPIRequestBody object may be JSON or XML, depending on the content-type\n   header value from the request.<div class=\"note note\"><span class=\"notetitle\">Note:</span> You cannot instantiate objects of this type. Objects of this\n    type are created automatically and are accessible only in scripted REST API resource\n    scripts.</div><br/><br/>Single entry example-request-body in JSON format.\n   <pre><code class='language-javascript'>{\n \"name\": \"user1\",\n \"id\": 1234,\n \"roles\": [\n  {\n   \"name\": \"admin\"\n  },\n  {\n   \"name\": \"itil\"\n  }\n ]\n}</code></pre><br/><br/>Multiple entry example-request-body in JSON\n   format.<pre><code class='language-javascript'>[{\n \"name\": \"user1\",\n \"id\": 1234,\n \"roles\": [\n  {\n   \"name\": \"admin\"\n  },\n  {\n   \"name\": \"itil\"\n  }\n ]\n},{\n \"name\": \"user2\",\n \"id\":9876,\n \"roles\": [\n  {\n   \"name\":\"admin\"\n  }\n ]\n}]</code></pre><br/><br/><span class=\"importanttitle\">Important:</span> If the request\n        body format is not of a <samp class=\"ph codeph\">json</samp> or <samp class=\"ph codeph\">xml</samp> subtype, use only the\n        request body <samp class=\"ph codeph\">dataStream</samp> field to access the request body. Using request\n        body <samp class=\"ph codeph\">data</samp>, <samp class=\"ph codeph\">dataString</samp>, <samp class=\"ph codeph\">nextEntry()</samp>, or\n          <samp class=\"ph codeph\">hasNext()</samp> with a non-json or non-xml format results in a\n          <samp class=\"ph systemoutput\">500</samp> error response.",
                "short_description": "A RESTAPIRequestBody object allows you to access the body content of a scripted REST\n  API request in scripts.",
                "identifier": "c_RESTAPIRequestBody",
                "name": "RESTAPIRequestBody - Scoped, Global",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "r_RESTAPIRequestBody_data",
                        "short_description": "The content of the request body.",
                        "description": "<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> REST web services consume data, datastream, and dataString via stream. Because streams\n        are only consumed once, only one can be called. For example, if calling both data and\n        dataString, the second call will return empty.</div></p>",
                        "name": "data",
                        "type": "Property",
                        "examples": [
                            {
                                "script": "var entry;\nvar id;\nvar requestBody = request.body;\nvar requestData = requestBody.data; //May be an array or a single object\nif (requestData instanceof Array) { \n entry = requestData[0].name; // 'user1'\n id = requestData[0].id; // '1234'\n} else {\n entry = requestData.name; // 'user1'\n id = requestData.id; // '1234'\n}",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "data",
                                "type": "Object or Array",
                                "description": "The request content. This can be a single object or an array of objects\n                depending on the request."
                            }
                        ],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_RESTAPIRequestBody_dataStream",
                        "short_description": "The content of the request body, as a stream.",
                        "description": "<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> REST web services consume data, datastream, and dataString via stream. Because streams\n        are only consumed once, only one can be called. For example, if calling both data and\n        dataString, the second call will return empty.</div></p>",
                        "name": "dataStream",
                        "type": "Property",
                        "examples": [
                            {
                                "script": "var requestBody = request.body; \nvar requestStream = requestBody.dataStream;",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "dataStream",
                                "type": "Object",
                                "description": "The content of the request body. You can pass the stream to a separate API,\n                such as to create an attachment from the request or forward the request to a\n                different endpoint."
                            }
                        ],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_RESTAPIRequestBody_dataString",
                        "short_description": "The content of the request body, as a String.",
                        "description": "<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> REST web services consume data, datastream, and dataString via stream. Because streams\n        are only consumed once, only one can be called. For example, if calling both data and\n        dataString, the second call will return empty.</div></p>",
                        "name": "dataString",
                        "type": "Property",
                        "examples": [
                            {
                                "script": "var requestBody = request.body; \nvar requestString = requestBody.dataString;",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "dataString",
                                "type": "String",
                                "description": "The content of the request body."
                            }
                        ],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_RESTAPIRequestBody-hasNext",
                        "short_description": "Determines if there are additional entries in the request body.",
                        "description": "<p>Use this method with the <span class=\"keyword apiname\">nextEntry()</span> method to iterate over multiple\n        request body entries.</p>",
                        "name": "hasNext()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var requestBody = request.body;\nrequestBody.hasNext(); // returns true if the request contains a single entry or multiple entries\nrequestBody. nextEntry(); // returns next available entry\n\n//calling second time\nrequestBody.hasNext(); // returns false if the request contains a single entry, or true if the request contains multiple entries",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "boolean",
                            "description": "Flag indicating whether there are additional entries in the request\n                  body.<div class=\"p\">Possible values:<ul class=\"ul\" id=\"r_RESTAPIRequestBody-hasNext__ul_sng_zt5_knb\">\n                    <li class=\"li\">true: Additional entries are available. As <span class=\"keyword apiname\">nextEntry()</span> is\n                      called, <span class=\"keyword apiname\">hasNext()</span> continues to be true until the last\n                      matching record is loaded.</li>\n\n                    <li class=\"li\">false: No additional entries.</li>\n\n                  </ul>\n</div>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_RESTAPIRequestBody-nextEntry",
                        "short_description": "Retrieve one entry from the request body as a script object.",
                        "description": "<p>Use this method with the hasNext() method to iterate over multiple request body\n        entries.</p>",
                        "name": "nextEntry()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var requestBody = request.body;\nvar requestEntry = requestBody.nextEntry(); // returns available entry if there is only one entry, or the first entry if there are multiple.\nvar name = requestEntry.name; // âuser1â\n\n// Calling second time\nrequestEntry = requestBody.nextEntry(); // returns undefined if there is only one entry, or the second entry if there are multiple.",
                                "description": ""
                            },
                            {
                                "script": "var requestBody = request.body;\nwhile(requestBody.hasNext()){\nvar entry = requestBody.nextEntry();\n}",
                                "description": "This example demonstrates using hasNext() with nextEntry()."
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Object",
                            "description": "A single entry from the request body."
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "<div class=\"note note\"><span class=\"notetitle\">Note:</span> You cannot instantiate objects of this type. Objects of this\n    type are created automatically and are accessible only in scripted REST API resource\n    scripts.</div>",
                "short_description": "A RESTAPIResponse object allows you to build a RESTful response to a scripted REST API\n  request.",
                "identifier": "c_RESTAPIResponse",
                "name": "RESTAPIResponse - Scoped, Global",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "r_RESTAPIResponse-getStreamWriter",
                        "short_description": "Returns the ResponseStreamWriter for this response, allowing you to write directly to\n    the response stream.",
                        "description": "<p>Set the content type and status code using the <span class=\"keyword apiname\">setHeaders</span> and\n          <span class=\"keyword apiname\">setStatus</span> functions prior to calling the\n          <span class=\"keyword apiname\">getStreamWriter</span> function.</p>",
                        "name": "getStreamWriter()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "response.setContentType('application/json');\nresponse.setStatus(200);\nvar writer = response.getStreamWriter();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "<a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/sn_ws-namespace/c_RESTAPIResponseStream\" title=\"A RESTAPIResponseStream object allows you to write directly to the scripted REST API response stream.\">RESTAPIResponseStream - Scoped, Global</a>",
                            "description": "The ResponseStreamWriter for this response. You can use this object to write\n                directly to the response stream."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_RESTAPIResponse-setBody_Object",
                        "short_description": "Sets the body content to send in the web service response.",
                        "description": "",
                        "name": "setBody(Object body)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var body = {};\nbody.name = \"incident\";\nbody.number = \"1234\";\nbody.caller = {\"id\": \"user1\"};\nresponse.setBody(body);\n",
                                "description": ""
                            },
                            {
                                "script": "var bodyArray = [];\nvar body = {};\nbody.name = \"incident\";\nbody.number = \"1234\";\nbody.caller = {\"id\":\"user1\"};\nbodyArray.push(body);\nresponse.setBody(bodyArray);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "body",
                                "type": "Object",
                                "description": "<p class=\"p\">The response body, as a JavaScript object.</p>\n\n                <p class=\"p\">The body content is automatically serialized to JSON or XML depending on the\n                  value of the <span class=\"keyword parmname\">Accept</span> header passed in the request.</p>"
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_RESTAPIResponse-setContentType_String",
                        "short_description": "Assigns a value to the Content-Type header in the web service response.",
                        "description": "<p>You must set a response content type before writing the response. The content type is set\n        automatically for string responses, based on the request Accept header value.</p><p>Setting an invalid content type causes the response to default to JSON. Failing to set a\n        content type results in a status code 500 error when sending a binary response.</p><p>See the <a class=\"extRef\" href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17\" target=\"_blank\">W3 Content-Type header documentation</a> for more\n        information about this header.</p>",
                        "name": "setContentType(String contentType)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "response.setContentType('application/json');",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "contentType",
                                "type": "String",
                                "description": "The content type of the response body, such as application/json."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SSRB-setError_O",
                        "short_description": "Configures the REST response to return an error.",
                        "description": "",
                        "name": "setError(Object error)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var queryParams = request.queryParams;\nvar userId = String(queryParams.user_id || '');\nvar fileId = String(queryParams.file_id || '');\nif (!userId || !fileId){\n  response.setError(new sn_ws_err.BadRequestError('Missing required parameters.'));\n  return;\n}",
                                "description": "The following example shows how to return an error from within a scripted REST\n        resource."
                            }
                        ],
                        "params": [
                            {
                                "name": "error",
                                "type": "Object",
                                "description": "Error object."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_RESTAPIResponse-setHeader_String_String",
                        "short_description": "Assign a value to a REST service response header.",
                        "description": "",
                        "name": "setHeader(String header, String value)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "response.setHeader(\"Location\",\"&lt;URI&gt;\");",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "header",
                                "type": "String",
                                "description": "The header you want to set."
                            },
                            {
                                "name": "value",
                                "type": "String",
                                "description": "The value to assign the specified header."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_RESTAPIResponse-setHeaders_Object",
                        "short_description": "Sets the headers for the web service response.",
                        "description": "",
                        "name": "setHeaders(Object headers)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var headers = {};\nheaders.X-Total-Count=100;\nheaders.Location=âhttps://instance.service-now.com/&lt;endpoint_to_resource&gt;';\nresponse.setHeaders(headers);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "headers",
                                "type": "Object",
                                "description": "A JavaScript object listing each header and the value to assign that\n                header."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_RESTAPIResponse-setLocation_String",
                        "short_description": "Assigns a value to the Location header in the web service response.",
                        "description": "<p>See the <a class=\"extRef\" href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.30\" target=\"_blank\">W3 Location header documentation</a> for more\n        information about this header.</p>",
                        "name": "setLocation(String location)",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_RESTAPIResponse-setStatus_Number",
                        "short_description": "Sets the status code number for the web service response.",
                        "description": "",
                        "name": "setStatus(Number status)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "response.setStatus(200);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "status",
                                "type": "Number",
                                "description": "The status code to send in the response, such as 200 to indicate success.\n                Passing a non-numerical value, such as a string, causes the status code to default\n                to 0."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "Use RESTAPIResponseStream methods to build web service APIs in the <a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-application-development/page/integrate/custom-web-services/concept/c_CustomWebServices.html\" target=\"_blank\">Scripted REST API</a> feature.<div class=\"note note\"><span class=\"notetitle\">Note:</span> You cannot instantiate objects of this type. Objects of this\n    type are created automatically and are accessible only in scripted REST API resource\n    scripts.</div>",
                "short_description": "A RESTAPIResponseStream object allows you to write directly to the scripted REST API\n  response stream.",
                "identifier": "c_RESTAPIResponseStream",
                "name": "RESTAPIResponseStream - Scoped, Global",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "r_RESTAPIResponseStream-writeStream_Object",
                        "short_description": "Write an input stream to the response stream.",
                        "description": "<p>You must set the content type and status code before calling the\n          <span class=\"keyword apiname\">writeStream()</span> method or the response will fail. You cannot modify these\n        values after calling the <span class=\"keyword apiname\">writeStream()</span> method.</p><p><span class=\"notetitle\">Note:</span> \n        <p class=\"p\">It is the responsibility of the script author to obtain the stream from a third-party\n          service. </p></p>",
                        "name": "writeStream(Object stream)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "(function process(/*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {\n\n    response.setContentType('application/json');\n    response.setStatus(200);\n\n    var gsa = new GlideSysAttachment();\n    var attachmentStream = new gsa.getContentStream(&lt;sys_id of attachment&gt;); \n    var writer = response.getStreamWriter();\n    writer.writeStream(attachmentStream);\n\n})(request, response);",
                                "description": "The following example is for scoped applications:"
                            },
                            {
                                "script": "(function process(/*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {\n\n    response.setContentType('application/json');\n    response.setStatus(200);\n\n    var attachmentStream = new GlideSysAttachmentInputStream(&lt;sys_id of attachment&gt;);\n    var writer = response.getStreamWriter();\n    writer.writeStream(attachmentStream);\n\n})(request, response);",
                                "description": "The following example is for global applications:"
                            }
                        ],
                        "params": [
                            {
                                "name": "stream",
                                "type": "Object",
                                "description": "An attachment or a response stream from a third-party service."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_RESTAPIResponseStream-writeString_String",
                        "short_description": "Write string data to the response stream.",
                        "description": "<p>You must set the content type and status code before calling the\n          <span class=\"keyword apiname\">writeString()</span> method or the response will fail. You cannot modify these\n        values after calling the <span class=\"keyword apiname\">writeString()</span> method.</p>",
                        "name": "writeString(String data)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "response.setContentType('application/json');\nresponse.setStatus(200);\nvar writer = response.getStreamWriter();\nvar body ={\n  name:user1,\n  id: 1234,\n  roles: [\n    {\n      name: admin\n    },\n    {\n      name: itil\n    }\n  ]\n}\nwriter.writeString(\"{'name':'user','id':'1234'}\");\nwriter.writeString(JSON.stringify(body));",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "data",
                                "type": "String",
                                "description": "The string to add to the response data."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "Use the RESTResponseV2 API to manage the response returned by the REST provider.<br/><br/>You can use this API in scoped applications, or within the global scope.",
                "short_description": "The RESTMessageV2 API allows you to send\n  outbound REST messages\n  using JavaScript.",
                "identifier": "c_RESTMessageV2API",
                "name": "RESTMessageV2 - Scoped, Global",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "r_RMV2-RESTMessageV2",
                        "short_description": "Instantiates an empty RESTMessageV2 object.",
                        "description": "<p>When using an object instantiated this way, you must manually specify an HTTP method and\n        endpoint.</p>",
                        "name": "RESTMessageV2()",
                        "type": "Constructor",
                        "examples": [
                            {
                                "script": "var sm = new sn_ws.RESTMessageV2();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_RMV2-RESTMessageV2_S_S",
                        "short_description": "Instantiates a RESTMessageV2 object using information from a REST message\n    record.",
                        "description": "<p>You must have a REST message record defined before you can use this constructor.</p><p>In the following example, replace <var class=\"keyword varname\">REST_message_record</var> with the name of\n        the REST message record from your instance.</p>",
                        "name": "RESTMessageV2(String name, String methodName)",
                        "type": "Constructor",
                        "examples": [
                            {
                                "script": "var sm = new sn_ws.RESTMessageV2(\"&lt;REST_message_record&gt;\",\"get\"); //Might throw exception if message doesn't exist or not visible due to scope.",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "name",
                                "type": "String",
                                "description": "The name of the REST message record."
                            },
                            {
                                "name": "methodName",
                                "type": "String",
                                "description": "The name of the HTTP method to use, such as GET/get or PUT/put - case\n                insensitive."
                            }
                        ],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_RMV2-execute",
                        "short_description": "Send the REST message to the endpoint.",
                        "description": "<p>In the following example, replace <var class=\"keyword varname\">REST_message_record</var> with the name of\n        the REST message record from your instance.</p>",
                        "name": "execute()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var sm = new sn_ws.RESTMessageV2(\"&lt;REST_message_record&gt;\",\"get\"); //Might throw exception if message doesn't exist or not visible due to scope.\nvar response = sm.execute(); //Might throw exception if http connection timed out or some issue with sending request itself because of encryption/decryption of password.",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "<a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/sn_ws-namespace/c_RESTResponseV2API\" title=\"The RESTResponseV2 API allows you to use the data returned by an outbound REST message in JavaScript code.\">RESTResponse</a>",
                            "description": "The response returned by the REST provider."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_RMV2-executeAsync",
                        "short_description": "Send the REST message to the endpoint asynchronously. The instance does not wait for a\n    response from the web service provider when making asynchronous calls.",
                        "description": "<p>In the following example, replace <var class=\"keyword varname\">REST_message_record</var> with the name of\n        the REST message record from your instance. When using <samp class=\"ph codeph\">executeAsync</samp>,\n        consider processing the response body in a separate business rule to take advantage of the\n        asynchronous call.</p>",
                        "name": "executeAsync()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var sm = new sn_ws.RESTMessageV2(\"&lt;REST_message_record&gt;\",\"get\"); //Might throw exception if message doesn't exist or not visible due to scope.\nvar response = sm.executeAsync(); //Might throw exception if http connection timed out or some issue with sending request itself because of encryption/decryption of password.\n",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "<a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/sn_ws-namespace/c_RESTResponseV2API\" title=\"The RESTResponseV2 API allows you to use the data returned by an outbound REST message in JavaScript code.\">RESTResponse</a>",
                            "description": "The response returned by the REST provider."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_RMV2-getEndpoint",
                        "short_description": "Get the URL of the endpoint for the REST message.",
                        "description": "<p>In the following example, replace <var class=\"keyword varname\">REST_message_record</var> with the name of\n        the REST message record from your instance.</p>",
                        "name": "getEndpoint()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var sm = new sn_ws.RESTMessageV2(\"&lt;REST_message_record&gt;\",\"get\"); //Might throw exception if message doesn't exist or not visible due to scope.\nvar endpoint = sm.getEndpoint();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The URL of the REST web service provider."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_RMV2-getRequestBody",
                        "short_description": "Get the content of the REST message body.",
                        "description": "<p>In the following example, replace <var class=\"keyword varname\">REST_message_record</var> with the name of\n        the REST message record from your instance.</p>",
                        "name": "getRequestBody()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var sm = new sn_ws.RESTMessageV2(\"&lt;REST_message_record&gt;\",\"get\"); //Might throw exception if message doesn't exist or not visible due to scope.\nvar body = sm.getRequestBody();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "the REST message body."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_RMV2-getRequestHeader_S",
                        "short_description": "Get the value for an HTTP header specified in the REST message.",
                        "description": "<p>By default, this method cannot return the value for a header set automatically by the\n        system. To grant this method access to all headers, set the property glide.http.log_debug to\n        true.</p><p>In the following example, replace <var class=\"keyword varname\">REST_message_record</var> with the name of\n        the REST message record from your instance.</p>",
                        "name": "getRequestHeader(String headerName)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var sm = new sn_ws.RESTMessageV2(\"&lt;REST_message_record&gt;\",\"get\"); //Might throw exception if message doesn't exist or not visible due to scope.\nvar header = sm.getRequestHeader(\"Accept\");",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "headerName",
                                "type": "String",
                                "description": "The request header you want to get the value for."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "The value of the specified header."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_RMV2-getRequestHeaders",
                        "short_description": "Get HTTP headers that were set by the REST client and the associated\n    values.",
                        "description": "<p>This method does not return headers set automatically by the system. To configure this\n        method to return all headers, set the property glide.http.log_debug to true.</p><p>In the following example, replace <var class=\"keyword varname\">REST_message_record</var> with the name of\n        the REST message record from your instance.</p>",
                        "name": "getRequestHeaders()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var sm = new sn_ws.RESTMessageV2(\"&lt;REST_message_record&gt;\",\"get\"); //Might throw exception if message doesn't exist or not visible due to scope.\nvar headers = sm.getRequestHeaders();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Object",
                            "description": "An Object that maps the name of each header to the associated value."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_RMV2-saveRespBodyAsAttach_S_S_S",
                        "short_description": "Configures the REST message to save the returned response body as an attachment\n    record.",
                        "description": "<p>When you use this function with a REST message that is sent\n        through a MID server, the MID server user must have any roles required to read and write\n        attachment records, as well as any roles required to read and write records on the table\n        specified in the <span class=\"keyword parmname\">tableName</span> parameter.</p><p>The response body does not need to be a binary file to be saved as an\n        attachment. Response bodies using text formats, such as JSON or XML can also be saved. If\n        the instance fails to save the attachment, call <span class=\"keyword apiname\">getErrorMessage()</span> on the\n        related RESTResponseV2 object for error details.</p>",
                        "name": "saveResponseBodyAsAttachment(String tableName, String recordSysId, String fileName)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "(function sampleRESTMessageV2() {\n  try{\n    var request  = new sn_ws.RESTMessageV2();        \n    request.setHttpMethod('get');\n\n    var attachment_sys_id  = '&lt;attachment_record_sys_id&gt;', \n      tablename = 'incident',\n      recordSysId = '&lt;incident_sys_id&gt;',            \n      response,            \n      httpResponseStatus,             \n      filename ='&lt;filename&gt;';\n\n    //endpoint - ServiceNow REST Attachment API        \n    request.setEndpoint('https://&lt;instance_name&gt;.service-now.com/api/now/attachment/' + attachment_sys_id  +'/file');        \n    request.setBasicAuth('&lt;username&gt;', '&lt;password&gt;');\n\n    //RESTMessageV2 - saveResponseBodyAsAttachment(String tableName, String recordSysId, String fileName)        \n    request.saveResponseBodyAsAttachment(tablename, recordSysId, filename);        \n\n    response = request.execute();        \n    httpResponseStatus = response.getStatusCode();  \n      \n    gs.info(\" http response status_code:  \" + httpResponseStatus);    \n  }\n  catch(ex){\n    var message  = ex.getMessage();        \n    gs.info(message);    \n  }\n})();",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "tableName",
                                "type": "String",
                                "description": "Specify the table that contains the record you want to attach the saved file\n                to."
                            },
                            {
                                "name": "recordSysId",
                                "type": "String",
                                "description": "Specify the sys_id of the record you want to attach the saved file to."
                            },
                            {
                                "name": "fileName",
                                "type": "String",
                                "description": "Specify the file name to give to the saved file."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_RMV2-saveRespBodyAsAttach_S_S_S_S",
                        "short_description": "Configure the REST message to save the returned response body as an encrypted\n    attachment record.",
                        "description": "<p>When you use this function with a REST message that is sent\n        through a MID server, the MID server user must have any roles required to read and write\n        attachment records, as well as any roles required to read and write records on the table\n        specified in the <span class=\"keyword parmname\">tableName</span> parameter.</p><p>The response body does not need to be a binary file to be saved as an\n        attachment. Response bodies using text formats, such as JSON or XML can also be saved. If\n        the instance fails to save the attachment, call <span class=\"keyword apiname\">getErrorMessage()</span> on the\n        related RESTResponseV2 object for error details.</p>",
                        "name": "saveResponseBodyAsAttachment(String tableName, String recordSysId, String fileName, String encryptContext)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "tableName",
                                "type": "String",
                                "description": "Specify the table that contains the record you want to attach the saved file\n                to."
                            },
                            {
                                "name": "recordSysId",
                                "type": "String",
                                "description": "Specify the sys_id of the record you want to attach the saved file to."
                            },
                            {
                                "name": "fileName",
                                "type": "String",
                                "description": "Specify the file name to give to the saved file."
                            },
                            {
                                "name": "encryptContext",
                                "type": "String",
                                "description": "Specify the sys_id of an encryption context. The saved file is encrypted using\n                this context."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_RMV2-setAuthenticationProfile_S_S",
                        "short_description": "Set the credentials for the REST message using an existing basic auth or OAuth 2.0\n    profile.",
                        "description": "<p>In the following example, replace <var class=\"keyword varname\">REST_message_record</var> with the name of\n        the REST message record from your instance.</p>",
                        "name": "setAuthenticationProfile(String type, String profileId)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var requestBody;\nvar responseBody;\nvar status;\nvar sm;\ntry{\n       // Might throw exception if message doesn't exist or not visible due to scope.\n\tsm = new sn_ws.RESTMessageV2(\"&lt;REST_message_record&gt;\", \"get\");  \n\n       //set auth profile to an OAuth 2.0 profile record.\n\tsm.setAuthenticationProfile('oauth2', '1234adsf123212131123qasdsf'); \n\n\tsm.setStringParameter(\"symbol\", \"NOW\");\n\tsm.setStringParameterNoEscape(\"xml_data\",\"&lt;data&gt;test&lt;/data&gt;\");\n\n       //In milliseconds. Wait at most 10 seconds for response from http request.\n\tsm.setHttpTimeout(10000); \n       //Might throw exception if http connection timed out or some issue \n       //with sending request itself because of encryption/decryption of password.\n\tresponse = sm.execute();\t\n       responseBody = response.haveError() ? response.getErrorMessage() : response.getBody();\n\tstatus = response.getStatusCode();\n} catch(ex) {\n\tresponseBody = ex.getMessage();\n\tstatus = '500';\n} finally {\n\trequestBody = sm ? sm.getRequestBody():null;\n}",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "type",
                                "type": "String",
                                "description": "The type of authentication profile to use. Valid values are 'basic' to use\n                basic authentication, or 'oauth2' to use OAuth 2.0."
                            },
                            {
                                "name": "profileId",
                                "type": "String",
                                "description": "The sys_id of an authentication profile record. When using basic auth, specify\n                the sys_id of a Basic Auth Configuration [sys_auth_profile_basic] record. When using\n                OAuth 2.0, specify the sys_id of a OAuth Entity Profile [oauth_entity_profile]\n                record."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_RMV2-setBasicAuth_String_userName_String_userPass",
                        "short_description": "Sets basic authentication headers for the REST message.",
                        "description": "<p>Setting security values using this method overrides\n        basic\n        authentication values defined for the REST message record.</p><p>In the following example, replace <var class=\"keyword varname\">REST_message_record</var> with the name of\n        the REST message record from your instance.</p>",
                        "name": "setBasicAuth(String userName, String userPass)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var sm = new sn_ws.RESTMessageV2(\"&lt;REST_message_record&gt;\",\"get\"); //Might throw exception if message doesn't exist or not visible due to scope.\nsm.setBasicAuth(\"username\",\"password\");",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "userName",
                                "type": "String",
                                "description": "The username you want to use to authenticate the REST message."
                            },
                            {
                                "name": "userPass",
                                "type": "String",
                                "description": "The password for the specified user."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_RESTMessageV2_setEccCorrelator_String_correlator",
                        "short_description": "Associate outbound requests and the resulting response record in the ECC queue. This\n    method only applies to REST messages sent through a MID Server.",
                        "description": "<p>The correlator provided populates the <span class=\"ph uicontrol\">Agent correlator</span> field on the\n        ECC queue record for the response. Provide a unique correlator for each outbound request to\n        associate the correct results in the ECC queue with the request when designing asynchronous\n        automation through a MID Server.</p><p>In the following example, replace <var class=\"keyword varname\">REST_message_record</var> with the name of\n        the REST message record from your instance.</p>",
                        "name": "setEccCorrelator(String correlator)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var sm = new sn_ws.RESTMessageV2(\"&lt;REST_message_record&gt;\",\"get\"); //Might throw exception if message doesn't exist or not visible due to scope.\nsm.setEccCorrelator(\"unique_identifier\");",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "correlator",
                                "type": "String",
                                "description": "A unique identifier"
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_RMV2-setEccParameter_S_S",
                        "short_description": "Override a value from the database by writing to the REST message payload. This method\n    only applies to REST messages sent through a MID Server.",
                        "description": "<p>Use this method when a value from the REST message in the database is invalid, such as when\n        the endpoint URL is longer than the maximum REST endpoint field length. You can set only the\n        endpoint URL using this method by passing source as the name parameter.</p><p>In the following example, replace <var class=\"keyword varname\">REST_message_record</var> with the name of\n        the REST message record from your instance.</p>",
                        "name": "setEccParameter(String name, String value)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var sm = new sn_ws.RESTMessageV2(\"&lt;REST_message_record&gt;\",\"get\"); //Might throw exception if message doesn't exist or not visible due to scope.\nsm.setEccParameter(\"source\",\"http://very.long.endpoint.url\");",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "name",
                                "type": "String",
                                "description": "The name of the parameter, such as source."
                            },
                            {
                                "name": "value",
                                "type": "String",
                                "description": "The value to assign to the specified parameter."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_RESTMessageV2_setEndpoint_String_endpoint",
                        "short_description": "Set the endpoint for the REST message.",
                        "description": "<p>By default, the REST message uses the endpoint specified in the REST message record. Use\n        this method to override this default. You must call this method when using the <a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/sn_ws-namespace/c_RESTMessageV2API#r_RMV2-RESTMessageV2\" title=\"Instantiates an empty RESTMessageV2 object.\">RESTMessageV2 - RESTMessageV2()</a> constructor with no parameters.</p>",
                        "name": "setEndpoint(String endpoint)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var sm = new sn_ws.RESTMessageV2();\nsm.setEndpoint(\"http://web.service.endpoint\");",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "endpoint",
                                "type": "String",
                                "description": "The URL of the REST provider you want to interface with."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_RMV2-setHttpMethod_String_method",
                        "short_description": "The HTTP method this REST message performs, such as GET or PUT.",
                        "description": "<p>You must set an HTTP method when using the <a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/sn_ws-namespace/c_RESTMessageV2API#r_RMV2-RESTMessageV2\" title=\"Instantiates an empty RESTMessageV2 object.\">RESTMessageV2 - RESTMessageV2()</a> constructor with no parameters.</p>",
                        "name": "setHttpMethod(String method)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var sm = new sn_ws.RESTMessageV2();\nsm.setHttpMethod(\"post\");",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "method",
                                "type": "String",
                                "description": "The HTTP method to perform."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_RMV2-setHttpTimeout_N",
                        "short_description": "Set the amount of time the REST message waits for a response from the web service\n    provider before the request times out.",
                        "description": "<p>In the following example, replace <var class=\"keyword varname\">REST_message_record</var> with the name of\n        the REST message record from your instance.</p>",
                        "name": "setHttpTimeout(Number timeoutMs)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var sm = new sn_ws.RESTMessageV2(\"&lt;REST_message_record&gt;\",\"get\"); //Might throw exception if message doesn't exist or not visible due to scope.\nsm.setHttpTimeout(6000);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "timeoutMs",
                                "type": "Number",
                                "description": "The amount of time, in milliseconds, before the call to the REST provider times\n                out."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "RMV2-setLogLevel_S",
                        "short_description": "Set the log level for this message and the corresponding response.",
                        "description": "<p>Setting a log level using the RESTMessageV2 API overrides the log level configured on the\n        REST message record. This log level may not apply if the endpoint domain is blacklisted, or\n        if the property <span class=\"keyword parmname\">glide.outbound_http_log.override</span> is true. To view\n        outbound web service logs, navigate to <span class=\"ph menucascade\"><span class=\"ph uicontrol\">System Logs</span> &gt; <span class=\"ph uicontrol\">Outbound HTTP Requests</span></span>.</p>",
                        "name": "setLogLevel(String level)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var rm = new sn_ws.RESTMessageV2();\nrm.setLogLevel(âallâ);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "level",
                                "type": "String",
                                "description": "The log level. Valid values are basic, elevated, and all."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_RMV2-setMIDServer_S",
                        "short_description": "Configure the REST message to communicate through a MID Server.",
                        "description": "<p>In the following example, replace <var class=\"keyword varname\">REST_message_record</var> with the name of\n        the REST message record from your instance.</p>",
                        "name": "setMIDServer(String midServer)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var sm = new sn_ws.RESTMessageV2(\"&lt;REST_message_record&gt;\",\"get\"); //Might throw exception if message doesn't exist or not visible due to scope.\nsm.setMIDServer(\"mid_server_name\");",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "midServer",
                                "type": "String",
                                "description": "The name of the MID Server to use. Your instance must have an active MID Server\n                with the specified name."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_RMV2-setMutualAuth_S",
                        "short_description": "Set the mutual authentication protocol profile for the REST message.",
                        "description": "<p>Setting a protocol profile using this method overrides the protocol profile selected for\n        the REST message record.</p><p>In the following example, replace <var class=\"keyword varname\">REST_message_record</var> with the name of\n        the REST message record from your instance.</p>",
                        "name": "setMutualAuth(String profileName)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var sm = new sn_ws.RESTMessageV2(\"&lt;REST_message_record&gt;\",\"get\"); //Might throw exception if message doesn't exist or not visible due to scope.\nsm.setMutualAuth(\"mutual_auth_profile_name\");",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "profileName",
                                "type": "String",
                                "description": "The <span class=\"ph uicontrol\">Name</span> of the protocol profile to use for mutual\n                authentication."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_RMV2-setQueryParameter_S_S",
                        "short_description": "Append a parameter to the end of the request URL with the form name=value.",
                        "description": "<p>For example, the code\n        setQueryParameter(\"sysparm_query\",\"active=true^ORDERBYnumber^ORDERBYDESCcategory\"); appends\n        the text sysparm_query=active=true^ORDERBYnumber^ORDERBYDESCcategory to the request URL.</p>",
                        "name": "setQueryParameter(String name, String value)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var sm = new sn_ws.RESTMessageV2();\n//Set up message, including endpoint and authentication\nsm.setQueryParameter(\"sysparm_query\",\"active=true^ORDERBYnumber^ORDERBYDESCcategory\");",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "name",
                                "type": "String",
                                "description": "The name of the URL parameter to pass."
                            },
                            {
                                "name": "value",
                                "type": "String",
                                "description": "The value to assign the URL parameter."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_RMV2-setRequestBody_String_body",
                        "short_description": "Set the body content to send to the web service provider when using PUT or POST HTTP\n    methods.",
                        "description": "<p>When you set the body content using this method, variables in the body are not substituted\n        for parameters from the REST message function record. You must explicitly define all values\n        within the REST message body.</p>",
                        "name": "setRequestBody(String body)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var sm = new sn_ws.RESTMessageV2(\"Update user\",\"post\"); //Might throw exception if message doesn't exist or not visible due to scope.\nvar body = \"&lt;Message body content&gt;\";\nsm.setRequestBody(body);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "body",
                                "type": "String",
                                "description": "The request body to send."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_RMV2-setReqBodyFromAttachment_S",
                        "short_description": "Sets the request body using an existing attachment record.",
                        "description": "<p>When you use this function with a REST message that is sent\n        through a MID server, the MID server user must have any roles required to read attachment\n        records.</p>",
                        "name": "setRequestBodyFromAttachment(String attachmentSysId)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "(function sampleRESTMessageV2() {\n    try {\n        var request = new sn_ws.RESTMessageV2();\n        request.setHttpMethod('post');\n        request.setEndpoint('&lt;web service endpoint URL&gt;');\n        request.setRequestBodyFromAttachment('&lt;attachment sys_id&gt;');\n        \n        var response = request.execute();\n        var httpResponseStatus = response.getStatusCode();\n      \n        gs.info(\"http response status_code: \" + httpResponseStatus);        \n    }\n    catch (ex) {\n        var message = ex.getMessage();\n        gs.info(message);\n    }\n})();",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "attachmentSysId",
                                "type": "String",
                                "description": "The sys_id of the Attachment [sys_attachment] record you want to send in this\n                REST message."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_RMV2-setRequestHeader_S_S",
                        "short_description": "Set an HTTP header in the REST message to the specified value.",
                        "description": "<p>In the following example, replace <var class=\"keyword varname\">REST_message_record</var> with the name of\n        the REST message record from your instance.</p>",
                        "name": "setRequestHeader(String name, String value)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var sm = new sn_ws.RESTMessageV2(\"&lt;REST_message_record&gt;\",\"get\"); //Might throw exception if message doesn't exist or not visible due to scope.\nsm.setRequestHeader(\"Accept\",\"Application/json\");",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "name",
                                "type": "String",
                                "description": "The name of the header."
                            },
                            {
                                "name": "value",
                                "type": "String",
                                "description": "The value to assign to the specified header."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_RMv2-setRequestorProfile_S_S",
                        "short_description": "Override the default requestor profile for the REST message in order to retrieve an\n    OAuth access token associated with a different requestor.",
                        "description": "<p>This method applies only to REST messages configured to use OAuth 2.0 authentication. This\n        method is optional and is unnecessary in most configurations.</p>",
                        "name": "setRequestorProfile(String requestorContext, String requestorId)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "requestorContext",
                                "type": "String",
                                "description": "Â "
                            },
                            {
                                "name": "requestorId",
                                "type": "String",
                                "description": "Â "
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_RMV2-setStringParameter_String_name_String_value",
                        "short_description": "Set a REST message function variable with the specified name from the REST message\n    record to the specified value.",
                        "description": "<p>XML reserved characters in the value are converted to the equivalent escaped characters.\n        Use <span class=\"keyword apiname\">setStringParameterNoEscape</span> to set a variable without escaping XML\n        reserved characters.</p><p>In the following example, replace <var class=\"keyword varname\">REST_message_record</var> with the name of\n        the REST message record from your instance.</p>",
                        "name": "setStringParameter(String name, String value)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var sm = new sn_ws.RESTMessageV2(\"&lt;REST_message_record&gt;\",\"get\"); //Might throw exception if message doesn't exist or not visible due to scope.\nsm.setStringParameter(\"s\",\"NOW\");",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "name",
                                "type": "String",
                                "description": "The name of the REST message variable. This parameter must be defined in the\n                REST message record before you can assign a value to it."
                            },
                            {
                                "name": "value",
                                "type": "String",
                                "description": "The value to assign the variable."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_RMV2-setStrParamNoEscape_S_S",
                        "short_description": "Set a REST message function variable with the specified name from the REST message\n    record to the specified value.",
                        "description": "<p>This method is equivalent to <span class=\"keyword apiname\">setStringParameter</span> but does not escape XML\n        reserved characters.</p><p>In the following example, replace <var class=\"keyword varname\">REST_message_record</var> with the name of\n        the REST message record from your instance.</p>",
                        "name": "setStringParameterNoEscape(String name, String value)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var sm = new sn_ws.RESTMessageV2(\"&lt;REST_message_record&gt;\",\"get\"); //Might throw exception if message doesn't exist or not visible due to scope.\nsm.setStringParameterNoEscape(\"s\",\"NOW\");",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "name",
                                "type": "String",
                                "description": "The name of the REST message variable. This parameter must be defined in the\n                REST message record before you can assign a value to it."
                            },
                            {
                                "name": "value",
                                "type": "String",
                                "description": "The value to assign the variable."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "A RESTResponseV2 object is returned by the RESTMessageV2 methods <span class=\"keyword apiname\">execute()</span>\n    and<span class=\"keyword apiname\"> executeAsync()</span>.<br/><br/>You can use this API in scoped applications, or within the global scope.",
                "short_description": "The RESTResponseV2 API allows you to use the data returned by an outbound REST message\n  in JavaScript code.",
                "identifier": "c_RESTResponseV2API",
                "name": "RESTResponseV2 - Scoped, Global",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "RRV2-getAllHeaders",
                        "short_description": "Return all headers contained in the response, including any duplicate\n    headers.",
                        "description": "",
                        "name": "getAllHeaders()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var r = new sn_ws.RESTMessageV2('&lt;A REST message&gt;', 'get');\nvar response = r.execute();\nvar headers = response.getAllHeaders();\nfor(var i in headers){\n  gs.info(headers[i].name + ': ' + headers[i].value);\n}",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "List&lt;GlideHTTPHeader&gt;",
                            "description": "The list of headers contained in the response. Each header is represented as a\n                GlideHTTPHeader object which contains the header <var class=\"keyword varname\">name</var> and\n                  <var class=\"keyword varname\">value</var>."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_RESTResponseV2-getBody",
                        "short_description": "Get the content of the REST response body.",
                        "description": "<p>Use this function when you want to get the request body as text content. Do not use this\n        method when saving the response as a binary attachment. If a RESTMessageV2 object called the\n          <span class=\"keyword apiname\">saveResponseBodyAsAttachment(...)</span> function, using\n          <span class=\"keyword apiname\">getBody()</span> on the associated RESTResponseV2 object will cause an error.\n        When saving the response as an attachment, if the outbound REST message fails, call\n          <span class=\"keyword apiname\">getErrorMessage()</span> on the response to retrieve the body content.</p>",
                        "name": "getBody()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var sm = new sn_ws.RESTMessageV2(\"Yahoo Finance\",\"get\"); //Might throw exception if message doesn't exist or not visible due to scope.\nvar response = sm.execute();\nvar responseBody = response.getBody();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The REST response body."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_RESTResponseV2-getCookies",
                        "short_description": "Returns all cookies included in the response.",
                        "description": "",
                        "name": "getCookies()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var cookies = response.getCookies();\nvar i;\nfor(i=0;i&lt;cookies.size();i++) {\n   gs.info(âcookie: â + cookies.get(i));\n}\n",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Object",
                            "description": "The list of cookies. Iterate through the list to perform operations on each\n                cookie."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_RESTResponseV2-getErrorCode",
                        "short_description": "Get the numeric error code if there was an error during the REST transaction.",
                        "description": "<p>This error code is specific to the <span class=\"ph\">Now Platform</span>, it is not an HTTP\n        error code. Provide this error code if you require assistance from ServiceNow Customer\n        Support</p>",
                        "name": "getErrorCode()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var sm = new sn_ws.RESTMessageV2(\"Yahoo Finance\",\"get\"); //Might throw exception if message doesn't exist or not visible due to scope.\nvar response = sm.execute();\nvar errorCode = response.getErrorCode();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Number",
                            "description": "The numeric error code, such as 1 for socket timeout."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_RESTResponseV2-getErrorMessage",
                        "short_description": "Get the error message if there was an error during the REST transaction.",
                        "description": "",
                        "name": "getErrorMessage()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var sm = new sn_ws.RESTMessageV2(\"Yahoo Finance\",\"get\"); //Might throw exception if message doesn't exist or not visible due to scope.\nvar response = sm.execute();\nvar errorMsg = response.getErrorMessage();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The error message."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_RESTResponseV2-getHeader_S",
                        "short_description": "Get the value for a specified header.",
                        "description": "",
                        "name": "getHeader(String name)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var sm = new sn_ws.RESTMessageV2(\"Yahoo Finance\",\"get\"); //Might throw exception if message doesn't exist or not visible due to scope.\nvar response = sm.execute();\nvar headerVal = response.getHeader(\"Content-Type\");",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "name",
                                "type": "String",
                                "description": "The name of the header that you want the value for, such as Set-Cookie."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "The value of the specified header."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_RESTResponseV2-getHeaders",
                        "short_description": "Get all headers returned in the REST response and the associated values.",
                        "description": "<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> If a header is present more than once in the response, such as a Set-Cookie header,\n          this function returns only the last of the duplicate headers. To return all headers\n          including duplicates, use the <span class=\"keyword apiname\">getAllHeaders()</span> function.</div></p>",
                        "name": "getHeaders()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var sm = new sn_ws.RESTMessageV2(\"Yahoo Finance\",\"get\"); //Might throw exception if message doesn't exist or not visible due to scope.\nvar response = sm.execute();\nvar headers = response.getHeaders();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Object",
                            "description": "An Object that maps the name of each header to the associated value."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_RESTResponseV2-getQueryString",
                        "short_description": "Get the fully-resolved query sent to the REST endpoint..",
                        "description": "<p>This query contains the endpoint URL as well as any values assigned to variables in the\n        REST message. Use this method only with responses to direct requests. This method is not\n        supported for requests sent asynchronously, or requests sent using a MID server.</p>",
                        "name": "getQueryString()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var sm = new sn_ws.RESTMessageV2(\"Yahoo Finance\",\"get\"); //Might throw exception if message doesn't exist or not visible due to scope.\nvar response = sm.execute();\nvar queryString = response.getQueryString();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The fully-resolved query."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_RRV2-getResponseAttachmentSysid",
                        "short_description": "Get the sys_id value of the attachment created from the response body\n    content.",
                        "description": "<p>If the RESTMessageV2 object associated with this response called the\n          <span class=\"keyword apiname\">saveResponseBodyAsAttachment(...)</span> function, use\n          <span class=\"keyword apiname\">getResponseAttachmentSysid()</span> to get the sys_id of the created\n        attachment record. Use this function when you want to perform additional operations with the\n        new attachment record.</p>",
                        "name": "getResponseAttachmentSysid()",
                        "type": "Method",
                        "examples": [],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The sys_id of the new attachment record."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_RESTResponseV2-getStatusCode",
                        "short_description": "Get the numeric HTTP status code returned by the REST provider.",
                        "description": "",
                        "name": "getStatusCode()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var sm = new sn_ws.RESTMessageV2(\"Yahoo Finance\",\"get\"); //Might throw exception if message doesn't exist or not visible due to scope.\nvar response = sm.execute();\nvar statusCode = response.getStatusCode();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Number",
                            "description": "The numeric status code returned by the REST provider, such as 200 for a\n                successful response."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_RESTResponseV2-haveError",
                        "short_description": "Indicate if there was an error during the REST transaction.",
                        "description": "",
                        "name": "haveError()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var sm = new sn_ws.RESTMessageV2(\"Yahoo Finance\",\"get\"); //Might throw exception if message doesn't exist or not visible due to scope.\nvar response = sm.execute();\nvar error = response.haveError();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "boolean",
                            "description": "Returns true if there was an error, false if there was no error."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_RESTResponseV2-waitForResponse_N",
                        "short_description": "Set the amount of time the instance waits for a response from the web service\n    provider.",
                        "description": "<p>This method overrides the property glide.rest.outbound.ecc_response.timeout for this REST\n        response.</p>",
                        "name": "waitForResponse(Number timeoutSecs)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var sm = new sn_ws.RESTMessageV2(\"Yahoo Finance\",\"get\"); //Might throw exception if message doesn't exist or not visible due to scope.\nvar response = sm.executeAsync();\nresponse.waitForResponse(60);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "timeoutSecs",
                                "type": "Number",
                                "description": "The amount of time, in seconds, to wait for this response."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "Use the <span class=\"keyword apiname\">SOAPResponseV2</span> API to manage the response returned by the SOAP\n   provider.<br/><br/>You can use this API in scoped applications, or within the global scope.<br/><br/>See also:<ul class=\"ul\" id=\"c_SOAPMessageV2API__ul_kh3_zx1_w4b\">\n    <li class=\"li\"><a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-application-development/page/app-store/dev_portal/API_reference/SOAPMessageV2/reference/r_DirectSOAPMessageV2Example.html\" target=\"_blank\">Direct SOAPMessageV2 example</a></li>\n\n    <li class=\"li\"><a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-application-development/page/app-store/dev_portal/API_reference/SOAPMessageV2/reference/r_RecordlessSOAPMessageV2Example.html\" target=\"_blank\">Recordless SOAPMessageV2\n     example</a></li>\n\n    <li class=\"li\"><a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-application-development/page/app-store/dev_portal/API_reference/SOAPMessageV2/reference/r_AsyncronousSOAPMessageV2Example.html\" target=\"_blank\">Asynchronous SOAPMessageV2\n     example</a></li>\n\n    <li class=\"li\"><a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-application-development/page/app-store/dev_portal/API_reference/SOAPMessageV2/reference/r_SOAPMessageV2MIDServerExample.html\" target=\"_blank\">SOAPMessageV2 MID server\n     example</a></li>\n\n   </ul>",
                "short_description": "The <span class=\"keyword apiname\">SOAPMessageV2</span> API allows you to send an outbound SOAP message\n  using JavaScript.",
                "identifier": "c_SOAPMessageV2API",
                "name": "SOAPMessageV2 - Scoped, Global",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "r_SMV2-SOAPMessageV2",
                        "short_description": "Instantiates an empty SOAPMessageV2 object.",
                        "description": "<p>When using an object instantiated this way, you must manually specify a SOAP action and\n        endpoint.</p>",
                        "name": "SOAPMessageV2()",
                        "type": "Constructor",
                        "examples": [
                            {
                                "script": "var sm = new sn_ws.SOAPMessageV2();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SMV2-SOAPMessageV2_String_soapMessage_String_soapFunction",
                        "short_description": "Instantiate a SOAPMessageV2 object from a\n    SOAP message record\n    and a function associated with that record.",
                        "description": "<p>Values such as the endpoint, authentication, or MID Server settings from the SOAP message\n        record apply to this object.</p>",
                        "name": "SOAPMessageV2(String soapMessage, String soapFunction)",
                        "type": "Constructor",
                        "examples": [
                            {
                                "script": "var sm = new sn_ws.SOAPMessageV2(\"StockQuote\",\"GetQuote\"); //Might throw exception if message doesn't exist or not visible due to scope.",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "soapMessage",
                                "type": "String",
                                "description": "The SOAP message record you want to use as the base for this object."
                            },
                            {
                                "name": "soapFunction",
                                "type": "String",
                                "description": "The SOAP function you want to execute. Available SOAP functions depend on the\n                WSDL supplied by the web service provider."
                            }
                        ],
                        "return": {
                            "type": "",
                            "description": ""
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SMV2-execute",
                        "short_description": "Send the SOAP message to the endpoint.",
                        "description": "",
                        "name": "execute()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var sm = new sn_ws.SOAPMessageV2(\"StockQuote\",\"GetQuote\"); //Might throw exception if message doesn't exist or not visible due to scope.\nvar response = sm.execute(); //Might throw exception if http connection timed out or some issue with sending request itself because of encryption/decryption of password.",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "<a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/sn_ws-namespace/c_SOAPResponseV2API\" title=\"The SOAPResponseV2 API allows you to use the data returned by an outbound SOAP message in JavaScript code.\">SOAPResponseV2 - Scoped, Global</a>",
                            "description": "The response returned by the SOAP provider."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SMV2-executeAsync",
                        "short_description": "Send the SOAP message to\n    the ECC queue.",
                        "description": "<p>SOAP messages in the ECC queue are processed by the SOAPClient business rule.</p><p>By default, this business rule does not run asynchronously. To configure this business rule\n        to run asynchronously, set the <span class=\"ph uicontrol\">When</span> value to Async and add\n        current.update() to the end of the <span class=\"ph uicontrol\">Script</span>. The instance does not wait\n        for a response from the web service provider when sending a message through the ECC\n        queue.</p>",
                        "name": "executeAsync()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var sm = new sn_ws.SOAPMessageV2(\"StockQuote\",\"GetQuote\"); //Might throw exception if message doesn't exist or not visible due to scope.\nvar response = sm.executeAsync();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "<a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/sn_ws-namespace/c_SOAPResponseV2API\" title=\"The SOAPResponseV2 API allows you to use the data returned by an outbound SOAP message in JavaScript code.\">SOAPResponseV2 - Scoped, Global</a>",
                            "description": "The response returned by the SOAP provider.<div class=\"note note\"><span class=\"notetitle\">Note:</span>  Attempting to use the SOAP\n                  response object before the response has been processed may result in a timeout\n                  error.</div>"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SMV2-getEndpoint",
                        "short_description": "Get the endpoint for the SOAP message.",
                        "description": "",
                        "name": "getEndpoint()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var sm = new sn_ws.SOAPMessageV2(\"StockQuote\",\"GetQuote\"); //Might throw exception if message doesn't exist or not visible due to scope.\nvar endpoint = sm.getEndpoint();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The URL of the SOAP web service provider."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SMV2-getRequestBody",
                        "short_description": "Returns the content of the SOAP message body.",
                        "description": "<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> Before calling the <span class=\"keyword apiname\">getRequestBody()</span> method, you must call the <a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/sn_ws-namespace/c_SOAPMessageV2API#r_SMV2-execute\" title=\"Send the SOAP message to the endpoint.\">execute()</a> method to obtain the response object.\n        </div></p>",
                        "name": "getRequestBody()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var sm = new sn_ws.SOAPMessageV2(\"StockQuote\",\"StockQuoteSoap.GetQuote\"); //Might throw exception if message doesn't exist or not visible due to scope.\nvar response = sm.execute();\nvar requestBody = response.getRequestBody();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "SOAP message body."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SMV2-getRequestHeader_String_headerName",
                        "short_description": "Get the value for an HTTP header specified by the SOAP client.",
                        "description": "<p>By default, this method cannot return the value for a header set automatically by the\n        system. To grant this method access to all headers, set the property glide.http.log_debug to\n        true.</p>",
                        "name": "getRequestHeader(String headerName)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var sm = new sn_ws.SOAPMessageV2(\"StockQuote\",\"GetQuote\"); //Might throw exception if message doesn't exist or not visible due to scope.\nvar header = sm.getRequestHeader(\"Accept\");",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "headerName",
                                "type": "String",
                                "description": "The request header you want to get the value for."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "The value of the specified header."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SMV2-getRequestHeaders",
                        "short_description": "Get HTTP headers that were set by the SOAP client and the associated\n    values.",
                        "description": "<p>This method does not return headers set automatically by the system. To configure this\n        method to return all headers, set the property glide.http.log_debug to true.</p>",
                        "name": "getRequestHeaders()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var sm = new sn_ws.SOAPMessageV2(\"StockQuote\",\"GetQuote\"); //Might throw exception if message doesn't exist or not visible due to scope.\nvar requestHeaders = sm.getRequestHeaders();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Object",
                            "description": "An Object that maps the name of each header to the associated value."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SMV2-setBasicAuth_S_S",
                        "short_description": "Set basic authentication headers for the SOAP message.",
                        "description": "<p>Setting basic authentication headers using this method overrides\n        basic\n        authentication values defined in the SOAP message record.</p>",
                        "name": "setBasicAuth(String userName, String userPass)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var sm = new sn_ws.SOAPMessageV2(\"StockQuote\",\"GetQuote\"); //Might throw exception if message doesn't exist or not visible due to scope.\nsm.setBasicAuth(\"username\",\"password\");",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "userName",
                                "type": "String",
                                "description": "The username to use when authenticating the SOAP message."
                            },
                            {
                                "name": "userPass",
                                "type": "String",
                                "description": "The password for the specified user."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SMV2-setEccCorrelator_S",
                        "short_description": "Associate outbound requests and the resulting response record in the ECC\n    queue.",
                        "description": "<p>This method only applies to SOAP messages sent through a MID Server. The correlator\n        provided populates the <span class=\"ph uicontrol\">Agent correlator</span> field on the ECC queue record\n        for the response. Provide a unique correlator for each outbound request to associate the\n        correct results in the ECC queue with the request when designing asynchronous automation\n        through a MID Server.</p>",
                        "name": "setEccCorrelator(String correlator)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var sm = new sn_ws.SOAPMessageV2(\"StockQuote\",\"GetQuote\"); //Might throw exception if message doesn't exist or not visible due to scope.\nsm.setEccCorrelator(\"unique_id\");",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "correlator",
                                "type": "String",
                                "description": "A unique identifier."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SMV2-setEccParameter_String_name_String_value",
                        "short_description": "Override a value from the database by writing to the SOAP message payload.",
                        "description": "<p>This method only applies to SOAP messages sent through a MID Server. Use this method when a\n        value from the SOAP message in the database is invalid, such as when the endpoint URL is\n        longer than the maximum <span class=\"ph uicontrol\">SOAP endpoint</span> field length.</p><p>These are valid values for the name parameter.<ul class=\"ul\" id=\"r_SMV2-setEccParameter_String_name_String_value__ul_cfp_wck_xq\">\n          <li class=\"li\"><span class=\"keyword parmname\">source</span>: the endpoint URL.</li>\n\n          <li class=\"li\"><span class=\"keyword parmname\">name</span>: the SOAP message function to run.</li>\n\n        </ul></p>",
                        "name": "setEccParameter(String name, String value)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var sm = new sn_ws.SOAPMessageV2(\"StockQuote\",\"GetQuote\"); //Might throw exception if message doesn't exist or not visible due to scope.\nsm.setEccParameter(\"source\",\"http://very.long.endpoint\");",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "name",
                                "type": "String",
                                "description": "The name of the ECC parameter."
                            },
                            {
                                "name": "value",
                                "type": "String",
                                "description": "The value to assign to the specified ECC parameter."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SMV2-setEndpoint_String_endpoint",
                        "short_description": "Set the endpoint for the SOAP message.",
                        "description": "<p>By default, the SOAP message uses the endpoint specified in the SOAP message record. Use\n        this method to override the default. You must call this method when using the <a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/sn_ws-namespace/c_SOAPMessageV2API#r_SMV2-SOAPMessageV2\" title=\"Instantiates an empty SOAPMessageV2 object.\">SOAPMessageV2()</a> constructor with no\n        parameters.</p>",
                        "name": "setEndpoint(String endpoint)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var sm = new sn_ws.SOAPMessageV2();\nsm.setEndpoint(\"http://web.service.endpoint\");",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "endpoint",
                                "type": "String",
                                "description": "The URL of the SOAP web service provider you want to interface with."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SMV2-setHttpTimeout_Number_timeoutMs",
                        "short_description": "Set the amount of time the SOAP message waits for a response from the web service\n    provider before the request times out.",
                        "description": "",
                        "name": "setHttpTimeout(Number timeoutMs)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var sm = new sn_ws.SOAPMessageV2(\"StockQuote\",\"GetQuote\"); //Might throw exception if message doesn't exist or not visible due to scope.\nsm.setHttpTimeout(6000);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "timeoutMs",
                                "type": "Number",
                                "description": "The amount of time to wait for a response from the web service provider, in\n                milliseconds."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "SMV2-setLogLevel_S",
                        "short_description": "Sets the log level for this message and the corresponding response.",
                        "description": "<p>Setting a log level using the SOAPMessageV2 API overrides the log level configured on the\n        SOAP message record. This log level may not apply if the endpoint domain is blacklisted, or\n        if the property <span class=\"keyword parmname\">glide.outbound_http_log.override</span> is true. To view\n        outbound web service logs, navigate to <span class=\"ph menucascade\"><span class=\"ph uicontrol\">System Logs</span> &gt; <span class=\"ph uicontrol\">Outbound HTTP Requests</span></span>.</p>",
                        "name": "setLogLevel(String level)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "level",
                                "type": "String",
                                "description": "The log level. Valid values are basic, elevated, and all."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SMV2-setMIDServer_String_midServerName",
                        "short_description": "Configure the SOAP message to be sent through a MID Server.",
                        "description": "<p>By default, the SOAP message uses the MID Server specified in the SOAP message function\n        record. Use this method to override the default.</p>",
                        "name": "setMIDServer(String midServerName)",
                        "type": "Method",
                        "examples": [],
                        "params": [
                            {
                                "name": "midServerName",
                                "type": "String",
                                "description": "The name of the MID Server you want to send the SOAP message through. Your\n                instance must have an active MID Server with the specified name."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SMV2-setMutualAuth_S",
                        "short_description": "Set the mutual authentication\n    protocol\n    profile for the SOAP message.",
                        "description": "<p>Setting a protocol profile using this method overrides the protocol profile selected for\n        the SOAP message record.</p>",
                        "name": "setMutualAuth(String profileName)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var sm = new sn_ws.SOAPMessageV2(\"StockQuote\",\"GetQuote\"); //Might throw exception if message doesn't exist or not visible due to scope.\nsm.setMutualAuth(\"auth_profile_name\");",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "profileName",
                                "type": "String",
                                "description": "The name of the protocol profile to use for mutual authentication."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SMV2-setRequestBody_S",
                        "short_description": "Set the body content to send to the web service provider.",
                        "description": "<p>When you set the body content using this method, variables in the body are not substituted\n        for parameters from the SOAP message function record. You must explicitly define all values\n        within the SOAP message body.</p>",
                        "name": "setRequestBody(String requestBody)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var sm = new sn_ws.SOAPMessageV2(\"StockQuote\",\"GetQuote\"); //Might throw exception if message doesn't exist or not visible due to scope.\nvar body = \"&lt;SOAP message body&gt;\";\nsm.setRequestBody(body);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "requestBody",
                                "type": "String",
                                "description": "The body of the SOAP message."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SMV2-setRequestHeader_String_headerName_String_headerValue",
                        "short_description": "Set an HTTP header in the SOAP message to the specified value.",
                        "description": "",
                        "name": "setRequestHeader(String headerName, String headerValue)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var sm = new sn_ws.SOAPMessageV2(\"StockQuote\",\"GetQuote\"); //Might throw exception if message doesn't exist or not visible due to scope.\nsm.setRequestHeader(\"Accept\",\"Application/json\");",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "headerName",
                                "type": "String",
                                "description": "The name of the header."
                            },
                            {
                                "name": "headerValue",
                                "type": "String",
                                "description": "The value to assign to the specified header."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SMV2-setSOAPAction_S",
                        "short_description": "Define the SOAP action this SOAP message performs.",
                        "description": "<p>The WSDL for your web service provider lists SOAP actions you can perform. You must call\n        this method when using the <a class=\"xref\" href=\"dev.do#!/reference/api/paris/server/sn_ws-namespace/c_SOAPMessageV2API#r_SMV2-SOAPMessageV2\" title=\"Instantiates an empty SOAPMessageV2 object.\">SOAPMessageV2()</a> constructor with no parameters.</p>",
                        "name": "setSOAPAction(String soapAction)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var sm = new sn_ws.SOAPMessageV2();\nsm.setSOAPAction(\"GetQuote\");\n//construct SOAP message by specifying endpoint and auth\nsm.execute();",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "soapAction",
                                "type": "String",
                                "description": "The SOAP action this SOAP message performs."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SMV2-setStringParameter_String_name_String_value",
                        "short_description": "Set a variable with the specified name from the SOAP message record to the specified\n    value.",
                        "description": "<p>XML reserved characters in the value are converted to the equivalent escaped\n        characters.</p>",
                        "name": "setStringParameter(String name, String value)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var sm = new sn_ws.SOAPMessageV2(\"StockQuote\",\"GetQuote\"); //Might throw exception if message doesn't exist or not visible due to scope.\nsm.setStringParameter(\"symbol\",\"NOW\");",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "name",
                                "type": "String",
                                "description": "The name of the SOAP message variable."
                            },
                            {
                                "name": "value",
                                "type": "String",
                                "description": "The value to assign to the specified variable."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SMV2-setStringParameterNoEscape_S_S",
                        "short_description": "Set a variable with the specified name from the SOAP message record to the specified\n    value.",
                        "description": "<p>This method is equivalent to setStringParameter but does not escape XML reserved\n        characters.</p>",
                        "name": "setStringParameterNoEscape(String name, String value)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var sm = new sn_ws.SOAPMessageV2(\"StockQuote\",\"GetQuote\"); //Might throw exception if message doesn't exist or not visible due to scope.\nsm.setStringParameterNoEscape(\"symbol\",\"NOW\");",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "name",
                                "type": "String",
                                "description": "The name of the SOAP message variable."
                            },
                            {
                                "name": "value",
                                "type": "String",
                                "description": "The value to assign to the specified variable."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SMV2-setWSSecurity_S_S_S_S",
                        "short_description": "Sets web service security values for the SOAP message.",
                        "description": "<p>Setting security values using this method overwrites\n        web\n        service security values defined for the SOAP message record.</p>",
                        "name": "setWSSecurity(String keystoreId, String keystoreAlias, String keystorePassword, String certificateId)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var sm = new sn_ws.SOAPMessageV2(\"StockQuote\",\"GetQuote\"); //Might throw exception if message doesn't exist or not visible due to scope.\nsm.setWSSecurity(\"70d65e074f3812001f6eac118110c71a\",\"Quote keys\",\"UXr82cqX75Z7MaSa+EyjGA==\",\"ba969a074f3812001f6eac118110c76d\");",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "keystoreId",
                                "type": "String",
                                "description": "The sys_id of the Java or PKCS12 key store to use."
                            },
                            {
                                "name": "keystoreAlias",
                                "type": "String",
                                "description": "The alias that identifies the public and private keys."
                            },
                            {
                                "name": "keystorePassword",
                                "type": "String",
                                "description": "The password assigned to the key store record."
                            },
                            {
                                "name": "certificateId",
                                "type": "String",
                                "description": "The sys_id of the trusted server certificate."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    }
                ]
            },
            {
                "description": "A SOAPResponseV2 object is returned by the <span class=\"keyword apiname\">SOAPMessageV2</span> methods\n    <span class=\"keyword apiname\">execute()</span> and <span class=\"keyword apiname\">executeAsync()</span>.<br/><br/>You can use this API in scoped applications, or within the global scope.<br/><br/>See also:<ul class=\"ul\" id=\"c_SOAPResponseV2API__ul_kh3_zx1_w4b\">\n    <li class=\"li\"><a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-application-development/page/app-store/dev_portal/API_reference/SOAPMessageV2/reference/r_DirectSOAPMessageV2Example.html\" target=\"_blank\">Direct SOAPMessageV2 example</a></li>\n\n    <li class=\"li\"><a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-application-development/page/app-store/dev_portal/API_reference/SOAPMessageV2/reference/r_RecordlessSOAPMessageV2Example.html\" target=\"_blank\">Recordless SOAPMessageV2\n     example</a></li>\n\n    <li class=\"li\"><a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-application-development/page/app-store/dev_portal/API_reference/SOAPMessageV2/reference/r_AsyncronousSOAPMessageV2Example.html\" target=\"_blank\">Asynchronous SOAPMessageV2\n     example</a></li>\n\n    <li class=\"li\"><a class=\"extRef\" href=\"https://docs.servicenow.com/bundle/paris-application-development/page/app-store/dev_portal/API_reference/SOAPMessageV2/reference/r_SOAPMessageV2MIDServerExample.html\" target=\"_blank\">SOAPMessageV2 MID server\n     example</a></li>\n\n   </ul>",
                "short_description": "The <span class=\"keyword apiname\">SOAPResponseV2</span> API allows you to use the data returned by an\n  outbound SOAP message in JavaScript code.",
                "identifier": "c_SOAPResponseV2API",
                "name": "SOAPResponseV2 - Scoped, Global",
                "type": "Class",
                "methods": [
                    {
                        "identifier": "SRV2-getAllHeaders",
                        "short_description": "Return all headers contained in the response, including any duplicate\n    headers.",
                        "description": "",
                        "name": "getAllHeaders()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var r = new sn_ws.SOAPMessageV2('&lt;A SOAP message&gt;', 'get');\nvar response = r.execute();\nvar headers = response.getAllHeaders();\nfor(var i in headers){\n  gs.info(headers[i].name + ': ' + headers[i].value);\n}",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "List&lt;GlideHTTPHeader&gt;",
                            "description": "The list of headers contained in the response. Each header is represented as a\n                GlideHTTPHeader object which contains the header <var class=\"keyword varname\">name</var> and\n                  <var class=\"keyword varname\">value</var>."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SOAPResponseV2-getBody",
                        "short_description": "Get the content of the SOAP response body.",
                        "description": "",
                        "name": "getBody()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var body = response.getBody();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The SOAP response body."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SOAPResponseV2-getCookies",
                        "short_description": "Returns all cookies included in the response.",
                        "description": "",
                        "name": "getCookies()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var cookies = response.getCookies();\nvar i;\nfor(i=0;i&lt;cookies.size();i++) {\n   gs.info(âcookie: â + cookies.get(i));\n}",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Object",
                            "description": "The list of cookies. Iterate through the list to perform operations on each\n                cookie."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SOAPResponseV2-getErrorCode",
                        "short_description": "Get the numeric error code if there was an error during the SOAP\n    transaction.",
                        "description": "<p>This error code is specific to the <span class=\"ph\">Now Platform</span>, it is not an HTTP error code.\n        Provide this error code if you require assistance from <span class=\"ph\">ServiceNow Technical Support</span>.</p>",
                        "name": "getErrorCode()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var errorCode = response.getErrorCode();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Number",
                            "description": "The numeric error code, such as 1 for a socket timeout."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SOAPResponseV2-getErrorMessage",
                        "short_description": "Get the error message if there was an error during the SOAP transaction.",
                        "description": "",
                        "name": "getErrorMessage()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var errorMsg = response.getErrorMessage();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "String",
                            "description": "The error message."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SOAPResponseV2-getHeader_S",
                        "short_description": "Get the value for a specified HTTP header.",
                        "description": "",
                        "name": "getHeader(String name)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var headerVal = response.getHeader(\"Accept\");",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "name",
                                "type": "String",
                                "description": "The name of the header that you want the value for, such as Set-Cookie."
                            }
                        ],
                        "return": {
                            "type": "String",
                            "description": "The value of the specified header."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SOAPResponseV2-getHeaders",
                        "short_description": "Get all HTTP headers returned in the SOAP response and the associated\n    values.",
                        "description": "<p><div class=\"note note\"><span class=\"notetitle\">Note:</span> If a header is present more than once in the response, such as a Set-Cookie header,\n          this function returns only the last of the duplicate headers. To return all headers\n          including duplicates, use the <span class=\"keyword apiname\">getAllHeaders()</span> function.</div></p>",
                        "name": "getHeaders()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var headers = response.getHeaders();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Object",
                            "description": "An Object that maps the name of each header to the associated value."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SOAPResponseV2-getStatusCode",
                        "short_description": "Get the numeric HTTP status code returned by the SOAP provider.",
                        "description": "",
                        "name": "getStatusCode()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var statusCode = response.getStatusCode();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "Number",
                            "description": "The numeric status code returned by the SOAP provider, such as 200 for a\n                successful response."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SOAPResponseV2-haveError",
                        "short_description": "Indicate if there was an error during the SOAP transaction.",
                        "description": "",
                        "name": "haveError()",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "var error = response.haveError();",
                                "description": ""
                            }
                        ],
                        "params": [],
                        "return": {
                            "type": "boolean",
                            "description": "Returns true if there was an error, false if there was no error."
                        },
                        "extras": []
                    },
                    {
                        "identifier": "r_SOAPResponseV2-waitForResponse_N",
                        "short_description": "Set the amount of time the instance waits for a response from the web service\n    provider.",
                        "description": "<p>This method overrides the property glide.soap.outbound.ecc_response.timeout for this SOAP\n        response.</p>",
                        "name": "waitForResponse(Number timeoutSecs)",
                        "type": "Method",
                        "examples": [
                            {
                                "script": "response.waitForResponse(60);",
                                "description": ""
                            }
                        ],
                        "params": [
                            {
                                "name": "timeoutSecs",
                                "type": "Number",
                                "description": "The amount of time, in seconds, to wait for this response."
                            }
                        ],
                        "return": {
                            "type": "void",
                            "description": "Method does not return a value"
                        },
                        "extras": []
                    }
                ]
            }
        ]
    }
]